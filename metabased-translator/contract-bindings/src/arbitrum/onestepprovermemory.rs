/**

Generated by the following Solidity interface...
```solidity
interface OneStepProverMemory {
    type MachineStatus is uint8;
    type ValueType is uint8;
    struct ExecutionContext {
        uint256 maxInboxMessagesRead;
        address bridge;
        bytes32 initialWasmModuleRoot;
    }
    struct Instruction {
        uint16 opcode;
        uint256 argumentData;
    }
    struct Machine {
        MachineStatus status;
        ValueStack valueStack;
        MultiStack valueMultiStack;
        ValueStack internalStack;
        StackFrameWindow frameStack;
        MultiStack frameMultiStack;
        bytes32 globalStateHash;
        uint32 moduleIdx;
        uint32 functionIdx;
        uint32 functionPc;
        bytes32 recoveryPc;
        bytes32 modulesRoot;
    }
    struct Module {
        bytes32 globalsMerkleRoot;
        ModuleMemory moduleMemory;
        bytes32 tablesMerkleRoot;
        bytes32 functionsMerkleRoot;
        bytes32 extraHash;
        uint32 internalsOffset;
    }
    struct ModuleMemory {
        uint64 size;
        uint64 maxSize;
        bytes32 merkleRoot;
    }
    struct MultiStack {
        bytes32 inactiveStackHash;
        bytes32 remainingHash;
    }
    struct StackFrame {
        Value returnPc;
        bytes32 localsMerkleRoot;
        uint32 callerModule;
        uint32 callerModuleInternals;
    }
    struct StackFrameWindow {
        StackFrame[] proved;
        bytes32 remainingHash;
    }
    struct Value {
        ValueType valueType;
        uint256 contents;
    }
    struct ValueArray {
        Value[] inner;
    }
    struct ValueStack {
        ValueArray proved;
        bytes32 remainingHash;
    }

    function executeOneStep(ExecutionContext memory, Machine memory startMach, Module memory startMod, Instruction memory inst, bytes memory proof) external pure returns (Machine memory mach, Module memory mod);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "executeOneStep",
    "inputs": [
      {
        "name": "",
        "type": "tuple",
        "internalType": "struct ExecutionContext",
        "components": [
          {
            "name": "maxInboxMessagesRead",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "bridge",
            "type": "address",
            "internalType": "contract IBridge"
          },
          {
            "name": "initialWasmModuleRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          }
        ]
      },
      {
        "name": "startMach",
        "type": "tuple",
        "internalType": "struct Machine",
        "components": [
          {
            "name": "status",
            "type": "uint8",
            "internalType": "enum MachineStatus"
          },
          {
            "name": "valueStack",
            "type": "tuple",
            "internalType": "struct ValueStack",
            "components": [
              {
                "name": "proved",
                "type": "tuple",
                "internalType": "struct ValueArray",
                "components": [
                  {
                    "name": "inner",
                    "type": "tuple[]",
                    "internalType": "struct Value[]",
                    "components": [
                      {
                        "name": "valueType",
                        "type": "uint8",
                        "internalType": "enum ValueType"
                      },
                      {
                        "name": "contents",
                        "type": "uint256",
                        "internalType": "uint256"
                      }
                    ]
                  }
                ]
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "valueMultiStack",
            "type": "tuple",
            "internalType": "struct MultiStack",
            "components": [
              {
                "name": "inactiveStackHash",
                "type": "bytes32",
                "internalType": "bytes32"
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "internalStack",
            "type": "tuple",
            "internalType": "struct ValueStack",
            "components": [
              {
                "name": "proved",
                "type": "tuple",
                "internalType": "struct ValueArray",
                "components": [
                  {
                    "name": "inner",
                    "type": "tuple[]",
                    "internalType": "struct Value[]",
                    "components": [
                      {
                        "name": "valueType",
                        "type": "uint8",
                        "internalType": "enum ValueType"
                      },
                      {
                        "name": "contents",
                        "type": "uint256",
                        "internalType": "uint256"
                      }
                    ]
                  }
                ]
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "frameStack",
            "type": "tuple",
            "internalType": "struct StackFrameWindow",
            "components": [
              {
                "name": "proved",
                "type": "tuple[]",
                "internalType": "struct StackFrame[]",
                "components": [
                  {
                    "name": "returnPc",
                    "type": "tuple",
                    "internalType": "struct Value",
                    "components": [
                      {
                        "name": "valueType",
                        "type": "uint8",
                        "internalType": "enum ValueType"
                      },
                      {
                        "name": "contents",
                        "type": "uint256",
                        "internalType": "uint256"
                      }
                    ]
                  },
                  {
                    "name": "localsMerkleRoot",
                    "type": "bytes32",
                    "internalType": "bytes32"
                  },
                  {
                    "name": "callerModule",
                    "type": "uint32",
                    "internalType": "uint32"
                  },
                  {
                    "name": "callerModuleInternals",
                    "type": "uint32",
                    "internalType": "uint32"
                  }
                ]
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "frameMultiStack",
            "type": "tuple",
            "internalType": "struct MultiStack",
            "components": [
              {
                "name": "inactiveStackHash",
                "type": "bytes32",
                "internalType": "bytes32"
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "globalStateHash",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "moduleIdx",
            "type": "uint32",
            "internalType": "uint32"
          },
          {
            "name": "functionIdx",
            "type": "uint32",
            "internalType": "uint32"
          },
          {
            "name": "functionPc",
            "type": "uint32",
            "internalType": "uint32"
          },
          {
            "name": "recoveryPc",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "modulesRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          }
        ]
      },
      {
        "name": "startMod",
        "type": "tuple",
        "internalType": "struct Module",
        "components": [
          {
            "name": "globalsMerkleRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "moduleMemory",
            "type": "tuple",
            "internalType": "struct ModuleMemory",
            "components": [
              {
                "name": "size",
                "type": "uint64",
                "internalType": "uint64"
              },
              {
                "name": "maxSize",
                "type": "uint64",
                "internalType": "uint64"
              },
              {
                "name": "merkleRoot",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "tablesMerkleRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "functionsMerkleRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "extraHash",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "internalsOffset",
            "type": "uint32",
            "internalType": "uint32"
          }
        ]
      },
      {
        "name": "inst",
        "type": "tuple",
        "internalType": "struct Instruction",
        "components": [
          {
            "name": "opcode",
            "type": "uint16",
            "internalType": "uint16"
          },
          {
            "name": "argumentData",
            "type": "uint256",
            "internalType": "uint256"
          }
        ]
      },
      {
        "name": "proof",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "mach",
        "type": "tuple",
        "internalType": "struct Machine",
        "components": [
          {
            "name": "status",
            "type": "uint8",
            "internalType": "enum MachineStatus"
          },
          {
            "name": "valueStack",
            "type": "tuple",
            "internalType": "struct ValueStack",
            "components": [
              {
                "name": "proved",
                "type": "tuple",
                "internalType": "struct ValueArray",
                "components": [
                  {
                    "name": "inner",
                    "type": "tuple[]",
                    "internalType": "struct Value[]",
                    "components": [
                      {
                        "name": "valueType",
                        "type": "uint8",
                        "internalType": "enum ValueType"
                      },
                      {
                        "name": "contents",
                        "type": "uint256",
                        "internalType": "uint256"
                      }
                    ]
                  }
                ]
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "valueMultiStack",
            "type": "tuple",
            "internalType": "struct MultiStack",
            "components": [
              {
                "name": "inactiveStackHash",
                "type": "bytes32",
                "internalType": "bytes32"
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "internalStack",
            "type": "tuple",
            "internalType": "struct ValueStack",
            "components": [
              {
                "name": "proved",
                "type": "tuple",
                "internalType": "struct ValueArray",
                "components": [
                  {
                    "name": "inner",
                    "type": "tuple[]",
                    "internalType": "struct Value[]",
                    "components": [
                      {
                        "name": "valueType",
                        "type": "uint8",
                        "internalType": "enum ValueType"
                      },
                      {
                        "name": "contents",
                        "type": "uint256",
                        "internalType": "uint256"
                      }
                    ]
                  }
                ]
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "frameStack",
            "type": "tuple",
            "internalType": "struct StackFrameWindow",
            "components": [
              {
                "name": "proved",
                "type": "tuple[]",
                "internalType": "struct StackFrame[]",
                "components": [
                  {
                    "name": "returnPc",
                    "type": "tuple",
                    "internalType": "struct Value",
                    "components": [
                      {
                        "name": "valueType",
                        "type": "uint8",
                        "internalType": "enum ValueType"
                      },
                      {
                        "name": "contents",
                        "type": "uint256",
                        "internalType": "uint256"
                      }
                    ]
                  },
                  {
                    "name": "localsMerkleRoot",
                    "type": "bytes32",
                    "internalType": "bytes32"
                  },
                  {
                    "name": "callerModule",
                    "type": "uint32",
                    "internalType": "uint32"
                  },
                  {
                    "name": "callerModuleInternals",
                    "type": "uint32",
                    "internalType": "uint32"
                  }
                ]
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "frameMultiStack",
            "type": "tuple",
            "internalType": "struct MultiStack",
            "components": [
              {
                "name": "inactiveStackHash",
                "type": "bytes32",
                "internalType": "bytes32"
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "globalStateHash",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "moduleIdx",
            "type": "uint32",
            "internalType": "uint32"
          },
          {
            "name": "functionIdx",
            "type": "uint32",
            "internalType": "uint32"
          },
          {
            "name": "functionPc",
            "type": "uint32",
            "internalType": "uint32"
          },
          {
            "name": "recoveryPc",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "modulesRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          }
        ]
      },
      {
        "name": "mod",
        "type": "tuple",
        "internalType": "struct Module",
        "components": [
          {
            "name": "globalsMerkleRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "moduleMemory",
            "type": "tuple",
            "internalType": "struct ModuleMemory",
            "components": [
              {
                "name": "size",
                "type": "uint64",
                "internalType": "uint64"
              },
              {
                "name": "maxSize",
                "type": "uint64",
                "internalType": "uint64"
              },
              {
                "name": "merkleRoot",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "tablesMerkleRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "functionsMerkleRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "extraHash",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "internalsOffset",
            "type": "uint32",
            "internalType": "uint32"
          }
        ]
      }
    ],
    "stateMutability": "pure"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod OneStepProverMemory {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052348015600e575f80fd5b50611fcd8061001c5f395ff3fe608060405234801561000f575f80fd5b5060043610610029575f3560e01c8063a92cb5011461002d575b5f80fd5b61004061003b3660046114da565b610057565b60405161004e929190611704565b60405180910390f35b61005f6113b0565b6040805160c0810182525f80825282516060808201855282825260208083018490528286018490528401919091529282018190529181018290526080810182905260a08101919091526100b187611c3b565b91506100c236879003870187611d73565b90505f6100d26020870187611e12565b905061148b602861ffff8316108015906100f15750603561ffff831611155b156100ff57506101fa6101dc565b603661ffff8316108015906101195750603e61ffff831611155b15610127575061064e6101dc565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc161ffff83160161015b57506109f16101dc565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc061ffff83160161018f5750610a496101dc565b60405162461bcd60e51b815260206004820152601560248201527f494e56414c49445f4d454d4f52595f4f50434f4445000000000000000000000060448201526064015b60405180910390fd5b6101ed84848989898663ffffffff16565b5050965096945050505050565b5f8080602861020c6020880188611e12565b61ffff160361022357505f91506004905081610461565b60296102326020880188611e12565b61ffff160361024a575060019150600890505f610461565b602a6102596020880188611e12565b61ffff1603610271575060029150600490505f610461565b602b6102806020880188611e12565b61ffff1603610298575060039150600890505f610461565b602c6102a76020880188611e12565b61ffff16036102be57505f91506001905080610461565b602d6102cd6020880188611e12565b61ffff16036102e457505f91506001905081610461565b602e6102f36020880188611e12565b61ffff160361030b57505f9150600290506001610461565b602f61031a6020880188611e12565b61ffff160361033157505f91506002905081610461565b60306103406020880188611e12565b61ffff160361035757506001915081905080610461565b60316103666020880188611e12565b61ffff160361037d5750600191508190505f610461565b603261038c6020880188611e12565b61ffff16036103a45750600191506002905081610461565b60336103b36020880188611e12565b61ffff16036103cb575060019150600290505f610461565b60346103da6020880188611e12565b61ffff16036103f25750600191506004905081610461565b60356104016020880188611e12565b61ffff1603610419575060019150600490505f610461565b60405162461bcd60e51b815260206004820152601a60248201527f494e56414c49445f4d454d4f52595f4c4f41445f4f50434f444500000000000060448201526064016101d3565b5f6104776104728a60200151610b46565b610b6a565b61048b9063ffffffff166020890135611e47565b60208901519091505f9081906104a59084878b8b86610c26565b509150915081156104c0575050600289525061064792505050565b808415610603578560011480156104e757505f8760068111156104e5576104e56115d1565b145b156104fc57805f0b63ffffffff169050610603565b85600114801561051d5750600187600681111561051b5761051b6115d1565b145b15610529575f0b610603565b85600214801561054957505f876006811115610547576105476115d1565b145b1561055f578060010b63ffffffff169050610603565b8560021480156105805750600187600681111561057e5761057e6115d1565b145b1561058d5760010b610603565b8560041480156105ae575060018760068111156105ac576105ac6115d1565b145b156105bb5760030b610603565b60405162461bcd60e51b815260206004820152601560248201527f4241445f524541445f42595445535f5349474e4544000000000000000000000060448201526064016101d3565b61063f6040518060400160405280896006811115610623576106236115d1565b815267ffffffffffffffff84166020918201528e015190610ced565b505050505050505b5050505050565b5f808060366106606020880188611e12565b61ffff16036106745750600491505f6107d9565b60376106836020880188611e12565b61ffff160361069857506008915060016107d9565b60386106a76020880188611e12565b61ffff16036106bc57506004915060026107d9565b60396106cb6020880188611e12565b61ffff16036106e057506008915060036107d9565b603a6106ef6020880188611e12565b61ffff16036107035750600191505f6107d9565b603b6107126020880188611e12565b61ffff16036107265750600291505f6107d9565b603c6107356020880188611e12565b61ffff1603610749575060019150816107d9565b603d6107586020880188611e12565b61ffff160361076d57506002915060016107d9565b603e61077c6020880188611e12565b61ffff160361079157506004915060016107d9565b60405162461bcd60e51b815260206004820152601b60248201527f494e56414c49445f4d454d4f52595f53544f52455f4f50434f4445000000000060448201526064016101d3565b5f6107e78960200151610b46565b90508160068111156107fb576107fb6115d1565b8151600681111561080e5761080e6115d1565b1461085b5760405162461bcd60e51b815260206004820152600e60248201527f4241445f53544f52455f5459504500000000000000000000000000000000000060448201526064016101d3565b8060200151925060088467ffffffffffffffff1610156108a9576001610882856008611e5a565b67ffffffffffffffff16600167ffffffffffffffff16901b6108a49190611e86565b831692505b50505f6108bc6104728960200151610b46565b6108d09063ffffffff166020880135611e47565b905086602001515f015167ffffffffffffffff168367ffffffffffffffff16826108fa9190611e47565b111561090c5750506002865250610647565b6040805160208101909152606081525f905f19905f805b8767ffffffffffffffff168110156109ce575f6109408288611e47565b90505f61094e602083611ec2565b9050858114610992575f1986146109745761096a858786610cfd565b60208f0151604001525b6109858e60200151828e8e8b610d98565b9098509196509094509250845b5f61099e602084611ed5565b90506109ab85828c610e3f565b945060088a67ffffffffffffffff16901c99505050508080600101915050610923565b506109da828483610cfd565b60208c015160400152505050505050505050505050565b6020840151515f90610a07906201000090611ee8565b6040805180820182525f80825260209182018190528251808401909352825263ffffffff831682820152880151919250610a419190610ced565b505050505050565b6020840151515f90610a5f906201000090611ee8565b90505f610a726104728860200151610b46565b90505f610a8863ffffffff808416908516611e47565b905086602001516020015167ffffffffffffffff168111610b0b57610ab06201000082611f0e565b602088015167ffffffffffffffff9091169052610b06610afb84604080518082019091525f808252602082015250604080518082019091525f815263ffffffff909116602082015290565b60208a015190610ced565b610b3c565b6040805180820182525f80825260209182018190528251808401909352825263ffffffff90820152610b3c90610afb565b5050505050505050565b604080518082019091525f80825260208201528151610b6490610eca565b92915050565b60208101515f908183516006811115610b8557610b856115d1565b14610bd25760405162461bcd60e51b815260206004820152600760248201527f4e4f545f4933320000000000000000000000000000000000000000000000000060448201526064016101d3565b6401000000008110610b645760405162461bcd60e51b815260206004820152600760248201527f4241445f4933320000000000000000000000000000000000000000000000000060448201526064016101d3565b85515f908190819067ffffffffffffffff16610c42888a611e47565b1115610c565750600191505f905082610ce1565b5f195f80805b8a811015610cd5575f610c6f828e611e47565b90505f610c7d602083611ec2565b9050858114610c9d57610c938f828e8e8e610d98565b509a509095509350845b5f610ca9602084611ed5565b9050610cb6846008611f0e565b610cc08783610fcb565b60ff16901b9490941793505050600101610c5c565b505f9550935085925050505b96509650969350505050565b8151610cf9908261104a565b5050565b6040517f4d656d6f7279206c6561663a00000000000000000000000000000000000000006020820152602c81018290525f908190604c01604051602081830303815290604052805190602001209050610d8d8585836040518060400160405280601381526020017f4d656d6f7279206d65726b6c6520747265653a0000000000000000000000000081525061112f565b9150505b9392505050565b5f80610db06040518060200160405280606081525090565b839150610dbe868684611241565b9093509150610dce86868461125c565b925090505f610dde828986610cfd565b905088604001518114610e335760405162461bcd60e51b815260206004820152600e60248201527f57524f4e475f4d454d5f524f4f5400000000000000000000000000000000000060448201526064016101d3565b50955095509592505050565b5f60208310610e905760405162461bcd60e51b815260206004820152601560248201527f4241445f5345545f4c4541465f425954455f494458000000000000000000000060448201526064016101d3565b5f83610e9e60016020611f25565b610ea89190611f25565b610eb3906008611f0e565b60ff848116821b911b198616179150509392505050565b604080518082019091525f808252602082015281518051610eed90600190611f25565b81518110610efd57610efd611f38565b602002602001015190505f6001835f015151610f199190611f25565b67ffffffffffffffff811115610f3157610f31611899565b604051908082528060200260200182016040528015610f7557816020015b604080518082019091525f8082526020820152815260200190600190039081610f4f5790505b5090505f5b8151811015610fc4578351805182908110610f9757610f97611f38565b6020026020010151828281518110610fb157610fb1611f38565b6020908102919091010152600101610f7a565b5090915290565b5f6020821061101c5760405162461bcd60e51b815260206004820152601660248201527f4241445f50554c4c5f4c4541465f425954455f4944580000000000000000000060448201526064016101d3565b5f8261102a60016020611f25565b6110349190611f25565b61103f906008611f0e565b9390931c9392505050565b8151515f9061105a906001611e47565b67ffffffffffffffff81111561107257611072611899565b6040519080825280602002602001820160405280156110b657816020015b604080518082019091525f80825260208201528152602001906001900390816110905790505b5090505f5b8351518110156111065783518051829081106110d9576110d9611f38565b60200260200101518282815181106110f3576110f3611f38565b60209081029190910101526001016110bb565b508181845f0151518151811061111e5761111e611f38565b602090810291909101015290915250565b815f5b8551518110156111ea57846001165f03611194578282875f0151838151811061115d5761115d611f38565b602002602001015160405160200161117793929190611f4c565b6040516020818303038152906040528051906020012091506111de565b82865f015182815181106111aa576111aa611f38565b6020026020010151836040516020016111c593929190611f4c565b6040516020818303038152906040528051906020012091505b600194851c9401611132565b5083156112395760405162461bcd60e51b815260206004820152600f60248201527f50524f4f465f544f4f5f53484f5254000000000000000000000000000000000060448201526064016101d3565b949350505050565b5f818161124f868684611329565b9097909650945050505050565b604080516020810190915260608152815f61127886868461137b565b925090505f60ff821667ffffffffffffffff81111561129957611299611899565b6040519080825280602002602001820160405280156112c2578160200160208202803683370190505b5090505f5b8260ff168160ff16101561130d576112e0888886611241565b838360ff16815181106112f5576112f5611f38565b602090810291909101019190915293506001016112c7565b5060405180602001604052808281525093505050935093915050565b5f81815b602081101561137257600883901b925085858381811061134f5761134f611f38565b919091013560f81c9390931792508161136781611f6b565b92505060010161132d565b50935093915050565b5f8184848281811061138f5761138f611f38565b919091013560f81c92508190506113a581611f6b565b915050935093915050565b604080516101808101909152805f81526020016113e360408051606080820183529181019182529081525f602082015290565b81526040805180820182525f8082526020808301919091528301520161141f60408051606080820183529181019182529081525f602082015290565b81526020016114436040518060400160405280606081526020015f80191681525090565b81526040805180820182525f8082526020808301829052840191909152908201819052606082018190526080820181905260a0820181905260c0820181905260e09091015290565b611493611f83565b565b5f8083601f8401126114a5575f80fd5b50813567ffffffffffffffff8111156114bc575f80fd5b6020830191508360208285010111156114d3575f80fd5b9250929050565b5f805f805f808688036101e08112156114f1575f80fd5b60608112156114fe575f80fd5b879650606088013567ffffffffffffffff8082111561151b575f80fd5b818a0191506101c080838d031215611531575f80fd5b8298506101007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8085011215611564575f80fd5b60808b01975060407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe8085011215611599575f80fd5b6101808b0196508a01359250808311156115b1575f80fd5b50506115bf89828a01611495565b979a9699509497509295939492505050565b634e487b7160e01b5f52602160045260245ffd5b600381106115f5576115f56115d1565b9052565b80516007811061160b5761160b6115d1565b8252602090810151910152565b80516040808452905160208483018190528151606086018190525f9392820191849160808801905b80841015611667576116538286516115f9565b938201936001939093019290850190611640565b5060208701516020890152809550505050505092915050565b8051604080845281518482018190525f926060916020918201918388019190865b828110156116ea5784516116b68582516115f9565b80830151858901528781015163ffffffff90811688870152908701511660808501529381019360a0909301926001016116a1565b505050602086015160208801528094505050505092915050565b5f61012080835261171881840186516115e5565b60208501516101c061014081818701526117366102e0870184611618565b925060408801516101606117568189018380518252602090810151910152565b60608a015191507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee080898703016101a08a01526117938684611618565b955060808b015192508089870301858a0152506117b08583611680565b60a08b015180516101e08b015260208101516102008b0152909550935060c08a015161022089015260e08a015163ffffffff81166102408a015293506101008a015163ffffffff81166102608a015293509489015163ffffffff811661028089015294918901516102a0880152508701516102c0860152509150610d919050602083018480518252602081015167ffffffffffffffff80825116602085015280602083015116604085015250604081015160608401525060408101516080830152606081015160a0830152608081015160c083015263ffffffff60a08201511660e08301525050565b634e487b7160e01b5f52604160045260245ffd5b6040805190810167ffffffffffffffff811182821017156118d0576118d0611899565b60405290565b6040516020810167ffffffffffffffff811182821017156118d0576118d0611899565b6040516080810167ffffffffffffffff811182821017156118d0576118d0611899565b604051610180810167ffffffffffffffff811182821017156118d0576118d0611899565b60405160c0810167ffffffffffffffff811182821017156118d0576118d0611899565b6040516060810167ffffffffffffffff811182821017156118d0576118d0611899565b604051601f8201601f1916810167ffffffffffffffff811182821017156119af576119af611899565b604052919050565b8035600381106119c5575f80fd5b919050565b5f67ffffffffffffffff8211156119e3576119e3611899565b5060051b60200190565b5f604082840312156119fd575f80fd5b611a056118ad565b9050813560078110611a15575f80fd5b808252506020820135602082015292915050565b5f6040808385031215611a3a575f80fd5b611a426118ad565b9150823567ffffffffffffffff80821115611a5b575f80fd5b81850191506020808388031215611a70575f80fd5b611a786118d6565b833583811115611a86575f80fd5b80850194505087601f850112611a9a575f80fd5b83359250611aaf611aaa846119ca565b611986565b83815260069390931b84018201928281019089851115611acd575f80fd5b948301945b84861015611af357611ae48a876119ed565b82529486019490830190611ad2565b8252508552948501359484019490945250909392505050565b5f60408284031215611b1c575f80fd5b611b246118ad565b9050813581526020820135602082015292915050565b803563ffffffff811681146119c5575f80fd5b5f6040808385031215611b5e575f80fd5b611b666118ad565b9150823567ffffffffffffffff811115611b7e575f80fd5b8301601f81018513611b8e575f80fd5b80356020611b9e611aaa836119ca565b82815260a09283028401820192828201919089851115611bbc575f80fd5b948301945b84861015611c235780868b031215611bd7575f80fd5b611bdf6118f9565b611be98b886119ed565b815287870135858201526060611c00818901611b3a565b89830152611c1060808901611b3a565b9082015283529485019491830191611bc1565b50808752505080860135818601525050505092915050565b5f6101c08236031215611c4c575f80fd5b611c5461191c565b611c5d836119b7565b8152602083013567ffffffffffffffff80821115611c79575f80fd5b611c8536838701611a29565b6020840152611c973660408701611b0c565b60408401526080850135915080821115611caf575f80fd5b611cbb36838701611a29565b606084015260a0850135915080821115611cd3575f80fd5b50611ce036828601611b4d565b608083015250611cf33660c08501611b0c565b60a08201526101008084013560c0830152610120611d12818601611b3a565b60e0840152610140611d25818701611b3a565b838501526101609250611d39838701611b3a565b91840191909152610180850135908301526101a090930135928101929092525090565b803567ffffffffffffffff811681146119c5575f80fd5b5f818303610100811215611d85575f80fd5b611d8d611940565b833581526060601f1983011215611da2575f80fd5b611daa611963565b9150611db860208501611d5c565b8252611dc660408501611d5c565b6020830152606084013560408301528160208201526080840135604082015260a0840135606082015260c08401356080820152611e0560e08501611b3a565b60a0820152949350505050565b5f60208284031215611e22575f80fd5b813561ffff81168114610d91575f80fd5b634e487b7160e01b5f52601160045260245ffd5b80820180821115610b6457610b64611e33565b67ffffffffffffffff818116838216028082169190828114611e7e57611e7e611e33565b505092915050565b67ffffffffffffffff828116828216039080821115611ea757611ea7611e33565b5092915050565b634e487b7160e01b5f52601260045260245ffd5b5f82611ed057611ed0611eae565b500490565b5f82611ee357611ee3611eae565b500690565b5f67ffffffffffffffff80841680611f0257611f02611eae565b92169190910492915050565b8082028115828204841417610b6457610b64611e33565b81810381811115610b6457610b64611e33565b634e487b7160e01b5f52603260045260245ffd5b5f84518060208701845e91909101928352506020820152604001919050565b5f5f198203611f7c57611f7c611e33565b5060010190565b634e487b7160e01b5f52605160045260245ffdfea2646970667358221220e051c26cc9b6cfd571d03e2f5bed580dcc699e572cad7464b880077c1228f8d464736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15`\x0EW_\x80\xFD[Pa\x1F\xCD\x80a\0\x1C_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\0)W_5`\xE0\x1C\x80c\xA9,\xB5\x01\x14a\0-W[_\x80\xFD[a\0@a\0;6`\x04a\x14\xDAV[a\0WV[`@Qa\0N\x92\x91\x90a\x17\x04V[`@Q\x80\x91\x03\x90\xF3[a\0_a\x13\xB0V[`@\x80Q`\xC0\x81\x01\x82R_\x80\x82R\x82Q``\x80\x82\x01\x85R\x82\x82R` \x80\x83\x01\x84\x90R\x82\x86\x01\x84\x90R\x84\x01\x91\x90\x91R\x92\x82\x01\x81\x90R\x91\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x91\x90\x91Ra\0\xB1\x87a\x1C;V[\x91Pa\0\xC26\x87\x90\x03\x87\x01\x87a\x1DsV[\x90P_a\0\xD2` \x87\x01\x87a\x1E\x12V[\x90Pa\x14\x8B`(a\xFF\xFF\x83\x16\x10\x80\x15\x90a\0\xF1WP`5a\xFF\xFF\x83\x16\x11\x15[\x15a\0\xFFWPa\x01\xFAa\x01\xDCV[`6a\xFF\xFF\x83\x16\x10\x80\x15\x90a\x01\x19WP`>a\xFF\xFF\x83\x16\x11\x15[\x15a\x01'WPa\x06Na\x01\xDCV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xC1a\xFF\xFF\x83\x16\x01a\x01[WPa\t\xF1a\x01\xDCV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xC0a\xFF\xFF\x83\x16\x01a\x01\x8FWPa\nIa\x01\xDCV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x15`$\x82\x01R\x7FINVALID_MEMORY_OPCODE\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01[`@Q\x80\x91\x03\x90\xFD[a\x01\xED\x84\x84\x89\x89\x89\x86c\xFF\xFF\xFF\xFF\x16V[PP\x96P\x96\x94PPPPPV[_\x80\x80`(a\x02\x0C` \x88\x01\x88a\x1E\x12V[a\xFF\xFF\x16\x03a\x02#WP_\x91P`\x04\x90P\x81a\x04aV[`)a\x022` \x88\x01\x88a\x1E\x12V[a\xFF\xFF\x16\x03a\x02JWP`\x01\x91P`\x08\x90P_a\x04aV[`*a\x02Y` \x88\x01\x88a\x1E\x12V[a\xFF\xFF\x16\x03a\x02qWP`\x02\x91P`\x04\x90P_a\x04aV[`+a\x02\x80` \x88\x01\x88a\x1E\x12V[a\xFF\xFF\x16\x03a\x02\x98WP`\x03\x91P`\x08\x90P_a\x04aV[`,a\x02\xA7` \x88\x01\x88a\x1E\x12V[a\xFF\xFF\x16\x03a\x02\xBEWP_\x91P`\x01\x90P\x80a\x04aV[`-a\x02\xCD` \x88\x01\x88a\x1E\x12V[a\xFF\xFF\x16\x03a\x02\xE4WP_\x91P`\x01\x90P\x81a\x04aV[`.a\x02\xF3` \x88\x01\x88a\x1E\x12V[a\xFF\xFF\x16\x03a\x03\x0BWP_\x91P`\x02\x90P`\x01a\x04aV[`/a\x03\x1A` \x88\x01\x88a\x1E\x12V[a\xFF\xFF\x16\x03a\x031WP_\x91P`\x02\x90P\x81a\x04aV[`0a\x03@` \x88\x01\x88a\x1E\x12V[a\xFF\xFF\x16\x03a\x03WWP`\x01\x91P\x81\x90P\x80a\x04aV[`1a\x03f` \x88\x01\x88a\x1E\x12V[a\xFF\xFF\x16\x03a\x03}WP`\x01\x91P\x81\x90P_a\x04aV[`2a\x03\x8C` \x88\x01\x88a\x1E\x12V[a\xFF\xFF\x16\x03a\x03\xA4WP`\x01\x91P`\x02\x90P\x81a\x04aV[`3a\x03\xB3` \x88\x01\x88a\x1E\x12V[a\xFF\xFF\x16\x03a\x03\xCBWP`\x01\x91P`\x02\x90P_a\x04aV[`4a\x03\xDA` \x88\x01\x88a\x1E\x12V[a\xFF\xFF\x16\x03a\x03\xF2WP`\x01\x91P`\x04\x90P\x81a\x04aV[`5a\x04\x01` \x88\x01\x88a\x1E\x12V[a\xFF\xFF\x16\x03a\x04\x19WP`\x01\x91P`\x04\x90P_a\x04aV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1A`$\x82\x01R\x7FINVALID_MEMORY_LOAD_OPCODE\0\0\0\0\0\0`D\x82\x01R`d\x01a\x01\xD3V[_a\x04wa\x04r\x8A` \x01Qa\x0BFV[a\x0BjV[a\x04\x8B\x90c\xFF\xFF\xFF\xFF\x16` \x89\x015a\x1EGV[` \x89\x01Q\x90\x91P_\x90\x81\x90a\x04\xA5\x90\x84\x87\x8B\x8B\x86a\x0C&V[P\x91P\x91P\x81\x15a\x04\xC0WPP`\x02\x89RPa\x06G\x92PPPV[\x80\x84\x15a\x06\x03W\x85`\x01\x14\x80\x15a\x04\xE7WP_\x87`\x06\x81\x11\x15a\x04\xE5Wa\x04\xE5a\x15\xD1V[\x14[\x15a\x04\xFCW\x80_\x0Bc\xFF\xFF\xFF\xFF\x16\x90Pa\x06\x03V[\x85`\x01\x14\x80\x15a\x05\x1DWP`\x01\x87`\x06\x81\x11\x15a\x05\x1BWa\x05\x1Ba\x15\xD1V[\x14[\x15a\x05)W_\x0Ba\x06\x03V[\x85`\x02\x14\x80\x15a\x05IWP_\x87`\x06\x81\x11\x15a\x05GWa\x05Ga\x15\xD1V[\x14[\x15a\x05_W\x80`\x01\x0Bc\xFF\xFF\xFF\xFF\x16\x90Pa\x06\x03V[\x85`\x02\x14\x80\x15a\x05\x80WP`\x01\x87`\x06\x81\x11\x15a\x05~Wa\x05~a\x15\xD1V[\x14[\x15a\x05\x8DW`\x01\x0Ba\x06\x03V[\x85`\x04\x14\x80\x15a\x05\xAEWP`\x01\x87`\x06\x81\x11\x15a\x05\xACWa\x05\xACa\x15\xD1V[\x14[\x15a\x05\xBBW`\x03\x0Ba\x06\x03V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x15`$\x82\x01R\x7FBAD_READ_BYTES_SIGNED\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x01\xD3V[a\x06?`@Q\x80`@\x01`@R\x80\x89`\x06\x81\x11\x15a\x06#Wa\x06#a\x15\xD1V[\x81Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x16` \x91\x82\x01R\x8E\x01Q\x90a\x0C\xEDV[PPPPPPP[PPPPPV[_\x80\x80`6a\x06`` \x88\x01\x88a\x1E\x12V[a\xFF\xFF\x16\x03a\x06tWP`\x04\x91P_a\x07\xD9V[`7a\x06\x83` \x88\x01\x88a\x1E\x12V[a\xFF\xFF\x16\x03a\x06\x98WP`\x08\x91P`\x01a\x07\xD9V[`8a\x06\xA7` \x88\x01\x88a\x1E\x12V[a\xFF\xFF\x16\x03a\x06\xBCWP`\x04\x91P`\x02a\x07\xD9V[`9a\x06\xCB` \x88\x01\x88a\x1E\x12V[a\xFF\xFF\x16\x03a\x06\xE0WP`\x08\x91P`\x03a\x07\xD9V[`:a\x06\xEF` \x88\x01\x88a\x1E\x12V[a\xFF\xFF\x16\x03a\x07\x03WP`\x01\x91P_a\x07\xD9V[`;a\x07\x12` \x88\x01\x88a\x1E\x12V[a\xFF\xFF\x16\x03a\x07&WP`\x02\x91P_a\x07\xD9V[`<a\x075` \x88\x01\x88a\x1E\x12V[a\xFF\xFF\x16\x03a\x07IWP`\x01\x91P\x81a\x07\xD9V[`=a\x07X` \x88\x01\x88a\x1E\x12V[a\xFF\xFF\x16\x03a\x07mWP`\x02\x91P`\x01a\x07\xD9V[`>a\x07|` \x88\x01\x88a\x1E\x12V[a\xFF\xFF\x16\x03a\x07\x91WP`\x04\x91P`\x01a\x07\xD9V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1B`$\x82\x01R\x7FINVALID_MEMORY_STORE_OPCODE\0\0\0\0\0`D\x82\x01R`d\x01a\x01\xD3V[_a\x07\xE7\x89` \x01Qa\x0BFV[\x90P\x81`\x06\x81\x11\x15a\x07\xFBWa\x07\xFBa\x15\xD1V[\x81Q`\x06\x81\x11\x15a\x08\x0EWa\x08\x0Ea\x15\xD1V[\x14a\x08[W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0E`$\x82\x01R\x7FBAD_STORE_TYPE\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x01\xD3V[\x80` \x01Q\x92P`\x08\x84g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x10\x15a\x08\xA9W`\x01a\x08\x82\x85`\x08a\x1EZV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x1Ba\x08\xA4\x91\x90a\x1E\x86V[\x83\x16\x92P[PP_a\x08\xBCa\x04r\x89` \x01Qa\x0BFV[a\x08\xD0\x90c\xFF\xFF\xFF\xFF\x16` \x88\x015a\x1EGV[\x90P\x86` \x01Q_\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82a\x08\xFA\x91\x90a\x1EGV[\x11\x15a\t\x0CWPP`\x02\x86RPa\x06GV[`@\x80Q` \x81\x01\x90\x91R``\x81R_\x90_\x19\x90_\x80[\x87g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81\x10\x15a\t\xCEW_a\t@\x82\x88a\x1EGV[\x90P_a\tN` \x83a\x1E\xC2V[\x90P\x85\x81\x14a\t\x92W_\x19\x86\x14a\ttWa\tj\x85\x87\x86a\x0C\xFDV[` \x8F\x01Q`@\x01R[a\t\x85\x8E` \x01Q\x82\x8E\x8E\x8Ba\r\x98V[\x90\x98P\x91\x96P\x90\x94P\x92P\x84[_a\t\x9E` \x84a\x1E\xD5V[\x90Pa\t\xAB\x85\x82\x8Ca\x0E?V[\x94P`\x08\x8Ag\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x1C\x99PPPP\x80\x80`\x01\x01\x91PPa\t#V[Pa\t\xDA\x82\x84\x83a\x0C\xFDV[` \x8C\x01Q`@\x01RPPPPPPPPPPPPV[` \x84\x01QQ_\x90a\n\x07\x90b\x01\0\0\x90a\x1E\xE8V[`@\x80Q\x80\x82\x01\x82R_\x80\x82R` \x91\x82\x01\x81\x90R\x82Q\x80\x84\x01\x90\x93R\x82Rc\xFF\xFF\xFF\xFF\x83\x16\x82\x82\x01R\x88\x01Q\x91\x92Pa\nA\x91\x90a\x0C\xEDV[PPPPPPV[` \x84\x01QQ_\x90a\n_\x90b\x01\0\0\x90a\x1E\xE8V[\x90P_a\nra\x04r\x88` \x01Qa\x0BFV[\x90P_a\n\x88c\xFF\xFF\xFF\xFF\x80\x84\x16\x90\x85\x16a\x1EGV[\x90P\x86` \x01Q` \x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81\x11a\x0B\x0BWa\n\xB0b\x01\0\0\x82a\x1F\x0EV[` \x88\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16\x90Ra\x0B\x06a\n\xFB\x84`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01RP`@\x80Q\x80\x82\x01\x90\x91R_\x81Rc\xFF\xFF\xFF\xFF\x90\x91\x16` \x82\x01R\x90V[` \x8A\x01Q\x90a\x0C\xEDV[a\x0B<V[`@\x80Q\x80\x82\x01\x82R_\x80\x82R` \x91\x82\x01\x81\x90R\x82Q\x80\x84\x01\x90\x93R\x82Rc\xFF\xFF\xFF\xFF\x90\x82\x01Ra\x0B<\x90a\n\xFBV[PPPPPPPPV[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x81Qa\x0Bd\x90a\x0E\xCAV[\x92\x91PPV[` \x81\x01Q_\x90\x81\x83Q`\x06\x81\x11\x15a\x0B\x85Wa\x0B\x85a\x15\xD1V[\x14a\x0B\xD2W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FNOT_I32\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x01\xD3V[d\x01\0\0\0\0\x81\x10a\x0BdW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FBAD_I32\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x01\xD3V[\x85Q_\x90\x81\x90\x81\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x0CB\x88\x8Aa\x1EGV[\x11\x15a\x0CVWP`\x01\x91P_\x90P\x82a\x0C\xE1V[_\x19_\x80\x80[\x8A\x81\x10\x15a\x0C\xD5W_a\x0Co\x82\x8Ea\x1EGV[\x90P_a\x0C}` \x83a\x1E\xC2V[\x90P\x85\x81\x14a\x0C\x9DWa\x0C\x93\x8F\x82\x8E\x8E\x8Ea\r\x98V[P\x9AP\x90\x95P\x93P\x84[_a\x0C\xA9` \x84a\x1E\xD5V[\x90Pa\x0C\xB6\x84`\x08a\x1F\x0EV[a\x0C\xC0\x87\x83a\x0F\xCBV[`\xFF\x16\x90\x1B\x94\x90\x94\x17\x93PPP`\x01\x01a\x0C\\V[P_\x95P\x93P\x85\x92PPP[\x96P\x96P\x96\x93PPPPV[\x81Qa\x0C\xF9\x90\x82a\x10JV[PPV[`@Q\x7FMemory leaf:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`,\x81\x01\x82\x90R_\x90\x81\x90`L\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90Pa\r\x8D\x85\x85\x83`@Q\x80`@\x01`@R\x80`\x13\x81R` \x01\x7FMemory merkle tree:\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RPa\x11/V[\x91PP[\x93\x92PPPV[_\x80a\r\xB0`@Q\x80` \x01`@R\x80``\x81RP\x90V[\x83\x91Pa\r\xBE\x86\x86\x84a\x12AV[\x90\x93P\x91Pa\r\xCE\x86\x86\x84a\x12\\V[\x92P\x90P_a\r\xDE\x82\x89\x86a\x0C\xFDV[\x90P\x88`@\x01Q\x81\x14a\x0E3W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0E`$\x82\x01R\x7FWRONG_MEM_ROOT\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x01\xD3V[P\x95P\x95P\x95\x92PPPV[_` \x83\x10a\x0E\x90W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x15`$\x82\x01R\x7FBAD_SET_LEAF_BYTE_IDX\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x01\xD3V[_\x83a\x0E\x9E`\x01` a\x1F%V[a\x0E\xA8\x91\x90a\x1F%V[a\x0E\xB3\x90`\x08a\x1F\x0EV[`\xFF\x84\x81\x16\x82\x1B\x91\x1B\x19\x86\x16\x17\x91PP\x93\x92PPPV[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x81Q\x80Qa\x0E\xED\x90`\x01\x90a\x1F%V[\x81Q\x81\x10a\x0E\xFDWa\x0E\xFDa\x1F8V[` \x02` \x01\x01Q\x90P_`\x01\x83_\x01QQa\x0F\x19\x91\x90a\x1F%V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0F1Wa\x0F1a\x18\x99V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x0FuW\x81` \x01[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x0FOW\x90P[P\x90P_[\x81Q\x81\x10\x15a\x0F\xC4W\x83Q\x80Q\x82\x90\x81\x10a\x0F\x97Wa\x0F\x97a\x1F8V[` \x02` \x01\x01Q\x82\x82\x81Q\x81\x10a\x0F\xB1Wa\x0F\xB1a\x1F8V[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a\x0FzV[P\x90\x91R\x90V[_` \x82\x10a\x10\x1CW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x16`$\x82\x01R\x7FBAD_PULL_LEAF_BYTE_IDX\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x01\xD3V[_\x82a\x10*`\x01` a\x1F%V[a\x104\x91\x90a\x1F%V[a\x10?\x90`\x08a\x1F\x0EV[\x93\x90\x93\x1C\x93\x92PPPV[\x81QQ_\x90a\x10Z\x90`\x01a\x1EGV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x10rWa\x10ra\x18\x99V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x10\xB6W\x81` \x01[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x10\x90W\x90P[P\x90P_[\x83QQ\x81\x10\x15a\x11\x06W\x83Q\x80Q\x82\x90\x81\x10a\x10\xD9Wa\x10\xD9a\x1F8V[` \x02` \x01\x01Q\x82\x82\x81Q\x81\x10a\x10\xF3Wa\x10\xF3a\x1F8V[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a\x10\xBBV[P\x81\x81\x84_\x01QQ\x81Q\x81\x10a\x11\x1EWa\x11\x1Ea\x1F8V[` \x90\x81\x02\x91\x90\x91\x01\x01R\x90\x91RPV[\x81_[\x85QQ\x81\x10\x15a\x11\xEAW\x84`\x01\x16_\x03a\x11\x94W\x82\x82\x87_\x01Q\x83\x81Q\x81\x10a\x11]Wa\x11]a\x1F8V[` \x02` \x01\x01Q`@Q` \x01a\x11w\x93\x92\x91\x90a\x1FLV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x91Pa\x11\xDEV[\x82\x86_\x01Q\x82\x81Q\x81\x10a\x11\xAAWa\x11\xAAa\x1F8V[` \x02` \x01\x01Q\x83`@Q` \x01a\x11\xC5\x93\x92\x91\x90a\x1FLV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x91P[`\x01\x94\x85\x1C\x94\x01a\x112V[P\x83\x15a\x129W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0F`$\x82\x01R\x7FPROOF_TOO_SHORT\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x01\xD3V[\x94\x93PPPPV[_\x81\x81a\x12O\x86\x86\x84a\x13)V[\x90\x97\x90\x96P\x94PPPPPV[`@\x80Q` \x81\x01\x90\x91R``\x81R\x81_a\x12x\x86\x86\x84a\x13{V[\x92P\x90P_`\xFF\x82\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x12\x99Wa\x12\x99a\x18\x99V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x12\xC2W\x81` \x01` \x82\x02\x806\x837\x01\x90P[P\x90P_[\x82`\xFF\x16\x81`\xFF\x16\x10\x15a\x13\rWa\x12\xE0\x88\x88\x86a\x12AV[\x83\x83`\xFF\x16\x81Q\x81\x10a\x12\xF5Wa\x12\xF5a\x1F8V[` \x90\x81\x02\x91\x90\x91\x01\x01\x91\x90\x91R\x93P`\x01\x01a\x12\xC7V[P`@Q\x80` \x01`@R\x80\x82\x81RP\x93PPP\x93P\x93\x91PPV[_\x81\x81[` \x81\x10\x15a\x13rW`\x08\x83\x90\x1B\x92P\x85\x85\x83\x81\x81\x10a\x13OWa\x13Oa\x1F8V[\x91\x90\x91\x015`\xF8\x1C\x93\x90\x93\x17\x92P\x81a\x13g\x81a\x1FkV[\x92PP`\x01\x01a\x13-V[P\x93P\x93\x91PPV[_\x81\x84\x84\x82\x81\x81\x10a\x13\x8FWa\x13\x8Fa\x1F8V[\x91\x90\x91\x015`\xF8\x1C\x92P\x81\x90Pa\x13\xA5\x81a\x1FkV[\x91PP\x93P\x93\x91PPV[`@\x80Qa\x01\x80\x81\x01\x90\x91R\x80_\x81R` \x01a\x13\xE3`@\x80Q``\x80\x82\x01\x83R\x91\x81\x01\x91\x82R\x90\x81R_` \x82\x01R\x90V[\x81R`@\x80Q\x80\x82\x01\x82R_\x80\x82R` \x80\x83\x01\x91\x90\x91R\x83\x01R\x01a\x14\x1F`@\x80Q``\x80\x82\x01\x83R\x91\x81\x01\x91\x82R\x90\x81R_` \x82\x01R\x90V[\x81R` \x01a\x14C`@Q\x80`@\x01`@R\x80``\x81R` \x01_\x80\x19\x16\x81RP\x90V[\x81R`@\x80Q\x80\x82\x01\x82R_\x80\x82R` \x80\x83\x01\x82\x90R\x84\x01\x91\x90\x91R\x90\x82\x01\x81\x90R``\x82\x01\x81\x90R`\x80\x82\x01\x81\x90R`\xA0\x82\x01\x81\x90R`\xC0\x82\x01\x81\x90R`\xE0\x90\x91\x01R\x90V[a\x14\x93a\x1F\x83V[V[_\x80\x83`\x1F\x84\x01\x12a\x14\xA5W_\x80\xFD[P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x14\xBCW_\x80\xFD[` \x83\x01\x91P\x83` \x82\x85\x01\x01\x11\x15a\x14\xD3W_\x80\xFD[\x92P\x92\x90PV[_\x80_\x80_\x80\x86\x88\x03a\x01\xE0\x81\x12\x15a\x14\xF1W_\x80\xFD[``\x81\x12\x15a\x14\xFEW_\x80\xFD[\x87\x96P``\x88\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x15\x1BW_\x80\xFD[\x81\x8A\x01\x91Pa\x01\xC0\x80\x83\x8D\x03\x12\x15a\x151W_\x80\xFD[\x82\x98Pa\x01\0\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x85\x01\x12\x15a\x15dW_\x80\xFD[`\x80\x8B\x01\x97P`@\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFE\x80\x85\x01\x12\x15a\x15\x99W_\x80\xFD[a\x01\x80\x8B\x01\x96P\x8A\x015\x92P\x80\x83\x11\x15a\x15\xB1W_\x80\xFD[PPa\x15\xBF\x89\x82\x8A\x01a\x14\x95V[\x97\x9A\x96\x99P\x94\x97P\x92\x95\x93\x94\x92PPPV[cNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[`\x03\x81\x10a\x15\xF5Wa\x15\xF5a\x15\xD1V[\x90RV[\x80Q`\x07\x81\x10a\x16\x0BWa\x16\x0Ba\x15\xD1V[\x82R` \x90\x81\x01Q\x91\x01RV[\x80Q`@\x80\x84R\x90Q` \x84\x83\x01\x81\x90R\x81Q``\x86\x01\x81\x90R_\x93\x92\x82\x01\x91\x84\x91`\x80\x88\x01\x90[\x80\x84\x10\x15a\x16gWa\x16S\x82\x86Qa\x15\xF9V[\x93\x82\x01\x93`\x01\x93\x90\x93\x01\x92\x90\x85\x01\x90a\x16@V[P` \x87\x01Q` \x89\x01R\x80\x95PPPPPP\x92\x91PPV[\x80Q`@\x80\x84R\x81Q\x84\x82\x01\x81\x90R_\x92``\x91` \x91\x82\x01\x91\x83\x88\x01\x91\x90\x86[\x82\x81\x10\x15a\x16\xEAW\x84Qa\x16\xB6\x85\x82Qa\x15\xF9V[\x80\x83\x01Q\x85\x89\x01R\x87\x81\x01Qc\xFF\xFF\xFF\xFF\x90\x81\x16\x88\x87\x01R\x90\x87\x01Q\x16`\x80\x85\x01R\x93\x81\x01\x93`\xA0\x90\x93\x01\x92`\x01\x01a\x16\xA1V[PPP` \x86\x01Q` \x88\x01R\x80\x94PPPPP\x92\x91PPV[_a\x01 \x80\x83Ra\x17\x18\x81\x84\x01\x86Qa\x15\xE5V[` \x85\x01Qa\x01\xC0a\x01@\x81\x81\x87\x01Ra\x176a\x02\xE0\x87\x01\x84a\x16\x18V[\x92P`@\x88\x01Qa\x01`a\x17V\x81\x89\x01\x83\x80Q\x82R` \x90\x81\x01Q\x91\x01RV[``\x8A\x01Q\x91P\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFE\xE0\x80\x89\x87\x03\x01a\x01\xA0\x8A\x01Ra\x17\x93\x86\x84a\x16\x18V[\x95P`\x80\x8B\x01Q\x92P\x80\x89\x87\x03\x01\x85\x8A\x01RPa\x17\xB0\x85\x83a\x16\x80V[`\xA0\x8B\x01Q\x80Qa\x01\xE0\x8B\x01R` \x81\x01Qa\x02\0\x8B\x01R\x90\x95P\x93P`\xC0\x8A\x01Qa\x02 \x89\x01R`\xE0\x8A\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x02@\x8A\x01R\x93Pa\x01\0\x8A\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x02`\x8A\x01R\x93P\x94\x89\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x02\x80\x89\x01R\x94\x91\x89\x01Qa\x02\xA0\x88\x01RP\x87\x01Qa\x02\xC0\x86\x01RP\x91Pa\r\x91\x90P` \x83\x01\x84\x80Q\x82R` \x81\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82Q\x16` \x85\x01R\x80` \x83\x01Q\x16`@\x85\x01RP`@\x81\x01Q``\x84\x01RP`@\x81\x01Q`\x80\x83\x01R``\x81\x01Q`\xA0\x83\x01R`\x80\x81\x01Q`\xC0\x83\x01Rc\xFF\xFF\xFF\xFF`\xA0\x82\x01Q\x16`\xE0\x83\x01RPPV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@\x80Q\x90\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x18\xD0Wa\x18\xD0a\x18\x99V[`@R\x90V[`@Q` \x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x18\xD0Wa\x18\xD0a\x18\x99V[`@Q`\x80\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x18\xD0Wa\x18\xD0a\x18\x99V[`@Qa\x01\x80\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x18\xD0Wa\x18\xD0a\x18\x99V[`@Q`\xC0\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x18\xD0Wa\x18\xD0a\x18\x99V[`@Q``\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x18\xD0Wa\x18\xD0a\x18\x99V[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x19\xAFWa\x19\xAFa\x18\x99V[`@R\x91\x90PV[\x805`\x03\x81\x10a\x19\xC5W_\x80\xFD[\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x19\xE3Wa\x19\xE3a\x18\x99V[P`\x05\x1B` \x01\x90V[_`@\x82\x84\x03\x12\x15a\x19\xFDW_\x80\xFD[a\x1A\x05a\x18\xADV[\x90P\x815`\x07\x81\x10a\x1A\x15W_\x80\xFD[\x80\x82RP` \x82\x015` \x82\x01R\x92\x91PPV[_`@\x80\x83\x85\x03\x12\x15a\x1A:W_\x80\xFD[a\x1ABa\x18\xADV[\x91P\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x1A[W_\x80\xFD[\x81\x85\x01\x91P` \x80\x83\x88\x03\x12\x15a\x1ApW_\x80\xFD[a\x1Axa\x18\xD6V[\x835\x83\x81\x11\x15a\x1A\x86W_\x80\xFD[\x80\x85\x01\x94PP\x87`\x1F\x85\x01\x12a\x1A\x9AW_\x80\xFD[\x835\x92Pa\x1A\xAFa\x1A\xAA\x84a\x19\xCAV[a\x19\x86V[\x83\x81R`\x06\x93\x90\x93\x1B\x84\x01\x82\x01\x92\x82\x81\x01\x90\x89\x85\x11\x15a\x1A\xCDW_\x80\xFD[\x94\x83\x01\x94[\x84\x86\x10\x15a\x1A\xF3Wa\x1A\xE4\x8A\x87a\x19\xEDV[\x82R\x94\x86\x01\x94\x90\x83\x01\x90a\x1A\xD2V[\x82RP\x85R\x94\x85\x015\x94\x84\x01\x94\x90\x94RP\x90\x93\x92PPPV[_`@\x82\x84\x03\x12\x15a\x1B\x1CW_\x80\xFD[a\x1B$a\x18\xADV[\x90P\x815\x81R` \x82\x015` \x82\x01R\x92\x91PPV[\x805c\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x19\xC5W_\x80\xFD[_`@\x80\x83\x85\x03\x12\x15a\x1B^W_\x80\xFD[a\x1Bfa\x18\xADV[\x91P\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1B~W_\x80\xFD[\x83\x01`\x1F\x81\x01\x85\x13a\x1B\x8EW_\x80\xFD[\x805` a\x1B\x9Ea\x1A\xAA\x83a\x19\xCAV[\x82\x81R`\xA0\x92\x83\x02\x84\x01\x82\x01\x92\x82\x82\x01\x91\x90\x89\x85\x11\x15a\x1B\xBCW_\x80\xFD[\x94\x83\x01\x94[\x84\x86\x10\x15a\x1C#W\x80\x86\x8B\x03\x12\x15a\x1B\xD7W_\x80\xFD[a\x1B\xDFa\x18\xF9V[a\x1B\xE9\x8B\x88a\x19\xEDV[\x81R\x87\x87\x015\x85\x82\x01R``a\x1C\0\x81\x89\x01a\x1B:V[\x89\x83\x01Ra\x1C\x10`\x80\x89\x01a\x1B:V[\x90\x82\x01R\x83R\x94\x85\x01\x94\x91\x83\x01\x91a\x1B\xC1V[P\x80\x87RPP\x80\x86\x015\x81\x86\x01RPPPP\x92\x91PPV[_a\x01\xC0\x826\x03\x12\x15a\x1CLW_\x80\xFD[a\x1CTa\x19\x1CV[a\x1C]\x83a\x19\xB7V[\x81R` \x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x1CyW_\x80\xFD[a\x1C\x856\x83\x87\x01a\x1A)V[` \x84\x01Ra\x1C\x976`@\x87\x01a\x1B\x0CV[`@\x84\x01R`\x80\x85\x015\x91P\x80\x82\x11\x15a\x1C\xAFW_\x80\xFD[a\x1C\xBB6\x83\x87\x01a\x1A)V[``\x84\x01R`\xA0\x85\x015\x91P\x80\x82\x11\x15a\x1C\xD3W_\x80\xFD[Pa\x1C\xE06\x82\x86\x01a\x1BMV[`\x80\x83\x01RPa\x1C\xF36`\xC0\x85\x01a\x1B\x0CV[`\xA0\x82\x01Ra\x01\0\x80\x84\x015`\xC0\x83\x01Ra\x01 a\x1D\x12\x81\x86\x01a\x1B:V[`\xE0\x84\x01Ra\x01@a\x1D%\x81\x87\x01a\x1B:V[\x83\x85\x01Ra\x01`\x92Pa\x1D9\x83\x87\x01a\x1B:V[\x91\x84\x01\x91\x90\x91Ra\x01\x80\x85\x015\x90\x83\x01Ra\x01\xA0\x90\x93\x015\x92\x81\x01\x92\x90\x92RP\x90V[\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x19\xC5W_\x80\xFD[_\x81\x83\x03a\x01\0\x81\x12\x15a\x1D\x85W_\x80\xFD[a\x1D\x8Da\x19@V[\x835\x81R```\x1F\x19\x83\x01\x12\x15a\x1D\xA2W_\x80\xFD[a\x1D\xAAa\x19cV[\x91Pa\x1D\xB8` \x85\x01a\x1D\\V[\x82Ra\x1D\xC6`@\x85\x01a\x1D\\V[` \x83\x01R``\x84\x015`@\x83\x01R\x81` \x82\x01R`\x80\x84\x015`@\x82\x01R`\xA0\x84\x015``\x82\x01R`\xC0\x84\x015`\x80\x82\x01Ra\x1E\x05`\xE0\x85\x01a\x1B:V[`\xA0\x82\x01R\x94\x93PPPPV[_` \x82\x84\x03\x12\x15a\x1E\"W_\x80\xFD[\x815a\xFF\xFF\x81\x16\x81\x14a\r\x91W_\x80\xFD[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[\x80\x82\x01\x80\x82\x11\x15a\x0BdWa\x0Bda\x1E3V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x81\x16\x83\x82\x16\x02\x80\x82\x16\x91\x90\x82\x81\x14a\x1E~Wa\x1E~a\x1E3V[PP\x92\x91PPV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x81\x16\x82\x82\x16\x03\x90\x80\x82\x11\x15a\x1E\xA7Wa\x1E\xA7a\x1E3V[P\x92\x91PPV[cNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[_\x82a\x1E\xD0Wa\x1E\xD0a\x1E\xAEV[P\x04\x90V[_\x82a\x1E\xE3Wa\x1E\xE3a\x1E\xAEV[P\x06\x90V[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x84\x16\x80a\x1F\x02Wa\x1F\x02a\x1E\xAEV[\x92\x16\x91\x90\x91\x04\x92\x91PPV[\x80\x82\x02\x81\x15\x82\x82\x04\x84\x14\x17a\x0BdWa\x0Bda\x1E3V[\x81\x81\x03\x81\x81\x11\x15a\x0BdWa\x0Bda\x1E3V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_\x84Q\x80` \x87\x01\x84^\x91\x90\x91\x01\x92\x83RP` \x82\x01R`@\x01\x91\x90PV[__\x19\x82\x03a\x1F|Wa\x1F|a\x1E3V[P`\x01\x01\x90V[cNH{q`\xE0\x1B_R`Q`\x04R`$_\xFD\xFE\xA2dipfsX\"\x12 \xE0Q\xC2l\xC9\xB6\xCF\xD5q\xD0>/[\xEDX\r\xCCi\x9EW,\xADtd\xB8\x80\x07|\x12(\xF8\xD4dsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f80fd5b5060043610610029575f3560e01c8063a92cb5011461002d575b5f80fd5b61004061003b3660046114da565b610057565b60405161004e929190611704565b60405180910390f35b61005f6113b0565b6040805160c0810182525f80825282516060808201855282825260208083018490528286018490528401919091529282018190529181018290526080810182905260a08101919091526100b187611c3b565b91506100c236879003870187611d73565b90505f6100d26020870187611e12565b905061148b602861ffff8316108015906100f15750603561ffff831611155b156100ff57506101fa6101dc565b603661ffff8316108015906101195750603e61ffff831611155b15610127575061064e6101dc565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc161ffff83160161015b57506109f16101dc565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc061ffff83160161018f5750610a496101dc565b60405162461bcd60e51b815260206004820152601560248201527f494e56414c49445f4d454d4f52595f4f50434f4445000000000000000000000060448201526064015b60405180910390fd5b6101ed84848989898663ffffffff16565b5050965096945050505050565b5f8080602861020c6020880188611e12565b61ffff160361022357505f91506004905081610461565b60296102326020880188611e12565b61ffff160361024a575060019150600890505f610461565b602a6102596020880188611e12565b61ffff1603610271575060029150600490505f610461565b602b6102806020880188611e12565b61ffff1603610298575060039150600890505f610461565b602c6102a76020880188611e12565b61ffff16036102be57505f91506001905080610461565b602d6102cd6020880188611e12565b61ffff16036102e457505f91506001905081610461565b602e6102f36020880188611e12565b61ffff160361030b57505f9150600290506001610461565b602f61031a6020880188611e12565b61ffff160361033157505f91506002905081610461565b60306103406020880188611e12565b61ffff160361035757506001915081905080610461565b60316103666020880188611e12565b61ffff160361037d5750600191508190505f610461565b603261038c6020880188611e12565b61ffff16036103a45750600191506002905081610461565b60336103b36020880188611e12565b61ffff16036103cb575060019150600290505f610461565b60346103da6020880188611e12565b61ffff16036103f25750600191506004905081610461565b60356104016020880188611e12565b61ffff1603610419575060019150600490505f610461565b60405162461bcd60e51b815260206004820152601a60248201527f494e56414c49445f4d454d4f52595f4c4f41445f4f50434f444500000000000060448201526064016101d3565b5f6104776104728a60200151610b46565b610b6a565b61048b9063ffffffff166020890135611e47565b60208901519091505f9081906104a59084878b8b86610c26565b509150915081156104c0575050600289525061064792505050565b808415610603578560011480156104e757505f8760068111156104e5576104e56115d1565b145b156104fc57805f0b63ffffffff169050610603565b85600114801561051d5750600187600681111561051b5761051b6115d1565b145b15610529575f0b610603565b85600214801561054957505f876006811115610547576105476115d1565b145b1561055f578060010b63ffffffff169050610603565b8560021480156105805750600187600681111561057e5761057e6115d1565b145b1561058d5760010b610603565b8560041480156105ae575060018760068111156105ac576105ac6115d1565b145b156105bb5760030b610603565b60405162461bcd60e51b815260206004820152601560248201527f4241445f524541445f42595445535f5349474e4544000000000000000000000060448201526064016101d3565b61063f6040518060400160405280896006811115610623576106236115d1565b815267ffffffffffffffff84166020918201528e015190610ced565b505050505050505b5050505050565b5f808060366106606020880188611e12565b61ffff16036106745750600491505f6107d9565b60376106836020880188611e12565b61ffff160361069857506008915060016107d9565b60386106a76020880188611e12565b61ffff16036106bc57506004915060026107d9565b60396106cb6020880188611e12565b61ffff16036106e057506008915060036107d9565b603a6106ef6020880188611e12565b61ffff16036107035750600191505f6107d9565b603b6107126020880188611e12565b61ffff16036107265750600291505f6107d9565b603c6107356020880188611e12565b61ffff1603610749575060019150816107d9565b603d6107586020880188611e12565b61ffff160361076d57506002915060016107d9565b603e61077c6020880188611e12565b61ffff160361079157506004915060016107d9565b60405162461bcd60e51b815260206004820152601b60248201527f494e56414c49445f4d454d4f52595f53544f52455f4f50434f4445000000000060448201526064016101d3565b5f6107e78960200151610b46565b90508160068111156107fb576107fb6115d1565b8151600681111561080e5761080e6115d1565b1461085b5760405162461bcd60e51b815260206004820152600e60248201527f4241445f53544f52455f5459504500000000000000000000000000000000000060448201526064016101d3565b8060200151925060088467ffffffffffffffff1610156108a9576001610882856008611e5a565b67ffffffffffffffff16600167ffffffffffffffff16901b6108a49190611e86565b831692505b50505f6108bc6104728960200151610b46565b6108d09063ffffffff166020880135611e47565b905086602001515f015167ffffffffffffffff168367ffffffffffffffff16826108fa9190611e47565b111561090c5750506002865250610647565b6040805160208101909152606081525f905f19905f805b8767ffffffffffffffff168110156109ce575f6109408288611e47565b90505f61094e602083611ec2565b9050858114610992575f1986146109745761096a858786610cfd565b60208f0151604001525b6109858e60200151828e8e8b610d98565b9098509196509094509250845b5f61099e602084611ed5565b90506109ab85828c610e3f565b945060088a67ffffffffffffffff16901c99505050508080600101915050610923565b506109da828483610cfd565b60208c015160400152505050505050505050505050565b6020840151515f90610a07906201000090611ee8565b6040805180820182525f80825260209182018190528251808401909352825263ffffffff831682820152880151919250610a419190610ced565b505050505050565b6020840151515f90610a5f906201000090611ee8565b90505f610a726104728860200151610b46565b90505f610a8863ffffffff808416908516611e47565b905086602001516020015167ffffffffffffffff168111610b0b57610ab06201000082611f0e565b602088015167ffffffffffffffff9091169052610b06610afb84604080518082019091525f808252602082015250604080518082019091525f815263ffffffff909116602082015290565b60208a015190610ced565b610b3c565b6040805180820182525f80825260209182018190528251808401909352825263ffffffff90820152610b3c90610afb565b5050505050505050565b604080518082019091525f80825260208201528151610b6490610eca565b92915050565b60208101515f908183516006811115610b8557610b856115d1565b14610bd25760405162461bcd60e51b815260206004820152600760248201527f4e4f545f4933320000000000000000000000000000000000000000000000000060448201526064016101d3565b6401000000008110610b645760405162461bcd60e51b815260206004820152600760248201527f4241445f4933320000000000000000000000000000000000000000000000000060448201526064016101d3565b85515f908190819067ffffffffffffffff16610c42888a611e47565b1115610c565750600191505f905082610ce1565b5f195f80805b8a811015610cd5575f610c6f828e611e47565b90505f610c7d602083611ec2565b9050858114610c9d57610c938f828e8e8e610d98565b509a509095509350845b5f610ca9602084611ed5565b9050610cb6846008611f0e565b610cc08783610fcb565b60ff16901b9490941793505050600101610c5c565b505f9550935085925050505b96509650969350505050565b8151610cf9908261104a565b5050565b6040517f4d656d6f7279206c6561663a00000000000000000000000000000000000000006020820152602c81018290525f908190604c01604051602081830303815290604052805190602001209050610d8d8585836040518060400160405280601381526020017f4d656d6f7279206d65726b6c6520747265653a0000000000000000000000000081525061112f565b9150505b9392505050565b5f80610db06040518060200160405280606081525090565b839150610dbe868684611241565b9093509150610dce86868461125c565b925090505f610dde828986610cfd565b905088604001518114610e335760405162461bcd60e51b815260206004820152600e60248201527f57524f4e475f4d454d5f524f4f5400000000000000000000000000000000000060448201526064016101d3565b50955095509592505050565b5f60208310610e905760405162461bcd60e51b815260206004820152601560248201527f4241445f5345545f4c4541465f425954455f494458000000000000000000000060448201526064016101d3565b5f83610e9e60016020611f25565b610ea89190611f25565b610eb3906008611f0e565b60ff848116821b911b198616179150509392505050565b604080518082019091525f808252602082015281518051610eed90600190611f25565b81518110610efd57610efd611f38565b602002602001015190505f6001835f015151610f199190611f25565b67ffffffffffffffff811115610f3157610f31611899565b604051908082528060200260200182016040528015610f7557816020015b604080518082019091525f8082526020820152815260200190600190039081610f4f5790505b5090505f5b8151811015610fc4578351805182908110610f9757610f97611f38565b6020026020010151828281518110610fb157610fb1611f38565b6020908102919091010152600101610f7a565b5090915290565b5f6020821061101c5760405162461bcd60e51b815260206004820152601660248201527f4241445f50554c4c5f4c4541465f425954455f4944580000000000000000000060448201526064016101d3565b5f8261102a60016020611f25565b6110349190611f25565b61103f906008611f0e565b9390931c9392505050565b8151515f9061105a906001611e47565b67ffffffffffffffff81111561107257611072611899565b6040519080825280602002602001820160405280156110b657816020015b604080518082019091525f80825260208201528152602001906001900390816110905790505b5090505f5b8351518110156111065783518051829081106110d9576110d9611f38565b60200260200101518282815181106110f3576110f3611f38565b60209081029190910101526001016110bb565b508181845f0151518151811061111e5761111e611f38565b602090810291909101015290915250565b815f5b8551518110156111ea57846001165f03611194578282875f0151838151811061115d5761115d611f38565b602002602001015160405160200161117793929190611f4c565b6040516020818303038152906040528051906020012091506111de565b82865f015182815181106111aa576111aa611f38565b6020026020010151836040516020016111c593929190611f4c565b6040516020818303038152906040528051906020012091505b600194851c9401611132565b5083156112395760405162461bcd60e51b815260206004820152600f60248201527f50524f4f465f544f4f5f53484f5254000000000000000000000000000000000060448201526064016101d3565b949350505050565b5f818161124f868684611329565b9097909650945050505050565b604080516020810190915260608152815f61127886868461137b565b925090505f60ff821667ffffffffffffffff81111561129957611299611899565b6040519080825280602002602001820160405280156112c2578160200160208202803683370190505b5090505f5b8260ff168160ff16101561130d576112e0888886611241565b838360ff16815181106112f5576112f5611f38565b602090810291909101019190915293506001016112c7565b5060405180602001604052808281525093505050935093915050565b5f81815b602081101561137257600883901b925085858381811061134f5761134f611f38565b919091013560f81c9390931792508161136781611f6b565b92505060010161132d565b50935093915050565b5f8184848281811061138f5761138f611f38565b919091013560f81c92508190506113a581611f6b565b915050935093915050565b604080516101808101909152805f81526020016113e360408051606080820183529181019182529081525f602082015290565b81526040805180820182525f8082526020808301919091528301520161141f60408051606080820183529181019182529081525f602082015290565b81526020016114436040518060400160405280606081526020015f80191681525090565b81526040805180820182525f8082526020808301829052840191909152908201819052606082018190526080820181905260a0820181905260c0820181905260e09091015290565b611493611f83565b565b5f8083601f8401126114a5575f80fd5b50813567ffffffffffffffff8111156114bc575f80fd5b6020830191508360208285010111156114d3575f80fd5b9250929050565b5f805f805f808688036101e08112156114f1575f80fd5b60608112156114fe575f80fd5b879650606088013567ffffffffffffffff8082111561151b575f80fd5b818a0191506101c080838d031215611531575f80fd5b8298506101007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8085011215611564575f80fd5b60808b01975060407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe8085011215611599575f80fd5b6101808b0196508a01359250808311156115b1575f80fd5b50506115bf89828a01611495565b979a9699509497509295939492505050565b634e487b7160e01b5f52602160045260245ffd5b600381106115f5576115f56115d1565b9052565b80516007811061160b5761160b6115d1565b8252602090810151910152565b80516040808452905160208483018190528151606086018190525f9392820191849160808801905b80841015611667576116538286516115f9565b938201936001939093019290850190611640565b5060208701516020890152809550505050505092915050565b8051604080845281518482018190525f926060916020918201918388019190865b828110156116ea5784516116b68582516115f9565b80830151858901528781015163ffffffff90811688870152908701511660808501529381019360a0909301926001016116a1565b505050602086015160208801528094505050505092915050565b5f61012080835261171881840186516115e5565b60208501516101c061014081818701526117366102e0870184611618565b925060408801516101606117568189018380518252602090810151910152565b60608a015191507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee080898703016101a08a01526117938684611618565b955060808b015192508089870301858a0152506117b08583611680565b60a08b015180516101e08b015260208101516102008b0152909550935060c08a015161022089015260e08a015163ffffffff81166102408a015293506101008a015163ffffffff81166102608a015293509489015163ffffffff811661028089015294918901516102a0880152508701516102c0860152509150610d919050602083018480518252602081015167ffffffffffffffff80825116602085015280602083015116604085015250604081015160608401525060408101516080830152606081015160a0830152608081015160c083015263ffffffff60a08201511660e08301525050565b634e487b7160e01b5f52604160045260245ffd5b6040805190810167ffffffffffffffff811182821017156118d0576118d0611899565b60405290565b6040516020810167ffffffffffffffff811182821017156118d0576118d0611899565b6040516080810167ffffffffffffffff811182821017156118d0576118d0611899565b604051610180810167ffffffffffffffff811182821017156118d0576118d0611899565b60405160c0810167ffffffffffffffff811182821017156118d0576118d0611899565b6040516060810167ffffffffffffffff811182821017156118d0576118d0611899565b604051601f8201601f1916810167ffffffffffffffff811182821017156119af576119af611899565b604052919050565b8035600381106119c5575f80fd5b919050565b5f67ffffffffffffffff8211156119e3576119e3611899565b5060051b60200190565b5f604082840312156119fd575f80fd5b611a056118ad565b9050813560078110611a15575f80fd5b808252506020820135602082015292915050565b5f6040808385031215611a3a575f80fd5b611a426118ad565b9150823567ffffffffffffffff80821115611a5b575f80fd5b81850191506020808388031215611a70575f80fd5b611a786118d6565b833583811115611a86575f80fd5b80850194505087601f850112611a9a575f80fd5b83359250611aaf611aaa846119ca565b611986565b83815260069390931b84018201928281019089851115611acd575f80fd5b948301945b84861015611af357611ae48a876119ed565b82529486019490830190611ad2565b8252508552948501359484019490945250909392505050565b5f60408284031215611b1c575f80fd5b611b246118ad565b9050813581526020820135602082015292915050565b803563ffffffff811681146119c5575f80fd5b5f6040808385031215611b5e575f80fd5b611b666118ad565b9150823567ffffffffffffffff811115611b7e575f80fd5b8301601f81018513611b8e575f80fd5b80356020611b9e611aaa836119ca565b82815260a09283028401820192828201919089851115611bbc575f80fd5b948301945b84861015611c235780868b031215611bd7575f80fd5b611bdf6118f9565b611be98b886119ed565b815287870135858201526060611c00818901611b3a565b89830152611c1060808901611b3a565b9082015283529485019491830191611bc1565b50808752505080860135818601525050505092915050565b5f6101c08236031215611c4c575f80fd5b611c5461191c565b611c5d836119b7565b8152602083013567ffffffffffffffff80821115611c79575f80fd5b611c8536838701611a29565b6020840152611c973660408701611b0c565b60408401526080850135915080821115611caf575f80fd5b611cbb36838701611a29565b606084015260a0850135915080821115611cd3575f80fd5b50611ce036828601611b4d565b608083015250611cf33660c08501611b0c565b60a08201526101008084013560c0830152610120611d12818601611b3a565b60e0840152610140611d25818701611b3a565b838501526101609250611d39838701611b3a565b91840191909152610180850135908301526101a090930135928101929092525090565b803567ffffffffffffffff811681146119c5575f80fd5b5f818303610100811215611d85575f80fd5b611d8d611940565b833581526060601f1983011215611da2575f80fd5b611daa611963565b9150611db860208501611d5c565b8252611dc660408501611d5c565b6020830152606084013560408301528160208201526080840135604082015260a0840135606082015260c08401356080820152611e0560e08501611b3a565b60a0820152949350505050565b5f60208284031215611e22575f80fd5b813561ffff81168114610d91575f80fd5b634e487b7160e01b5f52601160045260245ffd5b80820180821115610b6457610b64611e33565b67ffffffffffffffff818116838216028082169190828114611e7e57611e7e611e33565b505092915050565b67ffffffffffffffff828116828216039080821115611ea757611ea7611e33565b5092915050565b634e487b7160e01b5f52601260045260245ffd5b5f82611ed057611ed0611eae565b500490565b5f82611ee357611ee3611eae565b500690565b5f67ffffffffffffffff80841680611f0257611f02611eae565b92169190910492915050565b8082028115828204841417610b6457610b64611e33565b81810381811115610b6457610b64611e33565b634e487b7160e01b5f52603260045260245ffd5b5f84518060208701845e91909101928352506020820152604001919050565b5f5f198203611f7c57611f7c611e33565b5060010190565b634e487b7160e01b5f52605160045260245ffdfea2646970667358221220e051c26cc9b6cfd571d03e2f5bed580dcc699e572cad7464b880077c1228f8d464736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\0)W_5`\xE0\x1C\x80c\xA9,\xB5\x01\x14a\0-W[_\x80\xFD[a\0@a\0;6`\x04a\x14\xDAV[a\0WV[`@Qa\0N\x92\x91\x90a\x17\x04V[`@Q\x80\x91\x03\x90\xF3[a\0_a\x13\xB0V[`@\x80Q`\xC0\x81\x01\x82R_\x80\x82R\x82Q``\x80\x82\x01\x85R\x82\x82R` \x80\x83\x01\x84\x90R\x82\x86\x01\x84\x90R\x84\x01\x91\x90\x91R\x92\x82\x01\x81\x90R\x91\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x91\x90\x91Ra\0\xB1\x87a\x1C;V[\x91Pa\0\xC26\x87\x90\x03\x87\x01\x87a\x1DsV[\x90P_a\0\xD2` \x87\x01\x87a\x1E\x12V[\x90Pa\x14\x8B`(a\xFF\xFF\x83\x16\x10\x80\x15\x90a\0\xF1WP`5a\xFF\xFF\x83\x16\x11\x15[\x15a\0\xFFWPa\x01\xFAa\x01\xDCV[`6a\xFF\xFF\x83\x16\x10\x80\x15\x90a\x01\x19WP`>a\xFF\xFF\x83\x16\x11\x15[\x15a\x01'WPa\x06Na\x01\xDCV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xC1a\xFF\xFF\x83\x16\x01a\x01[WPa\t\xF1a\x01\xDCV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xC0a\xFF\xFF\x83\x16\x01a\x01\x8FWPa\nIa\x01\xDCV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x15`$\x82\x01R\x7FINVALID_MEMORY_OPCODE\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01[`@Q\x80\x91\x03\x90\xFD[a\x01\xED\x84\x84\x89\x89\x89\x86c\xFF\xFF\xFF\xFF\x16V[PP\x96P\x96\x94PPPPPV[_\x80\x80`(a\x02\x0C` \x88\x01\x88a\x1E\x12V[a\xFF\xFF\x16\x03a\x02#WP_\x91P`\x04\x90P\x81a\x04aV[`)a\x022` \x88\x01\x88a\x1E\x12V[a\xFF\xFF\x16\x03a\x02JWP`\x01\x91P`\x08\x90P_a\x04aV[`*a\x02Y` \x88\x01\x88a\x1E\x12V[a\xFF\xFF\x16\x03a\x02qWP`\x02\x91P`\x04\x90P_a\x04aV[`+a\x02\x80` \x88\x01\x88a\x1E\x12V[a\xFF\xFF\x16\x03a\x02\x98WP`\x03\x91P`\x08\x90P_a\x04aV[`,a\x02\xA7` \x88\x01\x88a\x1E\x12V[a\xFF\xFF\x16\x03a\x02\xBEWP_\x91P`\x01\x90P\x80a\x04aV[`-a\x02\xCD` \x88\x01\x88a\x1E\x12V[a\xFF\xFF\x16\x03a\x02\xE4WP_\x91P`\x01\x90P\x81a\x04aV[`.a\x02\xF3` \x88\x01\x88a\x1E\x12V[a\xFF\xFF\x16\x03a\x03\x0BWP_\x91P`\x02\x90P`\x01a\x04aV[`/a\x03\x1A` \x88\x01\x88a\x1E\x12V[a\xFF\xFF\x16\x03a\x031WP_\x91P`\x02\x90P\x81a\x04aV[`0a\x03@` \x88\x01\x88a\x1E\x12V[a\xFF\xFF\x16\x03a\x03WWP`\x01\x91P\x81\x90P\x80a\x04aV[`1a\x03f` \x88\x01\x88a\x1E\x12V[a\xFF\xFF\x16\x03a\x03}WP`\x01\x91P\x81\x90P_a\x04aV[`2a\x03\x8C` \x88\x01\x88a\x1E\x12V[a\xFF\xFF\x16\x03a\x03\xA4WP`\x01\x91P`\x02\x90P\x81a\x04aV[`3a\x03\xB3` \x88\x01\x88a\x1E\x12V[a\xFF\xFF\x16\x03a\x03\xCBWP`\x01\x91P`\x02\x90P_a\x04aV[`4a\x03\xDA` \x88\x01\x88a\x1E\x12V[a\xFF\xFF\x16\x03a\x03\xF2WP`\x01\x91P`\x04\x90P\x81a\x04aV[`5a\x04\x01` \x88\x01\x88a\x1E\x12V[a\xFF\xFF\x16\x03a\x04\x19WP`\x01\x91P`\x04\x90P_a\x04aV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1A`$\x82\x01R\x7FINVALID_MEMORY_LOAD_OPCODE\0\0\0\0\0\0`D\x82\x01R`d\x01a\x01\xD3V[_a\x04wa\x04r\x8A` \x01Qa\x0BFV[a\x0BjV[a\x04\x8B\x90c\xFF\xFF\xFF\xFF\x16` \x89\x015a\x1EGV[` \x89\x01Q\x90\x91P_\x90\x81\x90a\x04\xA5\x90\x84\x87\x8B\x8B\x86a\x0C&V[P\x91P\x91P\x81\x15a\x04\xC0WPP`\x02\x89RPa\x06G\x92PPPV[\x80\x84\x15a\x06\x03W\x85`\x01\x14\x80\x15a\x04\xE7WP_\x87`\x06\x81\x11\x15a\x04\xE5Wa\x04\xE5a\x15\xD1V[\x14[\x15a\x04\xFCW\x80_\x0Bc\xFF\xFF\xFF\xFF\x16\x90Pa\x06\x03V[\x85`\x01\x14\x80\x15a\x05\x1DWP`\x01\x87`\x06\x81\x11\x15a\x05\x1BWa\x05\x1Ba\x15\xD1V[\x14[\x15a\x05)W_\x0Ba\x06\x03V[\x85`\x02\x14\x80\x15a\x05IWP_\x87`\x06\x81\x11\x15a\x05GWa\x05Ga\x15\xD1V[\x14[\x15a\x05_W\x80`\x01\x0Bc\xFF\xFF\xFF\xFF\x16\x90Pa\x06\x03V[\x85`\x02\x14\x80\x15a\x05\x80WP`\x01\x87`\x06\x81\x11\x15a\x05~Wa\x05~a\x15\xD1V[\x14[\x15a\x05\x8DW`\x01\x0Ba\x06\x03V[\x85`\x04\x14\x80\x15a\x05\xAEWP`\x01\x87`\x06\x81\x11\x15a\x05\xACWa\x05\xACa\x15\xD1V[\x14[\x15a\x05\xBBW`\x03\x0Ba\x06\x03V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x15`$\x82\x01R\x7FBAD_READ_BYTES_SIGNED\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x01\xD3V[a\x06?`@Q\x80`@\x01`@R\x80\x89`\x06\x81\x11\x15a\x06#Wa\x06#a\x15\xD1V[\x81Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x16` \x91\x82\x01R\x8E\x01Q\x90a\x0C\xEDV[PPPPPPP[PPPPPV[_\x80\x80`6a\x06`` \x88\x01\x88a\x1E\x12V[a\xFF\xFF\x16\x03a\x06tWP`\x04\x91P_a\x07\xD9V[`7a\x06\x83` \x88\x01\x88a\x1E\x12V[a\xFF\xFF\x16\x03a\x06\x98WP`\x08\x91P`\x01a\x07\xD9V[`8a\x06\xA7` \x88\x01\x88a\x1E\x12V[a\xFF\xFF\x16\x03a\x06\xBCWP`\x04\x91P`\x02a\x07\xD9V[`9a\x06\xCB` \x88\x01\x88a\x1E\x12V[a\xFF\xFF\x16\x03a\x06\xE0WP`\x08\x91P`\x03a\x07\xD9V[`:a\x06\xEF` \x88\x01\x88a\x1E\x12V[a\xFF\xFF\x16\x03a\x07\x03WP`\x01\x91P_a\x07\xD9V[`;a\x07\x12` \x88\x01\x88a\x1E\x12V[a\xFF\xFF\x16\x03a\x07&WP`\x02\x91P_a\x07\xD9V[`<a\x075` \x88\x01\x88a\x1E\x12V[a\xFF\xFF\x16\x03a\x07IWP`\x01\x91P\x81a\x07\xD9V[`=a\x07X` \x88\x01\x88a\x1E\x12V[a\xFF\xFF\x16\x03a\x07mWP`\x02\x91P`\x01a\x07\xD9V[`>a\x07|` \x88\x01\x88a\x1E\x12V[a\xFF\xFF\x16\x03a\x07\x91WP`\x04\x91P`\x01a\x07\xD9V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1B`$\x82\x01R\x7FINVALID_MEMORY_STORE_OPCODE\0\0\0\0\0`D\x82\x01R`d\x01a\x01\xD3V[_a\x07\xE7\x89` \x01Qa\x0BFV[\x90P\x81`\x06\x81\x11\x15a\x07\xFBWa\x07\xFBa\x15\xD1V[\x81Q`\x06\x81\x11\x15a\x08\x0EWa\x08\x0Ea\x15\xD1V[\x14a\x08[W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0E`$\x82\x01R\x7FBAD_STORE_TYPE\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x01\xD3V[\x80` \x01Q\x92P`\x08\x84g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x10\x15a\x08\xA9W`\x01a\x08\x82\x85`\x08a\x1EZV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x1Ba\x08\xA4\x91\x90a\x1E\x86V[\x83\x16\x92P[PP_a\x08\xBCa\x04r\x89` \x01Qa\x0BFV[a\x08\xD0\x90c\xFF\xFF\xFF\xFF\x16` \x88\x015a\x1EGV[\x90P\x86` \x01Q_\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82a\x08\xFA\x91\x90a\x1EGV[\x11\x15a\t\x0CWPP`\x02\x86RPa\x06GV[`@\x80Q` \x81\x01\x90\x91R``\x81R_\x90_\x19\x90_\x80[\x87g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81\x10\x15a\t\xCEW_a\t@\x82\x88a\x1EGV[\x90P_a\tN` \x83a\x1E\xC2V[\x90P\x85\x81\x14a\t\x92W_\x19\x86\x14a\ttWa\tj\x85\x87\x86a\x0C\xFDV[` \x8F\x01Q`@\x01R[a\t\x85\x8E` \x01Q\x82\x8E\x8E\x8Ba\r\x98V[\x90\x98P\x91\x96P\x90\x94P\x92P\x84[_a\t\x9E` \x84a\x1E\xD5V[\x90Pa\t\xAB\x85\x82\x8Ca\x0E?V[\x94P`\x08\x8Ag\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x1C\x99PPPP\x80\x80`\x01\x01\x91PPa\t#V[Pa\t\xDA\x82\x84\x83a\x0C\xFDV[` \x8C\x01Q`@\x01RPPPPPPPPPPPPV[` \x84\x01QQ_\x90a\n\x07\x90b\x01\0\0\x90a\x1E\xE8V[`@\x80Q\x80\x82\x01\x82R_\x80\x82R` \x91\x82\x01\x81\x90R\x82Q\x80\x84\x01\x90\x93R\x82Rc\xFF\xFF\xFF\xFF\x83\x16\x82\x82\x01R\x88\x01Q\x91\x92Pa\nA\x91\x90a\x0C\xEDV[PPPPPPV[` \x84\x01QQ_\x90a\n_\x90b\x01\0\0\x90a\x1E\xE8V[\x90P_a\nra\x04r\x88` \x01Qa\x0BFV[\x90P_a\n\x88c\xFF\xFF\xFF\xFF\x80\x84\x16\x90\x85\x16a\x1EGV[\x90P\x86` \x01Q` \x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81\x11a\x0B\x0BWa\n\xB0b\x01\0\0\x82a\x1F\x0EV[` \x88\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16\x90Ra\x0B\x06a\n\xFB\x84`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01RP`@\x80Q\x80\x82\x01\x90\x91R_\x81Rc\xFF\xFF\xFF\xFF\x90\x91\x16` \x82\x01R\x90V[` \x8A\x01Q\x90a\x0C\xEDV[a\x0B<V[`@\x80Q\x80\x82\x01\x82R_\x80\x82R` \x91\x82\x01\x81\x90R\x82Q\x80\x84\x01\x90\x93R\x82Rc\xFF\xFF\xFF\xFF\x90\x82\x01Ra\x0B<\x90a\n\xFBV[PPPPPPPPV[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x81Qa\x0Bd\x90a\x0E\xCAV[\x92\x91PPV[` \x81\x01Q_\x90\x81\x83Q`\x06\x81\x11\x15a\x0B\x85Wa\x0B\x85a\x15\xD1V[\x14a\x0B\xD2W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FNOT_I32\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x01\xD3V[d\x01\0\0\0\0\x81\x10a\x0BdW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FBAD_I32\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x01\xD3V[\x85Q_\x90\x81\x90\x81\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x0CB\x88\x8Aa\x1EGV[\x11\x15a\x0CVWP`\x01\x91P_\x90P\x82a\x0C\xE1V[_\x19_\x80\x80[\x8A\x81\x10\x15a\x0C\xD5W_a\x0Co\x82\x8Ea\x1EGV[\x90P_a\x0C}` \x83a\x1E\xC2V[\x90P\x85\x81\x14a\x0C\x9DWa\x0C\x93\x8F\x82\x8E\x8E\x8Ea\r\x98V[P\x9AP\x90\x95P\x93P\x84[_a\x0C\xA9` \x84a\x1E\xD5V[\x90Pa\x0C\xB6\x84`\x08a\x1F\x0EV[a\x0C\xC0\x87\x83a\x0F\xCBV[`\xFF\x16\x90\x1B\x94\x90\x94\x17\x93PPP`\x01\x01a\x0C\\V[P_\x95P\x93P\x85\x92PPP[\x96P\x96P\x96\x93PPPPV[\x81Qa\x0C\xF9\x90\x82a\x10JV[PPV[`@Q\x7FMemory leaf:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`,\x81\x01\x82\x90R_\x90\x81\x90`L\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90Pa\r\x8D\x85\x85\x83`@Q\x80`@\x01`@R\x80`\x13\x81R` \x01\x7FMemory merkle tree:\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RPa\x11/V[\x91PP[\x93\x92PPPV[_\x80a\r\xB0`@Q\x80` \x01`@R\x80``\x81RP\x90V[\x83\x91Pa\r\xBE\x86\x86\x84a\x12AV[\x90\x93P\x91Pa\r\xCE\x86\x86\x84a\x12\\V[\x92P\x90P_a\r\xDE\x82\x89\x86a\x0C\xFDV[\x90P\x88`@\x01Q\x81\x14a\x0E3W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0E`$\x82\x01R\x7FWRONG_MEM_ROOT\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x01\xD3V[P\x95P\x95P\x95\x92PPPV[_` \x83\x10a\x0E\x90W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x15`$\x82\x01R\x7FBAD_SET_LEAF_BYTE_IDX\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x01\xD3V[_\x83a\x0E\x9E`\x01` a\x1F%V[a\x0E\xA8\x91\x90a\x1F%V[a\x0E\xB3\x90`\x08a\x1F\x0EV[`\xFF\x84\x81\x16\x82\x1B\x91\x1B\x19\x86\x16\x17\x91PP\x93\x92PPPV[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x81Q\x80Qa\x0E\xED\x90`\x01\x90a\x1F%V[\x81Q\x81\x10a\x0E\xFDWa\x0E\xFDa\x1F8V[` \x02` \x01\x01Q\x90P_`\x01\x83_\x01QQa\x0F\x19\x91\x90a\x1F%V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0F1Wa\x0F1a\x18\x99V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x0FuW\x81` \x01[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x0FOW\x90P[P\x90P_[\x81Q\x81\x10\x15a\x0F\xC4W\x83Q\x80Q\x82\x90\x81\x10a\x0F\x97Wa\x0F\x97a\x1F8V[` \x02` \x01\x01Q\x82\x82\x81Q\x81\x10a\x0F\xB1Wa\x0F\xB1a\x1F8V[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a\x0FzV[P\x90\x91R\x90V[_` \x82\x10a\x10\x1CW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x16`$\x82\x01R\x7FBAD_PULL_LEAF_BYTE_IDX\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x01\xD3V[_\x82a\x10*`\x01` a\x1F%V[a\x104\x91\x90a\x1F%V[a\x10?\x90`\x08a\x1F\x0EV[\x93\x90\x93\x1C\x93\x92PPPV[\x81QQ_\x90a\x10Z\x90`\x01a\x1EGV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x10rWa\x10ra\x18\x99V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x10\xB6W\x81` \x01[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x10\x90W\x90P[P\x90P_[\x83QQ\x81\x10\x15a\x11\x06W\x83Q\x80Q\x82\x90\x81\x10a\x10\xD9Wa\x10\xD9a\x1F8V[` \x02` \x01\x01Q\x82\x82\x81Q\x81\x10a\x10\xF3Wa\x10\xF3a\x1F8V[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a\x10\xBBV[P\x81\x81\x84_\x01QQ\x81Q\x81\x10a\x11\x1EWa\x11\x1Ea\x1F8V[` \x90\x81\x02\x91\x90\x91\x01\x01R\x90\x91RPV[\x81_[\x85QQ\x81\x10\x15a\x11\xEAW\x84`\x01\x16_\x03a\x11\x94W\x82\x82\x87_\x01Q\x83\x81Q\x81\x10a\x11]Wa\x11]a\x1F8V[` \x02` \x01\x01Q`@Q` \x01a\x11w\x93\x92\x91\x90a\x1FLV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x91Pa\x11\xDEV[\x82\x86_\x01Q\x82\x81Q\x81\x10a\x11\xAAWa\x11\xAAa\x1F8V[` \x02` \x01\x01Q\x83`@Q` \x01a\x11\xC5\x93\x92\x91\x90a\x1FLV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x91P[`\x01\x94\x85\x1C\x94\x01a\x112V[P\x83\x15a\x129W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0F`$\x82\x01R\x7FPROOF_TOO_SHORT\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x01\xD3V[\x94\x93PPPPV[_\x81\x81a\x12O\x86\x86\x84a\x13)V[\x90\x97\x90\x96P\x94PPPPPV[`@\x80Q` \x81\x01\x90\x91R``\x81R\x81_a\x12x\x86\x86\x84a\x13{V[\x92P\x90P_`\xFF\x82\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x12\x99Wa\x12\x99a\x18\x99V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x12\xC2W\x81` \x01` \x82\x02\x806\x837\x01\x90P[P\x90P_[\x82`\xFF\x16\x81`\xFF\x16\x10\x15a\x13\rWa\x12\xE0\x88\x88\x86a\x12AV[\x83\x83`\xFF\x16\x81Q\x81\x10a\x12\xF5Wa\x12\xF5a\x1F8V[` \x90\x81\x02\x91\x90\x91\x01\x01\x91\x90\x91R\x93P`\x01\x01a\x12\xC7V[P`@Q\x80` \x01`@R\x80\x82\x81RP\x93PPP\x93P\x93\x91PPV[_\x81\x81[` \x81\x10\x15a\x13rW`\x08\x83\x90\x1B\x92P\x85\x85\x83\x81\x81\x10a\x13OWa\x13Oa\x1F8V[\x91\x90\x91\x015`\xF8\x1C\x93\x90\x93\x17\x92P\x81a\x13g\x81a\x1FkV[\x92PP`\x01\x01a\x13-V[P\x93P\x93\x91PPV[_\x81\x84\x84\x82\x81\x81\x10a\x13\x8FWa\x13\x8Fa\x1F8V[\x91\x90\x91\x015`\xF8\x1C\x92P\x81\x90Pa\x13\xA5\x81a\x1FkV[\x91PP\x93P\x93\x91PPV[`@\x80Qa\x01\x80\x81\x01\x90\x91R\x80_\x81R` \x01a\x13\xE3`@\x80Q``\x80\x82\x01\x83R\x91\x81\x01\x91\x82R\x90\x81R_` \x82\x01R\x90V[\x81R`@\x80Q\x80\x82\x01\x82R_\x80\x82R` \x80\x83\x01\x91\x90\x91R\x83\x01R\x01a\x14\x1F`@\x80Q``\x80\x82\x01\x83R\x91\x81\x01\x91\x82R\x90\x81R_` \x82\x01R\x90V[\x81R` \x01a\x14C`@Q\x80`@\x01`@R\x80``\x81R` \x01_\x80\x19\x16\x81RP\x90V[\x81R`@\x80Q\x80\x82\x01\x82R_\x80\x82R` \x80\x83\x01\x82\x90R\x84\x01\x91\x90\x91R\x90\x82\x01\x81\x90R``\x82\x01\x81\x90R`\x80\x82\x01\x81\x90R`\xA0\x82\x01\x81\x90R`\xC0\x82\x01\x81\x90R`\xE0\x90\x91\x01R\x90V[a\x14\x93a\x1F\x83V[V[_\x80\x83`\x1F\x84\x01\x12a\x14\xA5W_\x80\xFD[P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x14\xBCW_\x80\xFD[` \x83\x01\x91P\x83` \x82\x85\x01\x01\x11\x15a\x14\xD3W_\x80\xFD[\x92P\x92\x90PV[_\x80_\x80_\x80\x86\x88\x03a\x01\xE0\x81\x12\x15a\x14\xF1W_\x80\xFD[``\x81\x12\x15a\x14\xFEW_\x80\xFD[\x87\x96P``\x88\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x15\x1BW_\x80\xFD[\x81\x8A\x01\x91Pa\x01\xC0\x80\x83\x8D\x03\x12\x15a\x151W_\x80\xFD[\x82\x98Pa\x01\0\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x85\x01\x12\x15a\x15dW_\x80\xFD[`\x80\x8B\x01\x97P`@\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFE\x80\x85\x01\x12\x15a\x15\x99W_\x80\xFD[a\x01\x80\x8B\x01\x96P\x8A\x015\x92P\x80\x83\x11\x15a\x15\xB1W_\x80\xFD[PPa\x15\xBF\x89\x82\x8A\x01a\x14\x95V[\x97\x9A\x96\x99P\x94\x97P\x92\x95\x93\x94\x92PPPV[cNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[`\x03\x81\x10a\x15\xF5Wa\x15\xF5a\x15\xD1V[\x90RV[\x80Q`\x07\x81\x10a\x16\x0BWa\x16\x0Ba\x15\xD1V[\x82R` \x90\x81\x01Q\x91\x01RV[\x80Q`@\x80\x84R\x90Q` \x84\x83\x01\x81\x90R\x81Q``\x86\x01\x81\x90R_\x93\x92\x82\x01\x91\x84\x91`\x80\x88\x01\x90[\x80\x84\x10\x15a\x16gWa\x16S\x82\x86Qa\x15\xF9V[\x93\x82\x01\x93`\x01\x93\x90\x93\x01\x92\x90\x85\x01\x90a\x16@V[P` \x87\x01Q` \x89\x01R\x80\x95PPPPPP\x92\x91PPV[\x80Q`@\x80\x84R\x81Q\x84\x82\x01\x81\x90R_\x92``\x91` \x91\x82\x01\x91\x83\x88\x01\x91\x90\x86[\x82\x81\x10\x15a\x16\xEAW\x84Qa\x16\xB6\x85\x82Qa\x15\xF9V[\x80\x83\x01Q\x85\x89\x01R\x87\x81\x01Qc\xFF\xFF\xFF\xFF\x90\x81\x16\x88\x87\x01R\x90\x87\x01Q\x16`\x80\x85\x01R\x93\x81\x01\x93`\xA0\x90\x93\x01\x92`\x01\x01a\x16\xA1V[PPP` \x86\x01Q` \x88\x01R\x80\x94PPPPP\x92\x91PPV[_a\x01 \x80\x83Ra\x17\x18\x81\x84\x01\x86Qa\x15\xE5V[` \x85\x01Qa\x01\xC0a\x01@\x81\x81\x87\x01Ra\x176a\x02\xE0\x87\x01\x84a\x16\x18V[\x92P`@\x88\x01Qa\x01`a\x17V\x81\x89\x01\x83\x80Q\x82R` \x90\x81\x01Q\x91\x01RV[``\x8A\x01Q\x91P\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFE\xE0\x80\x89\x87\x03\x01a\x01\xA0\x8A\x01Ra\x17\x93\x86\x84a\x16\x18V[\x95P`\x80\x8B\x01Q\x92P\x80\x89\x87\x03\x01\x85\x8A\x01RPa\x17\xB0\x85\x83a\x16\x80V[`\xA0\x8B\x01Q\x80Qa\x01\xE0\x8B\x01R` \x81\x01Qa\x02\0\x8B\x01R\x90\x95P\x93P`\xC0\x8A\x01Qa\x02 \x89\x01R`\xE0\x8A\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x02@\x8A\x01R\x93Pa\x01\0\x8A\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x02`\x8A\x01R\x93P\x94\x89\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x02\x80\x89\x01R\x94\x91\x89\x01Qa\x02\xA0\x88\x01RP\x87\x01Qa\x02\xC0\x86\x01RP\x91Pa\r\x91\x90P` \x83\x01\x84\x80Q\x82R` \x81\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82Q\x16` \x85\x01R\x80` \x83\x01Q\x16`@\x85\x01RP`@\x81\x01Q``\x84\x01RP`@\x81\x01Q`\x80\x83\x01R``\x81\x01Q`\xA0\x83\x01R`\x80\x81\x01Q`\xC0\x83\x01Rc\xFF\xFF\xFF\xFF`\xA0\x82\x01Q\x16`\xE0\x83\x01RPPV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@\x80Q\x90\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x18\xD0Wa\x18\xD0a\x18\x99V[`@R\x90V[`@Q` \x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x18\xD0Wa\x18\xD0a\x18\x99V[`@Q`\x80\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x18\xD0Wa\x18\xD0a\x18\x99V[`@Qa\x01\x80\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x18\xD0Wa\x18\xD0a\x18\x99V[`@Q`\xC0\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x18\xD0Wa\x18\xD0a\x18\x99V[`@Q``\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x18\xD0Wa\x18\xD0a\x18\x99V[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x19\xAFWa\x19\xAFa\x18\x99V[`@R\x91\x90PV[\x805`\x03\x81\x10a\x19\xC5W_\x80\xFD[\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x19\xE3Wa\x19\xE3a\x18\x99V[P`\x05\x1B` \x01\x90V[_`@\x82\x84\x03\x12\x15a\x19\xFDW_\x80\xFD[a\x1A\x05a\x18\xADV[\x90P\x815`\x07\x81\x10a\x1A\x15W_\x80\xFD[\x80\x82RP` \x82\x015` \x82\x01R\x92\x91PPV[_`@\x80\x83\x85\x03\x12\x15a\x1A:W_\x80\xFD[a\x1ABa\x18\xADV[\x91P\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x1A[W_\x80\xFD[\x81\x85\x01\x91P` \x80\x83\x88\x03\x12\x15a\x1ApW_\x80\xFD[a\x1Axa\x18\xD6V[\x835\x83\x81\x11\x15a\x1A\x86W_\x80\xFD[\x80\x85\x01\x94PP\x87`\x1F\x85\x01\x12a\x1A\x9AW_\x80\xFD[\x835\x92Pa\x1A\xAFa\x1A\xAA\x84a\x19\xCAV[a\x19\x86V[\x83\x81R`\x06\x93\x90\x93\x1B\x84\x01\x82\x01\x92\x82\x81\x01\x90\x89\x85\x11\x15a\x1A\xCDW_\x80\xFD[\x94\x83\x01\x94[\x84\x86\x10\x15a\x1A\xF3Wa\x1A\xE4\x8A\x87a\x19\xEDV[\x82R\x94\x86\x01\x94\x90\x83\x01\x90a\x1A\xD2V[\x82RP\x85R\x94\x85\x015\x94\x84\x01\x94\x90\x94RP\x90\x93\x92PPPV[_`@\x82\x84\x03\x12\x15a\x1B\x1CW_\x80\xFD[a\x1B$a\x18\xADV[\x90P\x815\x81R` \x82\x015` \x82\x01R\x92\x91PPV[\x805c\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x19\xC5W_\x80\xFD[_`@\x80\x83\x85\x03\x12\x15a\x1B^W_\x80\xFD[a\x1Bfa\x18\xADV[\x91P\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1B~W_\x80\xFD[\x83\x01`\x1F\x81\x01\x85\x13a\x1B\x8EW_\x80\xFD[\x805` a\x1B\x9Ea\x1A\xAA\x83a\x19\xCAV[\x82\x81R`\xA0\x92\x83\x02\x84\x01\x82\x01\x92\x82\x82\x01\x91\x90\x89\x85\x11\x15a\x1B\xBCW_\x80\xFD[\x94\x83\x01\x94[\x84\x86\x10\x15a\x1C#W\x80\x86\x8B\x03\x12\x15a\x1B\xD7W_\x80\xFD[a\x1B\xDFa\x18\xF9V[a\x1B\xE9\x8B\x88a\x19\xEDV[\x81R\x87\x87\x015\x85\x82\x01R``a\x1C\0\x81\x89\x01a\x1B:V[\x89\x83\x01Ra\x1C\x10`\x80\x89\x01a\x1B:V[\x90\x82\x01R\x83R\x94\x85\x01\x94\x91\x83\x01\x91a\x1B\xC1V[P\x80\x87RPP\x80\x86\x015\x81\x86\x01RPPPP\x92\x91PPV[_a\x01\xC0\x826\x03\x12\x15a\x1CLW_\x80\xFD[a\x1CTa\x19\x1CV[a\x1C]\x83a\x19\xB7V[\x81R` \x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x1CyW_\x80\xFD[a\x1C\x856\x83\x87\x01a\x1A)V[` \x84\x01Ra\x1C\x976`@\x87\x01a\x1B\x0CV[`@\x84\x01R`\x80\x85\x015\x91P\x80\x82\x11\x15a\x1C\xAFW_\x80\xFD[a\x1C\xBB6\x83\x87\x01a\x1A)V[``\x84\x01R`\xA0\x85\x015\x91P\x80\x82\x11\x15a\x1C\xD3W_\x80\xFD[Pa\x1C\xE06\x82\x86\x01a\x1BMV[`\x80\x83\x01RPa\x1C\xF36`\xC0\x85\x01a\x1B\x0CV[`\xA0\x82\x01Ra\x01\0\x80\x84\x015`\xC0\x83\x01Ra\x01 a\x1D\x12\x81\x86\x01a\x1B:V[`\xE0\x84\x01Ra\x01@a\x1D%\x81\x87\x01a\x1B:V[\x83\x85\x01Ra\x01`\x92Pa\x1D9\x83\x87\x01a\x1B:V[\x91\x84\x01\x91\x90\x91Ra\x01\x80\x85\x015\x90\x83\x01Ra\x01\xA0\x90\x93\x015\x92\x81\x01\x92\x90\x92RP\x90V[\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x19\xC5W_\x80\xFD[_\x81\x83\x03a\x01\0\x81\x12\x15a\x1D\x85W_\x80\xFD[a\x1D\x8Da\x19@V[\x835\x81R```\x1F\x19\x83\x01\x12\x15a\x1D\xA2W_\x80\xFD[a\x1D\xAAa\x19cV[\x91Pa\x1D\xB8` \x85\x01a\x1D\\V[\x82Ra\x1D\xC6`@\x85\x01a\x1D\\V[` \x83\x01R``\x84\x015`@\x83\x01R\x81` \x82\x01R`\x80\x84\x015`@\x82\x01R`\xA0\x84\x015``\x82\x01R`\xC0\x84\x015`\x80\x82\x01Ra\x1E\x05`\xE0\x85\x01a\x1B:V[`\xA0\x82\x01R\x94\x93PPPPV[_` \x82\x84\x03\x12\x15a\x1E\"W_\x80\xFD[\x815a\xFF\xFF\x81\x16\x81\x14a\r\x91W_\x80\xFD[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[\x80\x82\x01\x80\x82\x11\x15a\x0BdWa\x0Bda\x1E3V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x81\x16\x83\x82\x16\x02\x80\x82\x16\x91\x90\x82\x81\x14a\x1E~Wa\x1E~a\x1E3V[PP\x92\x91PPV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x81\x16\x82\x82\x16\x03\x90\x80\x82\x11\x15a\x1E\xA7Wa\x1E\xA7a\x1E3V[P\x92\x91PPV[cNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[_\x82a\x1E\xD0Wa\x1E\xD0a\x1E\xAEV[P\x04\x90V[_\x82a\x1E\xE3Wa\x1E\xE3a\x1E\xAEV[P\x06\x90V[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x84\x16\x80a\x1F\x02Wa\x1F\x02a\x1E\xAEV[\x92\x16\x91\x90\x91\x04\x92\x91PPV[\x80\x82\x02\x81\x15\x82\x82\x04\x84\x14\x17a\x0BdWa\x0Bda\x1E3V[\x81\x81\x03\x81\x81\x11\x15a\x0BdWa\x0Bda\x1E3V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_\x84Q\x80` \x87\x01\x84^\x91\x90\x91\x01\x92\x83RP` \x82\x01R`@\x01\x91\x90PV[__\x19\x82\x03a\x1F|Wa\x1F|a\x1E3V[P`\x01\x01\x90V[cNH{q`\xE0\x1B_R`Q`\x04R`$_\xFD\xFE\xA2dipfsX\"\x12 \xE0Q\xC2l\xC9\xB6\xCF\xD5q\xD0>/[\xEDX\r\xCCi\x9EW,\xADtd\xB8\x80\x07|\x12(\xF8\xD4dsolcC\0\x08\x19\x003",
    );
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MachineStatus(u8);
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<MachineStatus> for u8 {
            #[inline]
            fn stv_to_tokens(
                &self,
            ) -> <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'_> {
                alloy_sol_types::private::SolTypeValue::<
                    alloy::sol_types::sol_data::Uint<8>,
                >::stv_to_tokens(self)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::tokenize(self)
                    .0
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(self, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encoded_size(self)
            }
        }
        #[automatically_derived]
        impl MachineStatus {
            /// The Solidity type name.
            pub const NAME: &'static str = stringify!(@ name);
            /// Convert from the underlying value type.
            #[inline]
            pub const fn from(value: u8) -> Self {
                Self(value)
            }
            /// Return the underlying value.
            #[inline]
            pub const fn into(self) -> u8 {
                self.0
            }
            /// Return the single encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode(&self.0)
            }
            /// Return the packed encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode_packed(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode_packed(&self.0)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for MachineStatus {
            type RustType = u8;
            type Token<'a> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = Self::NAME;
            const ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                Self::type_check(token).is_ok()
            }
            #[inline]
            fn type_check(token: &Self::Token<'_>) -> alloy_sol_types::Result<()> {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::type_check(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::detokenize(token)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for MachineStatus {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::topic_preimage_length(rust)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(rust, out)
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic(rust)
            }
        }
    };
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ValueType(u8);
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<ValueType> for u8 {
            #[inline]
            fn stv_to_tokens(
                &self,
            ) -> <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'_> {
                alloy_sol_types::private::SolTypeValue::<
                    alloy::sol_types::sol_data::Uint<8>,
                >::stv_to_tokens(self)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::tokenize(self)
                    .0
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(self, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encoded_size(self)
            }
        }
        #[automatically_derived]
        impl ValueType {
            /// The Solidity type name.
            pub const NAME: &'static str = stringify!(@ name);
            /// Convert from the underlying value type.
            #[inline]
            pub const fn from(value: u8) -> Self {
                Self(value)
            }
            /// Return the underlying value.
            #[inline]
            pub const fn into(self) -> u8 {
                self.0
            }
            /// Return the single encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode(&self.0)
            }
            /// Return the packed encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode_packed(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode_packed(&self.0)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ValueType {
            type RustType = u8;
            type Token<'a> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = Self::NAME;
            const ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                Self::type_check(token).is_ok()
            }
            #[inline]
            fn type_check(token: &Self::Token<'_>) -> alloy_sol_types::Result<()> {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::type_check(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::detokenize(token)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ValueType {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::topic_preimage_length(rust)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(rust, out)
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic(rust)
            }
        }
    };
    /**```solidity
struct ExecutionContext { uint256 maxInboxMessagesRead; address bridge; bytes32 initialWasmModuleRoot; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ExecutionContext {
        pub maxInboxMessagesRead: alloy::sol_types::private::primitives::aliases::U256,
        pub bridge: alloy::sol_types::private::Address,
        pub initialWasmModuleRoot: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ExecutionContext> for UnderlyingRustTuple<'_> {
            fn from(value: ExecutionContext) -> Self {
                (value.maxInboxMessagesRead, value.bridge, value.initialWasmModuleRoot)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ExecutionContext {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    maxInboxMessagesRead: tuple.0,
                    bridge: tuple.1,
                    initialWasmModuleRoot: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for ExecutionContext {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for ExecutionContext {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.maxInboxMessagesRead),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.bridge,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.initialWasmModuleRoot),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ExecutionContext {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for ExecutionContext {
            const NAME: &'static str = "ExecutionContext";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "ExecutionContext(uint256 maxInboxMessagesRead,address bridge,bytes32 initialWasmModuleRoot)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.maxInboxMessagesRead,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.bridge,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.initialWasmModuleRoot,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ExecutionContext {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.maxInboxMessagesRead,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.bridge,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.initialWasmModuleRoot,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.maxInboxMessagesRead,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.bridge,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.initialWasmModuleRoot,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct Instruction { uint16 opcode; uint256 argumentData; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct Instruction {
        pub opcode: u16,
        pub argumentData: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<16>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            u16,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Instruction> for UnderlyingRustTuple<'_> {
            fn from(value: Instruction) -> Self {
                (value.opcode, value.argumentData)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Instruction {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    opcode: tuple.0,
                    argumentData: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Instruction {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Instruction {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        16,
                    > as alloy_sol_types::SolType>::tokenize(&self.opcode),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.argumentData),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Instruction {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Instruction {
            const NAME: &'static str = "Instruction";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "Instruction(uint16 opcode,uint256 argumentData)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        16,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.opcode)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.argumentData)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Instruction {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        16,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.opcode,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.argumentData,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    16,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.opcode,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.argumentData,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct Machine { MachineStatus status; ValueStack valueStack; MultiStack valueMultiStack; ValueStack internalStack; StackFrameWindow frameStack; MultiStack frameMultiStack; bytes32 globalStateHash; uint32 moduleIdx; uint32 functionIdx; uint32 functionPc; bytes32 recoveryPc; bytes32 modulesRoot; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct Machine {
        pub status: <MachineStatus as alloy::sol_types::SolType>::RustType,
        pub valueStack: <ValueStack as alloy::sol_types::SolType>::RustType,
        pub valueMultiStack: <MultiStack as alloy::sol_types::SolType>::RustType,
        pub internalStack: <ValueStack as alloy::sol_types::SolType>::RustType,
        pub frameStack: <StackFrameWindow as alloy::sol_types::SolType>::RustType,
        pub frameMultiStack: <MultiStack as alloy::sol_types::SolType>::RustType,
        pub globalStateHash: alloy::sol_types::private::FixedBytes<32>,
        pub moduleIdx: u32,
        pub functionIdx: u32,
        pub functionPc: u32,
        pub recoveryPc: alloy::sol_types::private::FixedBytes<32>,
        pub modulesRoot: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            MachineStatus,
            ValueStack,
            MultiStack,
            ValueStack,
            StackFrameWindow,
            MultiStack,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::Uint<32>,
            alloy::sol_types::sol_data::Uint<32>,
            alloy::sol_types::sol_data::Uint<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            <MachineStatus as alloy::sol_types::SolType>::RustType,
            <ValueStack as alloy::sol_types::SolType>::RustType,
            <MultiStack as alloy::sol_types::SolType>::RustType,
            <ValueStack as alloy::sol_types::SolType>::RustType,
            <StackFrameWindow as alloy::sol_types::SolType>::RustType,
            <MultiStack as alloy::sol_types::SolType>::RustType,
            alloy::sol_types::private::FixedBytes<32>,
            u32,
            u32,
            u32,
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Machine> for UnderlyingRustTuple<'_> {
            fn from(value: Machine) -> Self {
                (
                    value.status,
                    value.valueStack,
                    value.valueMultiStack,
                    value.internalStack,
                    value.frameStack,
                    value.frameMultiStack,
                    value.globalStateHash,
                    value.moduleIdx,
                    value.functionIdx,
                    value.functionPc,
                    value.recoveryPc,
                    value.modulesRoot,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Machine {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    status: tuple.0,
                    valueStack: tuple.1,
                    valueMultiStack: tuple.2,
                    internalStack: tuple.3,
                    frameStack: tuple.4,
                    frameMultiStack: tuple.5,
                    globalStateHash: tuple.6,
                    moduleIdx: tuple.7,
                    functionIdx: tuple.8,
                    functionPc: tuple.9,
                    recoveryPc: tuple.10,
                    modulesRoot: tuple.11,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Machine {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Machine {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <MachineStatus as alloy_sol_types::SolType>::tokenize(&self.status),
                    <ValueStack as alloy_sol_types::SolType>::tokenize(&self.valueStack),
                    <MultiStack as alloy_sol_types::SolType>::tokenize(
                        &self.valueMultiStack,
                    ),
                    <ValueStack as alloy_sol_types::SolType>::tokenize(
                        &self.internalStack,
                    ),
                    <StackFrameWindow as alloy_sol_types::SolType>::tokenize(
                        &self.frameStack,
                    ),
                    <MultiStack as alloy_sol_types::SolType>::tokenize(
                        &self.frameMultiStack,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.globalStateHash),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.moduleIdx),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.functionIdx),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.functionPc),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.recoveryPc),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.modulesRoot),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Machine {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Machine {
            const NAME: &'static str = "Machine";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "Machine(uint8 status,ValueStack valueStack,MultiStack valueMultiStack,ValueStack internalStack,StackFrameWindow frameStack,MultiStack frameMultiStack,bytes32 globalStateHash,uint32 moduleIdx,uint32 functionIdx,uint32 functionPc,bytes32 recoveryPc,bytes32 modulesRoot)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(5);
                components
                    .push(
                        <ValueStack as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <ValueStack as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
                    .push(
                        <MultiStack as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <MultiStack as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
                    .push(
                        <ValueStack as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <ValueStack as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
                    .push(
                        <StackFrameWindow as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <StackFrameWindow as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
                    .push(
                        <MultiStack as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <MultiStack as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <MachineStatus as alloy_sol_types::SolType>::eip712_data_word(
                            &self.status,
                        )
                        .0,
                    <ValueStack as alloy_sol_types::SolType>::eip712_data_word(
                            &self.valueStack,
                        )
                        .0,
                    <MultiStack as alloy_sol_types::SolType>::eip712_data_word(
                            &self.valueMultiStack,
                        )
                        .0,
                    <ValueStack as alloy_sol_types::SolType>::eip712_data_word(
                            &self.internalStack,
                        )
                        .0,
                    <StackFrameWindow as alloy_sol_types::SolType>::eip712_data_word(
                            &self.frameStack,
                        )
                        .0,
                    <MultiStack as alloy_sol_types::SolType>::eip712_data_word(
                            &self.frameMultiStack,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.globalStateHash,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.moduleIdx)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.functionIdx)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.functionPc)
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.recoveryPc)
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.modulesRoot)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Machine {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <MachineStatus as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.status,
                    )
                    + <ValueStack as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.valueStack,
                    )
                    + <MultiStack as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.valueMultiStack,
                    )
                    + <ValueStack as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.internalStack,
                    )
                    + <StackFrameWindow as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.frameStack,
                    )
                    + <MultiStack as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.frameMultiStack,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.globalStateHash,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.moduleIdx,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.functionIdx,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.functionPc,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.recoveryPc,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.modulesRoot,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <MachineStatus as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.status,
                    out,
                );
                <ValueStack as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.valueStack,
                    out,
                );
                <MultiStack as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.valueMultiStack,
                    out,
                );
                <ValueStack as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.internalStack,
                    out,
                );
                <StackFrameWindow as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.frameStack,
                    out,
                );
                <MultiStack as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.frameMultiStack,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.globalStateHash,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.moduleIdx,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.functionIdx,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.functionPc,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.recoveryPc,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.modulesRoot,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct Module { bytes32 globalsMerkleRoot; ModuleMemory moduleMemory; bytes32 tablesMerkleRoot; bytes32 functionsMerkleRoot; bytes32 extraHash; uint32 internalsOffset; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct Module {
        pub globalsMerkleRoot: alloy::sol_types::private::FixedBytes<32>,
        pub moduleMemory: <ModuleMemory as alloy::sol_types::SolType>::RustType,
        pub tablesMerkleRoot: alloy::sol_types::private::FixedBytes<32>,
        pub functionsMerkleRoot: alloy::sol_types::private::FixedBytes<32>,
        pub extraHash: alloy::sol_types::private::FixedBytes<32>,
        pub internalsOffset: u32,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::FixedBytes<32>,
            ModuleMemory,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::Uint<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::FixedBytes<32>,
            <ModuleMemory as alloy::sol_types::SolType>::RustType,
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::FixedBytes<32>,
            u32,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Module> for UnderlyingRustTuple<'_> {
            fn from(value: Module) -> Self {
                (
                    value.globalsMerkleRoot,
                    value.moduleMemory,
                    value.tablesMerkleRoot,
                    value.functionsMerkleRoot,
                    value.extraHash,
                    value.internalsOffset,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Module {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    globalsMerkleRoot: tuple.0,
                    moduleMemory: tuple.1,
                    tablesMerkleRoot: tuple.2,
                    functionsMerkleRoot: tuple.3,
                    extraHash: tuple.4,
                    internalsOffset: tuple.5,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Module {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Module {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.globalsMerkleRoot),
                    <ModuleMemory as alloy_sol_types::SolType>::tokenize(
                        &self.moduleMemory,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.tablesMerkleRoot),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.functionsMerkleRoot),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.extraHash),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.internalsOffset),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Module {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Module {
            const NAME: &'static str = "Module";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "Module(bytes32 globalsMerkleRoot,ModuleMemory moduleMemory,bytes32 tablesMerkleRoot,bytes32 functionsMerkleRoot,bytes32 extraHash,uint32 internalsOffset)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(1);
                components
                    .push(
                        <ModuleMemory as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <ModuleMemory as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.globalsMerkleRoot,
                        )
                        .0,
                    <ModuleMemory as alloy_sol_types::SolType>::eip712_data_word(
                            &self.moduleMemory,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.tablesMerkleRoot,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.functionsMerkleRoot,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.extraHash)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.internalsOffset,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Module {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.globalsMerkleRoot,
                    )
                    + <ModuleMemory as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.moduleMemory,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.tablesMerkleRoot,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.functionsMerkleRoot,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.extraHash,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.internalsOffset,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.globalsMerkleRoot,
                    out,
                );
                <ModuleMemory as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.moduleMemory,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.tablesMerkleRoot,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.functionsMerkleRoot,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.extraHash,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.internalsOffset,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct ModuleMemory { uint64 size; uint64 maxSize; bytes32 merkleRoot; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ModuleMemory {
        pub size: u64,
        pub maxSize: u64,
        pub merkleRoot: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<64>,
            alloy::sol_types::sol_data::Uint<64>,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            u64,
            u64,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ModuleMemory> for UnderlyingRustTuple<'_> {
            fn from(value: ModuleMemory) -> Self {
                (value.size, value.maxSize, value.merkleRoot)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ModuleMemory {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    size: tuple.0,
                    maxSize: tuple.1,
                    merkleRoot: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for ModuleMemory {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for ModuleMemory {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.size),
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.maxSize),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.merkleRoot),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ModuleMemory {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for ModuleMemory {
            const NAME: &'static str = "ModuleMemory";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "ModuleMemory(uint64 size,uint64 maxSize,bytes32 merkleRoot)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.size)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.maxSize)
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.merkleRoot)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ModuleMemory {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.size)
                    + <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.maxSize,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.merkleRoot,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    64,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.size,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    64,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.maxSize,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.merkleRoot,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct MultiStack { bytes32 inactiveStackHash; bytes32 remainingHash; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MultiStack {
        pub inactiveStackHash: alloy::sol_types::private::FixedBytes<32>,
        pub remainingHash: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<MultiStack> for UnderlyingRustTuple<'_> {
            fn from(value: MultiStack) -> Self {
                (value.inactiveStackHash, value.remainingHash)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for MultiStack {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    inactiveStackHash: tuple.0,
                    remainingHash: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for MultiStack {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for MultiStack {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.inactiveStackHash),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.remainingHash),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for MultiStack {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for MultiStack {
            const NAME: &'static str = "MultiStack";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "MultiStack(bytes32 inactiveStackHash,bytes32 remainingHash)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.inactiveStackHash,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.remainingHash)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for MultiStack {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.inactiveStackHash,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.remainingHash,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.inactiveStackHash,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.remainingHash,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct StackFrame { Value returnPc; bytes32 localsMerkleRoot; uint32 callerModule; uint32 callerModuleInternals; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct StackFrame {
        pub returnPc: <Value as alloy::sol_types::SolType>::RustType,
        pub localsMerkleRoot: alloy::sol_types::private::FixedBytes<32>,
        pub callerModule: u32,
        pub callerModuleInternals: u32,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            Value,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::Uint<32>,
            alloy::sol_types::sol_data::Uint<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            <Value as alloy::sol_types::SolType>::RustType,
            alloy::sol_types::private::FixedBytes<32>,
            u32,
            u32,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<StackFrame> for UnderlyingRustTuple<'_> {
            fn from(value: StackFrame) -> Self {
                (
                    value.returnPc,
                    value.localsMerkleRoot,
                    value.callerModule,
                    value.callerModuleInternals,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for StackFrame {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    returnPc: tuple.0,
                    localsMerkleRoot: tuple.1,
                    callerModule: tuple.2,
                    callerModuleInternals: tuple.3,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for StackFrame {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for StackFrame {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <Value as alloy_sol_types::SolType>::tokenize(&self.returnPc),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.localsMerkleRoot),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.callerModule),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.callerModuleInternals),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for StackFrame {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for StackFrame {
            const NAME: &'static str = "StackFrame";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "StackFrame(Value returnPc,bytes32 localsMerkleRoot,uint32 callerModule,uint32 callerModuleInternals)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(1);
                components
                    .push(<Value as alloy_sol_types::SolStruct>::eip712_root_type());
                components
                    .extend(<Value as alloy_sol_types::SolStruct>::eip712_components());
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <Value as alloy_sol_types::SolType>::eip712_data_word(&self.returnPc)
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.localsMerkleRoot,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.callerModule)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.callerModuleInternals,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for StackFrame {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <Value as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.returnPc,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.localsMerkleRoot,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.callerModule,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.callerModuleInternals,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <Value as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.returnPc,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.localsMerkleRoot,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.callerModule,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.callerModuleInternals,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct StackFrameWindow { StackFrame[] proved; bytes32 remainingHash; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct StackFrameWindow {
        pub proved: alloy::sol_types::private::Vec<
            <StackFrame as alloy::sol_types::SolType>::RustType,
        >,
        pub remainingHash: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Array<StackFrame>,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Vec<
                <StackFrame as alloy::sol_types::SolType>::RustType,
            >,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<StackFrameWindow> for UnderlyingRustTuple<'_> {
            fn from(value: StackFrameWindow) -> Self {
                (value.proved, value.remainingHash)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for StackFrameWindow {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    proved: tuple.0,
                    remainingHash: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for StackFrameWindow {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for StackFrameWindow {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        StackFrame,
                    > as alloy_sol_types::SolType>::tokenize(&self.proved),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.remainingHash),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for StackFrameWindow {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for StackFrameWindow {
            const NAME: &'static str = "StackFrameWindow";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "StackFrameWindow(StackFrame[] proved,bytes32 remainingHash)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(1);
                components
                    .push(
                        <StackFrame as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <StackFrame as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Array<
                        StackFrame,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.proved)
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.remainingHash)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for StackFrameWindow {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Array<
                        StackFrame,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.proved,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.remainingHash,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Array<
                    StackFrame,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.proved,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.remainingHash,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct Value { ValueType valueType; uint256 contents; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct Value {
        pub valueType: <ValueType as alloy::sol_types::SolType>::RustType,
        pub contents: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (ValueType, alloy::sol_types::sol_data::Uint<256>);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            <ValueType as alloy::sol_types::SolType>::RustType,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Value> for UnderlyingRustTuple<'_> {
            fn from(value: Value) -> Self {
                (value.valueType, value.contents)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Value {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    valueType: tuple.0,
                    contents: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Value {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Value {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <ValueType as alloy_sol_types::SolType>::tokenize(&self.valueType),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contents),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Value {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Value {
            const NAME: &'static str = "Value";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "Value(uint8 valueType,uint256 contents)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <ValueType as alloy_sol_types::SolType>::eip712_data_word(
                            &self.valueType,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.contents)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Value {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <ValueType as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.valueType,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.contents,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <ValueType as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.valueType,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.contents,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct ValueArray { Value[] inner; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ValueArray {
        pub inner: alloy::sol_types::private::Vec<
            <Value as alloy::sol_types::SolType>::RustType,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Array<Value>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Vec<
                <Value as alloy::sol_types::SolType>::RustType,
            >,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ValueArray> for UnderlyingRustTuple<'_> {
            fn from(value: ValueArray) -> Self {
                (value.inner,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ValueArray {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { inner: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for ValueArray {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for ValueArray {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        Value,
                    > as alloy_sol_types::SolType>::tokenize(&self.inner),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ValueArray {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for ValueArray {
            const NAME: &'static str = "ValueArray";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed("ValueArray(Value[] inner)")
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(1);
                components
                    .push(<Value as alloy_sol_types::SolStruct>::eip712_root_type());
                components
                    .extend(<Value as alloy_sol_types::SolStruct>::eip712_components());
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                <alloy::sol_types::sol_data::Array<
                    Value,
                > as alloy_sol_types::SolType>::eip712_data_word(&self.inner)
                    .0
                    .to_vec()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ValueArray {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Array<
                        Value,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.inner)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Array<
                    Value,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.inner,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct ValueStack { ValueArray proved; bytes32 remainingHash; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ValueStack {
        pub proved: <ValueArray as alloy::sol_types::SolType>::RustType,
        pub remainingHash: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            ValueArray,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            <ValueArray as alloy::sol_types::SolType>::RustType,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ValueStack> for UnderlyingRustTuple<'_> {
            fn from(value: ValueStack) -> Self {
                (value.proved, value.remainingHash)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ValueStack {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    proved: tuple.0,
                    remainingHash: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for ValueStack {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for ValueStack {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <ValueArray as alloy_sol_types::SolType>::tokenize(&self.proved),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.remainingHash),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ValueStack {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for ValueStack {
            const NAME: &'static str = "ValueStack";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "ValueStack(ValueArray proved,bytes32 remainingHash)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(1);
                components
                    .push(
                        <ValueArray as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <ValueArray as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <ValueArray as alloy_sol_types::SolType>::eip712_data_word(
                            &self.proved,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.remainingHash)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ValueStack {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <ValueArray as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.proved,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.remainingHash,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <ValueArray as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.proved,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.remainingHash,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**Function with signature `executeOneStep((uint256,address,bytes32),(uint8,(((uint8,uint256)[]),bytes32),(bytes32,bytes32),(((uint8,uint256)[]),bytes32),(((uint8,uint256),bytes32,uint32,uint32)[],bytes32),(bytes32,bytes32),bytes32,uint32,uint32,uint32,bytes32,bytes32),(bytes32,(uint64,uint64,bytes32),bytes32,bytes32,bytes32,uint32),(uint16,uint256),bytes)` and selector `0xa92cb501`.
```solidity
function executeOneStep(ExecutionContext memory, Machine memory startMach, Module memory startMod, Instruction memory inst, bytes memory proof) external pure returns (Machine memory mach, Module memory r#mod);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeOneStepCall {
        pub _0: <ExecutionContext as alloy::sol_types::SolType>::RustType,
        pub startMach: <Machine as alloy::sol_types::SolType>::RustType,
        pub startMod: <Module as alloy::sol_types::SolType>::RustType,
        pub inst: <Instruction as alloy::sol_types::SolType>::RustType,
        pub proof: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`executeOneStep((uint256,address,bytes32),(uint8,(((uint8,uint256)[]),bytes32),(bytes32,bytes32),(((uint8,uint256)[]),bytes32),(((uint8,uint256),bytes32,uint32,uint32)[],bytes32),(bytes32,bytes32),bytes32,uint32,uint32,uint32,bytes32,bytes32),(bytes32,(uint64,uint64,bytes32),bytes32,bytes32,bytes32,uint32),(uint16,uint256),bytes)`](executeOneStepCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeOneStepReturn {
        pub mach: <Machine as alloy::sol_types::SolType>::RustType,
        pub r#mod: <Module as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                ExecutionContext,
                Machine,
                Module,
                Instruction,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <ExecutionContext as alloy::sol_types::SolType>::RustType,
                <Machine as alloy::sol_types::SolType>::RustType,
                <Module as alloy::sol_types::SolType>::RustType,
                <Instruction as alloy::sol_types::SolType>::RustType,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeOneStepCall> for UnderlyingRustTuple<'_> {
                fn from(value: executeOneStepCall) -> Self {
                    (value._0, value.startMach, value.startMod, value.inst, value.proof)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for executeOneStepCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _0: tuple.0,
                        startMach: tuple.1,
                        startMod: tuple.2,
                        inst: tuple.3,
                        proof: tuple.4,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (Machine, Module);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <Machine as alloy::sol_types::SolType>::RustType,
                <Module as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeOneStepReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: executeOneStepReturn) -> Self {
                    (value.mach, value.r#mod)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for executeOneStepReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        mach: tuple.0,
                        r#mod: tuple.1,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for executeOneStepCall {
            type Parameters<'a> = (
                ExecutionContext,
                Machine,
                Module,
                Instruction,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = executeOneStepReturn;
            type ReturnTuple<'a> = (Machine, Module);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "executeOneStep((uint256,address,bytes32),(uint8,(((uint8,uint256)[]),bytes32),(bytes32,bytes32),(((uint8,uint256)[]),bytes32),(((uint8,uint256),bytes32,uint32,uint32)[],bytes32),(bytes32,bytes32),bytes32,uint32,uint32,uint32,bytes32,bytes32),(bytes32,(uint64,uint64,bytes32),bytes32,bytes32,bytes32,uint32),(uint16,uint256),bytes)";
            const SELECTOR: [u8; 4] = [169u8, 44u8, 181u8, 1u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <ExecutionContext as alloy_sol_types::SolType>::tokenize(&self._0),
                    <Machine as alloy_sol_types::SolType>::tokenize(&self.startMach),
                    <Module as alloy_sol_types::SolType>::tokenize(&self.startMod),
                    <Instruction as alloy_sol_types::SolType>::tokenize(&self.inst),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.proof,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`OneStepProverMemory`](self) function calls.
    pub enum OneStepProverMemoryCalls {
        executeOneStep(executeOneStepCall),
    }
    #[automatically_derived]
    impl OneStepProverMemoryCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[[169u8, 44u8, 181u8, 1u8]];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for OneStepProverMemoryCalls {
        const NAME: &'static str = "OneStepProverMemoryCalls";
        const MIN_DATA_LENGTH: usize = 1120usize;
        const COUNT: usize = 1usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::executeOneStep(_) => {
                    <executeOneStepCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<OneStepProverMemoryCalls>] = &[
                {
                    fn executeOneStep(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OneStepProverMemoryCalls> {
                        <executeOneStepCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OneStepProverMemoryCalls::executeOneStep)
                    }
                    executeOneStep
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::executeOneStep(inner) => {
                    <executeOneStepCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::executeOneStep(inner) => {
                    <executeOneStepCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`OneStepProverMemory`](self) contract instance.

See the [wrapper's documentation](`OneStepProverMemoryInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> OneStepProverMemoryInstance<T, P, N> {
        OneStepProverMemoryInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<OneStepProverMemoryInstance<T, P, N>>,
    > {
        OneStepProverMemoryInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        OneStepProverMemoryInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`OneStepProverMemory`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`OneStepProverMemory`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct OneStepProverMemoryInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for OneStepProverMemoryInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("OneStepProverMemoryInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > OneStepProverMemoryInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`OneStepProverMemory`](self) contract instance.

See the [wrapper's documentation](`OneStepProverMemoryInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<OneStepProverMemoryInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> OneStepProverMemoryInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> OneStepProverMemoryInstance<T, P, N> {
            OneStepProverMemoryInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > OneStepProverMemoryInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`executeOneStep`] function.
        pub fn executeOneStep(
            &self,
            _0: <ExecutionContext as alloy::sol_types::SolType>::RustType,
            startMach: <Machine as alloy::sol_types::SolType>::RustType,
            startMod: <Module as alloy::sol_types::SolType>::RustType,
            inst: <Instruction as alloy::sol_types::SolType>::RustType,
            proof: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, executeOneStepCall, N> {
            self.call_builder(
                &executeOneStepCall {
                    _0,
                    startMach,
                    startMod,
                    inst,
                    proof,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > OneStepProverMemoryInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
