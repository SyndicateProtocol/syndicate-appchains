/**

Generated by the following Solidity interface...
```solidity
interface RoundTimingInfoImp {
    struct RoundTimingInfo {
        int64 offsetTimestamp;
        uint64 roundDurationSeconds;
        uint64 auctionClosingSeconds;
        uint64 reserveSubmissionSeconds;
    }

    error NegativeRoundStart(int64 roundStart);

    constructor(RoundTimingInfo r);

    function currentRound() external view returns (uint64);
    function isAuctionRoundClosed() external view returns (bool);
    function isReserveBlackout(uint64 latestResolvedRound) external view returns (bool);
    function roundTimestamps(uint64 round) external view returns (uint64, uint64);
    function timingInfo() external view returns (int64 offsetTimestamp, uint64 roundDurationSeconds, uint64 auctionClosingSeconds, uint64 reserveSubmissionSeconds);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "r",
        "type": "tuple",
        "internalType": "struct RoundTimingInfo",
        "components": [
          {
            "name": "offsetTimestamp",
            "type": "int64",
            "internalType": "int64"
          },
          {
            "name": "roundDurationSeconds",
            "type": "uint64",
            "internalType": "uint64"
          },
          {
            "name": "auctionClosingSeconds",
            "type": "uint64",
            "internalType": "uint64"
          },
          {
            "name": "reserveSubmissionSeconds",
            "type": "uint64",
            "internalType": "uint64"
          }
        ]
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "currentRound",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint64",
        "internalType": "uint64"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isAuctionRoundClosed",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isReserveBlackout",
    "inputs": [
      {
        "name": "latestResolvedRound",
        "type": "uint64",
        "internalType": "uint64"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "roundTimestamps",
    "inputs": [
      {
        "name": "round",
        "type": "uint64",
        "internalType": "uint64"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint64",
        "internalType": "uint64"
      },
      {
        "name": "",
        "type": "uint64",
        "internalType": "uint64"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "timingInfo",
    "inputs": [],
    "outputs": [
      {
        "name": "offsetTimestamp",
        "type": "int64",
        "internalType": "int64"
      },
      {
        "name": "roundDurationSeconds",
        "type": "uint64",
        "internalType": "uint64"
      },
      {
        "name": "auctionClosingSeconds",
        "type": "uint64",
        "internalType": "uint64"
      },
      {
        "name": "reserveSubmissionSeconds",
        "type": "uint64",
        "internalType": "uint64"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "error",
    "name": "NegativeRoundStart",
    "inputs": [
      {
        "name": "roundStart",
        "type": "int64",
        "internalType": "int64"
      }
    ]
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod RoundTimingInfoImp {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234801561000f575f80fd5b506040516107f93803806107f983398101604081905261002e916100bf565b80515f8054602084015160408501516060909501516001600160401b03908116600160c01b026001600160c01b03968216600160801b02969096166001600160801b0392821668010000000000000000026001600160801b0319909416919095161791909117169190911791909117905561014d565b80516001600160401b03811681146100ba575f80fd5b919050565b5f608082840312156100cf575f80fd5b604051608081016001600160401b03811182821017156100fd57634e487b7160e01b5f52604160045260245ffd5b6040528251600781900b8114610111575f80fd5b815261011f602084016100a4565b6020820152610130604084016100a4565b6040820152610141606084016100a4565b60608201529392505050565b61069f8061015a5f395ff3fe608060405234801561000f575f80fd5b5060043610610064575f3560e01c80637b617f941161004d5780637b617f94146100f45780638a19c8bc14610128578063c411f90914610149575f80fd5b80630fa32939146100685780632d668ce7146100dc575b5f80fd5b5f546100a290600781900b9067ffffffffffffffff680100000000000000008204811691600160801b8104821691600160c01b9091041684565b6040805160079590950b855267ffffffffffffffff9384166020860152918316918401919091521660608201526080015b60405180910390f35b6100e461015c565b60405190151581526020016100d3565b6101076101023660046104c2565b6101b9565b6040805167ffffffffffffffff9384168152929091166020830152016100d3565b61013061021d565b60405167ffffffffffffffff90911681526020016100d3565b6100e46101573660046104c2565b610275565b604080516080810182525f8054600781900b835267ffffffffffffffff68010000000000000000820481166020850152600160801b8204811694840194909452600160c01b900490921660608201526101b4906102d4565b905090565b604080516080810182525f8054600781900b835267ffffffffffffffff68010000000000000000820481166020850152600160801b8204811694840194909452600160c01b900490921660608201528190610214908461033b565b91509150915091565b604080516080810182525f8054600781900b835267ffffffffffffffff68010000000000000000820481166020850152600160801b8204811694840194909452600160c01b900490921660608201526101b4906103d1565b604080516080810182525f8054600781900b835267ffffffffffffffff68010000000000000000820481166020850152600160801b8204811694840194909452600160c01b900490921660608201526102ce9083610405565b92915050565b80515f90600790810b4290910b12156102ee57505f919050565b5f6102fb835f01516104b7565b90505f83602001518261030e919061051d565b9050836040015184602001516103249190610570565b67ffffffffffffffff908116911610159392505050565b5f805f83856020015161034e9190610598565b855161035a91906105c4565b90505f8160070b12156103a3576040517ff160ad79000000000000000000000000000000000000000000000000000000008152600782900b600482015260240160405180910390fd5b602085015181905f906001906103b990846105f3565b6103c39190610570565b919791965090945050505050565b80515f90600790810b4290910b12156103eb57505f919050565b602082015182516103fb906104b7565b6102ce9190610614565b81515f90600790810b4290910b121561041f57505f6102ce565b5f610429846103d1565b90506104368160016105f3565b67ffffffffffffffff168367ffffffffffffffff1610610459575f9150506102ce565b5f610466855f01516104b7565b90505f856020015182610479919061051d565b90508560600151866040015187602001516104949190610570565b61049e9190610570565b67ffffffffffffffff9081169116101595945050505050565b5f6102ce824261063a565b5f602082840312156104d2575f80fd5b813567ffffffffffffffff811681146104e9575f80fd5b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f67ffffffffffffffff80841680610537576105376104f0565b92169190910692915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b67ffffffffffffffff82811682821603908082111561059157610591610543565b5092915050565b67ffffffffffffffff8181168382160280821691908281146105bc576105bc610543565b505092915050565b600781810b9083900b01677fffffffffffffff8113677fffffffffffffff19821217156102ce576102ce610543565b67ffffffffffffffff81811683821601908082111561059157610591610543565b5f67ffffffffffffffff8084168061062e5761062e6104f0565b92169190910492915050565b600782810b9082900b03677fffffffffffffff198112677fffffffffffffff821317156102ce576102ce61054356fea2646970667358221220452b3397bbcdd2b624bf981ff5d341e1f7b9cad496be206bb145004988b7bec764736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`@Qa\x07\xF98\x03\x80a\x07\xF9\x839\x81\x01`@\x81\x90Ra\0.\x91a\0\xBFV[\x80Q_\x80T` \x84\x01Q`@\x85\x01Q``\x90\x95\x01Q`\x01`\x01`@\x1B\x03\x90\x81\x16`\x01`\xC0\x1B\x02`\x01`\x01`\xC0\x1B\x03\x96\x82\x16`\x01`\x80\x1B\x02\x96\x90\x96\x16`\x01`\x01`\x80\x1B\x03\x92\x82\x16h\x01\0\0\0\0\0\0\0\0\x02`\x01`\x01`\x80\x1B\x03\x19\x90\x94\x16\x91\x90\x95\x16\x17\x91\x90\x91\x17\x16\x91\x90\x91\x17\x91\x90\x91\x17\x90Ua\x01MV[\x80Q`\x01`\x01`@\x1B\x03\x81\x16\x81\x14a\0\xBAW_\x80\xFD[\x91\x90PV[_`\x80\x82\x84\x03\x12\x15a\0\xCFW_\x80\xFD[`@Q`\x80\x81\x01`\x01`\x01`@\x1B\x03\x81\x11\x82\x82\x10\x17\x15a\0\xFDWcNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@R\x82Q`\x07\x81\x90\x0B\x81\x14a\x01\x11W_\x80\xFD[\x81Ra\x01\x1F` \x84\x01a\0\xA4V[` \x82\x01Ra\x010`@\x84\x01a\0\xA4V[`@\x82\x01Ra\x01A``\x84\x01a\0\xA4V[``\x82\x01R\x93\x92PPPV[a\x06\x9F\x80a\x01Z_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\0dW_5`\xE0\x1C\x80c{a\x7F\x94\x11a\0MW\x80c{a\x7F\x94\x14a\0\xF4W\x80c\x8A\x19\xC8\xBC\x14a\x01(W\x80c\xC4\x11\xF9\t\x14a\x01IW_\x80\xFD[\x80c\x0F\xA3)9\x14a\0hW\x80c-f\x8C\xE7\x14a\0\xDCW[_\x80\xFD[_Ta\0\xA2\x90`\x07\x81\x90\x0B\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFh\x01\0\0\0\0\0\0\0\0\x82\x04\x81\x16\x91`\x01`\x80\x1B\x81\x04\x82\x16\x91`\x01`\xC0\x1B\x90\x91\x04\x16\x84V[`@\x80Q`\x07\x95\x90\x95\x0B\x85Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x93\x84\x16` \x86\x01R\x91\x83\x16\x91\x84\x01\x91\x90\x91R\x16``\x82\x01R`\x80\x01[`@Q\x80\x91\x03\x90\xF3[a\0\xE4a\x01\\V[`@Q\x90\x15\x15\x81R` \x01a\0\xD3V[a\x01\x07a\x01\x026`\x04a\x04\xC2V[a\x01\xB9V[`@\x80Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x93\x84\x16\x81R\x92\x90\x91\x16` \x83\x01R\x01a\0\xD3V[a\x010a\x02\x1DV[`@Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16\x81R` \x01a\0\xD3V[a\0\xE4a\x01W6`\x04a\x04\xC2V[a\x02uV[`@\x80Q`\x80\x81\x01\x82R_\x80T`\x07\x81\x90\x0B\x83Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFh\x01\0\0\0\0\0\0\0\0\x82\x04\x81\x16` \x85\x01R`\x01`\x80\x1B\x82\x04\x81\x16\x94\x84\x01\x94\x90\x94R`\x01`\xC0\x1B\x90\x04\x90\x92\x16``\x82\x01Ra\x01\xB4\x90a\x02\xD4V[\x90P\x90V[`@\x80Q`\x80\x81\x01\x82R_\x80T`\x07\x81\x90\x0B\x83Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFh\x01\0\0\0\0\0\0\0\0\x82\x04\x81\x16` \x85\x01R`\x01`\x80\x1B\x82\x04\x81\x16\x94\x84\x01\x94\x90\x94R`\x01`\xC0\x1B\x90\x04\x90\x92\x16``\x82\x01R\x81\x90a\x02\x14\x90\x84a\x03;V[\x91P\x91P\x91P\x91V[`@\x80Q`\x80\x81\x01\x82R_\x80T`\x07\x81\x90\x0B\x83Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFh\x01\0\0\0\0\0\0\0\0\x82\x04\x81\x16` \x85\x01R`\x01`\x80\x1B\x82\x04\x81\x16\x94\x84\x01\x94\x90\x94R`\x01`\xC0\x1B\x90\x04\x90\x92\x16``\x82\x01Ra\x01\xB4\x90a\x03\xD1V[`@\x80Q`\x80\x81\x01\x82R_\x80T`\x07\x81\x90\x0B\x83Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFh\x01\0\0\0\0\0\0\0\0\x82\x04\x81\x16` \x85\x01R`\x01`\x80\x1B\x82\x04\x81\x16\x94\x84\x01\x94\x90\x94R`\x01`\xC0\x1B\x90\x04\x90\x92\x16``\x82\x01Ra\x02\xCE\x90\x83a\x04\x05V[\x92\x91PPV[\x80Q_\x90`\x07\x90\x81\x0BB\x90\x91\x0B\x12\x15a\x02\xEEWP_\x91\x90PV[_a\x02\xFB\x83_\x01Qa\x04\xB7V[\x90P_\x83` \x01Q\x82a\x03\x0E\x91\x90a\x05\x1DV[\x90P\x83`@\x01Q\x84` \x01Qa\x03$\x91\x90a\x05pV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x81\x16\x91\x16\x10\x15\x93\x92PPPV[_\x80_\x83\x85` \x01Qa\x03N\x91\x90a\x05\x98V[\x85Qa\x03Z\x91\x90a\x05\xC4V[\x90P_\x81`\x07\x0B\x12\x15a\x03\xA3W`@Q\x7F\xF1`\xADy\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x07\x82\x90\x0B`\x04\x82\x01R`$\x01`@Q\x80\x91\x03\x90\xFD[` \x85\x01Q\x81\x90_\x90`\x01\x90a\x03\xB9\x90\x84a\x05\xF3V[a\x03\xC3\x91\x90a\x05pV[\x91\x97\x91\x96P\x90\x94PPPPPV[\x80Q_\x90`\x07\x90\x81\x0BB\x90\x91\x0B\x12\x15a\x03\xEBWP_\x91\x90PV[` \x82\x01Q\x82Qa\x03\xFB\x90a\x04\xB7V[a\x02\xCE\x91\x90a\x06\x14V[\x81Q_\x90`\x07\x90\x81\x0BB\x90\x91\x0B\x12\x15a\x04\x1FWP_a\x02\xCEV[_a\x04)\x84a\x03\xD1V[\x90Pa\x046\x81`\x01a\x05\xF3V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x10a\x04YW_\x91PPa\x02\xCEV[_a\x04f\x85_\x01Qa\x04\xB7V[\x90P_\x85` \x01Q\x82a\x04y\x91\x90a\x05\x1DV[\x90P\x85``\x01Q\x86`@\x01Q\x87` \x01Qa\x04\x94\x91\x90a\x05pV[a\x04\x9E\x91\x90a\x05pV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x81\x16\x91\x16\x10\x15\x95\x94PPPPPV[_a\x02\xCE\x82Ba\x06:V[_` \x82\x84\x03\x12\x15a\x04\xD2W_\x80\xFD[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x04\xE9W_\x80\xFD[\x93\x92PPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x12`\x04R`$_\xFD[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x84\x16\x80a\x057Wa\x057a\x04\xF0V[\x92\x16\x91\x90\x91\x06\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x81\x16\x82\x82\x16\x03\x90\x80\x82\x11\x15a\x05\x91Wa\x05\x91a\x05CV[P\x92\x91PPV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x81\x16\x83\x82\x16\x02\x80\x82\x16\x91\x90\x82\x81\x14a\x05\xBCWa\x05\xBCa\x05CV[PP\x92\x91PPV[`\x07\x81\x81\x0B\x90\x83\x90\x0B\x01g\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x13g\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x82\x12\x17\x15a\x02\xCEWa\x02\xCEa\x05CV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x81\x16\x83\x82\x16\x01\x90\x80\x82\x11\x15a\x05\x91Wa\x05\x91a\x05CV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x84\x16\x80a\x06.Wa\x06.a\x04\xF0V[\x92\x16\x91\x90\x91\x04\x92\x91PPV[`\x07\x82\x81\x0B\x90\x82\x90\x0B\x03g\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x81\x12g\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x13\x17\x15a\x02\xCEWa\x02\xCEa\x05CV\xFE\xA2dipfsX\"\x12 E+3\x97\xBB\xCD\xD2\xB6$\xBF\x98\x1F\xF5\xD3A\xE1\xF7\xB9\xCA\xD4\x96\xBE k\xB1E\0I\x88\xB7\xBE\xC7dsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f80fd5b5060043610610064575f3560e01c80637b617f941161004d5780637b617f94146100f45780638a19c8bc14610128578063c411f90914610149575f80fd5b80630fa32939146100685780632d668ce7146100dc575b5f80fd5b5f546100a290600781900b9067ffffffffffffffff680100000000000000008204811691600160801b8104821691600160c01b9091041684565b6040805160079590950b855267ffffffffffffffff9384166020860152918316918401919091521660608201526080015b60405180910390f35b6100e461015c565b60405190151581526020016100d3565b6101076101023660046104c2565b6101b9565b6040805167ffffffffffffffff9384168152929091166020830152016100d3565b61013061021d565b60405167ffffffffffffffff90911681526020016100d3565b6100e46101573660046104c2565b610275565b604080516080810182525f8054600781900b835267ffffffffffffffff68010000000000000000820481166020850152600160801b8204811694840194909452600160c01b900490921660608201526101b4906102d4565b905090565b604080516080810182525f8054600781900b835267ffffffffffffffff68010000000000000000820481166020850152600160801b8204811694840194909452600160c01b900490921660608201528190610214908461033b565b91509150915091565b604080516080810182525f8054600781900b835267ffffffffffffffff68010000000000000000820481166020850152600160801b8204811694840194909452600160c01b900490921660608201526101b4906103d1565b604080516080810182525f8054600781900b835267ffffffffffffffff68010000000000000000820481166020850152600160801b8204811694840194909452600160c01b900490921660608201526102ce9083610405565b92915050565b80515f90600790810b4290910b12156102ee57505f919050565b5f6102fb835f01516104b7565b90505f83602001518261030e919061051d565b9050836040015184602001516103249190610570565b67ffffffffffffffff908116911610159392505050565b5f805f83856020015161034e9190610598565b855161035a91906105c4565b90505f8160070b12156103a3576040517ff160ad79000000000000000000000000000000000000000000000000000000008152600782900b600482015260240160405180910390fd5b602085015181905f906001906103b990846105f3565b6103c39190610570565b919791965090945050505050565b80515f90600790810b4290910b12156103eb57505f919050565b602082015182516103fb906104b7565b6102ce9190610614565b81515f90600790810b4290910b121561041f57505f6102ce565b5f610429846103d1565b90506104368160016105f3565b67ffffffffffffffff168367ffffffffffffffff1610610459575f9150506102ce565b5f610466855f01516104b7565b90505f856020015182610479919061051d565b90508560600151866040015187602001516104949190610570565b61049e9190610570565b67ffffffffffffffff9081169116101595945050505050565b5f6102ce824261063a565b5f602082840312156104d2575f80fd5b813567ffffffffffffffff811681146104e9575f80fd5b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f67ffffffffffffffff80841680610537576105376104f0565b92169190910692915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b67ffffffffffffffff82811682821603908082111561059157610591610543565b5092915050565b67ffffffffffffffff8181168382160280821691908281146105bc576105bc610543565b505092915050565b600781810b9083900b01677fffffffffffffff8113677fffffffffffffff19821217156102ce576102ce610543565b67ffffffffffffffff81811683821601908082111561059157610591610543565b5f67ffffffffffffffff8084168061062e5761062e6104f0565b92169190910492915050565b600782810b9082900b03677fffffffffffffff198112677fffffffffffffff821317156102ce576102ce61054356fea2646970667358221220452b3397bbcdd2b624bf981ff5d341e1f7b9cad496be206bb145004988b7bec764736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\0dW_5`\xE0\x1C\x80c{a\x7F\x94\x11a\0MW\x80c{a\x7F\x94\x14a\0\xF4W\x80c\x8A\x19\xC8\xBC\x14a\x01(W\x80c\xC4\x11\xF9\t\x14a\x01IW_\x80\xFD[\x80c\x0F\xA3)9\x14a\0hW\x80c-f\x8C\xE7\x14a\0\xDCW[_\x80\xFD[_Ta\0\xA2\x90`\x07\x81\x90\x0B\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFh\x01\0\0\0\0\0\0\0\0\x82\x04\x81\x16\x91`\x01`\x80\x1B\x81\x04\x82\x16\x91`\x01`\xC0\x1B\x90\x91\x04\x16\x84V[`@\x80Q`\x07\x95\x90\x95\x0B\x85Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x93\x84\x16` \x86\x01R\x91\x83\x16\x91\x84\x01\x91\x90\x91R\x16``\x82\x01R`\x80\x01[`@Q\x80\x91\x03\x90\xF3[a\0\xE4a\x01\\V[`@Q\x90\x15\x15\x81R` \x01a\0\xD3V[a\x01\x07a\x01\x026`\x04a\x04\xC2V[a\x01\xB9V[`@\x80Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x93\x84\x16\x81R\x92\x90\x91\x16` \x83\x01R\x01a\0\xD3V[a\x010a\x02\x1DV[`@Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16\x81R` \x01a\0\xD3V[a\0\xE4a\x01W6`\x04a\x04\xC2V[a\x02uV[`@\x80Q`\x80\x81\x01\x82R_\x80T`\x07\x81\x90\x0B\x83Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFh\x01\0\0\0\0\0\0\0\0\x82\x04\x81\x16` \x85\x01R`\x01`\x80\x1B\x82\x04\x81\x16\x94\x84\x01\x94\x90\x94R`\x01`\xC0\x1B\x90\x04\x90\x92\x16``\x82\x01Ra\x01\xB4\x90a\x02\xD4V[\x90P\x90V[`@\x80Q`\x80\x81\x01\x82R_\x80T`\x07\x81\x90\x0B\x83Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFh\x01\0\0\0\0\0\0\0\0\x82\x04\x81\x16` \x85\x01R`\x01`\x80\x1B\x82\x04\x81\x16\x94\x84\x01\x94\x90\x94R`\x01`\xC0\x1B\x90\x04\x90\x92\x16``\x82\x01R\x81\x90a\x02\x14\x90\x84a\x03;V[\x91P\x91P\x91P\x91V[`@\x80Q`\x80\x81\x01\x82R_\x80T`\x07\x81\x90\x0B\x83Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFh\x01\0\0\0\0\0\0\0\0\x82\x04\x81\x16` \x85\x01R`\x01`\x80\x1B\x82\x04\x81\x16\x94\x84\x01\x94\x90\x94R`\x01`\xC0\x1B\x90\x04\x90\x92\x16``\x82\x01Ra\x01\xB4\x90a\x03\xD1V[`@\x80Q`\x80\x81\x01\x82R_\x80T`\x07\x81\x90\x0B\x83Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFh\x01\0\0\0\0\0\0\0\0\x82\x04\x81\x16` \x85\x01R`\x01`\x80\x1B\x82\x04\x81\x16\x94\x84\x01\x94\x90\x94R`\x01`\xC0\x1B\x90\x04\x90\x92\x16``\x82\x01Ra\x02\xCE\x90\x83a\x04\x05V[\x92\x91PPV[\x80Q_\x90`\x07\x90\x81\x0BB\x90\x91\x0B\x12\x15a\x02\xEEWP_\x91\x90PV[_a\x02\xFB\x83_\x01Qa\x04\xB7V[\x90P_\x83` \x01Q\x82a\x03\x0E\x91\x90a\x05\x1DV[\x90P\x83`@\x01Q\x84` \x01Qa\x03$\x91\x90a\x05pV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x81\x16\x91\x16\x10\x15\x93\x92PPPV[_\x80_\x83\x85` \x01Qa\x03N\x91\x90a\x05\x98V[\x85Qa\x03Z\x91\x90a\x05\xC4V[\x90P_\x81`\x07\x0B\x12\x15a\x03\xA3W`@Q\x7F\xF1`\xADy\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x07\x82\x90\x0B`\x04\x82\x01R`$\x01`@Q\x80\x91\x03\x90\xFD[` \x85\x01Q\x81\x90_\x90`\x01\x90a\x03\xB9\x90\x84a\x05\xF3V[a\x03\xC3\x91\x90a\x05pV[\x91\x97\x91\x96P\x90\x94PPPPPV[\x80Q_\x90`\x07\x90\x81\x0BB\x90\x91\x0B\x12\x15a\x03\xEBWP_\x91\x90PV[` \x82\x01Q\x82Qa\x03\xFB\x90a\x04\xB7V[a\x02\xCE\x91\x90a\x06\x14V[\x81Q_\x90`\x07\x90\x81\x0BB\x90\x91\x0B\x12\x15a\x04\x1FWP_a\x02\xCEV[_a\x04)\x84a\x03\xD1V[\x90Pa\x046\x81`\x01a\x05\xF3V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x10a\x04YW_\x91PPa\x02\xCEV[_a\x04f\x85_\x01Qa\x04\xB7V[\x90P_\x85` \x01Q\x82a\x04y\x91\x90a\x05\x1DV[\x90P\x85``\x01Q\x86`@\x01Q\x87` \x01Qa\x04\x94\x91\x90a\x05pV[a\x04\x9E\x91\x90a\x05pV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x81\x16\x91\x16\x10\x15\x95\x94PPPPPV[_a\x02\xCE\x82Ba\x06:V[_` \x82\x84\x03\x12\x15a\x04\xD2W_\x80\xFD[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x04\xE9W_\x80\xFD[\x93\x92PPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x12`\x04R`$_\xFD[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x84\x16\x80a\x057Wa\x057a\x04\xF0V[\x92\x16\x91\x90\x91\x06\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x81\x16\x82\x82\x16\x03\x90\x80\x82\x11\x15a\x05\x91Wa\x05\x91a\x05CV[P\x92\x91PPV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x81\x16\x83\x82\x16\x02\x80\x82\x16\x91\x90\x82\x81\x14a\x05\xBCWa\x05\xBCa\x05CV[PP\x92\x91PPV[`\x07\x81\x81\x0B\x90\x83\x90\x0B\x01g\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x13g\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x82\x12\x17\x15a\x02\xCEWa\x02\xCEa\x05CV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x81\x16\x83\x82\x16\x01\x90\x80\x82\x11\x15a\x05\x91Wa\x05\x91a\x05CV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x84\x16\x80a\x06.Wa\x06.a\x04\xF0V[\x92\x16\x91\x90\x91\x04\x92\x91PPV[`\x07\x82\x81\x0B\x90\x82\x90\x0B\x03g\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x81\x12g\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x13\x17\x15a\x02\xCEWa\x02\xCEa\x05CV\xFE\xA2dipfsX\"\x12 E+3\x97\xBB\xCD\xD2\xB6$\xBF\x98\x1F\xF5\xD3A\xE1\xF7\xB9\xCA\xD4\x96\xBE k\xB1E\0I\x88\xB7\xBE\xC7dsolcC\0\x08\x19\x003",
    );
    /**```solidity
struct RoundTimingInfo { int64 offsetTimestamp; uint64 roundDurationSeconds; uint64 auctionClosingSeconds; uint64 reserveSubmissionSeconds; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct RoundTimingInfo {
        pub offsetTimestamp: i64,
        pub roundDurationSeconds: u64,
        pub auctionClosingSeconds: u64,
        pub reserveSubmissionSeconds: u64,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Int<64>,
            alloy::sol_types::sol_data::Uint<64>,
            alloy::sol_types::sol_data::Uint<64>,
            alloy::sol_types::sol_data::Uint<64>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (i64, u64, u64, u64);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<RoundTimingInfo> for UnderlyingRustTuple<'_> {
            fn from(value: RoundTimingInfo) -> Self {
                (
                    value.offsetTimestamp,
                    value.roundDurationSeconds,
                    value.auctionClosingSeconds,
                    value.reserveSubmissionSeconds,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for RoundTimingInfo {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    offsetTimestamp: tuple.0,
                    roundDurationSeconds: tuple.1,
                    auctionClosingSeconds: tuple.2,
                    reserveSubmissionSeconds: tuple.3,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for RoundTimingInfo {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for RoundTimingInfo {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Int<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.offsetTimestamp),
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.roundDurationSeconds),
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(
                        &self.auctionClosingSeconds,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(
                        &self.reserveSubmissionSeconds,
                    ),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for RoundTimingInfo {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for RoundTimingInfo {
            const NAME: &'static str = "RoundTimingInfo";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "RoundTimingInfo(int64 offsetTimestamp,uint64 roundDurationSeconds,uint64 auctionClosingSeconds,uint64 reserveSubmissionSeconds)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Int<
                        64,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.offsetTimestamp,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.roundDurationSeconds,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.auctionClosingSeconds,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.reserveSubmissionSeconds,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for RoundTimingInfo {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Int<
                        64,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.offsetTimestamp,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.roundDurationSeconds,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.auctionClosingSeconds,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.reserveSubmissionSeconds,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Int<
                    64,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.offsetTimestamp,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    64,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.roundDurationSeconds,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    64,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.auctionClosingSeconds,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    64,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.reserveSubmissionSeconds,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**Custom error with signature `NegativeRoundStart(int64)` and selector `0xf160ad79`.
```solidity
error NegativeRoundStart(int64 roundStart);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NegativeRoundStart {
        pub roundStart: i64,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Int<64>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (i64,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NegativeRoundStart> for UnderlyingRustTuple<'_> {
            fn from(value: NegativeRoundStart) -> Self {
                (value.roundStart,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NegativeRoundStart {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { roundStart: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NegativeRoundStart {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NegativeRoundStart(int64)";
            const SELECTOR: [u8; 4] = [241u8, 96u8, 173u8, 121u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Int<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.roundStart),
                )
            }
        }
    };
    /**Constructor`.
```solidity
constructor(RoundTimingInfo r);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        pub r: <RoundTimingInfo as alloy::sol_types::SolType>::RustType,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (RoundTimingInfo,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <RoundTimingInfo as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value.r,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { r: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (RoundTimingInfo,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (<RoundTimingInfo as alloy_sol_types::SolType>::tokenize(&self.r),)
            }
        }
    };
    /**Function with signature `currentRound()` and selector `0x8a19c8bc`.
```solidity
function currentRound() external view returns (uint64);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct currentRoundCall {}
    ///Container type for the return parameters of the [`currentRound()`](currentRoundCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct currentRoundReturn {
        pub _0: u64,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<currentRoundCall> for UnderlyingRustTuple<'_> {
                fn from(value: currentRoundCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for currentRoundCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u64,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<currentRoundReturn> for UnderlyingRustTuple<'_> {
                fn from(value: currentRoundReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for currentRoundReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for currentRoundCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = currentRoundReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "currentRound()";
            const SELECTOR: [u8; 4] = [138u8, 25u8, 200u8, 188u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isAuctionRoundClosed()` and selector `0x2d668ce7`.
```solidity
function isAuctionRoundClosed() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAuctionRoundClosedCall {}
    ///Container type for the return parameters of the [`isAuctionRoundClosed()`](isAuctionRoundClosedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAuctionRoundClosedReturn {
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAuctionRoundClosedCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: isAuctionRoundClosedCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isAuctionRoundClosedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAuctionRoundClosedReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: isAuctionRoundClosedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isAuctionRoundClosedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isAuctionRoundClosedCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isAuctionRoundClosedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isAuctionRoundClosed()";
            const SELECTOR: [u8; 4] = [45u8, 102u8, 140u8, 231u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isReserveBlackout(uint64)` and selector `0xc411f909`.
```solidity
function isReserveBlackout(uint64 latestResolvedRound) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isReserveBlackoutCall {
        pub latestResolvedRound: u64,
    }
    ///Container type for the return parameters of the [`isReserveBlackout(uint64)`](isReserveBlackoutCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isReserveBlackoutReturn {
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u64,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isReserveBlackoutCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: isReserveBlackoutCall) -> Self {
                    (value.latestResolvedRound,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isReserveBlackoutCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        latestResolvedRound: tuple.0,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isReserveBlackoutReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: isReserveBlackoutReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isReserveBlackoutReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isReserveBlackoutCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isReserveBlackoutReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isReserveBlackout(uint64)";
            const SELECTOR: [u8; 4] = [196u8, 17u8, 249u8, 9u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.latestResolvedRound),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `roundTimestamps(uint64)` and selector `0x7b617f94`.
```solidity
function roundTimestamps(uint64 round) external view returns (uint64, uint64);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct roundTimestampsCall {
        pub round: u64,
    }
    ///Container type for the return parameters of the [`roundTimestamps(uint64)`](roundTimestampsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct roundTimestampsReturn {
        pub _0: u64,
        pub _1: u64,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u64,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<roundTimestampsCall> for UnderlyingRustTuple<'_> {
                fn from(value: roundTimestampsCall) -> Self {
                    (value.round,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for roundTimestampsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { round: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<64>,
                alloy::sol_types::sol_data::Uint<64>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u64, u64);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<roundTimestampsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: roundTimestampsReturn) -> Self {
                    (value._0, value._1)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for roundTimestampsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0, _1: tuple.1 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for roundTimestampsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = roundTimestampsReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Uint<64>,
                alloy::sol_types::sol_data::Uint<64>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "roundTimestamps(uint64)";
            const SELECTOR: [u8; 4] = [123u8, 97u8, 127u8, 148u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.round),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `timingInfo()` and selector `0x0fa32939`.
```solidity
function timingInfo() external view returns (int64 offsetTimestamp, uint64 roundDurationSeconds, uint64 auctionClosingSeconds, uint64 reserveSubmissionSeconds);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct timingInfoCall {}
    ///Container type for the return parameters of the [`timingInfo()`](timingInfoCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct timingInfoReturn {
        pub offsetTimestamp: i64,
        pub roundDurationSeconds: u64,
        pub auctionClosingSeconds: u64,
        pub reserveSubmissionSeconds: u64,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<timingInfoCall> for UnderlyingRustTuple<'_> {
                fn from(value: timingInfoCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for timingInfoCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Int<64>,
                alloy::sol_types::sol_data::Uint<64>,
                alloy::sol_types::sol_data::Uint<64>,
                alloy::sol_types::sol_data::Uint<64>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (i64, u64, u64, u64);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<timingInfoReturn> for UnderlyingRustTuple<'_> {
                fn from(value: timingInfoReturn) -> Self {
                    (
                        value.offsetTimestamp,
                        value.roundDurationSeconds,
                        value.auctionClosingSeconds,
                        value.reserveSubmissionSeconds,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for timingInfoReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        offsetTimestamp: tuple.0,
                        roundDurationSeconds: tuple.1,
                        auctionClosingSeconds: tuple.2,
                        reserveSubmissionSeconds: tuple.3,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for timingInfoCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = timingInfoReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Int<64>,
                alloy::sol_types::sol_data::Uint<64>,
                alloy::sol_types::sol_data::Uint<64>,
                alloy::sol_types::sol_data::Uint<64>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "timingInfo()";
            const SELECTOR: [u8; 4] = [15u8, 163u8, 41u8, 57u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`RoundTimingInfoImp`](self) function calls.
    pub enum RoundTimingInfoImpCalls {
        currentRound(currentRoundCall),
        isAuctionRoundClosed(isAuctionRoundClosedCall),
        isReserveBlackout(isReserveBlackoutCall),
        roundTimestamps(roundTimestampsCall),
        timingInfo(timingInfoCall),
    }
    #[automatically_derived]
    impl RoundTimingInfoImpCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [15u8, 163u8, 41u8, 57u8],
            [45u8, 102u8, 140u8, 231u8],
            [123u8, 97u8, 127u8, 148u8],
            [138u8, 25u8, 200u8, 188u8],
            [196u8, 17u8, 249u8, 9u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for RoundTimingInfoImpCalls {
        const NAME: &'static str = "RoundTimingInfoImpCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 5usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::currentRound(_) => {
                    <currentRoundCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isAuctionRoundClosed(_) => {
                    <isAuctionRoundClosedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isReserveBlackout(_) => {
                    <isReserveBlackoutCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::roundTimestamps(_) => {
                    <roundTimestampsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::timingInfo(_) => {
                    <timingInfoCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<RoundTimingInfoImpCalls>] = &[
                {
                    fn timingInfo(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RoundTimingInfoImpCalls> {
                        <timingInfoCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RoundTimingInfoImpCalls::timingInfo)
                    }
                    timingInfo
                },
                {
                    fn isAuctionRoundClosed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RoundTimingInfoImpCalls> {
                        <isAuctionRoundClosedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RoundTimingInfoImpCalls::isAuctionRoundClosed)
                    }
                    isAuctionRoundClosed
                },
                {
                    fn roundTimestamps(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RoundTimingInfoImpCalls> {
                        <roundTimestampsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RoundTimingInfoImpCalls::roundTimestamps)
                    }
                    roundTimestamps
                },
                {
                    fn currentRound(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RoundTimingInfoImpCalls> {
                        <currentRoundCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RoundTimingInfoImpCalls::currentRound)
                    }
                    currentRound
                },
                {
                    fn isReserveBlackout(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RoundTimingInfoImpCalls> {
                        <isReserveBlackoutCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RoundTimingInfoImpCalls::isReserveBlackout)
                    }
                    isReserveBlackout
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::currentRound(inner) => {
                    <currentRoundCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::isAuctionRoundClosed(inner) => {
                    <isAuctionRoundClosedCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::isReserveBlackout(inner) => {
                    <isReserveBlackoutCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::roundTimestamps(inner) => {
                    <roundTimestampsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::timingInfo(inner) => {
                    <timingInfoCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::currentRound(inner) => {
                    <currentRoundCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isAuctionRoundClosed(inner) => {
                    <isAuctionRoundClosedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isReserveBlackout(inner) => {
                    <isReserveBlackoutCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::roundTimestamps(inner) => {
                    <roundTimestampsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::timingInfo(inner) => {
                    <timingInfoCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`RoundTimingInfoImp`](self) custom errors.
    pub enum RoundTimingInfoImpErrors {
        NegativeRoundStart(NegativeRoundStart),
    }
    #[automatically_derived]
    impl RoundTimingInfoImpErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[[241u8, 96u8, 173u8, 121u8]];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for RoundTimingInfoImpErrors {
        const NAME: &'static str = "RoundTimingInfoImpErrors";
        const MIN_DATA_LENGTH: usize = 32usize;
        const COUNT: usize = 1usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::NegativeRoundStart(_) => {
                    <NegativeRoundStart as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<RoundTimingInfoImpErrors>] = &[
                {
                    fn NegativeRoundStart(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RoundTimingInfoImpErrors> {
                        <NegativeRoundStart as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RoundTimingInfoImpErrors::NegativeRoundStart)
                    }
                    NegativeRoundStart
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::NegativeRoundStart(inner) => {
                    <NegativeRoundStart as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::NegativeRoundStart(inner) => {
                    <NegativeRoundStart as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`RoundTimingInfoImp`](self) contract instance.

See the [wrapper's documentation](`RoundTimingInfoImpInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> RoundTimingInfoImpInstance<T, P, N> {
        RoundTimingInfoImpInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        r: <RoundTimingInfo as alloy::sol_types::SolType>::RustType,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<RoundTimingInfoImpInstance<T, P, N>>,
    > {
        RoundTimingInfoImpInstance::<T, P, N>::deploy(provider, r)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        r: <RoundTimingInfo as alloy::sol_types::SolType>::RustType,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        RoundTimingInfoImpInstance::<T, P, N>::deploy_builder(provider, r)
    }
    /**A [`RoundTimingInfoImp`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`RoundTimingInfoImp`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct RoundTimingInfoImpInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for RoundTimingInfoImpInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("RoundTimingInfoImpInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > RoundTimingInfoImpInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`RoundTimingInfoImp`](self) contract instance.

See the [wrapper's documentation](`RoundTimingInfoImpInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            r: <RoundTimingInfo as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::Result<RoundTimingInfoImpInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, r);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            r: <RoundTimingInfo as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { r },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> RoundTimingInfoImpInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> RoundTimingInfoImpInstance<T, P, N> {
            RoundTimingInfoImpInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > RoundTimingInfoImpInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`currentRound`] function.
        pub fn currentRound(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, currentRoundCall, N> {
            self.call_builder(&currentRoundCall {})
        }
        ///Creates a new call builder for the [`isAuctionRoundClosed`] function.
        pub fn isAuctionRoundClosed(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, isAuctionRoundClosedCall, N> {
            self.call_builder(&isAuctionRoundClosedCall {})
        }
        ///Creates a new call builder for the [`isReserveBlackout`] function.
        pub fn isReserveBlackout(
            &self,
            latestResolvedRound: u64,
        ) -> alloy_contract::SolCallBuilder<T, &P, isReserveBlackoutCall, N> {
            self.call_builder(
                &isReserveBlackoutCall {
                    latestResolvedRound,
                },
            )
        }
        ///Creates a new call builder for the [`roundTimestamps`] function.
        pub fn roundTimestamps(
            &self,
            round: u64,
        ) -> alloy_contract::SolCallBuilder<T, &P, roundTimestampsCall, N> {
            self.call_builder(&roundTimestampsCall { round })
        }
        ///Creates a new call builder for the [`timingInfo`] function.
        pub fn timingInfo(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, timingInfoCall, N> {
            self.call_builder(&timingInfoCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > RoundTimingInfoImpInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
