/**

Generated by the following Solidity interface...
```solidity
interface GasRefunder {
    type CommonParameterKey is uint8;
    type RefundDenyReason is uint8;

    event CommonParameterSet(CommonParameterKey indexed parameter, uint256 value);
    event ContractAllowedSet(address indexed addr, bool indexed allowed);
    event Deposited(address sender, uint256 amount);
    event DisallowerSet(address indexed addr);
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event RefundGasCostsDenied(address indexed refundee, address indexed contractAddress, RefundDenyReason indexed reason, uint256 gas);
    event RefundedGasCosts(address indexed refundee, address indexed contractAddress, bool indexed success, uint256 gas, uint256 gasPrice, uint256 amountPaid);
    event RefundeeAllowedSet(address indexed addr, bool indexed allowed);
    event Withdrawn(address initiator, address destination, uint256 amount);

    constructor();

    receive() external payable;

    function allowContracts(address[] memory addresses) external;
    function allowRefundees(address[] memory addresses) external;
    function allowedContracts(address) external view returns (bool);
    function allowedRefundees(address) external view returns (bool);
    function commonParams() external view returns (uint128 maxRefundeeBalance, uint32 extraGasMargin, uint8 calldataCost, uint64 maxGasTip, uint64 maxGasCost, uint32 maxSingleGasUsage);
    function disallowContracts(address[] memory addresses) external;
    function disallowRefundees(address[] memory addresses) external;
    function disallower() external view returns (address);
    function onGasSpent(address payable refundee, uint256 gasUsed, uint256 calldataSize) external returns (bool success);
    function owner() external view returns (address);
    function renounceOwnership() external;
    function setCalldataCost(uint8 newValue) external;
    function setDisallower(address addr) external;
    function setExtraGasMargin(uint32 newValue) external;
    function setMaxGasCost(uint64 newValue) external;
    function setMaxGasTip(uint64 newValue) external;
    function setMaxRefundeeBalance(uint128 newValue) external;
    function setMaxSingleGasUsage(uint32 newValue) external;
    function transferOwnership(address newOwner) external;
    function withdraw(address payable destination, uint256 amount) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "receive",
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "allowContracts",
    "inputs": [
      {
        "name": "addresses",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "allowRefundees",
    "inputs": [
      {
        "name": "addresses",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "allowedContracts",
    "inputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "allowedRefundees",
    "inputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "commonParams",
    "inputs": [],
    "outputs": [
      {
        "name": "maxRefundeeBalance",
        "type": "uint128",
        "internalType": "uint128"
      },
      {
        "name": "extraGasMargin",
        "type": "uint32",
        "internalType": "uint32"
      },
      {
        "name": "calldataCost",
        "type": "uint8",
        "internalType": "uint8"
      },
      {
        "name": "maxGasTip",
        "type": "uint64",
        "internalType": "uint64"
      },
      {
        "name": "maxGasCost",
        "type": "uint64",
        "internalType": "uint64"
      },
      {
        "name": "maxSingleGasUsage",
        "type": "uint32",
        "internalType": "uint32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "disallowContracts",
    "inputs": [
      {
        "name": "addresses",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "disallowRefundees",
    "inputs": [
      {
        "name": "addresses",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "disallower",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "onGasSpent",
    "inputs": [
      {
        "name": "refundee",
        "type": "address",
        "internalType": "address payable"
      },
      {
        "name": "gasUsed",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "calldataSize",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "success",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "renounceOwnership",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setCalldataCost",
    "inputs": [
      {
        "name": "newValue",
        "type": "uint8",
        "internalType": "uint8"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setDisallower",
    "inputs": [
      {
        "name": "addr",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setExtraGasMargin",
    "inputs": [
      {
        "name": "newValue",
        "type": "uint32",
        "internalType": "uint32"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setMaxGasCost",
    "inputs": [
      {
        "name": "newValue",
        "type": "uint64",
        "internalType": "uint64"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setMaxGasTip",
    "inputs": [
      {
        "name": "newValue",
        "type": "uint64",
        "internalType": "uint64"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setMaxRefundeeBalance",
    "inputs": [
      {
        "name": "newValue",
        "type": "uint128",
        "internalType": "uint128"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setMaxSingleGasUsage",
    "inputs": [
      {
        "name": "newValue",
        "type": "uint32",
        "internalType": "uint32"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "transferOwnership",
    "inputs": [
      {
        "name": "newOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "withdraw",
    "inputs": [
      {
        "name": "destination",
        "type": "address",
        "internalType": "address payable"
      },
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "CommonParameterSet",
    "inputs": [
      {
        "name": "parameter",
        "type": "uint8",
        "indexed": true,
        "internalType": "enum GasRefunder.CommonParameterKey"
      },
      {
        "name": "value",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "ContractAllowedSet",
    "inputs": [
      {
        "name": "addr",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "allowed",
        "type": "bool",
        "indexed": true,
        "internalType": "bool"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Deposited",
    "inputs": [
      {
        "name": "sender",
        "type": "address",
        "indexed": false,
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "DisallowerSet",
    "inputs": [
      {
        "name": "addr",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "OwnershipTransferred",
    "inputs": [
      {
        "name": "previousOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RefundGasCostsDenied",
    "inputs": [
      {
        "name": "refundee",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "contractAddress",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "reason",
        "type": "uint8",
        "indexed": true,
        "internalType": "enum GasRefunder.RefundDenyReason"
      },
      {
        "name": "gas",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RefundedGasCosts",
    "inputs": [
      {
        "name": "refundee",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "contractAddress",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "success",
        "type": "bool",
        "indexed": true,
        "internalType": "bool"
      },
      {
        "name": "gas",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "gasPrice",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "amountPaid",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RefundeeAllowedSet",
    "inputs": [
      {
        "name": "addr",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "allowed",
        "type": "bool",
        "indexed": true,
        "internalType": "bool"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Withdrawn",
    "inputs": [
      {
        "name": "initiator",
        "type": "address",
        "indexed": false,
        "internalType": "address"
      },
      {
        "name": "destination",
        "type": "address",
        "indexed": false,
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod GasRefunder {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234801561000f575f80fd5b50610019336100a3565b6040805160c0810182525f8152610fa06020820152600c9181019190915263773594006060820152641bf08eb0006080820152621e848060a090910152600480546001600160e81b03191678773594000c00000fa000000000000000000000000000000000179055600580546001600160601b0319166a1e84800000001bf08eb0001790556100f2565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61120f806100ff5f395ff3fe60806040526004361061015a575f3560e01c8063ca101295116100bb578063efe12b0111610071578063f2fde38b11610057578063f2fde38b146104bd578063f3fef3a3146104dc578063f52128eb146104fb575f80fd5b8063efe12b011461047f578063f1e845ca1461049e575f80fd5b8063d5138948116100a1578063d51389481461034c578063e3db8a4914610441578063e520745314610460575f80fd5b8063ca1012951461030e578063cd499da31461032d575f80fd5b80637edddf45116101105780638da5cb5b116100f65780638da5cb5b14610291578063a89d2173146102c1578063bffe1780146102ef575f80fd5b80637edddf451461025357806386b9889514610272575f80fd5b8063500de43111610140578063500de431146101dd57806351e0e26b146101fc578063715018a61461023f575f80fd5b806325416bc91461019d5780632ccb03f2146101be575f80fd5b3661019957604080513381523460208201527f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c4910160405180910390a1005b5f80fd5b3480156101a8575f80fd5b506101bc6101b7366004610fa9565b61051a565b005b3480156101c9575f80fd5b506101bc6101d8366004611018565b610532565b3480156101e8575f80fd5b506101bc6101f736600461103f565b6105b2565b348015610207575f80fd5b5061022a610216366004611076565b60016020525f908152604090205460ff1681565b60405190151581526020015b60405180910390f35b34801561024a575f80fd5b506101bc61062c565b34801561025e575f80fd5b506101bc61026d36600461103f565b61063f565b34801561027d575f80fd5b506101bc61028c366004611018565b610691565b34801561029c575f80fd5b505f546001600160a01b03165b6040516001600160a01b039091168152602001610236565b3480156102cc575f80fd5b5061022a6102db366004611076565b60026020525f908152604090205460ff1681565b3480156102fa575f80fd5b506101bc610309366004611091565b6106ec565b348015610319575f80fd5b506101bc610328366004610fa9565b61076d565b348015610338575f80fd5b506101bc610347366004610fa9565b610781565b348015610357575f80fd5b506004546005546103e9916fffffffffffffffffffffffffffffffff81169163ffffffff700100000000000000000000000000000000830481169260ff740100000000000000000000000000000000000000008204169267ffffffffffffffff750100000000000000000000000000000000000000000090920482169291811691680100000000000000009091041686565b604080516fffffffffffffffffffffffffffffffff909716875263ffffffff958616602088015260ff9094169386019390935267ffffffffffffffff91821660608601521660808401521660a082015260c001610236565b34801561044c575f80fd5b5061022a61045b3660046110b1565b6107ff565b34801561046b575f80fd5b506101bc61047a366004610fa9565b610add565b34801561048a575f80fd5b506003546102a9906001600160a01b031681565b3480156104a9575f80fd5b506101bc6104b8366004611076565b610b56565b3480156104c8575f80fd5b506101bc6104d7366004611076565b610bbf565b3480156104e7575f80fd5b506101bc6104f63660046110e3565b610c4f565b348015610506575f80fd5b506101bc61051536600461110d565b610d44565b610522610dcb565b61052e82826001610e24565b5050565b61053a610dcb565b600580547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff831617905560045b60405167ffffffffffffffff831681527fda79b6b81f905f788560507c685a42d5a8ab209ee26538cbcf3ce3caed601f9b906020015b60405180910390a250565b6105ba610dcb565b600580547fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff166801000000000000000063ffffffff8416021781555b60405163ffffffff831681527fda79b6b81f905f788560507c685a42d5a8ab209ee26538cbcf3ce3caed601f9b906020016105a7565b610634610dcb565b61063d5f610eb6565b565b610647610dcb565b600480547fffffffffffffffffffffffff00000000ffffffffffffffffffffffffffffffff1670010000000000000000000000000000000063ffffffff84160217905560016105f6565b610699610dcb565b600480547fffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffff16750100000000000000000000000000000000000000000067ffffffffffffffff8416021790556003610571565b6106f4610dcb565b600480547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000060ff841602179055600260405160ff831681527fda79b6b81f905f788560507c685a42d5a8ab209ee26538cbcf3ce3caed601f9b906020016105a7565b610775610dcb565b61052e82826001610f1d565b5f546001600160a01b03163314806107a357506003546001600160a01b031633145b6107f45760405162461bcd60e51b815260206004820152600e60248201527f4e4f545f415554484f52495a454400000000000000000000000000000000000060448201526064015b60405180910390fd5b61052e82825f610e24565b5f805a9050475f81900361085a5760035b60405186815233906001600160a01b038916907f2b8ae00e22d9eaf5a92820a22b947c007aee773fa36502ad7a1c9a464ab4932b9060200160405180910390a45f92505050610ad6565b335f9081526001602052604090205460ff16610876575f610810565b6001600160a01b0386165f9081526002602052604090205460ff1661089c576001610810565b6004545f906108ce907501000000000000000000000000000000000000000000900467ffffffffffffffff1648611169565b9050803a10156108db57503a5b60055467ffffffffffffffff1615801590610901575060055467ffffffffffffffff1681115b15610915575060055467ffffffffffffffff165b6004546005546001600160a01b03891631916fffffffffffffffffffffffffffffffff81169168010000000000000000900463ffffffff16906109739074010000000000000000000000000000000000000000900460ff1689611182565b60045461099a90700100000000000000000000000000000000900463ffffffff1688611169565b6109a49190611169565b6109ae908a611169565b98505a6109bb908a611199565b985080158015906109cb57508089115b156109d4578098505b5f6109df8a86611182565b905082158015906109f85750826109f68286611169565b115b15610a215782841115610a14575f975050505050505050610ad6565b610a1e8484611199565b90505b85811115610a2c5750845b6040516001600160a01b038c169082905f81818185875af1925050503d805f8114610a72576040519150601f19603f3d011682016040523d82523d5f602084013e610a77565b606091505b5050604080518c8152602081018890529081018390529098508815159033906001600160a01b038e16907fd0224505f828ccfcbc56ca0590d97442e239a7aa770f712948fd6388356b20de9060600160405180910390a4505050505050505b9392505050565b5f546001600160a01b0316331480610aff57506003546001600160a01b031633145b610b4b5760405162461bcd60e51b815260206004820152600e60248201527f4e4f545f415554484f52495a454400000000000000000000000000000000000060448201526064016107eb565b61052e82825f610f1d565b610b5e610dcb565b600380547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040517fc388cec0895ad7ee4635898ec92207ca48d42256d4355f7042efef62c368a979905f90a250565b610bc7610dcb565b6001600160a01b038116610c435760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016107eb565b610c4c81610eb6565b50565b610c57610dcb565b5f826001600160a01b0316826040515f6040518083038185875af1925050503d805f8114610ca0576040519150601f19603f3d011682016040523d82523d5f602084013e610ca5565b606091505b5050905080610cf65760405162461bcd60e51b815260206004820152600f60248201527f57495448445241575f4641494c4544000000000000000000000000000000000060448201526064016107eb565b604080513381526001600160a01b03851660208201529081018390527fd1c19fbcd4551a5edfb66d43d2e337c04837afda3482b42bdf569a8fccdae5fb9060600160405180910390a1505050565b610d4c610dcb565b600480547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff83161790555f6040516fffffffffffffffffffffffffffffffff831681527fda79b6b81f905f788560507c685a42d5a8ab209ee26538cbcf3ce3caed601f9b906020016105a7565b5f546001600160a01b0316331461063d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107eb565b5f5b82811015610eb0575f848483818110610e4157610e416111ac565b9050602002016020810190610e569190611076565b6001600160a01b0381165f81815260016020526040808220805460ff19168815159081179091559051939450927fb0918cd965657b8d231f8adba328fa810b6d61d800de9c795d40eb3623498c019190a350600101610e26565b50505050565b5f80546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5f5b82811015610eb0575f848483818110610f3a57610f3a6111ac565b9050602002016020810190610f4f9190611076565b6001600160a01b0381165f81815260026020526040808220805460ff19168815159081179091559051939450927ff544cca9d5484bfd447775bd759d12d53f1aa7c5f770be82c55070798ff9c63e9190a350600101610f1f565b5f8060208385031215610fba575f80fd5b823567ffffffffffffffff80821115610fd1575f80fd5b818501915085601f830112610fe4575f80fd5b813581811115610ff2575f80fd5b8660208260051b8501011115611006575f80fd5b60209290920196919550909350505050565b5f60208284031215611028575f80fd5b813567ffffffffffffffff81168114610ad6575f80fd5b5f6020828403121561104f575f80fd5b813563ffffffff81168114610ad6575f80fd5b6001600160a01b0381168114610c4c575f80fd5b5f60208284031215611086575f80fd5b8135610ad681611062565b5f602082840312156110a1575f80fd5b813560ff81168114610ad6575f80fd5b5f805f606084860312156110c3575f80fd5b83356110ce81611062565b95602085013595506040909401359392505050565b5f80604083850312156110f4575f80fd5b82356110ff81611062565b946020939093013593505050565b5f6020828403121561111d575f80fd5b81356fffffffffffffffffffffffffffffffff81168114610ad6575f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b8082018082111561117c5761117c61113c565b92915050565b808202811582820484141761117c5761117c61113c565b8181038181111561117c5761117c61113c565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffdfea264697066735822122020f38011f28af5544cf1178eee86aa793521c27cdf264f13a67832ca81cea3a364736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[Pa\0\x193a\0\xA3V[`@\x80Q`\xC0\x81\x01\x82R_\x81Ra\x0F\xA0` \x82\x01R`\x0C\x91\x81\x01\x91\x90\x91Rcw5\x94\0``\x82\x01Rd\x1B\xF0\x8E\xB0\0`\x80\x82\x01Rb\x1E\x84\x80`\xA0\x90\x91\x01R`\x04\x80T`\x01`\x01`\xE8\x1B\x03\x19\x16xw5\x94\0\x0C\0\0\x0F\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\x90U`\x05\x80T`\x01`\x01``\x1B\x03\x19\x16j\x1E\x84\x80\0\0\0\x1B\xF0\x8E\xB0\0\x17\x90Ua\0\xF2V[_\x80T`\x01`\x01`\xA0\x1B\x03\x83\x81\x16`\x01`\x01`\xA0\x1B\x03\x19\x83\x16\x81\x17\x84U`@Q\x91\x90\x92\x16\x92\x83\x91\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x91\x90\xA3PPV[a\x12\x0F\x80a\0\xFF_9_\xF3\xFE`\x80`@R`\x046\x10a\x01ZW_5`\xE0\x1C\x80c\xCA\x10\x12\x95\x11a\0\xBBW\x80c\xEF\xE1+\x01\x11a\0qW\x80c\xF2\xFD\xE3\x8B\x11a\0WW\x80c\xF2\xFD\xE3\x8B\x14a\x04\xBDW\x80c\xF3\xFE\xF3\xA3\x14a\x04\xDCW\x80c\xF5!(\xEB\x14a\x04\xFBW_\x80\xFD[\x80c\xEF\xE1+\x01\x14a\x04\x7FW\x80c\xF1\xE8E\xCA\x14a\x04\x9EW_\x80\xFD[\x80c\xD5\x13\x89H\x11a\0\xA1W\x80c\xD5\x13\x89H\x14a\x03LW\x80c\xE3\xDB\x8AI\x14a\x04AW\x80c\xE5 tS\x14a\x04`W_\x80\xFD[\x80c\xCA\x10\x12\x95\x14a\x03\x0EW\x80c\xCDI\x9D\xA3\x14a\x03-W_\x80\xFD[\x80c~\xDD\xDFE\x11a\x01\x10W\x80c\x8D\xA5\xCB[\x11a\0\xF6W\x80c\x8D\xA5\xCB[\x14a\x02\x91W\x80c\xA8\x9D!s\x14a\x02\xC1W\x80c\xBF\xFE\x17\x80\x14a\x02\xEFW_\x80\xFD[\x80c~\xDD\xDFE\x14a\x02SW\x80c\x86\xB9\x88\x95\x14a\x02rW_\x80\xFD[\x80cP\r\xE41\x11a\x01@W\x80cP\r\xE41\x14a\x01\xDDW\x80cQ\xE0\xE2k\x14a\x01\xFCW\x80cqP\x18\xA6\x14a\x02?W_\x80\xFD[\x80c%Ak\xC9\x14a\x01\x9DW\x80c,\xCB\x03\xF2\x14a\x01\xBEW_\x80\xFD[6a\x01\x99W`@\x80Q3\x81R4` \x82\x01R\x7F-\xA4f\xA7\xB2C\x04\xF4~\x87\xFA.\x1EZ\x81\xB9\x83\x1C\xE5O\xEC\x19\x05\\\xE2w\xCA/9\xBAB\xC4\x91\x01`@Q\x80\x91\x03\x90\xA1\0[_\x80\xFD[4\x80\x15a\x01\xA8W_\x80\xFD[Pa\x01\xBCa\x01\xB76`\x04a\x0F\xA9V[a\x05\x1AV[\0[4\x80\x15a\x01\xC9W_\x80\xFD[Pa\x01\xBCa\x01\xD86`\x04a\x10\x18V[a\x052V[4\x80\x15a\x01\xE8W_\x80\xFD[Pa\x01\xBCa\x01\xF76`\x04a\x10?V[a\x05\xB2V[4\x80\x15a\x02\x07W_\x80\xFD[Pa\x02*a\x02\x166`\x04a\x10vV[`\x01` R_\x90\x81R`@\x90 T`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02JW_\x80\xFD[Pa\x01\xBCa\x06,V[4\x80\x15a\x02^W_\x80\xFD[Pa\x01\xBCa\x02m6`\x04a\x10?V[a\x06?V[4\x80\x15a\x02}W_\x80\xFD[Pa\x01\xBCa\x02\x8C6`\x04a\x10\x18V[a\x06\x91V[4\x80\x15a\x02\x9CW_\x80\xFD[P_T`\x01`\x01`\xA0\x1B\x03\x16[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01a\x026V[4\x80\x15a\x02\xCCW_\x80\xFD[Pa\x02*a\x02\xDB6`\x04a\x10vV[`\x02` R_\x90\x81R`@\x90 T`\xFF\x16\x81V[4\x80\x15a\x02\xFAW_\x80\xFD[Pa\x01\xBCa\x03\t6`\x04a\x10\x91V[a\x06\xECV[4\x80\x15a\x03\x19W_\x80\xFD[Pa\x01\xBCa\x03(6`\x04a\x0F\xA9V[a\x07mV[4\x80\x15a\x038W_\x80\xFD[Pa\x01\xBCa\x03G6`\x04a\x0F\xA9V[a\x07\x81V[4\x80\x15a\x03WW_\x80\xFD[P`\x04T`\x05Ta\x03\xE9\x91o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x91c\xFF\xFF\xFF\xFFp\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83\x04\x81\x16\x92`\xFFt\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82\x04\x16\x92g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFu\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x92\x04\x82\x16\x92\x91\x81\x16\x91h\x01\0\0\0\0\0\0\0\0\x90\x91\x04\x16\x86V[`@\x80Qo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x97\x16\x87Rc\xFF\xFF\xFF\xFF\x95\x86\x16` \x88\x01R`\xFF\x90\x94\x16\x93\x86\x01\x93\x90\x93Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91\x82\x16``\x86\x01R\x16`\x80\x84\x01R\x16`\xA0\x82\x01R`\xC0\x01a\x026V[4\x80\x15a\x04LW_\x80\xFD[Pa\x02*a\x04[6`\x04a\x10\xB1V[a\x07\xFFV[4\x80\x15a\x04kW_\x80\xFD[Pa\x01\xBCa\x04z6`\x04a\x0F\xA9V[a\n\xDDV[4\x80\x15a\x04\x8AW_\x80\xFD[P`\x03Ta\x02\xA9\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[4\x80\x15a\x04\xA9W_\x80\xFD[Pa\x01\xBCa\x04\xB86`\x04a\x10vV[a\x0BVV[4\x80\x15a\x04\xC8W_\x80\xFD[Pa\x01\xBCa\x04\xD76`\x04a\x10vV[a\x0B\xBFV[4\x80\x15a\x04\xE7W_\x80\xFD[Pa\x01\xBCa\x04\xF66`\x04a\x10\xE3V[a\x0COV[4\x80\x15a\x05\x06W_\x80\xFD[Pa\x01\xBCa\x05\x156`\x04a\x11\rV[a\rDV[a\x05\"a\r\xCBV[a\x05.\x82\x82`\x01a\x0E$V[PPV[a\x05:a\r\xCBV[`\x05\x80T\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16\x17\x90U`\x04[`@Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16\x81R\x7F\xDAy\xB6\xB8\x1F\x90_x\x85`P|hZB\xD5\xA8\xAB \x9E\xE2e8\xCB\xCF<\xE3\xCA\xED`\x1F\x9B\x90` \x01[`@Q\x80\x91\x03\x90\xA2PV[a\x05\xBAa\r\xCBV[`\x05\x80T\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16h\x01\0\0\0\0\0\0\0\0c\xFF\xFF\xFF\xFF\x84\x16\x02\x17\x81U[`@Qc\xFF\xFF\xFF\xFF\x83\x16\x81R\x7F\xDAy\xB6\xB8\x1F\x90_x\x85`P|hZB\xD5\xA8\xAB \x9E\xE2e8\xCB\xCF<\xE3\xCA\xED`\x1F\x9B\x90` \x01a\x05\xA7V[a\x064a\r\xCBV[a\x06=_a\x0E\xB6V[V[a\x06Ga\r\xCBV[`\x04\x80T\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16p\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0c\xFF\xFF\xFF\xFF\x84\x16\x02\x17\x90U`\x01a\x05\xF6V[a\x06\x99a\r\xCBV[`\x04\x80T\x7F\xFF\xFF\xFF\0\0\0\0\0\0\0\0\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16u\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x16\x02\x17\x90U`\x03a\x05qV[a\x06\xF4a\r\xCBV[`\x04\x80T\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16t\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xFF\x84\x16\x02\x17\x90U`\x02`@Q`\xFF\x83\x16\x81R\x7F\xDAy\xB6\xB8\x1F\x90_x\x85`P|hZB\xD5\xA8\xAB \x9E\xE2e8\xCB\xCF<\xE3\xCA\xED`\x1F\x9B\x90` \x01a\x05\xA7V[a\x07ua\r\xCBV[a\x05.\x82\x82`\x01a\x0F\x1DV[_T`\x01`\x01`\xA0\x1B\x03\x163\x14\x80a\x07\xA3WP`\x03T`\x01`\x01`\xA0\x1B\x03\x163\x14[a\x07\xF4W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0E`$\x82\x01R\x7FNOT_AUTHORIZED\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01[`@Q\x80\x91\x03\x90\xFD[a\x05.\x82\x82_a\x0E$V[_\x80Z\x90PG_\x81\x90\x03a\x08ZW`\x03[`@Q\x86\x81R3\x90`\x01`\x01`\xA0\x1B\x03\x89\x16\x90\x7F+\x8A\xE0\x0E\"\xD9\xEA\xF5\xA9( \xA2+\x94|\0z\xEEw?\xA3e\x02\xADz\x1C\x9AFJ\xB4\x93+\x90` \x01`@Q\x80\x91\x03\x90\xA4_\x92PPPa\n\xD6V[3_\x90\x81R`\x01` R`@\x90 T`\xFF\x16a\x08vW_a\x08\x10V[`\x01`\x01`\xA0\x1B\x03\x86\x16_\x90\x81R`\x02` R`@\x90 T`\xFF\x16a\x08\x9CW`\x01a\x08\x10V[`\x04T_\x90a\x08\xCE\x90u\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16Ha\x11iV[\x90P\x80:\x10\x15a\x08\xDBWP:[`\x05Tg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x15\x80\x15\x90a\t\x01WP`\x05Tg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81\x11[\x15a\t\x15WP`\x05Tg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16[`\x04T`\x05T`\x01`\x01`\xA0\x1B\x03\x89\x161\x91o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x91h\x01\0\0\0\0\0\0\0\0\x90\x04c\xFF\xFF\xFF\xFF\x16\x90a\ts\x90t\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x04`\xFF\x16\x89a\x11\x82V[`\x04Ta\t\x9A\x90p\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x04c\xFF\xFF\xFF\xFF\x16\x88a\x11iV[a\t\xA4\x91\x90a\x11iV[a\t\xAE\x90\x8Aa\x11iV[\x98PZa\t\xBB\x90\x8Aa\x11\x99V[\x98P\x80\x15\x80\x15\x90a\t\xCBWP\x80\x89\x11[\x15a\t\xD4W\x80\x98P[_a\t\xDF\x8A\x86a\x11\x82V[\x90P\x82\x15\x80\x15\x90a\t\xF8WP\x82a\t\xF6\x82\x86a\x11iV[\x11[\x15a\n!W\x82\x84\x11\x15a\n\x14W_\x97PPPPPPPPa\n\xD6V[a\n\x1E\x84\x84a\x11\x99V[\x90P[\x85\x81\x11\x15a\n,WP\x84[`@Q`\x01`\x01`\xA0\x1B\x03\x8C\x16\x90\x82\x90_\x81\x81\x81\x85\x87Z\xF1\x92PPP=\x80_\x81\x14a\nrW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\nwV[``\x91P[PP`@\x80Q\x8C\x81R` \x81\x01\x88\x90R\x90\x81\x01\x83\x90R\x90\x98P\x88\x15\x15\x903\x90`\x01`\x01`\xA0\x1B\x03\x8E\x16\x90\x7F\xD0\"E\x05\xF8(\xCC\xFC\xBCV\xCA\x05\x90\xD9tB\xE29\xA7\xAAw\x0Fq)H\xFDc\x885k \xDE\x90``\x01`@Q\x80\x91\x03\x90\xA4PPPPPPP[\x93\x92PPPV[_T`\x01`\x01`\xA0\x1B\x03\x163\x14\x80a\n\xFFWP`\x03T`\x01`\x01`\xA0\x1B\x03\x163\x14[a\x0BKW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0E`$\x82\x01R\x7FNOT_AUTHORIZED\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x07\xEBV[a\x05.\x82\x82_a\x0F\x1DV[a\x0B^a\r\xCBV[`\x03\x80T\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16`\x01`\x01`\xA0\x1B\x03\x83\x16\x90\x81\x17\x90\x91U`@Q\x7F\xC3\x88\xCE\xC0\x89Z\xD7\xEEF5\x89\x8E\xC9\"\x07\xCAH\xD4\"V\xD45_pB\xEF\xEFb\xC3h\xA9y\x90_\x90\xA2PV[a\x0B\xC7a\r\xCBV[`\x01`\x01`\xA0\x1B\x03\x81\x16a\x0CCW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FOwnable: new owner is the zero a`D\x82\x01R\x7Fddress\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x07\xEBV[a\x0CL\x81a\x0E\xB6V[PV[a\x0CWa\r\xCBV[_\x82`\x01`\x01`\xA0\x1B\x03\x16\x82`@Q_`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80_\x81\x14a\x0C\xA0W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x0C\xA5V[``\x91P[PP\x90P\x80a\x0C\xF6W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0F`$\x82\x01R\x7FWITHDRAW_FAILED\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x07\xEBV[`@\x80Q3\x81R`\x01`\x01`\xA0\x1B\x03\x85\x16` \x82\x01R\x90\x81\x01\x83\x90R\x7F\xD1\xC1\x9F\xBC\xD4U\x1A^\xDF\xB6mC\xD2\xE37\xC0H7\xAF\xDA4\x82\xB4+\xDFV\x9A\x8F\xCC\xDA\xE5\xFB\x90``\x01`@Q\x80\x91\x03\x90\xA1PPPV[a\rLa\r\xCBV[`\x04\x80T\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16\x17\x90U_`@Qo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16\x81R\x7F\xDAy\xB6\xB8\x1F\x90_x\x85`P|hZB\xD5\xA8\xAB \x9E\xE2e8\xCB\xCF<\xE3\xCA\xED`\x1F\x9B\x90` \x01a\x05\xA7V[_T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x06=W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01\x81\x90R`$\x82\x01R\x7FOwnable: caller is not the owner`D\x82\x01R`d\x01a\x07\xEBV[_[\x82\x81\x10\x15a\x0E\xB0W_\x84\x84\x83\x81\x81\x10a\x0EAWa\x0EAa\x11\xACV[\x90P` \x02\x01` \x81\x01\x90a\x0EV\x91\x90a\x10vV[`\x01`\x01`\xA0\x1B\x03\x81\x16_\x81\x81R`\x01` R`@\x80\x82 \x80T`\xFF\x19\x16\x88\x15\x15\x90\x81\x17\x90\x91U\x90Q\x93\x94P\x92\x7F\xB0\x91\x8C\xD9ee{\x8D#\x1F\x8A\xDB\xA3(\xFA\x81\x0Bma\xD8\0\xDE\x9Cy]@\xEB6#I\x8C\x01\x91\x90\xA3P`\x01\x01a\x0E&V[PPPPV[_\x80T`\x01`\x01`\xA0\x1B\x03\x83\x81\x16\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83\x16\x81\x17\x84U`@Q\x91\x90\x92\x16\x92\x83\x91\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x91\x90\xA3PPV[_[\x82\x81\x10\x15a\x0E\xB0W_\x84\x84\x83\x81\x81\x10a\x0F:Wa\x0F:a\x11\xACV[\x90P` \x02\x01` \x81\x01\x90a\x0FO\x91\x90a\x10vV[`\x01`\x01`\xA0\x1B\x03\x81\x16_\x81\x81R`\x02` R`@\x80\x82 \x80T`\xFF\x19\x16\x88\x15\x15\x90\x81\x17\x90\x91U\x90Q\x93\x94P\x92\x7F\xF5D\xCC\xA9\xD5HK\xFDDwu\xBDu\x9D\x12\xD5?\x1A\xA7\xC5\xF7p\xBE\x82\xC5Ppy\x8F\xF9\xC6>\x91\x90\xA3P`\x01\x01a\x0F\x1FV[_\x80` \x83\x85\x03\x12\x15a\x0F\xBAW_\x80\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x0F\xD1W_\x80\xFD[\x81\x85\x01\x91P\x85`\x1F\x83\x01\x12a\x0F\xE4W_\x80\xFD[\x815\x81\x81\x11\x15a\x0F\xF2W_\x80\xFD[\x86` \x82`\x05\x1B\x85\x01\x01\x11\x15a\x10\x06W_\x80\xFD[` \x92\x90\x92\x01\x96\x91\x95P\x90\x93PPPPV[_` \x82\x84\x03\x12\x15a\x10(W_\x80\xFD[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\n\xD6W_\x80\xFD[_` \x82\x84\x03\x12\x15a\x10OW_\x80\xFD[\x815c\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\n\xD6W_\x80\xFD[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x0CLW_\x80\xFD[_` \x82\x84\x03\x12\x15a\x10\x86W_\x80\xFD[\x815a\n\xD6\x81a\x10bV[_` \x82\x84\x03\x12\x15a\x10\xA1W_\x80\xFD[\x815`\xFF\x81\x16\x81\x14a\n\xD6W_\x80\xFD[_\x80_``\x84\x86\x03\x12\x15a\x10\xC3W_\x80\xFD[\x835a\x10\xCE\x81a\x10bV[\x95` \x85\x015\x95P`@\x90\x94\x015\x93\x92PPPV[_\x80`@\x83\x85\x03\x12\x15a\x10\xF4W_\x80\xFD[\x825a\x10\xFF\x81a\x10bV[\x94` \x93\x90\x93\x015\x93PPPV[_` \x82\x84\x03\x12\x15a\x11\x1DW_\x80\xFD[\x815o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\n\xD6W_\x80\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[\x80\x82\x01\x80\x82\x11\x15a\x11|Wa\x11|a\x11<V[\x92\x91PPV[\x80\x82\x02\x81\x15\x82\x82\x04\x84\x14\x17a\x11|Wa\x11|a\x11<V[\x81\x81\x03\x81\x81\x11\x15a\x11|Wa\x11|a\x11<V[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD\xFE\xA2dipfsX\"\x12  \xF3\x80\x11\xF2\x8A\xF5TL\xF1\x17\x8E\xEE\x86\xAAy5!\xC2|\xDF&O\x13\xA6x2\xCA\x81\xCE\xA3\xA3dsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361061015a575f3560e01c8063ca101295116100bb578063efe12b0111610071578063f2fde38b11610057578063f2fde38b146104bd578063f3fef3a3146104dc578063f52128eb146104fb575f80fd5b8063efe12b011461047f578063f1e845ca1461049e575f80fd5b8063d5138948116100a1578063d51389481461034c578063e3db8a4914610441578063e520745314610460575f80fd5b8063ca1012951461030e578063cd499da31461032d575f80fd5b80637edddf45116101105780638da5cb5b116100f65780638da5cb5b14610291578063a89d2173146102c1578063bffe1780146102ef575f80fd5b80637edddf451461025357806386b9889514610272575f80fd5b8063500de43111610140578063500de431146101dd57806351e0e26b146101fc578063715018a61461023f575f80fd5b806325416bc91461019d5780632ccb03f2146101be575f80fd5b3661019957604080513381523460208201527f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c4910160405180910390a1005b5f80fd5b3480156101a8575f80fd5b506101bc6101b7366004610fa9565b61051a565b005b3480156101c9575f80fd5b506101bc6101d8366004611018565b610532565b3480156101e8575f80fd5b506101bc6101f736600461103f565b6105b2565b348015610207575f80fd5b5061022a610216366004611076565b60016020525f908152604090205460ff1681565b60405190151581526020015b60405180910390f35b34801561024a575f80fd5b506101bc61062c565b34801561025e575f80fd5b506101bc61026d36600461103f565b61063f565b34801561027d575f80fd5b506101bc61028c366004611018565b610691565b34801561029c575f80fd5b505f546001600160a01b03165b6040516001600160a01b039091168152602001610236565b3480156102cc575f80fd5b5061022a6102db366004611076565b60026020525f908152604090205460ff1681565b3480156102fa575f80fd5b506101bc610309366004611091565b6106ec565b348015610319575f80fd5b506101bc610328366004610fa9565b61076d565b348015610338575f80fd5b506101bc610347366004610fa9565b610781565b348015610357575f80fd5b506004546005546103e9916fffffffffffffffffffffffffffffffff81169163ffffffff700100000000000000000000000000000000830481169260ff740100000000000000000000000000000000000000008204169267ffffffffffffffff750100000000000000000000000000000000000000000090920482169291811691680100000000000000009091041686565b604080516fffffffffffffffffffffffffffffffff909716875263ffffffff958616602088015260ff9094169386019390935267ffffffffffffffff91821660608601521660808401521660a082015260c001610236565b34801561044c575f80fd5b5061022a61045b3660046110b1565b6107ff565b34801561046b575f80fd5b506101bc61047a366004610fa9565b610add565b34801561048a575f80fd5b506003546102a9906001600160a01b031681565b3480156104a9575f80fd5b506101bc6104b8366004611076565b610b56565b3480156104c8575f80fd5b506101bc6104d7366004611076565b610bbf565b3480156104e7575f80fd5b506101bc6104f63660046110e3565b610c4f565b348015610506575f80fd5b506101bc61051536600461110d565b610d44565b610522610dcb565b61052e82826001610e24565b5050565b61053a610dcb565b600580547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff831617905560045b60405167ffffffffffffffff831681527fda79b6b81f905f788560507c685a42d5a8ab209ee26538cbcf3ce3caed601f9b906020015b60405180910390a250565b6105ba610dcb565b600580547fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff166801000000000000000063ffffffff8416021781555b60405163ffffffff831681527fda79b6b81f905f788560507c685a42d5a8ab209ee26538cbcf3ce3caed601f9b906020016105a7565b610634610dcb565b61063d5f610eb6565b565b610647610dcb565b600480547fffffffffffffffffffffffff00000000ffffffffffffffffffffffffffffffff1670010000000000000000000000000000000063ffffffff84160217905560016105f6565b610699610dcb565b600480547fffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffff16750100000000000000000000000000000000000000000067ffffffffffffffff8416021790556003610571565b6106f4610dcb565b600480547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000060ff841602179055600260405160ff831681527fda79b6b81f905f788560507c685a42d5a8ab209ee26538cbcf3ce3caed601f9b906020016105a7565b610775610dcb565b61052e82826001610f1d565b5f546001600160a01b03163314806107a357506003546001600160a01b031633145b6107f45760405162461bcd60e51b815260206004820152600e60248201527f4e4f545f415554484f52495a454400000000000000000000000000000000000060448201526064015b60405180910390fd5b61052e82825f610e24565b5f805a9050475f81900361085a5760035b60405186815233906001600160a01b038916907f2b8ae00e22d9eaf5a92820a22b947c007aee773fa36502ad7a1c9a464ab4932b9060200160405180910390a45f92505050610ad6565b335f9081526001602052604090205460ff16610876575f610810565b6001600160a01b0386165f9081526002602052604090205460ff1661089c576001610810565b6004545f906108ce907501000000000000000000000000000000000000000000900467ffffffffffffffff1648611169565b9050803a10156108db57503a5b60055467ffffffffffffffff1615801590610901575060055467ffffffffffffffff1681115b15610915575060055467ffffffffffffffff165b6004546005546001600160a01b03891631916fffffffffffffffffffffffffffffffff81169168010000000000000000900463ffffffff16906109739074010000000000000000000000000000000000000000900460ff1689611182565b60045461099a90700100000000000000000000000000000000900463ffffffff1688611169565b6109a49190611169565b6109ae908a611169565b98505a6109bb908a611199565b985080158015906109cb57508089115b156109d4578098505b5f6109df8a86611182565b905082158015906109f85750826109f68286611169565b115b15610a215782841115610a14575f975050505050505050610ad6565b610a1e8484611199565b90505b85811115610a2c5750845b6040516001600160a01b038c169082905f81818185875af1925050503d805f8114610a72576040519150601f19603f3d011682016040523d82523d5f602084013e610a77565b606091505b5050604080518c8152602081018890529081018390529098508815159033906001600160a01b038e16907fd0224505f828ccfcbc56ca0590d97442e239a7aa770f712948fd6388356b20de9060600160405180910390a4505050505050505b9392505050565b5f546001600160a01b0316331480610aff57506003546001600160a01b031633145b610b4b5760405162461bcd60e51b815260206004820152600e60248201527f4e4f545f415554484f52495a454400000000000000000000000000000000000060448201526064016107eb565b61052e82825f610f1d565b610b5e610dcb565b600380547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040517fc388cec0895ad7ee4635898ec92207ca48d42256d4355f7042efef62c368a979905f90a250565b610bc7610dcb565b6001600160a01b038116610c435760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016107eb565b610c4c81610eb6565b50565b610c57610dcb565b5f826001600160a01b0316826040515f6040518083038185875af1925050503d805f8114610ca0576040519150601f19603f3d011682016040523d82523d5f602084013e610ca5565b606091505b5050905080610cf65760405162461bcd60e51b815260206004820152600f60248201527f57495448445241575f4641494c4544000000000000000000000000000000000060448201526064016107eb565b604080513381526001600160a01b03851660208201529081018390527fd1c19fbcd4551a5edfb66d43d2e337c04837afda3482b42bdf569a8fccdae5fb9060600160405180910390a1505050565b610d4c610dcb565b600480547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff83161790555f6040516fffffffffffffffffffffffffffffffff831681527fda79b6b81f905f788560507c685a42d5a8ab209ee26538cbcf3ce3caed601f9b906020016105a7565b5f546001600160a01b0316331461063d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107eb565b5f5b82811015610eb0575f848483818110610e4157610e416111ac565b9050602002016020810190610e569190611076565b6001600160a01b0381165f81815260016020526040808220805460ff19168815159081179091559051939450927fb0918cd965657b8d231f8adba328fa810b6d61d800de9c795d40eb3623498c019190a350600101610e26565b50505050565b5f80546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5f5b82811015610eb0575f848483818110610f3a57610f3a6111ac565b9050602002016020810190610f4f9190611076565b6001600160a01b0381165f81815260026020526040808220805460ff19168815159081179091559051939450927ff544cca9d5484bfd447775bd759d12d53f1aa7c5f770be82c55070798ff9c63e9190a350600101610f1f565b5f8060208385031215610fba575f80fd5b823567ffffffffffffffff80821115610fd1575f80fd5b818501915085601f830112610fe4575f80fd5b813581811115610ff2575f80fd5b8660208260051b8501011115611006575f80fd5b60209290920196919550909350505050565b5f60208284031215611028575f80fd5b813567ffffffffffffffff81168114610ad6575f80fd5b5f6020828403121561104f575f80fd5b813563ffffffff81168114610ad6575f80fd5b6001600160a01b0381168114610c4c575f80fd5b5f60208284031215611086575f80fd5b8135610ad681611062565b5f602082840312156110a1575f80fd5b813560ff81168114610ad6575f80fd5b5f805f606084860312156110c3575f80fd5b83356110ce81611062565b95602085013595506040909401359392505050565b5f80604083850312156110f4575f80fd5b82356110ff81611062565b946020939093013593505050565b5f6020828403121561111d575f80fd5b81356fffffffffffffffffffffffffffffffff81168114610ad6575f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b8082018082111561117c5761117c61113c565b92915050565b808202811582820484141761117c5761117c61113c565b8181038181111561117c5761117c61113c565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffdfea264697066735822122020f38011f28af5544cf1178eee86aa793521c27cdf264f13a67832ca81cea3a364736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10a\x01ZW_5`\xE0\x1C\x80c\xCA\x10\x12\x95\x11a\0\xBBW\x80c\xEF\xE1+\x01\x11a\0qW\x80c\xF2\xFD\xE3\x8B\x11a\0WW\x80c\xF2\xFD\xE3\x8B\x14a\x04\xBDW\x80c\xF3\xFE\xF3\xA3\x14a\x04\xDCW\x80c\xF5!(\xEB\x14a\x04\xFBW_\x80\xFD[\x80c\xEF\xE1+\x01\x14a\x04\x7FW\x80c\xF1\xE8E\xCA\x14a\x04\x9EW_\x80\xFD[\x80c\xD5\x13\x89H\x11a\0\xA1W\x80c\xD5\x13\x89H\x14a\x03LW\x80c\xE3\xDB\x8AI\x14a\x04AW\x80c\xE5 tS\x14a\x04`W_\x80\xFD[\x80c\xCA\x10\x12\x95\x14a\x03\x0EW\x80c\xCDI\x9D\xA3\x14a\x03-W_\x80\xFD[\x80c~\xDD\xDFE\x11a\x01\x10W\x80c\x8D\xA5\xCB[\x11a\0\xF6W\x80c\x8D\xA5\xCB[\x14a\x02\x91W\x80c\xA8\x9D!s\x14a\x02\xC1W\x80c\xBF\xFE\x17\x80\x14a\x02\xEFW_\x80\xFD[\x80c~\xDD\xDFE\x14a\x02SW\x80c\x86\xB9\x88\x95\x14a\x02rW_\x80\xFD[\x80cP\r\xE41\x11a\x01@W\x80cP\r\xE41\x14a\x01\xDDW\x80cQ\xE0\xE2k\x14a\x01\xFCW\x80cqP\x18\xA6\x14a\x02?W_\x80\xFD[\x80c%Ak\xC9\x14a\x01\x9DW\x80c,\xCB\x03\xF2\x14a\x01\xBEW_\x80\xFD[6a\x01\x99W`@\x80Q3\x81R4` \x82\x01R\x7F-\xA4f\xA7\xB2C\x04\xF4~\x87\xFA.\x1EZ\x81\xB9\x83\x1C\xE5O\xEC\x19\x05\\\xE2w\xCA/9\xBAB\xC4\x91\x01`@Q\x80\x91\x03\x90\xA1\0[_\x80\xFD[4\x80\x15a\x01\xA8W_\x80\xFD[Pa\x01\xBCa\x01\xB76`\x04a\x0F\xA9V[a\x05\x1AV[\0[4\x80\x15a\x01\xC9W_\x80\xFD[Pa\x01\xBCa\x01\xD86`\x04a\x10\x18V[a\x052V[4\x80\x15a\x01\xE8W_\x80\xFD[Pa\x01\xBCa\x01\xF76`\x04a\x10?V[a\x05\xB2V[4\x80\x15a\x02\x07W_\x80\xFD[Pa\x02*a\x02\x166`\x04a\x10vV[`\x01` R_\x90\x81R`@\x90 T`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02JW_\x80\xFD[Pa\x01\xBCa\x06,V[4\x80\x15a\x02^W_\x80\xFD[Pa\x01\xBCa\x02m6`\x04a\x10?V[a\x06?V[4\x80\x15a\x02}W_\x80\xFD[Pa\x01\xBCa\x02\x8C6`\x04a\x10\x18V[a\x06\x91V[4\x80\x15a\x02\x9CW_\x80\xFD[P_T`\x01`\x01`\xA0\x1B\x03\x16[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01a\x026V[4\x80\x15a\x02\xCCW_\x80\xFD[Pa\x02*a\x02\xDB6`\x04a\x10vV[`\x02` R_\x90\x81R`@\x90 T`\xFF\x16\x81V[4\x80\x15a\x02\xFAW_\x80\xFD[Pa\x01\xBCa\x03\t6`\x04a\x10\x91V[a\x06\xECV[4\x80\x15a\x03\x19W_\x80\xFD[Pa\x01\xBCa\x03(6`\x04a\x0F\xA9V[a\x07mV[4\x80\x15a\x038W_\x80\xFD[Pa\x01\xBCa\x03G6`\x04a\x0F\xA9V[a\x07\x81V[4\x80\x15a\x03WW_\x80\xFD[P`\x04T`\x05Ta\x03\xE9\x91o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x91c\xFF\xFF\xFF\xFFp\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83\x04\x81\x16\x92`\xFFt\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82\x04\x16\x92g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFu\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x92\x04\x82\x16\x92\x91\x81\x16\x91h\x01\0\0\0\0\0\0\0\0\x90\x91\x04\x16\x86V[`@\x80Qo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x97\x16\x87Rc\xFF\xFF\xFF\xFF\x95\x86\x16` \x88\x01R`\xFF\x90\x94\x16\x93\x86\x01\x93\x90\x93Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91\x82\x16``\x86\x01R\x16`\x80\x84\x01R\x16`\xA0\x82\x01R`\xC0\x01a\x026V[4\x80\x15a\x04LW_\x80\xFD[Pa\x02*a\x04[6`\x04a\x10\xB1V[a\x07\xFFV[4\x80\x15a\x04kW_\x80\xFD[Pa\x01\xBCa\x04z6`\x04a\x0F\xA9V[a\n\xDDV[4\x80\x15a\x04\x8AW_\x80\xFD[P`\x03Ta\x02\xA9\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[4\x80\x15a\x04\xA9W_\x80\xFD[Pa\x01\xBCa\x04\xB86`\x04a\x10vV[a\x0BVV[4\x80\x15a\x04\xC8W_\x80\xFD[Pa\x01\xBCa\x04\xD76`\x04a\x10vV[a\x0B\xBFV[4\x80\x15a\x04\xE7W_\x80\xFD[Pa\x01\xBCa\x04\xF66`\x04a\x10\xE3V[a\x0COV[4\x80\x15a\x05\x06W_\x80\xFD[Pa\x01\xBCa\x05\x156`\x04a\x11\rV[a\rDV[a\x05\"a\r\xCBV[a\x05.\x82\x82`\x01a\x0E$V[PPV[a\x05:a\r\xCBV[`\x05\x80T\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16\x17\x90U`\x04[`@Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16\x81R\x7F\xDAy\xB6\xB8\x1F\x90_x\x85`P|hZB\xD5\xA8\xAB \x9E\xE2e8\xCB\xCF<\xE3\xCA\xED`\x1F\x9B\x90` \x01[`@Q\x80\x91\x03\x90\xA2PV[a\x05\xBAa\r\xCBV[`\x05\x80T\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16h\x01\0\0\0\0\0\0\0\0c\xFF\xFF\xFF\xFF\x84\x16\x02\x17\x81U[`@Qc\xFF\xFF\xFF\xFF\x83\x16\x81R\x7F\xDAy\xB6\xB8\x1F\x90_x\x85`P|hZB\xD5\xA8\xAB \x9E\xE2e8\xCB\xCF<\xE3\xCA\xED`\x1F\x9B\x90` \x01a\x05\xA7V[a\x064a\r\xCBV[a\x06=_a\x0E\xB6V[V[a\x06Ga\r\xCBV[`\x04\x80T\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16p\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0c\xFF\xFF\xFF\xFF\x84\x16\x02\x17\x90U`\x01a\x05\xF6V[a\x06\x99a\r\xCBV[`\x04\x80T\x7F\xFF\xFF\xFF\0\0\0\0\0\0\0\0\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16u\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x16\x02\x17\x90U`\x03a\x05qV[a\x06\xF4a\r\xCBV[`\x04\x80T\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16t\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xFF\x84\x16\x02\x17\x90U`\x02`@Q`\xFF\x83\x16\x81R\x7F\xDAy\xB6\xB8\x1F\x90_x\x85`P|hZB\xD5\xA8\xAB \x9E\xE2e8\xCB\xCF<\xE3\xCA\xED`\x1F\x9B\x90` \x01a\x05\xA7V[a\x07ua\r\xCBV[a\x05.\x82\x82`\x01a\x0F\x1DV[_T`\x01`\x01`\xA0\x1B\x03\x163\x14\x80a\x07\xA3WP`\x03T`\x01`\x01`\xA0\x1B\x03\x163\x14[a\x07\xF4W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0E`$\x82\x01R\x7FNOT_AUTHORIZED\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01[`@Q\x80\x91\x03\x90\xFD[a\x05.\x82\x82_a\x0E$V[_\x80Z\x90PG_\x81\x90\x03a\x08ZW`\x03[`@Q\x86\x81R3\x90`\x01`\x01`\xA0\x1B\x03\x89\x16\x90\x7F+\x8A\xE0\x0E\"\xD9\xEA\xF5\xA9( \xA2+\x94|\0z\xEEw?\xA3e\x02\xADz\x1C\x9AFJ\xB4\x93+\x90` \x01`@Q\x80\x91\x03\x90\xA4_\x92PPPa\n\xD6V[3_\x90\x81R`\x01` R`@\x90 T`\xFF\x16a\x08vW_a\x08\x10V[`\x01`\x01`\xA0\x1B\x03\x86\x16_\x90\x81R`\x02` R`@\x90 T`\xFF\x16a\x08\x9CW`\x01a\x08\x10V[`\x04T_\x90a\x08\xCE\x90u\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16Ha\x11iV[\x90P\x80:\x10\x15a\x08\xDBWP:[`\x05Tg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x15\x80\x15\x90a\t\x01WP`\x05Tg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81\x11[\x15a\t\x15WP`\x05Tg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16[`\x04T`\x05T`\x01`\x01`\xA0\x1B\x03\x89\x161\x91o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x91h\x01\0\0\0\0\0\0\0\0\x90\x04c\xFF\xFF\xFF\xFF\x16\x90a\ts\x90t\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x04`\xFF\x16\x89a\x11\x82V[`\x04Ta\t\x9A\x90p\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x04c\xFF\xFF\xFF\xFF\x16\x88a\x11iV[a\t\xA4\x91\x90a\x11iV[a\t\xAE\x90\x8Aa\x11iV[\x98PZa\t\xBB\x90\x8Aa\x11\x99V[\x98P\x80\x15\x80\x15\x90a\t\xCBWP\x80\x89\x11[\x15a\t\xD4W\x80\x98P[_a\t\xDF\x8A\x86a\x11\x82V[\x90P\x82\x15\x80\x15\x90a\t\xF8WP\x82a\t\xF6\x82\x86a\x11iV[\x11[\x15a\n!W\x82\x84\x11\x15a\n\x14W_\x97PPPPPPPPa\n\xD6V[a\n\x1E\x84\x84a\x11\x99V[\x90P[\x85\x81\x11\x15a\n,WP\x84[`@Q`\x01`\x01`\xA0\x1B\x03\x8C\x16\x90\x82\x90_\x81\x81\x81\x85\x87Z\xF1\x92PPP=\x80_\x81\x14a\nrW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\nwV[``\x91P[PP`@\x80Q\x8C\x81R` \x81\x01\x88\x90R\x90\x81\x01\x83\x90R\x90\x98P\x88\x15\x15\x903\x90`\x01`\x01`\xA0\x1B\x03\x8E\x16\x90\x7F\xD0\"E\x05\xF8(\xCC\xFC\xBCV\xCA\x05\x90\xD9tB\xE29\xA7\xAAw\x0Fq)H\xFDc\x885k \xDE\x90``\x01`@Q\x80\x91\x03\x90\xA4PPPPPPP[\x93\x92PPPV[_T`\x01`\x01`\xA0\x1B\x03\x163\x14\x80a\n\xFFWP`\x03T`\x01`\x01`\xA0\x1B\x03\x163\x14[a\x0BKW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0E`$\x82\x01R\x7FNOT_AUTHORIZED\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x07\xEBV[a\x05.\x82\x82_a\x0F\x1DV[a\x0B^a\r\xCBV[`\x03\x80T\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16`\x01`\x01`\xA0\x1B\x03\x83\x16\x90\x81\x17\x90\x91U`@Q\x7F\xC3\x88\xCE\xC0\x89Z\xD7\xEEF5\x89\x8E\xC9\"\x07\xCAH\xD4\"V\xD45_pB\xEF\xEFb\xC3h\xA9y\x90_\x90\xA2PV[a\x0B\xC7a\r\xCBV[`\x01`\x01`\xA0\x1B\x03\x81\x16a\x0CCW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FOwnable: new owner is the zero a`D\x82\x01R\x7Fddress\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x07\xEBV[a\x0CL\x81a\x0E\xB6V[PV[a\x0CWa\r\xCBV[_\x82`\x01`\x01`\xA0\x1B\x03\x16\x82`@Q_`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80_\x81\x14a\x0C\xA0W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x0C\xA5V[``\x91P[PP\x90P\x80a\x0C\xF6W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0F`$\x82\x01R\x7FWITHDRAW_FAILED\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x07\xEBV[`@\x80Q3\x81R`\x01`\x01`\xA0\x1B\x03\x85\x16` \x82\x01R\x90\x81\x01\x83\x90R\x7F\xD1\xC1\x9F\xBC\xD4U\x1A^\xDF\xB6mC\xD2\xE37\xC0H7\xAF\xDA4\x82\xB4+\xDFV\x9A\x8F\xCC\xDA\xE5\xFB\x90``\x01`@Q\x80\x91\x03\x90\xA1PPPV[a\rLa\r\xCBV[`\x04\x80T\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16\x17\x90U_`@Qo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16\x81R\x7F\xDAy\xB6\xB8\x1F\x90_x\x85`P|hZB\xD5\xA8\xAB \x9E\xE2e8\xCB\xCF<\xE3\xCA\xED`\x1F\x9B\x90` \x01a\x05\xA7V[_T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x06=W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01\x81\x90R`$\x82\x01R\x7FOwnable: caller is not the owner`D\x82\x01R`d\x01a\x07\xEBV[_[\x82\x81\x10\x15a\x0E\xB0W_\x84\x84\x83\x81\x81\x10a\x0EAWa\x0EAa\x11\xACV[\x90P` \x02\x01` \x81\x01\x90a\x0EV\x91\x90a\x10vV[`\x01`\x01`\xA0\x1B\x03\x81\x16_\x81\x81R`\x01` R`@\x80\x82 \x80T`\xFF\x19\x16\x88\x15\x15\x90\x81\x17\x90\x91U\x90Q\x93\x94P\x92\x7F\xB0\x91\x8C\xD9ee{\x8D#\x1F\x8A\xDB\xA3(\xFA\x81\x0Bma\xD8\0\xDE\x9Cy]@\xEB6#I\x8C\x01\x91\x90\xA3P`\x01\x01a\x0E&V[PPPPV[_\x80T`\x01`\x01`\xA0\x1B\x03\x83\x81\x16\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83\x16\x81\x17\x84U`@Q\x91\x90\x92\x16\x92\x83\x91\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x91\x90\xA3PPV[_[\x82\x81\x10\x15a\x0E\xB0W_\x84\x84\x83\x81\x81\x10a\x0F:Wa\x0F:a\x11\xACV[\x90P` \x02\x01` \x81\x01\x90a\x0FO\x91\x90a\x10vV[`\x01`\x01`\xA0\x1B\x03\x81\x16_\x81\x81R`\x02` R`@\x80\x82 \x80T`\xFF\x19\x16\x88\x15\x15\x90\x81\x17\x90\x91U\x90Q\x93\x94P\x92\x7F\xF5D\xCC\xA9\xD5HK\xFDDwu\xBDu\x9D\x12\xD5?\x1A\xA7\xC5\xF7p\xBE\x82\xC5Ppy\x8F\xF9\xC6>\x91\x90\xA3P`\x01\x01a\x0F\x1FV[_\x80` \x83\x85\x03\x12\x15a\x0F\xBAW_\x80\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x0F\xD1W_\x80\xFD[\x81\x85\x01\x91P\x85`\x1F\x83\x01\x12a\x0F\xE4W_\x80\xFD[\x815\x81\x81\x11\x15a\x0F\xF2W_\x80\xFD[\x86` \x82`\x05\x1B\x85\x01\x01\x11\x15a\x10\x06W_\x80\xFD[` \x92\x90\x92\x01\x96\x91\x95P\x90\x93PPPPV[_` \x82\x84\x03\x12\x15a\x10(W_\x80\xFD[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\n\xD6W_\x80\xFD[_` \x82\x84\x03\x12\x15a\x10OW_\x80\xFD[\x815c\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\n\xD6W_\x80\xFD[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x0CLW_\x80\xFD[_` \x82\x84\x03\x12\x15a\x10\x86W_\x80\xFD[\x815a\n\xD6\x81a\x10bV[_` \x82\x84\x03\x12\x15a\x10\xA1W_\x80\xFD[\x815`\xFF\x81\x16\x81\x14a\n\xD6W_\x80\xFD[_\x80_``\x84\x86\x03\x12\x15a\x10\xC3W_\x80\xFD[\x835a\x10\xCE\x81a\x10bV[\x95` \x85\x015\x95P`@\x90\x94\x015\x93\x92PPPV[_\x80`@\x83\x85\x03\x12\x15a\x10\xF4W_\x80\xFD[\x825a\x10\xFF\x81a\x10bV[\x94` \x93\x90\x93\x015\x93PPPV[_` \x82\x84\x03\x12\x15a\x11\x1DW_\x80\xFD[\x815o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\n\xD6W_\x80\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[\x80\x82\x01\x80\x82\x11\x15a\x11|Wa\x11|a\x11<V[\x92\x91PPV[\x80\x82\x02\x81\x15\x82\x82\x04\x84\x14\x17a\x11|Wa\x11|a\x11<V[\x81\x81\x03\x81\x81\x11\x15a\x11|Wa\x11|a\x11<V[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD\xFE\xA2dipfsX\"\x12  \xF3\x80\x11\xF2\x8A\xF5TL\xF1\x17\x8E\xEE\x86\xAAy5!\xC2|\xDF&O\x13\xA6x2\xCA\x81\xCE\xA3\xA3dsolcC\0\x08\x19\x003",
    );
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CommonParameterKey(u8);
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<CommonParameterKey> for u8 {
            #[inline]
            fn stv_to_tokens(
                &self,
            ) -> <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'_> {
                alloy_sol_types::private::SolTypeValue::<
                    alloy::sol_types::sol_data::Uint<8>,
                >::stv_to_tokens(self)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::tokenize(self)
                    .0
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(self, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encoded_size(self)
            }
        }
        #[automatically_derived]
        impl CommonParameterKey {
            /// The Solidity type name.
            pub const NAME: &'static str = stringify!(@ name);
            /// Convert from the underlying value type.
            #[inline]
            pub const fn from(value: u8) -> Self {
                Self(value)
            }
            /// Return the underlying value.
            #[inline]
            pub const fn into(self) -> u8 {
                self.0
            }
            /// Return the single encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode(&self.0)
            }
            /// Return the packed encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode_packed(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode_packed(&self.0)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for CommonParameterKey {
            type RustType = u8;
            type Token<'a> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = Self::NAME;
            const ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                Self::type_check(token).is_ok()
            }
            #[inline]
            fn type_check(token: &Self::Token<'_>) -> alloy_sol_types::Result<()> {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::type_check(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::detokenize(token)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for CommonParameterKey {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::topic_preimage_length(rust)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(rust, out)
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic(rust)
            }
        }
    };
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct RefundDenyReason(u8);
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<RefundDenyReason> for u8 {
            #[inline]
            fn stv_to_tokens(
                &self,
            ) -> <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'_> {
                alloy_sol_types::private::SolTypeValue::<
                    alloy::sol_types::sol_data::Uint<8>,
                >::stv_to_tokens(self)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::tokenize(self)
                    .0
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(self, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encoded_size(self)
            }
        }
        #[automatically_derived]
        impl RefundDenyReason {
            /// The Solidity type name.
            pub const NAME: &'static str = stringify!(@ name);
            /// Convert from the underlying value type.
            #[inline]
            pub const fn from(value: u8) -> Self {
                Self(value)
            }
            /// Return the underlying value.
            #[inline]
            pub const fn into(self) -> u8 {
                self.0
            }
            /// Return the single encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode(&self.0)
            }
            /// Return the packed encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode_packed(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode_packed(&self.0)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for RefundDenyReason {
            type RustType = u8;
            type Token<'a> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = Self::NAME;
            const ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                Self::type_check(token).is_ok()
            }
            #[inline]
            fn type_check(token: &Self::Token<'_>) -> alloy_sol_types::Result<()> {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::type_check(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::detokenize(token)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for RefundDenyReason {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::topic_preimage_length(rust)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(rust, out)
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic(rust)
            }
        }
    };
    /**Event with signature `CommonParameterSet(uint8,uint256)` and selector `0xda79b6b81f905f788560507c685a42d5a8ab209ee26538cbcf3ce3caed601f9b`.
```solidity
event CommonParameterSet(CommonParameterKey indexed parameter, uint256 value);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct CommonParameterSet {
        #[allow(missing_docs)]
        pub parameter: <CommonParameterKey as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub value: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for CommonParameterSet {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                CommonParameterKey,
            );
            const SIGNATURE: &'static str = "CommonParameterSet(uint8,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                218u8,
                121u8,
                182u8,
                184u8,
                31u8,
                144u8,
                95u8,
                120u8,
                133u8,
                96u8,
                80u8,
                124u8,
                104u8,
                90u8,
                66u8,
                213u8,
                168u8,
                171u8,
                32u8,
                158u8,
                226u8,
                101u8,
                56u8,
                203u8,
                207u8,
                60u8,
                227u8,
                202u8,
                237u8,
                96u8,
                31u8,
                155u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    parameter: topics.1,
                    value: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.parameter.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <CommonParameterKey as alloy_sol_types::EventTopic>::encode_topic(
                    &self.parameter,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for CommonParameterSet {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&CommonParameterSet> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &CommonParameterSet) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `ContractAllowedSet(address,bool)` and selector `0xb0918cd965657b8d231f8adba328fa810b6d61d800de9c795d40eb3623498c01`.
```solidity
event ContractAllowedSet(address indexed addr, bool indexed allowed);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct ContractAllowedSet {
        #[allow(missing_docs)]
        pub addr: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub allowed: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for ContractAllowedSet {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            const SIGNATURE: &'static str = "ContractAllowedSet(address,bool)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                176u8,
                145u8,
                140u8,
                217u8,
                101u8,
                101u8,
                123u8,
                141u8,
                35u8,
                31u8,
                138u8,
                219u8,
                163u8,
                40u8,
                250u8,
                129u8,
                11u8,
                109u8,
                97u8,
                216u8,
                0u8,
                222u8,
                156u8,
                121u8,
                93u8,
                64u8,
                235u8,
                54u8,
                35u8,
                73u8,
                140u8,
                1u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    addr: topics.1,
                    allowed: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.addr.clone(), self.allowed.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.addr,
                );
                out[2usize] = <alloy::sol_types::sol_data::Bool as alloy_sol_types::EventTopic>::encode_topic(
                    &self.allowed,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for ContractAllowedSet {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&ContractAllowedSet> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &ContractAllowedSet) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `Deposited(address,uint256)` and selector `0x2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c4`.
```solidity
event Deposited(address sender, uint256 amount);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Deposited {
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Deposited {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "Deposited(address,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                45u8,
                164u8,
                102u8,
                167u8,
                178u8,
                67u8,
                4u8,
                244u8,
                126u8,
                135u8,
                250u8,
                46u8,
                30u8,
                90u8,
                129u8,
                185u8,
                131u8,
                28u8,
                229u8,
                79u8,
                236u8,
                25u8,
                5u8,
                92u8,
                226u8,
                119u8,
                202u8,
                47u8,
                57u8,
                186u8,
                66u8,
                196u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    sender: data.0,
                    amount: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.sender,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Deposited {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Deposited> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Deposited) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `DisallowerSet(address)` and selector `0xc388cec0895ad7ee4635898ec92207ca48d42256d4355f7042efef62c368a979`.
```solidity
event DisallowerSet(address indexed addr);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct DisallowerSet {
        #[allow(missing_docs)]
        pub addr: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for DisallowerSet {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "DisallowerSet(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                195u8,
                136u8,
                206u8,
                192u8,
                137u8,
                90u8,
                215u8,
                238u8,
                70u8,
                53u8,
                137u8,
                142u8,
                201u8,
                34u8,
                7u8,
                202u8,
                72u8,
                212u8,
                34u8,
                86u8,
                212u8,
                53u8,
                95u8,
                112u8,
                66u8,
                239u8,
                239u8,
                98u8,
                195u8,
                104u8,
                169u8,
                121u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { addr: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.addr.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.addr,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for DisallowerSet {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&DisallowerSet> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &DisallowerSet) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `OwnershipTransferred(address,address)` and selector `0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0`.
```solidity
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct OwnershipTransferred {
        #[allow(missing_docs)]
        pub previousOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OwnershipTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OwnershipTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousOwner: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousOwner.clone(),
                    self.newOwner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousOwner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OwnershipTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OwnershipTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &OwnershipTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RefundGasCostsDenied(address,address,uint8,uint256)` and selector `0x2b8ae00e22d9eaf5a92820a22b947c007aee773fa36502ad7a1c9a464ab4932b`.
```solidity
event RefundGasCostsDenied(address indexed refundee, address indexed contractAddress, RefundDenyReason indexed reason, uint256 gas);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RefundGasCostsDenied {
        #[allow(missing_docs)]
        pub refundee: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub contractAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub reason: <RefundDenyReason as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub gas: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RefundGasCostsDenied {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                RefundDenyReason,
            );
            const SIGNATURE: &'static str = "RefundGasCostsDenied(address,address,uint8,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                43u8,
                138u8,
                224u8,
                14u8,
                34u8,
                217u8,
                234u8,
                245u8,
                169u8,
                40u8,
                32u8,
                162u8,
                43u8,
                148u8,
                124u8,
                0u8,
                122u8,
                238u8,
                119u8,
                63u8,
                163u8,
                101u8,
                2u8,
                173u8,
                122u8,
                28u8,
                154u8,
                70u8,
                74u8,
                180u8,
                147u8,
                43u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    refundee: topics.1,
                    contractAddress: topics.2,
                    reason: topics.3,
                    gas: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.gas),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.refundee.clone(),
                    self.contractAddress.clone(),
                    self.reason.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.refundee,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.contractAddress,
                );
                out[3usize] = <RefundDenyReason as alloy_sol_types::EventTopic>::encode_topic(
                    &self.reason,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RefundGasCostsDenied {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RefundGasCostsDenied> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RefundGasCostsDenied) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RefundedGasCosts(address,address,bool,uint256,uint256,uint256)` and selector `0xd0224505f828ccfcbc56ca0590d97442e239a7aa770f712948fd6388356b20de`.
```solidity
event RefundedGasCosts(address indexed refundee, address indexed contractAddress, bool indexed success, uint256 gas, uint256 gasPrice, uint256 amountPaid);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RefundedGasCosts {
        #[allow(missing_docs)]
        pub refundee: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub contractAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub success: bool,
        #[allow(missing_docs)]
        pub gas: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub gasPrice: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub amountPaid: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RefundedGasCosts {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            const SIGNATURE: &'static str = "RefundedGasCosts(address,address,bool,uint256,uint256,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                208u8,
                34u8,
                69u8,
                5u8,
                248u8,
                40u8,
                204u8,
                252u8,
                188u8,
                86u8,
                202u8,
                5u8,
                144u8,
                217u8,
                116u8,
                66u8,
                226u8,
                57u8,
                167u8,
                170u8,
                119u8,
                15u8,
                113u8,
                41u8,
                72u8,
                253u8,
                99u8,
                136u8,
                53u8,
                107u8,
                32u8,
                222u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    refundee: topics.1,
                    contractAddress: topics.2,
                    success: topics.3,
                    gas: data.0,
                    gasPrice: data.1,
                    amountPaid: data.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.gas),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.gasPrice),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amountPaid),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.refundee.clone(),
                    self.contractAddress.clone(),
                    self.success.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.refundee,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.contractAddress,
                );
                out[3usize] = <alloy::sol_types::sol_data::Bool as alloy_sol_types::EventTopic>::encode_topic(
                    &self.success,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RefundedGasCosts {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RefundedGasCosts> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RefundedGasCosts) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RefundeeAllowedSet(address,bool)` and selector `0xf544cca9d5484bfd447775bd759d12d53f1aa7c5f770be82c55070798ff9c63e`.
```solidity
event RefundeeAllowedSet(address indexed addr, bool indexed allowed);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RefundeeAllowedSet {
        #[allow(missing_docs)]
        pub addr: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub allowed: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RefundeeAllowedSet {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            const SIGNATURE: &'static str = "RefundeeAllowedSet(address,bool)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                245u8,
                68u8,
                204u8,
                169u8,
                213u8,
                72u8,
                75u8,
                253u8,
                68u8,
                119u8,
                117u8,
                189u8,
                117u8,
                157u8,
                18u8,
                213u8,
                63u8,
                26u8,
                167u8,
                197u8,
                247u8,
                112u8,
                190u8,
                130u8,
                197u8,
                80u8,
                112u8,
                121u8,
                143u8,
                249u8,
                198u8,
                62u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    addr: topics.1,
                    allowed: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.addr.clone(), self.allowed.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.addr,
                );
                out[2usize] = <alloy::sol_types::sol_data::Bool as alloy_sol_types::EventTopic>::encode_topic(
                    &self.allowed,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RefundeeAllowedSet {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RefundeeAllowedSet> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RefundeeAllowedSet) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `Withdrawn(address,address,uint256)` and selector `0xd1c19fbcd4551a5edfb66d43d2e337c04837afda3482b42bdf569a8fccdae5fb`.
```solidity
event Withdrawn(address initiator, address destination, uint256 amount);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Withdrawn {
        #[allow(missing_docs)]
        pub initiator: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub destination: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Withdrawn {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "Withdrawn(address,address,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                209u8,
                193u8,
                159u8,
                188u8,
                212u8,
                85u8,
                26u8,
                94u8,
                223u8,
                182u8,
                109u8,
                67u8,
                210u8,
                227u8,
                55u8,
                192u8,
                72u8,
                55u8,
                175u8,
                218u8,
                52u8,
                130u8,
                180u8,
                43u8,
                223u8,
                86u8,
                154u8,
                143u8,
                204u8,
                218u8,
                229u8,
                251u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    initiator: data.0,
                    destination: data.1,
                    amount: data.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.initiator,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.destination,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Withdrawn {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Withdrawn> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Withdrawn) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {}
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Function with signature `allowContracts(address[])` and selector `0x25416bc9`.
```solidity
function allowContracts(address[] memory addresses) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct allowContractsCall {
        pub addresses: alloy::sol_types::private::Vec<
            alloy::sol_types::private::Address,
        >,
    }
    ///Container type for the return parameters of the [`allowContracts(address[])`](allowContractsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct allowContractsReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<allowContractsCall> for UnderlyingRustTuple<'_> {
                fn from(value: allowContractsCall) -> Self {
                    (value.addresses,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for allowContractsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { addresses: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<allowContractsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: allowContractsReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for allowContractsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for allowContractsCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = allowContractsReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "allowContracts(address[])";
            const SELECTOR: [u8; 4] = [37u8, 65u8, 107u8, 201u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(&self.addresses),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `allowRefundees(address[])` and selector `0xca101295`.
```solidity
function allowRefundees(address[] memory addresses) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct allowRefundeesCall {
        pub addresses: alloy::sol_types::private::Vec<
            alloy::sol_types::private::Address,
        >,
    }
    ///Container type for the return parameters of the [`allowRefundees(address[])`](allowRefundeesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct allowRefundeesReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<allowRefundeesCall> for UnderlyingRustTuple<'_> {
                fn from(value: allowRefundeesCall) -> Self {
                    (value.addresses,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for allowRefundeesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { addresses: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<allowRefundeesReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: allowRefundeesReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for allowRefundeesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for allowRefundeesCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = allowRefundeesReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "allowRefundees(address[])";
            const SELECTOR: [u8; 4] = [202u8, 16u8, 18u8, 149u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(&self.addresses),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `allowedContracts(address)` and selector `0x51e0e26b`.
```solidity
function allowedContracts(address) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct allowedContractsCall {
        pub _0: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`allowedContracts(address)`](allowedContractsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct allowedContractsReturn {
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<allowedContractsCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: allowedContractsCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for allowedContractsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<allowedContractsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: allowedContractsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for allowedContractsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for allowedContractsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = allowedContractsReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "allowedContracts(address)";
            const SELECTOR: [u8; 4] = [81u8, 224u8, 226u8, 107u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `allowedRefundees(address)` and selector `0xa89d2173`.
```solidity
function allowedRefundees(address) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct allowedRefundeesCall {
        pub _0: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`allowedRefundees(address)`](allowedRefundeesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct allowedRefundeesReturn {
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<allowedRefundeesCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: allowedRefundeesCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for allowedRefundeesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<allowedRefundeesReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: allowedRefundeesReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for allowedRefundeesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for allowedRefundeesCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = allowedRefundeesReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "allowedRefundees(address)";
            const SELECTOR: [u8; 4] = [168u8, 157u8, 33u8, 115u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `commonParams()` and selector `0xd5138948`.
```solidity
function commonParams() external view returns (uint128 maxRefundeeBalance, uint32 extraGasMargin, uint8 calldataCost, uint64 maxGasTip, uint64 maxGasCost, uint32 maxSingleGasUsage);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct commonParamsCall {}
    ///Container type for the return parameters of the [`commonParams()`](commonParamsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct commonParamsReturn {
        pub maxRefundeeBalance: u128,
        pub extraGasMargin: u32,
        pub calldataCost: u8,
        pub maxGasTip: u64,
        pub maxGasCost: u64,
        pub maxSingleGasUsage: u32,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<commonParamsCall> for UnderlyingRustTuple<'_> {
                fn from(value: commonParamsCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for commonParamsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<128>,
                alloy::sol_types::sol_data::Uint<32>,
                alloy::sol_types::sol_data::Uint<8>,
                alloy::sol_types::sol_data::Uint<64>,
                alloy::sol_types::sol_data::Uint<64>,
                alloy::sol_types::sol_data::Uint<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u128, u32, u8, u64, u64, u32);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<commonParamsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: commonParamsReturn) -> Self {
                    (
                        value.maxRefundeeBalance,
                        value.extraGasMargin,
                        value.calldataCost,
                        value.maxGasTip,
                        value.maxGasCost,
                        value.maxSingleGasUsage,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for commonParamsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        maxRefundeeBalance: tuple.0,
                        extraGasMargin: tuple.1,
                        calldataCost: tuple.2,
                        maxGasTip: tuple.3,
                        maxGasCost: tuple.4,
                        maxSingleGasUsage: tuple.5,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for commonParamsCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = commonParamsReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Uint<128>,
                alloy::sol_types::sol_data::Uint<32>,
                alloy::sol_types::sol_data::Uint<8>,
                alloy::sol_types::sol_data::Uint<64>,
                alloy::sol_types::sol_data::Uint<64>,
                alloy::sol_types::sol_data::Uint<32>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "commonParams()";
            const SELECTOR: [u8; 4] = [213u8, 19u8, 137u8, 72u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `disallowContracts(address[])` and selector `0xcd499da3`.
```solidity
function disallowContracts(address[] memory addresses) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct disallowContractsCall {
        pub addresses: alloy::sol_types::private::Vec<
            alloy::sol_types::private::Address,
        >,
    }
    ///Container type for the return parameters of the [`disallowContracts(address[])`](disallowContractsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct disallowContractsReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<disallowContractsCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: disallowContractsCall) -> Self {
                    (value.addresses,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for disallowContractsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { addresses: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<disallowContractsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: disallowContractsReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for disallowContractsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for disallowContractsCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = disallowContractsReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "disallowContracts(address[])";
            const SELECTOR: [u8; 4] = [205u8, 73u8, 157u8, 163u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(&self.addresses),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `disallowRefundees(address[])` and selector `0xe5207453`.
```solidity
function disallowRefundees(address[] memory addresses) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct disallowRefundeesCall {
        pub addresses: alloy::sol_types::private::Vec<
            alloy::sol_types::private::Address,
        >,
    }
    ///Container type for the return parameters of the [`disallowRefundees(address[])`](disallowRefundeesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct disallowRefundeesReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<disallowRefundeesCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: disallowRefundeesCall) -> Self {
                    (value.addresses,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for disallowRefundeesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { addresses: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<disallowRefundeesReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: disallowRefundeesReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for disallowRefundeesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for disallowRefundeesCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = disallowRefundeesReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "disallowRefundees(address[])";
            const SELECTOR: [u8; 4] = [229u8, 32u8, 116u8, 83u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(&self.addresses),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `disallower()` and selector `0xefe12b01`.
```solidity
function disallower() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct disallowerCall {}
    ///Container type for the return parameters of the [`disallower()`](disallowerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct disallowerReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<disallowerCall> for UnderlyingRustTuple<'_> {
                fn from(value: disallowerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for disallowerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<disallowerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: disallowerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for disallowerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for disallowerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = disallowerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "disallower()";
            const SELECTOR: [u8; 4] = [239u8, 225u8, 43u8, 1u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `onGasSpent(address,uint256,uint256)` and selector `0xe3db8a49`.
```solidity
function onGasSpent(address refundee, uint256 gasUsed, uint256 calldataSize) external returns (bool success);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct onGasSpentCall {
        pub refundee: alloy::sol_types::private::Address,
        pub gasUsed: alloy::sol_types::private::primitives::aliases::U256,
        pub calldataSize: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`onGasSpent(address,uint256,uint256)`](onGasSpentCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct onGasSpentReturn {
        pub success: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<onGasSpentCall> for UnderlyingRustTuple<'_> {
                fn from(value: onGasSpentCall) -> Self {
                    (value.refundee, value.gasUsed, value.calldataSize)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for onGasSpentCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        refundee: tuple.0,
                        gasUsed: tuple.1,
                        calldataSize: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<onGasSpentReturn> for UnderlyingRustTuple<'_> {
                fn from(value: onGasSpentReturn) -> Self {
                    (value.success,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for onGasSpentReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { success: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for onGasSpentCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = onGasSpentReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "onGasSpent(address,uint256,uint256)";
            const SELECTOR: [u8; 4] = [227u8, 219u8, 138u8, 73u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.refundee,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.gasUsed),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.calldataSize),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `owner()` and selector `0x8da5cb5b`.
```solidity
function owner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerCall {}
    ///Container type for the return parameters of the [`owner()`](ownerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "owner()";
            const SELECTOR: [u8; 4] = [141u8, 165u8, 203u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `renounceOwnership()` and selector `0x715018a6`.
```solidity
function renounceOwnership() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipCall {}
    ///Container type for the return parameters of the [`renounceOwnership()`](renounceOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceOwnershipCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceOwnership()";
            const SELECTOR: [u8; 4] = [113u8, 80u8, 24u8, 166u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setCalldataCost(uint8)` and selector `0xbffe1780`.
```solidity
function setCalldataCost(uint8 newValue) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setCalldataCostCall {
        pub newValue: u8,
    }
    ///Container type for the return parameters of the [`setCalldataCost(uint8)`](setCalldataCostCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setCalldataCostReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<8>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u8,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setCalldataCostCall> for UnderlyingRustTuple<'_> {
                fn from(value: setCalldataCostCall) -> Self {
                    (value.newValue,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setCalldataCostCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newValue: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setCalldataCostReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setCalldataCostReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setCalldataCostReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setCalldataCostCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<8>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setCalldataCostReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setCalldataCost(uint8)";
            const SELECTOR: [u8; 4] = [191u8, 254u8, 23u8, 128u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::SolType>::tokenize(&self.newValue),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setDisallower(address)` and selector `0xf1e845ca`.
```solidity
function setDisallower(address addr) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setDisallowerCall {
        pub addr: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`setDisallower(address)`](setDisallowerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setDisallowerReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setDisallowerCall> for UnderlyingRustTuple<'_> {
                fn from(value: setDisallowerCall) -> Self {
                    (value.addr,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setDisallowerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { addr: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setDisallowerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setDisallowerReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setDisallowerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setDisallowerCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setDisallowerReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setDisallower(address)";
            const SELECTOR: [u8; 4] = [241u8, 232u8, 69u8, 202u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.addr,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setExtraGasMargin(uint32)` and selector `0x7edddf45`.
```solidity
function setExtraGasMargin(uint32 newValue) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setExtraGasMarginCall {
        pub newValue: u32,
    }
    ///Container type for the return parameters of the [`setExtraGasMargin(uint32)`](setExtraGasMarginCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setExtraGasMarginReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u32,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setExtraGasMarginCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setExtraGasMarginCall) -> Self {
                    (value.newValue,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setExtraGasMarginCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newValue: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setExtraGasMarginReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setExtraGasMarginReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setExtraGasMarginReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setExtraGasMarginCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setExtraGasMarginReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setExtraGasMargin(uint32)";
            const SELECTOR: [u8; 4] = [126u8, 221u8, 223u8, 69u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.newValue),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setMaxGasCost(uint64)` and selector `0x2ccb03f2`.
```solidity
function setMaxGasCost(uint64 newValue) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setMaxGasCostCall {
        pub newValue: u64,
    }
    ///Container type for the return parameters of the [`setMaxGasCost(uint64)`](setMaxGasCostCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setMaxGasCostReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u64,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setMaxGasCostCall> for UnderlyingRustTuple<'_> {
                fn from(value: setMaxGasCostCall) -> Self {
                    (value.newValue,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setMaxGasCostCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newValue: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setMaxGasCostReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setMaxGasCostReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setMaxGasCostReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setMaxGasCostCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setMaxGasCostReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setMaxGasCost(uint64)";
            const SELECTOR: [u8; 4] = [44u8, 203u8, 3u8, 242u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.newValue),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setMaxGasTip(uint64)` and selector `0x86b98895`.
```solidity
function setMaxGasTip(uint64 newValue) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setMaxGasTipCall {
        pub newValue: u64,
    }
    ///Container type for the return parameters of the [`setMaxGasTip(uint64)`](setMaxGasTipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setMaxGasTipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u64,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setMaxGasTipCall> for UnderlyingRustTuple<'_> {
                fn from(value: setMaxGasTipCall) -> Self {
                    (value.newValue,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setMaxGasTipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newValue: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setMaxGasTipReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setMaxGasTipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setMaxGasTipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setMaxGasTipCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setMaxGasTipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setMaxGasTip(uint64)";
            const SELECTOR: [u8; 4] = [134u8, 185u8, 136u8, 149u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.newValue),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setMaxRefundeeBalance(uint128)` and selector `0xf52128eb`.
```solidity
function setMaxRefundeeBalance(uint128 newValue) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setMaxRefundeeBalanceCall {
        pub newValue: u128,
    }
    ///Container type for the return parameters of the [`setMaxRefundeeBalance(uint128)`](setMaxRefundeeBalanceCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setMaxRefundeeBalanceReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<128>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u128,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setMaxRefundeeBalanceCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setMaxRefundeeBalanceCall) -> Self {
                    (value.newValue,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setMaxRefundeeBalanceCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newValue: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setMaxRefundeeBalanceReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setMaxRefundeeBalanceReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setMaxRefundeeBalanceReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setMaxRefundeeBalanceCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<128>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setMaxRefundeeBalanceReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setMaxRefundeeBalance(uint128)";
            const SELECTOR: [u8; 4] = [245u8, 33u8, 40u8, 235u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        128,
                    > as alloy_sol_types::SolType>::tokenize(&self.newValue),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setMaxSingleGasUsage(uint32)` and selector `0x500de431`.
```solidity
function setMaxSingleGasUsage(uint32 newValue) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setMaxSingleGasUsageCall {
        pub newValue: u32,
    }
    ///Container type for the return parameters of the [`setMaxSingleGasUsage(uint32)`](setMaxSingleGasUsageCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setMaxSingleGasUsageReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u32,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setMaxSingleGasUsageCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setMaxSingleGasUsageCall) -> Self {
                    (value.newValue,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setMaxSingleGasUsageCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newValue: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setMaxSingleGasUsageReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setMaxSingleGasUsageReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setMaxSingleGasUsageReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setMaxSingleGasUsageCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setMaxSingleGasUsageReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setMaxSingleGasUsage(uint32)";
            const SELECTOR: [u8; 4] = [80u8, 13u8, 228u8, 49u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.newValue),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferOwnership(address)` and selector `0xf2fde38b`.
```solidity
function transferOwnership(address newOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipCall {
        pub newOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferOwnership(address)`](transferOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipCall) -> Self {
                    (value.newOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferOwnershipCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferOwnership(address)";
            const SELECTOR: [u8; 4] = [242u8, 253u8, 227u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newOwner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `withdraw(address,uint256)` and selector `0xf3fef3a3`.
```solidity
function withdraw(address destination, uint256 amount) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct withdrawCall {
        pub destination: alloy::sol_types::private::Address,
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`withdraw(address,uint256)`](withdrawCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct withdrawReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<withdrawCall> for UnderlyingRustTuple<'_> {
                fn from(value: withdrawCall) -> Self {
                    (value.destination, value.amount)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for withdrawCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        destination: tuple.0,
                        amount: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<withdrawReturn> for UnderlyingRustTuple<'_> {
                fn from(value: withdrawReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for withdrawReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for withdrawCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = withdrawReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "withdraw(address,uint256)";
            const SELECTOR: [u8; 4] = [243u8, 254u8, 243u8, 163u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.destination,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`GasRefunder`](self) function calls.
    pub enum GasRefunderCalls {
        allowContracts(allowContractsCall),
        allowRefundees(allowRefundeesCall),
        allowedContracts(allowedContractsCall),
        allowedRefundees(allowedRefundeesCall),
        commonParams(commonParamsCall),
        disallowContracts(disallowContractsCall),
        disallowRefundees(disallowRefundeesCall),
        disallower(disallowerCall),
        onGasSpent(onGasSpentCall),
        owner(ownerCall),
        renounceOwnership(renounceOwnershipCall),
        setCalldataCost(setCalldataCostCall),
        setDisallower(setDisallowerCall),
        setExtraGasMargin(setExtraGasMarginCall),
        setMaxGasCost(setMaxGasCostCall),
        setMaxGasTip(setMaxGasTipCall),
        setMaxRefundeeBalance(setMaxRefundeeBalanceCall),
        setMaxSingleGasUsage(setMaxSingleGasUsageCall),
        transferOwnership(transferOwnershipCall),
        withdraw(withdrawCall),
    }
    #[automatically_derived]
    impl GasRefunderCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [37u8, 65u8, 107u8, 201u8],
            [44u8, 203u8, 3u8, 242u8],
            [80u8, 13u8, 228u8, 49u8],
            [81u8, 224u8, 226u8, 107u8],
            [113u8, 80u8, 24u8, 166u8],
            [126u8, 221u8, 223u8, 69u8],
            [134u8, 185u8, 136u8, 149u8],
            [141u8, 165u8, 203u8, 91u8],
            [168u8, 157u8, 33u8, 115u8],
            [191u8, 254u8, 23u8, 128u8],
            [202u8, 16u8, 18u8, 149u8],
            [205u8, 73u8, 157u8, 163u8],
            [213u8, 19u8, 137u8, 72u8],
            [227u8, 219u8, 138u8, 73u8],
            [229u8, 32u8, 116u8, 83u8],
            [239u8, 225u8, 43u8, 1u8],
            [241u8, 232u8, 69u8, 202u8],
            [242u8, 253u8, 227u8, 139u8],
            [243u8, 254u8, 243u8, 163u8],
            [245u8, 33u8, 40u8, 235u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for GasRefunderCalls {
        const NAME: &'static str = "GasRefunderCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 20usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::allowContracts(_) => {
                    <allowContractsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::allowRefundees(_) => {
                    <allowRefundeesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::allowedContracts(_) => {
                    <allowedContractsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::allowedRefundees(_) => {
                    <allowedRefundeesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::commonParams(_) => {
                    <commonParamsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::disallowContracts(_) => {
                    <disallowContractsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::disallowRefundees(_) => {
                    <disallowRefundeesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::disallower(_) => {
                    <disallowerCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::onGasSpent(_) => {
                    <onGasSpentCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::owner(_) => <ownerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::renounceOwnership(_) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setCalldataCost(_) => {
                    <setCalldataCostCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setDisallower(_) => {
                    <setDisallowerCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setExtraGasMargin(_) => {
                    <setExtraGasMarginCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setMaxGasCost(_) => {
                    <setMaxGasCostCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setMaxGasTip(_) => {
                    <setMaxGasTipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setMaxRefundeeBalance(_) => {
                    <setMaxRefundeeBalanceCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setMaxSingleGasUsage(_) => {
                    <setMaxSingleGasUsageCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferOwnership(_) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::withdraw(_) => <withdrawCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<GasRefunderCalls>] = &[
                {
                    fn allowContracts(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<GasRefunderCalls> {
                        <allowContractsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(GasRefunderCalls::allowContracts)
                    }
                    allowContracts
                },
                {
                    fn setMaxGasCost(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<GasRefunderCalls> {
                        <setMaxGasCostCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(GasRefunderCalls::setMaxGasCost)
                    }
                    setMaxGasCost
                },
                {
                    fn setMaxSingleGasUsage(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<GasRefunderCalls> {
                        <setMaxSingleGasUsageCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(GasRefunderCalls::setMaxSingleGasUsage)
                    }
                    setMaxSingleGasUsage
                },
                {
                    fn allowedContracts(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<GasRefunderCalls> {
                        <allowedContractsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(GasRefunderCalls::allowedContracts)
                    }
                    allowedContracts
                },
                {
                    fn renounceOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<GasRefunderCalls> {
                        <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(GasRefunderCalls::renounceOwnership)
                    }
                    renounceOwnership
                },
                {
                    fn setExtraGasMargin(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<GasRefunderCalls> {
                        <setExtraGasMarginCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(GasRefunderCalls::setExtraGasMargin)
                    }
                    setExtraGasMargin
                },
                {
                    fn setMaxGasTip(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<GasRefunderCalls> {
                        <setMaxGasTipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(GasRefunderCalls::setMaxGasTip)
                    }
                    setMaxGasTip
                },
                {
                    fn owner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<GasRefunderCalls> {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(GasRefunderCalls::owner)
                    }
                    owner
                },
                {
                    fn allowedRefundees(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<GasRefunderCalls> {
                        <allowedRefundeesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(GasRefunderCalls::allowedRefundees)
                    }
                    allowedRefundees
                },
                {
                    fn setCalldataCost(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<GasRefunderCalls> {
                        <setCalldataCostCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(GasRefunderCalls::setCalldataCost)
                    }
                    setCalldataCost
                },
                {
                    fn allowRefundees(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<GasRefunderCalls> {
                        <allowRefundeesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(GasRefunderCalls::allowRefundees)
                    }
                    allowRefundees
                },
                {
                    fn disallowContracts(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<GasRefunderCalls> {
                        <disallowContractsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(GasRefunderCalls::disallowContracts)
                    }
                    disallowContracts
                },
                {
                    fn commonParams(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<GasRefunderCalls> {
                        <commonParamsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(GasRefunderCalls::commonParams)
                    }
                    commonParams
                },
                {
                    fn onGasSpent(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<GasRefunderCalls> {
                        <onGasSpentCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(GasRefunderCalls::onGasSpent)
                    }
                    onGasSpent
                },
                {
                    fn disallowRefundees(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<GasRefunderCalls> {
                        <disallowRefundeesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(GasRefunderCalls::disallowRefundees)
                    }
                    disallowRefundees
                },
                {
                    fn disallower(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<GasRefunderCalls> {
                        <disallowerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(GasRefunderCalls::disallower)
                    }
                    disallower
                },
                {
                    fn setDisallower(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<GasRefunderCalls> {
                        <setDisallowerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(GasRefunderCalls::setDisallower)
                    }
                    setDisallower
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<GasRefunderCalls> {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(GasRefunderCalls::transferOwnership)
                    }
                    transferOwnership
                },
                {
                    fn withdraw(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<GasRefunderCalls> {
                        <withdrawCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(GasRefunderCalls::withdraw)
                    }
                    withdraw
                },
                {
                    fn setMaxRefundeeBalance(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<GasRefunderCalls> {
                        <setMaxRefundeeBalanceCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(GasRefunderCalls::setMaxRefundeeBalance)
                    }
                    setMaxRefundeeBalance
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::allowContracts(inner) => {
                    <allowContractsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::allowRefundees(inner) => {
                    <allowRefundeesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::allowedContracts(inner) => {
                    <allowedContractsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::allowedRefundees(inner) => {
                    <allowedRefundeesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::commonParams(inner) => {
                    <commonParamsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::disallowContracts(inner) => {
                    <disallowContractsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::disallowRefundees(inner) => {
                    <disallowRefundeesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::disallower(inner) => {
                    <disallowerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::onGasSpent(inner) => {
                    <onGasSpentCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setCalldataCost(inner) => {
                    <setCalldataCostCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setDisallower(inner) => {
                    <setDisallowerCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setExtraGasMargin(inner) => {
                    <setExtraGasMarginCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setMaxGasCost(inner) => {
                    <setMaxGasCostCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setMaxGasTip(inner) => {
                    <setMaxGasTipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setMaxRefundeeBalance(inner) => {
                    <setMaxRefundeeBalanceCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setMaxSingleGasUsage(inner) => {
                    <setMaxSingleGasUsageCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::withdraw(inner) => {
                    <withdrawCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::allowContracts(inner) => {
                    <allowContractsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::allowRefundees(inner) => {
                    <allowRefundeesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::allowedContracts(inner) => {
                    <allowedContractsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::allowedRefundees(inner) => {
                    <allowedRefundeesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::commonParams(inner) => {
                    <commonParamsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::disallowContracts(inner) => {
                    <disallowContractsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::disallowRefundees(inner) => {
                    <disallowRefundeesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::disallower(inner) => {
                    <disallowerCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::onGasSpent(inner) => {
                    <onGasSpentCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setCalldataCost(inner) => {
                    <setCalldataCostCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setDisallower(inner) => {
                    <setDisallowerCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setExtraGasMargin(inner) => {
                    <setExtraGasMarginCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setMaxGasCost(inner) => {
                    <setMaxGasCostCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setMaxGasTip(inner) => {
                    <setMaxGasTipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setMaxRefundeeBalance(inner) => {
                    <setMaxRefundeeBalanceCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setMaxSingleGasUsage(inner) => {
                    <setMaxSingleGasUsageCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::withdraw(inner) => {
                    <withdrawCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`GasRefunder`](self) events.
    pub enum GasRefunderEvents {
        CommonParameterSet(CommonParameterSet),
        ContractAllowedSet(ContractAllowedSet),
        Deposited(Deposited),
        DisallowerSet(DisallowerSet),
        OwnershipTransferred(OwnershipTransferred),
        RefundGasCostsDenied(RefundGasCostsDenied),
        RefundedGasCosts(RefundedGasCosts),
        RefundeeAllowedSet(RefundeeAllowedSet),
        Withdrawn(Withdrawn),
    }
    #[automatically_derived]
    impl GasRefunderEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                43u8,
                138u8,
                224u8,
                14u8,
                34u8,
                217u8,
                234u8,
                245u8,
                169u8,
                40u8,
                32u8,
                162u8,
                43u8,
                148u8,
                124u8,
                0u8,
                122u8,
                238u8,
                119u8,
                63u8,
                163u8,
                101u8,
                2u8,
                173u8,
                122u8,
                28u8,
                154u8,
                70u8,
                74u8,
                180u8,
                147u8,
                43u8,
            ],
            [
                45u8,
                164u8,
                102u8,
                167u8,
                178u8,
                67u8,
                4u8,
                244u8,
                126u8,
                135u8,
                250u8,
                46u8,
                30u8,
                90u8,
                129u8,
                185u8,
                131u8,
                28u8,
                229u8,
                79u8,
                236u8,
                25u8,
                5u8,
                92u8,
                226u8,
                119u8,
                202u8,
                47u8,
                57u8,
                186u8,
                66u8,
                196u8,
            ],
            [
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ],
            [
                176u8,
                145u8,
                140u8,
                217u8,
                101u8,
                101u8,
                123u8,
                141u8,
                35u8,
                31u8,
                138u8,
                219u8,
                163u8,
                40u8,
                250u8,
                129u8,
                11u8,
                109u8,
                97u8,
                216u8,
                0u8,
                222u8,
                156u8,
                121u8,
                93u8,
                64u8,
                235u8,
                54u8,
                35u8,
                73u8,
                140u8,
                1u8,
            ],
            [
                195u8,
                136u8,
                206u8,
                192u8,
                137u8,
                90u8,
                215u8,
                238u8,
                70u8,
                53u8,
                137u8,
                142u8,
                201u8,
                34u8,
                7u8,
                202u8,
                72u8,
                212u8,
                34u8,
                86u8,
                212u8,
                53u8,
                95u8,
                112u8,
                66u8,
                239u8,
                239u8,
                98u8,
                195u8,
                104u8,
                169u8,
                121u8,
            ],
            [
                208u8,
                34u8,
                69u8,
                5u8,
                248u8,
                40u8,
                204u8,
                252u8,
                188u8,
                86u8,
                202u8,
                5u8,
                144u8,
                217u8,
                116u8,
                66u8,
                226u8,
                57u8,
                167u8,
                170u8,
                119u8,
                15u8,
                113u8,
                41u8,
                72u8,
                253u8,
                99u8,
                136u8,
                53u8,
                107u8,
                32u8,
                222u8,
            ],
            [
                209u8,
                193u8,
                159u8,
                188u8,
                212u8,
                85u8,
                26u8,
                94u8,
                223u8,
                182u8,
                109u8,
                67u8,
                210u8,
                227u8,
                55u8,
                192u8,
                72u8,
                55u8,
                175u8,
                218u8,
                52u8,
                130u8,
                180u8,
                43u8,
                223u8,
                86u8,
                154u8,
                143u8,
                204u8,
                218u8,
                229u8,
                251u8,
            ],
            [
                218u8,
                121u8,
                182u8,
                184u8,
                31u8,
                144u8,
                95u8,
                120u8,
                133u8,
                96u8,
                80u8,
                124u8,
                104u8,
                90u8,
                66u8,
                213u8,
                168u8,
                171u8,
                32u8,
                158u8,
                226u8,
                101u8,
                56u8,
                203u8,
                207u8,
                60u8,
                227u8,
                202u8,
                237u8,
                96u8,
                31u8,
                155u8,
            ],
            [
                245u8,
                68u8,
                204u8,
                169u8,
                213u8,
                72u8,
                75u8,
                253u8,
                68u8,
                119u8,
                117u8,
                189u8,
                117u8,
                157u8,
                18u8,
                213u8,
                63u8,
                26u8,
                167u8,
                197u8,
                247u8,
                112u8,
                190u8,
                130u8,
                197u8,
                80u8,
                112u8,
                121u8,
                143u8,
                249u8,
                198u8,
                62u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for GasRefunderEvents {
        const NAME: &'static str = "GasRefunderEvents";
        const COUNT: usize = 9usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <CommonParameterSet as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <CommonParameterSet as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::CommonParameterSet)
                }
                Some(
                    <ContractAllowedSet as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <ContractAllowedSet as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::ContractAllowedSet)
                }
                Some(<Deposited as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Deposited as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::Deposited)
                }
                Some(<DisallowerSet as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <DisallowerSet as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::DisallowerSet)
                }
                Some(
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::OwnershipTransferred)
                }
                Some(
                    <RefundGasCostsDenied as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <RefundGasCostsDenied as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RefundGasCostsDenied)
                }
                Some(<RefundedGasCosts as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RefundedGasCosts as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RefundedGasCosts)
                }
                Some(
                    <RefundeeAllowedSet as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <RefundeeAllowedSet as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RefundeeAllowedSet)
                }
                Some(<Withdrawn as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Withdrawn as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::Withdrawn)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for GasRefunderEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::CommonParameterSet(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::ContractAllowedSet(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Deposited(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::DisallowerSet(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RefundGasCostsDenied(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RefundedGasCosts(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RefundeeAllowedSet(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Withdrawn(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::CommonParameterSet(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::ContractAllowedSet(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Deposited(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::DisallowerSet(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RefundGasCostsDenied(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RefundedGasCosts(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RefundeeAllowedSet(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Withdrawn(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`GasRefunder`](self) contract instance.

See the [wrapper's documentation](`GasRefunderInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> GasRefunderInstance<T, P, N> {
        GasRefunderInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<GasRefunderInstance<T, P, N>>,
    > {
        GasRefunderInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        GasRefunderInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`GasRefunder`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`GasRefunder`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct GasRefunderInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for GasRefunderInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("GasRefunderInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > GasRefunderInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`GasRefunder`](self) contract instance.

See the [wrapper's documentation](`GasRefunderInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<GasRefunderInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> GasRefunderInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> GasRefunderInstance<T, P, N> {
            GasRefunderInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > GasRefunderInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`allowContracts`] function.
        pub fn allowContracts(
            &self,
            addresses: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
        ) -> alloy_contract::SolCallBuilder<T, &P, allowContractsCall, N> {
            self.call_builder(&allowContractsCall { addresses })
        }
        ///Creates a new call builder for the [`allowRefundees`] function.
        pub fn allowRefundees(
            &self,
            addresses: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
        ) -> alloy_contract::SolCallBuilder<T, &P, allowRefundeesCall, N> {
            self.call_builder(&allowRefundeesCall { addresses })
        }
        ///Creates a new call builder for the [`allowedContracts`] function.
        pub fn allowedContracts(
            &self,
            _0: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, allowedContractsCall, N> {
            self.call_builder(&allowedContractsCall { _0 })
        }
        ///Creates a new call builder for the [`allowedRefundees`] function.
        pub fn allowedRefundees(
            &self,
            _0: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, allowedRefundeesCall, N> {
            self.call_builder(&allowedRefundeesCall { _0 })
        }
        ///Creates a new call builder for the [`commonParams`] function.
        pub fn commonParams(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, commonParamsCall, N> {
            self.call_builder(&commonParamsCall {})
        }
        ///Creates a new call builder for the [`disallowContracts`] function.
        pub fn disallowContracts(
            &self,
            addresses: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
        ) -> alloy_contract::SolCallBuilder<T, &P, disallowContractsCall, N> {
            self.call_builder(&disallowContractsCall { addresses })
        }
        ///Creates a new call builder for the [`disallowRefundees`] function.
        pub fn disallowRefundees(
            &self,
            addresses: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
        ) -> alloy_contract::SolCallBuilder<T, &P, disallowRefundeesCall, N> {
            self.call_builder(&disallowRefundeesCall { addresses })
        }
        ///Creates a new call builder for the [`disallower`] function.
        pub fn disallower(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, disallowerCall, N> {
            self.call_builder(&disallowerCall {})
        }
        ///Creates a new call builder for the [`onGasSpent`] function.
        pub fn onGasSpent(
            &self,
            refundee: alloy::sol_types::private::Address,
            gasUsed: alloy::sol_types::private::primitives::aliases::U256,
            calldataSize: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, onGasSpentCall, N> {
            self.call_builder(
                &onGasSpentCall {
                    refundee,
                    gasUsed,
                    calldataSize,
                },
            )
        }
        ///Creates a new call builder for the [`owner`] function.
        pub fn owner(&self) -> alloy_contract::SolCallBuilder<T, &P, ownerCall, N> {
            self.call_builder(&ownerCall {})
        }
        ///Creates a new call builder for the [`renounceOwnership`] function.
        pub fn renounceOwnership(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, renounceOwnershipCall, N> {
            self.call_builder(&renounceOwnershipCall {})
        }
        ///Creates a new call builder for the [`setCalldataCost`] function.
        pub fn setCalldataCost(
            &self,
            newValue: u8,
        ) -> alloy_contract::SolCallBuilder<T, &P, setCalldataCostCall, N> {
            self.call_builder(&setCalldataCostCall { newValue })
        }
        ///Creates a new call builder for the [`setDisallower`] function.
        pub fn setDisallower(
            &self,
            addr: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, setDisallowerCall, N> {
            self.call_builder(&setDisallowerCall { addr })
        }
        ///Creates a new call builder for the [`setExtraGasMargin`] function.
        pub fn setExtraGasMargin(
            &self,
            newValue: u32,
        ) -> alloy_contract::SolCallBuilder<T, &P, setExtraGasMarginCall, N> {
            self.call_builder(&setExtraGasMarginCall { newValue })
        }
        ///Creates a new call builder for the [`setMaxGasCost`] function.
        pub fn setMaxGasCost(
            &self,
            newValue: u64,
        ) -> alloy_contract::SolCallBuilder<T, &P, setMaxGasCostCall, N> {
            self.call_builder(&setMaxGasCostCall { newValue })
        }
        ///Creates a new call builder for the [`setMaxGasTip`] function.
        pub fn setMaxGasTip(
            &self,
            newValue: u64,
        ) -> alloy_contract::SolCallBuilder<T, &P, setMaxGasTipCall, N> {
            self.call_builder(&setMaxGasTipCall { newValue })
        }
        ///Creates a new call builder for the [`setMaxRefundeeBalance`] function.
        pub fn setMaxRefundeeBalance(
            &self,
            newValue: u128,
        ) -> alloy_contract::SolCallBuilder<T, &P, setMaxRefundeeBalanceCall, N> {
            self.call_builder(
                &setMaxRefundeeBalanceCall {
                    newValue,
                },
            )
        }
        ///Creates a new call builder for the [`setMaxSingleGasUsage`] function.
        pub fn setMaxSingleGasUsage(
            &self,
            newValue: u32,
        ) -> alloy_contract::SolCallBuilder<T, &P, setMaxSingleGasUsageCall, N> {
            self.call_builder(
                &setMaxSingleGasUsageCall {
                    newValue,
                },
            )
        }
        ///Creates a new call builder for the [`transferOwnership`] function.
        pub fn transferOwnership(
            &self,
            newOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferOwnershipCall, N> {
            self.call_builder(&transferOwnershipCall { newOwner })
        }
        ///Creates a new call builder for the [`withdraw`] function.
        pub fn withdraw(
            &self,
            destination: alloy::sol_types::private::Address,
            amount: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, withdrawCall, N> {
            self.call_builder(
                &withdrawCall {
                    destination,
                    amount,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > GasRefunderInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`CommonParameterSet`] event.
        pub fn CommonParameterSet_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, CommonParameterSet, N> {
            self.event_filter::<CommonParameterSet>()
        }
        ///Creates a new event filter for the [`ContractAllowedSet`] event.
        pub fn ContractAllowedSet_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, ContractAllowedSet, N> {
            self.event_filter::<ContractAllowedSet>()
        }
        ///Creates a new event filter for the [`Deposited`] event.
        pub fn Deposited_filter(&self) -> alloy_contract::Event<T, &P, Deposited, N> {
            self.event_filter::<Deposited>()
        }
        ///Creates a new event filter for the [`DisallowerSet`] event.
        pub fn DisallowerSet_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, DisallowerSet, N> {
            self.event_filter::<DisallowerSet>()
        }
        ///Creates a new event filter for the [`OwnershipTransferred`] event.
        pub fn OwnershipTransferred_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, OwnershipTransferred, N> {
            self.event_filter::<OwnershipTransferred>()
        }
        ///Creates a new event filter for the [`RefundGasCostsDenied`] event.
        pub fn RefundGasCostsDenied_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RefundGasCostsDenied, N> {
            self.event_filter::<RefundGasCostsDenied>()
        }
        ///Creates a new event filter for the [`RefundedGasCosts`] event.
        pub fn RefundedGasCosts_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RefundedGasCosts, N> {
            self.event_filter::<RefundedGasCosts>()
        }
        ///Creates a new event filter for the [`RefundeeAllowedSet`] event.
        pub fn RefundeeAllowedSet_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RefundeeAllowedSet, N> {
            self.event_filter::<RefundeeAllowedSet>()
        }
        ///Creates a new event filter for the [`Withdrawn`] event.
        pub fn Withdrawn_filter(&self) -> alloy_contract::Event<T, &P, Withdrawn, N> {
            self.event_filter::<Withdrawn>()
        }
    }
}
