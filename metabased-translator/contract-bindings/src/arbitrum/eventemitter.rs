/**

Generated by the following Solidity interface...
```solidity
interface EventEmitter {
    function emitEvent1(bytes32 signatureHash, bytes32 nonIndexed) external;
    function emitEvent2(bytes32 signatureHash, bytes32 indexed1, bytes32 nonIndexed) external;
    function emitEvent3(bytes32 signatureHash, bytes32 indexed1, bytes32 indexed2, bytes32 nonIndexed) external;
    function emitEvent4(bytes32 signatureHash, bytes32 indexed1, bytes32 indexed2, bytes32 indexed3, bytes32 nonIndexed) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "emitEvent1",
    "inputs": [
      {
        "name": "signatureHash",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "nonIndexed",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "emitEvent2",
    "inputs": [
      {
        "name": "signatureHash",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "indexed1",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "nonIndexed",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "emitEvent3",
    "inputs": [
      {
        "name": "signatureHash",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "indexed1",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "indexed2",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "nonIndexed",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "emitEvent4",
    "inputs": [
      {
        "name": "signatureHash",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "indexed1",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "indexed2",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "indexed3",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "nonIndexed",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod EventEmitter {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052348015600e575f80fd5b506102d08061001c5f395ff3fe608060405234801561000f575f80fd5b506004361061004a575f3560e01c80633404fee91461004e5780638e347a3a1461006a578063aa7e010a14610086578063addf235e146100a2575b5f80fd5b61006860048036038101906100639190610131565b6100be565b005b610084600480360381019061007f9190610195565b6100ce565b005b6100a0600480360381019061009b919061020c565b6100e0565b005b6100bc60048036038101906100b7919061025c565b6100ee565b005b805f5281838560205fa350505050565b805f528183858760205fa45050505050565b805f52818360205fa2505050565b805f528160205fa15050565b5f80fd5b5f819050919050565b610110816100fe565b811461011a575f80fd5b50565b5f8135905061012b81610107565b92915050565b5f805f8060808587031215610149576101486100fa565b5b5f6101568782880161011d565b94505060206101678782880161011d565b93505060406101788782880161011d565b92505060606101898782880161011d565b91505092959194509250565b5f805f805f60a086880312156101ae576101ad6100fa565b5b5f6101bb8882890161011d565b95505060206101cc8882890161011d565b94505060406101dd8882890161011d565b93505060606101ee8882890161011d565b92505060806101ff8882890161011d565b9150509295509295909350565b5f805f60608486031215610223576102226100fa565b5b5f6102308682870161011d565b93505060206102418682870161011d565b92505060406102528682870161011d565b9150509250925092565b5f8060408385031215610272576102716100fa565b5b5f61027f8582860161011d565b92505060206102908582860161011d565b915050925092905056fea264697066735822122058f64c6914adfe47f06739da018631a71859f9af0f3fc6cb5d1df6a4120f178364736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15`\x0EW_\x80\xFD[Pa\x02\xD0\x80a\0\x1C_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\0JW_5`\xE0\x1C\x80c4\x04\xFE\xE9\x14a\0NW\x80c\x8E4z:\x14a\0jW\x80c\xAA~\x01\n\x14a\0\x86W\x80c\xAD\xDF#^\x14a\0\xA2W[_\x80\xFD[a\0h`\x04\x806\x03\x81\x01\x90a\0c\x91\x90a\x011V[a\0\xBEV[\0[a\0\x84`\x04\x806\x03\x81\x01\x90a\0\x7F\x91\x90a\x01\x95V[a\0\xCEV[\0[a\0\xA0`\x04\x806\x03\x81\x01\x90a\0\x9B\x91\x90a\x02\x0CV[a\0\xE0V[\0[a\0\xBC`\x04\x806\x03\x81\x01\x90a\0\xB7\x91\x90a\x02\\V[a\0\xEEV[\0[\x80_R\x81\x83\x85` _\xA3PPPPV[\x80_R\x81\x83\x85\x87` _\xA4PPPPPV[\x80_R\x81\x83` _\xA2PPPV[\x80_R\x81` _\xA1PPV[_\x80\xFD[_\x81\x90P\x91\x90PV[a\x01\x10\x81a\0\xFEV[\x81\x14a\x01\x1AW_\x80\xFD[PV[_\x815\x90Pa\x01+\x81a\x01\x07V[\x92\x91PPV[_\x80_\x80`\x80\x85\x87\x03\x12\x15a\x01IWa\x01Ha\0\xFAV[[_a\x01V\x87\x82\x88\x01a\x01\x1DV[\x94PP` a\x01g\x87\x82\x88\x01a\x01\x1DV[\x93PP`@a\x01x\x87\x82\x88\x01a\x01\x1DV[\x92PP``a\x01\x89\x87\x82\x88\x01a\x01\x1DV[\x91PP\x92\x95\x91\x94P\x92PV[_\x80_\x80_`\xA0\x86\x88\x03\x12\x15a\x01\xAEWa\x01\xADa\0\xFAV[[_a\x01\xBB\x88\x82\x89\x01a\x01\x1DV[\x95PP` a\x01\xCC\x88\x82\x89\x01a\x01\x1DV[\x94PP`@a\x01\xDD\x88\x82\x89\x01a\x01\x1DV[\x93PP``a\x01\xEE\x88\x82\x89\x01a\x01\x1DV[\x92PP`\x80a\x01\xFF\x88\x82\x89\x01a\x01\x1DV[\x91PP\x92\x95P\x92\x95\x90\x93PV[_\x80_``\x84\x86\x03\x12\x15a\x02#Wa\x02\"a\0\xFAV[[_a\x020\x86\x82\x87\x01a\x01\x1DV[\x93PP` a\x02A\x86\x82\x87\x01a\x01\x1DV[\x92PP`@a\x02R\x86\x82\x87\x01a\x01\x1DV[\x91PP\x92P\x92P\x92V[_\x80`@\x83\x85\x03\x12\x15a\x02rWa\x02qa\0\xFAV[[_a\x02\x7F\x85\x82\x86\x01a\x01\x1DV[\x92PP` a\x02\x90\x85\x82\x86\x01a\x01\x1DV[\x91PP\x92P\x92\x90PV\xFE\xA2dipfsX\"\x12 X\xF6Li\x14\xAD\xFEG\xF0g9\xDA\x01\x861\xA7\x18Y\xF9\xAF\x0F?\xC6\xCB]\x1D\xF6\xA4\x12\x0F\x17\x83dsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f80fd5b506004361061004a575f3560e01c80633404fee91461004e5780638e347a3a1461006a578063aa7e010a14610086578063addf235e146100a2575b5f80fd5b61006860048036038101906100639190610131565b6100be565b005b610084600480360381019061007f9190610195565b6100ce565b005b6100a0600480360381019061009b919061020c565b6100e0565b005b6100bc60048036038101906100b7919061025c565b6100ee565b005b805f5281838560205fa350505050565b805f528183858760205fa45050505050565b805f52818360205fa2505050565b805f528160205fa15050565b5f80fd5b5f819050919050565b610110816100fe565b811461011a575f80fd5b50565b5f8135905061012b81610107565b92915050565b5f805f8060808587031215610149576101486100fa565b5b5f6101568782880161011d565b94505060206101678782880161011d565b93505060406101788782880161011d565b92505060606101898782880161011d565b91505092959194509250565b5f805f805f60a086880312156101ae576101ad6100fa565b5b5f6101bb8882890161011d565b95505060206101cc8882890161011d565b94505060406101dd8882890161011d565b93505060606101ee8882890161011d565b92505060806101ff8882890161011d565b9150509295509295909350565b5f805f60608486031215610223576102226100fa565b5b5f6102308682870161011d565b93505060206102418682870161011d565b92505060406102528682870161011d565b9150509250925092565b5f8060408385031215610272576102716100fa565b5b5f61027f8582860161011d565b92505060206102908582860161011d565b915050925092905056fea264697066735822122058f64c6914adfe47f06739da018631a71859f9af0f3fc6cb5d1df6a4120f178364736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\0JW_5`\xE0\x1C\x80c4\x04\xFE\xE9\x14a\0NW\x80c\x8E4z:\x14a\0jW\x80c\xAA~\x01\n\x14a\0\x86W\x80c\xAD\xDF#^\x14a\0\xA2W[_\x80\xFD[a\0h`\x04\x806\x03\x81\x01\x90a\0c\x91\x90a\x011V[a\0\xBEV[\0[a\0\x84`\x04\x806\x03\x81\x01\x90a\0\x7F\x91\x90a\x01\x95V[a\0\xCEV[\0[a\0\xA0`\x04\x806\x03\x81\x01\x90a\0\x9B\x91\x90a\x02\x0CV[a\0\xE0V[\0[a\0\xBC`\x04\x806\x03\x81\x01\x90a\0\xB7\x91\x90a\x02\\V[a\0\xEEV[\0[\x80_R\x81\x83\x85` _\xA3PPPPV[\x80_R\x81\x83\x85\x87` _\xA4PPPPPV[\x80_R\x81\x83` _\xA2PPPV[\x80_R\x81` _\xA1PPV[_\x80\xFD[_\x81\x90P\x91\x90PV[a\x01\x10\x81a\0\xFEV[\x81\x14a\x01\x1AW_\x80\xFD[PV[_\x815\x90Pa\x01+\x81a\x01\x07V[\x92\x91PPV[_\x80_\x80`\x80\x85\x87\x03\x12\x15a\x01IWa\x01Ha\0\xFAV[[_a\x01V\x87\x82\x88\x01a\x01\x1DV[\x94PP` a\x01g\x87\x82\x88\x01a\x01\x1DV[\x93PP`@a\x01x\x87\x82\x88\x01a\x01\x1DV[\x92PP``a\x01\x89\x87\x82\x88\x01a\x01\x1DV[\x91PP\x92\x95\x91\x94P\x92PV[_\x80_\x80_`\xA0\x86\x88\x03\x12\x15a\x01\xAEWa\x01\xADa\0\xFAV[[_a\x01\xBB\x88\x82\x89\x01a\x01\x1DV[\x95PP` a\x01\xCC\x88\x82\x89\x01a\x01\x1DV[\x94PP`@a\x01\xDD\x88\x82\x89\x01a\x01\x1DV[\x93PP``a\x01\xEE\x88\x82\x89\x01a\x01\x1DV[\x92PP`\x80a\x01\xFF\x88\x82\x89\x01a\x01\x1DV[\x91PP\x92\x95P\x92\x95\x90\x93PV[_\x80_``\x84\x86\x03\x12\x15a\x02#Wa\x02\"a\0\xFAV[[_a\x020\x86\x82\x87\x01a\x01\x1DV[\x93PP` a\x02A\x86\x82\x87\x01a\x01\x1DV[\x92PP`@a\x02R\x86\x82\x87\x01a\x01\x1DV[\x91PP\x92P\x92P\x92V[_\x80`@\x83\x85\x03\x12\x15a\x02rWa\x02qa\0\xFAV[[_a\x02\x7F\x85\x82\x86\x01a\x01\x1DV[\x92PP` a\x02\x90\x85\x82\x86\x01a\x01\x1DV[\x91PP\x92P\x92\x90PV\xFE\xA2dipfsX\"\x12 X\xF6Li\x14\xAD\xFEG\xF0g9\xDA\x01\x861\xA7\x18Y\xF9\xAF\x0F?\xC6\xCB]\x1D\xF6\xA4\x12\x0F\x17\x83dsolcC\0\x08\x19\x003",
    );
    /**Function with signature `emitEvent1(bytes32,bytes32)` and selector `0xaddf235e`.
```solidity
function emitEvent1(bytes32 signatureHash, bytes32 nonIndexed) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct emitEvent1Call {
        #[allow(missing_docs)]
        pub signatureHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub nonIndexed: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`emitEvent1(bytes32,bytes32)`](emitEvent1Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct emitEvent1Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<emitEvent1Call> for UnderlyingRustTuple<'_> {
                fn from(value: emitEvent1Call) -> Self {
                    (value.signatureHash, value.nonIndexed)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for emitEvent1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        signatureHash: tuple.0,
                        nonIndexed: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<emitEvent1Return> for UnderlyingRustTuple<'_> {
                fn from(value: emitEvent1Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for emitEvent1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for emitEvent1Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = emitEvent1Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "emitEvent1(bytes32,bytes32)";
            const SELECTOR: [u8; 4] = [173u8, 223u8, 35u8, 94u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.signatureHash),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.nonIndexed),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `emitEvent2(bytes32,bytes32,bytes32)` and selector `0xaa7e010a`.
```solidity
function emitEvent2(bytes32 signatureHash, bytes32 indexed1, bytes32 nonIndexed) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct emitEvent2Call {
        #[allow(missing_docs)]
        pub signatureHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub indexed1: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub nonIndexed: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`emitEvent2(bytes32,bytes32,bytes32)`](emitEvent2Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct emitEvent2Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<emitEvent2Call> for UnderlyingRustTuple<'_> {
                fn from(value: emitEvent2Call) -> Self {
                    (value.signatureHash, value.indexed1, value.nonIndexed)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for emitEvent2Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        signatureHash: tuple.0,
                        indexed1: tuple.1,
                        nonIndexed: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<emitEvent2Return> for UnderlyingRustTuple<'_> {
                fn from(value: emitEvent2Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for emitEvent2Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for emitEvent2Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = emitEvent2Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "emitEvent2(bytes32,bytes32,bytes32)";
            const SELECTOR: [u8; 4] = [170u8, 126u8, 1u8, 10u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.signatureHash),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.indexed1),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.nonIndexed),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `emitEvent3(bytes32,bytes32,bytes32,bytes32)` and selector `0x3404fee9`.
```solidity
function emitEvent3(bytes32 signatureHash, bytes32 indexed1, bytes32 indexed2, bytes32 nonIndexed) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct emitEvent3Call {
        #[allow(missing_docs)]
        pub signatureHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub indexed1: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub indexed2: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub nonIndexed: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`emitEvent3(bytes32,bytes32,bytes32,bytes32)`](emitEvent3Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct emitEvent3Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<emitEvent3Call> for UnderlyingRustTuple<'_> {
                fn from(value: emitEvent3Call) -> Self {
                    (
                        value.signatureHash,
                        value.indexed1,
                        value.indexed2,
                        value.nonIndexed,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for emitEvent3Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        signatureHash: tuple.0,
                        indexed1: tuple.1,
                        indexed2: tuple.2,
                        nonIndexed: tuple.3,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<emitEvent3Return> for UnderlyingRustTuple<'_> {
                fn from(value: emitEvent3Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for emitEvent3Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for emitEvent3Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = emitEvent3Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "emitEvent3(bytes32,bytes32,bytes32,bytes32)";
            const SELECTOR: [u8; 4] = [52u8, 4u8, 254u8, 233u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.signatureHash),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.indexed1),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.indexed2),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.nonIndexed),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `emitEvent4(bytes32,bytes32,bytes32,bytes32,bytes32)` and selector `0x8e347a3a`.
```solidity
function emitEvent4(bytes32 signatureHash, bytes32 indexed1, bytes32 indexed2, bytes32 indexed3, bytes32 nonIndexed) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct emitEvent4Call {
        #[allow(missing_docs)]
        pub signatureHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub indexed1: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub indexed2: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub indexed3: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub nonIndexed: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`emitEvent4(bytes32,bytes32,bytes32,bytes32,bytes32)`](emitEvent4Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct emitEvent4Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<emitEvent4Call> for UnderlyingRustTuple<'_> {
                fn from(value: emitEvent4Call) -> Self {
                    (
                        value.signatureHash,
                        value.indexed1,
                        value.indexed2,
                        value.indexed3,
                        value.nonIndexed,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for emitEvent4Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        signatureHash: tuple.0,
                        indexed1: tuple.1,
                        indexed2: tuple.2,
                        indexed3: tuple.3,
                        nonIndexed: tuple.4,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<emitEvent4Return> for UnderlyingRustTuple<'_> {
                fn from(value: emitEvent4Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for emitEvent4Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for emitEvent4Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = emitEvent4Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "emitEvent4(bytes32,bytes32,bytes32,bytes32,bytes32)";
            const SELECTOR: [u8; 4] = [142u8, 52u8, 122u8, 58u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.signatureHash),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.indexed1),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.indexed2),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.indexed3),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.nonIndexed),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`EventEmitter`](self) function calls.
    pub enum EventEmitterCalls {
        #[allow(missing_docs)]
        emitEvent1(emitEvent1Call),
        #[allow(missing_docs)]
        emitEvent2(emitEvent2Call),
        #[allow(missing_docs)]
        emitEvent3(emitEvent3Call),
        #[allow(missing_docs)]
        emitEvent4(emitEvent4Call),
    }
    #[automatically_derived]
    impl EventEmitterCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [52u8, 4u8, 254u8, 233u8],
            [142u8, 52u8, 122u8, 58u8],
            [170u8, 126u8, 1u8, 10u8],
            [173u8, 223u8, 35u8, 94u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for EventEmitterCalls {
        const NAME: &'static str = "EventEmitterCalls";
        const MIN_DATA_LENGTH: usize = 64usize;
        const COUNT: usize = 4usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::emitEvent1(_) => {
                    <emitEvent1Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::emitEvent2(_) => {
                    <emitEvent2Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::emitEvent3(_) => {
                    <emitEvent3Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::emitEvent4(_) => {
                    <emitEvent4Call as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<EventEmitterCalls>] = &[
                {
                    fn emitEvent3(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EventEmitterCalls> {
                        <emitEvent3Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(EventEmitterCalls::emitEvent3)
                    }
                    emitEvent3
                },
                {
                    fn emitEvent4(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EventEmitterCalls> {
                        <emitEvent4Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(EventEmitterCalls::emitEvent4)
                    }
                    emitEvent4
                },
                {
                    fn emitEvent2(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EventEmitterCalls> {
                        <emitEvent2Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(EventEmitterCalls::emitEvent2)
                    }
                    emitEvent2
                },
                {
                    fn emitEvent1(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EventEmitterCalls> {
                        <emitEvent1Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(EventEmitterCalls::emitEvent1)
                    }
                    emitEvent1
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::emitEvent1(inner) => {
                    <emitEvent1Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::emitEvent2(inner) => {
                    <emitEvent2Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::emitEvent3(inner) => {
                    <emitEvent3Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::emitEvent4(inner) => {
                    <emitEvent4Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::emitEvent1(inner) => {
                    <emitEvent1Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::emitEvent2(inner) => {
                    <emitEvent2Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::emitEvent3(inner) => {
                    <emitEvent3Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::emitEvent4(inner) => {
                    <emitEvent4Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`EventEmitter`](self) contract instance.

See the [wrapper's documentation](`EventEmitterInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> EventEmitterInstance<T, P, N> {
        EventEmitterInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<EventEmitterInstance<T, P, N>>,
    > {
        EventEmitterInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        EventEmitterInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`EventEmitter`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`EventEmitter`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct EventEmitterInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for EventEmitterInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("EventEmitterInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > EventEmitterInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`EventEmitter`](self) contract instance.

See the [wrapper's documentation](`EventEmitterInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<EventEmitterInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> EventEmitterInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> EventEmitterInstance<T, P, N> {
            EventEmitterInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > EventEmitterInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`emitEvent1`] function.
        pub fn emitEvent1(
            &self,
            signatureHash: alloy::sol_types::private::FixedBytes<32>,
            nonIndexed: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, emitEvent1Call, N> {
            self.call_builder(
                &emitEvent1Call {
                    signatureHash,
                    nonIndexed,
                },
            )
        }
        ///Creates a new call builder for the [`emitEvent2`] function.
        pub fn emitEvent2(
            &self,
            signatureHash: alloy::sol_types::private::FixedBytes<32>,
            indexed1: alloy::sol_types::private::FixedBytes<32>,
            nonIndexed: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, emitEvent2Call, N> {
            self.call_builder(
                &emitEvent2Call {
                    signatureHash,
                    indexed1,
                    nonIndexed,
                },
            )
        }
        ///Creates a new call builder for the [`emitEvent3`] function.
        pub fn emitEvent3(
            &self,
            signatureHash: alloy::sol_types::private::FixedBytes<32>,
            indexed1: alloy::sol_types::private::FixedBytes<32>,
            indexed2: alloy::sol_types::private::FixedBytes<32>,
            nonIndexed: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, emitEvent3Call, N> {
            self.call_builder(
                &emitEvent3Call {
                    signatureHash,
                    indexed1,
                    indexed2,
                    nonIndexed,
                },
            )
        }
        ///Creates a new call builder for the [`emitEvent4`] function.
        pub fn emitEvent4(
            &self,
            signatureHash: alloy::sol_types::private::FixedBytes<32>,
            indexed1: alloy::sol_types::private::FixedBytes<32>,
            indexed2: alloy::sol_types::private::FixedBytes<32>,
            indexed3: alloy::sol_types::private::FixedBytes<32>,
            nonIndexed: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, emitEvent4Call, N> {
            self.call_builder(
                &emitEvent4Call {
                    signatureHash,
                    indexed1,
                    indexed2,
                    indexed3,
                    nonIndexed,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > EventEmitterInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
