/**

Generated by the following Solidity interface...
```solidity
interface SlotTracker {
    function getSlotInfo() external view returns (uint256, uint256[] memory, uint256[] memory);
    function sequencingChainBlockNumbers(uint256) external view returns (uint256);
    function setSlotInfo(uint256 _slotNumber, uint256[] memory _sequencingChainBlockNumbers, uint256[] memory _settlementChainBlockNumbers) external;
    function settlementChainBlockNumbers(uint256) external view returns (uint256);
    function slotNumber() external view returns (uint256);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "getSlotInfo",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "",
        "type": "uint256[]",
        "internalType": "uint256[]"
      },
      {
        "name": "",
        "type": "uint256[]",
        "internalType": "uint256[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "sequencingChainBlockNumbers",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "setSlotInfo",
    "inputs": [
      {
        "name": "_slotNumber",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "_sequencingChainBlockNumbers",
        "type": "uint256[]",
        "internalType": "uint256[]"
      },
      {
        "name": "_settlementChainBlockNumbers",
        "type": "uint256[]",
        "internalType": "uint256[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "settlementChainBlockNumbers",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "slotNumber",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod SlotTracker {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052348015600e575f80fd5b506104098061001c5f395ff3fe608060405234801561000f575f80fd5b5060043610610055575f3560e01c806337cda272146100595780634feb0f34146100745780636917f4e014610089578063810054591461009c57806394e247a8146100af575b5f80fd5b6100615f5481565b6040519081526020015b60405180910390f35b6100876100823660046102e6565b6100c6565b005b61006161009736600461034e565b6100f7565b6100616100aa36600461034e565b610116565b6100b7610125565b60405161006b9392919061039f565b5f83905581516100dd9060019060208501906101da565b5080516100f19060029060208401906101da565b50505050565b60028181548110610106575f80fd5b5f91825260209091200154905081565b60018181548110610106575f80fd5b5f6060805f54600160028180548060200260200160405190810160405280929190818152602001828054801561017857602002820191905f5260205f20905b815481526020019060010190808311610164575b50505050509150808054806020026020016040519081016040528092919081815260200182805480156101c857602002820191905f5260205f20905b8154815260200190600101908083116101b4575b50505050509050925092509250909192565b828054828255905f5260205f20908101928215610213579160200282015b828111156102135782518255916020019190600101906101f8565b5061021f929150610223565b5090565b5b8082111561021f575f8155600101610224565b634e487b7160e01b5f52604160045260245ffd5b5f82601f83011261025a575f80fd5b8135602067ffffffffffffffff8083111561027757610277610237565b8260051b604051601f19603f8301168101818110848211171561029c5761029c610237565b60405293845260208187018101949081019250878511156102bb575f80fd5b6020870191505b848210156102db578135835291830191908301906102c2565b979650505050505050565b5f805f606084860312156102f8575f80fd5b83359250602084013567ffffffffffffffff80821115610316575f80fd5b6103228783880161024b565b93506040860135915080821115610337575f80fd5b506103448682870161024b565b9150509250925092565b5f6020828403121561035e575f80fd5b5035919050565b5f815180845260208085019450602084015f5b8381101561039457815187529582019590820190600101610378565b509495945050505050565b838152606060208201525f6103b76060830185610365565b82810360408401526103c98185610365565b969550505050505056fea264697066735822122043ff8f489d4efcb8ba89e97d40409a5b32203e78ea407485e166a9967d87347964736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15`\x0EW_\x80\xFD[Pa\x04\t\x80a\0\x1C_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\0UW_5`\xE0\x1C\x80c7\xCD\xA2r\x14a\0YW\x80cO\xEB\x0F4\x14a\0tW\x80ci\x17\xF4\xE0\x14a\0\x89W\x80c\x81\0TY\x14a\0\x9CW\x80c\x94\xE2G\xA8\x14a\0\xAFW[_\x80\xFD[a\0a_T\x81V[`@Q\x90\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\0\x87a\0\x826`\x04a\x02\xE6V[a\0\xC6V[\0[a\0aa\0\x976`\x04a\x03NV[a\0\xF7V[a\0aa\0\xAA6`\x04a\x03NV[a\x01\x16V[a\0\xB7a\x01%V[`@Qa\0k\x93\x92\x91\x90a\x03\x9FV[_\x83\x90U\x81Qa\0\xDD\x90`\x01\x90` \x85\x01\x90a\x01\xDAV[P\x80Qa\0\xF1\x90`\x02\x90` \x84\x01\x90a\x01\xDAV[PPPPV[`\x02\x81\x81T\x81\x10a\x01\x06W_\x80\xFD[_\x91\x82R` \x90\x91 \x01T\x90P\x81V[`\x01\x81\x81T\x81\x10a\x01\x06W_\x80\xFD[_``\x80_T`\x01`\x02\x81\x80T\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80T\x80\x15a\x01xW` \x02\x82\x01\x91\x90_R` _ \x90[\x81T\x81R` \x01\x90`\x01\x01\x90\x80\x83\x11a\x01dW[PPPPP\x91P\x80\x80T\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80T\x80\x15a\x01\xC8W` \x02\x82\x01\x91\x90_R` _ \x90[\x81T\x81R` \x01\x90`\x01\x01\x90\x80\x83\x11a\x01\xB4W[PPPPP\x90P\x92P\x92P\x92P\x90\x91\x92V[\x82\x80T\x82\x82U\x90_R` _ \x90\x81\x01\x92\x82\x15a\x02\x13W\x91` \x02\x82\x01[\x82\x81\x11\x15a\x02\x13W\x82Q\x82U\x91` \x01\x91\x90`\x01\x01\x90a\x01\xF8V[Pa\x02\x1F\x92\x91Pa\x02#V[P\x90V[[\x80\x82\x11\x15a\x02\x1FW_\x81U`\x01\x01a\x02$V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[_\x82`\x1F\x83\x01\x12a\x02ZW_\x80\xFD[\x815` g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x83\x11\x15a\x02wWa\x02wa\x027V[\x82`\x05\x1B`@Q`\x1F\x19`?\x83\x01\x16\x81\x01\x81\x81\x10\x84\x82\x11\x17\x15a\x02\x9CWa\x02\x9Ca\x027V[`@R\x93\x84R` \x81\x87\x01\x81\x01\x94\x90\x81\x01\x92P\x87\x85\x11\x15a\x02\xBBW_\x80\xFD[` \x87\x01\x91P[\x84\x82\x10\x15a\x02\xDBW\x815\x83R\x91\x83\x01\x91\x90\x83\x01\x90a\x02\xC2V[\x97\x96PPPPPPPV[_\x80_``\x84\x86\x03\x12\x15a\x02\xF8W_\x80\xFD[\x835\x92P` \x84\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x03\x16W_\x80\xFD[a\x03\"\x87\x83\x88\x01a\x02KV[\x93P`@\x86\x015\x91P\x80\x82\x11\x15a\x037W_\x80\xFD[Pa\x03D\x86\x82\x87\x01a\x02KV[\x91PP\x92P\x92P\x92V[_` \x82\x84\x03\x12\x15a\x03^W_\x80\xFD[P5\x91\x90PV[_\x81Q\x80\x84R` \x80\x85\x01\x94P` \x84\x01_[\x83\x81\x10\x15a\x03\x94W\x81Q\x87R\x95\x82\x01\x95\x90\x82\x01\x90`\x01\x01a\x03xV[P\x94\x95\x94PPPPPV[\x83\x81R``` \x82\x01R_a\x03\xB7``\x83\x01\x85a\x03eV[\x82\x81\x03`@\x84\x01Ra\x03\xC9\x81\x85a\x03eV[\x96\x95PPPPPPV\xFE\xA2dipfsX\"\x12 C\xFF\x8FH\x9DN\xFC\xB8\xBA\x89\xE9}@@\x9A[2 >x\xEA@t\x85\xE1f\xA9\x96}\x874ydsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f80fd5b5060043610610055575f3560e01c806337cda272146100595780634feb0f34146100745780636917f4e014610089578063810054591461009c57806394e247a8146100af575b5f80fd5b6100615f5481565b6040519081526020015b60405180910390f35b6100876100823660046102e6565b6100c6565b005b61006161009736600461034e565b6100f7565b6100616100aa36600461034e565b610116565b6100b7610125565b60405161006b9392919061039f565b5f83905581516100dd9060019060208501906101da565b5080516100f19060029060208401906101da565b50505050565b60028181548110610106575f80fd5b5f91825260209091200154905081565b60018181548110610106575f80fd5b5f6060805f54600160028180548060200260200160405190810160405280929190818152602001828054801561017857602002820191905f5260205f20905b815481526020019060010190808311610164575b50505050509150808054806020026020016040519081016040528092919081815260200182805480156101c857602002820191905f5260205f20905b8154815260200190600101908083116101b4575b50505050509050925092509250909192565b828054828255905f5260205f20908101928215610213579160200282015b828111156102135782518255916020019190600101906101f8565b5061021f929150610223565b5090565b5b8082111561021f575f8155600101610224565b634e487b7160e01b5f52604160045260245ffd5b5f82601f83011261025a575f80fd5b8135602067ffffffffffffffff8083111561027757610277610237565b8260051b604051601f19603f8301168101818110848211171561029c5761029c610237565b60405293845260208187018101949081019250878511156102bb575f80fd5b6020870191505b848210156102db578135835291830191908301906102c2565b979650505050505050565b5f805f606084860312156102f8575f80fd5b83359250602084013567ffffffffffffffff80821115610316575f80fd5b6103228783880161024b565b93506040860135915080821115610337575f80fd5b506103448682870161024b565b9150509250925092565b5f6020828403121561035e575f80fd5b5035919050565b5f815180845260208085019450602084015f5b8381101561039457815187529582019590820190600101610378565b509495945050505050565b838152606060208201525f6103b76060830185610365565b82810360408401526103c98185610365565b969550505050505056fea264697066735822122043ff8f489d4efcb8ba89e97d40409a5b32203e78ea407485e166a9967d87347964736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\0UW_5`\xE0\x1C\x80c7\xCD\xA2r\x14a\0YW\x80cO\xEB\x0F4\x14a\0tW\x80ci\x17\xF4\xE0\x14a\0\x89W\x80c\x81\0TY\x14a\0\x9CW\x80c\x94\xE2G\xA8\x14a\0\xAFW[_\x80\xFD[a\0a_T\x81V[`@Q\x90\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\0\x87a\0\x826`\x04a\x02\xE6V[a\0\xC6V[\0[a\0aa\0\x976`\x04a\x03NV[a\0\xF7V[a\0aa\0\xAA6`\x04a\x03NV[a\x01\x16V[a\0\xB7a\x01%V[`@Qa\0k\x93\x92\x91\x90a\x03\x9FV[_\x83\x90U\x81Qa\0\xDD\x90`\x01\x90` \x85\x01\x90a\x01\xDAV[P\x80Qa\0\xF1\x90`\x02\x90` \x84\x01\x90a\x01\xDAV[PPPPV[`\x02\x81\x81T\x81\x10a\x01\x06W_\x80\xFD[_\x91\x82R` \x90\x91 \x01T\x90P\x81V[`\x01\x81\x81T\x81\x10a\x01\x06W_\x80\xFD[_``\x80_T`\x01`\x02\x81\x80T\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80T\x80\x15a\x01xW` \x02\x82\x01\x91\x90_R` _ \x90[\x81T\x81R` \x01\x90`\x01\x01\x90\x80\x83\x11a\x01dW[PPPPP\x91P\x80\x80T\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80T\x80\x15a\x01\xC8W` \x02\x82\x01\x91\x90_R` _ \x90[\x81T\x81R` \x01\x90`\x01\x01\x90\x80\x83\x11a\x01\xB4W[PPPPP\x90P\x92P\x92P\x92P\x90\x91\x92V[\x82\x80T\x82\x82U\x90_R` _ \x90\x81\x01\x92\x82\x15a\x02\x13W\x91` \x02\x82\x01[\x82\x81\x11\x15a\x02\x13W\x82Q\x82U\x91` \x01\x91\x90`\x01\x01\x90a\x01\xF8V[Pa\x02\x1F\x92\x91Pa\x02#V[P\x90V[[\x80\x82\x11\x15a\x02\x1FW_\x81U`\x01\x01a\x02$V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[_\x82`\x1F\x83\x01\x12a\x02ZW_\x80\xFD[\x815` g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x83\x11\x15a\x02wWa\x02wa\x027V[\x82`\x05\x1B`@Q`\x1F\x19`?\x83\x01\x16\x81\x01\x81\x81\x10\x84\x82\x11\x17\x15a\x02\x9CWa\x02\x9Ca\x027V[`@R\x93\x84R` \x81\x87\x01\x81\x01\x94\x90\x81\x01\x92P\x87\x85\x11\x15a\x02\xBBW_\x80\xFD[` \x87\x01\x91P[\x84\x82\x10\x15a\x02\xDBW\x815\x83R\x91\x83\x01\x91\x90\x83\x01\x90a\x02\xC2V[\x97\x96PPPPPPPV[_\x80_``\x84\x86\x03\x12\x15a\x02\xF8W_\x80\xFD[\x835\x92P` \x84\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x03\x16W_\x80\xFD[a\x03\"\x87\x83\x88\x01a\x02KV[\x93P`@\x86\x015\x91P\x80\x82\x11\x15a\x037W_\x80\xFD[Pa\x03D\x86\x82\x87\x01a\x02KV[\x91PP\x92P\x92P\x92V[_` \x82\x84\x03\x12\x15a\x03^W_\x80\xFD[P5\x91\x90PV[_\x81Q\x80\x84R` \x80\x85\x01\x94P` \x84\x01_[\x83\x81\x10\x15a\x03\x94W\x81Q\x87R\x95\x82\x01\x95\x90\x82\x01\x90`\x01\x01a\x03xV[P\x94\x95\x94PPPPPV[\x83\x81R``` \x82\x01R_a\x03\xB7``\x83\x01\x85a\x03eV[\x82\x81\x03`@\x84\x01Ra\x03\xC9\x81\x85a\x03eV[\x96\x95PPPPPPV\xFE\xA2dipfsX\"\x12 C\xFF\x8FH\x9DN\xFC\xB8\xBA\x89\xE9}@@\x9A[2 >x\xEA@t\x85\xE1f\xA9\x96}\x874ydsolcC\0\x08\x19\x003",
    );
    /**Function with signature `getSlotInfo()` and selector `0x94e247a8`.
```solidity
function getSlotInfo() external view returns (uint256, uint256[] memory, uint256[] memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getSlotInfoCall {}
    ///Container type for the return parameters of the [`getSlotInfo()`](getSlotInfoCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getSlotInfoReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
        pub _1: alloy::sol_types::private::Vec<
            alloy::sol_types::private::primitives::aliases::U256,
        >,
        pub _2: alloy::sol_types::private::Vec<
            alloy::sol_types::private::primitives::aliases::U256,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getSlotInfoCall> for UnderlyingRustTuple<'_> {
                fn from(value: getSlotInfoCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getSlotInfoCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::primitives::aliases::U256,
                >,
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::primitives::aliases::U256,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getSlotInfoReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getSlotInfoReturn) -> Self {
                    (value._0, value._1, value._2)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getSlotInfoReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _0: tuple.0,
                        _1: tuple.1,
                        _2: tuple.2,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getSlotInfoCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getSlotInfoReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getSlotInfo()";
            const SELECTOR: [u8; 4] = [148u8, 226u8, 71u8, 168u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `sequencingChainBlockNumbers(uint256)` and selector `0x81005459`.
```solidity
function sequencingChainBlockNumbers(uint256) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct sequencingChainBlockNumbersCall {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`sequencingChainBlockNumbers(uint256)`](sequencingChainBlockNumbersCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct sequencingChainBlockNumbersReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<sequencingChainBlockNumbersCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: sequencingChainBlockNumbersCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for sequencingChainBlockNumbersCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<sequencingChainBlockNumbersReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: sequencingChainBlockNumbersReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for sequencingChainBlockNumbersReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for sequencingChainBlockNumbersCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = sequencingChainBlockNumbersReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "sequencingChainBlockNumbers(uint256)";
            const SELECTOR: [u8; 4] = [129u8, 0u8, 84u8, 89u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._0),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setSlotInfo(uint256,uint256[],uint256[])` and selector `0x4feb0f34`.
```solidity
function setSlotInfo(uint256 _slotNumber, uint256[] memory _sequencingChainBlockNumbers, uint256[] memory _settlementChainBlockNumbers) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setSlotInfoCall {
        pub _slotNumber: alloy::sol_types::private::primitives::aliases::U256,
        pub _sequencingChainBlockNumbers: alloy::sol_types::private::Vec<
            alloy::sol_types::private::primitives::aliases::U256,
        >,
        pub _settlementChainBlockNumbers: alloy::sol_types::private::Vec<
            alloy::sol_types::private::primitives::aliases::U256,
        >,
    }
    ///Container type for the return parameters of the [`setSlotInfo(uint256,uint256[],uint256[])`](setSlotInfoCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setSlotInfoReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::primitives::aliases::U256,
                >,
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::primitives::aliases::U256,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setSlotInfoCall> for UnderlyingRustTuple<'_> {
                fn from(value: setSlotInfoCall) -> Self {
                    (
                        value._slotNumber,
                        value._sequencingChainBlockNumbers,
                        value._settlementChainBlockNumbers,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setSlotInfoCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _slotNumber: tuple.0,
                        _sequencingChainBlockNumbers: tuple.1,
                        _settlementChainBlockNumbers: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setSlotInfoReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setSlotInfoReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setSlotInfoReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setSlotInfoCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setSlotInfoReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setSlotInfo(uint256,uint256[],uint256[])";
            const SELECTOR: [u8; 4] = [79u8, 235u8, 15u8, 52u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._slotNumber),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Uint<256>,
                    > as alloy_sol_types::SolType>::tokenize(
                        &self._sequencingChainBlockNumbers,
                    ),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Uint<256>,
                    > as alloy_sol_types::SolType>::tokenize(
                        &self._settlementChainBlockNumbers,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `settlementChainBlockNumbers(uint256)` and selector `0x6917f4e0`.
```solidity
function settlementChainBlockNumbers(uint256) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct settlementChainBlockNumbersCall {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`settlementChainBlockNumbers(uint256)`](settlementChainBlockNumbersCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct settlementChainBlockNumbersReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<settlementChainBlockNumbersCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: settlementChainBlockNumbersCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for settlementChainBlockNumbersCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<settlementChainBlockNumbersReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: settlementChainBlockNumbersReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for settlementChainBlockNumbersReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for settlementChainBlockNumbersCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = settlementChainBlockNumbersReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "settlementChainBlockNumbers(uint256)";
            const SELECTOR: [u8; 4] = [105u8, 23u8, 244u8, 224u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._0),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `slotNumber()` and selector `0x37cda272`.
```solidity
function slotNumber() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct slotNumberCall {}
    ///Container type for the return parameters of the [`slotNumber()`](slotNumberCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct slotNumberReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<slotNumberCall> for UnderlyingRustTuple<'_> {
                fn from(value: slotNumberCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for slotNumberCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<slotNumberReturn> for UnderlyingRustTuple<'_> {
                fn from(value: slotNumberReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for slotNumberReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for slotNumberCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = slotNumberReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "slotNumber()";
            const SELECTOR: [u8; 4] = [55u8, 205u8, 162u8, 114u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`SlotTracker`](self) function calls.
    pub enum SlotTrackerCalls {
        getSlotInfo(getSlotInfoCall),
        sequencingChainBlockNumbers(sequencingChainBlockNumbersCall),
        setSlotInfo(setSlotInfoCall),
        settlementChainBlockNumbers(settlementChainBlockNumbersCall),
        slotNumber(slotNumberCall),
    }
    #[automatically_derived]
    impl SlotTrackerCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [55u8, 205u8, 162u8, 114u8],
            [79u8, 235u8, 15u8, 52u8],
            [105u8, 23u8, 244u8, 224u8],
            [129u8, 0u8, 84u8, 89u8],
            [148u8, 226u8, 71u8, 168u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for SlotTrackerCalls {
        const NAME: &'static str = "SlotTrackerCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 5usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::getSlotInfo(_) => {
                    <getSlotInfoCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::sequencingChainBlockNumbers(_) => {
                    <sequencingChainBlockNumbersCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setSlotInfo(_) => {
                    <setSlotInfoCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::settlementChainBlockNumbers(_) => {
                    <settlementChainBlockNumbersCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::slotNumber(_) => {
                    <slotNumberCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<SlotTrackerCalls>] = &[
                {
                    fn slotNumber(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SlotTrackerCalls> {
                        <slotNumberCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SlotTrackerCalls::slotNumber)
                    }
                    slotNumber
                },
                {
                    fn setSlotInfo(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SlotTrackerCalls> {
                        <setSlotInfoCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SlotTrackerCalls::setSlotInfo)
                    }
                    setSlotInfo
                },
                {
                    fn settlementChainBlockNumbers(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SlotTrackerCalls> {
                        <settlementChainBlockNumbersCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SlotTrackerCalls::settlementChainBlockNumbers)
                    }
                    settlementChainBlockNumbers
                },
                {
                    fn sequencingChainBlockNumbers(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SlotTrackerCalls> {
                        <sequencingChainBlockNumbersCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SlotTrackerCalls::sequencingChainBlockNumbers)
                    }
                    sequencingChainBlockNumbers
                },
                {
                    fn getSlotInfo(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SlotTrackerCalls> {
                        <getSlotInfoCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SlotTrackerCalls::getSlotInfo)
                    }
                    getSlotInfo
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::getSlotInfo(inner) => {
                    <getSlotInfoCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::sequencingChainBlockNumbers(inner) => {
                    <sequencingChainBlockNumbersCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setSlotInfo(inner) => {
                    <setSlotInfoCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::settlementChainBlockNumbers(inner) => {
                    <settlementChainBlockNumbersCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::slotNumber(inner) => {
                    <slotNumberCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::getSlotInfo(inner) => {
                    <getSlotInfoCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::sequencingChainBlockNumbers(inner) => {
                    <sequencingChainBlockNumbersCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setSlotInfo(inner) => {
                    <setSlotInfoCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::settlementChainBlockNumbers(inner) => {
                    <settlementChainBlockNumbersCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::slotNumber(inner) => {
                    <slotNumberCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`SlotTracker`](self) contract instance.

See the [wrapper's documentation](`SlotTrackerInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> SlotTrackerInstance<T, P, N> {
        SlotTrackerInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<SlotTrackerInstance<T, P, N>>,
    > {
        SlotTrackerInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        SlotTrackerInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`SlotTracker`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`SlotTracker`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct SlotTrackerInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for SlotTrackerInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("SlotTrackerInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SlotTrackerInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`SlotTracker`](self) contract instance.

See the [wrapper's documentation](`SlotTrackerInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<SlotTrackerInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> SlotTrackerInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> SlotTrackerInstance<T, P, N> {
            SlotTrackerInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SlotTrackerInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`getSlotInfo`] function.
        pub fn getSlotInfo(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getSlotInfoCall, N> {
            self.call_builder(&getSlotInfoCall {})
        }
        ///Creates a new call builder for the [`sequencingChainBlockNumbers`] function.
        pub fn sequencingChainBlockNumbers(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, sequencingChainBlockNumbersCall, N> {
            self.call_builder(
                &sequencingChainBlockNumbersCall {
                    _0,
                },
            )
        }
        ///Creates a new call builder for the [`setSlotInfo`] function.
        pub fn setSlotInfo(
            &self,
            _slotNumber: alloy::sol_types::private::primitives::aliases::U256,
            _sequencingChainBlockNumbers: alloy::sol_types::private::Vec<
                alloy::sol_types::private::primitives::aliases::U256,
            >,
            _settlementChainBlockNumbers: alloy::sol_types::private::Vec<
                alloy::sol_types::private::primitives::aliases::U256,
            >,
        ) -> alloy_contract::SolCallBuilder<T, &P, setSlotInfoCall, N> {
            self.call_builder(
                &setSlotInfoCall {
                    _slotNumber,
                    _sequencingChainBlockNumbers,
                    _settlementChainBlockNumbers,
                },
            )
        }
        ///Creates a new call builder for the [`settlementChainBlockNumbers`] function.
        pub fn settlementChainBlockNumbers(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, settlementChainBlockNumbersCall, N> {
            self.call_builder(
                &settlementChainBlockNumbersCall {
                    _0,
                },
            )
        }
        ///Creates a new call builder for the [`slotNumber`] function.
        pub fn slotNumber(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, slotNumberCall, N> {
            self.call_builder(&slotNumberCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SlotTrackerInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
