/**

Generated by the following Solidity interface...
```solidity
interface OneStepProver0 {
    type MachineStatus is uint8;
    type ValueType is uint8;
    struct ExecutionContext {
        uint256 maxInboxMessagesRead;
        address bridge;
        bytes32 initialWasmModuleRoot;
    }
    struct Instruction {
        uint16 opcode;
        uint256 argumentData;
    }
    struct Machine {
        MachineStatus status;
        ValueStack valueStack;
        MultiStack valueMultiStack;
        ValueStack internalStack;
        StackFrameWindow frameStack;
        MultiStack frameMultiStack;
        bytes32 globalStateHash;
        uint32 moduleIdx;
        uint32 functionIdx;
        uint32 functionPc;
        bytes32 recoveryPc;
        bytes32 modulesRoot;
    }
    struct Module {
        bytes32 globalsMerkleRoot;
        ModuleMemory moduleMemory;
        bytes32 tablesMerkleRoot;
        bytes32 functionsMerkleRoot;
        bytes32 extraHash;
        uint32 internalsOffset;
    }
    struct ModuleMemory {
        uint64 size;
        uint64 maxSize;
        bytes32 merkleRoot;
    }
    struct MultiStack {
        bytes32 inactiveStackHash;
        bytes32 remainingHash;
    }
    struct StackFrame {
        Value returnPc;
        bytes32 localsMerkleRoot;
        uint32 callerModule;
        uint32 callerModuleInternals;
    }
    struct StackFrameWindow {
        StackFrame[] proved;
        bytes32 remainingHash;
    }
    struct Value {
        ValueType valueType;
        uint256 contents;
    }
    struct ValueArray {
        Value[] inner;
    }
    struct ValueStack {
        ValueArray proved;
        bytes32 remainingHash;
    }

    function executeOneStep(ExecutionContext memory, Machine memory startMach, Module memory startMod, Instruction memory inst, bytes memory proof) external pure returns (Machine memory mach, Module memory mod);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "executeOneStep",
    "inputs": [
      {
        "name": "",
        "type": "tuple",
        "internalType": "struct ExecutionContext",
        "components": [
          {
            "name": "maxInboxMessagesRead",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "bridge",
            "type": "address",
            "internalType": "contract IBridge"
          },
          {
            "name": "initialWasmModuleRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          }
        ]
      },
      {
        "name": "startMach",
        "type": "tuple",
        "internalType": "struct Machine",
        "components": [
          {
            "name": "status",
            "type": "uint8",
            "internalType": "enum MachineStatus"
          },
          {
            "name": "valueStack",
            "type": "tuple",
            "internalType": "struct ValueStack",
            "components": [
              {
                "name": "proved",
                "type": "tuple",
                "internalType": "struct ValueArray",
                "components": [
                  {
                    "name": "inner",
                    "type": "tuple[]",
                    "internalType": "struct Value[]",
                    "components": [
                      {
                        "name": "valueType",
                        "type": "uint8",
                        "internalType": "enum ValueType"
                      },
                      {
                        "name": "contents",
                        "type": "uint256",
                        "internalType": "uint256"
                      }
                    ]
                  }
                ]
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "valueMultiStack",
            "type": "tuple",
            "internalType": "struct MultiStack",
            "components": [
              {
                "name": "inactiveStackHash",
                "type": "bytes32",
                "internalType": "bytes32"
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "internalStack",
            "type": "tuple",
            "internalType": "struct ValueStack",
            "components": [
              {
                "name": "proved",
                "type": "tuple",
                "internalType": "struct ValueArray",
                "components": [
                  {
                    "name": "inner",
                    "type": "tuple[]",
                    "internalType": "struct Value[]",
                    "components": [
                      {
                        "name": "valueType",
                        "type": "uint8",
                        "internalType": "enum ValueType"
                      },
                      {
                        "name": "contents",
                        "type": "uint256",
                        "internalType": "uint256"
                      }
                    ]
                  }
                ]
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "frameStack",
            "type": "tuple",
            "internalType": "struct StackFrameWindow",
            "components": [
              {
                "name": "proved",
                "type": "tuple[]",
                "internalType": "struct StackFrame[]",
                "components": [
                  {
                    "name": "returnPc",
                    "type": "tuple",
                    "internalType": "struct Value",
                    "components": [
                      {
                        "name": "valueType",
                        "type": "uint8",
                        "internalType": "enum ValueType"
                      },
                      {
                        "name": "contents",
                        "type": "uint256",
                        "internalType": "uint256"
                      }
                    ]
                  },
                  {
                    "name": "localsMerkleRoot",
                    "type": "bytes32",
                    "internalType": "bytes32"
                  },
                  {
                    "name": "callerModule",
                    "type": "uint32",
                    "internalType": "uint32"
                  },
                  {
                    "name": "callerModuleInternals",
                    "type": "uint32",
                    "internalType": "uint32"
                  }
                ]
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "frameMultiStack",
            "type": "tuple",
            "internalType": "struct MultiStack",
            "components": [
              {
                "name": "inactiveStackHash",
                "type": "bytes32",
                "internalType": "bytes32"
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "globalStateHash",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "moduleIdx",
            "type": "uint32",
            "internalType": "uint32"
          },
          {
            "name": "functionIdx",
            "type": "uint32",
            "internalType": "uint32"
          },
          {
            "name": "functionPc",
            "type": "uint32",
            "internalType": "uint32"
          },
          {
            "name": "recoveryPc",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "modulesRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          }
        ]
      },
      {
        "name": "startMod",
        "type": "tuple",
        "internalType": "struct Module",
        "components": [
          {
            "name": "globalsMerkleRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "moduleMemory",
            "type": "tuple",
            "internalType": "struct ModuleMemory",
            "components": [
              {
                "name": "size",
                "type": "uint64",
                "internalType": "uint64"
              },
              {
                "name": "maxSize",
                "type": "uint64",
                "internalType": "uint64"
              },
              {
                "name": "merkleRoot",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "tablesMerkleRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "functionsMerkleRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "extraHash",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "internalsOffset",
            "type": "uint32",
            "internalType": "uint32"
          }
        ]
      },
      {
        "name": "inst",
        "type": "tuple",
        "internalType": "struct Instruction",
        "components": [
          {
            "name": "opcode",
            "type": "uint16",
            "internalType": "uint16"
          },
          {
            "name": "argumentData",
            "type": "uint256",
            "internalType": "uint256"
          }
        ]
      },
      {
        "name": "proof",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "mach",
        "type": "tuple",
        "internalType": "struct Machine",
        "components": [
          {
            "name": "status",
            "type": "uint8",
            "internalType": "enum MachineStatus"
          },
          {
            "name": "valueStack",
            "type": "tuple",
            "internalType": "struct ValueStack",
            "components": [
              {
                "name": "proved",
                "type": "tuple",
                "internalType": "struct ValueArray",
                "components": [
                  {
                    "name": "inner",
                    "type": "tuple[]",
                    "internalType": "struct Value[]",
                    "components": [
                      {
                        "name": "valueType",
                        "type": "uint8",
                        "internalType": "enum ValueType"
                      },
                      {
                        "name": "contents",
                        "type": "uint256",
                        "internalType": "uint256"
                      }
                    ]
                  }
                ]
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "valueMultiStack",
            "type": "tuple",
            "internalType": "struct MultiStack",
            "components": [
              {
                "name": "inactiveStackHash",
                "type": "bytes32",
                "internalType": "bytes32"
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "internalStack",
            "type": "tuple",
            "internalType": "struct ValueStack",
            "components": [
              {
                "name": "proved",
                "type": "tuple",
                "internalType": "struct ValueArray",
                "components": [
                  {
                    "name": "inner",
                    "type": "tuple[]",
                    "internalType": "struct Value[]",
                    "components": [
                      {
                        "name": "valueType",
                        "type": "uint8",
                        "internalType": "enum ValueType"
                      },
                      {
                        "name": "contents",
                        "type": "uint256",
                        "internalType": "uint256"
                      }
                    ]
                  }
                ]
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "frameStack",
            "type": "tuple",
            "internalType": "struct StackFrameWindow",
            "components": [
              {
                "name": "proved",
                "type": "tuple[]",
                "internalType": "struct StackFrame[]",
                "components": [
                  {
                    "name": "returnPc",
                    "type": "tuple",
                    "internalType": "struct Value",
                    "components": [
                      {
                        "name": "valueType",
                        "type": "uint8",
                        "internalType": "enum ValueType"
                      },
                      {
                        "name": "contents",
                        "type": "uint256",
                        "internalType": "uint256"
                      }
                    ]
                  },
                  {
                    "name": "localsMerkleRoot",
                    "type": "bytes32",
                    "internalType": "bytes32"
                  },
                  {
                    "name": "callerModule",
                    "type": "uint32",
                    "internalType": "uint32"
                  },
                  {
                    "name": "callerModuleInternals",
                    "type": "uint32",
                    "internalType": "uint32"
                  }
                ]
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "frameMultiStack",
            "type": "tuple",
            "internalType": "struct MultiStack",
            "components": [
              {
                "name": "inactiveStackHash",
                "type": "bytes32",
                "internalType": "bytes32"
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "globalStateHash",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "moduleIdx",
            "type": "uint32",
            "internalType": "uint32"
          },
          {
            "name": "functionIdx",
            "type": "uint32",
            "internalType": "uint32"
          },
          {
            "name": "functionPc",
            "type": "uint32",
            "internalType": "uint32"
          },
          {
            "name": "recoveryPc",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "modulesRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          }
        ]
      },
      {
        "name": "mod",
        "type": "tuple",
        "internalType": "struct Module",
        "components": [
          {
            "name": "globalsMerkleRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "moduleMemory",
            "type": "tuple",
            "internalType": "struct ModuleMemory",
            "components": [
              {
                "name": "size",
                "type": "uint64",
                "internalType": "uint64"
              },
              {
                "name": "maxSize",
                "type": "uint64",
                "internalType": "uint64"
              },
              {
                "name": "merkleRoot",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "tablesMerkleRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "functionsMerkleRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "extraHash",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "internalsOffset",
            "type": "uint32",
            "internalType": "uint32"
          }
        ]
      }
    ],
    "stateMutability": "pure"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod OneStepProver0 {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052348015600e575f80fd5b506132fa8061001c5f395ff3fe608060405234801561000f575f80fd5b5060043610610029575f3560e01c8063a92cb5011461002d575b5f80fd5b61004061003b366004612863565b610057565b60405161004e929190612a8d565b60405180910390f35b61005f612739565b6040805160c0810182525f80825282516060808201855282825260208083018490528286018490528401919091529282018190529181018290526080810182905260a08101919091526100b187612fc4565b91506100c2368790038701876130fc565b90505f6100d2602087018761319b565b905061281461ffff82166100e9575061050e6104f0565b5f1961ffff8316016100fe57506105196104f0565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff161ffff83160161013257506105206104f0565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff061ffff83160161016657506105466104f0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7ff761ffff83160161019a57506106686104f0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7ff561ffff8316016101ce575061076d6104f0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7ff461ffff83160161020257506108836104f0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7ff661ffff8316016102365750610a7e6104f0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffef61ffff83160161026a5750610bc36104f0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7ffd61ffff83160161029e575061104f6104f0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7ffc61ffff8316016102d257506110bf6104f0565b601f1961ffff8316016102e8575061114c6104f0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdf61ffff83160161031c575061118c6104f0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdd61ffff83160161035057506111cf6104f0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc61ffff83160161038457506111f56104f0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7ffe61ffff8316016103b857506112236104f0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe661ffff8316016103ec57506112bb6104f0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe561ffff83160161042057506112c86104f0565b604161ffff83161080159061043a5750604461ffff831611155b1561044857506113346104f0565b61ffff82166180051480610461575061ffff8216618006145b1561046f57506114a26104f0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7ff861ffff8316016104a357506115726104f0565b60405162461bcd60e51b815260206004820152600e60248201527f494e56414c49445f4f50434f444500000000000000000000000000000000000060448201526064015b60405180910390fd5b61050184848989898663ffffffff16565b5050965096945050505050565b505060029092525050565b5050505050565b5f61052e8660800151611580565b805190915061053e90879061169b565b505050505050565b61055d61055286611713565b602087015190611793565b5f61056b866080015161179f565b90506105b46105a98260400151604080518082019091525f808252602082015250604080518082019091525f815263ffffffff909116602082015290565b602088015190611793565b6105f06105a98260600151604080518082019091525f808252602082015250604080518082019091525f815263ffffffff909116602082015290565b602084013563ffffffff8116811461064a5760405162461bcd60e51b815260206004820152600d60248201527f4241445f43414c4c5f444154410000000000000000000000000000000000000060448201526064016104e7565b63ffffffff1661010087015250505f61012090940193909352505050565b61067461055286611713565b6106b06105528660e00151604080518082019091525f808252602082015250604080518082019091525f815263ffffffff909116602082015290565b6106ec6105528560a00151604080518082019091525f808252602082015250604080518082019091525f815263ffffffff909116602082015290565b6020808401359081901c604082901c156107485760405162461bcd60e51b815260206004820152601a60248201527f4241445f43524f53535f4d4f44554c455f43414c4c5f4441544100000000000060448201526064016104e7565b63ffffffff90811660e08801521661010086015250505f610120909301929092525050565b61077961055286611713565b5f610787866080015161179f565b90506107c56105a98260400151604080518082019091525f808252602082015250604080518082019091525f815263ffffffff909116602082015290565b6108016105a98260600151604080518082019091525f808252602082015250604080518082019091525f815263ffffffff909116602082015290565b6020808501359081901c604082901c1561085d5760405162461bcd60e51b815260206004820152601a60248201527f4241445f43524f53535f4d4f44554c455f43414c4c5f4441544100000000000060448201526064016104e7565b63ffffffff90811660e08901521661010087015250505f61012090940193909352505050565b5f836020013590505f6108a161089c8860200151611842565b611860565b90506108f46040805160c0810182525f8082528251606081018452818152602081810183905293810191909152909182019081525f60208201819052604082018190526060820181905260809091015290565b6040805160208101909152606081525f61090f87878361191c565b909350905061091f878783611a1e565b6101608c0151919350915061093f8363ffffffff808816908790611aeb16565b146109b25760405162461bcd60e51b815260206004820152602260248201527f43524f53535f4d4f44554c455f494e5445524e414c5f4d4f44554c45535f524f60448201527f4f5400000000000000000000000000000000000000000000000000000000000060648201526084016104e7565b6109c96109be8b611713565b60208c015190611793565b610a056109be8b60e00151604080518082019091525f808252602082015250604080518082019091525f815263ffffffff909116602082015290565b610a416109be8a60a00151604080518082019091525f808252602082015250604080518082019091525f815263ffffffff909116602082015290565b63ffffffff841660e08b015260a0830151610a5c90866131d0565b63ffffffff166101008b015250505f6101209098019790975250505050505050565b610a8a61055286611713565b610ac66105528660e00151604080518082019091525f808252602082015250604080518082019091525f815263ffffffff909116602082015290565b610b026105528560a00151604080518082019091525f808252602082015250604080518082019091525f815263ffffffff909116602082015290565b5f610b10866080015161179f565b9050806060015163ffffffff165f03610b2d575060028552610519565b602084013563ffffffff81168114610b875760405162461bcd60e51b815260206004820152601d60248201527f4241445f43414c4c45525f494e5445524e414c5f43414c4c5f4441544100000060448201526064016104e7565b604082015163ffffffff1660e08801526060820151610ba79082906131d0565b63ffffffff1661010088015250505f6101208601525050505050565b5f80610bd561089c8860200151611842565b90505f805f80805f610bf36040518060200160405280606081525090565b610bfe8b8b87611b3f565b95509350610c0d8b8b87611b9b565b9096509450610c1d8b8b87611bb6565b95509250610c2c8b8b87611b3f565b95509150610c3b8b8b87611b9b565b9097509450610c4b8b8b87611a1e565b6040517f43616c6c20696e6469726563743a00000000000000000000000000000000000060208201527fffffffffffffffff00000000000000000000000000000000000000000000000060c088901b16602e820152603681018990529096509091505f9060560160408051601f19818403018152919052805160209182012091508d01358114610d1d5760405162461bcd60e51b815260206004820152601660248201527f4241445f43414c4c5f494e4449524543545f444154410000000000000000000060448201526064016104e7565b610d348267ffffffffffffffff871686868c611beb565b90508d604001518114610d895760405162461bcd60e51b815260206004820152600f60248201527f4241445f5441424c45535f524f4f54000000000000000000000000000000000060448201526064016104e7565b8267ffffffffffffffff168963ffffffff1610610db457505060028d52506105199650505050505050565b50505050505f610dd3604080518082019091525f808252602082015290565b604080516020810190915260608152610ded8a8a86611b9b565b94509250610dfc8a8a86611cde565b94509150610e0b8a8a86611a1e565b945090505f610e278263ffffffff808b169087908790611de616565b9050868114610e785760405162461bcd60e51b815260206004820152601160248201527f4241445f454c454d454e54535f524f4f5400000000000000000000000000000060448201526064016104e7565b858414610ea8578d60025b90816002811115610e9657610e9661295a565b81525050505050505050505050610519565b600483516006811115610ebd57610ebd61295a565b03610eca578d6002610e83565b600583516006811115610edf57610edf61295a565b03610f45576020830151985063ffffffff89168914610f405760405162461bcd60e51b815260206004820152601560248201527f4241445f46554e435f5245465f434f4e54454e5453000000000000000000000060448201526064016104e7565b610f8d565b60405162461bcd60e51b815260206004820152600d60248201527f4241445f454c454d5f545950450000000000000000000000000000000000000060448201526064016104e7565b5050505050505050610fa16105a987611713565b5f610faf876080015161179f565b9050610ff8610fed8260400151604080518082019091525f808252602082015250604080518082019091525f815263ffffffff909116602082015290565b602089015190611793565b611034610fed8260600151604080518082019091525f808252602082015250604080518082019091525f815263ffffffff909116602082015290565b5063ffffffff166101008601525f6101208601525050505050565b602083013563ffffffff811681146110a95760405162461bcd60e51b815260206004820152600d60248201527f4241445f43414c4c5f444154410000000000000000000000000000000000000060448201526064016104e7565b63ffffffff166101209095019490945250505050565b5f6110d061089c8760200151611842565b905063ffffffff81161561053e57602084013563ffffffff811681146111385760405162461bcd60e51b815260206004820152600d60248201527f4241445f43414c4c5f444154410000000000000000000000000000000000000060448201526064016104e7565b63ffffffff16610120870152505050505050565b5f61115a866080015161179f565b90505f611171826020015186602001358686611e90565b60208801519091506111839082611793565b50505050505050565b5f61119a8660200151611842565b90505f6111aa876080015161179f565b90506111c181602001518660200135848787611f54565b602090910152505050505050565b5f6111e3855f015185602001358585611e90565b602087015190915061053e9082611793565b5f6112038660200151611842565b9050611219855f01518560200135838686611f54565b9094525050505050565b5f6112318660200151611842565b90505f6112418760200151611842565b90505f6112518860200151611842565b90505f604051806080016040528083815260200188602001355f1b815260200161127a85611860565b63ffffffff16815260200161128e86611860565b63ffffffff1681525090506112b0818a6080015161201a90919063ffffffff16565b505050505050505050565b61053e8560200151611842565b5f6112d961089c8760200151611842565b90505f6112e98760200151611842565b90505f6112f98860200151611842565b905063ffffffff83161561131b5760208801516113169082611793565b61132a565b602088015161132a9083611793565b5050505050505050565b5f611342602085018561319b565b90505f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbf61ffff83160161137757505f611458565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbe61ffff8316016113aa57506001611458565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbd61ffff8316016113dd57506002611458565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbc61ffff83160161141057506003611458565b60405162461bcd60e51b815260206004820152601960248201527f434f4e53545f505553485f494e56414c49445f4f50434f44450000000000000060448201526064016104e7565b61118360405180604001604052808360068111156114785761147861295a565b8152602001876020013567ffffffffffffffff16815250886020015161179390919063ffffffff16565b604080518082019091525f80825260208201526180056114c5602086018661319b565b61ffff16036114f2576114db8660200151611842565b60608701519091506114ed9082611793565b61053e565b618006611502602086018661319b565b61ffff160361152a576115188660600151611842565b60208701519091506114ed9082611793565b60405162461bcd60e51b815260206004820152601c60248201527f4d4f56455f494e5445524e414c5f494e56414c49445f4f50434f44450000000060448201526064016104e7565b5f6111e38660200151612118565b6040805160c0810182525f6080820181815260a0830182905282526020820181905291810182905260608101919091528151516001146116025760405162461bcd60e51b815260206004820152601160248201527f4241445f57494e444f575f4c454e47544800000000000000000000000000000060448201526064016104e7565b815180515f90611614576116146131f4565b602002602001015190505f67ffffffffffffffff81111561163757611637612c22565b60405190808252806020026020018201604052801561169457816020015b6040805160c0810182525f6080820181815260a0830182905282526020808301829052928201819052606082015282525f199092019101816116555790505b5090915290565b6004815160068111156116b0576116b061295a565b036116d3578160025b908160028111156116cc576116cc61295a565b9052505050565b6006815160068111156116e8576116e861295a565b146116f5578160026116b9565b611703828260200151612145565b61170f578160026116b9565b5050565b604080518082019091525f808252602082015261178d8261012001518361010001518460e00151604080518082019091525f8082526020820152506040805180820182526006815263ffffffff94909416602093841b67ffffffff00000000161791901b6bffffffff000000000000000016179082015290565b92915050565b815161170f9082612185565b6040805160c0810182525f6080820181815260a0830182905282526020820181905291810182905260608101919091528151516001146118215760405162461bcd60e51b815260206004820152601160248201527f4241445f57494e444f575f4c454e47544800000000000000000000000000000060448201526064016104e7565b815180515f90611833576118336131f4565b60200260200101519050919050565b604080518082019091525f8082526020820152815161178d90612241565b60208101515f90818351600681111561187b5761187b61295a565b146118c85760405162461bcd60e51b815260206004820152600760248201527f4e4f545f4933320000000000000000000000000000000000000000000000000060448201526064016104e7565b640100000000811061178d5760405162461bcd60e51b815260206004820152600760248201527f4241445f4933320000000000000000000000000000000000000000000000000060448201526064016104e7565b6040805160c0810182525f80825282516060808201855282825260208083018490528286018490528401919091529282018190529181018290526080810182905260a0810191909152604080516060810182525f808252602082018190529181018290528391905f805f806119928b8b89611b9b565b975095506119a18b8b8961233b565b975094506119b08b8b89611b9b565b975093506119bf8b8b89611b9b565b975092506119ce8b8b89611b9b565b975091506119dd8b8b896123b5565b6040805160c081018252988952602089019790975295870194909452506060850191909152608084015263ffffffff1660a083015290969095509350505050565b604080516020810190915260608152815f611a3a868684611bb6565b925090505f60ff821667ffffffffffffffff811115611a5b57611a5b612c22565b604051908082528060200260200182016040528015611a84578160200160208202803683370190505b5090505f5b8260ff168160ff161015611acf57611aa2888886611b9b565b838360ff1681518110611ab757611ab76131f4565b60209081029190910101919091529350600101611a89565b5060405180602001604052808281525093505050935093915050565b5f611b358484611afa85612404565b6040518060400160405280601381526020017f4d6f64756c65206d65726b6c6520747265653a000000000000000000000000008152506124c9565b90505b9392505050565b5f81815b6008811015611b925760088367ffffffffffffffff16901b9250858583818110611b6f57611b6f6131f4565b919091013560f81c93909317925081611b8781613208565b925050600101611b43565b50935093915050565b5f8181611ba98686846125d3565b9097909650945050505050565b5f81848482818110611bca57611bca6131f4565b919091013560f81c9250819050611be081613208565b915050935093915050565b6040517f5461626c653a000000000000000000000000000000000000000000000000000060208201527fff0000000000000000000000000000000000000000000000000000000000000060f885901b1660268201527fffffffffffffffff00000000000000000000000000000000000000000000000060c084901b166027820152602f81018290525f908190604f01604051602081830303815290604052805190602001209050611cd38787836040518060400160405280601281526020017f5461626c65206d65726b6c6520747265653a00000000000000000000000000008152506124c9565b979650505050505050565b604080518082019091525f8082526020820152815f858583818110611d0557611d056131f4565b919091013560f81c9150829050611d1b81613208565b925050611d26600690565b6006811115611d3757611d3761295a565b60ff168160ff161115611d8c5760405162461bcd60e51b815260206004820152600e60248201527f4241445f56414c55455f5459504500000000000000000000000000000000000060448201526064016104e7565b5f611d988787856125d3565b809450819250505060405180604001604052808360ff166006811115611dc057611dc061295a565b6006811115611dd157611dd161295a565b81526020018281525093505050935093915050565b5f8083611df28461261c565b6040517f5461626c6520656c656d656e743a0000000000000000000000000000000000006020820152602e810192909252604e820152606e01604051602081830303815290604052805190602001209050611e848686836040518060400160405280601a81526020017f5461626c6520656c656d656e74206d65726b6c6520747265653a0000000000008152506124c9565b9150505b949350505050565b604080518082019091525f80825260208201525f611ebd604080518082019091525f808252602082015290565b604080516020810190915260608152611ed7868685611cde565b93509150611ee6868685611a1e565b935090505f611ef6828985612637565b9050888114611f475760405162461bcd60e51b815260206004820152601160248201527f57524f4e475f4d45524b4c455f524f4f5400000000000000000000000000000060448201526064016104e7565b5090979650505050505050565b5f611f6e604080518082019091525f808252602082015290565b5f611f856040518060200160405280606081525090565b611f90868684611cde565b9093509150611fa0868684611a1e565b925090505f611fb0828a86612637565b90508981146120015760405162461bcd60e51b815260206004820152601160248201527f57524f4e475f4d45524b4c455f524f4f5400000000000000000000000000000060448201526064016104e7565b61200c828a8a612637565b9a9950505050505050505050565b8151515f9061202a906001613220565b67ffffffffffffffff81111561204257612042612c22565b60405190808252806020026020018201604052801561209f57816020015b6040805160c0810182525f6080820181815260a0830182905282526020808301829052928201819052606082015282525f199092019101816120605790505b5090505f5b8351518110156120ef5783518051829081106120c2576120c26131f4565b60200260200101518282815181106120dc576120dc6131f4565b60209081029190910101526001016120a4565b508181845f01515181518110612107576121076131f4565b602090810291909101015290915250565b604080518082019091525f808252602082015281515151611b3861213d600183613233565b845190612681565b5f606082901c1561215757505f61178d565b5063ffffffff818116610120840152602082901c811661010084015260409190911c1660e090910152600190565b8151515f90612195906001613220565b67ffffffffffffffff8111156121ad576121ad612c22565b6040519080825280602002602001820160405280156121f157816020015b604080518082019091525f80825260208201528152602001906001900390816121cb5790505b5090505f5b8351518110156120ef578351805182908110612214576122146131f4565b602002602001015182828151811061222e5761222e6131f4565b60209081029190910101526001016121f6565b604080518082019091525f80825260208201528151805161226490600190613233565b81518110612274576122746131f4565b602002602001015190505f6001835f0151516122909190613233565b67ffffffffffffffff8111156122a8576122a8612c22565b6040519080825280602002602001820160405280156122ec57816020015b604080518082019091525f80825260208201528152602001906001900390816122c65790505b5090505f5b815181101561169457835180518290811061230e5761230e6131f4565b6020026020010151828281518110612328576123286131f4565b60209081029190910101526001016122f1565b604080516060810182525f8082526020820181905291810191909152815f8080612366888886611b3f565b94509250612375888886611b3f565b94509150612384888886611b9b565b6040805160608101825267ffffffffffffffff96871681529490951660208501529383015250969095509350505050565b5f81815b6004811015611b925760088363ffffffff16901b92508585838181106123e1576123e16131f4565b919091013560f81c939093179250816123f981613208565b9250506001016123b9565b5f815f015161241683602001516126b8565b6040808501516060860151608087015160a088015193516124ac969594906020017f4d6f64756c653a0000000000000000000000000000000000000000000000000081526007810196909652602786019490945260478501929092526067840152608783015260e01b7fffffffff000000000000000000000000000000000000000000000000000000001660a782015260ab0190565b604051602081830303815290604052805190602001209050919050565b815f5b85515181101561258457846001165f0361252e578282875f015183815181106124f7576124f76131f4565b602002602001015160405160200161251193929190613246565b604051602081830303815290604052805190602001209150612578565b82865f01518281518110612544576125446131f4565b60200260200101518360405160200161255f93929190613246565b6040516020818303038152906040528051906020012091505b600194851c94016124cc565b508315611e885760405162461bcd60e51b815260206004820152600f60248201527f50524f4f465f544f4f5f53484f5254000000000000000000000000000000000060448201526064016104e7565b5f81815b6020811015611b9257600883901b92508585838181106125f9576125f96131f4565b919091013560f81c9390931792508161261181613208565b9250506001016125d7565b5f815f015182602001516040516020016124ac929190613265565b5f611b3584846126468561261c565b6040518060400160405280601281526020017f56616c7565206d65726b6c6520747265653a00000000000000000000000000008152506124c9565b604080518082019091525f808252602082015282518051839081106126a8576126a86131f4565b6020026020010151905092915050565b805160208083015160408085015190517f4d656d6f72793a00000000000000000000000000000000000000000000000000938101939093527fffffffffffffffff00000000000000000000000000000000000000000000000060c094851b811660278501529190931b16602f82015260378101919091525f906057016124ac565b604080516101808101909152805f815260200161276c60408051606080820183529181019182529081525f602082015290565b81526040805180820182525f808252602080830191909152830152016127a860408051606080820183529181019182529081525f602082015290565b81526020016127cc6040518060400160405280606081526020015f80191681525090565b81526040805180820182525f8082526020808301829052840191909152908201819052606082018190526080820181905260a0820181905260c0820181905260e09091015290565b61281c6132b0565b565b5f8083601f84011261282e575f80fd5b50813567ffffffffffffffff811115612845575f80fd5b60208301915083602082850101111561285c575f80fd5b9250929050565b5f805f805f808688036101e081121561287a575f80fd5b6060811215612887575f80fd5b879650606088013567ffffffffffffffff808211156128a4575f80fd5b818a0191506101c080838d0312156128ba575f80fd5b8298506101007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80850112156128ed575f80fd5b60808b01975060407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe8085011215612922575f80fd5b6101808b0196508a013592508083111561293a575f80fd5b505061294889828a0161281e565b979a9699509497509295939492505050565b634e487b7160e01b5f52602160045260245ffd5b6003811061297e5761297e61295a565b9052565b8051600781106129945761299461295a565b8252602090810151910152565b80516040808452905160208483018190528151606086018190525f9392820191849160808801905b808410156129f0576129dc828651612982565b9382019360019390930192908501906129c9565b5060208701516020890152809550505050505092915050565b8051604080845281518482018190525f926060916020918201918388019190865b82811015612a73578451612a3f858251612982565b80830151858901528781015163ffffffff90811688870152908701511660808501529381019360a090930192600101612a2a565b505050602086015160208801528094505050505092915050565b5f610120808352612aa1818401865161296e565b60208501516101c06101408181870152612abf6102e08701846129a1565b92506040880151610160612adf8189018380518252602090810151910152565b60608a015191507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee080898703016101a08a0152612b1c86846129a1565b955060808b015192508089870301858a015250612b398583612a09565b60a08b015180516101e08b015260208101516102008b0152909550935060c08a015161022089015260e08a015163ffffffff81166102408a015293506101008a015163ffffffff81166102608a015293509489015163ffffffff811661028089015294918901516102a0880152508701516102c0860152509150611b389050602083018480518252602081015167ffffffffffffffff80825116602085015280602083015116604085015250604081015160608401525060408101516080830152606081015160a0830152608081015160c083015263ffffffff60a08201511660e08301525050565b634e487b7160e01b5f52604160045260245ffd5b6040805190810167ffffffffffffffff81118282101715612c5957612c59612c22565b60405290565b6040516020810167ffffffffffffffff81118282101715612c5957612c59612c22565b6040516080810167ffffffffffffffff81118282101715612c5957612c59612c22565b604051610180810167ffffffffffffffff81118282101715612c5957612c59612c22565b60405160c0810167ffffffffffffffff81118282101715612c5957612c59612c22565b6040516060810167ffffffffffffffff81118282101715612c5957612c59612c22565b604051601f8201601f1916810167ffffffffffffffff81118282101715612d3857612d38612c22565b604052919050565b803560038110612d4e575f80fd5b919050565b5f67ffffffffffffffff821115612d6c57612d6c612c22565b5060051b60200190565b5f60408284031215612d86575f80fd5b612d8e612c36565b9050813560078110612d9e575f80fd5b808252506020820135602082015292915050565b5f6040808385031215612dc3575f80fd5b612dcb612c36565b9150823567ffffffffffffffff80821115612de4575f80fd5b81850191506020808388031215612df9575f80fd5b612e01612c5f565b833583811115612e0f575f80fd5b80850194505087601f850112612e23575f80fd5b83359250612e38612e3384612d53565b612d0f565b83815260069390931b84018201928281019089851115612e56575f80fd5b948301945b84861015612e7c57612e6d8a87612d76565b82529486019490830190612e5b565b8252508552948501359484019490945250909392505050565b5f60408284031215612ea5575f80fd5b612ead612c36565b9050813581526020820135602082015292915050565b803563ffffffff81168114612d4e575f80fd5b5f6040808385031215612ee7575f80fd5b612eef612c36565b9150823567ffffffffffffffff811115612f07575f80fd5b8301601f81018513612f17575f80fd5b80356020612f27612e3383612d53565b82815260a09283028401820192828201919089851115612f45575f80fd5b948301945b84861015612fac5780868b031215612f60575f80fd5b612f68612c82565b612f728b88612d76565b815287870135858201526060612f89818901612ec3565b89830152612f9960808901612ec3565b9082015283529485019491830191612f4a565b50808752505080860135818601525050505092915050565b5f6101c08236031215612fd5575f80fd5b612fdd612ca5565b612fe683612d40565b8152602083013567ffffffffffffffff80821115613002575f80fd5b61300e36838701612db2565b60208401526130203660408701612e95565b60408401526080850135915080821115613038575f80fd5b61304436838701612db2565b606084015260a085013591508082111561305c575f80fd5b5061306936828601612ed6565b60808301525061307c3660c08501612e95565b60a08201526101008084013560c083015261012061309b818601612ec3565b60e08401526101406130ae818701612ec3565b8385015261016092506130c2838701612ec3565b91840191909152610180850135908301526101a090930135928101929092525090565b803567ffffffffffffffff81168114612d4e575f80fd5b5f81830361010081121561310e575f80fd5b613116612cc9565b833581526060601f198301121561312b575f80fd5b613133612cec565b9150613141602085016130e5565b825261314f604085016130e5565b6020830152606084013560408301528160208201526080840135604082015260a0840135606082015260c0840135608082015261318e60e08501612ec3565b60a0820152949350505050565b5f602082840312156131ab575f80fd5b813561ffff81168114611b38575f80fd5b634e487b7160e01b5f52601160045260245ffd5b63ffffffff8181168382160190808211156131ed576131ed6131bc565b5092915050565b634e487b7160e01b5f52603260045260245ffd5b5f5f198203613219576132196131bc565b5060010190565b8082018082111561178d5761178d6131bc565b8181038181111561178d5761178d6131bc565b5f84518060208701845e91909101928352506020820152604001919050565b7f56616c75653a000000000000000000000000000000000000000000000000000081525f600784106132995761329961295a565b5060f89290921b6006830152600782015260270190565b634e487b7160e01b5f52605160045260245ffdfea26469706673582212200a8652f935d521d65628d31f57820731f0f7ac73096de70866d59c9c92e0f4f764736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15`\x0EW_\x80\xFD[Pa2\xFA\x80a\0\x1C_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\0)W_5`\xE0\x1C\x80c\xA9,\xB5\x01\x14a\0-W[_\x80\xFD[a\0@a\0;6`\x04a(cV[a\0WV[`@Qa\0N\x92\x91\x90a*\x8DV[`@Q\x80\x91\x03\x90\xF3[a\0_a'9V[`@\x80Q`\xC0\x81\x01\x82R_\x80\x82R\x82Q``\x80\x82\x01\x85R\x82\x82R` \x80\x83\x01\x84\x90R\x82\x86\x01\x84\x90R\x84\x01\x91\x90\x91R\x92\x82\x01\x81\x90R\x91\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x91\x90\x91Ra\0\xB1\x87a/\xC4V[\x91Pa\0\xC26\x87\x90\x03\x87\x01\x87a0\xFCV[\x90P_a\0\xD2` \x87\x01\x87a1\x9BV[\x90Pa(\x14a\xFF\xFF\x82\x16a\0\xE9WPa\x05\x0Ea\x04\xF0V[_\x19a\xFF\xFF\x83\x16\x01a\0\xFEWPa\x05\x19a\x04\xF0V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xF1a\xFF\xFF\x83\x16\x01a\x012WPa\x05 a\x04\xF0V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xF0a\xFF\xFF\x83\x16\x01a\x01fWPa\x05Fa\x04\xF0V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xF7a\xFF\xFF\x83\x16\x01a\x01\x9AWPa\x06ha\x04\xF0V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xF5a\xFF\xFF\x83\x16\x01a\x01\xCEWPa\x07ma\x04\xF0V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xF4a\xFF\xFF\x83\x16\x01a\x02\x02WPa\x08\x83a\x04\xF0V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xF6a\xFF\xFF\x83\x16\x01a\x026WPa\n~a\x04\xF0V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xEFa\xFF\xFF\x83\x16\x01a\x02jWPa\x0B\xC3a\x04\xF0V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xFDa\xFF\xFF\x83\x16\x01a\x02\x9EWPa\x10Oa\x04\xF0V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xFCa\xFF\xFF\x83\x16\x01a\x02\xD2WPa\x10\xBFa\x04\xF0V[`\x1F\x19a\xFF\xFF\x83\x16\x01a\x02\xE8WPa\x11La\x04\xF0V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xDFa\xFF\xFF\x83\x16\x01a\x03\x1CWPa\x11\x8Ca\x04\xF0V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xDDa\xFF\xFF\x83\x16\x01a\x03PWPa\x11\xCFa\x04\xF0V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xDCa\xFF\xFF\x83\x16\x01a\x03\x84WPa\x11\xF5a\x04\xF0V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xFEa\xFF\xFF\x83\x16\x01a\x03\xB8WPa\x12#a\x04\xF0V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE6a\xFF\xFF\x83\x16\x01a\x03\xECWPa\x12\xBBa\x04\xF0V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE5a\xFF\xFF\x83\x16\x01a\x04 WPa\x12\xC8a\x04\xF0V[`Aa\xFF\xFF\x83\x16\x10\x80\x15\x90a\x04:WP`Da\xFF\xFF\x83\x16\x11\x15[\x15a\x04HWPa\x134a\x04\xF0V[a\xFF\xFF\x82\x16a\x80\x05\x14\x80a\x04aWPa\xFF\xFF\x82\x16a\x80\x06\x14[\x15a\x04oWPa\x14\xA2a\x04\xF0V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xF8a\xFF\xFF\x83\x16\x01a\x04\xA3WPa\x15ra\x04\xF0V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0E`$\x82\x01R\x7FINVALID_OPCODE\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01[`@Q\x80\x91\x03\x90\xFD[a\x05\x01\x84\x84\x89\x89\x89\x86c\xFF\xFF\xFF\xFF\x16V[PP\x96P\x96\x94PPPPPV[PP`\x02\x90\x92RPPV[PPPPPV[_a\x05.\x86`\x80\x01Qa\x15\x80V[\x80Q\x90\x91Pa\x05>\x90\x87\x90a\x16\x9BV[PPPPPPV[a\x05]a\x05R\x86a\x17\x13V[` \x87\x01Q\x90a\x17\x93V[_a\x05k\x86`\x80\x01Qa\x17\x9FV[\x90Pa\x05\xB4a\x05\xA9\x82`@\x01Q`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01RP`@\x80Q\x80\x82\x01\x90\x91R_\x81Rc\xFF\xFF\xFF\xFF\x90\x91\x16` \x82\x01R\x90V[` \x88\x01Q\x90a\x17\x93V[a\x05\xF0a\x05\xA9\x82``\x01Q`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01RP`@\x80Q\x80\x82\x01\x90\x91R_\x81Rc\xFF\xFF\xFF\xFF\x90\x91\x16` \x82\x01R\x90V[` \x84\x015c\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x06JW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\r`$\x82\x01R\x7FBAD_CALL_DATA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xE7V[c\xFF\xFF\xFF\xFF\x16a\x01\0\x87\x01RPP_a\x01 \x90\x94\x01\x93\x90\x93RPPPV[a\x06ta\x05R\x86a\x17\x13V[a\x06\xB0a\x05R\x86`\xE0\x01Q`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01RP`@\x80Q\x80\x82\x01\x90\x91R_\x81Rc\xFF\xFF\xFF\xFF\x90\x91\x16` \x82\x01R\x90V[a\x06\xECa\x05R\x85`\xA0\x01Q`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01RP`@\x80Q\x80\x82\x01\x90\x91R_\x81Rc\xFF\xFF\xFF\xFF\x90\x91\x16` \x82\x01R\x90V[` \x80\x84\x015\x90\x81\x90\x1C`@\x82\x90\x1C\x15a\x07HW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1A`$\x82\x01R\x7FBAD_CROSS_MODULE_CALL_DATA\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xE7V[c\xFF\xFF\xFF\xFF\x90\x81\x16`\xE0\x88\x01R\x16a\x01\0\x86\x01RPP_a\x01 \x90\x93\x01\x92\x90\x92RPPV[a\x07ya\x05R\x86a\x17\x13V[_a\x07\x87\x86`\x80\x01Qa\x17\x9FV[\x90Pa\x07\xC5a\x05\xA9\x82`@\x01Q`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01RP`@\x80Q\x80\x82\x01\x90\x91R_\x81Rc\xFF\xFF\xFF\xFF\x90\x91\x16` \x82\x01R\x90V[a\x08\x01a\x05\xA9\x82``\x01Q`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01RP`@\x80Q\x80\x82\x01\x90\x91R_\x81Rc\xFF\xFF\xFF\xFF\x90\x91\x16` \x82\x01R\x90V[` \x80\x85\x015\x90\x81\x90\x1C`@\x82\x90\x1C\x15a\x08]W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1A`$\x82\x01R\x7FBAD_CROSS_MODULE_CALL_DATA\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xE7V[c\xFF\xFF\xFF\xFF\x90\x81\x16`\xE0\x89\x01R\x16a\x01\0\x87\x01RPP_a\x01 \x90\x94\x01\x93\x90\x93RPPPV[_\x83` \x015\x90P_a\x08\xA1a\x08\x9C\x88` \x01Qa\x18BV[a\x18`V[\x90Pa\x08\xF4`@\x80Q`\xC0\x81\x01\x82R_\x80\x82R\x82Q``\x81\x01\x84R\x81\x81R` \x81\x81\x01\x83\x90R\x93\x81\x01\x91\x90\x91R\x90\x91\x82\x01\x90\x81R_` \x82\x01\x81\x90R`@\x82\x01\x81\x90R``\x82\x01\x81\x90R`\x80\x90\x91\x01R\x90V[`@\x80Q` \x81\x01\x90\x91R``\x81R_a\t\x0F\x87\x87\x83a\x19\x1CV[\x90\x93P\x90Pa\t\x1F\x87\x87\x83a\x1A\x1EV[a\x01`\x8C\x01Q\x91\x93P\x91Pa\t?\x83c\xFF\xFF\xFF\xFF\x80\x88\x16\x90\x87\x90a\x1A\xEB\x16V[\x14a\t\xB2W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\"`$\x82\x01R\x7FCROSS_MODULE_INTERNAL_MODULES_RO`D\x82\x01R\x7FOT\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x04\xE7V[a\t\xC9a\t\xBE\x8Ba\x17\x13V[` \x8C\x01Q\x90a\x17\x93V[a\n\x05a\t\xBE\x8B`\xE0\x01Q`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01RP`@\x80Q\x80\x82\x01\x90\x91R_\x81Rc\xFF\xFF\xFF\xFF\x90\x91\x16` \x82\x01R\x90V[a\nAa\t\xBE\x8A`\xA0\x01Q`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01RP`@\x80Q\x80\x82\x01\x90\x91R_\x81Rc\xFF\xFF\xFF\xFF\x90\x91\x16` \x82\x01R\x90V[c\xFF\xFF\xFF\xFF\x84\x16`\xE0\x8B\x01R`\xA0\x83\x01Qa\n\\\x90\x86a1\xD0V[c\xFF\xFF\xFF\xFF\x16a\x01\0\x8B\x01RPP_a\x01 \x90\x98\x01\x97\x90\x97RPPPPPPPV[a\n\x8Aa\x05R\x86a\x17\x13V[a\n\xC6a\x05R\x86`\xE0\x01Q`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01RP`@\x80Q\x80\x82\x01\x90\x91R_\x81Rc\xFF\xFF\xFF\xFF\x90\x91\x16` \x82\x01R\x90V[a\x0B\x02a\x05R\x85`\xA0\x01Q`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01RP`@\x80Q\x80\x82\x01\x90\x91R_\x81Rc\xFF\xFF\xFF\xFF\x90\x91\x16` \x82\x01R\x90V[_a\x0B\x10\x86`\x80\x01Qa\x17\x9FV[\x90P\x80``\x01Qc\xFF\xFF\xFF\xFF\x16_\x03a\x0B-WP`\x02\x85Ra\x05\x19V[` \x84\x015c\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x0B\x87W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1D`$\x82\x01R\x7FBAD_CALLER_INTERNAL_CALL_DATA\0\0\0`D\x82\x01R`d\x01a\x04\xE7V[`@\x82\x01Qc\xFF\xFF\xFF\xFF\x16`\xE0\x88\x01R``\x82\x01Qa\x0B\xA7\x90\x82\x90a1\xD0V[c\xFF\xFF\xFF\xFF\x16a\x01\0\x88\x01RPP_a\x01 \x86\x01RPPPPPV[_\x80a\x0B\xD5a\x08\x9C\x88` \x01Qa\x18BV[\x90P_\x80_\x80\x80_a\x0B\xF3`@Q\x80` \x01`@R\x80``\x81RP\x90V[a\x0B\xFE\x8B\x8B\x87a\x1B?V[\x95P\x93Pa\x0C\r\x8B\x8B\x87a\x1B\x9BV[\x90\x96P\x94Pa\x0C\x1D\x8B\x8B\x87a\x1B\xB6V[\x95P\x92Pa\x0C,\x8B\x8B\x87a\x1B?V[\x95P\x91Pa\x0C;\x8B\x8B\x87a\x1B\x9BV[\x90\x97P\x94Pa\x0CK\x8B\x8B\x87a\x1A\x1EV[`@Q\x7FCall indirect:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xC0\x88\x90\x1B\x16`.\x82\x01R`6\x81\x01\x89\x90R\x90\x96P\x90\x91P_\x90`V\x01`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R\x80Q` \x91\x82\x01 \x91P\x8D\x015\x81\x14a\r\x1DW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x16`$\x82\x01R\x7FBAD_CALL_INDIRECT_DATA\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xE7V[a\r4\x82g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x87\x16\x86\x86\x8Ca\x1B\xEBV[\x90P\x8D`@\x01Q\x81\x14a\r\x89W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0F`$\x82\x01R\x7FBAD_TABLES_ROOT\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xE7V[\x82g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x89c\xFF\xFF\xFF\xFF\x16\x10a\r\xB4WPP`\x02\x8DRPa\x05\x19\x96PPPPPPPV[PPPPP_a\r\xD3`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x90V[`@\x80Q` \x81\x01\x90\x91R``\x81Ra\r\xED\x8A\x8A\x86a\x1B\x9BV[\x94P\x92Pa\r\xFC\x8A\x8A\x86a\x1C\xDEV[\x94P\x91Pa\x0E\x0B\x8A\x8A\x86a\x1A\x1EV[\x94P\x90P_a\x0E'\x82c\xFF\xFF\xFF\xFF\x80\x8B\x16\x90\x87\x90\x87\x90a\x1D\xE6\x16V[\x90P\x86\x81\x14a\x0ExW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x11`$\x82\x01R\x7FBAD_ELEMENTS_ROOT\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xE7V[\x85\x84\x14a\x0E\xA8W\x8D`\x02[\x90\x81`\x02\x81\x11\x15a\x0E\x96Wa\x0E\x96a)ZV[\x81RPPPPPPPPPPPa\x05\x19V[`\x04\x83Q`\x06\x81\x11\x15a\x0E\xBDWa\x0E\xBDa)ZV[\x03a\x0E\xCAW\x8D`\x02a\x0E\x83V[`\x05\x83Q`\x06\x81\x11\x15a\x0E\xDFWa\x0E\xDFa)ZV[\x03a\x0FEW` \x83\x01Q\x98Pc\xFF\xFF\xFF\xFF\x89\x16\x89\x14a\x0F@W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x15`$\x82\x01R\x7FBAD_FUNC_REF_CONTENTS\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xE7V[a\x0F\x8DV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\r`$\x82\x01R\x7FBAD_ELEM_TYPE\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xE7V[PPPPPPPPa\x0F\xA1a\x05\xA9\x87a\x17\x13V[_a\x0F\xAF\x87`\x80\x01Qa\x17\x9FV[\x90Pa\x0F\xF8a\x0F\xED\x82`@\x01Q`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01RP`@\x80Q\x80\x82\x01\x90\x91R_\x81Rc\xFF\xFF\xFF\xFF\x90\x91\x16` \x82\x01R\x90V[` \x89\x01Q\x90a\x17\x93V[a\x104a\x0F\xED\x82``\x01Q`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01RP`@\x80Q\x80\x82\x01\x90\x91R_\x81Rc\xFF\xFF\xFF\xFF\x90\x91\x16` \x82\x01R\x90V[Pc\xFF\xFF\xFF\xFF\x16a\x01\0\x86\x01R_a\x01 \x86\x01RPPPPPV[` \x83\x015c\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x10\xA9W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\r`$\x82\x01R\x7FBAD_CALL_DATA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xE7V[c\xFF\xFF\xFF\xFF\x16a\x01 \x90\x95\x01\x94\x90\x94RPPPPV[_a\x10\xD0a\x08\x9C\x87` \x01Qa\x18BV[\x90Pc\xFF\xFF\xFF\xFF\x81\x16\x15a\x05>W` \x84\x015c\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x118W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\r`$\x82\x01R\x7FBAD_CALL_DATA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xE7V[c\xFF\xFF\xFF\xFF\x16a\x01 \x87\x01RPPPPPPV[_a\x11Z\x86`\x80\x01Qa\x17\x9FV[\x90P_a\x11q\x82` \x01Q\x86` \x015\x86\x86a\x1E\x90V[` \x88\x01Q\x90\x91Pa\x11\x83\x90\x82a\x17\x93V[PPPPPPPV[_a\x11\x9A\x86` \x01Qa\x18BV[\x90P_a\x11\xAA\x87`\x80\x01Qa\x17\x9FV[\x90Pa\x11\xC1\x81` \x01Q\x86` \x015\x84\x87\x87a\x1FTV[` \x90\x91\x01RPPPPPPV[_a\x11\xE3\x85_\x01Q\x85` \x015\x85\x85a\x1E\x90V[` \x87\x01Q\x90\x91Pa\x05>\x90\x82a\x17\x93V[_a\x12\x03\x86` \x01Qa\x18BV[\x90Pa\x12\x19\x85_\x01Q\x85` \x015\x83\x86\x86a\x1FTV[\x90\x94RPPPPPV[_a\x121\x86` \x01Qa\x18BV[\x90P_a\x12A\x87` \x01Qa\x18BV[\x90P_a\x12Q\x88` \x01Qa\x18BV[\x90P_`@Q\x80`\x80\x01`@R\x80\x83\x81R` \x01\x88` \x015_\x1B\x81R` \x01a\x12z\x85a\x18`V[c\xFF\xFF\xFF\xFF\x16\x81R` \x01a\x12\x8E\x86a\x18`V[c\xFF\xFF\xFF\xFF\x16\x81RP\x90Pa\x12\xB0\x81\x8A`\x80\x01Qa \x1A\x90\x91\x90c\xFF\xFF\xFF\xFF\x16V[PPPPPPPPPV[a\x05>\x85` \x01Qa\x18BV[_a\x12\xD9a\x08\x9C\x87` \x01Qa\x18BV[\x90P_a\x12\xE9\x87` \x01Qa\x18BV[\x90P_a\x12\xF9\x88` \x01Qa\x18BV[\x90Pc\xFF\xFF\xFF\xFF\x83\x16\x15a\x13\x1BW` \x88\x01Qa\x13\x16\x90\x82a\x17\x93V[a\x13*V[` \x88\x01Qa\x13*\x90\x83a\x17\x93V[PPPPPPPPV[_a\x13B` \x85\x01\x85a1\x9BV[\x90P_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xBFa\xFF\xFF\x83\x16\x01a\x13wWP_a\x14XV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xBEa\xFF\xFF\x83\x16\x01a\x13\xAAWP`\x01a\x14XV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xBDa\xFF\xFF\x83\x16\x01a\x13\xDDWP`\x02a\x14XV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xBCa\xFF\xFF\x83\x16\x01a\x14\x10WP`\x03a\x14XV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x19`$\x82\x01R\x7FCONST_PUSH_INVALID_OPCODE\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xE7V[a\x11\x83`@Q\x80`@\x01`@R\x80\x83`\x06\x81\x11\x15a\x14xWa\x14xa)ZV[\x81R` \x01\x87` \x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RP\x88` \x01Qa\x17\x93\x90\x91\x90c\xFF\xFF\xFF\xFF\x16V[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01Ra\x80\x05a\x14\xC5` \x86\x01\x86a1\x9BV[a\xFF\xFF\x16\x03a\x14\xF2Wa\x14\xDB\x86` \x01Qa\x18BV[``\x87\x01Q\x90\x91Pa\x14\xED\x90\x82a\x17\x93V[a\x05>V[a\x80\x06a\x15\x02` \x86\x01\x86a1\x9BV[a\xFF\xFF\x16\x03a\x15*Wa\x15\x18\x86``\x01Qa\x18BV[` \x87\x01Q\x90\x91Pa\x14\xED\x90\x82a\x17\x93V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1C`$\x82\x01R\x7FMOVE_INTERNAL_INVALID_OPCODE\0\0\0\0`D\x82\x01R`d\x01a\x04\xE7V[_a\x11\xE3\x86` \x01Qa!\x18V[`@\x80Q`\xC0\x81\x01\x82R_`\x80\x82\x01\x81\x81R`\xA0\x83\x01\x82\x90R\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x91\x90\x91R\x81QQ`\x01\x14a\x16\x02W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x11`$\x82\x01R\x7FBAD_WINDOW_LENGTH\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xE7V[\x81Q\x80Q_\x90a\x16\x14Wa\x16\x14a1\xF4V[` \x02` \x01\x01Q\x90P_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x167Wa\x167a,\"V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x16\x94W\x81` \x01[`@\x80Q`\xC0\x81\x01\x82R_`\x80\x82\x01\x81\x81R`\xA0\x83\x01\x82\x90R\x82R` \x80\x83\x01\x82\x90R\x92\x82\x01\x81\x90R``\x82\x01R\x82R_\x19\x90\x92\x01\x91\x01\x81a\x16UW\x90P[P\x90\x91R\x90V[`\x04\x81Q`\x06\x81\x11\x15a\x16\xB0Wa\x16\xB0a)ZV[\x03a\x16\xD3W\x81`\x02[\x90\x81`\x02\x81\x11\x15a\x16\xCCWa\x16\xCCa)ZV[\x90RPPPV[`\x06\x81Q`\x06\x81\x11\x15a\x16\xE8Wa\x16\xE8a)ZV[\x14a\x16\xF5W\x81`\x02a\x16\xB9V[a\x17\x03\x82\x82` \x01Qa!EV[a\x17\x0FW\x81`\x02a\x16\xB9V[PPV[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01Ra\x17\x8D\x82a\x01 \x01Q\x83a\x01\0\x01Q\x84`\xE0\x01Q`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01RP`@\x80Q\x80\x82\x01\x82R`\x06\x81Rc\xFF\xFF\xFF\xFF\x94\x90\x94\x16` \x93\x84\x1Bg\xFF\xFF\xFF\xFF\0\0\0\0\x16\x17\x91\x90\x1Bk\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\x16\x17\x90\x82\x01R\x90V[\x92\x91PPV[\x81Qa\x17\x0F\x90\x82a!\x85V[`@\x80Q`\xC0\x81\x01\x82R_`\x80\x82\x01\x81\x81R`\xA0\x83\x01\x82\x90R\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x91\x90\x91R\x81QQ`\x01\x14a\x18!W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x11`$\x82\x01R\x7FBAD_WINDOW_LENGTH\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xE7V[\x81Q\x80Q_\x90a\x183Wa\x183a1\xF4V[` \x02` \x01\x01Q\x90P\x91\x90PV[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x81Qa\x17\x8D\x90a\"AV[` \x81\x01Q_\x90\x81\x83Q`\x06\x81\x11\x15a\x18{Wa\x18{a)ZV[\x14a\x18\xC8W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FNOT_I32\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xE7V[d\x01\0\0\0\0\x81\x10a\x17\x8DW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FBAD_I32\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xE7V[`@\x80Q`\xC0\x81\x01\x82R_\x80\x82R\x82Q``\x80\x82\x01\x85R\x82\x82R` \x80\x83\x01\x84\x90R\x82\x86\x01\x84\x90R\x84\x01\x91\x90\x91R\x92\x82\x01\x81\x90R\x91\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x91\x90\x91R`@\x80Q``\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R\x83\x91\x90_\x80_\x80a\x19\x92\x8B\x8B\x89a\x1B\x9BV[\x97P\x95Pa\x19\xA1\x8B\x8B\x89a#;V[\x97P\x94Pa\x19\xB0\x8B\x8B\x89a\x1B\x9BV[\x97P\x93Pa\x19\xBF\x8B\x8B\x89a\x1B\x9BV[\x97P\x92Pa\x19\xCE\x8B\x8B\x89a\x1B\x9BV[\x97P\x91Pa\x19\xDD\x8B\x8B\x89a#\xB5V[`@\x80Q`\xC0\x81\x01\x82R\x98\x89R` \x89\x01\x97\x90\x97R\x95\x87\x01\x94\x90\x94RP``\x85\x01\x91\x90\x91R`\x80\x84\x01Rc\xFF\xFF\xFF\xFF\x16`\xA0\x83\x01R\x90\x96\x90\x95P\x93PPPPV[`@\x80Q` \x81\x01\x90\x91R``\x81R\x81_a\x1A:\x86\x86\x84a\x1B\xB6V[\x92P\x90P_`\xFF\x82\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1A[Wa\x1A[a,\"V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x1A\x84W\x81` \x01` \x82\x02\x806\x837\x01\x90P[P\x90P_[\x82`\xFF\x16\x81`\xFF\x16\x10\x15a\x1A\xCFWa\x1A\xA2\x88\x88\x86a\x1B\x9BV[\x83\x83`\xFF\x16\x81Q\x81\x10a\x1A\xB7Wa\x1A\xB7a1\xF4V[` \x90\x81\x02\x91\x90\x91\x01\x01\x91\x90\x91R\x93P`\x01\x01a\x1A\x89V[P`@Q\x80` \x01`@R\x80\x82\x81RP\x93PPP\x93P\x93\x91PPV[_a\x1B5\x84\x84a\x1A\xFA\x85a$\x04V[`@Q\x80`@\x01`@R\x80`\x13\x81R` \x01\x7FModule merkle tree:\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RPa$\xC9V[\x90P[\x93\x92PPPV[_\x81\x81[`\x08\x81\x10\x15a\x1B\x92W`\x08\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x1B\x92P\x85\x85\x83\x81\x81\x10a\x1BoWa\x1Boa1\xF4V[\x91\x90\x91\x015`\xF8\x1C\x93\x90\x93\x17\x92P\x81a\x1B\x87\x81a2\x08V[\x92PP`\x01\x01a\x1BCV[P\x93P\x93\x91PPV[_\x81\x81a\x1B\xA9\x86\x86\x84a%\xD3V[\x90\x97\x90\x96P\x94PPPPPV[_\x81\x84\x84\x82\x81\x81\x10a\x1B\xCAWa\x1B\xCAa1\xF4V[\x91\x90\x91\x015`\xF8\x1C\x92P\x81\x90Pa\x1B\xE0\x81a2\x08V[\x91PP\x93P\x93\x91PPV[`@Q\x7FTable:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R\x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xF8\x85\x90\x1B\x16`&\x82\x01R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xC0\x84\x90\x1B\x16`'\x82\x01R`/\x81\x01\x82\x90R_\x90\x81\x90`O\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90Pa\x1C\xD3\x87\x87\x83`@Q\x80`@\x01`@R\x80`\x12\x81R` \x01\x7FTable merkle tree:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RPa$\xC9V[\x97\x96PPPPPPPV[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x81_\x85\x85\x83\x81\x81\x10a\x1D\x05Wa\x1D\x05a1\xF4V[\x91\x90\x91\x015`\xF8\x1C\x91P\x82\x90Pa\x1D\x1B\x81a2\x08V[\x92PPa\x1D&`\x06\x90V[`\x06\x81\x11\x15a\x1D7Wa\x1D7a)ZV[`\xFF\x16\x81`\xFF\x16\x11\x15a\x1D\x8CW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0E`$\x82\x01R\x7FBAD_VALUE_TYPE\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xE7V[_a\x1D\x98\x87\x87\x85a%\xD3V[\x80\x94P\x81\x92PPP`@Q\x80`@\x01`@R\x80\x83`\xFF\x16`\x06\x81\x11\x15a\x1D\xC0Wa\x1D\xC0a)ZV[`\x06\x81\x11\x15a\x1D\xD1Wa\x1D\xD1a)ZV[\x81R` \x01\x82\x81RP\x93PPP\x93P\x93\x91PPV[_\x80\x83a\x1D\xF2\x84a&\x1CV[`@Q\x7FTable element:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`.\x81\x01\x92\x90\x92R`N\x82\x01R`n\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90Pa\x1E\x84\x86\x86\x83`@Q\x80`@\x01`@R\x80`\x1A\x81R` \x01\x7FTable element merkle tree:\0\0\0\0\0\0\x81RPa$\xC9V[\x91PP[\x94\x93PPPPV[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R_a\x1E\xBD`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x90V[`@\x80Q` \x81\x01\x90\x91R``\x81Ra\x1E\xD7\x86\x86\x85a\x1C\xDEV[\x93P\x91Pa\x1E\xE6\x86\x86\x85a\x1A\x1EV[\x93P\x90P_a\x1E\xF6\x82\x89\x85a&7V[\x90P\x88\x81\x14a\x1FGW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x11`$\x82\x01R\x7FWRONG_MERKLE_ROOT\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xE7V[P\x90\x97\x96PPPPPPPV[_a\x1Fn`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x90V[_a\x1F\x85`@Q\x80` \x01`@R\x80``\x81RP\x90V[a\x1F\x90\x86\x86\x84a\x1C\xDEV[\x90\x93P\x91Pa\x1F\xA0\x86\x86\x84a\x1A\x1EV[\x92P\x90P_a\x1F\xB0\x82\x8A\x86a&7V[\x90P\x89\x81\x14a \x01W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x11`$\x82\x01R\x7FWRONG_MERKLE_ROOT\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xE7V[a \x0C\x82\x8A\x8Aa&7V[\x9A\x99PPPPPPPPPPV[\x81QQ_\x90a *\x90`\x01a2 V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a BWa Ba,\"V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a \x9FW\x81` \x01[`@\x80Q`\xC0\x81\x01\x82R_`\x80\x82\x01\x81\x81R`\xA0\x83\x01\x82\x90R\x82R` \x80\x83\x01\x82\x90R\x92\x82\x01\x81\x90R``\x82\x01R\x82R_\x19\x90\x92\x01\x91\x01\x81a `W\x90P[P\x90P_[\x83QQ\x81\x10\x15a \xEFW\x83Q\x80Q\x82\x90\x81\x10a \xC2Wa \xC2a1\xF4V[` \x02` \x01\x01Q\x82\x82\x81Q\x81\x10a \xDCWa \xDCa1\xF4V[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a \xA4V[P\x81\x81\x84_\x01QQ\x81Q\x81\x10a!\x07Wa!\x07a1\xF4V[` \x90\x81\x02\x91\x90\x91\x01\x01R\x90\x91RPV[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x81QQQa\x1B8a!=`\x01\x83a23V[\x84Q\x90a&\x81V[_``\x82\x90\x1C\x15a!WWP_a\x17\x8DV[Pc\xFF\xFF\xFF\xFF\x81\x81\x16a\x01 \x84\x01R` \x82\x90\x1C\x81\x16a\x01\0\x84\x01R`@\x91\x90\x91\x1C\x16`\xE0\x90\x91\x01R`\x01\x90V[\x81QQ_\x90a!\x95\x90`\x01a2 V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a!\xADWa!\xADa,\"V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a!\xF1W\x81` \x01[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x81R` \x01\x90`\x01\x90\x03\x90\x81a!\xCBW\x90P[P\x90P_[\x83QQ\x81\x10\x15a \xEFW\x83Q\x80Q\x82\x90\x81\x10a\"\x14Wa\"\x14a1\xF4V[` \x02` \x01\x01Q\x82\x82\x81Q\x81\x10a\".Wa\".a1\xF4V[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a!\xF6V[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x81Q\x80Qa\"d\x90`\x01\x90a23V[\x81Q\x81\x10a\"tWa\"ta1\xF4V[` \x02` \x01\x01Q\x90P_`\x01\x83_\x01QQa\"\x90\x91\x90a23V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\"\xA8Wa\"\xA8a,\"V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\"\xECW\x81` \x01[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x81R` \x01\x90`\x01\x90\x03\x90\x81a\"\xC6W\x90P[P\x90P_[\x81Q\x81\x10\x15a\x16\x94W\x83Q\x80Q\x82\x90\x81\x10a#\x0EWa#\x0Ea1\xF4V[` \x02` \x01\x01Q\x82\x82\x81Q\x81\x10a#(Wa#(a1\xF4V[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a\"\xF1V[`@\x80Q``\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x91\x90\x91R\x81_\x80\x80a#f\x88\x88\x86a\x1B?V[\x94P\x92Pa#u\x88\x88\x86a\x1B?V[\x94P\x91Pa#\x84\x88\x88\x86a\x1B\x9BV[`@\x80Q``\x81\x01\x82Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x96\x87\x16\x81R\x94\x90\x95\x16` \x85\x01R\x93\x83\x01RP\x96\x90\x95P\x93PPPPV[_\x81\x81[`\x04\x81\x10\x15a\x1B\x92W`\x08\x83c\xFF\xFF\xFF\xFF\x16\x90\x1B\x92P\x85\x85\x83\x81\x81\x10a#\xE1Wa#\xE1a1\xF4V[\x91\x90\x91\x015`\xF8\x1C\x93\x90\x93\x17\x92P\x81a#\xF9\x81a2\x08V[\x92PP`\x01\x01a#\xB9V[_\x81_\x01Qa$\x16\x83` \x01Qa&\xB8V[`@\x80\x85\x01Q``\x86\x01Q`\x80\x87\x01Q`\xA0\x88\x01Q\x93Qa$\xAC\x96\x95\x94\x90` \x01\x7FModule:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x07\x81\x01\x96\x90\x96R`'\x86\x01\x94\x90\x94R`G\x85\x01\x92\x90\x92R`g\x84\x01R`\x87\x83\x01R`\xE0\x1B\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16`\xA7\x82\x01R`\xAB\x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P\x91\x90PV[\x81_[\x85QQ\x81\x10\x15a%\x84W\x84`\x01\x16_\x03a%.W\x82\x82\x87_\x01Q\x83\x81Q\x81\x10a$\xF7Wa$\xF7a1\xF4V[` \x02` \x01\x01Q`@Q` \x01a%\x11\x93\x92\x91\x90a2FV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x91Pa%xV[\x82\x86_\x01Q\x82\x81Q\x81\x10a%DWa%Da1\xF4V[` \x02` \x01\x01Q\x83`@Q` \x01a%_\x93\x92\x91\x90a2FV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x91P[`\x01\x94\x85\x1C\x94\x01a$\xCCV[P\x83\x15a\x1E\x88W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0F`$\x82\x01R\x7FPROOF_TOO_SHORT\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xE7V[_\x81\x81[` \x81\x10\x15a\x1B\x92W`\x08\x83\x90\x1B\x92P\x85\x85\x83\x81\x81\x10a%\xF9Wa%\xF9a1\xF4V[\x91\x90\x91\x015`\xF8\x1C\x93\x90\x93\x17\x92P\x81a&\x11\x81a2\x08V[\x92PP`\x01\x01a%\xD7V[_\x81_\x01Q\x82` \x01Q`@Q` \x01a$\xAC\x92\x91\x90a2eV[_a\x1B5\x84\x84a&F\x85a&\x1CV[`@Q\x80`@\x01`@R\x80`\x12\x81R` \x01\x7FValue merkle tree:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RPa$\xC9V[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x82Q\x80Q\x83\x90\x81\x10a&\xA8Wa&\xA8a1\xF4V[` \x02` \x01\x01Q\x90P\x92\x91PPV[\x80Q` \x80\x83\x01Q`@\x80\x85\x01Q\x90Q\x7FMemory:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x93\x81\x01\x93\x90\x93R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xC0\x94\x85\x1B\x81\x16`'\x85\x01R\x91\x90\x93\x1B\x16`/\x82\x01R`7\x81\x01\x91\x90\x91R_\x90`W\x01a$\xACV[`@\x80Qa\x01\x80\x81\x01\x90\x91R\x80_\x81R` \x01a'l`@\x80Q``\x80\x82\x01\x83R\x91\x81\x01\x91\x82R\x90\x81R_` \x82\x01R\x90V[\x81R`@\x80Q\x80\x82\x01\x82R_\x80\x82R` \x80\x83\x01\x91\x90\x91R\x83\x01R\x01a'\xA8`@\x80Q``\x80\x82\x01\x83R\x91\x81\x01\x91\x82R\x90\x81R_` \x82\x01R\x90V[\x81R` \x01a'\xCC`@Q\x80`@\x01`@R\x80``\x81R` \x01_\x80\x19\x16\x81RP\x90V[\x81R`@\x80Q\x80\x82\x01\x82R_\x80\x82R` \x80\x83\x01\x82\x90R\x84\x01\x91\x90\x91R\x90\x82\x01\x81\x90R``\x82\x01\x81\x90R`\x80\x82\x01\x81\x90R`\xA0\x82\x01\x81\x90R`\xC0\x82\x01\x81\x90R`\xE0\x90\x91\x01R\x90V[a(\x1Ca2\xB0V[V[_\x80\x83`\x1F\x84\x01\x12a(.W_\x80\xFD[P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a(EW_\x80\xFD[` \x83\x01\x91P\x83` \x82\x85\x01\x01\x11\x15a(\\W_\x80\xFD[\x92P\x92\x90PV[_\x80_\x80_\x80\x86\x88\x03a\x01\xE0\x81\x12\x15a(zW_\x80\xFD[``\x81\x12\x15a(\x87W_\x80\xFD[\x87\x96P``\x88\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a(\xA4W_\x80\xFD[\x81\x8A\x01\x91Pa\x01\xC0\x80\x83\x8D\x03\x12\x15a(\xBAW_\x80\xFD[\x82\x98Pa\x01\0\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x85\x01\x12\x15a(\xEDW_\x80\xFD[`\x80\x8B\x01\x97P`@\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFE\x80\x85\x01\x12\x15a)\"W_\x80\xFD[a\x01\x80\x8B\x01\x96P\x8A\x015\x92P\x80\x83\x11\x15a):W_\x80\xFD[PPa)H\x89\x82\x8A\x01a(\x1EV[\x97\x9A\x96\x99P\x94\x97P\x92\x95\x93\x94\x92PPPV[cNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[`\x03\x81\x10a)~Wa)~a)ZV[\x90RV[\x80Q`\x07\x81\x10a)\x94Wa)\x94a)ZV[\x82R` \x90\x81\x01Q\x91\x01RV[\x80Q`@\x80\x84R\x90Q` \x84\x83\x01\x81\x90R\x81Q``\x86\x01\x81\x90R_\x93\x92\x82\x01\x91\x84\x91`\x80\x88\x01\x90[\x80\x84\x10\x15a)\xF0Wa)\xDC\x82\x86Qa)\x82V[\x93\x82\x01\x93`\x01\x93\x90\x93\x01\x92\x90\x85\x01\x90a)\xC9V[P` \x87\x01Q` \x89\x01R\x80\x95PPPPPP\x92\x91PPV[\x80Q`@\x80\x84R\x81Q\x84\x82\x01\x81\x90R_\x92``\x91` \x91\x82\x01\x91\x83\x88\x01\x91\x90\x86[\x82\x81\x10\x15a*sW\x84Qa*?\x85\x82Qa)\x82V[\x80\x83\x01Q\x85\x89\x01R\x87\x81\x01Qc\xFF\xFF\xFF\xFF\x90\x81\x16\x88\x87\x01R\x90\x87\x01Q\x16`\x80\x85\x01R\x93\x81\x01\x93`\xA0\x90\x93\x01\x92`\x01\x01a**V[PPP` \x86\x01Q` \x88\x01R\x80\x94PPPPP\x92\x91PPV[_a\x01 \x80\x83Ra*\xA1\x81\x84\x01\x86Qa)nV[` \x85\x01Qa\x01\xC0a\x01@\x81\x81\x87\x01Ra*\xBFa\x02\xE0\x87\x01\x84a)\xA1V[\x92P`@\x88\x01Qa\x01`a*\xDF\x81\x89\x01\x83\x80Q\x82R` \x90\x81\x01Q\x91\x01RV[``\x8A\x01Q\x91P\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFE\xE0\x80\x89\x87\x03\x01a\x01\xA0\x8A\x01Ra+\x1C\x86\x84a)\xA1V[\x95P`\x80\x8B\x01Q\x92P\x80\x89\x87\x03\x01\x85\x8A\x01RPa+9\x85\x83a*\tV[`\xA0\x8B\x01Q\x80Qa\x01\xE0\x8B\x01R` \x81\x01Qa\x02\0\x8B\x01R\x90\x95P\x93P`\xC0\x8A\x01Qa\x02 \x89\x01R`\xE0\x8A\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x02@\x8A\x01R\x93Pa\x01\0\x8A\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x02`\x8A\x01R\x93P\x94\x89\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x02\x80\x89\x01R\x94\x91\x89\x01Qa\x02\xA0\x88\x01RP\x87\x01Qa\x02\xC0\x86\x01RP\x91Pa\x1B8\x90P` \x83\x01\x84\x80Q\x82R` \x81\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82Q\x16` \x85\x01R\x80` \x83\x01Q\x16`@\x85\x01RP`@\x81\x01Q``\x84\x01RP`@\x81\x01Q`\x80\x83\x01R``\x81\x01Q`\xA0\x83\x01R`\x80\x81\x01Q`\xC0\x83\x01Rc\xFF\xFF\xFF\xFF`\xA0\x82\x01Q\x16`\xE0\x83\x01RPPV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@\x80Q\x90\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a,YWa,Ya,\"V[`@R\x90V[`@Q` \x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a,YWa,Ya,\"V[`@Q`\x80\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a,YWa,Ya,\"V[`@Qa\x01\x80\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a,YWa,Ya,\"V[`@Q`\xC0\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a,YWa,Ya,\"V[`@Q``\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a,YWa,Ya,\"V[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a-8Wa-8a,\"V[`@R\x91\x90PV[\x805`\x03\x81\x10a-NW_\x80\xFD[\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a-lWa-la,\"V[P`\x05\x1B` \x01\x90V[_`@\x82\x84\x03\x12\x15a-\x86W_\x80\xFD[a-\x8Ea,6V[\x90P\x815`\x07\x81\x10a-\x9EW_\x80\xFD[\x80\x82RP` \x82\x015` \x82\x01R\x92\x91PPV[_`@\x80\x83\x85\x03\x12\x15a-\xC3W_\x80\xFD[a-\xCBa,6V[\x91P\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a-\xE4W_\x80\xFD[\x81\x85\x01\x91P` \x80\x83\x88\x03\x12\x15a-\xF9W_\x80\xFD[a.\x01a,_V[\x835\x83\x81\x11\x15a.\x0FW_\x80\xFD[\x80\x85\x01\x94PP\x87`\x1F\x85\x01\x12a.#W_\x80\xFD[\x835\x92Pa.8a.3\x84a-SV[a-\x0FV[\x83\x81R`\x06\x93\x90\x93\x1B\x84\x01\x82\x01\x92\x82\x81\x01\x90\x89\x85\x11\x15a.VW_\x80\xFD[\x94\x83\x01\x94[\x84\x86\x10\x15a.|Wa.m\x8A\x87a-vV[\x82R\x94\x86\x01\x94\x90\x83\x01\x90a.[V[\x82RP\x85R\x94\x85\x015\x94\x84\x01\x94\x90\x94RP\x90\x93\x92PPPV[_`@\x82\x84\x03\x12\x15a.\xA5W_\x80\xFD[a.\xADa,6V[\x90P\x815\x81R` \x82\x015` \x82\x01R\x92\x91PPV[\x805c\xFF\xFF\xFF\xFF\x81\x16\x81\x14a-NW_\x80\xFD[_`@\x80\x83\x85\x03\x12\x15a.\xE7W_\x80\xFD[a.\xEFa,6V[\x91P\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a/\x07W_\x80\xFD[\x83\x01`\x1F\x81\x01\x85\x13a/\x17W_\x80\xFD[\x805` a/'a.3\x83a-SV[\x82\x81R`\xA0\x92\x83\x02\x84\x01\x82\x01\x92\x82\x82\x01\x91\x90\x89\x85\x11\x15a/EW_\x80\xFD[\x94\x83\x01\x94[\x84\x86\x10\x15a/\xACW\x80\x86\x8B\x03\x12\x15a/`W_\x80\xFD[a/ha,\x82V[a/r\x8B\x88a-vV[\x81R\x87\x87\x015\x85\x82\x01R``a/\x89\x81\x89\x01a.\xC3V[\x89\x83\x01Ra/\x99`\x80\x89\x01a.\xC3V[\x90\x82\x01R\x83R\x94\x85\x01\x94\x91\x83\x01\x91a/JV[P\x80\x87RPP\x80\x86\x015\x81\x86\x01RPPPP\x92\x91PPV[_a\x01\xC0\x826\x03\x12\x15a/\xD5W_\x80\xFD[a/\xDDa,\xA5V[a/\xE6\x83a-@V[\x81R` \x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a0\x02W_\x80\xFD[a0\x0E6\x83\x87\x01a-\xB2V[` \x84\x01Ra0 6`@\x87\x01a.\x95V[`@\x84\x01R`\x80\x85\x015\x91P\x80\x82\x11\x15a08W_\x80\xFD[a0D6\x83\x87\x01a-\xB2V[``\x84\x01R`\xA0\x85\x015\x91P\x80\x82\x11\x15a0\\W_\x80\xFD[Pa0i6\x82\x86\x01a.\xD6V[`\x80\x83\x01RPa0|6`\xC0\x85\x01a.\x95V[`\xA0\x82\x01Ra\x01\0\x80\x84\x015`\xC0\x83\x01Ra\x01 a0\x9B\x81\x86\x01a.\xC3V[`\xE0\x84\x01Ra\x01@a0\xAE\x81\x87\x01a.\xC3V[\x83\x85\x01Ra\x01`\x92Pa0\xC2\x83\x87\x01a.\xC3V[\x91\x84\x01\x91\x90\x91Ra\x01\x80\x85\x015\x90\x83\x01Ra\x01\xA0\x90\x93\x015\x92\x81\x01\x92\x90\x92RP\x90V[\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a-NW_\x80\xFD[_\x81\x83\x03a\x01\0\x81\x12\x15a1\x0EW_\x80\xFD[a1\x16a,\xC9V[\x835\x81R```\x1F\x19\x83\x01\x12\x15a1+W_\x80\xFD[a13a,\xECV[\x91Pa1A` \x85\x01a0\xE5V[\x82Ra1O`@\x85\x01a0\xE5V[` \x83\x01R``\x84\x015`@\x83\x01R\x81` \x82\x01R`\x80\x84\x015`@\x82\x01R`\xA0\x84\x015``\x82\x01R`\xC0\x84\x015`\x80\x82\x01Ra1\x8E`\xE0\x85\x01a.\xC3V[`\xA0\x82\x01R\x94\x93PPPPV[_` \x82\x84\x03\x12\x15a1\xABW_\x80\xFD[\x815a\xFF\xFF\x81\x16\x81\x14a\x1B8W_\x80\xFD[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[c\xFF\xFF\xFF\xFF\x81\x81\x16\x83\x82\x16\x01\x90\x80\x82\x11\x15a1\xEDWa1\xEDa1\xBCV[P\x92\x91PPV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[__\x19\x82\x03a2\x19Wa2\x19a1\xBCV[P`\x01\x01\x90V[\x80\x82\x01\x80\x82\x11\x15a\x17\x8DWa\x17\x8Da1\xBCV[\x81\x81\x03\x81\x81\x11\x15a\x17\x8DWa\x17\x8Da1\xBCV[_\x84Q\x80` \x87\x01\x84^\x91\x90\x91\x01\x92\x83RP` \x82\x01R`@\x01\x91\x90PV[\x7FValue:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R_`\x07\x84\x10a2\x99Wa2\x99a)ZV[P`\xF8\x92\x90\x92\x1B`\x06\x83\x01R`\x07\x82\x01R`'\x01\x90V[cNH{q`\xE0\x1B_R`Q`\x04R`$_\xFD\xFE\xA2dipfsX\"\x12 \n\x86R\xF95\xD5!\xD6V(\xD3\x1FW\x82\x071\xF0\xF7\xACs\tm\xE7\x08f\xD5\x9C\x9C\x92\xE0\xF4\xF7dsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f80fd5b5060043610610029575f3560e01c8063a92cb5011461002d575b5f80fd5b61004061003b366004612863565b610057565b60405161004e929190612a8d565b60405180910390f35b61005f612739565b6040805160c0810182525f80825282516060808201855282825260208083018490528286018490528401919091529282018190529181018290526080810182905260a08101919091526100b187612fc4565b91506100c2368790038701876130fc565b90505f6100d2602087018761319b565b905061281461ffff82166100e9575061050e6104f0565b5f1961ffff8316016100fe57506105196104f0565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff161ffff83160161013257506105206104f0565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff061ffff83160161016657506105466104f0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7ff761ffff83160161019a57506106686104f0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7ff561ffff8316016101ce575061076d6104f0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7ff461ffff83160161020257506108836104f0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7ff661ffff8316016102365750610a7e6104f0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffef61ffff83160161026a5750610bc36104f0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7ffd61ffff83160161029e575061104f6104f0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7ffc61ffff8316016102d257506110bf6104f0565b601f1961ffff8316016102e8575061114c6104f0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdf61ffff83160161031c575061118c6104f0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdd61ffff83160161035057506111cf6104f0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc61ffff83160161038457506111f56104f0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7ffe61ffff8316016103b857506112236104f0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe661ffff8316016103ec57506112bb6104f0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe561ffff83160161042057506112c86104f0565b604161ffff83161080159061043a5750604461ffff831611155b1561044857506113346104f0565b61ffff82166180051480610461575061ffff8216618006145b1561046f57506114a26104f0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7ff861ffff8316016104a357506115726104f0565b60405162461bcd60e51b815260206004820152600e60248201527f494e56414c49445f4f50434f444500000000000000000000000000000000000060448201526064015b60405180910390fd5b61050184848989898663ffffffff16565b5050965096945050505050565b505060029092525050565b5050505050565b5f61052e8660800151611580565b805190915061053e90879061169b565b505050505050565b61055d61055286611713565b602087015190611793565b5f61056b866080015161179f565b90506105b46105a98260400151604080518082019091525f808252602082015250604080518082019091525f815263ffffffff909116602082015290565b602088015190611793565b6105f06105a98260600151604080518082019091525f808252602082015250604080518082019091525f815263ffffffff909116602082015290565b602084013563ffffffff8116811461064a5760405162461bcd60e51b815260206004820152600d60248201527f4241445f43414c4c5f444154410000000000000000000000000000000000000060448201526064016104e7565b63ffffffff1661010087015250505f61012090940193909352505050565b61067461055286611713565b6106b06105528660e00151604080518082019091525f808252602082015250604080518082019091525f815263ffffffff909116602082015290565b6106ec6105528560a00151604080518082019091525f808252602082015250604080518082019091525f815263ffffffff909116602082015290565b6020808401359081901c604082901c156107485760405162461bcd60e51b815260206004820152601a60248201527f4241445f43524f53535f4d4f44554c455f43414c4c5f4441544100000000000060448201526064016104e7565b63ffffffff90811660e08801521661010086015250505f610120909301929092525050565b61077961055286611713565b5f610787866080015161179f565b90506107c56105a98260400151604080518082019091525f808252602082015250604080518082019091525f815263ffffffff909116602082015290565b6108016105a98260600151604080518082019091525f808252602082015250604080518082019091525f815263ffffffff909116602082015290565b6020808501359081901c604082901c1561085d5760405162461bcd60e51b815260206004820152601a60248201527f4241445f43524f53535f4d4f44554c455f43414c4c5f4441544100000000000060448201526064016104e7565b63ffffffff90811660e08901521661010087015250505f61012090940193909352505050565b5f836020013590505f6108a161089c8860200151611842565b611860565b90506108f46040805160c0810182525f8082528251606081018452818152602081810183905293810191909152909182019081525f60208201819052604082018190526060820181905260809091015290565b6040805160208101909152606081525f61090f87878361191c565b909350905061091f878783611a1e565b6101608c0151919350915061093f8363ffffffff808816908790611aeb16565b146109b25760405162461bcd60e51b815260206004820152602260248201527f43524f53535f4d4f44554c455f494e5445524e414c5f4d4f44554c45535f524f60448201527f4f5400000000000000000000000000000000000000000000000000000000000060648201526084016104e7565b6109c96109be8b611713565b60208c015190611793565b610a056109be8b60e00151604080518082019091525f808252602082015250604080518082019091525f815263ffffffff909116602082015290565b610a416109be8a60a00151604080518082019091525f808252602082015250604080518082019091525f815263ffffffff909116602082015290565b63ffffffff841660e08b015260a0830151610a5c90866131d0565b63ffffffff166101008b015250505f6101209098019790975250505050505050565b610a8a61055286611713565b610ac66105528660e00151604080518082019091525f808252602082015250604080518082019091525f815263ffffffff909116602082015290565b610b026105528560a00151604080518082019091525f808252602082015250604080518082019091525f815263ffffffff909116602082015290565b5f610b10866080015161179f565b9050806060015163ffffffff165f03610b2d575060028552610519565b602084013563ffffffff81168114610b875760405162461bcd60e51b815260206004820152601d60248201527f4241445f43414c4c45525f494e5445524e414c5f43414c4c5f4441544100000060448201526064016104e7565b604082015163ffffffff1660e08801526060820151610ba79082906131d0565b63ffffffff1661010088015250505f6101208601525050505050565b5f80610bd561089c8860200151611842565b90505f805f80805f610bf36040518060200160405280606081525090565b610bfe8b8b87611b3f565b95509350610c0d8b8b87611b9b565b9096509450610c1d8b8b87611bb6565b95509250610c2c8b8b87611b3f565b95509150610c3b8b8b87611b9b565b9097509450610c4b8b8b87611a1e565b6040517f43616c6c20696e6469726563743a00000000000000000000000000000000000060208201527fffffffffffffffff00000000000000000000000000000000000000000000000060c088901b16602e820152603681018990529096509091505f9060560160408051601f19818403018152919052805160209182012091508d01358114610d1d5760405162461bcd60e51b815260206004820152601660248201527f4241445f43414c4c5f494e4449524543545f444154410000000000000000000060448201526064016104e7565b610d348267ffffffffffffffff871686868c611beb565b90508d604001518114610d895760405162461bcd60e51b815260206004820152600f60248201527f4241445f5441424c45535f524f4f54000000000000000000000000000000000060448201526064016104e7565b8267ffffffffffffffff168963ffffffff1610610db457505060028d52506105199650505050505050565b50505050505f610dd3604080518082019091525f808252602082015290565b604080516020810190915260608152610ded8a8a86611b9b565b94509250610dfc8a8a86611cde565b94509150610e0b8a8a86611a1e565b945090505f610e278263ffffffff808b169087908790611de616565b9050868114610e785760405162461bcd60e51b815260206004820152601160248201527f4241445f454c454d454e54535f524f4f5400000000000000000000000000000060448201526064016104e7565b858414610ea8578d60025b90816002811115610e9657610e9661295a565b81525050505050505050505050610519565b600483516006811115610ebd57610ebd61295a565b03610eca578d6002610e83565b600583516006811115610edf57610edf61295a565b03610f45576020830151985063ffffffff89168914610f405760405162461bcd60e51b815260206004820152601560248201527f4241445f46554e435f5245465f434f4e54454e5453000000000000000000000060448201526064016104e7565b610f8d565b60405162461bcd60e51b815260206004820152600d60248201527f4241445f454c454d5f545950450000000000000000000000000000000000000060448201526064016104e7565b5050505050505050610fa16105a987611713565b5f610faf876080015161179f565b9050610ff8610fed8260400151604080518082019091525f808252602082015250604080518082019091525f815263ffffffff909116602082015290565b602089015190611793565b611034610fed8260600151604080518082019091525f808252602082015250604080518082019091525f815263ffffffff909116602082015290565b5063ffffffff166101008601525f6101208601525050505050565b602083013563ffffffff811681146110a95760405162461bcd60e51b815260206004820152600d60248201527f4241445f43414c4c5f444154410000000000000000000000000000000000000060448201526064016104e7565b63ffffffff166101209095019490945250505050565b5f6110d061089c8760200151611842565b905063ffffffff81161561053e57602084013563ffffffff811681146111385760405162461bcd60e51b815260206004820152600d60248201527f4241445f43414c4c5f444154410000000000000000000000000000000000000060448201526064016104e7565b63ffffffff16610120870152505050505050565b5f61115a866080015161179f565b90505f611171826020015186602001358686611e90565b60208801519091506111839082611793565b50505050505050565b5f61119a8660200151611842565b90505f6111aa876080015161179f565b90506111c181602001518660200135848787611f54565b602090910152505050505050565b5f6111e3855f015185602001358585611e90565b602087015190915061053e9082611793565b5f6112038660200151611842565b9050611219855f01518560200135838686611f54565b9094525050505050565b5f6112318660200151611842565b90505f6112418760200151611842565b90505f6112518860200151611842565b90505f604051806080016040528083815260200188602001355f1b815260200161127a85611860565b63ffffffff16815260200161128e86611860565b63ffffffff1681525090506112b0818a6080015161201a90919063ffffffff16565b505050505050505050565b61053e8560200151611842565b5f6112d961089c8760200151611842565b90505f6112e98760200151611842565b90505f6112f98860200151611842565b905063ffffffff83161561131b5760208801516113169082611793565b61132a565b602088015161132a9083611793565b5050505050505050565b5f611342602085018561319b565b90505f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbf61ffff83160161137757505f611458565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbe61ffff8316016113aa57506001611458565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbd61ffff8316016113dd57506002611458565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbc61ffff83160161141057506003611458565b60405162461bcd60e51b815260206004820152601960248201527f434f4e53545f505553485f494e56414c49445f4f50434f44450000000000000060448201526064016104e7565b61118360405180604001604052808360068111156114785761147861295a565b8152602001876020013567ffffffffffffffff16815250886020015161179390919063ffffffff16565b604080518082019091525f80825260208201526180056114c5602086018661319b565b61ffff16036114f2576114db8660200151611842565b60608701519091506114ed9082611793565b61053e565b618006611502602086018661319b565b61ffff160361152a576115188660600151611842565b60208701519091506114ed9082611793565b60405162461bcd60e51b815260206004820152601c60248201527f4d4f56455f494e5445524e414c5f494e56414c49445f4f50434f44450000000060448201526064016104e7565b5f6111e38660200151612118565b6040805160c0810182525f6080820181815260a0830182905282526020820181905291810182905260608101919091528151516001146116025760405162461bcd60e51b815260206004820152601160248201527f4241445f57494e444f575f4c454e47544800000000000000000000000000000060448201526064016104e7565b815180515f90611614576116146131f4565b602002602001015190505f67ffffffffffffffff81111561163757611637612c22565b60405190808252806020026020018201604052801561169457816020015b6040805160c0810182525f6080820181815260a0830182905282526020808301829052928201819052606082015282525f199092019101816116555790505b5090915290565b6004815160068111156116b0576116b061295a565b036116d3578160025b908160028111156116cc576116cc61295a565b9052505050565b6006815160068111156116e8576116e861295a565b146116f5578160026116b9565b611703828260200151612145565b61170f578160026116b9565b5050565b604080518082019091525f808252602082015261178d8261012001518361010001518460e00151604080518082019091525f8082526020820152506040805180820182526006815263ffffffff94909416602093841b67ffffffff00000000161791901b6bffffffff000000000000000016179082015290565b92915050565b815161170f9082612185565b6040805160c0810182525f6080820181815260a0830182905282526020820181905291810182905260608101919091528151516001146118215760405162461bcd60e51b815260206004820152601160248201527f4241445f57494e444f575f4c454e47544800000000000000000000000000000060448201526064016104e7565b815180515f90611833576118336131f4565b60200260200101519050919050565b604080518082019091525f8082526020820152815161178d90612241565b60208101515f90818351600681111561187b5761187b61295a565b146118c85760405162461bcd60e51b815260206004820152600760248201527f4e4f545f4933320000000000000000000000000000000000000000000000000060448201526064016104e7565b640100000000811061178d5760405162461bcd60e51b815260206004820152600760248201527f4241445f4933320000000000000000000000000000000000000000000000000060448201526064016104e7565b6040805160c0810182525f80825282516060808201855282825260208083018490528286018490528401919091529282018190529181018290526080810182905260a0810191909152604080516060810182525f808252602082018190529181018290528391905f805f806119928b8b89611b9b565b975095506119a18b8b8961233b565b975094506119b08b8b89611b9b565b975093506119bf8b8b89611b9b565b975092506119ce8b8b89611b9b565b975091506119dd8b8b896123b5565b6040805160c081018252988952602089019790975295870194909452506060850191909152608084015263ffffffff1660a083015290969095509350505050565b604080516020810190915260608152815f611a3a868684611bb6565b925090505f60ff821667ffffffffffffffff811115611a5b57611a5b612c22565b604051908082528060200260200182016040528015611a84578160200160208202803683370190505b5090505f5b8260ff168160ff161015611acf57611aa2888886611b9b565b838360ff1681518110611ab757611ab76131f4565b60209081029190910101919091529350600101611a89565b5060405180602001604052808281525093505050935093915050565b5f611b358484611afa85612404565b6040518060400160405280601381526020017f4d6f64756c65206d65726b6c6520747265653a000000000000000000000000008152506124c9565b90505b9392505050565b5f81815b6008811015611b925760088367ffffffffffffffff16901b9250858583818110611b6f57611b6f6131f4565b919091013560f81c93909317925081611b8781613208565b925050600101611b43565b50935093915050565b5f8181611ba98686846125d3565b9097909650945050505050565b5f81848482818110611bca57611bca6131f4565b919091013560f81c9250819050611be081613208565b915050935093915050565b6040517f5461626c653a000000000000000000000000000000000000000000000000000060208201527fff0000000000000000000000000000000000000000000000000000000000000060f885901b1660268201527fffffffffffffffff00000000000000000000000000000000000000000000000060c084901b166027820152602f81018290525f908190604f01604051602081830303815290604052805190602001209050611cd38787836040518060400160405280601281526020017f5461626c65206d65726b6c6520747265653a00000000000000000000000000008152506124c9565b979650505050505050565b604080518082019091525f8082526020820152815f858583818110611d0557611d056131f4565b919091013560f81c9150829050611d1b81613208565b925050611d26600690565b6006811115611d3757611d3761295a565b60ff168160ff161115611d8c5760405162461bcd60e51b815260206004820152600e60248201527f4241445f56414c55455f5459504500000000000000000000000000000000000060448201526064016104e7565b5f611d988787856125d3565b809450819250505060405180604001604052808360ff166006811115611dc057611dc061295a565b6006811115611dd157611dd161295a565b81526020018281525093505050935093915050565b5f8083611df28461261c565b6040517f5461626c6520656c656d656e743a0000000000000000000000000000000000006020820152602e810192909252604e820152606e01604051602081830303815290604052805190602001209050611e848686836040518060400160405280601a81526020017f5461626c6520656c656d656e74206d65726b6c6520747265653a0000000000008152506124c9565b9150505b949350505050565b604080518082019091525f80825260208201525f611ebd604080518082019091525f808252602082015290565b604080516020810190915260608152611ed7868685611cde565b93509150611ee6868685611a1e565b935090505f611ef6828985612637565b9050888114611f475760405162461bcd60e51b815260206004820152601160248201527f57524f4e475f4d45524b4c455f524f4f5400000000000000000000000000000060448201526064016104e7565b5090979650505050505050565b5f611f6e604080518082019091525f808252602082015290565b5f611f856040518060200160405280606081525090565b611f90868684611cde565b9093509150611fa0868684611a1e565b925090505f611fb0828a86612637565b90508981146120015760405162461bcd60e51b815260206004820152601160248201527f57524f4e475f4d45524b4c455f524f4f5400000000000000000000000000000060448201526064016104e7565b61200c828a8a612637565b9a9950505050505050505050565b8151515f9061202a906001613220565b67ffffffffffffffff81111561204257612042612c22565b60405190808252806020026020018201604052801561209f57816020015b6040805160c0810182525f6080820181815260a0830182905282526020808301829052928201819052606082015282525f199092019101816120605790505b5090505f5b8351518110156120ef5783518051829081106120c2576120c26131f4565b60200260200101518282815181106120dc576120dc6131f4565b60209081029190910101526001016120a4565b508181845f01515181518110612107576121076131f4565b602090810291909101015290915250565b604080518082019091525f808252602082015281515151611b3861213d600183613233565b845190612681565b5f606082901c1561215757505f61178d565b5063ffffffff818116610120840152602082901c811661010084015260409190911c1660e090910152600190565b8151515f90612195906001613220565b67ffffffffffffffff8111156121ad576121ad612c22565b6040519080825280602002602001820160405280156121f157816020015b604080518082019091525f80825260208201528152602001906001900390816121cb5790505b5090505f5b8351518110156120ef578351805182908110612214576122146131f4565b602002602001015182828151811061222e5761222e6131f4565b60209081029190910101526001016121f6565b604080518082019091525f80825260208201528151805161226490600190613233565b81518110612274576122746131f4565b602002602001015190505f6001835f0151516122909190613233565b67ffffffffffffffff8111156122a8576122a8612c22565b6040519080825280602002602001820160405280156122ec57816020015b604080518082019091525f80825260208201528152602001906001900390816122c65790505b5090505f5b815181101561169457835180518290811061230e5761230e6131f4565b6020026020010151828281518110612328576123286131f4565b60209081029190910101526001016122f1565b604080516060810182525f8082526020820181905291810191909152815f8080612366888886611b3f565b94509250612375888886611b3f565b94509150612384888886611b9b565b6040805160608101825267ffffffffffffffff96871681529490951660208501529383015250969095509350505050565b5f81815b6004811015611b925760088363ffffffff16901b92508585838181106123e1576123e16131f4565b919091013560f81c939093179250816123f981613208565b9250506001016123b9565b5f815f015161241683602001516126b8565b6040808501516060860151608087015160a088015193516124ac969594906020017f4d6f64756c653a0000000000000000000000000000000000000000000000000081526007810196909652602786019490945260478501929092526067840152608783015260e01b7fffffffff000000000000000000000000000000000000000000000000000000001660a782015260ab0190565b604051602081830303815290604052805190602001209050919050565b815f5b85515181101561258457846001165f0361252e578282875f015183815181106124f7576124f76131f4565b602002602001015160405160200161251193929190613246565b604051602081830303815290604052805190602001209150612578565b82865f01518281518110612544576125446131f4565b60200260200101518360405160200161255f93929190613246565b6040516020818303038152906040528051906020012091505b600194851c94016124cc565b508315611e885760405162461bcd60e51b815260206004820152600f60248201527f50524f4f465f544f4f5f53484f5254000000000000000000000000000000000060448201526064016104e7565b5f81815b6020811015611b9257600883901b92508585838181106125f9576125f96131f4565b919091013560f81c9390931792508161261181613208565b9250506001016125d7565b5f815f015182602001516040516020016124ac929190613265565b5f611b3584846126468561261c565b6040518060400160405280601281526020017f56616c7565206d65726b6c6520747265653a00000000000000000000000000008152506124c9565b604080518082019091525f808252602082015282518051839081106126a8576126a86131f4565b6020026020010151905092915050565b805160208083015160408085015190517f4d656d6f72793a00000000000000000000000000000000000000000000000000938101939093527fffffffffffffffff00000000000000000000000000000000000000000000000060c094851b811660278501529190931b16602f82015260378101919091525f906057016124ac565b604080516101808101909152805f815260200161276c60408051606080820183529181019182529081525f602082015290565b81526040805180820182525f808252602080830191909152830152016127a860408051606080820183529181019182529081525f602082015290565b81526020016127cc6040518060400160405280606081526020015f80191681525090565b81526040805180820182525f8082526020808301829052840191909152908201819052606082018190526080820181905260a0820181905260c0820181905260e09091015290565b61281c6132b0565b565b5f8083601f84011261282e575f80fd5b50813567ffffffffffffffff811115612845575f80fd5b60208301915083602082850101111561285c575f80fd5b9250929050565b5f805f805f808688036101e081121561287a575f80fd5b6060811215612887575f80fd5b879650606088013567ffffffffffffffff808211156128a4575f80fd5b818a0191506101c080838d0312156128ba575f80fd5b8298506101007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80850112156128ed575f80fd5b60808b01975060407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe8085011215612922575f80fd5b6101808b0196508a013592508083111561293a575f80fd5b505061294889828a0161281e565b979a9699509497509295939492505050565b634e487b7160e01b5f52602160045260245ffd5b6003811061297e5761297e61295a565b9052565b8051600781106129945761299461295a565b8252602090810151910152565b80516040808452905160208483018190528151606086018190525f9392820191849160808801905b808410156129f0576129dc828651612982565b9382019360019390930192908501906129c9565b5060208701516020890152809550505050505092915050565b8051604080845281518482018190525f926060916020918201918388019190865b82811015612a73578451612a3f858251612982565b80830151858901528781015163ffffffff90811688870152908701511660808501529381019360a090930192600101612a2a565b505050602086015160208801528094505050505092915050565b5f610120808352612aa1818401865161296e565b60208501516101c06101408181870152612abf6102e08701846129a1565b92506040880151610160612adf8189018380518252602090810151910152565b60608a015191507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee080898703016101a08a0152612b1c86846129a1565b955060808b015192508089870301858a015250612b398583612a09565b60a08b015180516101e08b015260208101516102008b0152909550935060c08a015161022089015260e08a015163ffffffff81166102408a015293506101008a015163ffffffff81166102608a015293509489015163ffffffff811661028089015294918901516102a0880152508701516102c0860152509150611b389050602083018480518252602081015167ffffffffffffffff80825116602085015280602083015116604085015250604081015160608401525060408101516080830152606081015160a0830152608081015160c083015263ffffffff60a08201511660e08301525050565b634e487b7160e01b5f52604160045260245ffd5b6040805190810167ffffffffffffffff81118282101715612c5957612c59612c22565b60405290565b6040516020810167ffffffffffffffff81118282101715612c5957612c59612c22565b6040516080810167ffffffffffffffff81118282101715612c5957612c59612c22565b604051610180810167ffffffffffffffff81118282101715612c5957612c59612c22565b60405160c0810167ffffffffffffffff81118282101715612c5957612c59612c22565b6040516060810167ffffffffffffffff81118282101715612c5957612c59612c22565b604051601f8201601f1916810167ffffffffffffffff81118282101715612d3857612d38612c22565b604052919050565b803560038110612d4e575f80fd5b919050565b5f67ffffffffffffffff821115612d6c57612d6c612c22565b5060051b60200190565b5f60408284031215612d86575f80fd5b612d8e612c36565b9050813560078110612d9e575f80fd5b808252506020820135602082015292915050565b5f6040808385031215612dc3575f80fd5b612dcb612c36565b9150823567ffffffffffffffff80821115612de4575f80fd5b81850191506020808388031215612df9575f80fd5b612e01612c5f565b833583811115612e0f575f80fd5b80850194505087601f850112612e23575f80fd5b83359250612e38612e3384612d53565b612d0f565b83815260069390931b84018201928281019089851115612e56575f80fd5b948301945b84861015612e7c57612e6d8a87612d76565b82529486019490830190612e5b565b8252508552948501359484019490945250909392505050565b5f60408284031215612ea5575f80fd5b612ead612c36565b9050813581526020820135602082015292915050565b803563ffffffff81168114612d4e575f80fd5b5f6040808385031215612ee7575f80fd5b612eef612c36565b9150823567ffffffffffffffff811115612f07575f80fd5b8301601f81018513612f17575f80fd5b80356020612f27612e3383612d53565b82815260a09283028401820192828201919089851115612f45575f80fd5b948301945b84861015612fac5780868b031215612f60575f80fd5b612f68612c82565b612f728b88612d76565b815287870135858201526060612f89818901612ec3565b89830152612f9960808901612ec3565b9082015283529485019491830191612f4a565b50808752505080860135818601525050505092915050565b5f6101c08236031215612fd5575f80fd5b612fdd612ca5565b612fe683612d40565b8152602083013567ffffffffffffffff80821115613002575f80fd5b61300e36838701612db2565b60208401526130203660408701612e95565b60408401526080850135915080821115613038575f80fd5b61304436838701612db2565b606084015260a085013591508082111561305c575f80fd5b5061306936828601612ed6565b60808301525061307c3660c08501612e95565b60a08201526101008084013560c083015261012061309b818601612ec3565b60e08401526101406130ae818701612ec3565b8385015261016092506130c2838701612ec3565b91840191909152610180850135908301526101a090930135928101929092525090565b803567ffffffffffffffff81168114612d4e575f80fd5b5f81830361010081121561310e575f80fd5b613116612cc9565b833581526060601f198301121561312b575f80fd5b613133612cec565b9150613141602085016130e5565b825261314f604085016130e5565b6020830152606084013560408301528160208201526080840135604082015260a0840135606082015260c0840135608082015261318e60e08501612ec3565b60a0820152949350505050565b5f602082840312156131ab575f80fd5b813561ffff81168114611b38575f80fd5b634e487b7160e01b5f52601160045260245ffd5b63ffffffff8181168382160190808211156131ed576131ed6131bc565b5092915050565b634e487b7160e01b5f52603260045260245ffd5b5f5f198203613219576132196131bc565b5060010190565b8082018082111561178d5761178d6131bc565b8181038181111561178d5761178d6131bc565b5f84518060208701845e91909101928352506020820152604001919050565b7f56616c75653a000000000000000000000000000000000000000000000000000081525f600784106132995761329961295a565b5060f89290921b6006830152600782015260270190565b634e487b7160e01b5f52605160045260245ffdfea26469706673582212200a8652f935d521d65628d31f57820731f0f7ac73096de70866d59c9c92e0f4f764736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\0)W_5`\xE0\x1C\x80c\xA9,\xB5\x01\x14a\0-W[_\x80\xFD[a\0@a\0;6`\x04a(cV[a\0WV[`@Qa\0N\x92\x91\x90a*\x8DV[`@Q\x80\x91\x03\x90\xF3[a\0_a'9V[`@\x80Q`\xC0\x81\x01\x82R_\x80\x82R\x82Q``\x80\x82\x01\x85R\x82\x82R` \x80\x83\x01\x84\x90R\x82\x86\x01\x84\x90R\x84\x01\x91\x90\x91R\x92\x82\x01\x81\x90R\x91\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x91\x90\x91Ra\0\xB1\x87a/\xC4V[\x91Pa\0\xC26\x87\x90\x03\x87\x01\x87a0\xFCV[\x90P_a\0\xD2` \x87\x01\x87a1\x9BV[\x90Pa(\x14a\xFF\xFF\x82\x16a\0\xE9WPa\x05\x0Ea\x04\xF0V[_\x19a\xFF\xFF\x83\x16\x01a\0\xFEWPa\x05\x19a\x04\xF0V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xF1a\xFF\xFF\x83\x16\x01a\x012WPa\x05 a\x04\xF0V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xF0a\xFF\xFF\x83\x16\x01a\x01fWPa\x05Fa\x04\xF0V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xF7a\xFF\xFF\x83\x16\x01a\x01\x9AWPa\x06ha\x04\xF0V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xF5a\xFF\xFF\x83\x16\x01a\x01\xCEWPa\x07ma\x04\xF0V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xF4a\xFF\xFF\x83\x16\x01a\x02\x02WPa\x08\x83a\x04\xF0V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xF6a\xFF\xFF\x83\x16\x01a\x026WPa\n~a\x04\xF0V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xEFa\xFF\xFF\x83\x16\x01a\x02jWPa\x0B\xC3a\x04\xF0V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xFDa\xFF\xFF\x83\x16\x01a\x02\x9EWPa\x10Oa\x04\xF0V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xFCa\xFF\xFF\x83\x16\x01a\x02\xD2WPa\x10\xBFa\x04\xF0V[`\x1F\x19a\xFF\xFF\x83\x16\x01a\x02\xE8WPa\x11La\x04\xF0V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xDFa\xFF\xFF\x83\x16\x01a\x03\x1CWPa\x11\x8Ca\x04\xF0V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xDDa\xFF\xFF\x83\x16\x01a\x03PWPa\x11\xCFa\x04\xF0V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xDCa\xFF\xFF\x83\x16\x01a\x03\x84WPa\x11\xF5a\x04\xF0V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xFEa\xFF\xFF\x83\x16\x01a\x03\xB8WPa\x12#a\x04\xF0V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE6a\xFF\xFF\x83\x16\x01a\x03\xECWPa\x12\xBBa\x04\xF0V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE5a\xFF\xFF\x83\x16\x01a\x04 WPa\x12\xC8a\x04\xF0V[`Aa\xFF\xFF\x83\x16\x10\x80\x15\x90a\x04:WP`Da\xFF\xFF\x83\x16\x11\x15[\x15a\x04HWPa\x134a\x04\xF0V[a\xFF\xFF\x82\x16a\x80\x05\x14\x80a\x04aWPa\xFF\xFF\x82\x16a\x80\x06\x14[\x15a\x04oWPa\x14\xA2a\x04\xF0V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xF8a\xFF\xFF\x83\x16\x01a\x04\xA3WPa\x15ra\x04\xF0V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0E`$\x82\x01R\x7FINVALID_OPCODE\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01[`@Q\x80\x91\x03\x90\xFD[a\x05\x01\x84\x84\x89\x89\x89\x86c\xFF\xFF\xFF\xFF\x16V[PP\x96P\x96\x94PPPPPV[PP`\x02\x90\x92RPPV[PPPPPV[_a\x05.\x86`\x80\x01Qa\x15\x80V[\x80Q\x90\x91Pa\x05>\x90\x87\x90a\x16\x9BV[PPPPPPV[a\x05]a\x05R\x86a\x17\x13V[` \x87\x01Q\x90a\x17\x93V[_a\x05k\x86`\x80\x01Qa\x17\x9FV[\x90Pa\x05\xB4a\x05\xA9\x82`@\x01Q`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01RP`@\x80Q\x80\x82\x01\x90\x91R_\x81Rc\xFF\xFF\xFF\xFF\x90\x91\x16` \x82\x01R\x90V[` \x88\x01Q\x90a\x17\x93V[a\x05\xF0a\x05\xA9\x82``\x01Q`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01RP`@\x80Q\x80\x82\x01\x90\x91R_\x81Rc\xFF\xFF\xFF\xFF\x90\x91\x16` \x82\x01R\x90V[` \x84\x015c\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x06JW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\r`$\x82\x01R\x7FBAD_CALL_DATA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xE7V[c\xFF\xFF\xFF\xFF\x16a\x01\0\x87\x01RPP_a\x01 \x90\x94\x01\x93\x90\x93RPPPV[a\x06ta\x05R\x86a\x17\x13V[a\x06\xB0a\x05R\x86`\xE0\x01Q`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01RP`@\x80Q\x80\x82\x01\x90\x91R_\x81Rc\xFF\xFF\xFF\xFF\x90\x91\x16` \x82\x01R\x90V[a\x06\xECa\x05R\x85`\xA0\x01Q`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01RP`@\x80Q\x80\x82\x01\x90\x91R_\x81Rc\xFF\xFF\xFF\xFF\x90\x91\x16` \x82\x01R\x90V[` \x80\x84\x015\x90\x81\x90\x1C`@\x82\x90\x1C\x15a\x07HW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1A`$\x82\x01R\x7FBAD_CROSS_MODULE_CALL_DATA\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xE7V[c\xFF\xFF\xFF\xFF\x90\x81\x16`\xE0\x88\x01R\x16a\x01\0\x86\x01RPP_a\x01 \x90\x93\x01\x92\x90\x92RPPV[a\x07ya\x05R\x86a\x17\x13V[_a\x07\x87\x86`\x80\x01Qa\x17\x9FV[\x90Pa\x07\xC5a\x05\xA9\x82`@\x01Q`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01RP`@\x80Q\x80\x82\x01\x90\x91R_\x81Rc\xFF\xFF\xFF\xFF\x90\x91\x16` \x82\x01R\x90V[a\x08\x01a\x05\xA9\x82``\x01Q`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01RP`@\x80Q\x80\x82\x01\x90\x91R_\x81Rc\xFF\xFF\xFF\xFF\x90\x91\x16` \x82\x01R\x90V[` \x80\x85\x015\x90\x81\x90\x1C`@\x82\x90\x1C\x15a\x08]W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1A`$\x82\x01R\x7FBAD_CROSS_MODULE_CALL_DATA\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xE7V[c\xFF\xFF\xFF\xFF\x90\x81\x16`\xE0\x89\x01R\x16a\x01\0\x87\x01RPP_a\x01 \x90\x94\x01\x93\x90\x93RPPPV[_\x83` \x015\x90P_a\x08\xA1a\x08\x9C\x88` \x01Qa\x18BV[a\x18`V[\x90Pa\x08\xF4`@\x80Q`\xC0\x81\x01\x82R_\x80\x82R\x82Q``\x81\x01\x84R\x81\x81R` \x81\x81\x01\x83\x90R\x93\x81\x01\x91\x90\x91R\x90\x91\x82\x01\x90\x81R_` \x82\x01\x81\x90R`@\x82\x01\x81\x90R``\x82\x01\x81\x90R`\x80\x90\x91\x01R\x90V[`@\x80Q` \x81\x01\x90\x91R``\x81R_a\t\x0F\x87\x87\x83a\x19\x1CV[\x90\x93P\x90Pa\t\x1F\x87\x87\x83a\x1A\x1EV[a\x01`\x8C\x01Q\x91\x93P\x91Pa\t?\x83c\xFF\xFF\xFF\xFF\x80\x88\x16\x90\x87\x90a\x1A\xEB\x16V[\x14a\t\xB2W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\"`$\x82\x01R\x7FCROSS_MODULE_INTERNAL_MODULES_RO`D\x82\x01R\x7FOT\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x04\xE7V[a\t\xC9a\t\xBE\x8Ba\x17\x13V[` \x8C\x01Q\x90a\x17\x93V[a\n\x05a\t\xBE\x8B`\xE0\x01Q`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01RP`@\x80Q\x80\x82\x01\x90\x91R_\x81Rc\xFF\xFF\xFF\xFF\x90\x91\x16` \x82\x01R\x90V[a\nAa\t\xBE\x8A`\xA0\x01Q`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01RP`@\x80Q\x80\x82\x01\x90\x91R_\x81Rc\xFF\xFF\xFF\xFF\x90\x91\x16` \x82\x01R\x90V[c\xFF\xFF\xFF\xFF\x84\x16`\xE0\x8B\x01R`\xA0\x83\x01Qa\n\\\x90\x86a1\xD0V[c\xFF\xFF\xFF\xFF\x16a\x01\0\x8B\x01RPP_a\x01 \x90\x98\x01\x97\x90\x97RPPPPPPPV[a\n\x8Aa\x05R\x86a\x17\x13V[a\n\xC6a\x05R\x86`\xE0\x01Q`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01RP`@\x80Q\x80\x82\x01\x90\x91R_\x81Rc\xFF\xFF\xFF\xFF\x90\x91\x16` \x82\x01R\x90V[a\x0B\x02a\x05R\x85`\xA0\x01Q`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01RP`@\x80Q\x80\x82\x01\x90\x91R_\x81Rc\xFF\xFF\xFF\xFF\x90\x91\x16` \x82\x01R\x90V[_a\x0B\x10\x86`\x80\x01Qa\x17\x9FV[\x90P\x80``\x01Qc\xFF\xFF\xFF\xFF\x16_\x03a\x0B-WP`\x02\x85Ra\x05\x19V[` \x84\x015c\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x0B\x87W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1D`$\x82\x01R\x7FBAD_CALLER_INTERNAL_CALL_DATA\0\0\0`D\x82\x01R`d\x01a\x04\xE7V[`@\x82\x01Qc\xFF\xFF\xFF\xFF\x16`\xE0\x88\x01R``\x82\x01Qa\x0B\xA7\x90\x82\x90a1\xD0V[c\xFF\xFF\xFF\xFF\x16a\x01\0\x88\x01RPP_a\x01 \x86\x01RPPPPPV[_\x80a\x0B\xD5a\x08\x9C\x88` \x01Qa\x18BV[\x90P_\x80_\x80\x80_a\x0B\xF3`@Q\x80` \x01`@R\x80``\x81RP\x90V[a\x0B\xFE\x8B\x8B\x87a\x1B?V[\x95P\x93Pa\x0C\r\x8B\x8B\x87a\x1B\x9BV[\x90\x96P\x94Pa\x0C\x1D\x8B\x8B\x87a\x1B\xB6V[\x95P\x92Pa\x0C,\x8B\x8B\x87a\x1B?V[\x95P\x91Pa\x0C;\x8B\x8B\x87a\x1B\x9BV[\x90\x97P\x94Pa\x0CK\x8B\x8B\x87a\x1A\x1EV[`@Q\x7FCall indirect:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xC0\x88\x90\x1B\x16`.\x82\x01R`6\x81\x01\x89\x90R\x90\x96P\x90\x91P_\x90`V\x01`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R\x80Q` \x91\x82\x01 \x91P\x8D\x015\x81\x14a\r\x1DW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x16`$\x82\x01R\x7FBAD_CALL_INDIRECT_DATA\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xE7V[a\r4\x82g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x87\x16\x86\x86\x8Ca\x1B\xEBV[\x90P\x8D`@\x01Q\x81\x14a\r\x89W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0F`$\x82\x01R\x7FBAD_TABLES_ROOT\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xE7V[\x82g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x89c\xFF\xFF\xFF\xFF\x16\x10a\r\xB4WPP`\x02\x8DRPa\x05\x19\x96PPPPPPPV[PPPPP_a\r\xD3`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x90V[`@\x80Q` \x81\x01\x90\x91R``\x81Ra\r\xED\x8A\x8A\x86a\x1B\x9BV[\x94P\x92Pa\r\xFC\x8A\x8A\x86a\x1C\xDEV[\x94P\x91Pa\x0E\x0B\x8A\x8A\x86a\x1A\x1EV[\x94P\x90P_a\x0E'\x82c\xFF\xFF\xFF\xFF\x80\x8B\x16\x90\x87\x90\x87\x90a\x1D\xE6\x16V[\x90P\x86\x81\x14a\x0ExW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x11`$\x82\x01R\x7FBAD_ELEMENTS_ROOT\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xE7V[\x85\x84\x14a\x0E\xA8W\x8D`\x02[\x90\x81`\x02\x81\x11\x15a\x0E\x96Wa\x0E\x96a)ZV[\x81RPPPPPPPPPPPa\x05\x19V[`\x04\x83Q`\x06\x81\x11\x15a\x0E\xBDWa\x0E\xBDa)ZV[\x03a\x0E\xCAW\x8D`\x02a\x0E\x83V[`\x05\x83Q`\x06\x81\x11\x15a\x0E\xDFWa\x0E\xDFa)ZV[\x03a\x0FEW` \x83\x01Q\x98Pc\xFF\xFF\xFF\xFF\x89\x16\x89\x14a\x0F@W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x15`$\x82\x01R\x7FBAD_FUNC_REF_CONTENTS\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xE7V[a\x0F\x8DV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\r`$\x82\x01R\x7FBAD_ELEM_TYPE\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xE7V[PPPPPPPPa\x0F\xA1a\x05\xA9\x87a\x17\x13V[_a\x0F\xAF\x87`\x80\x01Qa\x17\x9FV[\x90Pa\x0F\xF8a\x0F\xED\x82`@\x01Q`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01RP`@\x80Q\x80\x82\x01\x90\x91R_\x81Rc\xFF\xFF\xFF\xFF\x90\x91\x16` \x82\x01R\x90V[` \x89\x01Q\x90a\x17\x93V[a\x104a\x0F\xED\x82``\x01Q`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01RP`@\x80Q\x80\x82\x01\x90\x91R_\x81Rc\xFF\xFF\xFF\xFF\x90\x91\x16` \x82\x01R\x90V[Pc\xFF\xFF\xFF\xFF\x16a\x01\0\x86\x01R_a\x01 \x86\x01RPPPPPV[` \x83\x015c\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x10\xA9W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\r`$\x82\x01R\x7FBAD_CALL_DATA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xE7V[c\xFF\xFF\xFF\xFF\x16a\x01 \x90\x95\x01\x94\x90\x94RPPPPV[_a\x10\xD0a\x08\x9C\x87` \x01Qa\x18BV[\x90Pc\xFF\xFF\xFF\xFF\x81\x16\x15a\x05>W` \x84\x015c\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x118W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\r`$\x82\x01R\x7FBAD_CALL_DATA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xE7V[c\xFF\xFF\xFF\xFF\x16a\x01 \x87\x01RPPPPPPV[_a\x11Z\x86`\x80\x01Qa\x17\x9FV[\x90P_a\x11q\x82` \x01Q\x86` \x015\x86\x86a\x1E\x90V[` \x88\x01Q\x90\x91Pa\x11\x83\x90\x82a\x17\x93V[PPPPPPPV[_a\x11\x9A\x86` \x01Qa\x18BV[\x90P_a\x11\xAA\x87`\x80\x01Qa\x17\x9FV[\x90Pa\x11\xC1\x81` \x01Q\x86` \x015\x84\x87\x87a\x1FTV[` \x90\x91\x01RPPPPPPV[_a\x11\xE3\x85_\x01Q\x85` \x015\x85\x85a\x1E\x90V[` \x87\x01Q\x90\x91Pa\x05>\x90\x82a\x17\x93V[_a\x12\x03\x86` \x01Qa\x18BV[\x90Pa\x12\x19\x85_\x01Q\x85` \x015\x83\x86\x86a\x1FTV[\x90\x94RPPPPPV[_a\x121\x86` \x01Qa\x18BV[\x90P_a\x12A\x87` \x01Qa\x18BV[\x90P_a\x12Q\x88` \x01Qa\x18BV[\x90P_`@Q\x80`\x80\x01`@R\x80\x83\x81R` \x01\x88` \x015_\x1B\x81R` \x01a\x12z\x85a\x18`V[c\xFF\xFF\xFF\xFF\x16\x81R` \x01a\x12\x8E\x86a\x18`V[c\xFF\xFF\xFF\xFF\x16\x81RP\x90Pa\x12\xB0\x81\x8A`\x80\x01Qa \x1A\x90\x91\x90c\xFF\xFF\xFF\xFF\x16V[PPPPPPPPPV[a\x05>\x85` \x01Qa\x18BV[_a\x12\xD9a\x08\x9C\x87` \x01Qa\x18BV[\x90P_a\x12\xE9\x87` \x01Qa\x18BV[\x90P_a\x12\xF9\x88` \x01Qa\x18BV[\x90Pc\xFF\xFF\xFF\xFF\x83\x16\x15a\x13\x1BW` \x88\x01Qa\x13\x16\x90\x82a\x17\x93V[a\x13*V[` \x88\x01Qa\x13*\x90\x83a\x17\x93V[PPPPPPPPV[_a\x13B` \x85\x01\x85a1\x9BV[\x90P_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xBFa\xFF\xFF\x83\x16\x01a\x13wWP_a\x14XV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xBEa\xFF\xFF\x83\x16\x01a\x13\xAAWP`\x01a\x14XV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xBDa\xFF\xFF\x83\x16\x01a\x13\xDDWP`\x02a\x14XV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xBCa\xFF\xFF\x83\x16\x01a\x14\x10WP`\x03a\x14XV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x19`$\x82\x01R\x7FCONST_PUSH_INVALID_OPCODE\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xE7V[a\x11\x83`@Q\x80`@\x01`@R\x80\x83`\x06\x81\x11\x15a\x14xWa\x14xa)ZV[\x81R` \x01\x87` \x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RP\x88` \x01Qa\x17\x93\x90\x91\x90c\xFF\xFF\xFF\xFF\x16V[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01Ra\x80\x05a\x14\xC5` \x86\x01\x86a1\x9BV[a\xFF\xFF\x16\x03a\x14\xF2Wa\x14\xDB\x86` \x01Qa\x18BV[``\x87\x01Q\x90\x91Pa\x14\xED\x90\x82a\x17\x93V[a\x05>V[a\x80\x06a\x15\x02` \x86\x01\x86a1\x9BV[a\xFF\xFF\x16\x03a\x15*Wa\x15\x18\x86``\x01Qa\x18BV[` \x87\x01Q\x90\x91Pa\x14\xED\x90\x82a\x17\x93V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1C`$\x82\x01R\x7FMOVE_INTERNAL_INVALID_OPCODE\0\0\0\0`D\x82\x01R`d\x01a\x04\xE7V[_a\x11\xE3\x86` \x01Qa!\x18V[`@\x80Q`\xC0\x81\x01\x82R_`\x80\x82\x01\x81\x81R`\xA0\x83\x01\x82\x90R\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x91\x90\x91R\x81QQ`\x01\x14a\x16\x02W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x11`$\x82\x01R\x7FBAD_WINDOW_LENGTH\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xE7V[\x81Q\x80Q_\x90a\x16\x14Wa\x16\x14a1\xF4V[` \x02` \x01\x01Q\x90P_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x167Wa\x167a,\"V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x16\x94W\x81` \x01[`@\x80Q`\xC0\x81\x01\x82R_`\x80\x82\x01\x81\x81R`\xA0\x83\x01\x82\x90R\x82R` \x80\x83\x01\x82\x90R\x92\x82\x01\x81\x90R``\x82\x01R\x82R_\x19\x90\x92\x01\x91\x01\x81a\x16UW\x90P[P\x90\x91R\x90V[`\x04\x81Q`\x06\x81\x11\x15a\x16\xB0Wa\x16\xB0a)ZV[\x03a\x16\xD3W\x81`\x02[\x90\x81`\x02\x81\x11\x15a\x16\xCCWa\x16\xCCa)ZV[\x90RPPPV[`\x06\x81Q`\x06\x81\x11\x15a\x16\xE8Wa\x16\xE8a)ZV[\x14a\x16\xF5W\x81`\x02a\x16\xB9V[a\x17\x03\x82\x82` \x01Qa!EV[a\x17\x0FW\x81`\x02a\x16\xB9V[PPV[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01Ra\x17\x8D\x82a\x01 \x01Q\x83a\x01\0\x01Q\x84`\xE0\x01Q`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01RP`@\x80Q\x80\x82\x01\x82R`\x06\x81Rc\xFF\xFF\xFF\xFF\x94\x90\x94\x16` \x93\x84\x1Bg\xFF\xFF\xFF\xFF\0\0\0\0\x16\x17\x91\x90\x1Bk\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\x16\x17\x90\x82\x01R\x90V[\x92\x91PPV[\x81Qa\x17\x0F\x90\x82a!\x85V[`@\x80Q`\xC0\x81\x01\x82R_`\x80\x82\x01\x81\x81R`\xA0\x83\x01\x82\x90R\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x91\x90\x91R\x81QQ`\x01\x14a\x18!W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x11`$\x82\x01R\x7FBAD_WINDOW_LENGTH\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xE7V[\x81Q\x80Q_\x90a\x183Wa\x183a1\xF4V[` \x02` \x01\x01Q\x90P\x91\x90PV[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x81Qa\x17\x8D\x90a\"AV[` \x81\x01Q_\x90\x81\x83Q`\x06\x81\x11\x15a\x18{Wa\x18{a)ZV[\x14a\x18\xC8W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FNOT_I32\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xE7V[d\x01\0\0\0\0\x81\x10a\x17\x8DW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FBAD_I32\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xE7V[`@\x80Q`\xC0\x81\x01\x82R_\x80\x82R\x82Q``\x80\x82\x01\x85R\x82\x82R` \x80\x83\x01\x84\x90R\x82\x86\x01\x84\x90R\x84\x01\x91\x90\x91R\x92\x82\x01\x81\x90R\x91\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x91\x90\x91R`@\x80Q``\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R\x83\x91\x90_\x80_\x80a\x19\x92\x8B\x8B\x89a\x1B\x9BV[\x97P\x95Pa\x19\xA1\x8B\x8B\x89a#;V[\x97P\x94Pa\x19\xB0\x8B\x8B\x89a\x1B\x9BV[\x97P\x93Pa\x19\xBF\x8B\x8B\x89a\x1B\x9BV[\x97P\x92Pa\x19\xCE\x8B\x8B\x89a\x1B\x9BV[\x97P\x91Pa\x19\xDD\x8B\x8B\x89a#\xB5V[`@\x80Q`\xC0\x81\x01\x82R\x98\x89R` \x89\x01\x97\x90\x97R\x95\x87\x01\x94\x90\x94RP``\x85\x01\x91\x90\x91R`\x80\x84\x01Rc\xFF\xFF\xFF\xFF\x16`\xA0\x83\x01R\x90\x96\x90\x95P\x93PPPPV[`@\x80Q` \x81\x01\x90\x91R``\x81R\x81_a\x1A:\x86\x86\x84a\x1B\xB6V[\x92P\x90P_`\xFF\x82\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1A[Wa\x1A[a,\"V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x1A\x84W\x81` \x01` \x82\x02\x806\x837\x01\x90P[P\x90P_[\x82`\xFF\x16\x81`\xFF\x16\x10\x15a\x1A\xCFWa\x1A\xA2\x88\x88\x86a\x1B\x9BV[\x83\x83`\xFF\x16\x81Q\x81\x10a\x1A\xB7Wa\x1A\xB7a1\xF4V[` \x90\x81\x02\x91\x90\x91\x01\x01\x91\x90\x91R\x93P`\x01\x01a\x1A\x89V[P`@Q\x80` \x01`@R\x80\x82\x81RP\x93PPP\x93P\x93\x91PPV[_a\x1B5\x84\x84a\x1A\xFA\x85a$\x04V[`@Q\x80`@\x01`@R\x80`\x13\x81R` \x01\x7FModule merkle tree:\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RPa$\xC9V[\x90P[\x93\x92PPPV[_\x81\x81[`\x08\x81\x10\x15a\x1B\x92W`\x08\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x1B\x92P\x85\x85\x83\x81\x81\x10a\x1BoWa\x1Boa1\xF4V[\x91\x90\x91\x015`\xF8\x1C\x93\x90\x93\x17\x92P\x81a\x1B\x87\x81a2\x08V[\x92PP`\x01\x01a\x1BCV[P\x93P\x93\x91PPV[_\x81\x81a\x1B\xA9\x86\x86\x84a%\xD3V[\x90\x97\x90\x96P\x94PPPPPV[_\x81\x84\x84\x82\x81\x81\x10a\x1B\xCAWa\x1B\xCAa1\xF4V[\x91\x90\x91\x015`\xF8\x1C\x92P\x81\x90Pa\x1B\xE0\x81a2\x08V[\x91PP\x93P\x93\x91PPV[`@Q\x7FTable:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R\x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xF8\x85\x90\x1B\x16`&\x82\x01R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xC0\x84\x90\x1B\x16`'\x82\x01R`/\x81\x01\x82\x90R_\x90\x81\x90`O\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90Pa\x1C\xD3\x87\x87\x83`@Q\x80`@\x01`@R\x80`\x12\x81R` \x01\x7FTable merkle tree:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RPa$\xC9V[\x97\x96PPPPPPPV[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x81_\x85\x85\x83\x81\x81\x10a\x1D\x05Wa\x1D\x05a1\xF4V[\x91\x90\x91\x015`\xF8\x1C\x91P\x82\x90Pa\x1D\x1B\x81a2\x08V[\x92PPa\x1D&`\x06\x90V[`\x06\x81\x11\x15a\x1D7Wa\x1D7a)ZV[`\xFF\x16\x81`\xFF\x16\x11\x15a\x1D\x8CW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0E`$\x82\x01R\x7FBAD_VALUE_TYPE\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xE7V[_a\x1D\x98\x87\x87\x85a%\xD3V[\x80\x94P\x81\x92PPP`@Q\x80`@\x01`@R\x80\x83`\xFF\x16`\x06\x81\x11\x15a\x1D\xC0Wa\x1D\xC0a)ZV[`\x06\x81\x11\x15a\x1D\xD1Wa\x1D\xD1a)ZV[\x81R` \x01\x82\x81RP\x93PPP\x93P\x93\x91PPV[_\x80\x83a\x1D\xF2\x84a&\x1CV[`@Q\x7FTable element:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`.\x81\x01\x92\x90\x92R`N\x82\x01R`n\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90Pa\x1E\x84\x86\x86\x83`@Q\x80`@\x01`@R\x80`\x1A\x81R` \x01\x7FTable element merkle tree:\0\0\0\0\0\0\x81RPa$\xC9V[\x91PP[\x94\x93PPPPV[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R_a\x1E\xBD`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x90V[`@\x80Q` \x81\x01\x90\x91R``\x81Ra\x1E\xD7\x86\x86\x85a\x1C\xDEV[\x93P\x91Pa\x1E\xE6\x86\x86\x85a\x1A\x1EV[\x93P\x90P_a\x1E\xF6\x82\x89\x85a&7V[\x90P\x88\x81\x14a\x1FGW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x11`$\x82\x01R\x7FWRONG_MERKLE_ROOT\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xE7V[P\x90\x97\x96PPPPPPPV[_a\x1Fn`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x90V[_a\x1F\x85`@Q\x80` \x01`@R\x80``\x81RP\x90V[a\x1F\x90\x86\x86\x84a\x1C\xDEV[\x90\x93P\x91Pa\x1F\xA0\x86\x86\x84a\x1A\x1EV[\x92P\x90P_a\x1F\xB0\x82\x8A\x86a&7V[\x90P\x89\x81\x14a \x01W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x11`$\x82\x01R\x7FWRONG_MERKLE_ROOT\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xE7V[a \x0C\x82\x8A\x8Aa&7V[\x9A\x99PPPPPPPPPPV[\x81QQ_\x90a *\x90`\x01a2 V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a BWa Ba,\"V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a \x9FW\x81` \x01[`@\x80Q`\xC0\x81\x01\x82R_`\x80\x82\x01\x81\x81R`\xA0\x83\x01\x82\x90R\x82R` \x80\x83\x01\x82\x90R\x92\x82\x01\x81\x90R``\x82\x01R\x82R_\x19\x90\x92\x01\x91\x01\x81a `W\x90P[P\x90P_[\x83QQ\x81\x10\x15a \xEFW\x83Q\x80Q\x82\x90\x81\x10a \xC2Wa \xC2a1\xF4V[` \x02` \x01\x01Q\x82\x82\x81Q\x81\x10a \xDCWa \xDCa1\xF4V[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a \xA4V[P\x81\x81\x84_\x01QQ\x81Q\x81\x10a!\x07Wa!\x07a1\xF4V[` \x90\x81\x02\x91\x90\x91\x01\x01R\x90\x91RPV[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x81QQQa\x1B8a!=`\x01\x83a23V[\x84Q\x90a&\x81V[_``\x82\x90\x1C\x15a!WWP_a\x17\x8DV[Pc\xFF\xFF\xFF\xFF\x81\x81\x16a\x01 \x84\x01R` \x82\x90\x1C\x81\x16a\x01\0\x84\x01R`@\x91\x90\x91\x1C\x16`\xE0\x90\x91\x01R`\x01\x90V[\x81QQ_\x90a!\x95\x90`\x01a2 V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a!\xADWa!\xADa,\"V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a!\xF1W\x81` \x01[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x81R` \x01\x90`\x01\x90\x03\x90\x81a!\xCBW\x90P[P\x90P_[\x83QQ\x81\x10\x15a \xEFW\x83Q\x80Q\x82\x90\x81\x10a\"\x14Wa\"\x14a1\xF4V[` \x02` \x01\x01Q\x82\x82\x81Q\x81\x10a\".Wa\".a1\xF4V[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a!\xF6V[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x81Q\x80Qa\"d\x90`\x01\x90a23V[\x81Q\x81\x10a\"tWa\"ta1\xF4V[` \x02` \x01\x01Q\x90P_`\x01\x83_\x01QQa\"\x90\x91\x90a23V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\"\xA8Wa\"\xA8a,\"V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\"\xECW\x81` \x01[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x81R` \x01\x90`\x01\x90\x03\x90\x81a\"\xC6W\x90P[P\x90P_[\x81Q\x81\x10\x15a\x16\x94W\x83Q\x80Q\x82\x90\x81\x10a#\x0EWa#\x0Ea1\xF4V[` \x02` \x01\x01Q\x82\x82\x81Q\x81\x10a#(Wa#(a1\xF4V[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a\"\xF1V[`@\x80Q``\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x91\x90\x91R\x81_\x80\x80a#f\x88\x88\x86a\x1B?V[\x94P\x92Pa#u\x88\x88\x86a\x1B?V[\x94P\x91Pa#\x84\x88\x88\x86a\x1B\x9BV[`@\x80Q``\x81\x01\x82Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x96\x87\x16\x81R\x94\x90\x95\x16` \x85\x01R\x93\x83\x01RP\x96\x90\x95P\x93PPPPV[_\x81\x81[`\x04\x81\x10\x15a\x1B\x92W`\x08\x83c\xFF\xFF\xFF\xFF\x16\x90\x1B\x92P\x85\x85\x83\x81\x81\x10a#\xE1Wa#\xE1a1\xF4V[\x91\x90\x91\x015`\xF8\x1C\x93\x90\x93\x17\x92P\x81a#\xF9\x81a2\x08V[\x92PP`\x01\x01a#\xB9V[_\x81_\x01Qa$\x16\x83` \x01Qa&\xB8V[`@\x80\x85\x01Q``\x86\x01Q`\x80\x87\x01Q`\xA0\x88\x01Q\x93Qa$\xAC\x96\x95\x94\x90` \x01\x7FModule:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x07\x81\x01\x96\x90\x96R`'\x86\x01\x94\x90\x94R`G\x85\x01\x92\x90\x92R`g\x84\x01R`\x87\x83\x01R`\xE0\x1B\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16`\xA7\x82\x01R`\xAB\x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P\x91\x90PV[\x81_[\x85QQ\x81\x10\x15a%\x84W\x84`\x01\x16_\x03a%.W\x82\x82\x87_\x01Q\x83\x81Q\x81\x10a$\xF7Wa$\xF7a1\xF4V[` \x02` \x01\x01Q`@Q` \x01a%\x11\x93\x92\x91\x90a2FV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x91Pa%xV[\x82\x86_\x01Q\x82\x81Q\x81\x10a%DWa%Da1\xF4V[` \x02` \x01\x01Q\x83`@Q` \x01a%_\x93\x92\x91\x90a2FV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x91P[`\x01\x94\x85\x1C\x94\x01a$\xCCV[P\x83\x15a\x1E\x88W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0F`$\x82\x01R\x7FPROOF_TOO_SHORT\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xE7V[_\x81\x81[` \x81\x10\x15a\x1B\x92W`\x08\x83\x90\x1B\x92P\x85\x85\x83\x81\x81\x10a%\xF9Wa%\xF9a1\xF4V[\x91\x90\x91\x015`\xF8\x1C\x93\x90\x93\x17\x92P\x81a&\x11\x81a2\x08V[\x92PP`\x01\x01a%\xD7V[_\x81_\x01Q\x82` \x01Q`@Q` \x01a$\xAC\x92\x91\x90a2eV[_a\x1B5\x84\x84a&F\x85a&\x1CV[`@Q\x80`@\x01`@R\x80`\x12\x81R` \x01\x7FValue merkle tree:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RPa$\xC9V[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x82Q\x80Q\x83\x90\x81\x10a&\xA8Wa&\xA8a1\xF4V[` \x02` \x01\x01Q\x90P\x92\x91PPV[\x80Q` \x80\x83\x01Q`@\x80\x85\x01Q\x90Q\x7FMemory:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x93\x81\x01\x93\x90\x93R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xC0\x94\x85\x1B\x81\x16`'\x85\x01R\x91\x90\x93\x1B\x16`/\x82\x01R`7\x81\x01\x91\x90\x91R_\x90`W\x01a$\xACV[`@\x80Qa\x01\x80\x81\x01\x90\x91R\x80_\x81R` \x01a'l`@\x80Q``\x80\x82\x01\x83R\x91\x81\x01\x91\x82R\x90\x81R_` \x82\x01R\x90V[\x81R`@\x80Q\x80\x82\x01\x82R_\x80\x82R` \x80\x83\x01\x91\x90\x91R\x83\x01R\x01a'\xA8`@\x80Q``\x80\x82\x01\x83R\x91\x81\x01\x91\x82R\x90\x81R_` \x82\x01R\x90V[\x81R` \x01a'\xCC`@Q\x80`@\x01`@R\x80``\x81R` \x01_\x80\x19\x16\x81RP\x90V[\x81R`@\x80Q\x80\x82\x01\x82R_\x80\x82R` \x80\x83\x01\x82\x90R\x84\x01\x91\x90\x91R\x90\x82\x01\x81\x90R``\x82\x01\x81\x90R`\x80\x82\x01\x81\x90R`\xA0\x82\x01\x81\x90R`\xC0\x82\x01\x81\x90R`\xE0\x90\x91\x01R\x90V[a(\x1Ca2\xB0V[V[_\x80\x83`\x1F\x84\x01\x12a(.W_\x80\xFD[P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a(EW_\x80\xFD[` \x83\x01\x91P\x83` \x82\x85\x01\x01\x11\x15a(\\W_\x80\xFD[\x92P\x92\x90PV[_\x80_\x80_\x80\x86\x88\x03a\x01\xE0\x81\x12\x15a(zW_\x80\xFD[``\x81\x12\x15a(\x87W_\x80\xFD[\x87\x96P``\x88\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a(\xA4W_\x80\xFD[\x81\x8A\x01\x91Pa\x01\xC0\x80\x83\x8D\x03\x12\x15a(\xBAW_\x80\xFD[\x82\x98Pa\x01\0\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x85\x01\x12\x15a(\xEDW_\x80\xFD[`\x80\x8B\x01\x97P`@\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFE\x80\x85\x01\x12\x15a)\"W_\x80\xFD[a\x01\x80\x8B\x01\x96P\x8A\x015\x92P\x80\x83\x11\x15a):W_\x80\xFD[PPa)H\x89\x82\x8A\x01a(\x1EV[\x97\x9A\x96\x99P\x94\x97P\x92\x95\x93\x94\x92PPPV[cNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[`\x03\x81\x10a)~Wa)~a)ZV[\x90RV[\x80Q`\x07\x81\x10a)\x94Wa)\x94a)ZV[\x82R` \x90\x81\x01Q\x91\x01RV[\x80Q`@\x80\x84R\x90Q` \x84\x83\x01\x81\x90R\x81Q``\x86\x01\x81\x90R_\x93\x92\x82\x01\x91\x84\x91`\x80\x88\x01\x90[\x80\x84\x10\x15a)\xF0Wa)\xDC\x82\x86Qa)\x82V[\x93\x82\x01\x93`\x01\x93\x90\x93\x01\x92\x90\x85\x01\x90a)\xC9V[P` \x87\x01Q` \x89\x01R\x80\x95PPPPPP\x92\x91PPV[\x80Q`@\x80\x84R\x81Q\x84\x82\x01\x81\x90R_\x92``\x91` \x91\x82\x01\x91\x83\x88\x01\x91\x90\x86[\x82\x81\x10\x15a*sW\x84Qa*?\x85\x82Qa)\x82V[\x80\x83\x01Q\x85\x89\x01R\x87\x81\x01Qc\xFF\xFF\xFF\xFF\x90\x81\x16\x88\x87\x01R\x90\x87\x01Q\x16`\x80\x85\x01R\x93\x81\x01\x93`\xA0\x90\x93\x01\x92`\x01\x01a**V[PPP` \x86\x01Q` \x88\x01R\x80\x94PPPPP\x92\x91PPV[_a\x01 \x80\x83Ra*\xA1\x81\x84\x01\x86Qa)nV[` \x85\x01Qa\x01\xC0a\x01@\x81\x81\x87\x01Ra*\xBFa\x02\xE0\x87\x01\x84a)\xA1V[\x92P`@\x88\x01Qa\x01`a*\xDF\x81\x89\x01\x83\x80Q\x82R` \x90\x81\x01Q\x91\x01RV[``\x8A\x01Q\x91P\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFE\xE0\x80\x89\x87\x03\x01a\x01\xA0\x8A\x01Ra+\x1C\x86\x84a)\xA1V[\x95P`\x80\x8B\x01Q\x92P\x80\x89\x87\x03\x01\x85\x8A\x01RPa+9\x85\x83a*\tV[`\xA0\x8B\x01Q\x80Qa\x01\xE0\x8B\x01R` \x81\x01Qa\x02\0\x8B\x01R\x90\x95P\x93P`\xC0\x8A\x01Qa\x02 \x89\x01R`\xE0\x8A\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x02@\x8A\x01R\x93Pa\x01\0\x8A\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x02`\x8A\x01R\x93P\x94\x89\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x02\x80\x89\x01R\x94\x91\x89\x01Qa\x02\xA0\x88\x01RP\x87\x01Qa\x02\xC0\x86\x01RP\x91Pa\x1B8\x90P` \x83\x01\x84\x80Q\x82R` \x81\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82Q\x16` \x85\x01R\x80` \x83\x01Q\x16`@\x85\x01RP`@\x81\x01Q``\x84\x01RP`@\x81\x01Q`\x80\x83\x01R``\x81\x01Q`\xA0\x83\x01R`\x80\x81\x01Q`\xC0\x83\x01Rc\xFF\xFF\xFF\xFF`\xA0\x82\x01Q\x16`\xE0\x83\x01RPPV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@\x80Q\x90\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a,YWa,Ya,\"V[`@R\x90V[`@Q` \x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a,YWa,Ya,\"V[`@Q`\x80\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a,YWa,Ya,\"V[`@Qa\x01\x80\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a,YWa,Ya,\"V[`@Q`\xC0\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a,YWa,Ya,\"V[`@Q``\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a,YWa,Ya,\"V[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a-8Wa-8a,\"V[`@R\x91\x90PV[\x805`\x03\x81\x10a-NW_\x80\xFD[\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a-lWa-la,\"V[P`\x05\x1B` \x01\x90V[_`@\x82\x84\x03\x12\x15a-\x86W_\x80\xFD[a-\x8Ea,6V[\x90P\x815`\x07\x81\x10a-\x9EW_\x80\xFD[\x80\x82RP` \x82\x015` \x82\x01R\x92\x91PPV[_`@\x80\x83\x85\x03\x12\x15a-\xC3W_\x80\xFD[a-\xCBa,6V[\x91P\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a-\xE4W_\x80\xFD[\x81\x85\x01\x91P` \x80\x83\x88\x03\x12\x15a-\xF9W_\x80\xFD[a.\x01a,_V[\x835\x83\x81\x11\x15a.\x0FW_\x80\xFD[\x80\x85\x01\x94PP\x87`\x1F\x85\x01\x12a.#W_\x80\xFD[\x835\x92Pa.8a.3\x84a-SV[a-\x0FV[\x83\x81R`\x06\x93\x90\x93\x1B\x84\x01\x82\x01\x92\x82\x81\x01\x90\x89\x85\x11\x15a.VW_\x80\xFD[\x94\x83\x01\x94[\x84\x86\x10\x15a.|Wa.m\x8A\x87a-vV[\x82R\x94\x86\x01\x94\x90\x83\x01\x90a.[V[\x82RP\x85R\x94\x85\x015\x94\x84\x01\x94\x90\x94RP\x90\x93\x92PPPV[_`@\x82\x84\x03\x12\x15a.\xA5W_\x80\xFD[a.\xADa,6V[\x90P\x815\x81R` \x82\x015` \x82\x01R\x92\x91PPV[\x805c\xFF\xFF\xFF\xFF\x81\x16\x81\x14a-NW_\x80\xFD[_`@\x80\x83\x85\x03\x12\x15a.\xE7W_\x80\xFD[a.\xEFa,6V[\x91P\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a/\x07W_\x80\xFD[\x83\x01`\x1F\x81\x01\x85\x13a/\x17W_\x80\xFD[\x805` a/'a.3\x83a-SV[\x82\x81R`\xA0\x92\x83\x02\x84\x01\x82\x01\x92\x82\x82\x01\x91\x90\x89\x85\x11\x15a/EW_\x80\xFD[\x94\x83\x01\x94[\x84\x86\x10\x15a/\xACW\x80\x86\x8B\x03\x12\x15a/`W_\x80\xFD[a/ha,\x82V[a/r\x8B\x88a-vV[\x81R\x87\x87\x015\x85\x82\x01R``a/\x89\x81\x89\x01a.\xC3V[\x89\x83\x01Ra/\x99`\x80\x89\x01a.\xC3V[\x90\x82\x01R\x83R\x94\x85\x01\x94\x91\x83\x01\x91a/JV[P\x80\x87RPP\x80\x86\x015\x81\x86\x01RPPPP\x92\x91PPV[_a\x01\xC0\x826\x03\x12\x15a/\xD5W_\x80\xFD[a/\xDDa,\xA5V[a/\xE6\x83a-@V[\x81R` \x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a0\x02W_\x80\xFD[a0\x0E6\x83\x87\x01a-\xB2V[` \x84\x01Ra0 6`@\x87\x01a.\x95V[`@\x84\x01R`\x80\x85\x015\x91P\x80\x82\x11\x15a08W_\x80\xFD[a0D6\x83\x87\x01a-\xB2V[``\x84\x01R`\xA0\x85\x015\x91P\x80\x82\x11\x15a0\\W_\x80\xFD[Pa0i6\x82\x86\x01a.\xD6V[`\x80\x83\x01RPa0|6`\xC0\x85\x01a.\x95V[`\xA0\x82\x01Ra\x01\0\x80\x84\x015`\xC0\x83\x01Ra\x01 a0\x9B\x81\x86\x01a.\xC3V[`\xE0\x84\x01Ra\x01@a0\xAE\x81\x87\x01a.\xC3V[\x83\x85\x01Ra\x01`\x92Pa0\xC2\x83\x87\x01a.\xC3V[\x91\x84\x01\x91\x90\x91Ra\x01\x80\x85\x015\x90\x83\x01Ra\x01\xA0\x90\x93\x015\x92\x81\x01\x92\x90\x92RP\x90V[\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a-NW_\x80\xFD[_\x81\x83\x03a\x01\0\x81\x12\x15a1\x0EW_\x80\xFD[a1\x16a,\xC9V[\x835\x81R```\x1F\x19\x83\x01\x12\x15a1+W_\x80\xFD[a13a,\xECV[\x91Pa1A` \x85\x01a0\xE5V[\x82Ra1O`@\x85\x01a0\xE5V[` \x83\x01R``\x84\x015`@\x83\x01R\x81` \x82\x01R`\x80\x84\x015`@\x82\x01R`\xA0\x84\x015``\x82\x01R`\xC0\x84\x015`\x80\x82\x01Ra1\x8E`\xE0\x85\x01a.\xC3V[`\xA0\x82\x01R\x94\x93PPPPV[_` \x82\x84\x03\x12\x15a1\xABW_\x80\xFD[\x815a\xFF\xFF\x81\x16\x81\x14a\x1B8W_\x80\xFD[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[c\xFF\xFF\xFF\xFF\x81\x81\x16\x83\x82\x16\x01\x90\x80\x82\x11\x15a1\xEDWa1\xEDa1\xBCV[P\x92\x91PPV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[__\x19\x82\x03a2\x19Wa2\x19a1\xBCV[P`\x01\x01\x90V[\x80\x82\x01\x80\x82\x11\x15a\x17\x8DWa\x17\x8Da1\xBCV[\x81\x81\x03\x81\x81\x11\x15a\x17\x8DWa\x17\x8Da1\xBCV[_\x84Q\x80` \x87\x01\x84^\x91\x90\x91\x01\x92\x83RP` \x82\x01R`@\x01\x91\x90PV[\x7FValue:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R_`\x07\x84\x10a2\x99Wa2\x99a)ZV[P`\xF8\x92\x90\x92\x1B`\x06\x83\x01R`\x07\x82\x01R`'\x01\x90V[cNH{q`\xE0\x1B_R`Q`\x04R`$_\xFD\xFE\xA2dipfsX\"\x12 \n\x86R\xF95\xD5!\xD6V(\xD3\x1FW\x82\x071\xF0\xF7\xACs\tm\xE7\x08f\xD5\x9C\x9C\x92\xE0\xF4\xF7dsolcC\0\x08\x19\x003",
    );
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MachineStatus(u8);
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<MachineStatus> for u8 {
            #[inline]
            fn stv_to_tokens(
                &self,
            ) -> <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'_> {
                alloy_sol_types::private::SolTypeValue::<
                    alloy::sol_types::sol_data::Uint<8>,
                >::stv_to_tokens(self)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::tokenize(self)
                    .0
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(self, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encoded_size(self)
            }
        }
        #[automatically_derived]
        impl MachineStatus {
            /// The Solidity type name.
            pub const NAME: &'static str = stringify!(@ name);
            /// Convert from the underlying value type.
            #[inline]
            pub const fn from(value: u8) -> Self {
                Self(value)
            }
            /// Return the underlying value.
            #[inline]
            pub const fn into(self) -> u8 {
                self.0
            }
            /// Return the single encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode(&self.0)
            }
            /// Return the packed encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode_packed(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode_packed(&self.0)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for MachineStatus {
            type RustType = u8;
            type Token<'a> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = Self::NAME;
            const ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                Self::type_check(token).is_ok()
            }
            #[inline]
            fn type_check(token: &Self::Token<'_>) -> alloy_sol_types::Result<()> {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::type_check(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::detokenize(token)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for MachineStatus {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::topic_preimage_length(rust)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(rust, out)
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic(rust)
            }
        }
    };
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ValueType(u8);
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<ValueType> for u8 {
            #[inline]
            fn stv_to_tokens(
                &self,
            ) -> <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'_> {
                alloy_sol_types::private::SolTypeValue::<
                    alloy::sol_types::sol_data::Uint<8>,
                >::stv_to_tokens(self)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::tokenize(self)
                    .0
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(self, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encoded_size(self)
            }
        }
        #[automatically_derived]
        impl ValueType {
            /// The Solidity type name.
            pub const NAME: &'static str = stringify!(@ name);
            /// Convert from the underlying value type.
            #[inline]
            pub const fn from(value: u8) -> Self {
                Self(value)
            }
            /// Return the underlying value.
            #[inline]
            pub const fn into(self) -> u8 {
                self.0
            }
            /// Return the single encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode(&self.0)
            }
            /// Return the packed encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode_packed(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode_packed(&self.0)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ValueType {
            type RustType = u8;
            type Token<'a> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = Self::NAME;
            const ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                Self::type_check(token).is_ok()
            }
            #[inline]
            fn type_check(token: &Self::Token<'_>) -> alloy_sol_types::Result<()> {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::type_check(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::detokenize(token)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ValueType {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::topic_preimage_length(rust)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(rust, out)
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic(rust)
            }
        }
    };
    /**```solidity
struct ExecutionContext { uint256 maxInboxMessagesRead; address bridge; bytes32 initialWasmModuleRoot; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ExecutionContext {
        pub maxInboxMessagesRead: alloy::sol_types::private::primitives::aliases::U256,
        pub bridge: alloy::sol_types::private::Address,
        pub initialWasmModuleRoot: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ExecutionContext> for UnderlyingRustTuple<'_> {
            fn from(value: ExecutionContext) -> Self {
                (value.maxInboxMessagesRead, value.bridge, value.initialWasmModuleRoot)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ExecutionContext {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    maxInboxMessagesRead: tuple.0,
                    bridge: tuple.1,
                    initialWasmModuleRoot: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for ExecutionContext {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for ExecutionContext {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.maxInboxMessagesRead),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.bridge,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.initialWasmModuleRoot),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ExecutionContext {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for ExecutionContext {
            const NAME: &'static str = "ExecutionContext";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "ExecutionContext(uint256 maxInboxMessagesRead,address bridge,bytes32 initialWasmModuleRoot)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.maxInboxMessagesRead,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.bridge,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.initialWasmModuleRoot,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ExecutionContext {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.maxInboxMessagesRead,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.bridge,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.initialWasmModuleRoot,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.maxInboxMessagesRead,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.bridge,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.initialWasmModuleRoot,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct Instruction { uint16 opcode; uint256 argumentData; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct Instruction {
        pub opcode: u16,
        pub argumentData: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<16>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            u16,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Instruction> for UnderlyingRustTuple<'_> {
            fn from(value: Instruction) -> Self {
                (value.opcode, value.argumentData)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Instruction {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    opcode: tuple.0,
                    argumentData: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Instruction {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Instruction {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        16,
                    > as alloy_sol_types::SolType>::tokenize(&self.opcode),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.argumentData),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Instruction {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Instruction {
            const NAME: &'static str = "Instruction";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "Instruction(uint16 opcode,uint256 argumentData)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        16,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.opcode)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.argumentData)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Instruction {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        16,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.opcode,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.argumentData,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    16,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.opcode,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.argumentData,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct Machine { MachineStatus status; ValueStack valueStack; MultiStack valueMultiStack; ValueStack internalStack; StackFrameWindow frameStack; MultiStack frameMultiStack; bytes32 globalStateHash; uint32 moduleIdx; uint32 functionIdx; uint32 functionPc; bytes32 recoveryPc; bytes32 modulesRoot; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct Machine {
        pub status: <MachineStatus as alloy::sol_types::SolType>::RustType,
        pub valueStack: <ValueStack as alloy::sol_types::SolType>::RustType,
        pub valueMultiStack: <MultiStack as alloy::sol_types::SolType>::RustType,
        pub internalStack: <ValueStack as alloy::sol_types::SolType>::RustType,
        pub frameStack: <StackFrameWindow as alloy::sol_types::SolType>::RustType,
        pub frameMultiStack: <MultiStack as alloy::sol_types::SolType>::RustType,
        pub globalStateHash: alloy::sol_types::private::FixedBytes<32>,
        pub moduleIdx: u32,
        pub functionIdx: u32,
        pub functionPc: u32,
        pub recoveryPc: alloy::sol_types::private::FixedBytes<32>,
        pub modulesRoot: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            MachineStatus,
            ValueStack,
            MultiStack,
            ValueStack,
            StackFrameWindow,
            MultiStack,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::Uint<32>,
            alloy::sol_types::sol_data::Uint<32>,
            alloy::sol_types::sol_data::Uint<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            <MachineStatus as alloy::sol_types::SolType>::RustType,
            <ValueStack as alloy::sol_types::SolType>::RustType,
            <MultiStack as alloy::sol_types::SolType>::RustType,
            <ValueStack as alloy::sol_types::SolType>::RustType,
            <StackFrameWindow as alloy::sol_types::SolType>::RustType,
            <MultiStack as alloy::sol_types::SolType>::RustType,
            alloy::sol_types::private::FixedBytes<32>,
            u32,
            u32,
            u32,
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Machine> for UnderlyingRustTuple<'_> {
            fn from(value: Machine) -> Self {
                (
                    value.status,
                    value.valueStack,
                    value.valueMultiStack,
                    value.internalStack,
                    value.frameStack,
                    value.frameMultiStack,
                    value.globalStateHash,
                    value.moduleIdx,
                    value.functionIdx,
                    value.functionPc,
                    value.recoveryPc,
                    value.modulesRoot,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Machine {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    status: tuple.0,
                    valueStack: tuple.1,
                    valueMultiStack: tuple.2,
                    internalStack: tuple.3,
                    frameStack: tuple.4,
                    frameMultiStack: tuple.5,
                    globalStateHash: tuple.6,
                    moduleIdx: tuple.7,
                    functionIdx: tuple.8,
                    functionPc: tuple.9,
                    recoveryPc: tuple.10,
                    modulesRoot: tuple.11,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Machine {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Machine {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <MachineStatus as alloy_sol_types::SolType>::tokenize(&self.status),
                    <ValueStack as alloy_sol_types::SolType>::tokenize(&self.valueStack),
                    <MultiStack as alloy_sol_types::SolType>::tokenize(
                        &self.valueMultiStack,
                    ),
                    <ValueStack as alloy_sol_types::SolType>::tokenize(
                        &self.internalStack,
                    ),
                    <StackFrameWindow as alloy_sol_types::SolType>::tokenize(
                        &self.frameStack,
                    ),
                    <MultiStack as alloy_sol_types::SolType>::tokenize(
                        &self.frameMultiStack,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.globalStateHash),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.moduleIdx),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.functionIdx),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.functionPc),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.recoveryPc),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.modulesRoot),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Machine {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Machine {
            const NAME: &'static str = "Machine";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "Machine(uint8 status,ValueStack valueStack,MultiStack valueMultiStack,ValueStack internalStack,StackFrameWindow frameStack,MultiStack frameMultiStack,bytes32 globalStateHash,uint32 moduleIdx,uint32 functionIdx,uint32 functionPc,bytes32 recoveryPc,bytes32 modulesRoot)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(5);
                components
                    .push(
                        <ValueStack as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <ValueStack as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
                    .push(
                        <MultiStack as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <MultiStack as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
                    .push(
                        <ValueStack as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <ValueStack as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
                    .push(
                        <StackFrameWindow as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <StackFrameWindow as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
                    .push(
                        <MultiStack as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <MultiStack as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <MachineStatus as alloy_sol_types::SolType>::eip712_data_word(
                            &self.status,
                        )
                        .0,
                    <ValueStack as alloy_sol_types::SolType>::eip712_data_word(
                            &self.valueStack,
                        )
                        .0,
                    <MultiStack as alloy_sol_types::SolType>::eip712_data_word(
                            &self.valueMultiStack,
                        )
                        .0,
                    <ValueStack as alloy_sol_types::SolType>::eip712_data_word(
                            &self.internalStack,
                        )
                        .0,
                    <StackFrameWindow as alloy_sol_types::SolType>::eip712_data_word(
                            &self.frameStack,
                        )
                        .0,
                    <MultiStack as alloy_sol_types::SolType>::eip712_data_word(
                            &self.frameMultiStack,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.globalStateHash,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.moduleIdx)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.functionIdx)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.functionPc)
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.recoveryPc)
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.modulesRoot)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Machine {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <MachineStatus as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.status,
                    )
                    + <ValueStack as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.valueStack,
                    )
                    + <MultiStack as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.valueMultiStack,
                    )
                    + <ValueStack as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.internalStack,
                    )
                    + <StackFrameWindow as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.frameStack,
                    )
                    + <MultiStack as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.frameMultiStack,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.globalStateHash,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.moduleIdx,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.functionIdx,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.functionPc,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.recoveryPc,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.modulesRoot,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <MachineStatus as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.status,
                    out,
                );
                <ValueStack as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.valueStack,
                    out,
                );
                <MultiStack as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.valueMultiStack,
                    out,
                );
                <ValueStack as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.internalStack,
                    out,
                );
                <StackFrameWindow as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.frameStack,
                    out,
                );
                <MultiStack as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.frameMultiStack,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.globalStateHash,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.moduleIdx,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.functionIdx,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.functionPc,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.recoveryPc,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.modulesRoot,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct Module { bytes32 globalsMerkleRoot; ModuleMemory moduleMemory; bytes32 tablesMerkleRoot; bytes32 functionsMerkleRoot; bytes32 extraHash; uint32 internalsOffset; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct Module {
        pub globalsMerkleRoot: alloy::sol_types::private::FixedBytes<32>,
        pub moduleMemory: <ModuleMemory as alloy::sol_types::SolType>::RustType,
        pub tablesMerkleRoot: alloy::sol_types::private::FixedBytes<32>,
        pub functionsMerkleRoot: alloy::sol_types::private::FixedBytes<32>,
        pub extraHash: alloy::sol_types::private::FixedBytes<32>,
        pub internalsOffset: u32,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::FixedBytes<32>,
            ModuleMemory,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::Uint<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::FixedBytes<32>,
            <ModuleMemory as alloy::sol_types::SolType>::RustType,
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::FixedBytes<32>,
            u32,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Module> for UnderlyingRustTuple<'_> {
            fn from(value: Module) -> Self {
                (
                    value.globalsMerkleRoot,
                    value.moduleMemory,
                    value.tablesMerkleRoot,
                    value.functionsMerkleRoot,
                    value.extraHash,
                    value.internalsOffset,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Module {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    globalsMerkleRoot: tuple.0,
                    moduleMemory: tuple.1,
                    tablesMerkleRoot: tuple.2,
                    functionsMerkleRoot: tuple.3,
                    extraHash: tuple.4,
                    internalsOffset: tuple.5,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Module {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Module {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.globalsMerkleRoot),
                    <ModuleMemory as alloy_sol_types::SolType>::tokenize(
                        &self.moduleMemory,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.tablesMerkleRoot),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.functionsMerkleRoot),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.extraHash),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.internalsOffset),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Module {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Module {
            const NAME: &'static str = "Module";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "Module(bytes32 globalsMerkleRoot,ModuleMemory moduleMemory,bytes32 tablesMerkleRoot,bytes32 functionsMerkleRoot,bytes32 extraHash,uint32 internalsOffset)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(1);
                components
                    .push(
                        <ModuleMemory as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <ModuleMemory as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.globalsMerkleRoot,
                        )
                        .0,
                    <ModuleMemory as alloy_sol_types::SolType>::eip712_data_word(
                            &self.moduleMemory,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.tablesMerkleRoot,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.functionsMerkleRoot,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.extraHash)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.internalsOffset,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Module {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.globalsMerkleRoot,
                    )
                    + <ModuleMemory as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.moduleMemory,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.tablesMerkleRoot,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.functionsMerkleRoot,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.extraHash,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.internalsOffset,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.globalsMerkleRoot,
                    out,
                );
                <ModuleMemory as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.moduleMemory,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.tablesMerkleRoot,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.functionsMerkleRoot,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.extraHash,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.internalsOffset,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct ModuleMemory { uint64 size; uint64 maxSize; bytes32 merkleRoot; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ModuleMemory {
        pub size: u64,
        pub maxSize: u64,
        pub merkleRoot: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<64>,
            alloy::sol_types::sol_data::Uint<64>,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            u64,
            u64,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ModuleMemory> for UnderlyingRustTuple<'_> {
            fn from(value: ModuleMemory) -> Self {
                (value.size, value.maxSize, value.merkleRoot)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ModuleMemory {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    size: tuple.0,
                    maxSize: tuple.1,
                    merkleRoot: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for ModuleMemory {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for ModuleMemory {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.size),
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.maxSize),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.merkleRoot),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ModuleMemory {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for ModuleMemory {
            const NAME: &'static str = "ModuleMemory";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "ModuleMemory(uint64 size,uint64 maxSize,bytes32 merkleRoot)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.size)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.maxSize)
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.merkleRoot)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ModuleMemory {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.size)
                    + <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.maxSize,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.merkleRoot,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    64,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.size,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    64,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.maxSize,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.merkleRoot,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct MultiStack { bytes32 inactiveStackHash; bytes32 remainingHash; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MultiStack {
        pub inactiveStackHash: alloy::sol_types::private::FixedBytes<32>,
        pub remainingHash: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<MultiStack> for UnderlyingRustTuple<'_> {
            fn from(value: MultiStack) -> Self {
                (value.inactiveStackHash, value.remainingHash)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for MultiStack {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    inactiveStackHash: tuple.0,
                    remainingHash: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for MultiStack {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for MultiStack {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.inactiveStackHash),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.remainingHash),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for MultiStack {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for MultiStack {
            const NAME: &'static str = "MultiStack";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "MultiStack(bytes32 inactiveStackHash,bytes32 remainingHash)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.inactiveStackHash,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.remainingHash)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for MultiStack {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.inactiveStackHash,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.remainingHash,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.inactiveStackHash,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.remainingHash,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct StackFrame { Value returnPc; bytes32 localsMerkleRoot; uint32 callerModule; uint32 callerModuleInternals; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct StackFrame {
        pub returnPc: <Value as alloy::sol_types::SolType>::RustType,
        pub localsMerkleRoot: alloy::sol_types::private::FixedBytes<32>,
        pub callerModule: u32,
        pub callerModuleInternals: u32,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            Value,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::Uint<32>,
            alloy::sol_types::sol_data::Uint<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            <Value as alloy::sol_types::SolType>::RustType,
            alloy::sol_types::private::FixedBytes<32>,
            u32,
            u32,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<StackFrame> for UnderlyingRustTuple<'_> {
            fn from(value: StackFrame) -> Self {
                (
                    value.returnPc,
                    value.localsMerkleRoot,
                    value.callerModule,
                    value.callerModuleInternals,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for StackFrame {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    returnPc: tuple.0,
                    localsMerkleRoot: tuple.1,
                    callerModule: tuple.2,
                    callerModuleInternals: tuple.3,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for StackFrame {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for StackFrame {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <Value as alloy_sol_types::SolType>::tokenize(&self.returnPc),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.localsMerkleRoot),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.callerModule),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.callerModuleInternals),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for StackFrame {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for StackFrame {
            const NAME: &'static str = "StackFrame";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "StackFrame(Value returnPc,bytes32 localsMerkleRoot,uint32 callerModule,uint32 callerModuleInternals)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(1);
                components
                    .push(<Value as alloy_sol_types::SolStruct>::eip712_root_type());
                components
                    .extend(<Value as alloy_sol_types::SolStruct>::eip712_components());
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <Value as alloy_sol_types::SolType>::eip712_data_word(&self.returnPc)
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.localsMerkleRoot,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.callerModule)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.callerModuleInternals,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for StackFrame {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <Value as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.returnPc,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.localsMerkleRoot,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.callerModule,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.callerModuleInternals,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <Value as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.returnPc,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.localsMerkleRoot,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.callerModule,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.callerModuleInternals,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct StackFrameWindow { StackFrame[] proved; bytes32 remainingHash; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct StackFrameWindow {
        pub proved: alloy::sol_types::private::Vec<
            <StackFrame as alloy::sol_types::SolType>::RustType,
        >,
        pub remainingHash: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Array<StackFrame>,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Vec<
                <StackFrame as alloy::sol_types::SolType>::RustType,
            >,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<StackFrameWindow> for UnderlyingRustTuple<'_> {
            fn from(value: StackFrameWindow) -> Self {
                (value.proved, value.remainingHash)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for StackFrameWindow {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    proved: tuple.0,
                    remainingHash: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for StackFrameWindow {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for StackFrameWindow {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        StackFrame,
                    > as alloy_sol_types::SolType>::tokenize(&self.proved),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.remainingHash),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for StackFrameWindow {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for StackFrameWindow {
            const NAME: &'static str = "StackFrameWindow";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "StackFrameWindow(StackFrame[] proved,bytes32 remainingHash)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(1);
                components
                    .push(
                        <StackFrame as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <StackFrame as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Array<
                        StackFrame,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.proved)
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.remainingHash)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for StackFrameWindow {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Array<
                        StackFrame,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.proved,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.remainingHash,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Array<
                    StackFrame,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.proved,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.remainingHash,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct Value { ValueType valueType; uint256 contents; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct Value {
        pub valueType: <ValueType as alloy::sol_types::SolType>::RustType,
        pub contents: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (ValueType, alloy::sol_types::sol_data::Uint<256>);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            <ValueType as alloy::sol_types::SolType>::RustType,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Value> for UnderlyingRustTuple<'_> {
            fn from(value: Value) -> Self {
                (value.valueType, value.contents)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Value {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    valueType: tuple.0,
                    contents: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Value {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Value {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <ValueType as alloy_sol_types::SolType>::tokenize(&self.valueType),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contents),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Value {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Value {
            const NAME: &'static str = "Value";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "Value(uint8 valueType,uint256 contents)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <ValueType as alloy_sol_types::SolType>::eip712_data_word(
                            &self.valueType,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.contents)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Value {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <ValueType as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.valueType,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.contents,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <ValueType as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.valueType,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.contents,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct ValueArray { Value[] inner; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ValueArray {
        pub inner: alloy::sol_types::private::Vec<
            <Value as alloy::sol_types::SolType>::RustType,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Array<Value>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Vec<
                <Value as alloy::sol_types::SolType>::RustType,
            >,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ValueArray> for UnderlyingRustTuple<'_> {
            fn from(value: ValueArray) -> Self {
                (value.inner,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ValueArray {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { inner: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for ValueArray {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for ValueArray {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        Value,
                    > as alloy_sol_types::SolType>::tokenize(&self.inner),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ValueArray {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for ValueArray {
            const NAME: &'static str = "ValueArray";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed("ValueArray(Value[] inner)")
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(1);
                components
                    .push(<Value as alloy_sol_types::SolStruct>::eip712_root_type());
                components
                    .extend(<Value as alloy_sol_types::SolStruct>::eip712_components());
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                <alloy::sol_types::sol_data::Array<
                    Value,
                > as alloy_sol_types::SolType>::eip712_data_word(&self.inner)
                    .0
                    .to_vec()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ValueArray {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Array<
                        Value,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.inner)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Array<
                    Value,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.inner,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct ValueStack { ValueArray proved; bytes32 remainingHash; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ValueStack {
        pub proved: <ValueArray as alloy::sol_types::SolType>::RustType,
        pub remainingHash: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            ValueArray,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            <ValueArray as alloy::sol_types::SolType>::RustType,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ValueStack> for UnderlyingRustTuple<'_> {
            fn from(value: ValueStack) -> Self {
                (value.proved, value.remainingHash)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ValueStack {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    proved: tuple.0,
                    remainingHash: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for ValueStack {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for ValueStack {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <ValueArray as alloy_sol_types::SolType>::tokenize(&self.proved),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.remainingHash),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ValueStack {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for ValueStack {
            const NAME: &'static str = "ValueStack";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "ValueStack(ValueArray proved,bytes32 remainingHash)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(1);
                components
                    .push(
                        <ValueArray as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <ValueArray as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <ValueArray as alloy_sol_types::SolType>::eip712_data_word(
                            &self.proved,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.remainingHash)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ValueStack {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <ValueArray as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.proved,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.remainingHash,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <ValueArray as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.proved,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.remainingHash,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**Function with signature `executeOneStep((uint256,address,bytes32),(uint8,(((uint8,uint256)[]),bytes32),(bytes32,bytes32),(((uint8,uint256)[]),bytes32),(((uint8,uint256),bytes32,uint32,uint32)[],bytes32),(bytes32,bytes32),bytes32,uint32,uint32,uint32,bytes32,bytes32),(bytes32,(uint64,uint64,bytes32),bytes32,bytes32,bytes32,uint32),(uint16,uint256),bytes)` and selector `0xa92cb501`.
```solidity
function executeOneStep(ExecutionContext memory, Machine memory startMach, Module memory startMod, Instruction memory inst, bytes memory proof) external pure returns (Machine memory mach, Module memory r#mod);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeOneStepCall {
        pub _0: <ExecutionContext as alloy::sol_types::SolType>::RustType,
        pub startMach: <Machine as alloy::sol_types::SolType>::RustType,
        pub startMod: <Module as alloy::sol_types::SolType>::RustType,
        pub inst: <Instruction as alloy::sol_types::SolType>::RustType,
        pub proof: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`executeOneStep((uint256,address,bytes32),(uint8,(((uint8,uint256)[]),bytes32),(bytes32,bytes32),(((uint8,uint256)[]),bytes32),(((uint8,uint256),bytes32,uint32,uint32)[],bytes32),(bytes32,bytes32),bytes32,uint32,uint32,uint32,bytes32,bytes32),(bytes32,(uint64,uint64,bytes32),bytes32,bytes32,bytes32,uint32),(uint16,uint256),bytes)`](executeOneStepCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeOneStepReturn {
        pub mach: <Machine as alloy::sol_types::SolType>::RustType,
        pub r#mod: <Module as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                ExecutionContext,
                Machine,
                Module,
                Instruction,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <ExecutionContext as alloy::sol_types::SolType>::RustType,
                <Machine as alloy::sol_types::SolType>::RustType,
                <Module as alloy::sol_types::SolType>::RustType,
                <Instruction as alloy::sol_types::SolType>::RustType,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeOneStepCall> for UnderlyingRustTuple<'_> {
                fn from(value: executeOneStepCall) -> Self {
                    (value._0, value.startMach, value.startMod, value.inst, value.proof)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for executeOneStepCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _0: tuple.0,
                        startMach: tuple.1,
                        startMod: tuple.2,
                        inst: tuple.3,
                        proof: tuple.4,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (Machine, Module);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <Machine as alloy::sol_types::SolType>::RustType,
                <Module as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeOneStepReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: executeOneStepReturn) -> Self {
                    (value.mach, value.r#mod)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for executeOneStepReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        mach: tuple.0,
                        r#mod: tuple.1,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for executeOneStepCall {
            type Parameters<'a> = (
                ExecutionContext,
                Machine,
                Module,
                Instruction,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = executeOneStepReturn;
            type ReturnTuple<'a> = (Machine, Module);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "executeOneStep((uint256,address,bytes32),(uint8,(((uint8,uint256)[]),bytes32),(bytes32,bytes32),(((uint8,uint256)[]),bytes32),(((uint8,uint256),bytes32,uint32,uint32)[],bytes32),(bytes32,bytes32),bytes32,uint32,uint32,uint32,bytes32,bytes32),(bytes32,(uint64,uint64,bytes32),bytes32,bytes32,bytes32,uint32),(uint16,uint256),bytes)";
            const SELECTOR: [u8; 4] = [169u8, 44u8, 181u8, 1u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <ExecutionContext as alloy_sol_types::SolType>::tokenize(&self._0),
                    <Machine as alloy_sol_types::SolType>::tokenize(&self.startMach),
                    <Module as alloy_sol_types::SolType>::tokenize(&self.startMod),
                    <Instruction as alloy_sol_types::SolType>::tokenize(&self.inst),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.proof,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`OneStepProver0`](self) function calls.
    pub enum OneStepProver0Calls {
        executeOneStep(executeOneStepCall),
    }
    #[automatically_derived]
    impl OneStepProver0Calls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[[169u8, 44u8, 181u8, 1u8]];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for OneStepProver0Calls {
        const NAME: &'static str = "OneStepProver0Calls";
        const MIN_DATA_LENGTH: usize = 1120usize;
        const COUNT: usize = 1usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::executeOneStep(_) => {
                    <executeOneStepCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<OneStepProver0Calls>] = &[
                {
                    fn executeOneStep(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OneStepProver0Calls> {
                        <executeOneStepCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OneStepProver0Calls::executeOneStep)
                    }
                    executeOneStep
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::executeOneStep(inner) => {
                    <executeOneStepCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::executeOneStep(inner) => {
                    <executeOneStepCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`OneStepProver0`](self) contract instance.

See the [wrapper's documentation](`OneStepProver0Instance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> OneStepProver0Instance<T, P, N> {
        OneStepProver0Instance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<OneStepProver0Instance<T, P, N>>,
    > {
        OneStepProver0Instance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        OneStepProver0Instance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`OneStepProver0`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`OneStepProver0`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct OneStepProver0Instance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for OneStepProver0Instance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("OneStepProver0Instance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > OneStepProver0Instance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`OneStepProver0`](self) contract instance.

See the [wrapper's documentation](`OneStepProver0Instance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<OneStepProver0Instance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> OneStepProver0Instance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> OneStepProver0Instance<T, P, N> {
            OneStepProver0Instance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > OneStepProver0Instance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`executeOneStep`] function.
        pub fn executeOneStep(
            &self,
            _0: <ExecutionContext as alloy::sol_types::SolType>::RustType,
            startMach: <Machine as alloy::sol_types::SolType>::RustType,
            startMod: <Module as alloy::sol_types::SolType>::RustType,
            inst: <Instruction as alloy::sol_types::SolType>::RustType,
            proof: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, executeOneStepCall, N> {
            self.call_builder(
                &executeOneStepCall {
                    _0,
                    startMach,
                    startMod,
                    inst,
                    proof,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > OneStepProver0Instance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
