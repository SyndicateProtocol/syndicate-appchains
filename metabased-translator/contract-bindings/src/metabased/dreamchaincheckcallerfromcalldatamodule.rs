/**

Generated by the following Solidity interface...
```solidity
interface DreamChainCheckCallerFromCalldataModule {
    error EmptyAddress();

    constructor(address _agentApplication);

    function agentApplication() external view returns (address);
    function isCalldataAllowed(bytes memory data) external view returns (bool);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_agentApplication",
        "type": "address",
        "internalType": "contract IAgentApplication"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "agentApplication",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract IAgentApplication"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isCalldataAllowed",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "error",
    "name": "EmptyAddress",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod DreamChainCheckCallerFromCalldataModule {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60a06040523461004d5761001961001461011e565b6101a6565b610021610052565b6106b46101f7823960805181818161014301528181610454015281816104d3015261053801526106b490f35b610058565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906100849061005c565b810190811060018060401b0382111761009c57604052565b610066565b906100b46100ad610052565b928361007a565b565b5f80fd5b60018060a01b031690565b6100ce906100ba565b90565b6100da906100c5565b90565b6100e6816100d1565b036100ed57565b5f80fd5b905051906100fe826100dd565b565b9060208282031261011957610116915f016100f1565b90565b6100b6565b61013c6108ab80380380610131816100a1565b928339810190610100565b90565b90565b61015661015161015b926100ba565b61013f565b6100ba565b90565b61016790610142565b90565b6101739061015e565b90565b90565b61018d61018861019292610176565b61013f565b6100ba565b90565b61019e90610179565b90565b5f0190565b6101af8161016a565b6101c96101c36101be5f610195565b6100c5565b916100c5565b146101d357608052565b6101db610052565b637138356f60e01b8152806101f2600482016101a1565b0390fdfe60806040526004361015610013575b6101fe565b61001d5f3561003c565b80633dfb5ee7146100375763c189179a0361000e576101c9565b6100fc565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f8301121561009a5781359167ffffffffffffffff831161009557602001926001830284011161009057565b61005c565b610058565b610054565b906020828203126100d0575f82013567ffffffffffffffff81116100cb576100c79201610060565b9091565b610050565b61004c565b151590565b6100e3906100d5565b9052565b91906100fa905f602085019401906100da565b565b3461012d5761012961011861011236600461009f565b906103e0565b610120610042565b918291826100e7565b0390f35b610048565b5f91031261013c57565b61004c565b7f000000000000000000000000000000000000000000000000000000000000000090565b60018060a01b031690565b90565b61018761018261018c92610165565b610170565b610165565b90565b61019890610173565b90565b6101a49061018f565b90565b6101b09061019b565b9052565b91906101c7905f602085019401906101a7565b565b346101f9576101d9366004610132565b6101f56101e4610141565b6101ec610042565b918291826101b4565b0390f35b610048565b5f80fd5b5f90565b90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061023190610209565b810190811067ffffffffffffffff82111761024b57604052565b610213565b60e01b90565b61025f90610165565b90565b61026b81610256565b0361027257565b5f80fd5b9050519061028382610262565b565b9060208282031261029e5761029b915f01610276565b90565b61004c565b60209181520190565b90825f939282370152565b91906102d1816102ca816102d6956102a3565b80956102ac565b610209565b0190565b90916102f19260208301925f8185039101526102b7565b90565b6102fc610042565b3d5f823e3d90fd5b61030d816100d5565b0361031457565b5f80fd5b9050519061032582610304565b565b906020828203126103405761033d915f01610318565b90565b61004c565b61034e90610256565b9052565b9190610365905f60208501940190610345565b565b90565b61037381610367565b0361037a57565b5f80fd5b9050519061038b8261036a565b565b906020828203126103a6576103a3915f0161037e565b90565b61004c565b5f0190565b6103b990610367565b9052565b9160206103de9294936103d760408201965f8301906103b0565b0190610345565b565b906020906103ec610202565b5061040a731234567890123456789012345678901234567890610206565b61042c63dae029d3949294610437610420610042565b96879586948594610250565b8452600484016102da565b03915af4908115610679575f9161064b575b506104a260206104787f000000000000000000000000000000000000000000000000000000000000000061019b565b639e54951590610497859261048b610042565b95869485938493610250565b835260048301610352565b03915afa8015610646576104be915f91610618575b50156100d5565b6104c9575b50600190565b61050d60206104f77f000000000000000000000000000000000000000000000000000000000000000061019b565b6375b238fc90610505610042565b938492610250565b8252818061051d600482016103ab565b03915afa8015610613576020915f916105e6575b509161055c7f000000000000000000000000000000000000000000000000000000000000000061019b565b61057e6391d14854949294610589610572610042565b96879586948594610250565b8452600484016103bd565b03915afa80156105e1576105a5915f916105b3575b50156100d5565b6105af575f6104c3565b5f90565b6105d4915060203d81116105da575b6105cc8183610227565b810190610327565b5f61059e565b503d6105c2565b6102f4565b6106069150823d811161060c575b6105fe8183610227565b81019061038d565b5f610531565b503d6105f4565b6102f4565b610639915060203d811161063f575b6106318183610227565b810190610327565b5f6104b7565b503d610627565b6102f4565b61066c915060203d8111610672575b6106648183610227565b810190610285565b5f610449565b503d61065a565b6102f456fea2646970667358221220f5f245c8acb4320517dca87a77caab436cacdd2e85770b0c506bc4ab11a4e06164736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xA0`@R4a\0MWa\0\x19a\0\x14a\x01\x1EV[a\x01\xA6V[a\0!a\0RV[a\x06\xB4a\x01\xF7\x829`\x80Q\x81\x81\x81a\x01C\x01R\x81\x81a\x04T\x01R\x81\x81a\x04\xD3\x01Ra\x058\x01Ra\x06\xB4\x90\xF3[a\0XV[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0\x84\x90a\0\\V[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0\x9CW`@RV[a\0fV[\x90a\0\xB4a\0\xADa\0RV[\x92\x83a\0zV[V[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xCE\x90a\0\xBAV[\x90V[a\0\xDA\x90a\0\xC5V[\x90V[a\0\xE6\x81a\0\xD1V[\x03a\0\xEDWV[_\x80\xFD[\x90PQ\x90a\0\xFE\x82a\0\xDDV[V[\x90` \x82\x82\x03\x12a\x01\x19Wa\x01\x16\x91_\x01a\0\xF1V[\x90V[a\0\xB6V[a\x01<a\x08\xAB\x808\x03\x80a\x011\x81a\0\xA1V[\x92\x839\x81\x01\x90a\x01\0V[\x90V[\x90V[a\x01Va\x01Qa\x01[\x92a\0\xBAV[a\x01?V[a\0\xBAV[\x90V[a\x01g\x90a\x01BV[\x90V[a\x01s\x90a\x01^V[\x90V[\x90V[a\x01\x8Da\x01\x88a\x01\x92\x92a\x01vV[a\x01?V[a\0\xBAV[\x90V[a\x01\x9E\x90a\x01yV[\x90V[_\x01\x90V[a\x01\xAF\x81a\x01jV[a\x01\xC9a\x01\xC3a\x01\xBE_a\x01\x95V[a\0\xC5V[\x91a\0\xC5V[\x14a\x01\xD3W`\x80RV[a\x01\xDBa\0RV[cq85o`\xE0\x1B\x81R\x80a\x01\xF2`\x04\x82\x01a\x01\xA1V[\x03\x90\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x01\xFEV[a\0\x1D_5a\0<V[\x80c=\xFB^\xE7\x14a\x007Wc\xC1\x89\x17\x9A\x03a\0\x0EWa\x01\xC9V[a\0\xFCV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\0\x9AW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\0\x95W` \x01\x92`\x01\x83\x02\x84\x01\x11a\0\x90WV[a\0\\V[a\0XV[a\0TV[\x90` \x82\x82\x03\x12a\0\xD0W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\0\xCBWa\0\xC7\x92\x01a\0`V[\x90\x91V[a\0PV[a\0LV[\x15\x15\x90V[a\0\xE3\x90a\0\xD5V[\x90RV[\x91\x90a\0\xFA\x90_` \x85\x01\x94\x01\x90a\0\xDAV[V[4a\x01-Wa\x01)a\x01\x18a\x01\x126`\x04a\0\x9FV[\x90a\x03\xE0V[a\x01 a\0BV[\x91\x82\x91\x82a\0\xE7V[\x03\x90\xF3[a\0HV[_\x91\x03\x12a\x01<WV[a\0LV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[\x90V[a\x01\x87a\x01\x82a\x01\x8C\x92a\x01eV[a\x01pV[a\x01eV[\x90V[a\x01\x98\x90a\x01sV[\x90V[a\x01\xA4\x90a\x01\x8FV[\x90V[a\x01\xB0\x90a\x01\x9BV[\x90RV[\x91\x90a\x01\xC7\x90_` \x85\x01\x94\x01\x90a\x01\xA7V[V[4a\x01\xF9Wa\x01\xD96`\x04a\x012V[a\x01\xF5a\x01\xE4a\x01AV[a\x01\xECa\0BV[\x91\x82\x91\x82a\x01\xB4V[\x03\x90\xF3[a\0HV[_\x80\xFD[_\x90V[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x021\x90a\x02\tV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x02KW`@RV[a\x02\x13V[`\xE0\x1B\x90V[a\x02_\x90a\x01eV[\x90V[a\x02k\x81a\x02VV[\x03a\x02rWV[_\x80\xFD[\x90PQ\x90a\x02\x83\x82a\x02bV[V[\x90` \x82\x82\x03\x12a\x02\x9EWa\x02\x9B\x91_\x01a\x02vV[\x90V[a\0LV[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x827\x01RV[\x91\x90a\x02\xD1\x81a\x02\xCA\x81a\x02\xD6\x95a\x02\xA3V[\x80\x95a\x02\xACV[a\x02\tV[\x01\x90V[\x90\x91a\x02\xF1\x92` \x83\x01\x92_\x81\x85\x03\x91\x01Ra\x02\xB7V[\x90V[a\x02\xFCa\0BV[=_\x82>=\x90\xFD[a\x03\r\x81a\0\xD5V[\x03a\x03\x14WV[_\x80\xFD[\x90PQ\x90a\x03%\x82a\x03\x04V[V[\x90` \x82\x82\x03\x12a\x03@Wa\x03=\x91_\x01a\x03\x18V[\x90V[a\0LV[a\x03N\x90a\x02VV[\x90RV[\x91\x90a\x03e\x90_` \x85\x01\x94\x01\x90a\x03EV[V[\x90V[a\x03s\x81a\x03gV[\x03a\x03zWV[_\x80\xFD[\x90PQ\x90a\x03\x8B\x82a\x03jV[V[\x90` \x82\x82\x03\x12a\x03\xA6Wa\x03\xA3\x91_\x01a\x03~V[\x90V[a\0LV[_\x01\x90V[a\x03\xB9\x90a\x03gV[\x90RV[\x91` a\x03\xDE\x92\x94\x93a\x03\xD7`@\x82\x01\x96_\x83\x01\x90a\x03\xB0V[\x01\x90a\x03EV[V[\x90` \x90a\x03\xECa\x02\x02V[Pa\x04\ns\x124Vx\x90\x124Vx\x90\x124Vx\x90\x124Vx\x90a\x02\x06V[a\x04,c\xDA\xE0)\xD3\x94\x92\x94a\x047a\x04 a\0BV[\x96\x87\x95\x86\x94\x85\x94a\x02PV[\x84R`\x04\x84\x01a\x02\xDAV[\x03\x91Z\xF4\x90\x81\x15a\x06yW_\x91a\x06KW[Pa\x04\xA2` a\x04x\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x01\x9BV[c\x9ET\x95\x15\x90a\x04\x97\x85\x92a\x04\x8Ba\0BV[\x95\x86\x94\x85\x93\x84\x93a\x02PV[\x83R`\x04\x83\x01a\x03RV[\x03\x91Z\xFA\x80\x15a\x06FWa\x04\xBE\x91_\x91a\x06\x18W[P\x15a\0\xD5V[a\x04\xC9W[P`\x01\x90V[a\x05\r` a\x04\xF7\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x01\x9BV[cu\xB28\xFC\x90a\x05\x05a\0BV[\x93\x84\x92a\x02PV[\x82R\x81\x80a\x05\x1D`\x04\x82\x01a\x03\xABV[\x03\x91Z\xFA\x80\x15a\x06\x13W` \x91_\x91a\x05\xE6W[P\x91a\x05\\\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x01\x9BV[a\x05~c\x91\xD1HT\x94\x92\x94a\x05\x89a\x05ra\0BV[\x96\x87\x95\x86\x94\x85\x94a\x02PV[\x84R`\x04\x84\x01a\x03\xBDV[\x03\x91Z\xFA\x80\x15a\x05\xE1Wa\x05\xA5\x91_\x91a\x05\xB3W[P\x15a\0\xD5V[a\x05\xAFW_a\x04\xC3V[_\x90V[a\x05\xD4\x91P` =\x81\x11a\x05\xDAW[a\x05\xCC\x81\x83a\x02'V[\x81\x01\x90a\x03'V[_a\x05\x9EV[P=a\x05\xC2V[a\x02\xF4V[a\x06\x06\x91P\x82=\x81\x11a\x06\x0CW[a\x05\xFE\x81\x83a\x02'V[\x81\x01\x90a\x03\x8DV[_a\x051V[P=a\x05\xF4V[a\x02\xF4V[a\x069\x91P` =\x81\x11a\x06?W[a\x061\x81\x83a\x02'V[\x81\x01\x90a\x03'V[_a\x04\xB7V[P=a\x06'V[a\x02\xF4V[a\x06l\x91P` =\x81\x11a\x06rW[a\x06d\x81\x83a\x02'V[\x81\x01\x90a\x02\x85V[_a\x04IV[P=a\x06ZV[a\x02\xF4V\xFE\xA2dipfsX\"\x12 \xF5\xF2E\xC8\xAC\xB42\x05\x17\xDC\xA8zw\xCA\xABCl\xAC\xDD.\x85w\x0B\x0CPk\xC4\xAB\x11\xA4\xE0adsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b6101fe565b61001d5f3561003c565b80633dfb5ee7146100375763c189179a0361000e576101c9565b6100fc565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f8301121561009a5781359167ffffffffffffffff831161009557602001926001830284011161009057565b61005c565b610058565b610054565b906020828203126100d0575f82013567ffffffffffffffff81116100cb576100c79201610060565b9091565b610050565b61004c565b151590565b6100e3906100d5565b9052565b91906100fa905f602085019401906100da565b565b3461012d5761012961011861011236600461009f565b906103e0565b610120610042565b918291826100e7565b0390f35b610048565b5f91031261013c57565b61004c565b7f000000000000000000000000000000000000000000000000000000000000000090565b60018060a01b031690565b90565b61018761018261018c92610165565b610170565b610165565b90565b61019890610173565b90565b6101a49061018f565b90565b6101b09061019b565b9052565b91906101c7905f602085019401906101a7565b565b346101f9576101d9366004610132565b6101f56101e4610141565b6101ec610042565b918291826101b4565b0390f35b610048565b5f80fd5b5f90565b90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061023190610209565b810190811067ffffffffffffffff82111761024b57604052565b610213565b60e01b90565b61025f90610165565b90565b61026b81610256565b0361027257565b5f80fd5b9050519061028382610262565b565b9060208282031261029e5761029b915f01610276565b90565b61004c565b60209181520190565b90825f939282370152565b91906102d1816102ca816102d6956102a3565b80956102ac565b610209565b0190565b90916102f19260208301925f8185039101526102b7565b90565b6102fc610042565b3d5f823e3d90fd5b61030d816100d5565b0361031457565b5f80fd5b9050519061032582610304565b565b906020828203126103405761033d915f01610318565b90565b61004c565b61034e90610256565b9052565b9190610365905f60208501940190610345565b565b90565b61037381610367565b0361037a57565b5f80fd5b9050519061038b8261036a565b565b906020828203126103a6576103a3915f0161037e565b90565b61004c565b5f0190565b6103b990610367565b9052565b9160206103de9294936103d760408201965f8301906103b0565b0190610345565b565b906020906103ec610202565b5061040a731234567890123456789012345678901234567890610206565b61042c63dae029d3949294610437610420610042565b96879586948594610250565b8452600484016102da565b03915af4908115610679575f9161064b575b506104a260206104787f000000000000000000000000000000000000000000000000000000000000000061019b565b639e54951590610497859261048b610042565b95869485938493610250565b835260048301610352565b03915afa8015610646576104be915f91610618575b50156100d5565b6104c9575b50600190565b61050d60206104f77f000000000000000000000000000000000000000000000000000000000000000061019b565b6375b238fc90610505610042565b938492610250565b8252818061051d600482016103ab565b03915afa8015610613576020915f916105e6575b509161055c7f000000000000000000000000000000000000000000000000000000000000000061019b565b61057e6391d14854949294610589610572610042565b96879586948594610250565b8452600484016103bd565b03915afa80156105e1576105a5915f916105b3575b50156100d5565b6105af575f6104c3565b5f90565b6105d4915060203d81116105da575b6105cc8183610227565b810190610327565b5f61059e565b503d6105c2565b6102f4565b6106069150823d811161060c575b6105fe8183610227565b81019061038d565b5f610531565b503d6105f4565b6102f4565b610639915060203d811161063f575b6106318183610227565b810190610327565b5f6104b7565b503d610627565b6102f4565b61066c915060203d8111610672575b6106648183610227565b810190610285565b5f610449565b503d61065a565b6102f456fea2646970667358221220f5f245c8acb4320517dca87a77caab436cacdd2e85770b0c506bc4ab11a4e06164736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x01\xFEV[a\0\x1D_5a\0<V[\x80c=\xFB^\xE7\x14a\x007Wc\xC1\x89\x17\x9A\x03a\0\x0EWa\x01\xC9V[a\0\xFCV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\0\x9AW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\0\x95W` \x01\x92`\x01\x83\x02\x84\x01\x11a\0\x90WV[a\0\\V[a\0XV[a\0TV[\x90` \x82\x82\x03\x12a\0\xD0W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\0\xCBWa\0\xC7\x92\x01a\0`V[\x90\x91V[a\0PV[a\0LV[\x15\x15\x90V[a\0\xE3\x90a\0\xD5V[\x90RV[\x91\x90a\0\xFA\x90_` \x85\x01\x94\x01\x90a\0\xDAV[V[4a\x01-Wa\x01)a\x01\x18a\x01\x126`\x04a\0\x9FV[\x90a\x03\xE0V[a\x01 a\0BV[\x91\x82\x91\x82a\0\xE7V[\x03\x90\xF3[a\0HV[_\x91\x03\x12a\x01<WV[a\0LV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[\x90V[a\x01\x87a\x01\x82a\x01\x8C\x92a\x01eV[a\x01pV[a\x01eV[\x90V[a\x01\x98\x90a\x01sV[\x90V[a\x01\xA4\x90a\x01\x8FV[\x90V[a\x01\xB0\x90a\x01\x9BV[\x90RV[\x91\x90a\x01\xC7\x90_` \x85\x01\x94\x01\x90a\x01\xA7V[V[4a\x01\xF9Wa\x01\xD96`\x04a\x012V[a\x01\xF5a\x01\xE4a\x01AV[a\x01\xECa\0BV[\x91\x82\x91\x82a\x01\xB4V[\x03\x90\xF3[a\0HV[_\x80\xFD[_\x90V[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x021\x90a\x02\tV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x02KW`@RV[a\x02\x13V[`\xE0\x1B\x90V[a\x02_\x90a\x01eV[\x90V[a\x02k\x81a\x02VV[\x03a\x02rWV[_\x80\xFD[\x90PQ\x90a\x02\x83\x82a\x02bV[V[\x90` \x82\x82\x03\x12a\x02\x9EWa\x02\x9B\x91_\x01a\x02vV[\x90V[a\0LV[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x827\x01RV[\x91\x90a\x02\xD1\x81a\x02\xCA\x81a\x02\xD6\x95a\x02\xA3V[\x80\x95a\x02\xACV[a\x02\tV[\x01\x90V[\x90\x91a\x02\xF1\x92` \x83\x01\x92_\x81\x85\x03\x91\x01Ra\x02\xB7V[\x90V[a\x02\xFCa\0BV[=_\x82>=\x90\xFD[a\x03\r\x81a\0\xD5V[\x03a\x03\x14WV[_\x80\xFD[\x90PQ\x90a\x03%\x82a\x03\x04V[V[\x90` \x82\x82\x03\x12a\x03@Wa\x03=\x91_\x01a\x03\x18V[\x90V[a\0LV[a\x03N\x90a\x02VV[\x90RV[\x91\x90a\x03e\x90_` \x85\x01\x94\x01\x90a\x03EV[V[\x90V[a\x03s\x81a\x03gV[\x03a\x03zWV[_\x80\xFD[\x90PQ\x90a\x03\x8B\x82a\x03jV[V[\x90` \x82\x82\x03\x12a\x03\xA6Wa\x03\xA3\x91_\x01a\x03~V[\x90V[a\0LV[_\x01\x90V[a\x03\xB9\x90a\x03gV[\x90RV[\x91` a\x03\xDE\x92\x94\x93a\x03\xD7`@\x82\x01\x96_\x83\x01\x90a\x03\xB0V[\x01\x90a\x03EV[V[\x90` \x90a\x03\xECa\x02\x02V[Pa\x04\ns\x124Vx\x90\x124Vx\x90\x124Vx\x90\x124Vx\x90a\x02\x06V[a\x04,c\xDA\xE0)\xD3\x94\x92\x94a\x047a\x04 a\0BV[\x96\x87\x95\x86\x94\x85\x94a\x02PV[\x84R`\x04\x84\x01a\x02\xDAV[\x03\x91Z\xF4\x90\x81\x15a\x06yW_\x91a\x06KW[Pa\x04\xA2` a\x04x\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x01\x9BV[c\x9ET\x95\x15\x90a\x04\x97\x85\x92a\x04\x8Ba\0BV[\x95\x86\x94\x85\x93\x84\x93a\x02PV[\x83R`\x04\x83\x01a\x03RV[\x03\x91Z\xFA\x80\x15a\x06FWa\x04\xBE\x91_\x91a\x06\x18W[P\x15a\0\xD5V[a\x04\xC9W[P`\x01\x90V[a\x05\r` a\x04\xF7\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x01\x9BV[cu\xB28\xFC\x90a\x05\x05a\0BV[\x93\x84\x92a\x02PV[\x82R\x81\x80a\x05\x1D`\x04\x82\x01a\x03\xABV[\x03\x91Z\xFA\x80\x15a\x06\x13W` \x91_\x91a\x05\xE6W[P\x91a\x05\\\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x01\x9BV[a\x05~c\x91\xD1HT\x94\x92\x94a\x05\x89a\x05ra\0BV[\x96\x87\x95\x86\x94\x85\x94a\x02PV[\x84R`\x04\x84\x01a\x03\xBDV[\x03\x91Z\xFA\x80\x15a\x05\xE1Wa\x05\xA5\x91_\x91a\x05\xB3W[P\x15a\0\xD5V[a\x05\xAFW_a\x04\xC3V[_\x90V[a\x05\xD4\x91P` =\x81\x11a\x05\xDAW[a\x05\xCC\x81\x83a\x02'V[\x81\x01\x90a\x03'V[_a\x05\x9EV[P=a\x05\xC2V[a\x02\xF4V[a\x06\x06\x91P\x82=\x81\x11a\x06\x0CW[a\x05\xFE\x81\x83a\x02'V[\x81\x01\x90a\x03\x8DV[_a\x051V[P=a\x05\xF4V[a\x02\xF4V[a\x069\x91P` =\x81\x11a\x06?W[a\x061\x81\x83a\x02'V[\x81\x01\x90a\x03'V[_a\x04\xB7V[P=a\x06'V[a\x02\xF4V[a\x06l\x91P` =\x81\x11a\x06rW[a\x06d\x81\x83a\x02'V[\x81\x01\x90a\x02\x85V[_a\x04IV[P=a\x06ZV[a\x02\xF4V\xFE\xA2dipfsX\"\x12 \xF5\xF2E\xC8\xAC\xB42\x05\x17\xDC\xA8zw\xCA\xABCl\xAC\xDD.\x85w\x0B\x0CPk\xC4\xAB\x11\xA4\xE0adsolcC\0\x08\x19\x003",
    );
    /**Custom error with signature `EmptyAddress()` and selector `0x7138356f`.
```solidity
error EmptyAddress();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct EmptyAddress {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<EmptyAddress> for UnderlyingRustTuple<'_> {
            fn from(value: EmptyAddress) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for EmptyAddress {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for EmptyAddress {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "EmptyAddress()";
            const SELECTOR: [u8; 4] = [113u8, 56u8, 53u8, 111u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address _agentApplication);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub _agentApplication: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value._agentApplication,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _agentApplication: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._agentApplication,
                    ),
                )
            }
        }
    };
    /**Function with signature `agentApplication()` and selector `0xc189179a`.
```solidity
function agentApplication() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct agentApplicationCall {}
    ///Container type for the return parameters of the [`agentApplication()`](agentApplicationCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct agentApplicationReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<agentApplicationCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: agentApplicationCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for agentApplicationCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<agentApplicationReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: agentApplicationReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for agentApplicationReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for agentApplicationCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = agentApplicationReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "agentApplication()";
            const SELECTOR: [u8; 4] = [193u8, 137u8, 23u8, 154u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isCalldataAllowed(bytes)` and selector `0x3dfb5ee7`.
```solidity
function isCalldataAllowed(bytes memory data) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isCalldataAllowedCall {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`isCalldataAllowed(bytes)`](isCalldataAllowedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isCalldataAllowedReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isCalldataAllowedCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: isCalldataAllowedCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isCalldataAllowedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isCalldataAllowedReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: isCalldataAllowedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isCalldataAllowedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isCalldataAllowedCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isCalldataAllowedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isCalldataAllowed(bytes)";
            const SELECTOR: [u8; 4] = [61u8, 251u8, 94u8, 231u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`DreamChainCheckCallerFromCalldataModule`](self) function calls.
    pub enum DreamChainCheckCallerFromCalldataModuleCalls {
        #[allow(missing_docs)]
        agentApplication(agentApplicationCall),
        #[allow(missing_docs)]
        isCalldataAllowed(isCalldataAllowedCall),
    }
    #[automatically_derived]
    impl DreamChainCheckCallerFromCalldataModuleCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [61u8, 251u8, 94u8, 231u8],
            [193u8, 137u8, 23u8, 154u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for DreamChainCheckCallerFromCalldataModuleCalls {
        const NAME: &'static str = "DreamChainCheckCallerFromCalldataModuleCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 2usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::agentApplication(_) => {
                    <agentApplicationCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isCalldataAllowed(_) => {
                    <isCalldataAllowedCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<
                DreamChainCheckCallerFromCalldataModuleCalls,
            >] = &[
                {
                    fn isCalldataAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        DreamChainCheckCallerFromCalldataModuleCalls,
                    > {
                        <isCalldataAllowedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                DreamChainCheckCallerFromCalldataModuleCalls::isCalldataAllowed,
                            )
                    }
                    isCalldataAllowed
                },
                {
                    fn agentApplication(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        DreamChainCheckCallerFromCalldataModuleCalls,
                    > {
                        <agentApplicationCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                DreamChainCheckCallerFromCalldataModuleCalls::agentApplication,
                            )
                    }
                    agentApplication
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::agentApplication(inner) => {
                    <agentApplicationCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::isCalldataAllowed(inner) => {
                    <isCalldataAllowedCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::agentApplication(inner) => {
                    <agentApplicationCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isCalldataAllowed(inner) => {
                    <isCalldataAllowedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`DreamChainCheckCallerFromCalldataModule`](self) custom errors.
    pub enum DreamChainCheckCallerFromCalldataModuleErrors {
        #[allow(missing_docs)]
        EmptyAddress(EmptyAddress),
    }
    #[automatically_derived]
    impl DreamChainCheckCallerFromCalldataModuleErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[[113u8, 56u8, 53u8, 111u8]];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface
    for DreamChainCheckCallerFromCalldataModuleErrors {
        const NAME: &'static str = "DreamChainCheckCallerFromCalldataModuleErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 1usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::EmptyAddress(_) => {
                    <EmptyAddress as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<
                DreamChainCheckCallerFromCalldataModuleErrors,
            >] = &[
                {
                    fn EmptyAddress(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        DreamChainCheckCallerFromCalldataModuleErrors,
                    > {
                        <EmptyAddress as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                DreamChainCheckCallerFromCalldataModuleErrors::EmptyAddress,
                            )
                    }
                    EmptyAddress
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::EmptyAddress(inner) => {
                    <EmptyAddress as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::EmptyAddress(inner) => {
                    <EmptyAddress as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`DreamChainCheckCallerFromCalldataModule`](self) contract instance.

See the [wrapper's documentation](`DreamChainCheckCallerFromCalldataModuleInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> DreamChainCheckCallerFromCalldataModuleInstance<T, P, N> {
        DreamChainCheckCallerFromCalldataModuleInstance::<
            T,
            P,
            N,
        >::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _agentApplication: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<
            DreamChainCheckCallerFromCalldataModuleInstance<T, P, N>,
        >,
    > {
        DreamChainCheckCallerFromCalldataModuleInstance::<
            T,
            P,
            N,
        >::deploy(provider, _agentApplication)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _agentApplication: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        DreamChainCheckCallerFromCalldataModuleInstance::<
            T,
            P,
            N,
        >::deploy_builder(provider, _agentApplication)
    }
    /**A [`DreamChainCheckCallerFromCalldataModule`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`DreamChainCheckCallerFromCalldataModule`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct DreamChainCheckCallerFromCalldataModuleInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug
    for DreamChainCheckCallerFromCalldataModuleInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("DreamChainCheckCallerFromCalldataModuleInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > DreamChainCheckCallerFromCalldataModuleInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`DreamChainCheckCallerFromCalldataModule`](self) contract instance.

See the [wrapper's documentation](`DreamChainCheckCallerFromCalldataModuleInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _agentApplication: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<
            DreamChainCheckCallerFromCalldataModuleInstance<T, P, N>,
        > {
            let call_builder = Self::deploy_builder(provider, _agentApplication);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _agentApplication: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall {
                            _agentApplication,
                        },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<
        T,
        P: ::core::clone::Clone,
        N,
    > DreamChainCheckCallerFromCalldataModuleInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(
            self,
        ) -> DreamChainCheckCallerFromCalldataModuleInstance<T, P, N> {
            DreamChainCheckCallerFromCalldataModuleInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > DreamChainCheckCallerFromCalldataModuleInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`agentApplication`] function.
        pub fn agentApplication(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, agentApplicationCall, N> {
            self.call_builder(&agentApplicationCall {})
        }
        ///Creates a new call builder for the [`isCalldataAllowed`] function.
        pub fn isCalldataAllowed(
            &self,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, isCalldataAllowedCall, N> {
            self.call_builder(&isCalldataAllowedCall { data })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > DreamChainCheckCallerFromCalldataModuleInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
