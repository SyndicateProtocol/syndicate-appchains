/**

Generated by the following Solidity interface...
```solidity
interface DreamChainCheckCallerFromCalldataModule {
    error EmptyAddress();

    constructor(address _agentApplication);

    function agentApplication() external view returns (address);
    function isCalldataAllowed(bytes memory data) external view returns (bool);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_agentApplication",
        "type": "address",
        "internalType": "contract IAgentApplication"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "agentApplication",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract IAgentApplication"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isCalldataAllowed",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "error",
    "name": "EmptyAddress",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod DreamChainCheckCallerFromCalldataModule {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60a034608357601f61040538819003918201601f19168301916001600160401b03831184841017608757808492602094604052833981010312608357516001600160a01b03811680820360835715607157608052604051610369908161009c8239608051818181604401526101a80152f35b604051637138356f60e01b8152600490fd5b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe60806040526004361015610011575f80fd5b5f3560e01c80633dfb5ee7146100775763c189179a1461002f575f80fd5b34610073575f366003190112610073576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5f80fd5b346100735760203660031901126100735767ffffffffffffffff60043581811161007357366023820112156100735780600401359182116100735736602483830101116100735760209160246100cd9201610125565b6040519015158152f35b90601f8019910116810190811067ffffffffffffffff8211176100f957604052565b634e487b7160e01b5f52604160045260245ffd5b90816020910312610073575180151581036100735790565b60409182519163dae029d360e01b835282604481846020958695866004850152816024850152848401375f828201840152601f01601f191681010301817312345678901234567890123456789012345678905af4918215610329575f926102ea575b508251639e54951560e01b81526001600160a01b03928316600482018190527f000000000000000000000000000000000000000000000000000000000000000090931692908281602481875afa9081156102c3575f916102cd575b50156101f2575b50505050600190565b8351631d6c8e3f60e21b81528281600481875afa9081156102c357908392915f91610292575b5060449086519586938492632474521560e21b8452600484015260248301525afa92831561028957505f9261025c575b505015610258575f8080806101e9565b5f90565b61027b9250803d10610282575b61027381836100d7565b81019061010d565b5f80610248565b503d610269565b513d5f823e3d90fd5b83819492503d83116102bc575b6102a981836100d7565b8101031261007357604483925190610218565b503d61029f565b85513d5f823e3d90fd5b6102e49150833d85116102825761027381836100d7565b5f6101e2565b9080925081813d8311610322575b61030281836100d7565b8101031261007357516001600160a01b038116810361007357905f610187565b503d6102f8565b83513d5f823e3d90fdfea2646970667358221220cba124dde14c7b79f5e7e9ed14a64028e46945583e57fce38e1aa8a44ea45a1a64736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xA04`\x83W`\x1Fa\x04\x058\x81\x90\x03\x91\x82\x01`\x1F\x19\x16\x83\x01\x91`\x01`\x01`@\x1B\x03\x83\x11\x84\x84\x10\x17`\x87W\x80\x84\x92` \x94`@R\x839\x81\x01\x03\x12`\x83WQ`\x01`\x01`\xA0\x1B\x03\x81\x16\x80\x82\x03`\x83W\x15`qW`\x80R`@Qa\x03i\x90\x81a\0\x9C\x829`\x80Q\x81\x81\x81`D\x01Ra\x01\xA8\x01R\xF3[`@Qcq85o`\xE0\x1B\x81R`\x04\x90\xFD[_\x80\xFD[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x11W_\x80\xFD[_5`\xE0\x1C\x80c=\xFB^\xE7\x14a\0wWc\xC1\x89\x17\x9A\x14a\0/W_\x80\xFD[4a\0sW_6`\x03\x19\x01\x12a\0sW`@Q\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x90\xF3[_\x80\xFD[4a\0sW` 6`\x03\x19\x01\x12a\0sWg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x045\x81\x81\x11a\0sW6`#\x82\x01\x12\x15a\0sW\x80`\x04\x015\x91\x82\x11a\0sW6`$\x83\x83\x01\x01\x11a\0sW` \x91`$a\0\xCD\x92\x01a\x01%V[`@Q\x90\x15\x15\x81R\xF3[\x90`\x1F\x80\x19\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\0\xF9W`@RV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90\x81` \x91\x03\x12a\0sWQ\x80\x15\x15\x81\x03a\0sW\x90V[`@\x91\x82Q\x91c\xDA\xE0)\xD3`\xE0\x1B\x83R\x82`D\x81\x84` \x95\x86\x95\x86`\x04\x85\x01R\x81`$\x85\x01R\x84\x84\x017_\x82\x82\x01\x84\x01R`\x1F\x01`\x1F\x19\x16\x81\x01\x03\x01\x81s\x124Vx\x90\x124Vx\x90\x124Vx\x90\x124Vx\x90Z\xF4\x91\x82\x15a\x03)W_\x92a\x02\xEAW[P\x82Qc\x9ET\x95\x15`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16`\x04\x82\x01\x81\x90R\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x93\x16\x92\x90\x82\x81`$\x81\x87Z\xFA\x90\x81\x15a\x02\xC3W_\x91a\x02\xCDW[P\x15a\x01\xF2W[PPPP`\x01\x90V[\x83Qc\x1Dl\x8E?`\xE2\x1B\x81R\x82\x81`\x04\x81\x87Z\xFA\x90\x81\x15a\x02\xC3W\x90\x83\x92\x91_\x91a\x02\x92W[P`D\x90\x86Q\x95\x86\x93\x84\x92c$tR\x15`\xE2\x1B\x84R`\x04\x84\x01R`$\x83\x01RZ\xFA\x92\x83\x15a\x02\x89WP_\x92a\x02\\W[PP\x15a\x02XW_\x80\x80\x80a\x01\xE9V[_\x90V[a\x02{\x92P\x80=\x10a\x02\x82W[a\x02s\x81\x83a\0\xD7V[\x81\x01\x90a\x01\rV[_\x80a\x02HV[P=a\x02iV[Q=_\x82>=\x90\xFD[\x83\x81\x94\x92P=\x83\x11a\x02\xBCW[a\x02\xA9\x81\x83a\0\xD7V[\x81\x01\x03\x12a\0sW`D\x83\x92Q\x90a\x02\x18V[P=a\x02\x9FV[\x85Q=_\x82>=\x90\xFD[a\x02\xE4\x91P\x83=\x85\x11a\x02\x82Wa\x02s\x81\x83a\0\xD7V[_a\x01\xE2V[\x90\x80\x92P\x81\x81=\x83\x11a\x03\"W[a\x03\x02\x81\x83a\0\xD7V[\x81\x01\x03\x12a\0sWQ`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x03a\0sW\x90_a\x01\x87V[P=a\x02\xF8V[\x83Q=_\x82>=\x90\xFD\xFE\xA2dipfsX\"\x12 \xCB\xA1$\xDD\xE1L{y\xF5\xE7\xE9\xED\x14\xA6@(\xE4iEX>W\xFC\xE3\x8E\x1A\xA8\xA4N\xA4Z\x1AdsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610011575f80fd5b5f3560e01c80633dfb5ee7146100775763c189179a1461002f575f80fd5b34610073575f366003190112610073576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5f80fd5b346100735760203660031901126100735767ffffffffffffffff60043581811161007357366023820112156100735780600401359182116100735736602483830101116100735760209160246100cd9201610125565b6040519015158152f35b90601f8019910116810190811067ffffffffffffffff8211176100f957604052565b634e487b7160e01b5f52604160045260245ffd5b90816020910312610073575180151581036100735790565b60409182519163dae029d360e01b835282604481846020958695866004850152816024850152848401375f828201840152601f01601f191681010301817312345678901234567890123456789012345678905af4918215610329575f926102ea575b508251639e54951560e01b81526001600160a01b03928316600482018190527f000000000000000000000000000000000000000000000000000000000000000090931692908281602481875afa9081156102c3575f916102cd575b50156101f2575b50505050600190565b8351631d6c8e3f60e21b81528281600481875afa9081156102c357908392915f91610292575b5060449086519586938492632474521560e21b8452600484015260248301525afa92831561028957505f9261025c575b505015610258575f8080806101e9565b5f90565b61027b9250803d10610282575b61027381836100d7565b81019061010d565b5f80610248565b503d610269565b513d5f823e3d90fd5b83819492503d83116102bc575b6102a981836100d7565b8101031261007357604483925190610218565b503d61029f565b85513d5f823e3d90fd5b6102e49150833d85116102825761027381836100d7565b5f6101e2565b9080925081813d8311610322575b61030281836100d7565b8101031261007357516001600160a01b038116810361007357905f610187565b503d6102f8565b83513d5f823e3d90fdfea2646970667358221220cba124dde14c7b79f5e7e9ed14a64028e46945583e57fce38e1aa8a44ea45a1a64736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x11W_\x80\xFD[_5`\xE0\x1C\x80c=\xFB^\xE7\x14a\0wWc\xC1\x89\x17\x9A\x14a\0/W_\x80\xFD[4a\0sW_6`\x03\x19\x01\x12a\0sW`@Q\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x90\xF3[_\x80\xFD[4a\0sW` 6`\x03\x19\x01\x12a\0sWg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x045\x81\x81\x11a\0sW6`#\x82\x01\x12\x15a\0sW\x80`\x04\x015\x91\x82\x11a\0sW6`$\x83\x83\x01\x01\x11a\0sW` \x91`$a\0\xCD\x92\x01a\x01%V[`@Q\x90\x15\x15\x81R\xF3[\x90`\x1F\x80\x19\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\0\xF9W`@RV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90\x81` \x91\x03\x12a\0sWQ\x80\x15\x15\x81\x03a\0sW\x90V[`@\x91\x82Q\x91c\xDA\xE0)\xD3`\xE0\x1B\x83R\x82`D\x81\x84` \x95\x86\x95\x86`\x04\x85\x01R\x81`$\x85\x01R\x84\x84\x017_\x82\x82\x01\x84\x01R`\x1F\x01`\x1F\x19\x16\x81\x01\x03\x01\x81s\x124Vx\x90\x124Vx\x90\x124Vx\x90\x124Vx\x90Z\xF4\x91\x82\x15a\x03)W_\x92a\x02\xEAW[P\x82Qc\x9ET\x95\x15`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16`\x04\x82\x01\x81\x90R\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x93\x16\x92\x90\x82\x81`$\x81\x87Z\xFA\x90\x81\x15a\x02\xC3W_\x91a\x02\xCDW[P\x15a\x01\xF2W[PPPP`\x01\x90V[\x83Qc\x1Dl\x8E?`\xE2\x1B\x81R\x82\x81`\x04\x81\x87Z\xFA\x90\x81\x15a\x02\xC3W\x90\x83\x92\x91_\x91a\x02\x92W[P`D\x90\x86Q\x95\x86\x93\x84\x92c$tR\x15`\xE2\x1B\x84R`\x04\x84\x01R`$\x83\x01RZ\xFA\x92\x83\x15a\x02\x89WP_\x92a\x02\\W[PP\x15a\x02XW_\x80\x80\x80a\x01\xE9V[_\x90V[a\x02{\x92P\x80=\x10a\x02\x82W[a\x02s\x81\x83a\0\xD7V[\x81\x01\x90a\x01\rV[_\x80a\x02HV[P=a\x02iV[Q=_\x82>=\x90\xFD[\x83\x81\x94\x92P=\x83\x11a\x02\xBCW[a\x02\xA9\x81\x83a\0\xD7V[\x81\x01\x03\x12a\0sW`D\x83\x92Q\x90a\x02\x18V[P=a\x02\x9FV[\x85Q=_\x82>=\x90\xFD[a\x02\xE4\x91P\x83=\x85\x11a\x02\x82Wa\x02s\x81\x83a\0\xD7V[_a\x01\xE2V[\x90\x80\x92P\x81\x81=\x83\x11a\x03\"W[a\x03\x02\x81\x83a\0\xD7V[\x81\x01\x03\x12a\0sWQ`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x03a\0sW\x90_a\x01\x87V[P=a\x02\xF8V[\x83Q=_\x82>=\x90\xFD\xFE\xA2dipfsX\"\x12 \xCB\xA1$\xDD\xE1L{y\xF5\xE7\xE9\xED\x14\xA6@(\xE4iEX>W\xFC\xE3\x8E\x1A\xA8\xA4N\xA4Z\x1AdsolcC\0\x08\x19\x003",
    );
    /**Custom error with signature `EmptyAddress()` and selector `0x7138356f`.
```solidity
error EmptyAddress();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct EmptyAddress {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<EmptyAddress> for UnderlyingRustTuple<'_> {
            fn from(value: EmptyAddress) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for EmptyAddress {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for EmptyAddress {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "EmptyAddress()";
            const SELECTOR: [u8; 4] = [113u8, 56u8, 53u8, 111u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address _agentApplication);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        pub _agentApplication: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value._agentApplication,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _agentApplication: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._agentApplication,
                    ),
                )
            }
        }
    };
    /**Function with signature `agentApplication()` and selector `0xc189179a`.
```solidity
function agentApplication() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct agentApplicationCall {}
    ///Container type for the return parameters of the [`agentApplication()`](agentApplicationCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct agentApplicationReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<agentApplicationCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: agentApplicationCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for agentApplicationCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<agentApplicationReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: agentApplicationReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for agentApplicationReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for agentApplicationCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = agentApplicationReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "agentApplication()";
            const SELECTOR: [u8; 4] = [193u8, 137u8, 23u8, 154u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isCalldataAllowed(bytes)` and selector `0x3dfb5ee7`.
```solidity
function isCalldataAllowed(bytes memory data) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isCalldataAllowedCall {
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`isCalldataAllowed(bytes)`](isCalldataAllowedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isCalldataAllowedReturn {
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isCalldataAllowedCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: isCalldataAllowedCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isCalldataAllowedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isCalldataAllowedReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: isCalldataAllowedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isCalldataAllowedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isCalldataAllowedCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isCalldataAllowedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isCalldataAllowed(bytes)";
            const SELECTOR: [u8; 4] = [61u8, 251u8, 94u8, 231u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`DreamChainCheckCallerFromCalldataModule`](self) function calls.
    pub enum DreamChainCheckCallerFromCalldataModuleCalls {
        agentApplication(agentApplicationCall),
        isCalldataAllowed(isCalldataAllowedCall),
    }
    #[automatically_derived]
    impl DreamChainCheckCallerFromCalldataModuleCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [61u8, 251u8, 94u8, 231u8],
            [193u8, 137u8, 23u8, 154u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for DreamChainCheckCallerFromCalldataModuleCalls {
        const NAME: &'static str = "DreamChainCheckCallerFromCalldataModuleCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 2usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::agentApplication(_) => {
                    <agentApplicationCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isCalldataAllowed(_) => {
                    <isCalldataAllowedCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<
                DreamChainCheckCallerFromCalldataModuleCalls,
            >] = &[
                {
                    fn isCalldataAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        DreamChainCheckCallerFromCalldataModuleCalls,
                    > {
                        <isCalldataAllowedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                DreamChainCheckCallerFromCalldataModuleCalls::isCalldataAllowed,
                            )
                    }
                    isCalldataAllowed
                },
                {
                    fn agentApplication(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        DreamChainCheckCallerFromCalldataModuleCalls,
                    > {
                        <agentApplicationCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                DreamChainCheckCallerFromCalldataModuleCalls::agentApplication,
                            )
                    }
                    agentApplication
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::agentApplication(inner) => {
                    <agentApplicationCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::isCalldataAllowed(inner) => {
                    <isCalldataAllowedCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::agentApplication(inner) => {
                    <agentApplicationCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isCalldataAllowed(inner) => {
                    <isCalldataAllowedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`DreamChainCheckCallerFromCalldataModule`](self) custom errors.
    pub enum DreamChainCheckCallerFromCalldataModuleErrors {
        EmptyAddress(EmptyAddress),
    }
    #[automatically_derived]
    impl DreamChainCheckCallerFromCalldataModuleErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[[113u8, 56u8, 53u8, 111u8]];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface
    for DreamChainCheckCallerFromCalldataModuleErrors {
        const NAME: &'static str = "DreamChainCheckCallerFromCalldataModuleErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 1usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::EmptyAddress(_) => {
                    <EmptyAddress as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<
                DreamChainCheckCallerFromCalldataModuleErrors,
            >] = &[
                {
                    fn EmptyAddress(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        DreamChainCheckCallerFromCalldataModuleErrors,
                    > {
                        <EmptyAddress as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                DreamChainCheckCallerFromCalldataModuleErrors::EmptyAddress,
                            )
                    }
                    EmptyAddress
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::EmptyAddress(inner) => {
                    <EmptyAddress as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::EmptyAddress(inner) => {
                    <EmptyAddress as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`DreamChainCheckCallerFromCalldataModule`](self) contract instance.

See the [wrapper's documentation](`DreamChainCheckCallerFromCalldataModuleInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> DreamChainCheckCallerFromCalldataModuleInstance<T, P, N> {
        DreamChainCheckCallerFromCalldataModuleInstance::<
            T,
            P,
            N,
        >::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _agentApplication: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<
            DreamChainCheckCallerFromCalldataModuleInstance<T, P, N>,
        >,
    > {
        DreamChainCheckCallerFromCalldataModuleInstance::<
            T,
            P,
            N,
        >::deploy(provider, _agentApplication)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _agentApplication: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        DreamChainCheckCallerFromCalldataModuleInstance::<
            T,
            P,
            N,
        >::deploy_builder(provider, _agentApplication)
    }
    /**A [`DreamChainCheckCallerFromCalldataModule`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`DreamChainCheckCallerFromCalldataModule`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct DreamChainCheckCallerFromCalldataModuleInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug
    for DreamChainCheckCallerFromCalldataModuleInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("DreamChainCheckCallerFromCalldataModuleInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > DreamChainCheckCallerFromCalldataModuleInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`DreamChainCheckCallerFromCalldataModule`](self) contract instance.

See the [wrapper's documentation](`DreamChainCheckCallerFromCalldataModuleInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _agentApplication: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<
            DreamChainCheckCallerFromCalldataModuleInstance<T, P, N>,
        > {
            let call_builder = Self::deploy_builder(provider, _agentApplication);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _agentApplication: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall {
                            _agentApplication,
                        },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<
        T,
        P: ::core::clone::Clone,
        N,
    > DreamChainCheckCallerFromCalldataModuleInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(
            self,
        ) -> DreamChainCheckCallerFromCalldataModuleInstance<T, P, N> {
            DreamChainCheckCallerFromCalldataModuleInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > DreamChainCheckCallerFromCalldataModuleInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`agentApplication`] function.
        pub fn agentApplication(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, agentApplicationCall, N> {
            self.call_builder(&agentApplicationCall {})
        }
        ///Creates a new call builder for the [`isCalldataAllowed`] function.
        pub fn isCalldataAllowed(
            &self,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, isCalldataAllowedCall, N> {
            self.call_builder(&isCalldataAllowedCall { data })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > DreamChainCheckCallerFromCalldataModuleInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
