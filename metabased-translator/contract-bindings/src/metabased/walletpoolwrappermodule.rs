/**

Generated by the following Solidity interface...
```solidity
interface WalletPoolWrapperModule {
    error AddressNotAllowed();
    error NotAdmin();

    event AdminTransferred(address indexed previousAdmin, address indexed newAdmin);
    event UserAdded(address indexed user);
    event UserRemoved(address indexed user);
    event WalletPoolWrapperTransactionSent(address indexed from);

    constructor(address _admin, address _metabasedSequencerChain);

    function addToAllowlist(address user) external;
    function admin() external view returns (address);
    function allowlist(address user) external view returns (bool isAllowed);
    function isAllowed(address proposer) external view returns (bool);
    function metabasedSequencerChain() external view returns (address);
    function processTransaction(bytes memory data) external;
    function removeFromAllowlist(address user) external;
    function transferAdmin(address newAdmin) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_admin",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_metabasedSequencerChain",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "addToAllowlist",
    "inputs": [
      {
        "name": "user",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "admin",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "allowlist",
    "inputs": [
      {
        "name": "user",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "isAllowed",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isAllowed",
    "inputs": [
      {
        "name": "proposer",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "metabasedSequencerChain",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "processTransaction",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "removeFromAllowlist",
    "inputs": [
      {
        "name": "user",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "transferAdmin",
    "inputs": [
      {
        "name": "newAdmin",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "AdminTransferred",
    "inputs": [
      {
        "name": "previousAdmin",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newAdmin",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "UserAdded",
    "inputs": [
      {
        "name": "user",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "UserRemoved",
    "inputs": [
      {
        "name": "user",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "WalletPoolWrapperTransactionSent",
    "inputs": [
      {
        "name": "from",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AddressNotAllowed",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NotAdmin",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod WalletPoolWrapperModule {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60a0604052346100405761001a610014610114565b90610169565b610022610045565b610a49610281823960805181818161017f01526105bb0152610a4990f35b61004b565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906100779061004f565b810190811060018060401b0382111761008f57604052565b610059565b906100a76100a0610045565b928361006d565b565b5f80fd5b60018060a01b031690565b6100c1906100ad565b90565b6100cd816100b8565b036100d457565b5f80fd5b905051906100e5826100c4565b565b919060408382031261010f578061010361010c925f86016100d8565b936020016100d8565b90565b6100a9565b610132610cca8038038061012781610094565b9283398101906100e7565b9091565b90565b90565b61015061014b61015592610136565b610139565b6100ad565b90565b6101619061013c565b90565b5f0190565b61017290610231565b8061018d6101876101825f610158565b6100b8565b916100b8565b1461019757608052565b61019f610045565b6315a9bc2760e11b8152806101b660048201610164565b0390fd5b5f1b90565b906101d060018060a01b03916101ba565b9181191691161790565b6101ee6101e96101f3926100ad565b610139565b6100ad565b90565b6101ff906101da565b90565b61020b906101f6565b90565b90565b9061022661022161022d92610202565b61020e565b82546101bf565b9055565b8061024c6102466102415f610158565b6100b8565b916100b8565b1461025d5761025b905f610211565b565b610265610045565b6315a9bc2760e11b81528061027c60048201610164565b0390fdfe60806040526004361015610013575b610483565b61001d5f3561009c565b806346e2cc0914610097578063516b554f146100925780635da93d7e1461008d57806375829def14610088578063a7cd52cb14610083578063babcc5391461007e578063f851a440146100795763f8e86ece0361000e57610450565b61041b565b6103a8565b610373565b610283565b610250565b6101da565b61013a565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f830112156100fa5781359167ffffffffffffffff83116100f55760200192600183028401116100f057565b6100bc565b6100b8565b6100b4565b90602082820312610130575f82013567ffffffffffffffff811161012b5761012792016100c0565b9091565b6100b0565b6100ac565b5f0190565b346101695761015361014d3660046100ff565b90610592565b61015b6100a2565b8061016581610135565b0390f35b6100a8565b5f91031261017857565b6100ac565b7f000000000000000000000000000000000000000000000000000000000000000090565b60018060a01b031690565b6101b5906101a1565b90565b6101c1906101ac565b9052565b91906101d8905f602085019401906101b8565b565b3461020a576101ea36600461016e565b6102066101f561017d565b6101fd6100a2565b918291826101c5565b0390f35b6100a8565b610218816101ac565b0361021f57565b5f80fd5b905035906102308261020f565b565b9060208282031261024b57610248915f01610223565b90565b6100ac565b3461027e57610268610263366004610232565b6107d8565b6102706100a2565b8061027a81610135565b0390f35b6100a8565b346102b15761029b610296366004610232565b610934565b6102a36100a2565b806102ad81610135565b0390f35b6100a8565b90565b6102cd6102c86102d2926101a1565b6102b6565b6101a1565b90565b6102de906102b9565b90565b6102ea906102d5565b90565b906102f7906102e1565b5f5260205260405f2090565b1c90565b60ff1690565b61031d9060086103229302610303565b610307565b90565b90610330915461030d565b90565b610349906103446001915f926102ed565b610325565b90565b151590565b61035a9061034c565b9052565b9190610371905f60208501940190610351565b565b346103a35761039f61038e610389366004610232565b610333565b6103966100a2565b9182918261035e565b0390f35b6100a8565b346103d8576103d46103c36103be366004610232565b610943565b6103cb6100a2565b9182918261035e565b0390f35b6100a8565b60018060a01b031690565b6103f89060086103fd9302610303565b6103dd565b90565b9061040b91546103e8565b90565b6104185f80610400565b90565b3461044b5761042b36600461016e565b61044761043661040e565b61043e6100a2565b918291826101c5565b0390f35b6100a8565b3461047e57610468610463366004610232565b610a08565b6104706100a2565b8061047a81610135565b0390f35b6100a8565b5f80fd5b5f1c90565b61049861049d91610487565b610307565b90565b6104aa905461048c565b90565b6104b6906102b9565b90565b6104c2906104ad565b90565b6104ce906102d5565b90565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906104fd906104d5565b810190811067ffffffffffffffff82111761051757604052565b6104df565b60e01b90565b5f91031261052c57565b6100ac565b60209181520190565b90825f939282370152565b919061055f816105588161056495610531565b809561053a565b6104d5565b0190565b909161057f9260208301925f818503910152610545565b90565b61058a6100a2565b3d5f823e3d90fd5b6105af6105a96105a4600133906102ed565b6104a0565b1561034c565b6106a5576105e46105df7f00000000000000000000000000000000000000000000000000000000000000006104b9565b6104c5565b916346e2cc09919092803b156106a0576106115f809461061c6106056100a2565b9788968795869461051c565b845260048401610568565b03925af1801561069b5761066f575b50336106577f8f0be2aafda622adf1ee851c0ba328401a2338e938cfed3987b1ba17d68583a2916102e1565b906106606100a2565b8061066a81610135565b0390a2565b61068e905f3d8111610694575b61068681836104f3565b810190610522565b5f61062b565b503d61067c565b610582565b6104d1565b6106ad6100a2565b6315a9bc2760e11b8152806106c460048201610135565b0390fd5b6106d46106d991610487565b6103dd565b90565b6106e690546106c8565b90565b336107046106fe6106f95f6106dc565b6101ac565b916101ac565b036107145761071290610781565b565b61071c6100a2565b637bfa4b9f60e01b81528061073360048201610135565b0390fd5b5f1b90565b9061074860ff91610737565b9181191691161790565b61075b9061034c565b90565b90565b9061077661077161077d92610752565b61075e565b825461073c565b9055565b6107965f610791600184906102ed565b610761565b6107c07fe9dce8c992623ce791725b21e857e33248d1f190a25b5168313420eebdaae99d916102e1565b906107c96100a2565b806107d381610135565b0390a2565b6107e1906106e9565b565b336107fe6107f86107f35f6106dc565b6101ac565b916101ac565b0361080e5761080c9061089a565b565b6108166100a2565b637bfa4b9f60e01b81528061082d60048201610135565b0390fd5b90565b61084861084361084d92610831565b6102b6565b6101a1565b90565b61085990610834565b90565b9061086d60018060a01b0391610737565b9181191691161790565b90565b9061088f61088a610896926102e1565b610877565b825461085c565b9055565b806108b56108af6108aa5f610850565b6101ac565b916101ac565b14610911576108c4815f61087a565b33906108f96108f37ff8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec6936102e1565b916102e1565b916109026100a2565b8061090c81610135565b0390a3565b6109196100a2565b6315a9bc2760e11b81528061093060048201610135565b0390fd5b61093d906107e3565b565b5f90565b61095a61095f9161095261093f565b5060016102ed565b6104a0565b90565b3361097d6109776109725f6106dc565b6101ac565b916101ac565b0361098d5761098b906109b0565b565b6109956100a2565b637bfa4b9f60e01b8152806109ac60048201610135565b0390fd5b6109c660016109c1600184906102ed565b610761565b6109f07f19ef9a4877199f89440a26acb26895ec02ed86f2df1aeaa90dc18041b892f71f916102e1565b906109f96100a2565b80610a0381610135565b0390a2565b610a1190610962565b56fea26469706673582212201e5a0fa4d126a4eb5532d06928624641d66d98781f9b4cf50007cda28dc39f2c64736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xA0`@R4a\0@Wa\0\x1Aa\0\x14a\x01\x14V[\x90a\x01iV[a\0\"a\0EV[a\nIa\x02\x81\x829`\x80Q\x81\x81\x81a\x01\x7F\x01Ra\x05\xBB\x01Ra\nI\x90\xF3[a\0KV[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0w\x90a\0OV[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0\x8FW`@RV[a\0YV[\x90a\0\xA7a\0\xA0a\0EV[\x92\x83a\0mV[V[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xC1\x90a\0\xADV[\x90V[a\0\xCD\x81a\0\xB8V[\x03a\0\xD4WV[_\x80\xFD[\x90PQ\x90a\0\xE5\x82a\0\xC4V[V[\x91\x90`@\x83\x82\x03\x12a\x01\x0FW\x80a\x01\x03a\x01\x0C\x92_\x86\x01a\0\xD8V[\x93` \x01a\0\xD8V[\x90V[a\0\xA9V[a\x012a\x0C\xCA\x808\x03\x80a\x01'\x81a\0\x94V[\x92\x839\x81\x01\x90a\0\xE7V[\x90\x91V[\x90V[\x90V[a\x01Pa\x01Ka\x01U\x92a\x016V[a\x019V[a\0\xADV[\x90V[a\x01a\x90a\x01<V[\x90V[_\x01\x90V[a\x01r\x90a\x021V[\x80a\x01\x8Da\x01\x87a\x01\x82_a\x01XV[a\0\xB8V[\x91a\0\xB8V[\x14a\x01\x97W`\x80RV[a\x01\x9Fa\0EV[c\x15\xA9\xBC'`\xE1\x1B\x81R\x80a\x01\xB6`\x04\x82\x01a\x01dV[\x03\x90\xFD[_\x1B\x90V[\x90a\x01\xD0`\x01\x80`\xA0\x1B\x03\x91a\x01\xBAV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x01\xEEa\x01\xE9a\x01\xF3\x92a\0\xADV[a\x019V[a\0\xADV[\x90V[a\x01\xFF\x90a\x01\xDAV[\x90V[a\x02\x0B\x90a\x01\xF6V[\x90V[\x90V[\x90a\x02&a\x02!a\x02-\x92a\x02\x02V[a\x02\x0EV[\x82Ta\x01\xBFV[\x90UV[\x80a\x02La\x02Fa\x02A_a\x01XV[a\0\xB8V[\x91a\0\xB8V[\x14a\x02]Wa\x02[\x90_a\x02\x11V[V[a\x02ea\0EV[c\x15\xA9\xBC'`\xE1\x1B\x81R\x80a\x02|`\x04\x82\x01a\x01dV[\x03\x90\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x04\x83V[a\0\x1D_5a\0\x9CV[\x80cF\xE2\xCC\t\x14a\0\x97W\x80cQkUO\x14a\0\x92W\x80c]\xA9=~\x14a\0\x8DW\x80cu\x82\x9D\xEF\x14a\0\x88W\x80c\xA7\xCDR\xCB\x14a\0\x83W\x80c\xBA\xBC\xC59\x14a\0~W\x80c\xF8Q\xA4@\x14a\0yWc\xF8\xE8n\xCE\x03a\0\x0EWa\x04PV[a\x04\x1BV[a\x03\xA8V[a\x03sV[a\x02\x83V[a\x02PV[a\x01\xDAV[a\x01:V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\0\xFAW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\0\xF5W` \x01\x92`\x01\x83\x02\x84\x01\x11a\0\xF0WV[a\0\xBCV[a\0\xB8V[a\0\xB4V[\x90` \x82\x82\x03\x12a\x010W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01+Wa\x01'\x92\x01a\0\xC0V[\x90\x91V[a\0\xB0V[a\0\xACV[_\x01\x90V[4a\x01iWa\x01Sa\x01M6`\x04a\0\xFFV[\x90a\x05\x92V[a\x01[a\0\xA2V[\x80a\x01e\x81a\x015V[\x03\x90\xF3[a\0\xA8V[_\x91\x03\x12a\x01xWV[a\0\xACV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01\xB5\x90a\x01\xA1V[\x90V[a\x01\xC1\x90a\x01\xACV[\x90RV[\x91\x90a\x01\xD8\x90_` \x85\x01\x94\x01\x90a\x01\xB8V[V[4a\x02\nWa\x01\xEA6`\x04a\x01nV[a\x02\x06a\x01\xF5a\x01}V[a\x01\xFDa\0\xA2V[\x91\x82\x91\x82a\x01\xC5V[\x03\x90\xF3[a\0\xA8V[a\x02\x18\x81a\x01\xACV[\x03a\x02\x1FWV[_\x80\xFD[\x90P5\x90a\x020\x82a\x02\x0FV[V[\x90` \x82\x82\x03\x12a\x02KWa\x02H\x91_\x01a\x02#V[\x90V[a\0\xACV[4a\x02~Wa\x02ha\x02c6`\x04a\x022V[a\x07\xD8V[a\x02pa\0\xA2V[\x80a\x02z\x81a\x015V[\x03\x90\xF3[a\0\xA8V[4a\x02\xB1Wa\x02\x9Ba\x02\x966`\x04a\x022V[a\t4V[a\x02\xA3a\0\xA2V[\x80a\x02\xAD\x81a\x015V[\x03\x90\xF3[a\0\xA8V[\x90V[a\x02\xCDa\x02\xC8a\x02\xD2\x92a\x01\xA1V[a\x02\xB6V[a\x01\xA1V[\x90V[a\x02\xDE\x90a\x02\xB9V[\x90V[a\x02\xEA\x90a\x02\xD5V[\x90V[\x90a\x02\xF7\x90a\x02\xE1V[_R` R`@_ \x90V[\x1C\x90V[`\xFF\x16\x90V[a\x03\x1D\x90`\x08a\x03\"\x93\x02a\x03\x03V[a\x03\x07V[\x90V[\x90a\x030\x91Ta\x03\rV[\x90V[a\x03I\x90a\x03D`\x01\x91_\x92a\x02\xEDV[a\x03%V[\x90V[\x15\x15\x90V[a\x03Z\x90a\x03LV[\x90RV[\x91\x90a\x03q\x90_` \x85\x01\x94\x01\x90a\x03QV[V[4a\x03\xA3Wa\x03\x9Fa\x03\x8Ea\x03\x896`\x04a\x022V[a\x033V[a\x03\x96a\0\xA2V[\x91\x82\x91\x82a\x03^V[\x03\x90\xF3[a\0\xA8V[4a\x03\xD8Wa\x03\xD4a\x03\xC3a\x03\xBE6`\x04a\x022V[a\tCV[a\x03\xCBa\0\xA2V[\x91\x82\x91\x82a\x03^V[\x03\x90\xF3[a\0\xA8V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x03\xF8\x90`\x08a\x03\xFD\x93\x02a\x03\x03V[a\x03\xDDV[\x90V[\x90a\x04\x0B\x91Ta\x03\xE8V[\x90V[a\x04\x18_\x80a\x04\0V[\x90V[4a\x04KWa\x04+6`\x04a\x01nV[a\x04Ga\x046a\x04\x0EV[a\x04>a\0\xA2V[\x91\x82\x91\x82a\x01\xC5V[\x03\x90\xF3[a\0\xA8V[4a\x04~Wa\x04ha\x04c6`\x04a\x022V[a\n\x08V[a\x04pa\0\xA2V[\x80a\x04z\x81a\x015V[\x03\x90\xF3[a\0\xA8V[_\x80\xFD[_\x1C\x90V[a\x04\x98a\x04\x9D\x91a\x04\x87V[a\x03\x07V[\x90V[a\x04\xAA\x90Ta\x04\x8CV[\x90V[a\x04\xB6\x90a\x02\xB9V[\x90V[a\x04\xC2\x90a\x04\xADV[\x90V[a\x04\xCE\x90a\x02\xD5V[\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x04\xFD\x90a\x04\xD5V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x05\x17W`@RV[a\x04\xDFV[`\xE0\x1B\x90V[_\x91\x03\x12a\x05,WV[a\0\xACV[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x827\x01RV[\x91\x90a\x05_\x81a\x05X\x81a\x05d\x95a\x051V[\x80\x95a\x05:V[a\x04\xD5V[\x01\x90V[\x90\x91a\x05\x7F\x92` \x83\x01\x92_\x81\x85\x03\x91\x01Ra\x05EV[\x90V[a\x05\x8Aa\0\xA2V[=_\x82>=\x90\xFD[a\x05\xAFa\x05\xA9a\x05\xA4`\x013\x90a\x02\xEDV[a\x04\xA0V[\x15a\x03LV[a\x06\xA5Wa\x05\xE4a\x05\xDF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x04\xB9V[a\x04\xC5V[\x91cF\xE2\xCC\t\x91\x90\x92\x80;\x15a\x06\xA0Wa\x06\x11_\x80\x94a\x06\x1Ca\x06\x05a\0\xA2V[\x97\x88\x96\x87\x95\x86\x94a\x05\x1CV[\x84R`\x04\x84\x01a\x05hV[\x03\x92Z\xF1\x80\x15a\x06\x9BWa\x06oW[P3a\x06W\x7F\x8F\x0B\xE2\xAA\xFD\xA6\"\xAD\xF1\xEE\x85\x1C\x0B\xA3(@\x1A#8\xE98\xCF\xED9\x87\xB1\xBA\x17\xD6\x85\x83\xA2\x91a\x02\xE1V[\x90a\x06`a\0\xA2V[\x80a\x06j\x81a\x015V[\x03\x90\xA2V[a\x06\x8E\x90_=\x81\x11a\x06\x94W[a\x06\x86\x81\x83a\x04\xF3V[\x81\x01\x90a\x05\"V[_a\x06+V[P=a\x06|V[a\x05\x82V[a\x04\xD1V[a\x06\xADa\0\xA2V[c\x15\xA9\xBC'`\xE1\x1B\x81R\x80a\x06\xC4`\x04\x82\x01a\x015V[\x03\x90\xFD[a\x06\xD4a\x06\xD9\x91a\x04\x87V[a\x03\xDDV[\x90V[a\x06\xE6\x90Ta\x06\xC8V[\x90V[3a\x07\x04a\x06\xFEa\x06\xF9_a\x06\xDCV[a\x01\xACV[\x91a\x01\xACV[\x03a\x07\x14Wa\x07\x12\x90a\x07\x81V[V[a\x07\x1Ca\0\xA2V[c{\xFAK\x9F`\xE0\x1B\x81R\x80a\x073`\x04\x82\x01a\x015V[\x03\x90\xFD[_\x1B\x90V[\x90a\x07H`\xFF\x91a\x077V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x07[\x90a\x03LV[\x90V[\x90V[\x90a\x07va\x07qa\x07}\x92a\x07RV[a\x07^V[\x82Ta\x07<V[\x90UV[a\x07\x96_a\x07\x91`\x01\x84\x90a\x02\xEDV[a\x07aV[a\x07\xC0\x7F\xE9\xDC\xE8\xC9\x92b<\xE7\x91r[!\xE8W\xE32H\xD1\xF1\x90\xA2[Qh14 \xEE\xBD\xAA\xE9\x9D\x91a\x02\xE1V[\x90a\x07\xC9a\0\xA2V[\x80a\x07\xD3\x81a\x015V[\x03\x90\xA2V[a\x07\xE1\x90a\x06\xE9V[V[3a\x07\xFEa\x07\xF8a\x07\xF3_a\x06\xDCV[a\x01\xACV[\x91a\x01\xACV[\x03a\x08\x0EWa\x08\x0C\x90a\x08\x9AV[V[a\x08\x16a\0\xA2V[c{\xFAK\x9F`\xE0\x1B\x81R\x80a\x08-`\x04\x82\x01a\x015V[\x03\x90\xFD[\x90V[a\x08Ha\x08Ca\x08M\x92a\x081V[a\x02\xB6V[a\x01\xA1V[\x90V[a\x08Y\x90a\x084V[\x90V[\x90a\x08m`\x01\x80`\xA0\x1B\x03\x91a\x077V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x90a\x08\x8Fa\x08\x8Aa\x08\x96\x92a\x02\xE1V[a\x08wV[\x82Ta\x08\\V[\x90UV[\x80a\x08\xB5a\x08\xAFa\x08\xAA_a\x08PV[a\x01\xACV[\x91a\x01\xACV[\x14a\t\x11Wa\x08\xC4\x81_a\x08zV[3\x90a\x08\xF9a\x08\xF3\x7F\xF8\xCC\xB0'\xDF\xCD\x13^\0\x0E\x9DE\xE6\xCC-f%x\xA8\x82]LE\xB5\xE3.\n\xDFg\xE7\x9E\xC6\x93a\x02\xE1V[\x91a\x02\xE1V[\x91a\t\x02a\0\xA2V[\x80a\t\x0C\x81a\x015V[\x03\x90\xA3V[a\t\x19a\0\xA2V[c\x15\xA9\xBC'`\xE1\x1B\x81R\x80a\t0`\x04\x82\x01a\x015V[\x03\x90\xFD[a\t=\x90a\x07\xE3V[V[_\x90V[a\tZa\t_\x91a\tRa\t?V[P`\x01a\x02\xEDV[a\x04\xA0V[\x90V[3a\t}a\twa\tr_a\x06\xDCV[a\x01\xACV[\x91a\x01\xACV[\x03a\t\x8DWa\t\x8B\x90a\t\xB0V[V[a\t\x95a\0\xA2V[c{\xFAK\x9F`\xE0\x1B\x81R\x80a\t\xAC`\x04\x82\x01a\x015V[\x03\x90\xFD[a\t\xC6`\x01a\t\xC1`\x01\x84\x90a\x02\xEDV[a\x07aV[a\t\xF0\x7F\x19\xEF\x9AHw\x19\x9F\x89D\n&\xAC\xB2h\x95\xEC\x02\xED\x86\xF2\xDF\x1A\xEA\xA9\r\xC1\x80A\xB8\x92\xF7\x1F\x91a\x02\xE1V[\x90a\t\xF9a\0\xA2V[\x80a\n\x03\x81a\x015V[\x03\x90\xA2V[a\n\x11\x90a\tbV[V\xFE\xA2dipfsX\"\x12 \x1EZ\x0F\xA4\xD1&\xA4\xEBU2\xD0i(bFA\xD6m\x98x\x1F\x9BL\xF5\0\x07\xCD\xA2\x8D\xC3\x9F,dsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b610483565b61001d5f3561009c565b806346e2cc0914610097578063516b554f146100925780635da93d7e1461008d57806375829def14610088578063a7cd52cb14610083578063babcc5391461007e578063f851a440146100795763f8e86ece0361000e57610450565b61041b565b6103a8565b610373565b610283565b610250565b6101da565b61013a565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f830112156100fa5781359167ffffffffffffffff83116100f55760200192600183028401116100f057565b6100bc565b6100b8565b6100b4565b90602082820312610130575f82013567ffffffffffffffff811161012b5761012792016100c0565b9091565b6100b0565b6100ac565b5f0190565b346101695761015361014d3660046100ff565b90610592565b61015b6100a2565b8061016581610135565b0390f35b6100a8565b5f91031261017857565b6100ac565b7f000000000000000000000000000000000000000000000000000000000000000090565b60018060a01b031690565b6101b5906101a1565b90565b6101c1906101ac565b9052565b91906101d8905f602085019401906101b8565b565b3461020a576101ea36600461016e565b6102066101f561017d565b6101fd6100a2565b918291826101c5565b0390f35b6100a8565b610218816101ac565b0361021f57565b5f80fd5b905035906102308261020f565b565b9060208282031261024b57610248915f01610223565b90565b6100ac565b3461027e57610268610263366004610232565b6107d8565b6102706100a2565b8061027a81610135565b0390f35b6100a8565b346102b15761029b610296366004610232565b610934565b6102a36100a2565b806102ad81610135565b0390f35b6100a8565b90565b6102cd6102c86102d2926101a1565b6102b6565b6101a1565b90565b6102de906102b9565b90565b6102ea906102d5565b90565b906102f7906102e1565b5f5260205260405f2090565b1c90565b60ff1690565b61031d9060086103229302610303565b610307565b90565b90610330915461030d565b90565b610349906103446001915f926102ed565b610325565b90565b151590565b61035a9061034c565b9052565b9190610371905f60208501940190610351565b565b346103a35761039f61038e610389366004610232565b610333565b6103966100a2565b9182918261035e565b0390f35b6100a8565b346103d8576103d46103c36103be366004610232565b610943565b6103cb6100a2565b9182918261035e565b0390f35b6100a8565b60018060a01b031690565b6103f89060086103fd9302610303565b6103dd565b90565b9061040b91546103e8565b90565b6104185f80610400565b90565b3461044b5761042b36600461016e565b61044761043661040e565b61043e6100a2565b918291826101c5565b0390f35b6100a8565b3461047e57610468610463366004610232565b610a08565b6104706100a2565b8061047a81610135565b0390f35b6100a8565b5f80fd5b5f1c90565b61049861049d91610487565b610307565b90565b6104aa905461048c565b90565b6104b6906102b9565b90565b6104c2906104ad565b90565b6104ce906102d5565b90565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906104fd906104d5565b810190811067ffffffffffffffff82111761051757604052565b6104df565b60e01b90565b5f91031261052c57565b6100ac565b60209181520190565b90825f939282370152565b919061055f816105588161056495610531565b809561053a565b6104d5565b0190565b909161057f9260208301925f818503910152610545565b90565b61058a6100a2565b3d5f823e3d90fd5b6105af6105a96105a4600133906102ed565b6104a0565b1561034c565b6106a5576105e46105df7f00000000000000000000000000000000000000000000000000000000000000006104b9565b6104c5565b916346e2cc09919092803b156106a0576106115f809461061c6106056100a2565b9788968795869461051c565b845260048401610568565b03925af1801561069b5761066f575b50336106577f8f0be2aafda622adf1ee851c0ba328401a2338e938cfed3987b1ba17d68583a2916102e1565b906106606100a2565b8061066a81610135565b0390a2565b61068e905f3d8111610694575b61068681836104f3565b810190610522565b5f61062b565b503d61067c565b610582565b6104d1565b6106ad6100a2565b6315a9bc2760e11b8152806106c460048201610135565b0390fd5b6106d46106d991610487565b6103dd565b90565b6106e690546106c8565b90565b336107046106fe6106f95f6106dc565b6101ac565b916101ac565b036107145761071290610781565b565b61071c6100a2565b637bfa4b9f60e01b81528061073360048201610135565b0390fd5b5f1b90565b9061074860ff91610737565b9181191691161790565b61075b9061034c565b90565b90565b9061077661077161077d92610752565b61075e565b825461073c565b9055565b6107965f610791600184906102ed565b610761565b6107c07fe9dce8c992623ce791725b21e857e33248d1f190a25b5168313420eebdaae99d916102e1565b906107c96100a2565b806107d381610135565b0390a2565b6107e1906106e9565b565b336107fe6107f86107f35f6106dc565b6101ac565b916101ac565b0361080e5761080c9061089a565b565b6108166100a2565b637bfa4b9f60e01b81528061082d60048201610135565b0390fd5b90565b61084861084361084d92610831565b6102b6565b6101a1565b90565b61085990610834565b90565b9061086d60018060a01b0391610737565b9181191691161790565b90565b9061088f61088a610896926102e1565b610877565b825461085c565b9055565b806108b56108af6108aa5f610850565b6101ac565b916101ac565b14610911576108c4815f61087a565b33906108f96108f37ff8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec6936102e1565b916102e1565b916109026100a2565b8061090c81610135565b0390a3565b6109196100a2565b6315a9bc2760e11b81528061093060048201610135565b0390fd5b61093d906107e3565b565b5f90565b61095a61095f9161095261093f565b5060016102ed565b6104a0565b90565b3361097d6109776109725f6106dc565b6101ac565b916101ac565b0361098d5761098b906109b0565b565b6109956100a2565b637bfa4b9f60e01b8152806109ac60048201610135565b0390fd5b6109c660016109c1600184906102ed565b610761565b6109f07f19ef9a4877199f89440a26acb26895ec02ed86f2df1aeaa90dc18041b892f71f916102e1565b906109f96100a2565b80610a0381610135565b0390a2565b610a1190610962565b56fea26469706673582212201e5a0fa4d126a4eb5532d06928624641d66d98781f9b4cf50007cda28dc39f2c64736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x04\x83V[a\0\x1D_5a\0\x9CV[\x80cF\xE2\xCC\t\x14a\0\x97W\x80cQkUO\x14a\0\x92W\x80c]\xA9=~\x14a\0\x8DW\x80cu\x82\x9D\xEF\x14a\0\x88W\x80c\xA7\xCDR\xCB\x14a\0\x83W\x80c\xBA\xBC\xC59\x14a\0~W\x80c\xF8Q\xA4@\x14a\0yWc\xF8\xE8n\xCE\x03a\0\x0EWa\x04PV[a\x04\x1BV[a\x03\xA8V[a\x03sV[a\x02\x83V[a\x02PV[a\x01\xDAV[a\x01:V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\0\xFAW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\0\xF5W` \x01\x92`\x01\x83\x02\x84\x01\x11a\0\xF0WV[a\0\xBCV[a\0\xB8V[a\0\xB4V[\x90` \x82\x82\x03\x12a\x010W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01+Wa\x01'\x92\x01a\0\xC0V[\x90\x91V[a\0\xB0V[a\0\xACV[_\x01\x90V[4a\x01iWa\x01Sa\x01M6`\x04a\0\xFFV[\x90a\x05\x92V[a\x01[a\0\xA2V[\x80a\x01e\x81a\x015V[\x03\x90\xF3[a\0\xA8V[_\x91\x03\x12a\x01xWV[a\0\xACV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01\xB5\x90a\x01\xA1V[\x90V[a\x01\xC1\x90a\x01\xACV[\x90RV[\x91\x90a\x01\xD8\x90_` \x85\x01\x94\x01\x90a\x01\xB8V[V[4a\x02\nWa\x01\xEA6`\x04a\x01nV[a\x02\x06a\x01\xF5a\x01}V[a\x01\xFDa\0\xA2V[\x91\x82\x91\x82a\x01\xC5V[\x03\x90\xF3[a\0\xA8V[a\x02\x18\x81a\x01\xACV[\x03a\x02\x1FWV[_\x80\xFD[\x90P5\x90a\x020\x82a\x02\x0FV[V[\x90` \x82\x82\x03\x12a\x02KWa\x02H\x91_\x01a\x02#V[\x90V[a\0\xACV[4a\x02~Wa\x02ha\x02c6`\x04a\x022V[a\x07\xD8V[a\x02pa\0\xA2V[\x80a\x02z\x81a\x015V[\x03\x90\xF3[a\0\xA8V[4a\x02\xB1Wa\x02\x9Ba\x02\x966`\x04a\x022V[a\t4V[a\x02\xA3a\0\xA2V[\x80a\x02\xAD\x81a\x015V[\x03\x90\xF3[a\0\xA8V[\x90V[a\x02\xCDa\x02\xC8a\x02\xD2\x92a\x01\xA1V[a\x02\xB6V[a\x01\xA1V[\x90V[a\x02\xDE\x90a\x02\xB9V[\x90V[a\x02\xEA\x90a\x02\xD5V[\x90V[\x90a\x02\xF7\x90a\x02\xE1V[_R` R`@_ \x90V[\x1C\x90V[`\xFF\x16\x90V[a\x03\x1D\x90`\x08a\x03\"\x93\x02a\x03\x03V[a\x03\x07V[\x90V[\x90a\x030\x91Ta\x03\rV[\x90V[a\x03I\x90a\x03D`\x01\x91_\x92a\x02\xEDV[a\x03%V[\x90V[\x15\x15\x90V[a\x03Z\x90a\x03LV[\x90RV[\x91\x90a\x03q\x90_` \x85\x01\x94\x01\x90a\x03QV[V[4a\x03\xA3Wa\x03\x9Fa\x03\x8Ea\x03\x896`\x04a\x022V[a\x033V[a\x03\x96a\0\xA2V[\x91\x82\x91\x82a\x03^V[\x03\x90\xF3[a\0\xA8V[4a\x03\xD8Wa\x03\xD4a\x03\xC3a\x03\xBE6`\x04a\x022V[a\tCV[a\x03\xCBa\0\xA2V[\x91\x82\x91\x82a\x03^V[\x03\x90\xF3[a\0\xA8V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x03\xF8\x90`\x08a\x03\xFD\x93\x02a\x03\x03V[a\x03\xDDV[\x90V[\x90a\x04\x0B\x91Ta\x03\xE8V[\x90V[a\x04\x18_\x80a\x04\0V[\x90V[4a\x04KWa\x04+6`\x04a\x01nV[a\x04Ga\x046a\x04\x0EV[a\x04>a\0\xA2V[\x91\x82\x91\x82a\x01\xC5V[\x03\x90\xF3[a\0\xA8V[4a\x04~Wa\x04ha\x04c6`\x04a\x022V[a\n\x08V[a\x04pa\0\xA2V[\x80a\x04z\x81a\x015V[\x03\x90\xF3[a\0\xA8V[_\x80\xFD[_\x1C\x90V[a\x04\x98a\x04\x9D\x91a\x04\x87V[a\x03\x07V[\x90V[a\x04\xAA\x90Ta\x04\x8CV[\x90V[a\x04\xB6\x90a\x02\xB9V[\x90V[a\x04\xC2\x90a\x04\xADV[\x90V[a\x04\xCE\x90a\x02\xD5V[\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x04\xFD\x90a\x04\xD5V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x05\x17W`@RV[a\x04\xDFV[`\xE0\x1B\x90V[_\x91\x03\x12a\x05,WV[a\0\xACV[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x827\x01RV[\x91\x90a\x05_\x81a\x05X\x81a\x05d\x95a\x051V[\x80\x95a\x05:V[a\x04\xD5V[\x01\x90V[\x90\x91a\x05\x7F\x92` \x83\x01\x92_\x81\x85\x03\x91\x01Ra\x05EV[\x90V[a\x05\x8Aa\0\xA2V[=_\x82>=\x90\xFD[a\x05\xAFa\x05\xA9a\x05\xA4`\x013\x90a\x02\xEDV[a\x04\xA0V[\x15a\x03LV[a\x06\xA5Wa\x05\xE4a\x05\xDF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x04\xB9V[a\x04\xC5V[\x91cF\xE2\xCC\t\x91\x90\x92\x80;\x15a\x06\xA0Wa\x06\x11_\x80\x94a\x06\x1Ca\x06\x05a\0\xA2V[\x97\x88\x96\x87\x95\x86\x94a\x05\x1CV[\x84R`\x04\x84\x01a\x05hV[\x03\x92Z\xF1\x80\x15a\x06\x9BWa\x06oW[P3a\x06W\x7F\x8F\x0B\xE2\xAA\xFD\xA6\"\xAD\xF1\xEE\x85\x1C\x0B\xA3(@\x1A#8\xE98\xCF\xED9\x87\xB1\xBA\x17\xD6\x85\x83\xA2\x91a\x02\xE1V[\x90a\x06`a\0\xA2V[\x80a\x06j\x81a\x015V[\x03\x90\xA2V[a\x06\x8E\x90_=\x81\x11a\x06\x94W[a\x06\x86\x81\x83a\x04\xF3V[\x81\x01\x90a\x05\"V[_a\x06+V[P=a\x06|V[a\x05\x82V[a\x04\xD1V[a\x06\xADa\0\xA2V[c\x15\xA9\xBC'`\xE1\x1B\x81R\x80a\x06\xC4`\x04\x82\x01a\x015V[\x03\x90\xFD[a\x06\xD4a\x06\xD9\x91a\x04\x87V[a\x03\xDDV[\x90V[a\x06\xE6\x90Ta\x06\xC8V[\x90V[3a\x07\x04a\x06\xFEa\x06\xF9_a\x06\xDCV[a\x01\xACV[\x91a\x01\xACV[\x03a\x07\x14Wa\x07\x12\x90a\x07\x81V[V[a\x07\x1Ca\0\xA2V[c{\xFAK\x9F`\xE0\x1B\x81R\x80a\x073`\x04\x82\x01a\x015V[\x03\x90\xFD[_\x1B\x90V[\x90a\x07H`\xFF\x91a\x077V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x07[\x90a\x03LV[\x90V[\x90V[\x90a\x07va\x07qa\x07}\x92a\x07RV[a\x07^V[\x82Ta\x07<V[\x90UV[a\x07\x96_a\x07\x91`\x01\x84\x90a\x02\xEDV[a\x07aV[a\x07\xC0\x7F\xE9\xDC\xE8\xC9\x92b<\xE7\x91r[!\xE8W\xE32H\xD1\xF1\x90\xA2[Qh14 \xEE\xBD\xAA\xE9\x9D\x91a\x02\xE1V[\x90a\x07\xC9a\0\xA2V[\x80a\x07\xD3\x81a\x015V[\x03\x90\xA2V[a\x07\xE1\x90a\x06\xE9V[V[3a\x07\xFEa\x07\xF8a\x07\xF3_a\x06\xDCV[a\x01\xACV[\x91a\x01\xACV[\x03a\x08\x0EWa\x08\x0C\x90a\x08\x9AV[V[a\x08\x16a\0\xA2V[c{\xFAK\x9F`\xE0\x1B\x81R\x80a\x08-`\x04\x82\x01a\x015V[\x03\x90\xFD[\x90V[a\x08Ha\x08Ca\x08M\x92a\x081V[a\x02\xB6V[a\x01\xA1V[\x90V[a\x08Y\x90a\x084V[\x90V[\x90a\x08m`\x01\x80`\xA0\x1B\x03\x91a\x077V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x90a\x08\x8Fa\x08\x8Aa\x08\x96\x92a\x02\xE1V[a\x08wV[\x82Ta\x08\\V[\x90UV[\x80a\x08\xB5a\x08\xAFa\x08\xAA_a\x08PV[a\x01\xACV[\x91a\x01\xACV[\x14a\t\x11Wa\x08\xC4\x81_a\x08zV[3\x90a\x08\xF9a\x08\xF3\x7F\xF8\xCC\xB0'\xDF\xCD\x13^\0\x0E\x9DE\xE6\xCC-f%x\xA8\x82]LE\xB5\xE3.\n\xDFg\xE7\x9E\xC6\x93a\x02\xE1V[\x91a\x02\xE1V[\x91a\t\x02a\0\xA2V[\x80a\t\x0C\x81a\x015V[\x03\x90\xA3V[a\t\x19a\0\xA2V[c\x15\xA9\xBC'`\xE1\x1B\x81R\x80a\t0`\x04\x82\x01a\x015V[\x03\x90\xFD[a\t=\x90a\x07\xE3V[V[_\x90V[a\tZa\t_\x91a\tRa\t?V[P`\x01a\x02\xEDV[a\x04\xA0V[\x90V[3a\t}a\twa\tr_a\x06\xDCV[a\x01\xACV[\x91a\x01\xACV[\x03a\t\x8DWa\t\x8B\x90a\t\xB0V[V[a\t\x95a\0\xA2V[c{\xFAK\x9F`\xE0\x1B\x81R\x80a\t\xAC`\x04\x82\x01a\x015V[\x03\x90\xFD[a\t\xC6`\x01a\t\xC1`\x01\x84\x90a\x02\xEDV[a\x07aV[a\t\xF0\x7F\x19\xEF\x9AHw\x19\x9F\x89D\n&\xAC\xB2h\x95\xEC\x02\xED\x86\xF2\xDF\x1A\xEA\xA9\r\xC1\x80A\xB8\x92\xF7\x1F\x91a\x02\xE1V[\x90a\t\xF9a\0\xA2V[\x80a\n\x03\x81a\x015V[\x03\x90\xA2V[a\n\x11\x90a\tbV[V\xFE\xA2dipfsX\"\x12 \x1EZ\x0F\xA4\xD1&\xA4\xEBU2\xD0i(bFA\xD6m\x98x\x1F\x9BL\xF5\0\x07\xCD\xA2\x8D\xC3\x9F,dsolcC\0\x08\x19\x003",
    );
    /**Custom error with signature `AddressNotAllowed()` and selector `0x2b53784e`.
```solidity
error AddressNotAllowed();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AddressNotAllowed {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AddressNotAllowed> for UnderlyingRustTuple<'_> {
            fn from(value: AddressNotAllowed) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AddressNotAllowed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AddressNotAllowed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AddressNotAllowed()";
            const SELECTOR: [u8; 4] = [43u8, 83u8, 120u8, 78u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `NotAdmin()` and selector `0x7bfa4b9f`.
```solidity
error NotAdmin();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotAdmin {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotAdmin> for UnderlyingRustTuple<'_> {
            fn from(value: NotAdmin) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotAdmin {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotAdmin {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotAdmin()";
            const SELECTOR: [u8; 4] = [123u8, 250u8, 75u8, 159u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Event with signature `AdminTransferred(address,address)` and selector `0xf8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec6`.
```solidity
event AdminTransferred(address indexed previousAdmin, address indexed newAdmin);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct AdminTransferred {
        #[allow(missing_docs)]
        pub previousAdmin: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newAdmin: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for AdminTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "AdminTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                248u8,
                204u8,
                176u8,
                39u8,
                223u8,
                205u8,
                19u8,
                94u8,
                0u8,
                14u8,
                157u8,
                69u8,
                230u8,
                204u8,
                45u8,
                102u8,
                37u8,
                120u8,
                168u8,
                130u8,
                93u8,
                76u8,
                69u8,
                181u8,
                227u8,
                46u8,
                10u8,
                223u8,
                103u8,
                231u8,
                158u8,
                198u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousAdmin: topics.1,
                    newAdmin: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousAdmin.clone(),
                    self.newAdmin.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousAdmin,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newAdmin,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for AdminTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&AdminTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &AdminTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `UserAdded(address)` and selector `0x19ef9a4877199f89440a26acb26895ec02ed86f2df1aeaa90dc18041b892f71f`.
```solidity
event UserAdded(address indexed user);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct UserAdded {
        #[allow(missing_docs)]
        pub user: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for UserAdded {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "UserAdded(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                25u8,
                239u8,
                154u8,
                72u8,
                119u8,
                25u8,
                159u8,
                137u8,
                68u8,
                10u8,
                38u8,
                172u8,
                178u8,
                104u8,
                149u8,
                236u8,
                2u8,
                237u8,
                134u8,
                242u8,
                223u8,
                26u8,
                234u8,
                169u8,
                13u8,
                193u8,
                128u8,
                65u8,
                184u8,
                146u8,
                247u8,
                31u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { user: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.user.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.user,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for UserAdded {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&UserAdded> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &UserAdded) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `UserRemoved(address)` and selector `0xe9dce8c992623ce791725b21e857e33248d1f190a25b5168313420eebdaae99d`.
```solidity
event UserRemoved(address indexed user);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct UserRemoved {
        #[allow(missing_docs)]
        pub user: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for UserRemoved {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "UserRemoved(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                233u8,
                220u8,
                232u8,
                201u8,
                146u8,
                98u8,
                60u8,
                231u8,
                145u8,
                114u8,
                91u8,
                33u8,
                232u8,
                87u8,
                227u8,
                50u8,
                72u8,
                209u8,
                241u8,
                144u8,
                162u8,
                91u8,
                81u8,
                104u8,
                49u8,
                52u8,
                32u8,
                238u8,
                189u8,
                170u8,
                233u8,
                157u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { user: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.user.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.user,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for UserRemoved {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&UserRemoved> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &UserRemoved) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `WalletPoolWrapperTransactionSent(address)` and selector `0x8f0be2aafda622adf1ee851c0ba328401a2338e938cfed3987b1ba17d68583a2`.
```solidity
event WalletPoolWrapperTransactionSent(address indexed from);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct WalletPoolWrapperTransactionSent {
        #[allow(missing_docs)]
        pub from: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for WalletPoolWrapperTransactionSent {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "WalletPoolWrapperTransactionSent(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                143u8,
                11u8,
                226u8,
                170u8,
                253u8,
                166u8,
                34u8,
                173u8,
                241u8,
                238u8,
                133u8,
                28u8,
                11u8,
                163u8,
                40u8,
                64u8,
                26u8,
                35u8,
                56u8,
                233u8,
                56u8,
                207u8,
                237u8,
                57u8,
                135u8,
                177u8,
                186u8,
                23u8,
                214u8,
                133u8,
                131u8,
                162u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { from: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.from.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.from,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for WalletPoolWrapperTransactionSent {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&WalletPoolWrapperTransactionSent>
        for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &WalletPoolWrapperTransactionSent,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address _admin, address _metabasedSequencerChain);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub _admin: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _metabasedSequencerChain: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value._admin, value._metabasedSequencerChain)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _admin: tuple.0,
                        _metabasedSequencerChain: tuple.1,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._admin,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._metabasedSequencerChain,
                    ),
                )
            }
        }
    };
    /**Function with signature `addToAllowlist(address)` and selector `0xf8e86ece`.
```solidity
function addToAllowlist(address user) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addToAllowlistCall {
        #[allow(missing_docs)]
        pub user: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`addToAllowlist(address)`](addToAllowlistCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addToAllowlistReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addToAllowlistCall> for UnderlyingRustTuple<'_> {
                fn from(value: addToAllowlistCall) -> Self {
                    (value.user,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for addToAllowlistCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { user: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addToAllowlistReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: addToAllowlistReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for addToAllowlistReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for addToAllowlistCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = addToAllowlistReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "addToAllowlist(address)";
            const SELECTOR: [u8; 4] = [248u8, 232u8, 110u8, 206u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.user,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `admin()` and selector `0xf851a440`.
```solidity
function admin() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct adminCall {}
    ///Container type for the return parameters of the [`admin()`](adminCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct adminReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<adminCall> for UnderlyingRustTuple<'_> {
                fn from(value: adminCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for adminCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<adminReturn> for UnderlyingRustTuple<'_> {
                fn from(value: adminReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for adminReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for adminCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = adminReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "admin()";
            const SELECTOR: [u8; 4] = [248u8, 81u8, 164u8, 64u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `allowlist(address)` and selector `0xa7cd52cb`.
```solidity
function allowlist(address user) external view returns (bool isAllowed);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct allowlistCall {
        #[allow(missing_docs)]
        pub user: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`allowlist(address)`](allowlistCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct allowlistReturn {
        #[allow(missing_docs)]
        pub isAllowed: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<allowlistCall> for UnderlyingRustTuple<'_> {
                fn from(value: allowlistCall) -> Self {
                    (value.user,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for allowlistCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { user: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<allowlistReturn> for UnderlyingRustTuple<'_> {
                fn from(value: allowlistReturn) -> Self {
                    (value.isAllowed,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for allowlistReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { isAllowed: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for allowlistCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = allowlistReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "allowlist(address)";
            const SELECTOR: [u8; 4] = [167u8, 205u8, 82u8, 203u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.user,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isAllowed(address)` and selector `0xbabcc539`.
```solidity
function isAllowed(address proposer) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedCall {
        #[allow(missing_docs)]
        pub proposer: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`isAllowed(address)`](isAllowedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedCall> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedCall) -> Self {
                    (value.proposer,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { proposer: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isAllowedCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isAllowedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isAllowed(address)";
            const SELECTOR: [u8; 4] = [186u8, 188u8, 197u8, 57u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.proposer,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `metabasedSequencerChain()` and selector `0x516b554f`.
```solidity
function metabasedSequencerChain() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct metabasedSequencerChainCall {}
    ///Container type for the return parameters of the [`metabasedSequencerChain()`](metabasedSequencerChainCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct metabasedSequencerChainReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<metabasedSequencerChainCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: metabasedSequencerChainCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for metabasedSequencerChainCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<metabasedSequencerChainReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: metabasedSequencerChainReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for metabasedSequencerChainReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for metabasedSequencerChainCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = metabasedSequencerChainReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "metabasedSequencerChain()";
            const SELECTOR: [u8; 4] = [81u8, 107u8, 85u8, 79u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransaction(bytes)` and selector `0x46e2cc09`.
```solidity
function processTransaction(bytes memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionCall {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`processTransaction(bytes)`](processTransactionCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransaction(bytes)";
            const SELECTOR: [u8; 4] = [70u8, 226u8, 204u8, 9u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `removeFromAllowlist(address)` and selector `0x5da93d7e`.
```solidity
function removeFromAllowlist(address user) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct removeFromAllowlistCall {
        #[allow(missing_docs)]
        pub user: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`removeFromAllowlist(address)`](removeFromAllowlistCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct removeFromAllowlistReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<removeFromAllowlistCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: removeFromAllowlistCall) -> Self {
                    (value.user,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for removeFromAllowlistCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { user: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<removeFromAllowlistReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: removeFromAllowlistReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for removeFromAllowlistReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for removeFromAllowlistCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = removeFromAllowlistReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "removeFromAllowlist(address)";
            const SELECTOR: [u8; 4] = [93u8, 169u8, 61u8, 126u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.user,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferAdmin(address)` and selector `0x75829def`.
```solidity
function transferAdmin(address newAdmin) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferAdminCall {
        #[allow(missing_docs)]
        pub newAdmin: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferAdmin(address)`](transferAdminCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferAdminReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferAdminCall> for UnderlyingRustTuple<'_> {
                fn from(value: transferAdminCall) -> Self {
                    (value.newAdmin,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for transferAdminCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newAdmin: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferAdminReturn> for UnderlyingRustTuple<'_> {
                fn from(value: transferAdminReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for transferAdminReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferAdminCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferAdminReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferAdmin(address)";
            const SELECTOR: [u8; 4] = [117u8, 130u8, 157u8, 239u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newAdmin,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`WalletPoolWrapperModule`](self) function calls.
    pub enum WalletPoolWrapperModuleCalls {
        #[allow(missing_docs)]
        addToAllowlist(addToAllowlistCall),
        #[allow(missing_docs)]
        admin(adminCall),
        #[allow(missing_docs)]
        allowlist(allowlistCall),
        #[allow(missing_docs)]
        isAllowed(isAllowedCall),
        #[allow(missing_docs)]
        metabasedSequencerChain(metabasedSequencerChainCall),
        #[allow(missing_docs)]
        processTransaction(processTransactionCall),
        #[allow(missing_docs)]
        removeFromAllowlist(removeFromAllowlistCall),
        #[allow(missing_docs)]
        transferAdmin(transferAdminCall),
    }
    #[automatically_derived]
    impl WalletPoolWrapperModuleCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [70u8, 226u8, 204u8, 9u8],
            [81u8, 107u8, 85u8, 79u8],
            [93u8, 169u8, 61u8, 126u8],
            [117u8, 130u8, 157u8, 239u8],
            [167u8, 205u8, 82u8, 203u8],
            [186u8, 188u8, 197u8, 57u8],
            [248u8, 81u8, 164u8, 64u8],
            [248u8, 232u8, 110u8, 206u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for WalletPoolWrapperModuleCalls {
        const NAME: &'static str = "WalletPoolWrapperModuleCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 8usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::addToAllowlist(_) => {
                    <addToAllowlistCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::admin(_) => <adminCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::allowlist(_) => {
                    <allowlistCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isAllowed(_) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::metabasedSequencerChain(_) => {
                    <metabasedSequencerChainCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransaction(_) => {
                    <processTransactionCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::removeFromAllowlist(_) => {
                    <removeFromAllowlistCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferAdmin(_) => {
                    <transferAdminCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<WalletPoolWrapperModuleCalls>] = &[
                {
                    fn processTransaction(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolWrapperModuleCalls> {
                        <processTransactionCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolWrapperModuleCalls::processTransaction)
                    }
                    processTransaction
                },
                {
                    fn metabasedSequencerChain(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolWrapperModuleCalls> {
                        <metabasedSequencerChainCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolWrapperModuleCalls::metabasedSequencerChain)
                    }
                    metabasedSequencerChain
                },
                {
                    fn removeFromAllowlist(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolWrapperModuleCalls> {
                        <removeFromAllowlistCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolWrapperModuleCalls::removeFromAllowlist)
                    }
                    removeFromAllowlist
                },
                {
                    fn transferAdmin(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolWrapperModuleCalls> {
                        <transferAdminCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolWrapperModuleCalls::transferAdmin)
                    }
                    transferAdmin
                },
                {
                    fn allowlist(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolWrapperModuleCalls> {
                        <allowlistCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolWrapperModuleCalls::allowlist)
                    }
                    allowlist
                },
                {
                    fn isAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolWrapperModuleCalls> {
                        <isAllowedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolWrapperModuleCalls::isAllowed)
                    }
                    isAllowed
                },
                {
                    fn admin(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolWrapperModuleCalls> {
                        <adminCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolWrapperModuleCalls::admin)
                    }
                    admin
                },
                {
                    fn addToAllowlist(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolWrapperModuleCalls> {
                        <addToAllowlistCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolWrapperModuleCalls::addToAllowlist)
                    }
                    addToAllowlist
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::addToAllowlist(inner) => {
                    <addToAllowlistCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::admin(inner) => {
                    <adminCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::allowlist(inner) => {
                    <allowlistCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::metabasedSequencerChain(inner) => {
                    <metabasedSequencerChainCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransaction(inner) => {
                    <processTransactionCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::removeFromAllowlist(inner) => {
                    <removeFromAllowlistCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferAdmin(inner) => {
                    <transferAdminCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::addToAllowlist(inner) => {
                    <addToAllowlistCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::admin(inner) => {
                    <adminCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::allowlist(inner) => {
                    <allowlistCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::metabasedSequencerChain(inner) => {
                    <metabasedSequencerChainCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransaction(inner) => {
                    <processTransactionCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::removeFromAllowlist(inner) => {
                    <removeFromAllowlistCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferAdmin(inner) => {
                    <transferAdminCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`WalletPoolWrapperModule`](self) custom errors.
    pub enum WalletPoolWrapperModuleErrors {
        #[allow(missing_docs)]
        AddressNotAllowed(AddressNotAllowed),
        #[allow(missing_docs)]
        NotAdmin(NotAdmin),
    }
    #[automatically_derived]
    impl WalletPoolWrapperModuleErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [43u8, 83u8, 120u8, 78u8],
            [123u8, 250u8, 75u8, 159u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for WalletPoolWrapperModuleErrors {
        const NAME: &'static str = "WalletPoolWrapperModuleErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 2usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AddressNotAllowed(_) => {
                    <AddressNotAllowed as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotAdmin(_) => <NotAdmin as alloy_sol_types::SolError>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<WalletPoolWrapperModuleErrors>] = &[
                {
                    fn AddressNotAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolWrapperModuleErrors> {
                        <AddressNotAllowed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolWrapperModuleErrors::AddressNotAllowed)
                    }
                    AddressNotAllowed
                },
                {
                    fn NotAdmin(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolWrapperModuleErrors> {
                        <NotAdmin as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolWrapperModuleErrors::NotAdmin)
                    }
                    NotAdmin
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AddressNotAllowed(inner) => {
                    <AddressNotAllowed as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotAdmin(inner) => {
                    <NotAdmin as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AddressNotAllowed(inner) => {
                    <AddressNotAllowed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotAdmin(inner) => {
                    <NotAdmin as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    ///Container for all the [`WalletPoolWrapperModule`](self) events.
    pub enum WalletPoolWrapperModuleEvents {
        #[allow(missing_docs)]
        AdminTransferred(AdminTransferred),
        #[allow(missing_docs)]
        UserAdded(UserAdded),
        #[allow(missing_docs)]
        UserRemoved(UserRemoved),
        #[allow(missing_docs)]
        WalletPoolWrapperTransactionSent(WalletPoolWrapperTransactionSent),
    }
    #[automatically_derived]
    impl WalletPoolWrapperModuleEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                25u8,
                239u8,
                154u8,
                72u8,
                119u8,
                25u8,
                159u8,
                137u8,
                68u8,
                10u8,
                38u8,
                172u8,
                178u8,
                104u8,
                149u8,
                236u8,
                2u8,
                237u8,
                134u8,
                242u8,
                223u8,
                26u8,
                234u8,
                169u8,
                13u8,
                193u8,
                128u8,
                65u8,
                184u8,
                146u8,
                247u8,
                31u8,
            ],
            [
                143u8,
                11u8,
                226u8,
                170u8,
                253u8,
                166u8,
                34u8,
                173u8,
                241u8,
                238u8,
                133u8,
                28u8,
                11u8,
                163u8,
                40u8,
                64u8,
                26u8,
                35u8,
                56u8,
                233u8,
                56u8,
                207u8,
                237u8,
                57u8,
                135u8,
                177u8,
                186u8,
                23u8,
                214u8,
                133u8,
                131u8,
                162u8,
            ],
            [
                233u8,
                220u8,
                232u8,
                201u8,
                146u8,
                98u8,
                60u8,
                231u8,
                145u8,
                114u8,
                91u8,
                33u8,
                232u8,
                87u8,
                227u8,
                50u8,
                72u8,
                209u8,
                241u8,
                144u8,
                162u8,
                91u8,
                81u8,
                104u8,
                49u8,
                52u8,
                32u8,
                238u8,
                189u8,
                170u8,
                233u8,
                157u8,
            ],
            [
                248u8,
                204u8,
                176u8,
                39u8,
                223u8,
                205u8,
                19u8,
                94u8,
                0u8,
                14u8,
                157u8,
                69u8,
                230u8,
                204u8,
                45u8,
                102u8,
                37u8,
                120u8,
                168u8,
                130u8,
                93u8,
                76u8,
                69u8,
                181u8,
                227u8,
                46u8,
                10u8,
                223u8,
                103u8,
                231u8,
                158u8,
                198u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for WalletPoolWrapperModuleEvents {
        const NAME: &'static str = "WalletPoolWrapperModuleEvents";
        const COUNT: usize = 4usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<AdminTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <AdminTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::AdminTransferred)
                }
                Some(<UserAdded as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <UserAdded as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::UserAdded)
                }
                Some(<UserRemoved as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <UserRemoved as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::UserRemoved)
                }
                Some(
                    <WalletPoolWrapperTransactionSent as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <WalletPoolWrapperTransactionSent as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::WalletPoolWrapperTransactionSent)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for WalletPoolWrapperModuleEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::AdminTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::UserAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::UserRemoved(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::WalletPoolWrapperTransactionSent(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::AdminTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::UserAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::UserRemoved(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::WalletPoolWrapperTransactionSent(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`WalletPoolWrapperModule`](self) contract instance.

See the [wrapper's documentation](`WalletPoolWrapperModuleInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> WalletPoolWrapperModuleInstance<T, P, N> {
        WalletPoolWrapperModuleInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _admin: alloy::sol_types::private::Address,
        _metabasedSequencerChain: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<WalletPoolWrapperModuleInstance<T, P, N>>,
    > {
        WalletPoolWrapperModuleInstance::<
            T,
            P,
            N,
        >::deploy(provider, _admin, _metabasedSequencerChain)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _admin: alloy::sol_types::private::Address,
        _metabasedSequencerChain: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        WalletPoolWrapperModuleInstance::<
            T,
            P,
            N,
        >::deploy_builder(provider, _admin, _metabasedSequencerChain)
    }
    /**A [`WalletPoolWrapperModule`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`WalletPoolWrapperModule`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct WalletPoolWrapperModuleInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for WalletPoolWrapperModuleInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("WalletPoolWrapperModuleInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > WalletPoolWrapperModuleInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`WalletPoolWrapperModule`](self) contract instance.

See the [wrapper's documentation](`WalletPoolWrapperModuleInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _admin: alloy::sol_types::private::Address,
            _metabasedSequencerChain: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<WalletPoolWrapperModuleInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(
                provider,
                _admin,
                _metabasedSequencerChain,
            );
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _admin: alloy::sol_types::private::Address,
            _metabasedSequencerChain: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall {
                            _admin,
                            _metabasedSequencerChain,
                        },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> WalletPoolWrapperModuleInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> WalletPoolWrapperModuleInstance<T, P, N> {
            WalletPoolWrapperModuleInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > WalletPoolWrapperModuleInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`addToAllowlist`] function.
        pub fn addToAllowlist(
            &self,
            user: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, addToAllowlistCall, N> {
            self.call_builder(&addToAllowlistCall { user })
        }
        ///Creates a new call builder for the [`admin`] function.
        pub fn admin(&self) -> alloy_contract::SolCallBuilder<T, &P, adminCall, N> {
            self.call_builder(&adminCall {})
        }
        ///Creates a new call builder for the [`allowlist`] function.
        pub fn allowlist(
            &self,
            user: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, allowlistCall, N> {
            self.call_builder(&allowlistCall { user })
        }
        ///Creates a new call builder for the [`isAllowed`] function.
        pub fn isAllowed(
            &self,
            proposer: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, isAllowedCall, N> {
            self.call_builder(&isAllowedCall { proposer })
        }
        ///Creates a new call builder for the [`metabasedSequencerChain`] function.
        pub fn metabasedSequencerChain(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, metabasedSequencerChainCall, N> {
            self.call_builder(&metabasedSequencerChainCall {})
        }
        ///Creates a new call builder for the [`processTransaction`] function.
        pub fn processTransaction(
            &self,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, processTransactionCall, N> {
            self.call_builder(&processTransactionCall { data })
        }
        ///Creates a new call builder for the [`removeFromAllowlist`] function.
        pub fn removeFromAllowlist(
            &self,
            user: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, removeFromAllowlistCall, N> {
            self.call_builder(&removeFromAllowlistCall { user })
        }
        ///Creates a new call builder for the [`transferAdmin`] function.
        pub fn transferAdmin(
            &self,
            newAdmin: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferAdminCall, N> {
            self.call_builder(&transferAdminCall { newAdmin })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > WalletPoolWrapperModuleInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`AdminTransferred`] event.
        pub fn AdminTransferred_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, AdminTransferred, N> {
            self.event_filter::<AdminTransferred>()
        }
        ///Creates a new event filter for the [`UserAdded`] event.
        pub fn UserAdded_filter(&self) -> alloy_contract::Event<T, &P, UserAdded, N> {
            self.event_filter::<UserAdded>()
        }
        ///Creates a new event filter for the [`UserRemoved`] event.
        pub fn UserRemoved_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, UserRemoved, N> {
            self.event_filter::<UserRemoved>()
        }
        ///Creates a new event filter for the [`WalletPoolWrapperTransactionSent`] event.
        pub fn WalletPoolWrapperTransactionSent_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, WalletPoolWrapperTransactionSent, N> {
            self.event_filter::<WalletPoolWrapperTransactionSent>()
        }
    }
}
