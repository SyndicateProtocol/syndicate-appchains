/**

Generated by the following Solidity interface...
```solidity
interface ArbChainConfig {
    error InvalidInitialization();
    error NotInitializing();
    error OwnableInvalidOwner(address owner);
    error OwnableUnauthorizedAccount(address account);

    event DefaultSequencingChainRpcUrlUpdated(string newRpcUrl);
    event Initialized(uint64 version);
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event RollupOwnerUpdated(address indexed newRollupOwner);

    constructor();

    function ARBITRUM_BRIDGE_ADDRESS() external view returns (address);
    function ARBITRUM_IGNORE_DELAYED_MESSAGES() external view returns (bool);
    function ARBITRUM_INBOX_ADDRESS() external view returns (address);
    function CHAIN_ID() external view returns (uint256);
    function DEFAULT_SEQUENCING_CHAIN_RPC_URL() external view returns (string memory);
    function MINE_EMPTY_BLOCKS() external view returns (bool);
    function ROLLUP_OWNER() external view returns (address);
    function SEQUENCING_CONTRACT_ADDRESS() external view returns (address);
    function SEQUENCING_START_BLOCK() external view returns (uint256);
    function SETTLEMENT_DELAY() external view returns (uint256);
    function SETTLEMENT_START_BLOCK() external view returns (uint256);
    function initialize(uint256 chainId, bool mineEmptyBlocks, address arbitrumBridgeAddress, address arbitrumInboxAddress, bool arbitrumIgnoreDelayedMessages, uint256 settlementDelay, uint256 settlementStartBlock, address sequencingContractAddress, uint256 sequencingStartBlock, address rollupOwner, string memory sequencingChainRpcUrl) external;
    function owner() external view returns (address);
    function renounceOwnership() external;
    function transferOwnership(address newOwner) external;
    function updateDefaultSequencingChainRpcUrl(string memory newRpcUrl) external;
    function updateRollupOwner(address newRollupOwner) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "ARBITRUM_BRIDGE_ADDRESS",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "ARBITRUM_IGNORE_DELAYED_MESSAGES",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "ARBITRUM_INBOX_ADDRESS",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "CHAIN_ID",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "DEFAULT_SEQUENCING_CHAIN_RPC_URL",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "MINE_EMPTY_BLOCKS",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "ROLLUP_OWNER",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "SEQUENCING_CONTRACT_ADDRESS",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "SEQUENCING_START_BLOCK",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "SETTLEMENT_DELAY",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "SETTLEMENT_START_BLOCK",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "initialize",
    "inputs": [
      {
        "name": "chainId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "mineEmptyBlocks",
        "type": "bool",
        "internalType": "bool"
      },
      {
        "name": "arbitrumBridgeAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "arbitrumInboxAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "arbitrumIgnoreDelayedMessages",
        "type": "bool",
        "internalType": "bool"
      },
      {
        "name": "settlementDelay",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "settlementStartBlock",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "sequencingContractAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "sequencingStartBlock",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "rollupOwner",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "sequencingChainRpcUrl",
        "type": "string",
        "internalType": "string"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "renounceOwnership",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "transferOwnership",
    "inputs": [
      {
        "name": "newOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "updateDefaultSequencingChainRpcUrl",
    "inputs": [
      {
        "name": "newRpcUrl",
        "type": "string",
        "internalType": "string"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "updateRollupOwner",
    "inputs": [
      {
        "name": "newRollupOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "DefaultSequencingChainRpcUrlUpdated",
    "inputs": [
      {
        "name": "newRpcUrl",
        "type": "string",
        "indexed": false,
        "internalType": "string"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Initialized",
    "inputs": [
      {
        "name": "version",
        "type": "uint64",
        "indexed": false,
        "internalType": "uint64"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "OwnershipTransferred",
    "inputs": [
      {
        "name": "previousOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RollupOwnerUpdated",
    "inputs": [
      {
        "name": "newRollupOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "InvalidInitialization",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NotInitializing",
    "inputs": []
  },
  {
    "type": "error",
    "name": "OwnableInvalidOwner",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "OwnableUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ]
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod ArbChainConfig {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60806040523461002757610011610036565b61001961002c565b611aba61020e8239611aba90f35b610032565b60405190565b5f80fd5b61003f336100a8565b565b90565b60018060a01b031690565b90565b61006661006161006b92610041565b61004f565b610044565b90565b61007790610052565b90565b61008390610044565b90565b61008f9061007a565b9052565b91906100a6905f60208501940190610086565b565b806100c36100bd6100b85f61006e565b61007a565b9161007a565b146100d3576100d1906101ae565b565b6100fd6100df5f61006e565b6100e761002c565b918291631e4fbdf760e01b835260048301610093565b0390fd5b5f1c90565b60018060a01b031690565b61011d61012291610101565b610106565b90565b61012f9054610111565b90565b5f1b90565b9061014860018060a01b0391610132565b9181191691161790565b61016661016161016b92610044565b61004f565b610044565b90565b61017790610152565b90565b6101839061016e565b90565b90565b9061019e6101996101a59261017a565b610186565b8254610137565b9055565b5f0190565b6101b75f610125565b6101c1825f610189565b906101f56101ef7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09361017a565b9161017a565b916101fe61002c565b80610208816101a9565b0390a356fe60806040526004361015610013575b610ae4565b61001d5f3561012c565b80632a84b0f01461012757806341fc712d1461012257806357d1ba251461011d57806362c73caa1461011857806366a1d108146101135780636edd6c091461010e578063715018a61461010957806385e1f4d0146101045780638da5cb5b146100ff578063a3c6e1e7146100fa578063aa6a43d8146100f5578063b97aba3e146100f0578063bf6db6f8146100eb578063d1f4737c146100e6578063e1541ad8146100e1578063e79388e6146100dc5763f2fde38b0361000e57610ab1565b610a7c565b610a2c565b61084a565b610806565b6107c2565b61072b565b6106e7565b6106a3565b61066e565b61062c565b6105f7565b6105b2565b610391565b6102db565b610249565b6101a1565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b60018060a01b031690565b61015890610144565b90565b6101648161014f565b0361016b57565b5f80fd5b9050359061017c8261015b565b565b9060208282031261019757610194915f0161016f565b90565b61013c565b5f0190565b346101cf576101b96101b436600461017e565b610cba565b6101c1610132565b806101cb8161019c565b0390f35b610138565b5f9103126101de57565b61013c565b1c90565b60018060a01b031690565b61020290600861020793026101e3565b6101e7565b90565b9061021591546101f2565b90565b61022460085f9061020a565b90565b6102309061014f565b9052565b9190610247905f60208501940190610227565b565b34610279576102593660046101d4565b610275610264610218565b61026c610132565b91829182610234565b0390f35b610138565b90565b61029190600861029693026101e3565b61027e565b90565b906102a49154610281565b90565b6102b360045f90610299565b90565b90565b6102c2906102b6565b9052565b91906102d9905f602085019401906102b9565b565b3461030b576102eb3660046101d4565b6103076102f66102a7565b6102fe610132565b918291826102c6565b0390f35b610138565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156103565781359167ffffffffffffffff831161035157602001926001830284011161034c57565b610318565b610314565b610310565b9060208282031261038c575f82013567ffffffffffffffff811161038757610383920161031c565b9091565b610140565b61013c565b346103c0576103aa6103a436600461035b565b90610f68565b6103b2610132565b806103bc8161019c565b0390f35b610138565b634e487b7160e01b5f525f60045260245ffd5b634e487b7160e01b5f52602260045260245ffd5b906001600283049216801561040c575b602083101461040757565b6103d8565b91607f16916103fc565b60209181520190565b5f5260205f2090565b905f929180549061044261043b836103ec565b8094610416565b916001811690815f14610499575060011461045d575b505050565b61046a919293945061041f565b915f925b81841061048157505001905f8080610458565b6001816020929593955484860152019101929061046e565b92949550505060ff19168252151560200201905f8080610458565b906104be91610428565b90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906104e9906104c1565b810190811067ffffffffffffffff82111761050357604052565b6104cb565b9061052861052192610518610132565b938480926104b4565b03836104df565b565b905f1061053d5761053a90610508565b90565b6103c5565b61054e60095f9061052a565b90565b5190565b60209181520190565b90825f9392825e0152565b6105886105916020936105969361057f81610551565b93848093610555565b9586910161055e565b6104c1565b0190565b6105af9160208201915f818403910152610569565b90565b346105e2576105c23660046101d4565b6105de6105cd610542565b6105d5610132565b9182918261059a565b0390f35b610138565b6105f4600260019061020a565b90565b34610627576106073660046101d4565b6106236106126105e7565b61061a610132565b91829182610234565b0390f35b610138565b3461065a5761063c3660046101d4565b610644610f99565b61064c610132565b806106568161019c565b0390f35b610138565b61066b60015f90610299565b90565b3461069e5761067e3660046101d4565b61069a61068961065f565b610691610132565b918291826102c6565b0390f35b610138565b346106d3576106b33660046101d4565b6106cf6106be610fcd565b6106c6610132565b91829182610234565b0390f35b610138565b6106e460075f90610299565b90565b34610717576106f73660046101d4565b6107136107026106d8565b61070a610132565b918291826102c6565b0390f35b610138565b61072860035f9061020a565b90565b3461075b5761073b3660046101d4565b61075761074661071c565b61074e610132565b91829182610234565b0390f35b610138565b60ff1690565b61077690600861077b93026101e3565b610760565b90565b906107899154610766565b90565b61079860025f9061077e565b90565b151590565b6107a99061079b565b9052565b91906107c0905f602085019401906107a0565b565b346107f2576107d23660046101d4565b6107ee6107dd61078c565b6107e5610132565b918291826107ad565b0390f35b610138565b61080360065f9061020a565b90565b34610836576108163660046101d4565b6108326108216107f7565b610829610132565b91829182610234565b0390f35b610138565b61084760055f90610299565b90565b3461087a5761085a3660046101d4565b61087661086561083b565b61086d610132565b918291826102c6565b0390f35b610138565b610888816102b6565b0361088f57565b5f80fd5b905035906108a08261087f565b565b6108ab8161079b565b036108b257565b5f80fd5b905035906108c3826108a2565b565b5f80fd5b906108dc6108d5610132565b92836104df565b565b67ffffffffffffffff81116108fc576108f86020916104c1565b0190565b6104cb565b90825f939282370152565b9092919261092161091c826108de565b6108c9565b9381855260208501908284011161093d5761093b92610901565b565b6108c5565b9080601f830112156109605781602061095d9335910161090c565b90565b610310565b91909161016081840312610a275761097f835f8301610893565b9261098d81602084016108b6565b9261099b826040850161016f565b926109a9836060830161016f565b926109b781608084016108b6565b926109c58260a08501610893565b926109d38360c08301610893565b926109e18160e0840161016f565b926109f0826101008501610893565b926109ff83610120830161016f565b9261014082013567ffffffffffffffff8111610a2257610a1f9201610942565b90565b610140565b61013c565b34610a6757610a51610a3f366004610965565b99989098979197969296959395611913565b610a59610132565b80610a638161019c565b0390f35b610138565b610a79600360149061077e565b90565b34610aac57610a8c3660046101d4565b610aa8610a97610a6c565b610a9f610132565b918291826107ad565b0390f35b610138565b34610adf57610ac9610ac436600461017e565b611994565b610ad1610132565b80610adb8161019c565b0390f35b610138565b5f80fd5b610af990610af461199f565b610c48565b565b90565b90565b610b15610b10610b1a92610afb565b610afe565b610144565b90565b610b2690610b01565b90565b60207f6164647265737300000000000000000000000000000000000000000000000000917f4e657720726f6c6c7570206f776e65722063616e6e6f74206265207a65726f205f8201520152565b610b836027604092610555565b610b8c81610b29565b0190565b610ba59060208101905f818303910152610b76565b90565b15610baf57565b610bb7610132565b62461bcd60e51b815280610bcd60048201610b90565b0390fd5b5f1b90565b90610be760018060a01b0391610bd1565b9181191691161790565b610c05610c00610c0a92610144565b610afe565b610144565b90565b610c1690610bf1565b90565b610c2290610c0d565b90565b90565b90610c3d610c38610c4492610c19565b610c25565b8254610bd6565b9055565b610c6d81610c66610c60610c5b5f610b1d565b61014f565b9161014f565b1415610ba8565b610c78816008610c28565b610ca27f8829bee46683608d5fd80e243c0fae04d129ce172f70db1021c1128074a6f4d991610c19565b90610cab610132565b80610cb58161019c565b0390a2565b610cc390610ae8565b565b90610cd791610cd261199f565b610f1f565b565b5090565b601f602091010490565b1b90565b91906008610d06910291610d005f1984610ce7565b92610ce7565b9181191691161790565b610d24610d1f610d29926102b6565b610afe565b6102b6565b90565b90565b9190610d45610d40610d4d93610d10565b610d2c565b908354610ceb565b9055565b5f90565b610d6791610d61610d51565b91610d2f565b565b5b818110610d75575050565b80610d825f600193610d55565b01610d6a565b9190601f8111610d98575b505050565b610da4610dc99361041f565b906020610db084610cdd565b83019310610dd1575b610dc290610cdd565b0190610d69565b5f8080610d93565b9150610dc281929050610db9565b90610def905f19906008026101e3565b191690565b81610dfe91610ddf565b906002021790565b91610e119082610cd9565b9067ffffffffffffffff8211610ed057610e3582610e2f85546103ec565b85610d88565b5f90601f8311600114610e6857918091610e57935f92610e5c575b5050610df4565b90555b565b90915001355f80610e50565b601f19831691610e778561041f565b925f5b818110610eb857509160029391856001969410610e9e575b50505002019055610e5a565b610eae910135601f841690610ddf565b90555f8080610e92565b91936020600181928787013581550195019201610e7a565b6104cb565b90610ee09291610e06565b565b9190610efc81610ef581610f0195610555565b8095610901565b6104c1565b0190565b9091610f1c9260208301925f818503910152610ee2565b90565b610f2c8183906009610ed5565b907f0234a4e910f2b1e618f2c93be316ec0c7f40e1af23fe33f9fba2c5bb388a95f291610f63610f5a610132565b92839283610f05565b0390a1565b90610f7291610cc5565b565b610f7c61199f565b610f84610f86565b565b610f97610f925f610b1d565b6119f4565b565b610fa1610f74565b565b5f90565b5f1c90565b610fb8610fbd91610fa7565b6101e7565b90565b610fca9054610fac565b90565b610fd5610fa3565b50610fdf5f610fc0565b90565b60401c90565b610ff4610ff991610fe2565b610760565b90565b6110069054610fe8565b90565b67ffffffffffffffff1690565b61102261102791610fa7565b611009565b90565b6110349054611016565b90565b67ffffffffffffffff1690565b61105861105361105d92610afb565b610afe565b611037565b90565b90565b61107761107261107c92611060565b610afe565b611037565b90565b61108890610c0d565b90565b61109f61109a6110a492610afb565b610afe565b6102b6565b90565b906110ba67ffffffffffffffff91610bd1565b9181191691161790565b6110d86110d36110dd92611037565b610afe565b611037565b90565b90565b906110f86110f36110ff926110c4565b6110e0565b82546110a7565b9055565b60401b90565b9061111d68ff000000000000000091611103565b9181191691161790565b6111309061079b565b90565b90565b9061114b61114661115292611127565b611133565b8254611109565b9055565b61115f90611063565b9052565b9190611176905f60208501940190611156565b565b9794919996939098959261118a611a53565b9a8b5f0161119790610ffc565b156111a19061079b565b9a8c5f016111ae9061102a565b805f6111b990611044565b906111c390611037565b14806112e9575b906111de6111d86001611063565b91611037565b14806112c1575b6111f090911561079b565b90816112b0575b5061128d576112239a6112168e5f61120f6001611063565b91016110e3565b8d8d611279575b506117db565b61122b575b50565b611238905f809101611136565b60016112707fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d291611267610132565b91829182611163565b0390a15f611228565b611287905f60019101611136565b8d61121d565b611295610132565b63f92ee8a960e01b8152806112ac6004820161019c565b0390fd5b6112bb91501561079b565b5f6111f7565b506111f06112ce3061107f565b3b6112e16112db5f61108b565b916102b6565b1490506111e5565b508c6111ca565b5f7f436861696e2049442063616e6e6f74206265207a65726f000000000000000000910152565b6113246017602092610555565b61132d816112f0565b0190565b6113469060208101905f818303910152611317565b90565b1561135057565b611358610132565b62461bcd60e51b81528061136e60048201611331565b0390fd5b60207f65207a65726f0000000000000000000000000000000000000000000000000000917f417262697472756d2062726964676520616464726573732063616e6e6f7420625f8201520152565b6113cc6026604092610555565b6113d581611372565b0190565b6113ee9060208101905f8183039101526113bf565b90565b156113f857565b611400610132565b62461bcd60e51b815280611416600482016113d9565b0390fd5b60207f207a65726f000000000000000000000000000000000000000000000000000000917f417262697472756d20696e626f7820616464726573732063616e6e6f742062655f8201520152565b6114746025604092610555565b61147d8161141a565b0190565b6114969060208101905f818303910152611467565b90565b156114a057565b6114a8610132565b62461bcd60e51b8152806114be60048201611481565b0390fd5b60207f6f74206265207a65726f00000000000000000000000000000000000000000000917f53657175656e63696e6720636f6e747261637420616464726573732063616e6e5f8201520152565b61151c602a604092610555565b611525816114c2565b0190565b61153e9060208101905f81830391015261150f565b90565b1561154857565b611550610132565b62461bcd60e51b81528061156660048201611529565b0390fd5b60207f6573730000000000000000000000000000000000000000000000000000000000917f526f6c6c7570206f776e65722063616e6e6f74206265207a65726f20616464725f8201520152565b6115c46023604092610555565b6115cd8161156a565b0190565b6115e69060208101905f8183039101526115b7565b90565b156115f057565b6115f8610132565b62461bcd60e51b81528061160e600482016115d1565b0390fd5b9061161e5f1991610bd1565b9181191691161790565b9061163d61163861164492610d10565b610d2c565b8254611612565b9055565b9061165460ff91610bd1565b9181191691161790565b9061167361166e61167a92611127565b611133565b8254611648565b9055565b60081b90565b90611697610100600160a81b039161167e565b9181191691161790565b906116b66116b16116bd92610c19565b610c25565b8254611684565b9055565b60a01b90565b906116d660ff60a01b916116c1565b9181191691161790565b906116f56116f06116fc92611127565b611133565b82546116c7565b9055565b9061170a81610551565b9067ffffffffffffffff82116117ca5761172e8261172885546103ec565b85610d88565b602090601f831160011461176257918091611751935f92611756575b5050610df4565b90555b565b90915001515f8061174a565b601f198316916117718561041f565b925f5b8181106117b257509160029391856001969410611798575b50505002019055611754565b6117a8910151601f841690610ddf565b90555f808061178c565b91936020600181928787015181550195019201611774565b6104cb565b906117d991611700565b565b61190198956118de6118f3966118d78b976119089f9e9c6118ec986118c98f996118fa9f9a6118e59a6118bb6118c29261189a6118d09861182f856118286118225f61108b565b916102b6565b1415611349565b6118548961184d6118476118425f610b1d565b61014f565b9161014f565b14156113f1565b6118798b61187261186c6118675f610b1d565b61014f565b9161014f565b1415611499565b61189361188d6118885f610b1d565b61014f565b9161014f565b1415611541565b6118b46118ae6118a95f610b1d565b61014f565b9161014f565b14156115e9565b6001611628565b600261165e565b60026116a1565b6003610c28565b60036116e0565b6004611628565b6005611628565b6006610c28565b6007611628565b6008610c28565b60096117cf565b611911336119f4565b565b906119269a999897969594939291611178565b565b6119399061193461199f565b61193b565b565b8061195661195061194b5f610b1d565b61014f565b9161014f565b1461196657611964906119f4565b565b6119906119725f610b1d565b61197a610132565b918291631e4fbdf760e01b835260048301610234565b0390fd5b61199d90611928565b565b6119a7610fcd565b6119c06119ba6119b5611a77565b61014f565b9161014f565b036119c757565b6119f06119d2611a77565b6119da610132565b91829163118cdaa760e01b835260048301610234565b0390fd5b6119fd5f610fc0565b611a07825f610c28565b90611a3b611a357f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610c19565b91610c19565b91611a44610132565b80611a4e8161019c565b0390a3565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b611a7f610fa3565b50339056fea26469706673582212205fe4407d47a3e4adaa22ecd645943a0c5098bbbdb92d40d6a64259c6157b2fa264736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4a\0'Wa\0\x11a\x006V[a\0\x19a\0,V[a\x1A\xBAa\x02\x0E\x829a\x1A\xBA\x90\xF3[a\x002V[`@Q\x90V[_\x80\xFD[a\0?3a\0\xA8V[V[\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[\x90V[a\0fa\0aa\0k\x92a\0AV[a\0OV[a\0DV[\x90V[a\0w\x90a\0RV[\x90V[a\0\x83\x90a\0DV[\x90V[a\0\x8F\x90a\0zV[\x90RV[\x91\x90a\0\xA6\x90_` \x85\x01\x94\x01\x90a\0\x86V[V[\x80a\0\xC3a\0\xBDa\0\xB8_a\0nV[a\0zV[\x91a\0zV[\x14a\0\xD3Wa\0\xD1\x90a\x01\xAEV[V[a\0\xFDa\0\xDF_a\0nV[a\0\xE7a\0,V[\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\0\x93V[\x03\x90\xFD[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01\x1Da\x01\"\x91a\x01\x01V[a\x01\x06V[\x90V[a\x01/\x90Ta\x01\x11V[\x90V[_\x1B\x90V[\x90a\x01H`\x01\x80`\xA0\x1B\x03\x91a\x012V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x01fa\x01aa\x01k\x92a\0DV[a\0OV[a\0DV[\x90V[a\x01w\x90a\x01RV[\x90V[a\x01\x83\x90a\x01nV[\x90V[\x90V[\x90a\x01\x9Ea\x01\x99a\x01\xA5\x92a\x01zV[a\x01\x86V[\x82Ta\x017V[\x90UV[_\x01\x90V[a\x01\xB7_a\x01%V[a\x01\xC1\x82_a\x01\x89V[\x90a\x01\xF5a\x01\xEF\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x01zV[\x91a\x01zV[\x91a\x01\xFEa\0,V[\x80a\x02\x08\x81a\x01\xA9V[\x03\x90\xA3V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\n\xE4V[a\0\x1D_5a\x01,V[\x80c*\x84\xB0\xF0\x14a\x01'W\x80cA\xFCq-\x14a\x01\"W\x80cW\xD1\xBA%\x14a\x01\x1DW\x80cb\xC7<\xAA\x14a\x01\x18W\x80cf\xA1\xD1\x08\x14a\x01\x13W\x80cn\xDDl\t\x14a\x01\x0EW\x80cqP\x18\xA6\x14a\x01\tW\x80c\x85\xE1\xF4\xD0\x14a\x01\x04W\x80c\x8D\xA5\xCB[\x14a\0\xFFW\x80c\xA3\xC6\xE1\xE7\x14a\0\xFAW\x80c\xAAjC\xD8\x14a\0\xF5W\x80c\xB9z\xBA>\x14a\0\xF0W\x80c\xBFm\xB6\xF8\x14a\0\xEBW\x80c\xD1\xF4s|\x14a\0\xE6W\x80c\xE1T\x1A\xD8\x14a\0\xE1W\x80c\xE7\x93\x88\xE6\x14a\0\xDCWc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\n\xB1V[a\n|V[a\n,V[a\x08JV[a\x08\x06V[a\x07\xC2V[a\x07+V[a\x06\xE7V[a\x06\xA3V[a\x06nV[a\x06,V[a\x05\xF7V[a\x05\xB2V[a\x03\x91V[a\x02\xDBV[a\x02IV[a\x01\xA1V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01X\x90a\x01DV[\x90V[a\x01d\x81a\x01OV[\x03a\x01kWV[_\x80\xFD[\x90P5\x90a\x01|\x82a\x01[V[V[\x90` \x82\x82\x03\x12a\x01\x97Wa\x01\x94\x91_\x01a\x01oV[\x90V[a\x01<V[_\x01\x90V[4a\x01\xCFWa\x01\xB9a\x01\xB46`\x04a\x01~V[a\x0C\xBAV[a\x01\xC1a\x012V[\x80a\x01\xCB\x81a\x01\x9CV[\x03\x90\xF3[a\x018V[_\x91\x03\x12a\x01\xDEWV[a\x01<V[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02\x02\x90`\x08a\x02\x07\x93\x02a\x01\xE3V[a\x01\xE7V[\x90V[\x90a\x02\x15\x91Ta\x01\xF2V[\x90V[a\x02$`\x08_\x90a\x02\nV[\x90V[a\x020\x90a\x01OV[\x90RV[\x91\x90a\x02G\x90_` \x85\x01\x94\x01\x90a\x02'V[V[4a\x02yWa\x02Y6`\x04a\x01\xD4V[a\x02ua\x02da\x02\x18V[a\x02la\x012V[\x91\x82\x91\x82a\x024V[\x03\x90\xF3[a\x018V[\x90V[a\x02\x91\x90`\x08a\x02\x96\x93\x02a\x01\xE3V[a\x02~V[\x90V[\x90a\x02\xA4\x91Ta\x02\x81V[\x90V[a\x02\xB3`\x04_\x90a\x02\x99V[\x90V[\x90V[a\x02\xC2\x90a\x02\xB6V[\x90RV[\x91\x90a\x02\xD9\x90_` \x85\x01\x94\x01\x90a\x02\xB9V[V[4a\x03\x0BWa\x02\xEB6`\x04a\x01\xD4V[a\x03\x07a\x02\xF6a\x02\xA7V[a\x02\xFEa\x012V[\x91\x82\x91\x82a\x02\xC6V[\x03\x90\xF3[a\x018V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x03VW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x03QW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x03LWV[a\x03\x18V[a\x03\x14V[a\x03\x10V[\x90` \x82\x82\x03\x12a\x03\x8CW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03\x87Wa\x03\x83\x92\x01a\x03\x1CV[\x90\x91V[a\x01@V[a\x01<V[4a\x03\xC0Wa\x03\xAAa\x03\xA46`\x04a\x03[V[\x90a\x0FhV[a\x03\xB2a\x012V[\x80a\x03\xBC\x81a\x01\x9CV[\x03\x90\xF3[a\x018V[cNH{q`\xE0\x1B_R_`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\x04\x0CW[` \x83\x10\x14a\x04\x07WV[a\x03\xD8V[\x91`\x7F\x16\x91a\x03\xFCV[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\x04Ba\x04;\x83a\x03\xECV[\x80\x94a\x04\x16V[\x91`\x01\x81\x16\x90\x81_\x14a\x04\x99WP`\x01\x14a\x04]W[PPPV[a\x04j\x91\x92\x93\x94Pa\x04\x1FV[\x91_\x92[\x81\x84\x10a\x04\x81WPP\x01\x90_\x80\x80a\x04XV[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\x04nV[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\x04XV[\x90a\x04\xBE\x91a\x04(V[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x04\xE9\x90a\x04\xC1V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x05\x03W`@RV[a\x04\xCBV[\x90a\x05(a\x05!\x92a\x05\x18a\x012V[\x93\x84\x80\x92a\x04\xB4V[\x03\x83a\x04\xDFV[V[\x90_\x10a\x05=Wa\x05:\x90a\x05\x08V[\x90V[a\x03\xC5V[a\x05N`\t_\x90a\x05*V[\x90V[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\x05\x88a\x05\x91` \x93a\x05\x96\x93a\x05\x7F\x81a\x05QV[\x93\x84\x80\x93a\x05UV[\x95\x86\x91\x01a\x05^V[a\x04\xC1V[\x01\x90V[a\x05\xAF\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x05iV[\x90V[4a\x05\xE2Wa\x05\xC26`\x04a\x01\xD4V[a\x05\xDEa\x05\xCDa\x05BV[a\x05\xD5a\x012V[\x91\x82\x91\x82a\x05\x9AV[\x03\x90\xF3[a\x018V[a\x05\xF4`\x02`\x01\x90a\x02\nV[\x90V[4a\x06'Wa\x06\x076`\x04a\x01\xD4V[a\x06#a\x06\x12a\x05\xE7V[a\x06\x1Aa\x012V[\x91\x82\x91\x82a\x024V[\x03\x90\xF3[a\x018V[4a\x06ZWa\x06<6`\x04a\x01\xD4V[a\x06Da\x0F\x99V[a\x06La\x012V[\x80a\x06V\x81a\x01\x9CV[\x03\x90\xF3[a\x018V[a\x06k`\x01_\x90a\x02\x99V[\x90V[4a\x06\x9EWa\x06~6`\x04a\x01\xD4V[a\x06\x9Aa\x06\x89a\x06_V[a\x06\x91a\x012V[\x91\x82\x91\x82a\x02\xC6V[\x03\x90\xF3[a\x018V[4a\x06\xD3Wa\x06\xB36`\x04a\x01\xD4V[a\x06\xCFa\x06\xBEa\x0F\xCDV[a\x06\xC6a\x012V[\x91\x82\x91\x82a\x024V[\x03\x90\xF3[a\x018V[a\x06\xE4`\x07_\x90a\x02\x99V[\x90V[4a\x07\x17Wa\x06\xF76`\x04a\x01\xD4V[a\x07\x13a\x07\x02a\x06\xD8V[a\x07\na\x012V[\x91\x82\x91\x82a\x02\xC6V[\x03\x90\xF3[a\x018V[a\x07(`\x03_\x90a\x02\nV[\x90V[4a\x07[Wa\x07;6`\x04a\x01\xD4V[a\x07Wa\x07Fa\x07\x1CV[a\x07Na\x012V[\x91\x82\x91\x82a\x024V[\x03\x90\xF3[a\x018V[`\xFF\x16\x90V[a\x07v\x90`\x08a\x07{\x93\x02a\x01\xE3V[a\x07`V[\x90V[\x90a\x07\x89\x91Ta\x07fV[\x90V[a\x07\x98`\x02_\x90a\x07~V[\x90V[\x15\x15\x90V[a\x07\xA9\x90a\x07\x9BV[\x90RV[\x91\x90a\x07\xC0\x90_` \x85\x01\x94\x01\x90a\x07\xA0V[V[4a\x07\xF2Wa\x07\xD26`\x04a\x01\xD4V[a\x07\xEEa\x07\xDDa\x07\x8CV[a\x07\xE5a\x012V[\x91\x82\x91\x82a\x07\xADV[\x03\x90\xF3[a\x018V[a\x08\x03`\x06_\x90a\x02\nV[\x90V[4a\x086Wa\x08\x166`\x04a\x01\xD4V[a\x082a\x08!a\x07\xF7V[a\x08)a\x012V[\x91\x82\x91\x82a\x024V[\x03\x90\xF3[a\x018V[a\x08G`\x05_\x90a\x02\x99V[\x90V[4a\x08zWa\x08Z6`\x04a\x01\xD4V[a\x08va\x08ea\x08;V[a\x08ma\x012V[\x91\x82\x91\x82a\x02\xC6V[\x03\x90\xF3[a\x018V[a\x08\x88\x81a\x02\xB6V[\x03a\x08\x8FWV[_\x80\xFD[\x90P5\x90a\x08\xA0\x82a\x08\x7FV[V[a\x08\xAB\x81a\x07\x9BV[\x03a\x08\xB2WV[_\x80\xFD[\x90P5\x90a\x08\xC3\x82a\x08\xA2V[V[_\x80\xFD[\x90a\x08\xDCa\x08\xD5a\x012V[\x92\x83a\x04\xDFV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x08\xFCWa\x08\xF8` \x91a\x04\xC1V[\x01\x90V[a\x04\xCBV[\x90\x82_\x93\x92\x827\x01RV[\x90\x92\x91\x92a\t!a\t\x1C\x82a\x08\xDEV[a\x08\xC9V[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\t=Wa\t;\x92a\t\x01V[V[a\x08\xC5V[\x90\x80`\x1F\x83\x01\x12\x15a\t`W\x81` a\t]\x935\x91\x01a\t\x0CV[\x90V[a\x03\x10V[\x91\x90\x91a\x01`\x81\x84\x03\x12a\n'Wa\t\x7F\x83_\x83\x01a\x08\x93V[\x92a\t\x8D\x81` \x84\x01a\x08\xB6V[\x92a\t\x9B\x82`@\x85\x01a\x01oV[\x92a\t\xA9\x83``\x83\x01a\x01oV[\x92a\t\xB7\x81`\x80\x84\x01a\x08\xB6V[\x92a\t\xC5\x82`\xA0\x85\x01a\x08\x93V[\x92a\t\xD3\x83`\xC0\x83\x01a\x08\x93V[\x92a\t\xE1\x81`\xE0\x84\x01a\x01oV[\x92a\t\xF0\x82a\x01\0\x85\x01a\x08\x93V[\x92a\t\xFF\x83a\x01 \x83\x01a\x01oV[\x92a\x01@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\n\"Wa\n\x1F\x92\x01a\tBV[\x90V[a\x01@V[a\x01<V[4a\ngWa\nQa\n?6`\x04a\teV[\x99\x98\x90\x98\x97\x91\x97\x96\x92\x96\x95\x93\x95a\x19\x13V[a\nYa\x012V[\x80a\nc\x81a\x01\x9CV[\x03\x90\xF3[a\x018V[a\ny`\x03`\x14\x90a\x07~V[\x90V[4a\n\xACWa\n\x8C6`\x04a\x01\xD4V[a\n\xA8a\n\x97a\nlV[a\n\x9Fa\x012V[\x91\x82\x91\x82a\x07\xADV[\x03\x90\xF3[a\x018V[4a\n\xDFWa\n\xC9a\n\xC46`\x04a\x01~V[a\x19\x94V[a\n\xD1a\x012V[\x80a\n\xDB\x81a\x01\x9CV[\x03\x90\xF3[a\x018V[_\x80\xFD[a\n\xF9\x90a\n\xF4a\x19\x9FV[a\x0CHV[V[\x90V[\x90V[a\x0B\x15a\x0B\x10a\x0B\x1A\x92a\n\xFBV[a\n\xFEV[a\x01DV[\x90V[a\x0B&\x90a\x0B\x01V[\x90V[` \x7Faddress\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FNew rollup owner cannot be zero _\x82\x01R\x01RV[a\x0B\x83`'`@\x92a\x05UV[a\x0B\x8C\x81a\x0B)V[\x01\x90V[a\x0B\xA5\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x0BvV[\x90V[\x15a\x0B\xAFWV[a\x0B\xB7a\x012V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x0B\xCD`\x04\x82\x01a\x0B\x90V[\x03\x90\xFD[_\x1B\x90V[\x90a\x0B\xE7`\x01\x80`\xA0\x1B\x03\x91a\x0B\xD1V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0C\x05a\x0C\0a\x0C\n\x92a\x01DV[a\n\xFEV[a\x01DV[\x90V[a\x0C\x16\x90a\x0B\xF1V[\x90V[a\x0C\"\x90a\x0C\rV[\x90V[\x90V[\x90a\x0C=a\x0C8a\x0CD\x92a\x0C\x19V[a\x0C%V[\x82Ta\x0B\xD6V[\x90UV[a\x0Cm\x81a\x0Cfa\x0C`a\x0C[_a\x0B\x1DV[a\x01OV[\x91a\x01OV[\x14\x15a\x0B\xA8V[a\x0Cx\x81`\x08a\x0C(V[a\x0C\xA2\x7F\x88)\xBE\xE4f\x83`\x8D_\xD8\x0E$<\x0F\xAE\x04\xD1)\xCE\x17/p\xDB\x10!\xC1\x12\x80t\xA6\xF4\xD9\x91a\x0C\x19V[\x90a\x0C\xABa\x012V[\x80a\x0C\xB5\x81a\x01\x9CV[\x03\x90\xA2V[a\x0C\xC3\x90a\n\xE8V[V[\x90a\x0C\xD7\x91a\x0C\xD2a\x19\x9FV[a\x0F\x1FV[V[P\x90V[`\x1F` \x91\x01\x04\x90V[\x1B\x90V[\x91\x90`\x08a\r\x06\x91\x02\x91a\r\0_\x19\x84a\x0C\xE7V[\x92a\x0C\xE7V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\r$a\r\x1Fa\r)\x92a\x02\xB6V[a\n\xFEV[a\x02\xB6V[\x90V[\x90V[\x91\x90a\rEa\r@a\rM\x93a\r\x10V[a\r,V[\x90\x83Ta\x0C\xEBV[\x90UV[_\x90V[a\rg\x91a\raa\rQV[\x91a\r/V[V[[\x81\x81\x10a\ruWPPV[\x80a\r\x82_`\x01\x93a\rUV[\x01a\rjV[\x91\x90`\x1F\x81\x11a\r\x98W[PPPV[a\r\xA4a\r\xC9\x93a\x04\x1FV[\x90` a\r\xB0\x84a\x0C\xDDV[\x83\x01\x93\x10a\r\xD1W[a\r\xC2\x90a\x0C\xDDV[\x01\x90a\riV[_\x80\x80a\r\x93V[\x91Pa\r\xC2\x81\x92\x90Pa\r\xB9V[\x90a\r\xEF\x90_\x19\x90`\x08\x02a\x01\xE3V[\x19\x16\x90V[\x81a\r\xFE\x91a\r\xDFV[\x90`\x02\x02\x17\x90V[\x91a\x0E\x11\x90\x82a\x0C\xD9V[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x0E\xD0Wa\x0E5\x82a\x0E/\x85Ta\x03\xECV[\x85a\r\x88V[_\x90`\x1F\x83\x11`\x01\x14a\x0EhW\x91\x80\x91a\x0EW\x93_\x92a\x0E\\W[PPa\r\xF4V[\x90U[V[\x90\x91P\x015_\x80a\x0EPV[`\x1F\x19\x83\x16\x91a\x0Ew\x85a\x04\x1FV[\x92_[\x81\x81\x10a\x0E\xB8WP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x0E\x9EW[PPP\x02\x01\x90Ua\x0EZV[a\x0E\xAE\x91\x015`\x1F\x84\x16\x90a\r\xDFV[\x90U_\x80\x80a\x0E\x92V[\x91\x93` `\x01\x81\x92\x87\x87\x015\x81U\x01\x95\x01\x92\x01a\x0EzV[a\x04\xCBV[\x90a\x0E\xE0\x92\x91a\x0E\x06V[V[\x91\x90a\x0E\xFC\x81a\x0E\xF5\x81a\x0F\x01\x95a\x05UV[\x80\x95a\t\x01V[a\x04\xC1V[\x01\x90V[\x90\x91a\x0F\x1C\x92` \x83\x01\x92_\x81\x85\x03\x91\x01Ra\x0E\xE2V[\x90V[a\x0F,\x81\x83\x90`\ta\x0E\xD5V[\x90\x7F\x024\xA4\xE9\x10\xF2\xB1\xE6\x18\xF2\xC9;\xE3\x16\xEC\x0C\x7F@\xE1\xAF#\xFE3\xF9\xFB\xA2\xC5\xBB8\x8A\x95\xF2\x91a\x0Fca\x0FZa\x012V[\x92\x83\x92\x83a\x0F\x05V[\x03\x90\xA1V[\x90a\x0Fr\x91a\x0C\xC5V[V[a\x0F|a\x19\x9FV[a\x0F\x84a\x0F\x86V[V[a\x0F\x97a\x0F\x92_a\x0B\x1DV[a\x19\xF4V[V[a\x0F\xA1a\x0FtV[V[_\x90V[_\x1C\x90V[a\x0F\xB8a\x0F\xBD\x91a\x0F\xA7V[a\x01\xE7V[\x90V[a\x0F\xCA\x90Ta\x0F\xACV[\x90V[a\x0F\xD5a\x0F\xA3V[Pa\x0F\xDF_a\x0F\xC0V[\x90V[`@\x1C\x90V[a\x0F\xF4a\x0F\xF9\x91a\x0F\xE2V[a\x07`V[\x90V[a\x10\x06\x90Ta\x0F\xE8V[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x10\"a\x10'\x91a\x0F\xA7V[a\x10\tV[\x90V[a\x104\x90Ta\x10\x16V[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x10Xa\x10Sa\x10]\x92a\n\xFBV[a\n\xFEV[a\x107V[\x90V[\x90V[a\x10wa\x10ra\x10|\x92a\x10`V[a\n\xFEV[a\x107V[\x90V[a\x10\x88\x90a\x0C\rV[\x90V[a\x10\x9Fa\x10\x9Aa\x10\xA4\x92a\n\xFBV[a\n\xFEV[a\x02\xB6V[\x90V[\x90a\x10\xBAg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91a\x0B\xD1V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x10\xD8a\x10\xD3a\x10\xDD\x92a\x107V[a\n\xFEV[a\x107V[\x90V[\x90V[\x90a\x10\xF8a\x10\xF3a\x10\xFF\x92a\x10\xC4V[a\x10\xE0V[\x82Ta\x10\xA7V[\x90UV[`@\x1B\x90V[\x90a\x11\x1Dh\xFF\0\0\0\0\0\0\0\0\x91a\x11\x03V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x110\x90a\x07\x9BV[\x90V[\x90V[\x90a\x11Ka\x11Fa\x11R\x92a\x11'V[a\x113V[\x82Ta\x11\tV[\x90UV[a\x11_\x90a\x10cV[\x90RV[\x91\x90a\x11v\x90_` \x85\x01\x94\x01\x90a\x11VV[V[\x97\x94\x91\x99\x96\x93\x90\x98\x95\x92a\x11\x8Aa\x1ASV[\x9A\x8B_\x01a\x11\x97\x90a\x0F\xFCV[\x15a\x11\xA1\x90a\x07\x9BV[\x9A\x8C_\x01a\x11\xAE\x90a\x10*V[\x80_a\x11\xB9\x90a\x10DV[\x90a\x11\xC3\x90a\x107V[\x14\x80a\x12\xE9W[\x90a\x11\xDEa\x11\xD8`\x01a\x10cV[\x91a\x107V[\x14\x80a\x12\xC1W[a\x11\xF0\x90\x91\x15a\x07\x9BV[\x90\x81a\x12\xB0W[Pa\x12\x8DWa\x12#\x9Aa\x12\x16\x8E_a\x12\x0F`\x01a\x10cV[\x91\x01a\x10\xE3V[\x8D\x8Da\x12yW[Pa\x17\xDBV[a\x12+W[PV[a\x128\x90_\x80\x91\x01a\x116V[`\x01a\x12p\x7F\xC7\xF5\x05\xB2\xF3q\xAE!u\xEEI\x13\xF4I\x9E\x1F&3\xA7\xB5\x93c!\xEE\xD1\xCD\xAE\xB6\x11Q\x81\xD2\x91a\x12ga\x012V[\x91\x82\x91\x82a\x11cV[\x03\x90\xA1_a\x12(V[a\x12\x87\x90_`\x01\x91\x01a\x116V[\x8Da\x12\x1DV[a\x12\x95a\x012V[c\xF9.\xE8\xA9`\xE0\x1B\x81R\x80a\x12\xAC`\x04\x82\x01a\x01\x9CV[\x03\x90\xFD[a\x12\xBB\x91P\x15a\x07\x9BV[_a\x11\xF7V[Pa\x11\xF0a\x12\xCE0a\x10\x7FV[;a\x12\xE1a\x12\xDB_a\x10\x8BV[\x91a\x02\xB6V[\x14\x90Pa\x11\xE5V[P\x8Ca\x11\xCAV[_\x7FChain ID cannot be zero\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x13$`\x17` \x92a\x05UV[a\x13-\x81a\x12\xF0V[\x01\x90V[a\x13F\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x13\x17V[\x90V[\x15a\x13PWV[a\x13Xa\x012V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x13n`\x04\x82\x01a\x131V[\x03\x90\xFD[` \x7Fe zero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FArbitrum bridge address cannot b_\x82\x01R\x01RV[a\x13\xCC`&`@\x92a\x05UV[a\x13\xD5\x81a\x13rV[\x01\x90V[a\x13\xEE\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x13\xBFV[\x90V[\x15a\x13\xF8WV[a\x14\0a\x012V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x14\x16`\x04\x82\x01a\x13\xD9V[\x03\x90\xFD[` \x7F zero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FArbitrum inbox address cannot be_\x82\x01R\x01RV[a\x14t`%`@\x92a\x05UV[a\x14}\x81a\x14\x1AV[\x01\x90V[a\x14\x96\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x14gV[\x90V[\x15a\x14\xA0WV[a\x14\xA8a\x012V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x14\xBE`\x04\x82\x01a\x14\x81V[\x03\x90\xFD[` \x7Fot be zero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FSequencing contract address cann_\x82\x01R\x01RV[a\x15\x1C`*`@\x92a\x05UV[a\x15%\x81a\x14\xC2V[\x01\x90V[a\x15>\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x15\x0FV[\x90V[\x15a\x15HWV[a\x15Pa\x012V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x15f`\x04\x82\x01a\x15)V[\x03\x90\xFD[` \x7Fess\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FRollup owner cannot be zero addr_\x82\x01R\x01RV[a\x15\xC4`#`@\x92a\x05UV[a\x15\xCD\x81a\x15jV[\x01\x90V[a\x15\xE6\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x15\xB7V[\x90V[\x15a\x15\xF0WV[a\x15\xF8a\x012V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x16\x0E`\x04\x82\x01a\x15\xD1V[\x03\x90\xFD[\x90a\x16\x1E_\x19\x91a\x0B\xD1V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x16=a\x168a\x16D\x92a\r\x10V[a\r,V[\x82Ta\x16\x12V[\x90UV[\x90a\x16T`\xFF\x91a\x0B\xD1V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x16sa\x16na\x16z\x92a\x11'V[a\x113V[\x82Ta\x16HV[\x90UV[`\x08\x1B\x90V[\x90a\x16\x97a\x01\0`\x01`\xA8\x1B\x03\x91a\x16~V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x16\xB6a\x16\xB1a\x16\xBD\x92a\x0C\x19V[a\x0C%V[\x82Ta\x16\x84V[\x90UV[`\xA0\x1B\x90V[\x90a\x16\xD6`\xFF`\xA0\x1B\x91a\x16\xC1V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x16\xF5a\x16\xF0a\x16\xFC\x92a\x11'V[a\x113V[\x82Ta\x16\xC7V[\x90UV[\x90a\x17\n\x81a\x05QV[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x17\xCAWa\x17.\x82a\x17(\x85Ta\x03\xECV[\x85a\r\x88V[` \x90`\x1F\x83\x11`\x01\x14a\x17bW\x91\x80\x91a\x17Q\x93_\x92a\x17VW[PPa\r\xF4V[\x90U[V[\x90\x91P\x01Q_\x80a\x17JV[`\x1F\x19\x83\x16\x91a\x17q\x85a\x04\x1FV[\x92_[\x81\x81\x10a\x17\xB2WP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x17\x98W[PPP\x02\x01\x90Ua\x17TV[a\x17\xA8\x91\x01Q`\x1F\x84\x16\x90a\r\xDFV[\x90U_\x80\x80a\x17\x8CV[\x91\x93` `\x01\x81\x92\x87\x87\x01Q\x81U\x01\x95\x01\x92\x01a\x17tV[a\x04\xCBV[\x90a\x17\xD9\x91a\x17\0V[V[a\x19\x01\x98\x95a\x18\xDEa\x18\xF3\x96a\x18\xD7\x8B\x97a\x19\x08\x9F\x9E\x9Ca\x18\xEC\x98a\x18\xC9\x8F\x99a\x18\xFA\x9F\x9Aa\x18\xE5\x9Aa\x18\xBBa\x18\xC2\x92a\x18\x9Aa\x18\xD0\x98a\x18/\x85a\x18(a\x18\"_a\x10\x8BV[\x91a\x02\xB6V[\x14\x15a\x13IV[a\x18T\x89a\x18Ma\x18Ga\x18B_a\x0B\x1DV[a\x01OV[\x91a\x01OV[\x14\x15a\x13\xF1V[a\x18y\x8Ba\x18ra\x18la\x18g_a\x0B\x1DV[a\x01OV[\x91a\x01OV[\x14\x15a\x14\x99V[a\x18\x93a\x18\x8Da\x18\x88_a\x0B\x1DV[a\x01OV[\x91a\x01OV[\x14\x15a\x15AV[a\x18\xB4a\x18\xAEa\x18\xA9_a\x0B\x1DV[a\x01OV[\x91a\x01OV[\x14\x15a\x15\xE9V[`\x01a\x16(V[`\x02a\x16^V[`\x02a\x16\xA1V[`\x03a\x0C(V[`\x03a\x16\xE0V[`\x04a\x16(V[`\x05a\x16(V[`\x06a\x0C(V[`\x07a\x16(V[`\x08a\x0C(V[`\ta\x17\xCFV[a\x19\x113a\x19\xF4V[V[\x90a\x19&\x9A\x99\x98\x97\x96\x95\x94\x93\x92\x91a\x11xV[V[a\x199\x90a\x194a\x19\x9FV[a\x19;V[V[\x80a\x19Va\x19Pa\x19K_a\x0B\x1DV[a\x01OV[\x91a\x01OV[\x14a\x19fWa\x19d\x90a\x19\xF4V[V[a\x19\x90a\x19r_a\x0B\x1DV[a\x19za\x012V[\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x024V[\x03\x90\xFD[a\x19\x9D\x90a\x19(V[V[a\x19\xA7a\x0F\xCDV[a\x19\xC0a\x19\xBAa\x19\xB5a\x1AwV[a\x01OV[\x91a\x01OV[\x03a\x19\xC7WV[a\x19\xF0a\x19\xD2a\x1AwV[a\x19\xDAa\x012V[\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x024V[\x03\x90\xFD[a\x19\xFD_a\x0F\xC0V[a\x1A\x07\x82_a\x0C(V[\x90a\x1A;a\x1A5\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x0C\x19V[\x91a\x0C\x19V[\x91a\x1ADa\x012V[\x80a\x1AN\x81a\x01\x9CV[\x03\x90\xA3V[\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0\x90V[a\x1A\x7Fa\x0F\xA3V[P3\x90V\xFE\xA2dipfsX\"\x12 _\xE4@}G\xA3\xE4\xAD\xAA\"\xEC\xD6E\x94:\x0CP\x98\xBB\xBD\xB9-@\xD6\xA6BY\xC6\x15{/\xA2dsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b610ae4565b61001d5f3561012c565b80632a84b0f01461012757806341fc712d1461012257806357d1ba251461011d57806362c73caa1461011857806366a1d108146101135780636edd6c091461010e578063715018a61461010957806385e1f4d0146101045780638da5cb5b146100ff578063a3c6e1e7146100fa578063aa6a43d8146100f5578063b97aba3e146100f0578063bf6db6f8146100eb578063d1f4737c146100e6578063e1541ad8146100e1578063e79388e6146100dc5763f2fde38b0361000e57610ab1565b610a7c565b610a2c565b61084a565b610806565b6107c2565b61072b565b6106e7565b6106a3565b61066e565b61062c565b6105f7565b6105b2565b610391565b6102db565b610249565b6101a1565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b60018060a01b031690565b61015890610144565b90565b6101648161014f565b0361016b57565b5f80fd5b9050359061017c8261015b565b565b9060208282031261019757610194915f0161016f565b90565b61013c565b5f0190565b346101cf576101b96101b436600461017e565b610cba565b6101c1610132565b806101cb8161019c565b0390f35b610138565b5f9103126101de57565b61013c565b1c90565b60018060a01b031690565b61020290600861020793026101e3565b6101e7565b90565b9061021591546101f2565b90565b61022460085f9061020a565b90565b6102309061014f565b9052565b9190610247905f60208501940190610227565b565b34610279576102593660046101d4565b610275610264610218565b61026c610132565b91829182610234565b0390f35b610138565b90565b61029190600861029693026101e3565b61027e565b90565b906102a49154610281565b90565b6102b360045f90610299565b90565b90565b6102c2906102b6565b9052565b91906102d9905f602085019401906102b9565b565b3461030b576102eb3660046101d4565b6103076102f66102a7565b6102fe610132565b918291826102c6565b0390f35b610138565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156103565781359167ffffffffffffffff831161035157602001926001830284011161034c57565b610318565b610314565b610310565b9060208282031261038c575f82013567ffffffffffffffff811161038757610383920161031c565b9091565b610140565b61013c565b346103c0576103aa6103a436600461035b565b90610f68565b6103b2610132565b806103bc8161019c565b0390f35b610138565b634e487b7160e01b5f525f60045260245ffd5b634e487b7160e01b5f52602260045260245ffd5b906001600283049216801561040c575b602083101461040757565b6103d8565b91607f16916103fc565b60209181520190565b5f5260205f2090565b905f929180549061044261043b836103ec565b8094610416565b916001811690815f14610499575060011461045d575b505050565b61046a919293945061041f565b915f925b81841061048157505001905f8080610458565b6001816020929593955484860152019101929061046e565b92949550505060ff19168252151560200201905f8080610458565b906104be91610428565b90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906104e9906104c1565b810190811067ffffffffffffffff82111761050357604052565b6104cb565b9061052861052192610518610132565b938480926104b4565b03836104df565b565b905f1061053d5761053a90610508565b90565b6103c5565b61054e60095f9061052a565b90565b5190565b60209181520190565b90825f9392825e0152565b6105886105916020936105969361057f81610551565b93848093610555565b9586910161055e565b6104c1565b0190565b6105af9160208201915f818403910152610569565b90565b346105e2576105c23660046101d4565b6105de6105cd610542565b6105d5610132565b9182918261059a565b0390f35b610138565b6105f4600260019061020a565b90565b34610627576106073660046101d4565b6106236106126105e7565b61061a610132565b91829182610234565b0390f35b610138565b3461065a5761063c3660046101d4565b610644610f99565b61064c610132565b806106568161019c565b0390f35b610138565b61066b60015f90610299565b90565b3461069e5761067e3660046101d4565b61069a61068961065f565b610691610132565b918291826102c6565b0390f35b610138565b346106d3576106b33660046101d4565b6106cf6106be610fcd565b6106c6610132565b91829182610234565b0390f35b610138565b6106e460075f90610299565b90565b34610717576106f73660046101d4565b6107136107026106d8565b61070a610132565b918291826102c6565b0390f35b610138565b61072860035f9061020a565b90565b3461075b5761073b3660046101d4565b61075761074661071c565b61074e610132565b91829182610234565b0390f35b610138565b60ff1690565b61077690600861077b93026101e3565b610760565b90565b906107899154610766565b90565b61079860025f9061077e565b90565b151590565b6107a99061079b565b9052565b91906107c0905f602085019401906107a0565b565b346107f2576107d23660046101d4565b6107ee6107dd61078c565b6107e5610132565b918291826107ad565b0390f35b610138565b61080360065f9061020a565b90565b34610836576108163660046101d4565b6108326108216107f7565b610829610132565b91829182610234565b0390f35b610138565b61084760055f90610299565b90565b3461087a5761085a3660046101d4565b61087661086561083b565b61086d610132565b918291826102c6565b0390f35b610138565b610888816102b6565b0361088f57565b5f80fd5b905035906108a08261087f565b565b6108ab8161079b565b036108b257565b5f80fd5b905035906108c3826108a2565b565b5f80fd5b906108dc6108d5610132565b92836104df565b565b67ffffffffffffffff81116108fc576108f86020916104c1565b0190565b6104cb565b90825f939282370152565b9092919261092161091c826108de565b6108c9565b9381855260208501908284011161093d5761093b92610901565b565b6108c5565b9080601f830112156109605781602061095d9335910161090c565b90565b610310565b91909161016081840312610a275761097f835f8301610893565b9261098d81602084016108b6565b9261099b826040850161016f565b926109a9836060830161016f565b926109b781608084016108b6565b926109c58260a08501610893565b926109d38360c08301610893565b926109e18160e0840161016f565b926109f0826101008501610893565b926109ff83610120830161016f565b9261014082013567ffffffffffffffff8111610a2257610a1f9201610942565b90565b610140565b61013c565b34610a6757610a51610a3f366004610965565b99989098979197969296959395611913565b610a59610132565b80610a638161019c565b0390f35b610138565b610a79600360149061077e565b90565b34610aac57610a8c3660046101d4565b610aa8610a97610a6c565b610a9f610132565b918291826107ad565b0390f35b610138565b34610adf57610ac9610ac436600461017e565b611994565b610ad1610132565b80610adb8161019c565b0390f35b610138565b5f80fd5b610af990610af461199f565b610c48565b565b90565b90565b610b15610b10610b1a92610afb565b610afe565b610144565b90565b610b2690610b01565b90565b60207f6164647265737300000000000000000000000000000000000000000000000000917f4e657720726f6c6c7570206f776e65722063616e6e6f74206265207a65726f205f8201520152565b610b836027604092610555565b610b8c81610b29565b0190565b610ba59060208101905f818303910152610b76565b90565b15610baf57565b610bb7610132565b62461bcd60e51b815280610bcd60048201610b90565b0390fd5b5f1b90565b90610be760018060a01b0391610bd1565b9181191691161790565b610c05610c00610c0a92610144565b610afe565b610144565b90565b610c1690610bf1565b90565b610c2290610c0d565b90565b90565b90610c3d610c38610c4492610c19565b610c25565b8254610bd6565b9055565b610c6d81610c66610c60610c5b5f610b1d565b61014f565b9161014f565b1415610ba8565b610c78816008610c28565b610ca27f8829bee46683608d5fd80e243c0fae04d129ce172f70db1021c1128074a6f4d991610c19565b90610cab610132565b80610cb58161019c565b0390a2565b610cc390610ae8565b565b90610cd791610cd261199f565b610f1f565b565b5090565b601f602091010490565b1b90565b91906008610d06910291610d005f1984610ce7565b92610ce7565b9181191691161790565b610d24610d1f610d29926102b6565b610afe565b6102b6565b90565b90565b9190610d45610d40610d4d93610d10565b610d2c565b908354610ceb565b9055565b5f90565b610d6791610d61610d51565b91610d2f565b565b5b818110610d75575050565b80610d825f600193610d55565b01610d6a565b9190601f8111610d98575b505050565b610da4610dc99361041f565b906020610db084610cdd565b83019310610dd1575b610dc290610cdd565b0190610d69565b5f8080610d93565b9150610dc281929050610db9565b90610def905f19906008026101e3565b191690565b81610dfe91610ddf565b906002021790565b91610e119082610cd9565b9067ffffffffffffffff8211610ed057610e3582610e2f85546103ec565b85610d88565b5f90601f8311600114610e6857918091610e57935f92610e5c575b5050610df4565b90555b565b90915001355f80610e50565b601f19831691610e778561041f565b925f5b818110610eb857509160029391856001969410610e9e575b50505002019055610e5a565b610eae910135601f841690610ddf565b90555f8080610e92565b91936020600181928787013581550195019201610e7a565b6104cb565b90610ee09291610e06565b565b9190610efc81610ef581610f0195610555565b8095610901565b6104c1565b0190565b9091610f1c9260208301925f818503910152610ee2565b90565b610f2c8183906009610ed5565b907f0234a4e910f2b1e618f2c93be316ec0c7f40e1af23fe33f9fba2c5bb388a95f291610f63610f5a610132565b92839283610f05565b0390a1565b90610f7291610cc5565b565b610f7c61199f565b610f84610f86565b565b610f97610f925f610b1d565b6119f4565b565b610fa1610f74565b565b5f90565b5f1c90565b610fb8610fbd91610fa7565b6101e7565b90565b610fca9054610fac565b90565b610fd5610fa3565b50610fdf5f610fc0565b90565b60401c90565b610ff4610ff991610fe2565b610760565b90565b6110069054610fe8565b90565b67ffffffffffffffff1690565b61102261102791610fa7565b611009565b90565b6110349054611016565b90565b67ffffffffffffffff1690565b61105861105361105d92610afb565b610afe565b611037565b90565b90565b61107761107261107c92611060565b610afe565b611037565b90565b61108890610c0d565b90565b61109f61109a6110a492610afb565b610afe565b6102b6565b90565b906110ba67ffffffffffffffff91610bd1565b9181191691161790565b6110d86110d36110dd92611037565b610afe565b611037565b90565b90565b906110f86110f36110ff926110c4565b6110e0565b82546110a7565b9055565b60401b90565b9061111d68ff000000000000000091611103565b9181191691161790565b6111309061079b565b90565b90565b9061114b61114661115292611127565b611133565b8254611109565b9055565b61115f90611063565b9052565b9190611176905f60208501940190611156565b565b9794919996939098959261118a611a53565b9a8b5f0161119790610ffc565b156111a19061079b565b9a8c5f016111ae9061102a565b805f6111b990611044565b906111c390611037565b14806112e9575b906111de6111d86001611063565b91611037565b14806112c1575b6111f090911561079b565b90816112b0575b5061128d576112239a6112168e5f61120f6001611063565b91016110e3565b8d8d611279575b506117db565b61122b575b50565b611238905f809101611136565b60016112707fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d291611267610132565b91829182611163565b0390a15f611228565b611287905f60019101611136565b8d61121d565b611295610132565b63f92ee8a960e01b8152806112ac6004820161019c565b0390fd5b6112bb91501561079b565b5f6111f7565b506111f06112ce3061107f565b3b6112e16112db5f61108b565b916102b6565b1490506111e5565b508c6111ca565b5f7f436861696e2049442063616e6e6f74206265207a65726f000000000000000000910152565b6113246017602092610555565b61132d816112f0565b0190565b6113469060208101905f818303910152611317565b90565b1561135057565b611358610132565b62461bcd60e51b81528061136e60048201611331565b0390fd5b60207f65207a65726f0000000000000000000000000000000000000000000000000000917f417262697472756d2062726964676520616464726573732063616e6e6f7420625f8201520152565b6113cc6026604092610555565b6113d581611372565b0190565b6113ee9060208101905f8183039101526113bf565b90565b156113f857565b611400610132565b62461bcd60e51b815280611416600482016113d9565b0390fd5b60207f207a65726f000000000000000000000000000000000000000000000000000000917f417262697472756d20696e626f7820616464726573732063616e6e6f742062655f8201520152565b6114746025604092610555565b61147d8161141a565b0190565b6114969060208101905f818303910152611467565b90565b156114a057565b6114a8610132565b62461bcd60e51b8152806114be60048201611481565b0390fd5b60207f6f74206265207a65726f00000000000000000000000000000000000000000000917f53657175656e63696e6720636f6e747261637420616464726573732063616e6e5f8201520152565b61151c602a604092610555565b611525816114c2565b0190565b61153e9060208101905f81830391015261150f565b90565b1561154857565b611550610132565b62461bcd60e51b81528061156660048201611529565b0390fd5b60207f6573730000000000000000000000000000000000000000000000000000000000917f526f6c6c7570206f776e65722063616e6e6f74206265207a65726f20616464725f8201520152565b6115c46023604092610555565b6115cd8161156a565b0190565b6115e69060208101905f8183039101526115b7565b90565b156115f057565b6115f8610132565b62461bcd60e51b81528061160e600482016115d1565b0390fd5b9061161e5f1991610bd1565b9181191691161790565b9061163d61163861164492610d10565b610d2c565b8254611612565b9055565b9061165460ff91610bd1565b9181191691161790565b9061167361166e61167a92611127565b611133565b8254611648565b9055565b60081b90565b90611697610100600160a81b039161167e565b9181191691161790565b906116b66116b16116bd92610c19565b610c25565b8254611684565b9055565b60a01b90565b906116d660ff60a01b916116c1565b9181191691161790565b906116f56116f06116fc92611127565b611133565b82546116c7565b9055565b9061170a81610551565b9067ffffffffffffffff82116117ca5761172e8261172885546103ec565b85610d88565b602090601f831160011461176257918091611751935f92611756575b5050610df4565b90555b565b90915001515f8061174a565b601f198316916117718561041f565b925f5b8181106117b257509160029391856001969410611798575b50505002019055611754565b6117a8910151601f841690610ddf565b90555f808061178c565b91936020600181928787015181550195019201611774565b6104cb565b906117d991611700565b565b61190198956118de6118f3966118d78b976119089f9e9c6118ec986118c98f996118fa9f9a6118e59a6118bb6118c29261189a6118d09861182f856118286118225f61108b565b916102b6565b1415611349565b6118548961184d6118476118425f610b1d565b61014f565b9161014f565b14156113f1565b6118798b61187261186c6118675f610b1d565b61014f565b9161014f565b1415611499565b61189361188d6118885f610b1d565b61014f565b9161014f565b1415611541565b6118b46118ae6118a95f610b1d565b61014f565b9161014f565b14156115e9565b6001611628565b600261165e565b60026116a1565b6003610c28565b60036116e0565b6004611628565b6005611628565b6006610c28565b6007611628565b6008610c28565b60096117cf565b611911336119f4565b565b906119269a999897969594939291611178565b565b6119399061193461199f565b61193b565b565b8061195661195061194b5f610b1d565b61014f565b9161014f565b1461196657611964906119f4565b565b6119906119725f610b1d565b61197a610132565b918291631e4fbdf760e01b835260048301610234565b0390fd5b61199d90611928565b565b6119a7610fcd565b6119c06119ba6119b5611a77565b61014f565b9161014f565b036119c757565b6119f06119d2611a77565b6119da610132565b91829163118cdaa760e01b835260048301610234565b0390fd5b6119fd5f610fc0565b611a07825f610c28565b90611a3b611a357f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610c19565b91610c19565b91611a44610132565b80611a4e8161019c565b0390a3565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b611a7f610fa3565b50339056fea26469706673582212205fe4407d47a3e4adaa22ecd645943a0c5098bbbdb92d40d6a64259c6157b2fa264736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\n\xE4V[a\0\x1D_5a\x01,V[\x80c*\x84\xB0\xF0\x14a\x01'W\x80cA\xFCq-\x14a\x01\"W\x80cW\xD1\xBA%\x14a\x01\x1DW\x80cb\xC7<\xAA\x14a\x01\x18W\x80cf\xA1\xD1\x08\x14a\x01\x13W\x80cn\xDDl\t\x14a\x01\x0EW\x80cqP\x18\xA6\x14a\x01\tW\x80c\x85\xE1\xF4\xD0\x14a\x01\x04W\x80c\x8D\xA5\xCB[\x14a\0\xFFW\x80c\xA3\xC6\xE1\xE7\x14a\0\xFAW\x80c\xAAjC\xD8\x14a\0\xF5W\x80c\xB9z\xBA>\x14a\0\xF0W\x80c\xBFm\xB6\xF8\x14a\0\xEBW\x80c\xD1\xF4s|\x14a\0\xE6W\x80c\xE1T\x1A\xD8\x14a\0\xE1W\x80c\xE7\x93\x88\xE6\x14a\0\xDCWc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\n\xB1V[a\n|V[a\n,V[a\x08JV[a\x08\x06V[a\x07\xC2V[a\x07+V[a\x06\xE7V[a\x06\xA3V[a\x06nV[a\x06,V[a\x05\xF7V[a\x05\xB2V[a\x03\x91V[a\x02\xDBV[a\x02IV[a\x01\xA1V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01X\x90a\x01DV[\x90V[a\x01d\x81a\x01OV[\x03a\x01kWV[_\x80\xFD[\x90P5\x90a\x01|\x82a\x01[V[V[\x90` \x82\x82\x03\x12a\x01\x97Wa\x01\x94\x91_\x01a\x01oV[\x90V[a\x01<V[_\x01\x90V[4a\x01\xCFWa\x01\xB9a\x01\xB46`\x04a\x01~V[a\x0C\xBAV[a\x01\xC1a\x012V[\x80a\x01\xCB\x81a\x01\x9CV[\x03\x90\xF3[a\x018V[_\x91\x03\x12a\x01\xDEWV[a\x01<V[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02\x02\x90`\x08a\x02\x07\x93\x02a\x01\xE3V[a\x01\xE7V[\x90V[\x90a\x02\x15\x91Ta\x01\xF2V[\x90V[a\x02$`\x08_\x90a\x02\nV[\x90V[a\x020\x90a\x01OV[\x90RV[\x91\x90a\x02G\x90_` \x85\x01\x94\x01\x90a\x02'V[V[4a\x02yWa\x02Y6`\x04a\x01\xD4V[a\x02ua\x02da\x02\x18V[a\x02la\x012V[\x91\x82\x91\x82a\x024V[\x03\x90\xF3[a\x018V[\x90V[a\x02\x91\x90`\x08a\x02\x96\x93\x02a\x01\xE3V[a\x02~V[\x90V[\x90a\x02\xA4\x91Ta\x02\x81V[\x90V[a\x02\xB3`\x04_\x90a\x02\x99V[\x90V[\x90V[a\x02\xC2\x90a\x02\xB6V[\x90RV[\x91\x90a\x02\xD9\x90_` \x85\x01\x94\x01\x90a\x02\xB9V[V[4a\x03\x0BWa\x02\xEB6`\x04a\x01\xD4V[a\x03\x07a\x02\xF6a\x02\xA7V[a\x02\xFEa\x012V[\x91\x82\x91\x82a\x02\xC6V[\x03\x90\xF3[a\x018V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x03VW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x03QW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x03LWV[a\x03\x18V[a\x03\x14V[a\x03\x10V[\x90` \x82\x82\x03\x12a\x03\x8CW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03\x87Wa\x03\x83\x92\x01a\x03\x1CV[\x90\x91V[a\x01@V[a\x01<V[4a\x03\xC0Wa\x03\xAAa\x03\xA46`\x04a\x03[V[\x90a\x0FhV[a\x03\xB2a\x012V[\x80a\x03\xBC\x81a\x01\x9CV[\x03\x90\xF3[a\x018V[cNH{q`\xE0\x1B_R_`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\x04\x0CW[` \x83\x10\x14a\x04\x07WV[a\x03\xD8V[\x91`\x7F\x16\x91a\x03\xFCV[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\x04Ba\x04;\x83a\x03\xECV[\x80\x94a\x04\x16V[\x91`\x01\x81\x16\x90\x81_\x14a\x04\x99WP`\x01\x14a\x04]W[PPPV[a\x04j\x91\x92\x93\x94Pa\x04\x1FV[\x91_\x92[\x81\x84\x10a\x04\x81WPP\x01\x90_\x80\x80a\x04XV[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\x04nV[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\x04XV[\x90a\x04\xBE\x91a\x04(V[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x04\xE9\x90a\x04\xC1V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x05\x03W`@RV[a\x04\xCBV[\x90a\x05(a\x05!\x92a\x05\x18a\x012V[\x93\x84\x80\x92a\x04\xB4V[\x03\x83a\x04\xDFV[V[\x90_\x10a\x05=Wa\x05:\x90a\x05\x08V[\x90V[a\x03\xC5V[a\x05N`\t_\x90a\x05*V[\x90V[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\x05\x88a\x05\x91` \x93a\x05\x96\x93a\x05\x7F\x81a\x05QV[\x93\x84\x80\x93a\x05UV[\x95\x86\x91\x01a\x05^V[a\x04\xC1V[\x01\x90V[a\x05\xAF\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x05iV[\x90V[4a\x05\xE2Wa\x05\xC26`\x04a\x01\xD4V[a\x05\xDEa\x05\xCDa\x05BV[a\x05\xD5a\x012V[\x91\x82\x91\x82a\x05\x9AV[\x03\x90\xF3[a\x018V[a\x05\xF4`\x02`\x01\x90a\x02\nV[\x90V[4a\x06'Wa\x06\x076`\x04a\x01\xD4V[a\x06#a\x06\x12a\x05\xE7V[a\x06\x1Aa\x012V[\x91\x82\x91\x82a\x024V[\x03\x90\xF3[a\x018V[4a\x06ZWa\x06<6`\x04a\x01\xD4V[a\x06Da\x0F\x99V[a\x06La\x012V[\x80a\x06V\x81a\x01\x9CV[\x03\x90\xF3[a\x018V[a\x06k`\x01_\x90a\x02\x99V[\x90V[4a\x06\x9EWa\x06~6`\x04a\x01\xD4V[a\x06\x9Aa\x06\x89a\x06_V[a\x06\x91a\x012V[\x91\x82\x91\x82a\x02\xC6V[\x03\x90\xF3[a\x018V[4a\x06\xD3Wa\x06\xB36`\x04a\x01\xD4V[a\x06\xCFa\x06\xBEa\x0F\xCDV[a\x06\xC6a\x012V[\x91\x82\x91\x82a\x024V[\x03\x90\xF3[a\x018V[a\x06\xE4`\x07_\x90a\x02\x99V[\x90V[4a\x07\x17Wa\x06\xF76`\x04a\x01\xD4V[a\x07\x13a\x07\x02a\x06\xD8V[a\x07\na\x012V[\x91\x82\x91\x82a\x02\xC6V[\x03\x90\xF3[a\x018V[a\x07(`\x03_\x90a\x02\nV[\x90V[4a\x07[Wa\x07;6`\x04a\x01\xD4V[a\x07Wa\x07Fa\x07\x1CV[a\x07Na\x012V[\x91\x82\x91\x82a\x024V[\x03\x90\xF3[a\x018V[`\xFF\x16\x90V[a\x07v\x90`\x08a\x07{\x93\x02a\x01\xE3V[a\x07`V[\x90V[\x90a\x07\x89\x91Ta\x07fV[\x90V[a\x07\x98`\x02_\x90a\x07~V[\x90V[\x15\x15\x90V[a\x07\xA9\x90a\x07\x9BV[\x90RV[\x91\x90a\x07\xC0\x90_` \x85\x01\x94\x01\x90a\x07\xA0V[V[4a\x07\xF2Wa\x07\xD26`\x04a\x01\xD4V[a\x07\xEEa\x07\xDDa\x07\x8CV[a\x07\xE5a\x012V[\x91\x82\x91\x82a\x07\xADV[\x03\x90\xF3[a\x018V[a\x08\x03`\x06_\x90a\x02\nV[\x90V[4a\x086Wa\x08\x166`\x04a\x01\xD4V[a\x082a\x08!a\x07\xF7V[a\x08)a\x012V[\x91\x82\x91\x82a\x024V[\x03\x90\xF3[a\x018V[a\x08G`\x05_\x90a\x02\x99V[\x90V[4a\x08zWa\x08Z6`\x04a\x01\xD4V[a\x08va\x08ea\x08;V[a\x08ma\x012V[\x91\x82\x91\x82a\x02\xC6V[\x03\x90\xF3[a\x018V[a\x08\x88\x81a\x02\xB6V[\x03a\x08\x8FWV[_\x80\xFD[\x90P5\x90a\x08\xA0\x82a\x08\x7FV[V[a\x08\xAB\x81a\x07\x9BV[\x03a\x08\xB2WV[_\x80\xFD[\x90P5\x90a\x08\xC3\x82a\x08\xA2V[V[_\x80\xFD[\x90a\x08\xDCa\x08\xD5a\x012V[\x92\x83a\x04\xDFV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x08\xFCWa\x08\xF8` \x91a\x04\xC1V[\x01\x90V[a\x04\xCBV[\x90\x82_\x93\x92\x827\x01RV[\x90\x92\x91\x92a\t!a\t\x1C\x82a\x08\xDEV[a\x08\xC9V[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\t=Wa\t;\x92a\t\x01V[V[a\x08\xC5V[\x90\x80`\x1F\x83\x01\x12\x15a\t`W\x81` a\t]\x935\x91\x01a\t\x0CV[\x90V[a\x03\x10V[\x91\x90\x91a\x01`\x81\x84\x03\x12a\n'Wa\t\x7F\x83_\x83\x01a\x08\x93V[\x92a\t\x8D\x81` \x84\x01a\x08\xB6V[\x92a\t\x9B\x82`@\x85\x01a\x01oV[\x92a\t\xA9\x83``\x83\x01a\x01oV[\x92a\t\xB7\x81`\x80\x84\x01a\x08\xB6V[\x92a\t\xC5\x82`\xA0\x85\x01a\x08\x93V[\x92a\t\xD3\x83`\xC0\x83\x01a\x08\x93V[\x92a\t\xE1\x81`\xE0\x84\x01a\x01oV[\x92a\t\xF0\x82a\x01\0\x85\x01a\x08\x93V[\x92a\t\xFF\x83a\x01 \x83\x01a\x01oV[\x92a\x01@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\n\"Wa\n\x1F\x92\x01a\tBV[\x90V[a\x01@V[a\x01<V[4a\ngWa\nQa\n?6`\x04a\teV[\x99\x98\x90\x98\x97\x91\x97\x96\x92\x96\x95\x93\x95a\x19\x13V[a\nYa\x012V[\x80a\nc\x81a\x01\x9CV[\x03\x90\xF3[a\x018V[a\ny`\x03`\x14\x90a\x07~V[\x90V[4a\n\xACWa\n\x8C6`\x04a\x01\xD4V[a\n\xA8a\n\x97a\nlV[a\n\x9Fa\x012V[\x91\x82\x91\x82a\x07\xADV[\x03\x90\xF3[a\x018V[4a\n\xDFWa\n\xC9a\n\xC46`\x04a\x01~V[a\x19\x94V[a\n\xD1a\x012V[\x80a\n\xDB\x81a\x01\x9CV[\x03\x90\xF3[a\x018V[_\x80\xFD[a\n\xF9\x90a\n\xF4a\x19\x9FV[a\x0CHV[V[\x90V[\x90V[a\x0B\x15a\x0B\x10a\x0B\x1A\x92a\n\xFBV[a\n\xFEV[a\x01DV[\x90V[a\x0B&\x90a\x0B\x01V[\x90V[` \x7Faddress\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FNew rollup owner cannot be zero _\x82\x01R\x01RV[a\x0B\x83`'`@\x92a\x05UV[a\x0B\x8C\x81a\x0B)V[\x01\x90V[a\x0B\xA5\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x0BvV[\x90V[\x15a\x0B\xAFWV[a\x0B\xB7a\x012V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x0B\xCD`\x04\x82\x01a\x0B\x90V[\x03\x90\xFD[_\x1B\x90V[\x90a\x0B\xE7`\x01\x80`\xA0\x1B\x03\x91a\x0B\xD1V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0C\x05a\x0C\0a\x0C\n\x92a\x01DV[a\n\xFEV[a\x01DV[\x90V[a\x0C\x16\x90a\x0B\xF1V[\x90V[a\x0C\"\x90a\x0C\rV[\x90V[\x90V[\x90a\x0C=a\x0C8a\x0CD\x92a\x0C\x19V[a\x0C%V[\x82Ta\x0B\xD6V[\x90UV[a\x0Cm\x81a\x0Cfa\x0C`a\x0C[_a\x0B\x1DV[a\x01OV[\x91a\x01OV[\x14\x15a\x0B\xA8V[a\x0Cx\x81`\x08a\x0C(V[a\x0C\xA2\x7F\x88)\xBE\xE4f\x83`\x8D_\xD8\x0E$<\x0F\xAE\x04\xD1)\xCE\x17/p\xDB\x10!\xC1\x12\x80t\xA6\xF4\xD9\x91a\x0C\x19V[\x90a\x0C\xABa\x012V[\x80a\x0C\xB5\x81a\x01\x9CV[\x03\x90\xA2V[a\x0C\xC3\x90a\n\xE8V[V[\x90a\x0C\xD7\x91a\x0C\xD2a\x19\x9FV[a\x0F\x1FV[V[P\x90V[`\x1F` \x91\x01\x04\x90V[\x1B\x90V[\x91\x90`\x08a\r\x06\x91\x02\x91a\r\0_\x19\x84a\x0C\xE7V[\x92a\x0C\xE7V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\r$a\r\x1Fa\r)\x92a\x02\xB6V[a\n\xFEV[a\x02\xB6V[\x90V[\x90V[\x91\x90a\rEa\r@a\rM\x93a\r\x10V[a\r,V[\x90\x83Ta\x0C\xEBV[\x90UV[_\x90V[a\rg\x91a\raa\rQV[\x91a\r/V[V[[\x81\x81\x10a\ruWPPV[\x80a\r\x82_`\x01\x93a\rUV[\x01a\rjV[\x91\x90`\x1F\x81\x11a\r\x98W[PPPV[a\r\xA4a\r\xC9\x93a\x04\x1FV[\x90` a\r\xB0\x84a\x0C\xDDV[\x83\x01\x93\x10a\r\xD1W[a\r\xC2\x90a\x0C\xDDV[\x01\x90a\riV[_\x80\x80a\r\x93V[\x91Pa\r\xC2\x81\x92\x90Pa\r\xB9V[\x90a\r\xEF\x90_\x19\x90`\x08\x02a\x01\xE3V[\x19\x16\x90V[\x81a\r\xFE\x91a\r\xDFV[\x90`\x02\x02\x17\x90V[\x91a\x0E\x11\x90\x82a\x0C\xD9V[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x0E\xD0Wa\x0E5\x82a\x0E/\x85Ta\x03\xECV[\x85a\r\x88V[_\x90`\x1F\x83\x11`\x01\x14a\x0EhW\x91\x80\x91a\x0EW\x93_\x92a\x0E\\W[PPa\r\xF4V[\x90U[V[\x90\x91P\x015_\x80a\x0EPV[`\x1F\x19\x83\x16\x91a\x0Ew\x85a\x04\x1FV[\x92_[\x81\x81\x10a\x0E\xB8WP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x0E\x9EW[PPP\x02\x01\x90Ua\x0EZV[a\x0E\xAE\x91\x015`\x1F\x84\x16\x90a\r\xDFV[\x90U_\x80\x80a\x0E\x92V[\x91\x93` `\x01\x81\x92\x87\x87\x015\x81U\x01\x95\x01\x92\x01a\x0EzV[a\x04\xCBV[\x90a\x0E\xE0\x92\x91a\x0E\x06V[V[\x91\x90a\x0E\xFC\x81a\x0E\xF5\x81a\x0F\x01\x95a\x05UV[\x80\x95a\t\x01V[a\x04\xC1V[\x01\x90V[\x90\x91a\x0F\x1C\x92` \x83\x01\x92_\x81\x85\x03\x91\x01Ra\x0E\xE2V[\x90V[a\x0F,\x81\x83\x90`\ta\x0E\xD5V[\x90\x7F\x024\xA4\xE9\x10\xF2\xB1\xE6\x18\xF2\xC9;\xE3\x16\xEC\x0C\x7F@\xE1\xAF#\xFE3\xF9\xFB\xA2\xC5\xBB8\x8A\x95\xF2\x91a\x0Fca\x0FZa\x012V[\x92\x83\x92\x83a\x0F\x05V[\x03\x90\xA1V[\x90a\x0Fr\x91a\x0C\xC5V[V[a\x0F|a\x19\x9FV[a\x0F\x84a\x0F\x86V[V[a\x0F\x97a\x0F\x92_a\x0B\x1DV[a\x19\xF4V[V[a\x0F\xA1a\x0FtV[V[_\x90V[_\x1C\x90V[a\x0F\xB8a\x0F\xBD\x91a\x0F\xA7V[a\x01\xE7V[\x90V[a\x0F\xCA\x90Ta\x0F\xACV[\x90V[a\x0F\xD5a\x0F\xA3V[Pa\x0F\xDF_a\x0F\xC0V[\x90V[`@\x1C\x90V[a\x0F\xF4a\x0F\xF9\x91a\x0F\xE2V[a\x07`V[\x90V[a\x10\x06\x90Ta\x0F\xE8V[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x10\"a\x10'\x91a\x0F\xA7V[a\x10\tV[\x90V[a\x104\x90Ta\x10\x16V[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x10Xa\x10Sa\x10]\x92a\n\xFBV[a\n\xFEV[a\x107V[\x90V[\x90V[a\x10wa\x10ra\x10|\x92a\x10`V[a\n\xFEV[a\x107V[\x90V[a\x10\x88\x90a\x0C\rV[\x90V[a\x10\x9Fa\x10\x9Aa\x10\xA4\x92a\n\xFBV[a\n\xFEV[a\x02\xB6V[\x90V[\x90a\x10\xBAg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91a\x0B\xD1V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x10\xD8a\x10\xD3a\x10\xDD\x92a\x107V[a\n\xFEV[a\x107V[\x90V[\x90V[\x90a\x10\xF8a\x10\xF3a\x10\xFF\x92a\x10\xC4V[a\x10\xE0V[\x82Ta\x10\xA7V[\x90UV[`@\x1B\x90V[\x90a\x11\x1Dh\xFF\0\0\0\0\0\0\0\0\x91a\x11\x03V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x110\x90a\x07\x9BV[\x90V[\x90V[\x90a\x11Ka\x11Fa\x11R\x92a\x11'V[a\x113V[\x82Ta\x11\tV[\x90UV[a\x11_\x90a\x10cV[\x90RV[\x91\x90a\x11v\x90_` \x85\x01\x94\x01\x90a\x11VV[V[\x97\x94\x91\x99\x96\x93\x90\x98\x95\x92a\x11\x8Aa\x1ASV[\x9A\x8B_\x01a\x11\x97\x90a\x0F\xFCV[\x15a\x11\xA1\x90a\x07\x9BV[\x9A\x8C_\x01a\x11\xAE\x90a\x10*V[\x80_a\x11\xB9\x90a\x10DV[\x90a\x11\xC3\x90a\x107V[\x14\x80a\x12\xE9W[\x90a\x11\xDEa\x11\xD8`\x01a\x10cV[\x91a\x107V[\x14\x80a\x12\xC1W[a\x11\xF0\x90\x91\x15a\x07\x9BV[\x90\x81a\x12\xB0W[Pa\x12\x8DWa\x12#\x9Aa\x12\x16\x8E_a\x12\x0F`\x01a\x10cV[\x91\x01a\x10\xE3V[\x8D\x8Da\x12yW[Pa\x17\xDBV[a\x12+W[PV[a\x128\x90_\x80\x91\x01a\x116V[`\x01a\x12p\x7F\xC7\xF5\x05\xB2\xF3q\xAE!u\xEEI\x13\xF4I\x9E\x1F&3\xA7\xB5\x93c!\xEE\xD1\xCD\xAE\xB6\x11Q\x81\xD2\x91a\x12ga\x012V[\x91\x82\x91\x82a\x11cV[\x03\x90\xA1_a\x12(V[a\x12\x87\x90_`\x01\x91\x01a\x116V[\x8Da\x12\x1DV[a\x12\x95a\x012V[c\xF9.\xE8\xA9`\xE0\x1B\x81R\x80a\x12\xAC`\x04\x82\x01a\x01\x9CV[\x03\x90\xFD[a\x12\xBB\x91P\x15a\x07\x9BV[_a\x11\xF7V[Pa\x11\xF0a\x12\xCE0a\x10\x7FV[;a\x12\xE1a\x12\xDB_a\x10\x8BV[\x91a\x02\xB6V[\x14\x90Pa\x11\xE5V[P\x8Ca\x11\xCAV[_\x7FChain ID cannot be zero\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x13$`\x17` \x92a\x05UV[a\x13-\x81a\x12\xF0V[\x01\x90V[a\x13F\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x13\x17V[\x90V[\x15a\x13PWV[a\x13Xa\x012V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x13n`\x04\x82\x01a\x131V[\x03\x90\xFD[` \x7Fe zero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FArbitrum bridge address cannot b_\x82\x01R\x01RV[a\x13\xCC`&`@\x92a\x05UV[a\x13\xD5\x81a\x13rV[\x01\x90V[a\x13\xEE\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x13\xBFV[\x90V[\x15a\x13\xF8WV[a\x14\0a\x012V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x14\x16`\x04\x82\x01a\x13\xD9V[\x03\x90\xFD[` \x7F zero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FArbitrum inbox address cannot be_\x82\x01R\x01RV[a\x14t`%`@\x92a\x05UV[a\x14}\x81a\x14\x1AV[\x01\x90V[a\x14\x96\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x14gV[\x90V[\x15a\x14\xA0WV[a\x14\xA8a\x012V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x14\xBE`\x04\x82\x01a\x14\x81V[\x03\x90\xFD[` \x7Fot be zero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FSequencing contract address cann_\x82\x01R\x01RV[a\x15\x1C`*`@\x92a\x05UV[a\x15%\x81a\x14\xC2V[\x01\x90V[a\x15>\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x15\x0FV[\x90V[\x15a\x15HWV[a\x15Pa\x012V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x15f`\x04\x82\x01a\x15)V[\x03\x90\xFD[` \x7Fess\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FRollup owner cannot be zero addr_\x82\x01R\x01RV[a\x15\xC4`#`@\x92a\x05UV[a\x15\xCD\x81a\x15jV[\x01\x90V[a\x15\xE6\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x15\xB7V[\x90V[\x15a\x15\xF0WV[a\x15\xF8a\x012V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x16\x0E`\x04\x82\x01a\x15\xD1V[\x03\x90\xFD[\x90a\x16\x1E_\x19\x91a\x0B\xD1V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x16=a\x168a\x16D\x92a\r\x10V[a\r,V[\x82Ta\x16\x12V[\x90UV[\x90a\x16T`\xFF\x91a\x0B\xD1V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x16sa\x16na\x16z\x92a\x11'V[a\x113V[\x82Ta\x16HV[\x90UV[`\x08\x1B\x90V[\x90a\x16\x97a\x01\0`\x01`\xA8\x1B\x03\x91a\x16~V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x16\xB6a\x16\xB1a\x16\xBD\x92a\x0C\x19V[a\x0C%V[\x82Ta\x16\x84V[\x90UV[`\xA0\x1B\x90V[\x90a\x16\xD6`\xFF`\xA0\x1B\x91a\x16\xC1V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x16\xF5a\x16\xF0a\x16\xFC\x92a\x11'V[a\x113V[\x82Ta\x16\xC7V[\x90UV[\x90a\x17\n\x81a\x05QV[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x17\xCAWa\x17.\x82a\x17(\x85Ta\x03\xECV[\x85a\r\x88V[` \x90`\x1F\x83\x11`\x01\x14a\x17bW\x91\x80\x91a\x17Q\x93_\x92a\x17VW[PPa\r\xF4V[\x90U[V[\x90\x91P\x01Q_\x80a\x17JV[`\x1F\x19\x83\x16\x91a\x17q\x85a\x04\x1FV[\x92_[\x81\x81\x10a\x17\xB2WP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x17\x98W[PPP\x02\x01\x90Ua\x17TV[a\x17\xA8\x91\x01Q`\x1F\x84\x16\x90a\r\xDFV[\x90U_\x80\x80a\x17\x8CV[\x91\x93` `\x01\x81\x92\x87\x87\x01Q\x81U\x01\x95\x01\x92\x01a\x17tV[a\x04\xCBV[\x90a\x17\xD9\x91a\x17\0V[V[a\x19\x01\x98\x95a\x18\xDEa\x18\xF3\x96a\x18\xD7\x8B\x97a\x19\x08\x9F\x9E\x9Ca\x18\xEC\x98a\x18\xC9\x8F\x99a\x18\xFA\x9F\x9Aa\x18\xE5\x9Aa\x18\xBBa\x18\xC2\x92a\x18\x9Aa\x18\xD0\x98a\x18/\x85a\x18(a\x18\"_a\x10\x8BV[\x91a\x02\xB6V[\x14\x15a\x13IV[a\x18T\x89a\x18Ma\x18Ga\x18B_a\x0B\x1DV[a\x01OV[\x91a\x01OV[\x14\x15a\x13\xF1V[a\x18y\x8Ba\x18ra\x18la\x18g_a\x0B\x1DV[a\x01OV[\x91a\x01OV[\x14\x15a\x14\x99V[a\x18\x93a\x18\x8Da\x18\x88_a\x0B\x1DV[a\x01OV[\x91a\x01OV[\x14\x15a\x15AV[a\x18\xB4a\x18\xAEa\x18\xA9_a\x0B\x1DV[a\x01OV[\x91a\x01OV[\x14\x15a\x15\xE9V[`\x01a\x16(V[`\x02a\x16^V[`\x02a\x16\xA1V[`\x03a\x0C(V[`\x03a\x16\xE0V[`\x04a\x16(V[`\x05a\x16(V[`\x06a\x0C(V[`\x07a\x16(V[`\x08a\x0C(V[`\ta\x17\xCFV[a\x19\x113a\x19\xF4V[V[\x90a\x19&\x9A\x99\x98\x97\x96\x95\x94\x93\x92\x91a\x11xV[V[a\x199\x90a\x194a\x19\x9FV[a\x19;V[V[\x80a\x19Va\x19Pa\x19K_a\x0B\x1DV[a\x01OV[\x91a\x01OV[\x14a\x19fWa\x19d\x90a\x19\xF4V[V[a\x19\x90a\x19r_a\x0B\x1DV[a\x19za\x012V[\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x024V[\x03\x90\xFD[a\x19\x9D\x90a\x19(V[V[a\x19\xA7a\x0F\xCDV[a\x19\xC0a\x19\xBAa\x19\xB5a\x1AwV[a\x01OV[\x91a\x01OV[\x03a\x19\xC7WV[a\x19\xF0a\x19\xD2a\x1AwV[a\x19\xDAa\x012V[\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x024V[\x03\x90\xFD[a\x19\xFD_a\x0F\xC0V[a\x1A\x07\x82_a\x0C(V[\x90a\x1A;a\x1A5\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x0C\x19V[\x91a\x0C\x19V[\x91a\x1ADa\x012V[\x80a\x1AN\x81a\x01\x9CV[\x03\x90\xA3V[\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0\x90V[a\x1A\x7Fa\x0F\xA3V[P3\x90V\xFE\xA2dipfsX\"\x12 _\xE4@}G\xA3\xE4\xAD\xAA\"\xEC\xD6E\x94:\x0CP\x98\xBB\xBD\xB9-@\xD6\xA6BY\xC6\x15{/\xA2dsolcC\0\x08\x19\x003",
    );
    /**Custom error with signature `InvalidInitialization()` and selector `0xf92ee8a9`.
```solidity
error InvalidInitialization();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidInitialization {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidInitialization> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidInitialization) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidInitialization {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidInitialization {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidInitialization()";
            const SELECTOR: [u8; 4] = [249u8, 46u8, 232u8, 169u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `NotInitializing()` and selector `0xd7e6bcf8`.
```solidity
error NotInitializing();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotInitializing {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotInitializing> for UnderlyingRustTuple<'_> {
            fn from(value: NotInitializing) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotInitializing {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotInitializing {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotInitializing()";
            const SELECTOR: [u8; 4] = [215u8, 230u8, 188u8, 248u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `OwnableInvalidOwner(address)` and selector `0x1e4fbdf7`.
```solidity
error OwnableInvalidOwner(address owner);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableInvalidOwner {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableInvalidOwner> for UnderlyingRustTuple<'_> {
            fn from(value: OwnableInvalidOwner) -> Self {
                (value.owner,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for OwnableInvalidOwner {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { owner: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableInvalidOwner {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableInvalidOwner(address)";
            const SELECTOR: [u8; 4] = [30u8, 79u8, 189u8, 247u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `OwnableUnauthorizedAccount(address)` and selector `0x118cdaa7`.
```solidity
error OwnableUnauthorizedAccount(address account);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableUnauthorizedAccount {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: OwnableUnauthorizedAccount) -> Self {
                (value.account,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for OwnableUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { account: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableUnauthorizedAccount(address)";
            const SELECTOR: [u8; 4] = [17u8, 140u8, 218u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
        }
    };
    /**Event with signature `DefaultSequencingChainRpcUrlUpdated(string)` and selector `0x0234a4e910f2b1e618f2c93be316ec0c7f40e1af23fe33f9fba2c5bb388a95f2`.
```solidity
event DefaultSequencingChainRpcUrlUpdated(string newRpcUrl);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct DefaultSequencingChainRpcUrlUpdated {
        #[allow(missing_docs)]
        pub newRpcUrl: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for DefaultSequencingChainRpcUrlUpdated {
            type DataTuple<'a> = (alloy::sol_types::sol_data::String,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "DefaultSequencingChainRpcUrlUpdated(string)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                2u8,
                52u8,
                164u8,
                233u8,
                16u8,
                242u8,
                177u8,
                230u8,
                24u8,
                242u8,
                201u8,
                59u8,
                227u8,
                22u8,
                236u8,
                12u8,
                127u8,
                64u8,
                225u8,
                175u8,
                35u8,
                254u8,
                51u8,
                249u8,
                251u8,
                162u8,
                197u8,
                187u8,
                56u8,
                138u8,
                149u8,
                242u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { newRpcUrl: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.newRpcUrl,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData
        for DefaultSequencingChainRpcUrlUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&DefaultSequencingChainRpcUrlUpdated>
        for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &DefaultSequencingChainRpcUrlUpdated,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `Initialized(uint64)` and selector `0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2`.
```solidity
event Initialized(uint64 version);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Initialized {
        #[allow(missing_docs)]
        pub version: u64,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Initialized {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "Initialized(uint64)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                199u8,
                245u8,
                5u8,
                178u8,
                243u8,
                113u8,
                174u8,
                33u8,
                117u8,
                238u8,
                73u8,
                19u8,
                244u8,
                73u8,
                158u8,
                31u8,
                38u8,
                51u8,
                167u8,
                181u8,
                147u8,
                99u8,
                33u8,
                238u8,
                209u8,
                205u8,
                174u8,
                182u8,
                17u8,
                81u8,
                129u8,
                210u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { version: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.version),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Initialized {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Initialized> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Initialized) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `OwnershipTransferred(address,address)` and selector `0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0`.
```solidity
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct OwnershipTransferred {
        #[allow(missing_docs)]
        pub previousOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OwnershipTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OwnershipTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousOwner: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousOwner.clone(),
                    self.newOwner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousOwner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OwnershipTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OwnershipTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &OwnershipTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RollupOwnerUpdated(address)` and selector `0x8829bee46683608d5fd80e243c0fae04d129ce172f70db1021c1128074a6f4d9`.
```solidity
event RollupOwnerUpdated(address indexed newRollupOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RollupOwnerUpdated {
        #[allow(missing_docs)]
        pub newRollupOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RollupOwnerUpdated {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RollupOwnerUpdated(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                136u8,
                41u8,
                190u8,
                228u8,
                102u8,
                131u8,
                96u8,
                141u8,
                95u8,
                216u8,
                14u8,
                36u8,
                60u8,
                15u8,
                174u8,
                4u8,
                209u8,
                41u8,
                206u8,
                23u8,
                47u8,
                112u8,
                219u8,
                16u8,
                33u8,
                193u8,
                18u8,
                128u8,
                116u8,
                166u8,
                244u8,
                217u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { newRollupOwner: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.newRollupOwner.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newRollupOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RollupOwnerUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RollupOwnerUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RollupOwnerUpdated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {}
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Function with signature `ARBITRUM_BRIDGE_ADDRESS()` and selector `0x6edd6c09`.
```solidity
function ARBITRUM_BRIDGE_ADDRESS() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ARBITRUM_BRIDGE_ADDRESSCall {}
    ///Container type for the return parameters of the [`ARBITRUM_BRIDGE_ADDRESS()`](ARBITRUM_BRIDGE_ADDRESSCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ARBITRUM_BRIDGE_ADDRESSReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ARBITRUM_BRIDGE_ADDRESSCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: ARBITRUM_BRIDGE_ADDRESSCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ARBITRUM_BRIDGE_ADDRESSCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ARBITRUM_BRIDGE_ADDRESSReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: ARBITRUM_BRIDGE_ADDRESSReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ARBITRUM_BRIDGE_ADDRESSReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ARBITRUM_BRIDGE_ADDRESSCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ARBITRUM_BRIDGE_ADDRESSReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ARBITRUM_BRIDGE_ADDRESS()";
            const SELECTOR: [u8; 4] = [110u8, 221u8, 108u8, 9u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `ARBITRUM_IGNORE_DELAYED_MESSAGES()` and selector `0xe79388e6`.
```solidity
function ARBITRUM_IGNORE_DELAYED_MESSAGES() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ARBITRUM_IGNORE_DELAYED_MESSAGESCall {}
    ///Container type for the return parameters of the [`ARBITRUM_IGNORE_DELAYED_MESSAGES()`](ARBITRUM_IGNORE_DELAYED_MESSAGESCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ARBITRUM_IGNORE_DELAYED_MESSAGESReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ARBITRUM_IGNORE_DELAYED_MESSAGESCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: ARBITRUM_IGNORE_DELAYED_MESSAGESCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ARBITRUM_IGNORE_DELAYED_MESSAGESCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ARBITRUM_IGNORE_DELAYED_MESSAGESReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: ARBITRUM_IGNORE_DELAYED_MESSAGESReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ARBITRUM_IGNORE_DELAYED_MESSAGESReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ARBITRUM_IGNORE_DELAYED_MESSAGESCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ARBITRUM_IGNORE_DELAYED_MESSAGESReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ARBITRUM_IGNORE_DELAYED_MESSAGES()";
            const SELECTOR: [u8; 4] = [231u8, 147u8, 136u8, 230u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `ARBITRUM_INBOX_ADDRESS()` and selector `0xaa6a43d8`.
```solidity
function ARBITRUM_INBOX_ADDRESS() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ARBITRUM_INBOX_ADDRESSCall {}
    ///Container type for the return parameters of the [`ARBITRUM_INBOX_ADDRESS()`](ARBITRUM_INBOX_ADDRESSCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ARBITRUM_INBOX_ADDRESSReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ARBITRUM_INBOX_ADDRESSCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: ARBITRUM_INBOX_ADDRESSCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ARBITRUM_INBOX_ADDRESSCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ARBITRUM_INBOX_ADDRESSReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: ARBITRUM_INBOX_ADDRESSReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ARBITRUM_INBOX_ADDRESSReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ARBITRUM_INBOX_ADDRESSCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ARBITRUM_INBOX_ADDRESSReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ARBITRUM_INBOX_ADDRESS()";
            const SELECTOR: [u8; 4] = [170u8, 106u8, 67u8, 216u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `CHAIN_ID()` and selector `0x85e1f4d0`.
```solidity
function CHAIN_ID() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CHAIN_IDCall {}
    ///Container type for the return parameters of the [`CHAIN_ID()`](CHAIN_IDCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CHAIN_IDReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<CHAIN_IDCall> for UnderlyingRustTuple<'_> {
                fn from(value: CHAIN_IDCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for CHAIN_IDCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<CHAIN_IDReturn> for UnderlyingRustTuple<'_> {
                fn from(value: CHAIN_IDReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for CHAIN_IDReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for CHAIN_IDCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = CHAIN_IDReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "CHAIN_ID()";
            const SELECTOR: [u8; 4] = [133u8, 225u8, 244u8, 208u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `DEFAULT_SEQUENCING_CHAIN_RPC_URL()` and selector `0x66a1d108`.
```solidity
function DEFAULT_SEQUENCING_CHAIN_RPC_URL() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_SEQUENCING_CHAIN_RPC_URLCall {}
    ///Container type for the return parameters of the [`DEFAULT_SEQUENCING_CHAIN_RPC_URL()`](DEFAULT_SEQUENCING_CHAIN_RPC_URLCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_SEQUENCING_CHAIN_RPC_URLReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_SEQUENCING_CHAIN_RPC_URLCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_SEQUENCING_CHAIN_RPC_URLCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_SEQUENCING_CHAIN_RPC_URLCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_SEQUENCING_CHAIN_RPC_URLReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_SEQUENCING_CHAIN_RPC_URLReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_SEQUENCING_CHAIN_RPC_URLReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for DEFAULT_SEQUENCING_CHAIN_RPC_URLCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = DEFAULT_SEQUENCING_CHAIN_RPC_URLReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "DEFAULT_SEQUENCING_CHAIN_RPC_URL()";
            const SELECTOR: [u8; 4] = [102u8, 161u8, 209u8, 8u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `MINE_EMPTY_BLOCKS()` and selector `0xb97aba3e`.
```solidity
function MINE_EMPTY_BLOCKS() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MINE_EMPTY_BLOCKSCall {}
    ///Container type for the return parameters of the [`MINE_EMPTY_BLOCKS()`](MINE_EMPTY_BLOCKSCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MINE_EMPTY_BLOCKSReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<MINE_EMPTY_BLOCKSCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: MINE_EMPTY_BLOCKSCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for MINE_EMPTY_BLOCKSCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<MINE_EMPTY_BLOCKSReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: MINE_EMPTY_BLOCKSReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for MINE_EMPTY_BLOCKSReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for MINE_EMPTY_BLOCKSCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = MINE_EMPTY_BLOCKSReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "MINE_EMPTY_BLOCKS()";
            const SELECTOR: [u8; 4] = [185u8, 122u8, 186u8, 62u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `ROLLUP_OWNER()` and selector `0x41fc712d`.
```solidity
function ROLLUP_OWNER() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ROLLUP_OWNERCall {}
    ///Container type for the return parameters of the [`ROLLUP_OWNER()`](ROLLUP_OWNERCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ROLLUP_OWNERReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ROLLUP_OWNERCall> for UnderlyingRustTuple<'_> {
                fn from(value: ROLLUP_OWNERCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ROLLUP_OWNERCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ROLLUP_OWNERReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ROLLUP_OWNERReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ROLLUP_OWNERReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ROLLUP_OWNERCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ROLLUP_OWNERReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ROLLUP_OWNER()";
            const SELECTOR: [u8; 4] = [65u8, 252u8, 113u8, 45u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `SEQUENCING_CONTRACT_ADDRESS()` and selector `0xbf6db6f8`.
```solidity
function SEQUENCING_CONTRACT_ADDRESS() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SEQUENCING_CONTRACT_ADDRESSCall {}
    ///Container type for the return parameters of the [`SEQUENCING_CONTRACT_ADDRESS()`](SEQUENCING_CONTRACT_ADDRESSCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SEQUENCING_CONTRACT_ADDRESSReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SEQUENCING_CONTRACT_ADDRESSCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: SEQUENCING_CONTRACT_ADDRESSCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SEQUENCING_CONTRACT_ADDRESSCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SEQUENCING_CONTRACT_ADDRESSReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: SEQUENCING_CONTRACT_ADDRESSReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SEQUENCING_CONTRACT_ADDRESSReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for SEQUENCING_CONTRACT_ADDRESSCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = SEQUENCING_CONTRACT_ADDRESSReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SEQUENCING_CONTRACT_ADDRESS()";
            const SELECTOR: [u8; 4] = [191u8, 109u8, 182u8, 248u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `SEQUENCING_START_BLOCK()` and selector `0xa3c6e1e7`.
```solidity
function SEQUENCING_START_BLOCK() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SEQUENCING_START_BLOCKCall {}
    ///Container type for the return parameters of the [`SEQUENCING_START_BLOCK()`](SEQUENCING_START_BLOCKCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SEQUENCING_START_BLOCKReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SEQUENCING_START_BLOCKCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: SEQUENCING_START_BLOCKCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SEQUENCING_START_BLOCKCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SEQUENCING_START_BLOCKReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: SEQUENCING_START_BLOCKReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SEQUENCING_START_BLOCKReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for SEQUENCING_START_BLOCKCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = SEQUENCING_START_BLOCKReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SEQUENCING_START_BLOCK()";
            const SELECTOR: [u8; 4] = [163u8, 198u8, 225u8, 231u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `SETTLEMENT_DELAY()` and selector `0x57d1ba25`.
```solidity
function SETTLEMENT_DELAY() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SETTLEMENT_DELAYCall {}
    ///Container type for the return parameters of the [`SETTLEMENT_DELAY()`](SETTLEMENT_DELAYCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SETTLEMENT_DELAYReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SETTLEMENT_DELAYCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: SETTLEMENT_DELAYCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SETTLEMENT_DELAYCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SETTLEMENT_DELAYReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: SETTLEMENT_DELAYReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SETTLEMENT_DELAYReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for SETTLEMENT_DELAYCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = SETTLEMENT_DELAYReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SETTLEMENT_DELAY()";
            const SELECTOR: [u8; 4] = [87u8, 209u8, 186u8, 37u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `SETTLEMENT_START_BLOCK()` and selector `0xd1f4737c`.
```solidity
function SETTLEMENT_START_BLOCK() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SETTLEMENT_START_BLOCKCall {}
    ///Container type for the return parameters of the [`SETTLEMENT_START_BLOCK()`](SETTLEMENT_START_BLOCKCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SETTLEMENT_START_BLOCKReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SETTLEMENT_START_BLOCKCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: SETTLEMENT_START_BLOCKCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SETTLEMENT_START_BLOCKCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SETTLEMENT_START_BLOCKReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: SETTLEMENT_START_BLOCKReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SETTLEMENT_START_BLOCKReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for SETTLEMENT_START_BLOCKCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = SETTLEMENT_START_BLOCKReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SETTLEMENT_START_BLOCK()";
            const SELECTOR: [u8; 4] = [209u8, 244u8, 115u8, 124u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `initialize(uint256,bool,address,address,bool,uint256,uint256,address,uint256,address,string)` and selector `0xe1541ad8`.
```solidity
function initialize(uint256 chainId, bool mineEmptyBlocks, address arbitrumBridgeAddress, address arbitrumInboxAddress, bool arbitrumIgnoreDelayedMessages, uint256 settlementDelay, uint256 settlementStartBlock, address sequencingContractAddress, uint256 sequencingStartBlock, address rollupOwner, string memory sequencingChainRpcUrl) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeCall {
        #[allow(missing_docs)]
        pub chainId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub mineEmptyBlocks: bool,
        #[allow(missing_docs)]
        pub arbitrumBridgeAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub arbitrumInboxAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub arbitrumIgnoreDelayedMessages: bool,
        #[allow(missing_docs)]
        pub settlementDelay: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub settlementStartBlock: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub sequencingContractAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sequencingStartBlock: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub rollupOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sequencingChainRpcUrl: alloy::sol_types::private::String,
    }
    ///Container type for the return parameters of the [`initialize(uint256,bool,address,address,bool,uint256,uint256,address,uint256,address,string)`](initializeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::String,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                bool,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                bool,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::String,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeCall> for UnderlyingRustTuple<'_> {
                fn from(value: initializeCall) -> Self {
                    (
                        value.chainId,
                        value.mineEmptyBlocks,
                        value.arbitrumBridgeAddress,
                        value.arbitrumInboxAddress,
                        value.arbitrumIgnoreDelayedMessages,
                        value.settlementDelay,
                        value.settlementStartBlock,
                        value.sequencingContractAddress,
                        value.sequencingStartBlock,
                        value.rollupOwner,
                        value.sequencingChainRpcUrl,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        chainId: tuple.0,
                        mineEmptyBlocks: tuple.1,
                        arbitrumBridgeAddress: tuple.2,
                        arbitrumInboxAddress: tuple.3,
                        arbitrumIgnoreDelayedMessages: tuple.4,
                        settlementDelay: tuple.5,
                        settlementStartBlock: tuple.6,
                        sequencingContractAddress: tuple.7,
                        sequencingStartBlock: tuple.8,
                        rollupOwner: tuple.9,
                        sequencingChainRpcUrl: tuple.10,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: initializeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for initializeCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::String,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = initializeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "initialize(uint256,bool,address,address,bool,uint256,uint256,address,uint256,address,string)";
            const SELECTOR: [u8; 4] = [225u8, 84u8, 26u8, 216u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.chainId),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.mineEmptyBlocks,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.arbitrumBridgeAddress,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.arbitrumInboxAddress,
                    ),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.arbitrumIgnoreDelayedMessages,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.settlementDelay),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.settlementStartBlock),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.sequencingContractAddress,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.sequencingStartBlock),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.rollupOwner,
                    ),
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.sequencingChainRpcUrl,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `owner()` and selector `0x8da5cb5b`.
```solidity
function owner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerCall {}
    ///Container type for the return parameters of the [`owner()`](ownerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "owner()";
            const SELECTOR: [u8; 4] = [141u8, 165u8, 203u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `renounceOwnership()` and selector `0x715018a6`.
```solidity
function renounceOwnership() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipCall {}
    ///Container type for the return parameters of the [`renounceOwnership()`](renounceOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceOwnershipCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceOwnership()";
            const SELECTOR: [u8; 4] = [113u8, 80u8, 24u8, 166u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferOwnership(address)` and selector `0xf2fde38b`.
```solidity
function transferOwnership(address newOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipCall {
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferOwnership(address)`](transferOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipCall) -> Self {
                    (value.newOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferOwnershipCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferOwnership(address)";
            const SELECTOR: [u8; 4] = [242u8, 253u8, 227u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newOwner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `updateDefaultSequencingChainRpcUrl(string)` and selector `0x62c73caa`.
```solidity
function updateDefaultSequencingChainRpcUrl(string memory newRpcUrl) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateDefaultSequencingChainRpcUrlCall {
        #[allow(missing_docs)]
        pub newRpcUrl: alloy::sol_types::private::String,
    }
    ///Container type for the return parameters of the [`updateDefaultSequencingChainRpcUrl(string)`](updateDefaultSequencingChainRpcUrlCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateDefaultSequencingChainRpcUrlReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateDefaultSequencingChainRpcUrlCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateDefaultSequencingChainRpcUrlCall) -> Self {
                    (value.newRpcUrl,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateDefaultSequencingChainRpcUrlCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newRpcUrl: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateDefaultSequencingChainRpcUrlReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateDefaultSequencingChainRpcUrlReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateDefaultSequencingChainRpcUrlReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for updateDefaultSequencingChainRpcUrlCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::String,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = updateDefaultSequencingChainRpcUrlReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "updateDefaultSequencingChainRpcUrl(string)";
            const SELECTOR: [u8; 4] = [98u8, 199u8, 60u8, 170u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.newRpcUrl,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `updateRollupOwner(address)` and selector `0x2a84b0f0`.
```solidity
function updateRollupOwner(address newRollupOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateRollupOwnerCall {
        #[allow(missing_docs)]
        pub newRollupOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`updateRollupOwner(address)`](updateRollupOwnerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateRollupOwnerReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateRollupOwnerCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateRollupOwnerCall) -> Self {
                    (value.newRollupOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateRollupOwnerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newRollupOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateRollupOwnerReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateRollupOwnerReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateRollupOwnerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for updateRollupOwnerCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = updateRollupOwnerReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "updateRollupOwner(address)";
            const SELECTOR: [u8; 4] = [42u8, 132u8, 176u8, 240u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newRollupOwner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`ArbChainConfig`](self) function calls.
    pub enum ArbChainConfigCalls {
        #[allow(missing_docs)]
        ARBITRUM_BRIDGE_ADDRESS(ARBITRUM_BRIDGE_ADDRESSCall),
        #[allow(missing_docs)]
        ARBITRUM_IGNORE_DELAYED_MESSAGES(ARBITRUM_IGNORE_DELAYED_MESSAGESCall),
        #[allow(missing_docs)]
        ARBITRUM_INBOX_ADDRESS(ARBITRUM_INBOX_ADDRESSCall),
        #[allow(missing_docs)]
        CHAIN_ID(CHAIN_IDCall),
        #[allow(missing_docs)]
        DEFAULT_SEQUENCING_CHAIN_RPC_URL(DEFAULT_SEQUENCING_CHAIN_RPC_URLCall),
        #[allow(missing_docs)]
        MINE_EMPTY_BLOCKS(MINE_EMPTY_BLOCKSCall),
        #[allow(missing_docs)]
        ROLLUP_OWNER(ROLLUP_OWNERCall),
        #[allow(missing_docs)]
        SEQUENCING_CONTRACT_ADDRESS(SEQUENCING_CONTRACT_ADDRESSCall),
        #[allow(missing_docs)]
        SEQUENCING_START_BLOCK(SEQUENCING_START_BLOCKCall),
        #[allow(missing_docs)]
        SETTLEMENT_DELAY(SETTLEMENT_DELAYCall),
        #[allow(missing_docs)]
        SETTLEMENT_START_BLOCK(SETTLEMENT_START_BLOCKCall),
        #[allow(missing_docs)]
        initialize(initializeCall),
        #[allow(missing_docs)]
        owner(ownerCall),
        #[allow(missing_docs)]
        renounceOwnership(renounceOwnershipCall),
        #[allow(missing_docs)]
        transferOwnership(transferOwnershipCall),
        #[allow(missing_docs)]
        updateDefaultSequencingChainRpcUrl(updateDefaultSequencingChainRpcUrlCall),
        #[allow(missing_docs)]
        updateRollupOwner(updateRollupOwnerCall),
    }
    #[automatically_derived]
    impl ArbChainConfigCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [42u8, 132u8, 176u8, 240u8],
            [65u8, 252u8, 113u8, 45u8],
            [87u8, 209u8, 186u8, 37u8],
            [98u8, 199u8, 60u8, 170u8],
            [102u8, 161u8, 209u8, 8u8],
            [110u8, 221u8, 108u8, 9u8],
            [113u8, 80u8, 24u8, 166u8],
            [133u8, 225u8, 244u8, 208u8],
            [141u8, 165u8, 203u8, 91u8],
            [163u8, 198u8, 225u8, 231u8],
            [170u8, 106u8, 67u8, 216u8],
            [185u8, 122u8, 186u8, 62u8],
            [191u8, 109u8, 182u8, 248u8],
            [209u8, 244u8, 115u8, 124u8],
            [225u8, 84u8, 26u8, 216u8],
            [231u8, 147u8, 136u8, 230u8],
            [242u8, 253u8, 227u8, 139u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ArbChainConfigCalls {
        const NAME: &'static str = "ArbChainConfigCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 17usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::ARBITRUM_BRIDGE_ADDRESS(_) => {
                    <ARBITRUM_BRIDGE_ADDRESSCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::ARBITRUM_IGNORE_DELAYED_MESSAGES(_) => {
                    <ARBITRUM_IGNORE_DELAYED_MESSAGESCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::ARBITRUM_INBOX_ADDRESS(_) => {
                    <ARBITRUM_INBOX_ADDRESSCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::CHAIN_ID(_) => <CHAIN_IDCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::DEFAULT_SEQUENCING_CHAIN_RPC_URL(_) => {
                    <DEFAULT_SEQUENCING_CHAIN_RPC_URLCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::MINE_EMPTY_BLOCKS(_) => {
                    <MINE_EMPTY_BLOCKSCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::ROLLUP_OWNER(_) => {
                    <ROLLUP_OWNERCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::SEQUENCING_CONTRACT_ADDRESS(_) => {
                    <SEQUENCING_CONTRACT_ADDRESSCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::SEQUENCING_START_BLOCK(_) => {
                    <SEQUENCING_START_BLOCKCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::SETTLEMENT_DELAY(_) => {
                    <SETTLEMENT_DELAYCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::SETTLEMENT_START_BLOCK(_) => {
                    <SETTLEMENT_START_BLOCKCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::initialize(_) => {
                    <initializeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::owner(_) => <ownerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::renounceOwnership(_) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferOwnership(_) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::updateDefaultSequencingChainRpcUrl(_) => {
                    <updateDefaultSequencingChainRpcUrlCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::updateRollupOwner(_) => {
                    <updateRollupOwnerCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<ArbChainConfigCalls>] = &[
                {
                    fn updateRollupOwner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <updateRollupOwnerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::updateRollupOwner)
                    }
                    updateRollupOwner
                },
                {
                    fn ROLLUP_OWNER(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <ROLLUP_OWNERCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::ROLLUP_OWNER)
                    }
                    ROLLUP_OWNER
                },
                {
                    fn SETTLEMENT_DELAY(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <SETTLEMENT_DELAYCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::SETTLEMENT_DELAY)
                    }
                    SETTLEMENT_DELAY
                },
                {
                    fn updateDefaultSequencingChainRpcUrl(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <updateDefaultSequencingChainRpcUrlCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::updateDefaultSequencingChainRpcUrl)
                    }
                    updateDefaultSequencingChainRpcUrl
                },
                {
                    fn DEFAULT_SEQUENCING_CHAIN_RPC_URL(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <DEFAULT_SEQUENCING_CHAIN_RPC_URLCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::DEFAULT_SEQUENCING_CHAIN_RPC_URL)
                    }
                    DEFAULT_SEQUENCING_CHAIN_RPC_URL
                },
                {
                    fn ARBITRUM_BRIDGE_ADDRESS(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <ARBITRUM_BRIDGE_ADDRESSCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::ARBITRUM_BRIDGE_ADDRESS)
                    }
                    ARBITRUM_BRIDGE_ADDRESS
                },
                {
                    fn renounceOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::renounceOwnership)
                    }
                    renounceOwnership
                },
                {
                    fn CHAIN_ID(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <CHAIN_IDCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::CHAIN_ID)
                    }
                    CHAIN_ID
                },
                {
                    fn owner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::owner)
                    }
                    owner
                },
                {
                    fn SEQUENCING_START_BLOCK(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <SEQUENCING_START_BLOCKCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::SEQUENCING_START_BLOCK)
                    }
                    SEQUENCING_START_BLOCK
                },
                {
                    fn ARBITRUM_INBOX_ADDRESS(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <ARBITRUM_INBOX_ADDRESSCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::ARBITRUM_INBOX_ADDRESS)
                    }
                    ARBITRUM_INBOX_ADDRESS
                },
                {
                    fn MINE_EMPTY_BLOCKS(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <MINE_EMPTY_BLOCKSCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::MINE_EMPTY_BLOCKS)
                    }
                    MINE_EMPTY_BLOCKS
                },
                {
                    fn SEQUENCING_CONTRACT_ADDRESS(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <SEQUENCING_CONTRACT_ADDRESSCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::SEQUENCING_CONTRACT_ADDRESS)
                    }
                    SEQUENCING_CONTRACT_ADDRESS
                },
                {
                    fn SETTLEMENT_START_BLOCK(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <SETTLEMENT_START_BLOCKCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::SETTLEMENT_START_BLOCK)
                    }
                    SETTLEMENT_START_BLOCK
                },
                {
                    fn initialize(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <initializeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::initialize)
                    }
                    initialize
                },
                {
                    fn ARBITRUM_IGNORE_DELAYED_MESSAGES(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <ARBITRUM_IGNORE_DELAYED_MESSAGESCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::ARBITRUM_IGNORE_DELAYED_MESSAGES)
                    }
                    ARBITRUM_IGNORE_DELAYED_MESSAGES
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigCalls> {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigCalls::transferOwnership)
                    }
                    transferOwnership
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::ARBITRUM_BRIDGE_ADDRESS(inner) => {
                    <ARBITRUM_BRIDGE_ADDRESSCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ARBITRUM_IGNORE_DELAYED_MESSAGES(inner) => {
                    <ARBITRUM_IGNORE_DELAYED_MESSAGESCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ARBITRUM_INBOX_ADDRESS(inner) => {
                    <ARBITRUM_INBOX_ADDRESSCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::CHAIN_ID(inner) => {
                    <CHAIN_IDCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::DEFAULT_SEQUENCING_CHAIN_RPC_URL(inner) => {
                    <DEFAULT_SEQUENCING_CHAIN_RPC_URLCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::MINE_EMPTY_BLOCKS(inner) => {
                    <MINE_EMPTY_BLOCKSCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ROLLUP_OWNER(inner) => {
                    <ROLLUP_OWNERCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SEQUENCING_CONTRACT_ADDRESS(inner) => {
                    <SEQUENCING_CONTRACT_ADDRESSCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SEQUENCING_START_BLOCK(inner) => {
                    <SEQUENCING_START_BLOCKCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SETTLEMENT_DELAY(inner) => {
                    <SETTLEMENT_DELAYCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SETTLEMENT_START_BLOCK(inner) => {
                    <SETTLEMENT_START_BLOCKCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::updateDefaultSequencingChainRpcUrl(inner) => {
                    <updateDefaultSequencingChainRpcUrlCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::updateRollupOwner(inner) => {
                    <updateRollupOwnerCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::ARBITRUM_BRIDGE_ADDRESS(inner) => {
                    <ARBITRUM_BRIDGE_ADDRESSCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ARBITRUM_IGNORE_DELAYED_MESSAGES(inner) => {
                    <ARBITRUM_IGNORE_DELAYED_MESSAGESCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ARBITRUM_INBOX_ADDRESS(inner) => {
                    <ARBITRUM_INBOX_ADDRESSCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::CHAIN_ID(inner) => {
                    <CHAIN_IDCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::DEFAULT_SEQUENCING_CHAIN_RPC_URL(inner) => {
                    <DEFAULT_SEQUENCING_CHAIN_RPC_URLCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::MINE_EMPTY_BLOCKS(inner) => {
                    <MINE_EMPTY_BLOCKSCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ROLLUP_OWNER(inner) => {
                    <ROLLUP_OWNERCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SEQUENCING_CONTRACT_ADDRESS(inner) => {
                    <SEQUENCING_CONTRACT_ADDRESSCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SEQUENCING_START_BLOCK(inner) => {
                    <SEQUENCING_START_BLOCKCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SETTLEMENT_DELAY(inner) => {
                    <SETTLEMENT_DELAYCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SETTLEMENT_START_BLOCK(inner) => {
                    <SETTLEMENT_START_BLOCKCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::updateDefaultSequencingChainRpcUrl(inner) => {
                    <updateDefaultSequencingChainRpcUrlCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::updateRollupOwner(inner) => {
                    <updateRollupOwnerCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`ArbChainConfig`](self) custom errors.
    pub enum ArbChainConfigErrors {
        #[allow(missing_docs)]
        InvalidInitialization(InvalidInitialization),
        #[allow(missing_docs)]
        NotInitializing(NotInitializing),
        #[allow(missing_docs)]
        OwnableInvalidOwner(OwnableInvalidOwner),
        #[allow(missing_docs)]
        OwnableUnauthorizedAccount(OwnableUnauthorizedAccount),
    }
    #[automatically_derived]
    impl ArbChainConfigErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [17u8, 140u8, 218u8, 167u8],
            [30u8, 79u8, 189u8, 247u8],
            [215u8, 230u8, 188u8, 248u8],
            [249u8, 46u8, 232u8, 169u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ArbChainConfigErrors {
        const NAME: &'static str = "ArbChainConfigErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 4usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::InvalidInitialization(_) => {
                    <InvalidInitialization as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotInitializing(_) => {
                    <NotInitializing as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableInvalidOwner(_) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableUnauthorizedAccount(_) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<ArbChainConfigErrors>] = &[
                {
                    fn OwnableUnauthorizedAccount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigErrors> {
                        <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigErrors::OwnableUnauthorizedAccount)
                    }
                    OwnableUnauthorizedAccount
                },
                {
                    fn OwnableInvalidOwner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigErrors> {
                        <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigErrors::OwnableInvalidOwner)
                    }
                    OwnableInvalidOwner
                },
                {
                    fn NotInitializing(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigErrors> {
                        <NotInitializing as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigErrors::NotInitializing)
                    }
                    NotInitializing
                },
                {
                    fn InvalidInitialization(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbChainConfigErrors> {
                        <InvalidInitialization as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbChainConfigErrors::InvalidInitialization)
                    }
                    InvalidInitialization
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::InvalidInitialization(inner) => {
                    <InvalidInitialization as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotInitializing(inner) => {
                    <NotInitializing as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::InvalidInitialization(inner) => {
                    <InvalidInitialization as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotInitializing(inner) => {
                    <NotInitializing as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`ArbChainConfig`](self) events.
    pub enum ArbChainConfigEvents {
        #[allow(missing_docs)]
        DefaultSequencingChainRpcUrlUpdated(DefaultSequencingChainRpcUrlUpdated),
        #[allow(missing_docs)]
        Initialized(Initialized),
        #[allow(missing_docs)]
        OwnershipTransferred(OwnershipTransferred),
        #[allow(missing_docs)]
        RollupOwnerUpdated(RollupOwnerUpdated),
    }
    #[automatically_derived]
    impl ArbChainConfigEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                2u8,
                52u8,
                164u8,
                233u8,
                16u8,
                242u8,
                177u8,
                230u8,
                24u8,
                242u8,
                201u8,
                59u8,
                227u8,
                22u8,
                236u8,
                12u8,
                127u8,
                64u8,
                225u8,
                175u8,
                35u8,
                254u8,
                51u8,
                249u8,
                251u8,
                162u8,
                197u8,
                187u8,
                56u8,
                138u8,
                149u8,
                242u8,
            ],
            [
                136u8,
                41u8,
                190u8,
                228u8,
                102u8,
                131u8,
                96u8,
                141u8,
                95u8,
                216u8,
                14u8,
                36u8,
                60u8,
                15u8,
                174u8,
                4u8,
                209u8,
                41u8,
                206u8,
                23u8,
                47u8,
                112u8,
                219u8,
                16u8,
                33u8,
                193u8,
                18u8,
                128u8,
                116u8,
                166u8,
                244u8,
                217u8,
            ],
            [
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ],
            [
                199u8,
                245u8,
                5u8,
                178u8,
                243u8,
                113u8,
                174u8,
                33u8,
                117u8,
                238u8,
                73u8,
                19u8,
                244u8,
                73u8,
                158u8,
                31u8,
                38u8,
                51u8,
                167u8,
                181u8,
                147u8,
                99u8,
                33u8,
                238u8,
                209u8,
                205u8,
                174u8,
                182u8,
                17u8,
                81u8,
                129u8,
                210u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for ArbChainConfigEvents {
        const NAME: &'static str = "ArbChainConfigEvents";
        const COUNT: usize = 4usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <DefaultSequencingChainRpcUrlUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <DefaultSequencingChainRpcUrlUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::DefaultSequencingChainRpcUrlUpdated)
                }
                Some(<Initialized as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Initialized as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::Initialized)
                }
                Some(
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::OwnershipTransferred)
                }
                Some(
                    <RollupOwnerUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <RollupOwnerUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RollupOwnerUpdated)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for ArbChainConfigEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::DefaultSequencingChainRpcUrlUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Initialized(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RollupOwnerUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::DefaultSequencingChainRpcUrlUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Initialized(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RollupOwnerUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`ArbChainConfig`](self) contract instance.

See the [wrapper's documentation](`ArbChainConfigInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> ArbChainConfigInstance<T, P, N> {
        ArbChainConfigInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<ArbChainConfigInstance<T, P, N>>,
    > {
        ArbChainConfigInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        ArbChainConfigInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`ArbChainConfig`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`ArbChainConfig`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct ArbChainConfigInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for ArbChainConfigInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("ArbChainConfigInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ArbChainConfigInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`ArbChainConfig`](self) contract instance.

See the [wrapper's documentation](`ArbChainConfigInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<ArbChainConfigInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> ArbChainConfigInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> ArbChainConfigInstance<T, P, N> {
            ArbChainConfigInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ArbChainConfigInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`ARBITRUM_BRIDGE_ADDRESS`] function.
        pub fn ARBITRUM_BRIDGE_ADDRESS(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, ARBITRUM_BRIDGE_ADDRESSCall, N> {
            self.call_builder(&ARBITRUM_BRIDGE_ADDRESSCall {})
        }
        ///Creates a new call builder for the [`ARBITRUM_IGNORE_DELAYED_MESSAGES`] function.
        pub fn ARBITRUM_IGNORE_DELAYED_MESSAGES(
            &self,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            ARBITRUM_IGNORE_DELAYED_MESSAGESCall,
            N,
        > {
            self.call_builder(
                &ARBITRUM_IGNORE_DELAYED_MESSAGESCall {
                },
            )
        }
        ///Creates a new call builder for the [`ARBITRUM_INBOX_ADDRESS`] function.
        pub fn ARBITRUM_INBOX_ADDRESS(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, ARBITRUM_INBOX_ADDRESSCall, N> {
            self.call_builder(&ARBITRUM_INBOX_ADDRESSCall {})
        }
        ///Creates a new call builder for the [`CHAIN_ID`] function.
        pub fn CHAIN_ID(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, CHAIN_IDCall, N> {
            self.call_builder(&CHAIN_IDCall {})
        }
        ///Creates a new call builder for the [`DEFAULT_SEQUENCING_CHAIN_RPC_URL`] function.
        pub fn DEFAULT_SEQUENCING_CHAIN_RPC_URL(
            &self,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            DEFAULT_SEQUENCING_CHAIN_RPC_URLCall,
            N,
        > {
            self.call_builder(
                &DEFAULT_SEQUENCING_CHAIN_RPC_URLCall {
                },
            )
        }
        ///Creates a new call builder for the [`MINE_EMPTY_BLOCKS`] function.
        pub fn MINE_EMPTY_BLOCKS(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, MINE_EMPTY_BLOCKSCall, N> {
            self.call_builder(&MINE_EMPTY_BLOCKSCall {})
        }
        ///Creates a new call builder for the [`ROLLUP_OWNER`] function.
        pub fn ROLLUP_OWNER(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, ROLLUP_OWNERCall, N> {
            self.call_builder(&ROLLUP_OWNERCall {})
        }
        ///Creates a new call builder for the [`SEQUENCING_CONTRACT_ADDRESS`] function.
        pub fn SEQUENCING_CONTRACT_ADDRESS(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, SEQUENCING_CONTRACT_ADDRESSCall, N> {
            self.call_builder(&SEQUENCING_CONTRACT_ADDRESSCall {})
        }
        ///Creates a new call builder for the [`SEQUENCING_START_BLOCK`] function.
        pub fn SEQUENCING_START_BLOCK(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, SEQUENCING_START_BLOCKCall, N> {
            self.call_builder(&SEQUENCING_START_BLOCKCall {})
        }
        ///Creates a new call builder for the [`SETTLEMENT_DELAY`] function.
        pub fn SETTLEMENT_DELAY(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, SETTLEMENT_DELAYCall, N> {
            self.call_builder(&SETTLEMENT_DELAYCall {})
        }
        ///Creates a new call builder for the [`SETTLEMENT_START_BLOCK`] function.
        pub fn SETTLEMENT_START_BLOCK(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, SETTLEMENT_START_BLOCKCall, N> {
            self.call_builder(&SETTLEMENT_START_BLOCKCall {})
        }
        ///Creates a new call builder for the [`initialize`] function.
        pub fn initialize(
            &self,
            chainId: alloy::sol_types::private::primitives::aliases::U256,
            mineEmptyBlocks: bool,
            arbitrumBridgeAddress: alloy::sol_types::private::Address,
            arbitrumInboxAddress: alloy::sol_types::private::Address,
            arbitrumIgnoreDelayedMessages: bool,
            settlementDelay: alloy::sol_types::private::primitives::aliases::U256,
            settlementStartBlock: alloy::sol_types::private::primitives::aliases::U256,
            sequencingContractAddress: alloy::sol_types::private::Address,
            sequencingStartBlock: alloy::sol_types::private::primitives::aliases::U256,
            rollupOwner: alloy::sol_types::private::Address,
            sequencingChainRpcUrl: alloy::sol_types::private::String,
        ) -> alloy_contract::SolCallBuilder<T, &P, initializeCall, N> {
            self.call_builder(
                &initializeCall {
                    chainId,
                    mineEmptyBlocks,
                    arbitrumBridgeAddress,
                    arbitrumInboxAddress,
                    arbitrumIgnoreDelayedMessages,
                    settlementDelay,
                    settlementStartBlock,
                    sequencingContractAddress,
                    sequencingStartBlock,
                    rollupOwner,
                    sequencingChainRpcUrl,
                },
            )
        }
        ///Creates a new call builder for the [`owner`] function.
        pub fn owner(&self) -> alloy_contract::SolCallBuilder<T, &P, ownerCall, N> {
            self.call_builder(&ownerCall {})
        }
        ///Creates a new call builder for the [`renounceOwnership`] function.
        pub fn renounceOwnership(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, renounceOwnershipCall, N> {
            self.call_builder(&renounceOwnershipCall {})
        }
        ///Creates a new call builder for the [`transferOwnership`] function.
        pub fn transferOwnership(
            &self,
            newOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferOwnershipCall, N> {
            self.call_builder(&transferOwnershipCall { newOwner })
        }
        ///Creates a new call builder for the [`updateDefaultSequencingChainRpcUrl`] function.
        pub fn updateDefaultSequencingChainRpcUrl(
            &self,
            newRpcUrl: alloy::sol_types::private::String,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            updateDefaultSequencingChainRpcUrlCall,
            N,
        > {
            self.call_builder(
                &updateDefaultSequencingChainRpcUrlCall {
                    newRpcUrl,
                },
            )
        }
        ///Creates a new call builder for the [`updateRollupOwner`] function.
        pub fn updateRollupOwner(
            &self,
            newRollupOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, updateRollupOwnerCall, N> {
            self.call_builder(
                &updateRollupOwnerCall {
                    newRollupOwner,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ArbChainConfigInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`DefaultSequencingChainRpcUrlUpdated`] event.
        pub fn DefaultSequencingChainRpcUrlUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, DefaultSequencingChainRpcUrlUpdated, N> {
            self.event_filter::<DefaultSequencingChainRpcUrlUpdated>()
        }
        ///Creates a new event filter for the [`Initialized`] event.
        pub fn Initialized_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, Initialized, N> {
            self.event_filter::<Initialized>()
        }
        ///Creates a new event filter for the [`OwnershipTransferred`] event.
        pub fn OwnershipTransferred_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, OwnershipTransferred, N> {
            self.event_filter::<OwnershipTransferred>()
        }
        ///Creates a new event filter for the [`RollupOwnerUpdated`] event.
        pub fn RollupOwnerUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RollupOwnerUpdated, N> {
            self.event_filter::<RollupOwnerUpdated>()
        }
    }
}
