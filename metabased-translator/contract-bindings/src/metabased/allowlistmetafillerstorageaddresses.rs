/**

Generated by the following Solidity interface...
```solidity
interface AllowlistMetafillerStorageAddresses {
    function IS_SCRIPT() external view returns (bool);
    function metafillerStorage() external view returns (address);
    function run() external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "IS_SCRIPT",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "metafillerStorage",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract MetafillerStorage"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "run",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod AllowlistMetafillerStorageAddresses {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60806040523461002757610011610036565b61001961002c565b610a766101068239610a7690f35b610032565b60405190565b5f80fd5b61003e610092565b565b60101b90565b9061005462ff000091610040565b9181191691161790565b151590565b61006c9061005e565b90565b90565b9061008761008261008e92610063565b61006f565b8254610046565b9055565b61009a6100a8565b6100a66001600c610072565b565b6100b06100b2565b565b6100ba6100f7565b565b5f1b90565b906100cd60ff916100bc565b9181191691161790565b906100ec6100e76100f392610063565b61006f565b82546100c1565b9055565b6101036001600c6100d7565b56fe60806040526004361015610013575b61021d565b61001d5f3561004c565b8063847a31fb14610047578063c0406226146100425763f8ccbf470361000e576101e8565b610152565b610118565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261006a57565b61005c565b1c90565b60018060a01b031690565b61008e906008610093930261006f565b610073565b90565b906100a1915461007e565b90565b6100b1600c600390610096565b90565b60018060a01b031690565b90565b6100d66100d16100db926100b4565b6100bf565b6100b4565b90565b6100e7906100c2565b90565b6100f3906100de565b90565b6100ff906100ea565b9052565b9190610116905f602085019401906100f6565b565b3461014857610128366004610060565b6101446101336100a4565b61013b610052565b91829182610103565b0390f35b610058565b5f0190565b3461018057610162366004610060565b61016a6105de565b610172610052565b8061017c8161014d565b0390f35b610058565b60ff1690565b61019b9060086101a0930261006f565b610185565b90565b906101ae915461018b565b90565b6101be600c6002906101a3565b90565b151590565b6101cf906101c1565b9052565b91906101e6905f602085019401906101c6565b565b34610218576101f8366004610060565b6102146102036101b1565b61020b610052565b918291826101d3565b0390f35b610058565b5f80fd5b5f1c90565b90565b61023d61023861024292610226565b6100bf565b610226565b90565b61025161025691610221565b610229565b90565b61026d61026861027292610226565b6100bf565b6100b4565b90565b6102ae6102a96102a47f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d610245565b610259565b6100de565b90565b6102ba906100c2565b90565b6102c6906102b1565b90565b6102d96102d4610275565b6102bd565b90565b6102e5906100de565b90565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b90610314906102ec565b810190811067ffffffffffffffff82111761032e57604052565b6102f6565b60e01b90565b5f91031261034357565b61005c565b610350610052565b3d5f823e3d90fd5b610361906100b4565b90565b61036d81610358565b0361037457565b5f80fd5b9050519061038582610364565b565b906020828203126103a05761039d915f01610378565b90565b61005c565b60209181520190565b5f7f4d45544146494c4c45525f53544f524147455f41444452455353000000000000910152565b6103e2601a6020926103a5565b6103eb816103ae565b0190565b6104049060208101905f8183039101526103d5565b90565b610410906100c2565b90565b61041c90610407565b90565b60181b90565b9061043a6301000000600160b81b039161041f565b9181191691161790565b61044d90610407565b90565b90565b9061046861046361046f92610444565b610450565b8254610425565b9055565b9061048661047f610052565b928361030a565b565b67ffffffffffffffff811161049d5760200290565b6102f6565b6104ae6104b391610488565b610473565b90565b906104c090610358565b9052565b90565b6104db6104d66104e0926104c4565b6100bf565b610226565b90565b60016104ef9101610226565b90565b50600a90565b60181c90565b61050a61050f916104f8565b610073565b90565b61051c90546104fe565b90565b90565b61052b8161051f565b0361053257565b5f80fd5b9050519061054382610522565b565b9060208282031261055e5761055b915f01610536565b90565b61005c565b634e487b7160e01b5f52603260045260245ffd5b90610581826104f2565b81101561058f576020020190565b610563565b61059e9051610358565b90565b6105aa9061051f565b9052565b6105b790610358565b9052565b9160206105dc9294936105d560408201965f8301906105a1565b01906105ae565b565b6105ee6105e96102c9565b6102dc565b637fb5297f90803b15610a3b57610611915f91610609610052565b938492610333565b82528183816106226004820161014d565b03925af18015610a3657610a0a575b5061065d60206106476106426102c9565b6102dc565b63350d56bf90610655610052565b938492610333565b8252818061066d600482016103ef565b03915afa908115610a05576106949161068d915f916109d7575b50610413565b600c610453565b61069e600a6104a2565b6106be735f008726c9584810fb4c6e7b794e7ea5ac79c1c65f83016104b6565b6106df736a5462609febcd374cb72385c2543e9cb833da1c602083016104b6565b61070073c68dfaa38e19f4fec8356c9ea9a0362256fdc37c604083016104b6565b6107217386662598a5477cec9c0bb110b75a1c0589f8cf7b606083016104b6565b61074273dc2305cce62d17c777c4752134a68b65f2a41f1d608083016104b6565b61076373046217776ce34afbb59859eba0f5957e39c3ddf060a083016104b6565b610784732909c162338500ec4d6c02944a0eda66569a42bd60c083016104b6565b6107a5733ce840dea371b4849e250f0637994bad3393979d60e083016104b6565b6107c773fa9dcec1c6103dd9206ea251ebb8a9f0a7e698bf61010083016104b6565b6107e973560bdee5c0392e9061e48b014222a3a12e48714261012083016104b6565b906107f35f6104c7565b5b8061080f610809610804866104f2565b610226565b91610226565b101561094857610827610822600c610512565b6100ea565b90632f2ff15d61085a602061084461083f600c610512565b6100ea565b63ec87621c90610852610052565b938492610333565b8252818061086a6004820161014d565b03915afa908115610943575f91610915575b5061089061088b878590610577565b610594565b93803b15610910576108b55f80946108c06108a9610052565b98899687958694610333565b8452600484016105bb565b03925af191821561090b576108da926108df575b506104e3565b6107f4565b6108fe905f3d8111610904575b6108f6818361030a565b810190610339565b5f6108d4565b503d6108ec565b610348565b6102e8565b610936915060203d811161093c575b61092e818361030a565b810190610545565b5f61087c565b503d610924565b610348565b50905061095b6109566102c9565b6102dc565b6376eadd3690803b156109d25761097e915f91610976610052565b938492610333565b825281838161098f6004820161014d565b03925af180156109cd576109a1575b50565b6109c0905f3d81116109c6575b6109b8818361030a565b810190610339565b5f61099e565b503d6109ae565b610348565b6102e8565b6109f8915060203d81116109fe575b6109f0818361030a565b810190610387565b5f610687565b503d6109e6565b610348565b610a29905f3d8111610a2f575b610a21818361030a565b810190610339565b5f610631565b503d610a17565b610348565b6102e856fea2646970667358221220a609800f446f36acb05f1ac3fb0f5737a5144694d9aa4bb2de4b5f3092f73b1564736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4a\0'Wa\0\x11a\x006V[a\0\x19a\0,V[a\nva\x01\x06\x829a\nv\x90\xF3[a\x002V[`@Q\x90V[_\x80\xFD[a\0>a\0\x92V[V[`\x10\x1B\x90V[\x90a\0Tb\xFF\0\0\x91a\0@V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x15\x15\x90V[a\0l\x90a\0^V[\x90V[\x90V[\x90a\0\x87a\0\x82a\0\x8E\x92a\0cV[a\0oV[\x82Ta\0FV[\x90UV[a\0\x9Aa\0\xA8V[a\0\xA6`\x01`\x0Ca\0rV[V[a\0\xB0a\0\xB2V[V[a\0\xBAa\0\xF7V[V[_\x1B\x90V[\x90a\0\xCD`\xFF\x91a\0\xBCV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\0\xECa\0\xE7a\0\xF3\x92a\0cV[a\0oV[\x82Ta\0\xC1V[\x90UV[a\x01\x03`\x01`\x0Ca\0\xD7V[V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x02\x1DV[a\0\x1D_5a\0LV[\x80c\x84z1\xFB\x14a\0GW\x80c\xC0@b&\x14a\0BWc\xF8\xCC\xBFG\x03a\0\x0EWa\x01\xE8V[a\x01RV[a\x01\x18V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\0jWV[a\0\\V[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\x8E\x90`\x08a\0\x93\x93\x02a\0oV[a\0sV[\x90V[\x90a\0\xA1\x91Ta\0~V[\x90V[a\0\xB1`\x0C`\x03\x90a\0\x96V[\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[\x90V[a\0\xD6a\0\xD1a\0\xDB\x92a\0\xB4V[a\0\xBFV[a\0\xB4V[\x90V[a\0\xE7\x90a\0\xC2V[\x90V[a\0\xF3\x90a\0\xDEV[\x90V[a\0\xFF\x90a\0\xEAV[\x90RV[\x91\x90a\x01\x16\x90_` \x85\x01\x94\x01\x90a\0\xF6V[V[4a\x01HWa\x01(6`\x04a\0`V[a\x01Da\x013a\0\xA4V[a\x01;a\0RV[\x91\x82\x91\x82a\x01\x03V[\x03\x90\xF3[a\0XV[_\x01\x90V[4a\x01\x80Wa\x01b6`\x04a\0`V[a\x01ja\x05\xDEV[a\x01ra\0RV[\x80a\x01|\x81a\x01MV[\x03\x90\xF3[a\0XV[`\xFF\x16\x90V[a\x01\x9B\x90`\x08a\x01\xA0\x93\x02a\0oV[a\x01\x85V[\x90V[\x90a\x01\xAE\x91Ta\x01\x8BV[\x90V[a\x01\xBE`\x0C`\x02\x90a\x01\xA3V[\x90V[\x15\x15\x90V[a\x01\xCF\x90a\x01\xC1V[\x90RV[\x91\x90a\x01\xE6\x90_` \x85\x01\x94\x01\x90a\x01\xC6V[V[4a\x02\x18Wa\x01\xF86`\x04a\0`V[a\x02\x14a\x02\x03a\x01\xB1V[a\x02\x0Ba\0RV[\x91\x82\x91\x82a\x01\xD3V[\x03\x90\xF3[a\0XV[_\x80\xFD[_\x1C\x90V[\x90V[a\x02=a\x028a\x02B\x92a\x02&V[a\0\xBFV[a\x02&V[\x90V[a\x02Qa\x02V\x91a\x02!V[a\x02)V[\x90V[a\x02ma\x02ha\x02r\x92a\x02&V[a\0\xBFV[a\0\xB4V[\x90V[a\x02\xAEa\x02\xA9a\x02\xA4\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-a\x02EV[a\x02YV[a\0\xDEV[\x90V[a\x02\xBA\x90a\0\xC2V[\x90V[a\x02\xC6\x90a\x02\xB1V[\x90V[a\x02\xD9a\x02\xD4a\x02uV[a\x02\xBDV[\x90V[a\x02\xE5\x90a\0\xDEV[\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x03\x14\x90a\x02\xECV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x03.W`@RV[a\x02\xF6V[`\xE0\x1B\x90V[_\x91\x03\x12a\x03CWV[a\0\\V[a\x03Pa\0RV[=_\x82>=\x90\xFD[a\x03a\x90a\0\xB4V[\x90V[a\x03m\x81a\x03XV[\x03a\x03tWV[_\x80\xFD[\x90PQ\x90a\x03\x85\x82a\x03dV[V[\x90` \x82\x82\x03\x12a\x03\xA0Wa\x03\x9D\x91_\x01a\x03xV[\x90V[a\0\\V[` \x91\x81R\x01\x90V[_\x7FMETAFILLER_STORAGE_ADDRESS\0\0\0\0\0\0\x91\x01RV[a\x03\xE2`\x1A` \x92a\x03\xA5V[a\x03\xEB\x81a\x03\xAEV[\x01\x90V[a\x04\x04\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x03\xD5V[\x90V[a\x04\x10\x90a\0\xC2V[\x90V[a\x04\x1C\x90a\x04\x07V[\x90V[`\x18\x1B\x90V[\x90a\x04:c\x01\0\0\0`\x01`\xB8\x1B\x03\x91a\x04\x1FV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x04M\x90a\x04\x07V[\x90V[\x90V[\x90a\x04ha\x04ca\x04o\x92a\x04DV[a\x04PV[\x82Ta\x04%V[\x90UV[\x90a\x04\x86a\x04\x7Fa\0RV[\x92\x83a\x03\nV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04\x9DW` \x02\x90V[a\x02\xF6V[a\x04\xAEa\x04\xB3\x91a\x04\x88V[a\x04sV[\x90V[\x90a\x04\xC0\x90a\x03XV[\x90RV[\x90V[a\x04\xDBa\x04\xD6a\x04\xE0\x92a\x04\xC4V[a\0\xBFV[a\x02&V[\x90V[`\x01a\x04\xEF\x91\x01a\x02&V[\x90V[P`\n\x90V[`\x18\x1C\x90V[a\x05\na\x05\x0F\x91a\x04\xF8V[a\0sV[\x90V[a\x05\x1C\x90Ta\x04\xFEV[\x90V[\x90V[a\x05+\x81a\x05\x1FV[\x03a\x052WV[_\x80\xFD[\x90PQ\x90a\x05C\x82a\x05\"V[V[\x90` \x82\x82\x03\x12a\x05^Wa\x05[\x91_\x01a\x056V[\x90V[a\0\\V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[\x90a\x05\x81\x82a\x04\xF2V[\x81\x10\x15a\x05\x8FW` \x02\x01\x90V[a\x05cV[a\x05\x9E\x90Qa\x03XV[\x90V[a\x05\xAA\x90a\x05\x1FV[\x90RV[a\x05\xB7\x90a\x03XV[\x90RV[\x91` a\x05\xDC\x92\x94\x93a\x05\xD5`@\x82\x01\x96_\x83\x01\x90a\x05\xA1V[\x01\x90a\x05\xAEV[V[a\x05\xEEa\x05\xE9a\x02\xC9V[a\x02\xDCV[c\x7F\xB5)\x7F\x90\x80;\x15a\n;Wa\x06\x11\x91_\x91a\x06\ta\0RV[\x93\x84\x92a\x033V[\x82R\x81\x83\x81a\x06\"`\x04\x82\x01a\x01MV[\x03\x92Z\xF1\x80\x15a\n6Wa\n\nW[Pa\x06]` a\x06Ga\x06Ba\x02\xC9V[a\x02\xDCV[c5\rV\xBF\x90a\x06Ua\0RV[\x93\x84\x92a\x033V[\x82R\x81\x80a\x06m`\x04\x82\x01a\x03\xEFV[\x03\x91Z\xFA\x90\x81\x15a\n\x05Wa\x06\x94\x91a\x06\x8D\x91_\x91a\t\xD7W[Pa\x04\x13V[`\x0Ca\x04SV[a\x06\x9E`\na\x04\xA2V[a\x06\xBEs_\0\x87&\xC9XH\x10\xFBLn{yN~\xA5\xACy\xC1\xC6_\x83\x01a\x04\xB6V[a\x06\xDFsjTb`\x9F\xEB\xCD7L\xB7#\x85\xC2T>\x9C\xB83\xDA\x1C` \x83\x01a\x04\xB6V[a\x07\0s\xC6\x8D\xFA\xA3\x8E\x19\xF4\xFE\xC85l\x9E\xA9\xA06\"V\xFD\xC3|`@\x83\x01a\x04\xB6V[a\x07!s\x86f%\x98\xA5G|\xEC\x9C\x0B\xB1\x10\xB7Z\x1C\x05\x89\xF8\xCF{``\x83\x01a\x04\xB6V[a\x07Bs\xDC#\x05\xCC\xE6-\x17\xC7w\xC4u!4\xA6\x8Be\xF2\xA4\x1F\x1D`\x80\x83\x01a\x04\xB6V[a\x07cs\x04b\x17wl\xE3J\xFB\xB5\x98Y\xEB\xA0\xF5\x95~9\xC3\xDD\xF0`\xA0\x83\x01a\x04\xB6V[a\x07\x84s)\t\xC1b3\x85\0\xECMl\x02\x94J\x0E\xDAfV\x9AB\xBD`\xC0\x83\x01a\x04\xB6V[a\x07\xA5s<\xE8@\xDE\xA3q\xB4\x84\x9E%\x0F\x067\x99K\xAD3\x93\x97\x9D`\xE0\x83\x01a\x04\xB6V[a\x07\xC7s\xFA\x9D\xCE\xC1\xC6\x10=\xD9 n\xA2Q\xEB\xB8\xA9\xF0\xA7\xE6\x98\xBFa\x01\0\x83\x01a\x04\xB6V[a\x07\xE9sV\x0B\xDE\xE5\xC09.\x90a\xE4\x8B\x01B\"\xA3\xA1.HqBa\x01 \x83\x01a\x04\xB6V[\x90a\x07\xF3_a\x04\xC7V[[\x80a\x08\x0Fa\x08\ta\x08\x04\x86a\x04\xF2V[a\x02&V[\x91a\x02&V[\x10\x15a\tHWa\x08'a\x08\"`\x0Ca\x05\x12V[a\0\xEAV[\x90c//\xF1]a\x08Z` a\x08Da\x08?`\x0Ca\x05\x12V[a\0\xEAV[c\xEC\x87b\x1C\x90a\x08Ra\0RV[\x93\x84\x92a\x033V[\x82R\x81\x80a\x08j`\x04\x82\x01a\x01MV[\x03\x91Z\xFA\x90\x81\x15a\tCW_\x91a\t\x15W[Pa\x08\x90a\x08\x8B\x87\x85\x90a\x05wV[a\x05\x94V[\x93\x80;\x15a\t\x10Wa\x08\xB5_\x80\x94a\x08\xC0a\x08\xA9a\0RV[\x98\x89\x96\x87\x95\x86\x94a\x033V[\x84R`\x04\x84\x01a\x05\xBBV[\x03\x92Z\xF1\x91\x82\x15a\t\x0BWa\x08\xDA\x92a\x08\xDFW[Pa\x04\xE3V[a\x07\xF4V[a\x08\xFE\x90_=\x81\x11a\t\x04W[a\x08\xF6\x81\x83a\x03\nV[\x81\x01\x90a\x039V[_a\x08\xD4V[P=a\x08\xECV[a\x03HV[a\x02\xE8V[a\t6\x91P` =\x81\x11a\t<W[a\t.\x81\x83a\x03\nV[\x81\x01\x90a\x05EV[_a\x08|V[P=a\t$V[a\x03HV[P\x90Pa\t[a\tVa\x02\xC9V[a\x02\xDCV[cv\xEA\xDD6\x90\x80;\x15a\t\xD2Wa\t~\x91_\x91a\tva\0RV[\x93\x84\x92a\x033V[\x82R\x81\x83\x81a\t\x8F`\x04\x82\x01a\x01MV[\x03\x92Z\xF1\x80\x15a\t\xCDWa\t\xA1W[PV[a\t\xC0\x90_=\x81\x11a\t\xC6W[a\t\xB8\x81\x83a\x03\nV[\x81\x01\x90a\x039V[_a\t\x9EV[P=a\t\xAEV[a\x03HV[a\x02\xE8V[a\t\xF8\x91P` =\x81\x11a\t\xFEW[a\t\xF0\x81\x83a\x03\nV[\x81\x01\x90a\x03\x87V[_a\x06\x87V[P=a\t\xE6V[a\x03HV[a\n)\x90_=\x81\x11a\n/W[a\n!\x81\x83a\x03\nV[\x81\x01\x90a\x039V[_a\x061V[P=a\n\x17V[a\x03HV[a\x02\xE8V\xFE\xA2dipfsX\"\x12 \xA6\t\x80\x0FDo6\xAC\xB0_\x1A\xC3\xFB\x0FW7\xA5\x14F\x94\xD9\xAAK\xB2\xDEK_0\x92\xF7;\x15dsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b61021d565b61001d5f3561004c565b8063847a31fb14610047578063c0406226146100425763f8ccbf470361000e576101e8565b610152565b610118565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261006a57565b61005c565b1c90565b60018060a01b031690565b61008e906008610093930261006f565b610073565b90565b906100a1915461007e565b90565b6100b1600c600390610096565b90565b60018060a01b031690565b90565b6100d66100d16100db926100b4565b6100bf565b6100b4565b90565b6100e7906100c2565b90565b6100f3906100de565b90565b6100ff906100ea565b9052565b9190610116905f602085019401906100f6565b565b3461014857610128366004610060565b6101446101336100a4565b61013b610052565b91829182610103565b0390f35b610058565b5f0190565b3461018057610162366004610060565b61016a6105de565b610172610052565b8061017c8161014d565b0390f35b610058565b60ff1690565b61019b9060086101a0930261006f565b610185565b90565b906101ae915461018b565b90565b6101be600c6002906101a3565b90565b151590565b6101cf906101c1565b9052565b91906101e6905f602085019401906101c6565b565b34610218576101f8366004610060565b6102146102036101b1565b61020b610052565b918291826101d3565b0390f35b610058565b5f80fd5b5f1c90565b90565b61023d61023861024292610226565b6100bf565b610226565b90565b61025161025691610221565b610229565b90565b61026d61026861027292610226565b6100bf565b6100b4565b90565b6102ae6102a96102a47f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d610245565b610259565b6100de565b90565b6102ba906100c2565b90565b6102c6906102b1565b90565b6102d96102d4610275565b6102bd565b90565b6102e5906100de565b90565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b90610314906102ec565b810190811067ffffffffffffffff82111761032e57604052565b6102f6565b60e01b90565b5f91031261034357565b61005c565b610350610052565b3d5f823e3d90fd5b610361906100b4565b90565b61036d81610358565b0361037457565b5f80fd5b9050519061038582610364565b565b906020828203126103a05761039d915f01610378565b90565b61005c565b60209181520190565b5f7f4d45544146494c4c45525f53544f524147455f41444452455353000000000000910152565b6103e2601a6020926103a5565b6103eb816103ae565b0190565b6104049060208101905f8183039101526103d5565b90565b610410906100c2565b90565b61041c90610407565b90565b60181b90565b9061043a6301000000600160b81b039161041f565b9181191691161790565b61044d90610407565b90565b90565b9061046861046361046f92610444565b610450565b8254610425565b9055565b9061048661047f610052565b928361030a565b565b67ffffffffffffffff811161049d5760200290565b6102f6565b6104ae6104b391610488565b610473565b90565b906104c090610358565b9052565b90565b6104db6104d66104e0926104c4565b6100bf565b610226565b90565b60016104ef9101610226565b90565b50600a90565b60181c90565b61050a61050f916104f8565b610073565b90565b61051c90546104fe565b90565b90565b61052b8161051f565b0361053257565b5f80fd5b9050519061054382610522565b565b9060208282031261055e5761055b915f01610536565b90565b61005c565b634e487b7160e01b5f52603260045260245ffd5b90610581826104f2565b81101561058f576020020190565b610563565b61059e9051610358565b90565b6105aa9061051f565b9052565b6105b790610358565b9052565b9160206105dc9294936105d560408201965f8301906105a1565b01906105ae565b565b6105ee6105e96102c9565b6102dc565b637fb5297f90803b15610a3b57610611915f91610609610052565b938492610333565b82528183816106226004820161014d565b03925af18015610a3657610a0a575b5061065d60206106476106426102c9565b6102dc565b63350d56bf90610655610052565b938492610333565b8252818061066d600482016103ef565b03915afa908115610a05576106949161068d915f916109d7575b50610413565b600c610453565b61069e600a6104a2565b6106be735f008726c9584810fb4c6e7b794e7ea5ac79c1c65f83016104b6565b6106df736a5462609febcd374cb72385c2543e9cb833da1c602083016104b6565b61070073c68dfaa38e19f4fec8356c9ea9a0362256fdc37c604083016104b6565b6107217386662598a5477cec9c0bb110b75a1c0589f8cf7b606083016104b6565b61074273dc2305cce62d17c777c4752134a68b65f2a41f1d608083016104b6565b61076373046217776ce34afbb59859eba0f5957e39c3ddf060a083016104b6565b610784732909c162338500ec4d6c02944a0eda66569a42bd60c083016104b6565b6107a5733ce840dea371b4849e250f0637994bad3393979d60e083016104b6565b6107c773fa9dcec1c6103dd9206ea251ebb8a9f0a7e698bf61010083016104b6565b6107e973560bdee5c0392e9061e48b014222a3a12e48714261012083016104b6565b906107f35f6104c7565b5b8061080f610809610804866104f2565b610226565b91610226565b101561094857610827610822600c610512565b6100ea565b90632f2ff15d61085a602061084461083f600c610512565b6100ea565b63ec87621c90610852610052565b938492610333565b8252818061086a6004820161014d565b03915afa908115610943575f91610915575b5061089061088b878590610577565b610594565b93803b15610910576108b55f80946108c06108a9610052565b98899687958694610333565b8452600484016105bb565b03925af191821561090b576108da926108df575b506104e3565b6107f4565b6108fe905f3d8111610904575b6108f6818361030a565b810190610339565b5f6108d4565b503d6108ec565b610348565b6102e8565b610936915060203d811161093c575b61092e818361030a565b810190610545565b5f61087c565b503d610924565b610348565b50905061095b6109566102c9565b6102dc565b6376eadd3690803b156109d25761097e915f91610976610052565b938492610333565b825281838161098f6004820161014d565b03925af180156109cd576109a1575b50565b6109c0905f3d81116109c6575b6109b8818361030a565b810190610339565b5f61099e565b503d6109ae565b610348565b6102e8565b6109f8915060203d81116109fe575b6109f0818361030a565b810190610387565b5f610687565b503d6109e6565b610348565b610a29905f3d8111610a2f575b610a21818361030a565b810190610339565b5f610631565b503d610a17565b610348565b6102e856fea2646970667358221220a609800f446f36acb05f1ac3fb0f5737a5144694d9aa4bb2de4b5f3092f73b1564736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x02\x1DV[a\0\x1D_5a\0LV[\x80c\x84z1\xFB\x14a\0GW\x80c\xC0@b&\x14a\0BWc\xF8\xCC\xBFG\x03a\0\x0EWa\x01\xE8V[a\x01RV[a\x01\x18V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\0jWV[a\0\\V[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\x8E\x90`\x08a\0\x93\x93\x02a\0oV[a\0sV[\x90V[\x90a\0\xA1\x91Ta\0~V[\x90V[a\0\xB1`\x0C`\x03\x90a\0\x96V[\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[\x90V[a\0\xD6a\0\xD1a\0\xDB\x92a\0\xB4V[a\0\xBFV[a\0\xB4V[\x90V[a\0\xE7\x90a\0\xC2V[\x90V[a\0\xF3\x90a\0\xDEV[\x90V[a\0\xFF\x90a\0\xEAV[\x90RV[\x91\x90a\x01\x16\x90_` \x85\x01\x94\x01\x90a\0\xF6V[V[4a\x01HWa\x01(6`\x04a\0`V[a\x01Da\x013a\0\xA4V[a\x01;a\0RV[\x91\x82\x91\x82a\x01\x03V[\x03\x90\xF3[a\0XV[_\x01\x90V[4a\x01\x80Wa\x01b6`\x04a\0`V[a\x01ja\x05\xDEV[a\x01ra\0RV[\x80a\x01|\x81a\x01MV[\x03\x90\xF3[a\0XV[`\xFF\x16\x90V[a\x01\x9B\x90`\x08a\x01\xA0\x93\x02a\0oV[a\x01\x85V[\x90V[\x90a\x01\xAE\x91Ta\x01\x8BV[\x90V[a\x01\xBE`\x0C`\x02\x90a\x01\xA3V[\x90V[\x15\x15\x90V[a\x01\xCF\x90a\x01\xC1V[\x90RV[\x91\x90a\x01\xE6\x90_` \x85\x01\x94\x01\x90a\x01\xC6V[V[4a\x02\x18Wa\x01\xF86`\x04a\0`V[a\x02\x14a\x02\x03a\x01\xB1V[a\x02\x0Ba\0RV[\x91\x82\x91\x82a\x01\xD3V[\x03\x90\xF3[a\0XV[_\x80\xFD[_\x1C\x90V[\x90V[a\x02=a\x028a\x02B\x92a\x02&V[a\0\xBFV[a\x02&V[\x90V[a\x02Qa\x02V\x91a\x02!V[a\x02)V[\x90V[a\x02ma\x02ha\x02r\x92a\x02&V[a\0\xBFV[a\0\xB4V[\x90V[a\x02\xAEa\x02\xA9a\x02\xA4\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-a\x02EV[a\x02YV[a\0\xDEV[\x90V[a\x02\xBA\x90a\0\xC2V[\x90V[a\x02\xC6\x90a\x02\xB1V[\x90V[a\x02\xD9a\x02\xD4a\x02uV[a\x02\xBDV[\x90V[a\x02\xE5\x90a\0\xDEV[\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x03\x14\x90a\x02\xECV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x03.W`@RV[a\x02\xF6V[`\xE0\x1B\x90V[_\x91\x03\x12a\x03CWV[a\0\\V[a\x03Pa\0RV[=_\x82>=\x90\xFD[a\x03a\x90a\0\xB4V[\x90V[a\x03m\x81a\x03XV[\x03a\x03tWV[_\x80\xFD[\x90PQ\x90a\x03\x85\x82a\x03dV[V[\x90` \x82\x82\x03\x12a\x03\xA0Wa\x03\x9D\x91_\x01a\x03xV[\x90V[a\0\\V[` \x91\x81R\x01\x90V[_\x7FMETAFILLER_STORAGE_ADDRESS\0\0\0\0\0\0\x91\x01RV[a\x03\xE2`\x1A` \x92a\x03\xA5V[a\x03\xEB\x81a\x03\xAEV[\x01\x90V[a\x04\x04\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x03\xD5V[\x90V[a\x04\x10\x90a\0\xC2V[\x90V[a\x04\x1C\x90a\x04\x07V[\x90V[`\x18\x1B\x90V[\x90a\x04:c\x01\0\0\0`\x01`\xB8\x1B\x03\x91a\x04\x1FV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x04M\x90a\x04\x07V[\x90V[\x90V[\x90a\x04ha\x04ca\x04o\x92a\x04DV[a\x04PV[\x82Ta\x04%V[\x90UV[\x90a\x04\x86a\x04\x7Fa\0RV[\x92\x83a\x03\nV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04\x9DW` \x02\x90V[a\x02\xF6V[a\x04\xAEa\x04\xB3\x91a\x04\x88V[a\x04sV[\x90V[\x90a\x04\xC0\x90a\x03XV[\x90RV[\x90V[a\x04\xDBa\x04\xD6a\x04\xE0\x92a\x04\xC4V[a\0\xBFV[a\x02&V[\x90V[`\x01a\x04\xEF\x91\x01a\x02&V[\x90V[P`\n\x90V[`\x18\x1C\x90V[a\x05\na\x05\x0F\x91a\x04\xF8V[a\0sV[\x90V[a\x05\x1C\x90Ta\x04\xFEV[\x90V[\x90V[a\x05+\x81a\x05\x1FV[\x03a\x052WV[_\x80\xFD[\x90PQ\x90a\x05C\x82a\x05\"V[V[\x90` \x82\x82\x03\x12a\x05^Wa\x05[\x91_\x01a\x056V[\x90V[a\0\\V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[\x90a\x05\x81\x82a\x04\xF2V[\x81\x10\x15a\x05\x8FW` \x02\x01\x90V[a\x05cV[a\x05\x9E\x90Qa\x03XV[\x90V[a\x05\xAA\x90a\x05\x1FV[\x90RV[a\x05\xB7\x90a\x03XV[\x90RV[\x91` a\x05\xDC\x92\x94\x93a\x05\xD5`@\x82\x01\x96_\x83\x01\x90a\x05\xA1V[\x01\x90a\x05\xAEV[V[a\x05\xEEa\x05\xE9a\x02\xC9V[a\x02\xDCV[c\x7F\xB5)\x7F\x90\x80;\x15a\n;Wa\x06\x11\x91_\x91a\x06\ta\0RV[\x93\x84\x92a\x033V[\x82R\x81\x83\x81a\x06\"`\x04\x82\x01a\x01MV[\x03\x92Z\xF1\x80\x15a\n6Wa\n\nW[Pa\x06]` a\x06Ga\x06Ba\x02\xC9V[a\x02\xDCV[c5\rV\xBF\x90a\x06Ua\0RV[\x93\x84\x92a\x033V[\x82R\x81\x80a\x06m`\x04\x82\x01a\x03\xEFV[\x03\x91Z\xFA\x90\x81\x15a\n\x05Wa\x06\x94\x91a\x06\x8D\x91_\x91a\t\xD7W[Pa\x04\x13V[`\x0Ca\x04SV[a\x06\x9E`\na\x04\xA2V[a\x06\xBEs_\0\x87&\xC9XH\x10\xFBLn{yN~\xA5\xACy\xC1\xC6_\x83\x01a\x04\xB6V[a\x06\xDFsjTb`\x9F\xEB\xCD7L\xB7#\x85\xC2T>\x9C\xB83\xDA\x1C` \x83\x01a\x04\xB6V[a\x07\0s\xC6\x8D\xFA\xA3\x8E\x19\xF4\xFE\xC85l\x9E\xA9\xA06\"V\xFD\xC3|`@\x83\x01a\x04\xB6V[a\x07!s\x86f%\x98\xA5G|\xEC\x9C\x0B\xB1\x10\xB7Z\x1C\x05\x89\xF8\xCF{``\x83\x01a\x04\xB6V[a\x07Bs\xDC#\x05\xCC\xE6-\x17\xC7w\xC4u!4\xA6\x8Be\xF2\xA4\x1F\x1D`\x80\x83\x01a\x04\xB6V[a\x07cs\x04b\x17wl\xE3J\xFB\xB5\x98Y\xEB\xA0\xF5\x95~9\xC3\xDD\xF0`\xA0\x83\x01a\x04\xB6V[a\x07\x84s)\t\xC1b3\x85\0\xECMl\x02\x94J\x0E\xDAfV\x9AB\xBD`\xC0\x83\x01a\x04\xB6V[a\x07\xA5s<\xE8@\xDE\xA3q\xB4\x84\x9E%\x0F\x067\x99K\xAD3\x93\x97\x9D`\xE0\x83\x01a\x04\xB6V[a\x07\xC7s\xFA\x9D\xCE\xC1\xC6\x10=\xD9 n\xA2Q\xEB\xB8\xA9\xF0\xA7\xE6\x98\xBFa\x01\0\x83\x01a\x04\xB6V[a\x07\xE9sV\x0B\xDE\xE5\xC09.\x90a\xE4\x8B\x01B\"\xA3\xA1.HqBa\x01 \x83\x01a\x04\xB6V[\x90a\x07\xF3_a\x04\xC7V[[\x80a\x08\x0Fa\x08\ta\x08\x04\x86a\x04\xF2V[a\x02&V[\x91a\x02&V[\x10\x15a\tHWa\x08'a\x08\"`\x0Ca\x05\x12V[a\0\xEAV[\x90c//\xF1]a\x08Z` a\x08Da\x08?`\x0Ca\x05\x12V[a\0\xEAV[c\xEC\x87b\x1C\x90a\x08Ra\0RV[\x93\x84\x92a\x033V[\x82R\x81\x80a\x08j`\x04\x82\x01a\x01MV[\x03\x91Z\xFA\x90\x81\x15a\tCW_\x91a\t\x15W[Pa\x08\x90a\x08\x8B\x87\x85\x90a\x05wV[a\x05\x94V[\x93\x80;\x15a\t\x10Wa\x08\xB5_\x80\x94a\x08\xC0a\x08\xA9a\0RV[\x98\x89\x96\x87\x95\x86\x94a\x033V[\x84R`\x04\x84\x01a\x05\xBBV[\x03\x92Z\xF1\x91\x82\x15a\t\x0BWa\x08\xDA\x92a\x08\xDFW[Pa\x04\xE3V[a\x07\xF4V[a\x08\xFE\x90_=\x81\x11a\t\x04W[a\x08\xF6\x81\x83a\x03\nV[\x81\x01\x90a\x039V[_a\x08\xD4V[P=a\x08\xECV[a\x03HV[a\x02\xE8V[a\t6\x91P` =\x81\x11a\t<W[a\t.\x81\x83a\x03\nV[\x81\x01\x90a\x05EV[_a\x08|V[P=a\t$V[a\x03HV[P\x90Pa\t[a\tVa\x02\xC9V[a\x02\xDCV[cv\xEA\xDD6\x90\x80;\x15a\t\xD2Wa\t~\x91_\x91a\tva\0RV[\x93\x84\x92a\x033V[\x82R\x81\x83\x81a\t\x8F`\x04\x82\x01a\x01MV[\x03\x92Z\xF1\x80\x15a\t\xCDWa\t\xA1W[PV[a\t\xC0\x90_=\x81\x11a\t\xC6W[a\t\xB8\x81\x83a\x03\nV[\x81\x01\x90a\x039V[_a\t\x9EV[P=a\t\xAEV[a\x03HV[a\x02\xE8V[a\t\xF8\x91P` =\x81\x11a\t\xFEW[a\t\xF0\x81\x83a\x03\nV[\x81\x01\x90a\x03\x87V[_a\x06\x87V[P=a\t\xE6V[a\x03HV[a\n)\x90_=\x81\x11a\n/W[a\n!\x81\x83a\x03\nV[\x81\x01\x90a\x039V[_a\x061V[P=a\n\x17V[a\x03HV[a\x02\xE8V\xFE\xA2dipfsX\"\x12 \xA6\t\x80\x0FDo6\xAC\xB0_\x1A\xC3\xFB\x0FW7\xA5\x14F\x94\xD9\xAAK\xB2\xDEK_0\x92\xF7;\x15dsolcC\0\x08\x19\x003",
    );
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `IS_SCRIPT()` and selector `0xf8ccbf47`.
```solidity
function IS_SCRIPT() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTCall {}
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`IS_SCRIPT()`](IS_SCRIPTCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTCall> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTReturn> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for IS_SCRIPTCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = IS_SCRIPTReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "IS_SCRIPT()";
            const SELECTOR: [u8; 4] = [248u8, 204u8, 191u8, 71u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `metafillerStorage()` and selector `0x847a31fb`.
```solidity
function metafillerStorage() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct metafillerStorageCall {}
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`metafillerStorage()`](metafillerStorageCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct metafillerStorageReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<metafillerStorageCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: metafillerStorageCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for metafillerStorageCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<metafillerStorageReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: metafillerStorageReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for metafillerStorageReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for metafillerStorageCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = metafillerStorageReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "metafillerStorage()";
            const SELECTOR: [u8; 4] = [132u8, 122u8, 49u8, 251u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `run()` and selector `0xc0406226`.
```solidity
function run() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runCall {}
    ///Container type for the return parameters of the [`run()`](runCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runCall> for UnderlyingRustTuple<'_> {
                fn from(value: runCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runReturn> for UnderlyingRustTuple<'_> {
                fn from(value: runReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for runCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = runReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "run()";
            const SELECTOR: [u8; 4] = [192u8, 64u8, 98u8, 38u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`AllowlistMetafillerStorageAddresses`](self) function calls.
    #[derive()]
    pub enum AllowlistMetafillerStorageAddressesCalls {
        #[allow(missing_docs)]
        IS_SCRIPT(IS_SCRIPTCall),
        #[allow(missing_docs)]
        metafillerStorage(metafillerStorageCall),
        #[allow(missing_docs)]
        run(runCall),
    }
    #[automatically_derived]
    impl AllowlistMetafillerStorageAddressesCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [132u8, 122u8, 49u8, 251u8],
            [192u8, 64u8, 98u8, 38u8],
            [248u8, 204u8, 191u8, 71u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for AllowlistMetafillerStorageAddressesCalls {
        const NAME: &'static str = "AllowlistMetafillerStorageAddressesCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 3usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::IS_SCRIPT(_) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::metafillerStorage(_) => {
                    <metafillerStorageCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::run(_) => <runCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<AllowlistMetafillerStorageAddressesCalls>] = &[
                {
                    fn metafillerStorage(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        AllowlistMetafillerStorageAddressesCalls,
                    > {
                        <metafillerStorageCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                AllowlistMetafillerStorageAddressesCalls::metafillerStorage,
                            )
                    }
                    metafillerStorage
                },
                {
                    fn run(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        AllowlistMetafillerStorageAddressesCalls,
                    > {
                        <runCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AllowlistMetafillerStorageAddressesCalls::run)
                    }
                    run
                },
                {
                    fn IS_SCRIPT(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        AllowlistMetafillerStorageAddressesCalls,
                    > {
                        <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AllowlistMetafillerStorageAddressesCalls::IS_SCRIPT)
                    }
                    IS_SCRIPT
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::metafillerStorage(inner) => {
                    <metafillerStorageCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::metafillerStorage(inner) => {
                    <metafillerStorageCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`AllowlistMetafillerStorageAddresses`](self) contract instance.

See the [wrapper's documentation](`AllowlistMetafillerStorageAddressesInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> AllowlistMetafillerStorageAddressesInstance<T, P, N> {
        AllowlistMetafillerStorageAddressesInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<
            AllowlistMetafillerStorageAddressesInstance<T, P, N>,
        >,
    > {
        AllowlistMetafillerStorageAddressesInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        AllowlistMetafillerStorageAddressesInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`AllowlistMetafillerStorageAddresses`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`AllowlistMetafillerStorageAddresses`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct AllowlistMetafillerStorageAddressesInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug
    for AllowlistMetafillerStorageAddressesInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("AllowlistMetafillerStorageAddressesInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AllowlistMetafillerStorageAddressesInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`AllowlistMetafillerStorageAddresses`](self) contract instance.

See the [wrapper's documentation](`AllowlistMetafillerStorageAddressesInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<
            AllowlistMetafillerStorageAddressesInstance<T, P, N>,
        > {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<
        T,
        P: ::core::clone::Clone,
        N,
    > AllowlistMetafillerStorageAddressesInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(
            self,
        ) -> AllowlistMetafillerStorageAddressesInstance<T, P, N> {
            AllowlistMetafillerStorageAddressesInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AllowlistMetafillerStorageAddressesInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`IS_SCRIPT`] function.
        pub fn IS_SCRIPT(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, IS_SCRIPTCall, N> {
            self.call_builder(&IS_SCRIPTCall {})
        }
        ///Creates a new call builder for the [`metafillerStorage`] function.
        pub fn metafillerStorage(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, metafillerStorageCall, N> {
            self.call_builder(&metafillerStorageCall {})
        }
        ///Creates a new call builder for the [`run`] function.
        pub fn run(&self) -> alloy_contract::SolCallBuilder<T, &P, runCall, N> {
            self.call_builder(&runCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AllowlistMetafillerStorageAddressesInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
