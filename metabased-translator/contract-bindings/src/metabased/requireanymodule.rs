/**

Generated by the following Solidity interface...
```solidity
interface RequireAnyModule {
    error AddressAlreadyExists();
    error AddressDoesNotExist();
    error CalldataCheckFailed();
    error InvalidAddress();
    error OwnableInvalidOwner(address owner);
    error OwnableUnauthorizedAccount(address account);
    error ProposerCheckFailed(address batchSubmitter);

    event CalldataCheckAdded(address indexed check);
    event CalldataCheckRemoved(address indexed check);
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event ProposerCheckAdded(address indexed check);
    event ProposerCheckRemoved(address indexed check);

    constructor(address admin);

    function addCalldataCheck(address _address, bool addToHead) external;
    function addProposerCheck(address _address, bool addToHead) external;
    function getAllCalldataChecks() external view returns (address[] memory);
    function getAllProposerChecks() external view returns (address[] memory);
    function isAllowed(address proposer) external view returns (bool);
    function isCalldataAllowed(bytes memory data) external view returns (bool);
    function owner() external view returns (address);
    function removeCalldataCheck(address _address) external;
    function removeProposerCheck(address _address) external;
    function renounceOwnership() external;
    function transferOwnership(address newOwner) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "admin",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "addCalldataCheck",
    "inputs": [
      {
        "name": "_address",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "addToHead",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "addProposerCheck",
    "inputs": [
      {
        "name": "_address",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "addToHead",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "getAllCalldataChecks",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getAllProposerChecks",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isAllowed",
    "inputs": [
      {
        "name": "proposer",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isCalldataAllowed",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "removeCalldataCheck",
    "inputs": [
      {
        "name": "_address",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "removeProposerCheck",
    "inputs": [
      {
        "name": "_address",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "renounceOwnership",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "transferOwnership",
    "inputs": [
      {
        "name": "newOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "CalldataCheckAdded",
    "inputs": [
      {
        "name": "check",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "CalldataCheckRemoved",
    "inputs": [
      {
        "name": "check",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "OwnershipTransferred",
    "inputs": [
      {
        "name": "previousOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "ProposerCheckAdded",
    "inputs": [
      {
        "name": "check",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "ProposerCheckRemoved",
    "inputs": [
      {
        "name": "check",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AddressAlreadyExists",
    "inputs": []
  },
  {
    "type": "error",
    "name": "AddressDoesNotExist",
    "inputs": []
  },
  {
    "type": "error",
    "name": "CalldataCheckFailed",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidAddress",
    "inputs": []
  },
  {
    "type": "error",
    "name": "OwnableInvalidOwner",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "OwnableUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "ProposerCheckFailed",
    "inputs": [
      {
        "name": "batchSubmitter",
        "type": "address",
        "internalType": "address"
      }
    ]
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod RequireAnyModule {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60803460b457601f61132a38819003918201601f19168301916001600160401b0383118484101760b85780849260209460405283398101031260b457516001600160a01b03908181169081900360b4578015609c575f80546001600160a01b03198116831782556040519316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a361125d90816100cd8239f35b604051631e4fbdf760e01b81525f6004820152602490fd5b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe604060808152600480361015610013575f80fd5b5f3560e01c806304a8cc50146105145780631ba39a12146104775780633dfb5ee71461042157806342fd07561461038657806370405b0b146102df578063715018a6146102885780638da5cb5b1461026157806398a7e5c2146101e8578063a7f736f21461014c578063babcc5391461011e5763f2fde38b14610094575f80fd5b3461011a57602036600319011261011a576100ad61058e565b906100b66109e8565b6001600160a01b039182169283156101045750505f54826001600160601b0360a01b8216175f55167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3005b905f6024925191631e4fbdf760e01b8352820152fd5b5f80fd5b823461011a57602036600319011261011a5760209061014361013e61058e565b6108c7565b90519015158152f35b50903461011a5761015c366105e8565b6101646109e8565b6001600160a01b0382169283156101d95761017e83610a13565b6101ca575061019b9190156101c15761019690611159565b610887565b7fe40fa38a25f48b660575fc03b5a6da8797474fa8c0c18dcec2edc2ed83ce5cd15f80a2005b61019690611075565b5163516c350f60e11b81528490fd5b5163e6c4247b60e01b81528490fd5b50903461011a576101f8366105e8565b6102006109e8565b6001600160a01b0382169283156101d95761021a83610a8e565b6101ca57506102329190156102585761019690610fa5565b7f7afa5278b11376deff82d6d0be865db73d637702728b7d2659fee00e3d11b9065f80a2005b61019690610edb565b823461011a575f36600319011261011a575f5490516001600160a01b039091168152602090f35b3461011a575f36600319011261011a576102a06109e8565b5f80546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b503461011a575f36600319011261011a576003546102fc816106a7565b915f8052602052825f20600191829160015f5260205260018060a01b039081865f2054165f935b610339575b86518061033588826105a4565b0390f35b8184108061037b575b156103765761035f9061035585886106fb565b8482169052610e9b565b90156103765761036f90936106d9565b9284610323565b610328565b508281161515610342565b503461011a57602036600319011261011a576103a061058e565b6103a86109e8565b6001600160a01b03818116939092908415610414576103c683610a8e565b1561040757846103e181866103da87610cfb565b1614610617565b7fd4c6584199318abf59e9599906d3eec550509b6d1d841bdab9913cd56b70cd375f80a2005b51633d0f293d60e01b8152fd5b5163e6c4247b60e01b8152fd5b50903461011a57602036600319011261011a57813567ffffffffffffffff9283821161011a573660238301121561011a5781013592831161011a57366024848301011161011a576020926024610143920161073b565b823461011a575f36600319011261011a57600180549080610497836106a7565b925f80526002602052845f2060015f5260205260018060a01b039081865f2054165f935b6104cc5786518061033588826105a4565b81841080610509575b15610376576104f2906104e885886106fb565b8482169052610e5b565b90156103765761050290936106d9565b92846104bb565b5082811615156104d5565b503461011a57602036600319011261011a5761052e61058e565b6105366109e8565b6001600160a01b038181169390929084156104145761055483610a13565b15610407578461056881866103da87610c42565b7fc83631d6961fb08d5ad589762c421f8256cb4db3acce1858effbf581a1d4f8505f80a2005b600435906001600160a01b038216820361011a57565b60209060206040818301928281528551809452019301915f5b8281106105cb575050505090565b83516001600160a01b0316855293810193928101926001016105bd565b604090600319011261011a576004356001600160a01b038116810361011a5790602435801515810361011a5790565b1561061e57565b60405162461bcd60e51b81526020600482015260136024820152721059191c995cdcc81b9bdd081c995b5bdd9959606a1b6044820152606490fd5b90601f8019910116810190811067ffffffffffffffff82111761067b57604052565b634e487b7160e01b5f52604160045260245ffd5b67ffffffffffffffff811161067b5760051b60200190565b906106b18261068f565b6106be6040519182610659565b82815280926106cf601f199161068f565b0190602036910137565b5f1981146106e75760010190565b634e487b7160e01b5f52601160045260245ffd5b805182101561070f5760209160051b010190565b634e487b7160e01b5f52603260045260245ffd5b9081602091031261011a5751801515810361011a5790565b60015f8190527f17ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3ec60209081527f560c5c35d362ebe12852e61b5bb1957021175ee6b552ac19e7c3fb4e272bed3f546001600160a01b03908116949293604093929160049190871561087a579596875b6107c1575b6040516323a9a4f760e01b8152600490fd5b8681168015610874578487518092633dfb5ee760e01b825282878301528860248301528160448a88828401375f818c8401015281601f19601f8d011681010301915afa90811561086a575f9161083d575b506108335761082090610e9b565b96901561082e5795876107aa565b6107af565b5050505050505090565b61085d9150853d8711610863575b6108558183610659565b810190610723565b5f610812565b503d61084b565b87513d5f823e3d90fd5b506107af565b5050505050505050600190565b1561088e57565b60405162461bcd60e51b81526020600482015260116024820152701059191c995cdcc81b9bdd081859191959607a1b6044820152606490fd5b60015f8190527fac33ff75c19e70fe83507db0d683fd3465c996598dc972688b7ace676c89077b60209081527f79c06e8c99a667adda63c5fa6f05695d29630fc62ad2dd069fa929d5714de89d546001600160a01b039490851692909160409084156109dc57909193845b610951575b60405163024b33f560e51b81528787166004820152602490fd5b86811680156109d6578260249185519283809263babcc53960e01b82528c8c1660048301525afa9081156109cc575f916109af575b506109a55761099490610e5b565b90156109a05784610932565b610937565b5050509250905090565b6109c69150833d8511610863576108558183610659565b5f610986565b84513d5f823e3d90fd5b50610937565b50505092505050600190565b5f546001600160a01b031633036109fb57565b60405163118cdaa760e01b8152336004820152602490fd5b60018060a01b0380911690815f52602060048152604090815f205f8052815282825f2054161580610a71575b15610a68575f805260048152815f209060015f52525f205416145f14610a6457600190565b5f90565b50505050600190565b50835f5260048152815f2060015f52815282825f20541615610a3f565b60018060a01b0380911690815f52602060028152604090815f205f8052815282825f2054161580610adf575b15610a68575f805260028152815f209060015f52525f205416145f14610a6457600190565b50835f5260028152815f2060015f52815282825f20541615610aba565b5f80527fac33ff75c19e70fe83507db0d683fd3465c996598dc972688b7ace676c89077b60209081527f6ee3efecae883df2d7ccda22610b4ca771a299e707cb0d65c4ec97dc4e6668ad546001600160a01b039160409183161580610b89575b15610b81575f805260028152815f209060015f52525f205416155f14610a6457600190565b505050600190565b5060028152815f2060015f52815282825f20541615610b5c565b5f80527f17ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3ec60209081527f396a5abb6bca56e91bb5dd6bbc43dc9c37f3b8d5af727f8b42952b318eb483f7546001600160a01b039160409183161580610c28575b15610b81575f805260048152815f209060015f52525f205416155f14610a6457600190565b5060048152815f2060015f52815282825f20541615610c03565b6001600160a01b038181169081158015610ceb575b610ce457815f52602060048152610c94604092835f205f8052835280845f20541690855f5260048452845f2060015f528452845f20541690610dad565b825f5260048152815f205f80528152815f20926001600160601b0360a01b938481541690555f5260048152815f209060015f52525f209081541690556003545f1981019081116106e75760035590565b5050505f90565b50610cf583610a13565b15610c57565b6001600160a01b038181169081158015610d9d575b610ce457815f52602060028152610d4d604092835f205f8052835280845f20541690855f5260028452845f2060015f528452845f20541690610e04565b825f5260028152815f205f80528152815f20926001600160601b0360a01b938481541690555f5260028152815f209060015f52525f209081541690556001545f1981019081116106e75760015590565b50610da783610a8e565b15610d10565b9060018060a01b0380911690815f52600460205260405f205f805260205260405f2092166001600160601b0360a01b9281848254161790555f52600460205260405f2060015f5260205260405f2091825416179055565b9060018060a01b0380911690815f52600260205260405f205f805260205260405f2092166001600160601b0360a01b9281848254161790555f52600260205260405f2060015f5260205260405f2091825416179055565b610e6481610a8e565b610e6f57505f905f90565b6001600160a01b039081165f908152600260209081526040808320600184529091529020541680151591565b610ea481610a13565b610eaf57505f905f90565b6001600160a01b039081165f908152600460209081526040808320600184529091529020541680151591565b610ee481610a8e565b1580610f97575b610ef457505f90565b7f6ee3efecae883df2d7ccda22610b4ca771a299e707cb0d65c4ec97dc4e6668ad80546001600160a01b039283165f818152600260208181526040808420600180865281845282862080546001600160a01b0319908116909155895481168817909955989096168085529282528084208885528252808420805488169095179094558280529390935220805490921617905580548082019081106106e757815590565b50610fa0610afc565b610eeb565b610fae81610a8e565b1580611067575b610fbe57505f90565b7f79c06e8c99a667adda63c5fa6f05695d29630fc62ad2dd069fa929d5714de89d80546001600160a01b038381165f8181526002602090815260408083208380528252822080546001600160a01b03199081169091556001928390527fac33ff75c19e70fe83507db0d683fd3465c996598dc972688b7ace676c89077b90915285541690911790935591926110569290911690610e04565b80548181018091116106e757815590565b50611070610afc565b610fb5565b61107e81610a13565b158061114b575b61108e57505f90565b7f396a5abb6bca56e91bb5dd6bbc43dc9c37f3b8d5af727f8b42952b318eb483f780546001600160a01b039283165f818152600460208181526040808420600180865281845282862080546001600160a01b0319908116909155895481168817909955989096168085528383528185208986528352818520805489169096179095558380529490529290208054909316179091556003549182019182106111385750600355600190565b601190634e487b7160e01b5f525260245ffd5b50611154610ba3565b611085565b61116281610a13565b1580611219575b61117257505f90565b7f560c5c35d362ebe12852e61b5bb1957021175ee6b552ac19e7c3fb4e272bed3f80546001600160a01b038084165f8181526004602090815260408083208380528252822080546001600160a01b031990811690915560019092527f17ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3ec90528454161790925561120392911690610dad565b600354600181018091116106e757600355600190565b50611222610ba3565b61116956fea2646970667358221220442683264b37b34df4fbc5ddff28d7e109e4ad1575a954c1b3a5b8da524cf13c64736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x804`\xB4W`\x1Fa\x13*8\x81\x90\x03\x91\x82\x01`\x1F\x19\x16\x83\x01\x91`\x01`\x01`@\x1B\x03\x83\x11\x84\x84\x10\x17`\xB8W\x80\x84\x92` \x94`@R\x839\x81\x01\x03\x12`\xB4WQ`\x01`\x01`\xA0\x1B\x03\x90\x81\x81\x16\x90\x81\x90\x03`\xB4W\x80\x15`\x9CW_\x80T`\x01`\x01`\xA0\x1B\x03\x19\x81\x16\x83\x17\x82U`@Q\x93\x16\x90\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x90\x80\xA3a\x12]\x90\x81a\0\xCD\x829\xF3[`@Qc\x1EO\xBD\xF7`\xE0\x1B\x81R_`\x04\x82\x01R`$\x90\xFD[_\x80\xFD[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD\xFE`@`\x80\x81R`\x04\x806\x10\x15a\0\x13W_\x80\xFD[_5`\xE0\x1C\x80c\x04\xA8\xCCP\x14a\x05\x14W\x80c\x1B\xA3\x9A\x12\x14a\x04wW\x80c=\xFB^\xE7\x14a\x04!W\x80cB\xFD\x07V\x14a\x03\x86W\x80cp@[\x0B\x14a\x02\xDFW\x80cqP\x18\xA6\x14a\x02\x88W\x80c\x8D\xA5\xCB[\x14a\x02aW\x80c\x98\xA7\xE5\xC2\x14a\x01\xE8W\x80c\xA7\xF76\xF2\x14a\x01LW\x80c\xBA\xBC\xC59\x14a\x01\x1EWc\xF2\xFD\xE3\x8B\x14a\0\x94W_\x80\xFD[4a\x01\x1AW` 6`\x03\x19\x01\x12a\x01\x1AWa\0\xADa\x05\x8EV[\x90a\0\xB6a\t\xE8V[`\x01`\x01`\xA0\x1B\x03\x91\x82\x16\x92\x83\x15a\x01\x04WPP_T\x82`\x01`\x01``\x1B\x03`\xA0\x1B\x82\x16\x17_U\x16\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0_\x80\xA3\0[\x90_`$\x92Q\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R\x82\x01R\xFD[_\x80\xFD[\x824a\x01\x1AW` 6`\x03\x19\x01\x12a\x01\x1AW` \x90a\x01Ca\x01>a\x05\x8EV[a\x08\xC7V[\x90Q\x90\x15\x15\x81R\xF3[P\x904a\x01\x1AWa\x01\\6a\x05\xE8V[a\x01da\t\xE8V[`\x01`\x01`\xA0\x1B\x03\x82\x16\x92\x83\x15a\x01\xD9Wa\x01~\x83a\n\x13V[a\x01\xCAWPa\x01\x9B\x91\x90\x15a\x01\xC1Wa\x01\x96\x90a\x11YV[a\x08\x87V[\x7F\xE4\x0F\xA3\x8A%\xF4\x8Bf\x05u\xFC\x03\xB5\xA6\xDA\x87\x97GO\xA8\xC0\xC1\x8D\xCE\xC2\xED\xC2\xED\x83\xCE\\\xD1_\x80\xA2\0[a\x01\x96\x90a\x10uV[QcQl5\x0F`\xE1\x1B\x81R\x84\x90\xFD[Qc\xE6\xC4${`\xE0\x1B\x81R\x84\x90\xFD[P\x904a\x01\x1AWa\x01\xF86a\x05\xE8V[a\x02\0a\t\xE8V[`\x01`\x01`\xA0\x1B\x03\x82\x16\x92\x83\x15a\x01\xD9Wa\x02\x1A\x83a\n\x8EV[a\x01\xCAWPa\x022\x91\x90\x15a\x02XWa\x01\x96\x90a\x0F\xA5V[\x7Fz\xFARx\xB1\x13v\xDE\xFF\x82\xD6\xD0\xBE\x86]\xB7=cw\x02r\x8B}&Y\xFE\xE0\x0E=\x11\xB9\x06_\x80\xA2\0[a\x01\x96\x90a\x0E\xDBV[\x824a\x01\x1AW_6`\x03\x19\x01\x12a\x01\x1AW_T\x90Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x90\xF3[4a\x01\x1AW_6`\x03\x19\x01\x12a\x01\x1AWa\x02\xA0a\t\xE8V[_\x80T`\x01`\x01`\xA0\x1B\x03\x19\x81\x16\x82U`\x01`\x01`\xA0\x1B\x03\x16\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x82\x80\xA3\0[P4a\x01\x1AW_6`\x03\x19\x01\x12a\x01\x1AW`\x03Ta\x02\xFC\x81a\x06\xA7V[\x91_\x80R` R\x82_ `\x01\x91\x82\x91`\x01_R` R`\x01\x80`\xA0\x1B\x03\x90\x81\x86_ T\x16_\x93[a\x039W[\x86Q\x80a\x035\x88\x82a\x05\xA4V[\x03\x90\xF3[\x81\x84\x10\x80a\x03{W[\x15a\x03vWa\x03_\x90a\x03U\x85\x88a\x06\xFBV[\x84\x82\x16\x90Ra\x0E\x9BV[\x90\x15a\x03vWa\x03o\x90\x93a\x06\xD9V[\x92\x84a\x03#V[a\x03(V[P\x82\x81\x16\x15\x15a\x03BV[P4a\x01\x1AW` 6`\x03\x19\x01\x12a\x01\x1AWa\x03\xA0a\x05\x8EV[a\x03\xA8a\t\xE8V[`\x01`\x01`\xA0\x1B\x03\x81\x81\x16\x93\x90\x92\x90\x84\x15a\x04\x14Wa\x03\xC6\x83a\n\x8EV[\x15a\x04\x07W\x84a\x03\xE1\x81\x86a\x03\xDA\x87a\x0C\xFBV[\x16\x14a\x06\x17V[\x7F\xD4\xC6XA\x991\x8A\xBFY\xE9Y\x99\x06\xD3\xEE\xC5PP\x9Bm\x1D\x84\x1B\xDA\xB9\x91<\xD5kp\xCD7_\x80\xA2\0[Qc=\x0F)=`\xE0\x1B\x81R\xFD[Qc\xE6\xC4${`\xE0\x1B\x81R\xFD[P\x904a\x01\x1AW` 6`\x03\x19\x01\x12a\x01\x1AW\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x92\x83\x82\x11a\x01\x1AW6`#\x83\x01\x12\x15a\x01\x1AW\x81\x015\x92\x83\x11a\x01\x1AW6`$\x84\x83\x01\x01\x11a\x01\x1AW` \x92`$a\x01C\x92\x01a\x07;V[\x824a\x01\x1AW_6`\x03\x19\x01\x12a\x01\x1AW`\x01\x80T\x90\x80a\x04\x97\x83a\x06\xA7V[\x92_\x80R`\x02` R\x84_ `\x01_R` R`\x01\x80`\xA0\x1B\x03\x90\x81\x86_ T\x16_\x93[a\x04\xCCW\x86Q\x80a\x035\x88\x82a\x05\xA4V[\x81\x84\x10\x80a\x05\tW[\x15a\x03vWa\x04\xF2\x90a\x04\xE8\x85\x88a\x06\xFBV[\x84\x82\x16\x90Ra\x0E[V[\x90\x15a\x03vWa\x05\x02\x90\x93a\x06\xD9V[\x92\x84a\x04\xBBV[P\x82\x81\x16\x15\x15a\x04\xD5V[P4a\x01\x1AW` 6`\x03\x19\x01\x12a\x01\x1AWa\x05.a\x05\x8EV[a\x056a\t\xE8V[`\x01`\x01`\xA0\x1B\x03\x81\x81\x16\x93\x90\x92\x90\x84\x15a\x04\x14Wa\x05T\x83a\n\x13V[\x15a\x04\x07W\x84a\x05h\x81\x86a\x03\xDA\x87a\x0CBV[\x7F\xC861\xD6\x96\x1F\xB0\x8DZ\xD5\x89v,B\x1F\x82V\xCBM\xB3\xAC\xCE\x18X\xEF\xFB\xF5\x81\xA1\xD4\xF8P_\x80\xA2\0[`\x045\x90`\x01`\x01`\xA0\x1B\x03\x82\x16\x82\x03a\x01\x1AWV[` \x90` `@\x81\x83\x01\x92\x82\x81R\x85Q\x80\x94R\x01\x93\x01\x91_[\x82\x81\x10a\x05\xCBWPPPP\x90V[\x83Q`\x01`\x01`\xA0\x1B\x03\x16\x85R\x93\x81\x01\x93\x92\x81\x01\x92`\x01\x01a\x05\xBDV[`@\x90`\x03\x19\x01\x12a\x01\x1AW`\x045`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x03a\x01\x1AW\x90`$5\x80\x15\x15\x81\x03a\x01\x1AW\x90V[\x15a\x06\x1EWV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x13`$\x82\x01Rr\x10Y\x19\x1C\x99\\\xDC\xC8\x1B\x9B\xDD\x08\x1C\x99[[\xDD\x99Y`j\x1B`D\x82\x01R`d\x90\xFD[\x90`\x1F\x80\x19\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x06{W`@RV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x06{W`\x05\x1B` \x01\x90V[\x90a\x06\xB1\x82a\x06\x8FV[a\x06\xBE`@Q\x91\x82a\x06YV[\x82\x81R\x80\x92a\x06\xCF`\x1F\x19\x91a\x06\x8FV[\x01\x90` 6\x91\x017V[_\x19\x81\x14a\x06\xE7W`\x01\x01\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[\x80Q\x82\x10\x15a\x07\x0FW` \x91`\x05\x1B\x01\x01\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[\x90\x81` \x91\x03\x12a\x01\x1AWQ\x80\x15\x15\x81\x03a\x01\x1AW\x90V[`\x01_\x81\x90R\x7F\x17\xEFV\x8E>\x12\xAB[\x9CrT\xA8\xD5\x84x\x81\x1D\xE0\x0F\x9En\xB3CE\xAC\xD5;\xF8\xFD\t\xD3\xEC` \x90\x81R\x7FV\x0C\\5\xD3b\xEB\xE1(R\xE6\x1B[\xB1\x95p!\x17^\xE6\xB5R\xAC\x19\xE7\xC3\xFBN'+\xED?T`\x01`\x01`\xA0\x1B\x03\x90\x81\x16\x94\x92\x93`@\x93\x92\x91`\x04\x91\x90\x87\x15a\x08zW\x95\x96\x87[a\x07\xC1W[`@Qc#\xA9\xA4\xF7`\xE0\x1B\x81R`\x04\x90\xFD[\x86\x81\x16\x80\x15a\x08tW\x84\x87Q\x80\x92c=\xFB^\xE7`\xE0\x1B\x82R\x82\x87\x83\x01R\x88`$\x83\x01R\x81`D\x8A\x88\x82\x84\x017_\x81\x8C\x84\x01\x01R\x81`\x1F\x19`\x1F\x8D\x01\x16\x81\x01\x03\x01\x91Z\xFA\x90\x81\x15a\x08jW_\x91a\x08=W[Pa\x083Wa\x08 \x90a\x0E\x9BV[\x96\x90\x15a\x08.W\x95\x87a\x07\xAAV[a\x07\xAFV[PPPPPPP\x90V[a\x08]\x91P\x85=\x87\x11a\x08cW[a\x08U\x81\x83a\x06YV[\x81\x01\x90a\x07#V[_a\x08\x12V[P=a\x08KV[\x87Q=_\x82>=\x90\xFD[Pa\x07\xAFV[PPPPPPPP`\x01\x90V[\x15a\x08\x8EWV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x11`$\x82\x01Rp\x10Y\x19\x1C\x99\\\xDC\xC8\x1B\x9B\xDD\x08\x18Y\x19\x19Y`z\x1B`D\x82\x01R`d\x90\xFD[`\x01_\x81\x90R\x7F\xAC3\xFFu\xC1\x9Ep\xFE\x83P}\xB0\xD6\x83\xFD4e\xC9\x96Y\x8D\xC9rh\x8Bz\xCEgl\x89\x07{` \x90\x81R\x7Fy\xC0n\x8C\x99\xA6g\xAD\xDAc\xC5\xFAo\x05i])c\x0F\xC6*\xD2\xDD\x06\x9F\xA9)\xD5qM\xE8\x9DT`\x01`\x01`\xA0\x1B\x03\x94\x90\x85\x16\x92\x90\x91`@\x90\x84\x15a\t\xDCW\x90\x91\x93\x84[a\tQW[`@Qc\x02K3\xF5`\xE5\x1B\x81R\x87\x87\x16`\x04\x82\x01R`$\x90\xFD[\x86\x81\x16\x80\x15a\t\xD6W\x82`$\x91\x85Q\x92\x83\x80\x92c\xBA\xBC\xC59`\xE0\x1B\x82R\x8C\x8C\x16`\x04\x83\x01RZ\xFA\x90\x81\x15a\t\xCCW_\x91a\t\xAFW[Pa\t\xA5Wa\t\x94\x90a\x0E[V[\x90\x15a\t\xA0W\x84a\t2V[a\t7V[PPP\x92P\x90P\x90V[a\t\xC6\x91P\x83=\x85\x11a\x08cWa\x08U\x81\x83a\x06YV[_a\t\x86V[\x84Q=_\x82>=\x90\xFD[Pa\t7V[PPP\x92PPP`\x01\x90V[_T`\x01`\x01`\xA0\x1B\x03\x163\x03a\t\xFBWV[`@Qc\x11\x8C\xDA\xA7`\xE0\x1B\x81R3`\x04\x82\x01R`$\x90\xFD[`\x01\x80`\xA0\x1B\x03\x80\x91\x16\x90\x81_R` `\x04\x81R`@\x90\x81_ _\x80R\x81R\x82\x82_ T\x16\x15\x80a\nqW[\x15a\nhW_\x80R`\x04\x81R\x81_ \x90`\x01_RR_ T\x16\x14_\x14a\ndW`\x01\x90V[_\x90V[PPPP`\x01\x90V[P\x83_R`\x04\x81R\x81_ `\x01_R\x81R\x82\x82_ T\x16\x15a\n?V[`\x01\x80`\xA0\x1B\x03\x80\x91\x16\x90\x81_R` `\x02\x81R`@\x90\x81_ _\x80R\x81R\x82\x82_ T\x16\x15\x80a\n\xDFW[\x15a\nhW_\x80R`\x02\x81R\x81_ \x90`\x01_RR_ T\x16\x14_\x14a\ndW`\x01\x90V[P\x83_R`\x02\x81R\x81_ `\x01_R\x81R\x82\x82_ T\x16\x15a\n\xBAV[_\x80R\x7F\xAC3\xFFu\xC1\x9Ep\xFE\x83P}\xB0\xD6\x83\xFD4e\xC9\x96Y\x8D\xC9rh\x8Bz\xCEgl\x89\x07{` \x90\x81R\x7Fn\xE3\xEF\xEC\xAE\x88=\xF2\xD7\xCC\xDA\"a\x0BL\xA7q\xA2\x99\xE7\x07\xCB\re\xC4\xEC\x97\xDCNfh\xADT`\x01`\x01`\xA0\x1B\x03\x91`@\x91\x83\x16\x15\x80a\x0B\x89W[\x15a\x0B\x81W_\x80R`\x02\x81R\x81_ \x90`\x01_RR_ T\x16\x15_\x14a\ndW`\x01\x90V[PPP`\x01\x90V[P`\x02\x81R\x81_ `\x01_R\x81R\x82\x82_ T\x16\x15a\x0B\\V[_\x80R\x7F\x17\xEFV\x8E>\x12\xAB[\x9CrT\xA8\xD5\x84x\x81\x1D\xE0\x0F\x9En\xB3CE\xAC\xD5;\xF8\xFD\t\xD3\xEC` \x90\x81R\x7F9jZ\xBBk\xCAV\xE9\x1B\xB5\xDDk\xBCC\xDC\x9C7\xF3\xB8\xD5\xAFr\x7F\x8BB\x95+1\x8E\xB4\x83\xF7T`\x01`\x01`\xA0\x1B\x03\x91`@\x91\x83\x16\x15\x80a\x0C(W[\x15a\x0B\x81W_\x80R`\x04\x81R\x81_ \x90`\x01_RR_ T\x16\x15_\x14a\ndW`\x01\x90V[P`\x04\x81R\x81_ `\x01_R\x81R\x82\x82_ T\x16\x15a\x0C\x03V[`\x01`\x01`\xA0\x1B\x03\x81\x81\x16\x90\x81\x15\x80\x15a\x0C\xEBW[a\x0C\xE4W\x81_R` `\x04\x81Ra\x0C\x94`@\x92\x83_ _\x80R\x83R\x80\x84_ T\x16\x90\x85_R`\x04\x84R\x84_ `\x01_R\x84R\x84_ T\x16\x90a\r\xADV[\x82_R`\x04\x81R\x81_ _\x80R\x81R\x81_ \x92`\x01`\x01``\x1B\x03`\xA0\x1B\x93\x84\x81T\x16\x90U_R`\x04\x81R\x81_ \x90`\x01_RR_ \x90\x81T\x16\x90U`\x03T_\x19\x81\x01\x90\x81\x11a\x06\xE7W`\x03U\x90V[PPP_\x90V[Pa\x0C\xF5\x83a\n\x13V[\x15a\x0CWV[`\x01`\x01`\xA0\x1B\x03\x81\x81\x16\x90\x81\x15\x80\x15a\r\x9DW[a\x0C\xE4W\x81_R` `\x02\x81Ra\rM`@\x92\x83_ _\x80R\x83R\x80\x84_ T\x16\x90\x85_R`\x02\x84R\x84_ `\x01_R\x84R\x84_ T\x16\x90a\x0E\x04V[\x82_R`\x02\x81R\x81_ _\x80R\x81R\x81_ \x92`\x01`\x01``\x1B\x03`\xA0\x1B\x93\x84\x81T\x16\x90U_R`\x02\x81R\x81_ \x90`\x01_RR_ \x90\x81T\x16\x90U`\x01T_\x19\x81\x01\x90\x81\x11a\x06\xE7W`\x01U\x90V[Pa\r\xA7\x83a\n\x8EV[\x15a\r\x10V[\x90`\x01\x80`\xA0\x1B\x03\x80\x91\x16\x90\x81_R`\x04` R`@_ _\x80R` R`@_ \x92\x16`\x01`\x01``\x1B\x03`\xA0\x1B\x92\x81\x84\x82T\x16\x17\x90U_R`\x04` R`@_ `\x01_R` R`@_ \x91\x82T\x16\x17\x90UV[\x90`\x01\x80`\xA0\x1B\x03\x80\x91\x16\x90\x81_R`\x02` R`@_ _\x80R` R`@_ \x92\x16`\x01`\x01``\x1B\x03`\xA0\x1B\x92\x81\x84\x82T\x16\x17\x90U_R`\x02` R`@_ `\x01_R` R`@_ \x91\x82T\x16\x17\x90UV[a\x0Ed\x81a\n\x8EV[a\x0EoWP_\x90_\x90V[`\x01`\x01`\xA0\x1B\x03\x90\x81\x16_\x90\x81R`\x02` \x90\x81R`@\x80\x83 `\x01\x84R\x90\x91R\x90 T\x16\x80\x15\x15\x91V[a\x0E\xA4\x81a\n\x13V[a\x0E\xAFWP_\x90_\x90V[`\x01`\x01`\xA0\x1B\x03\x90\x81\x16_\x90\x81R`\x04` \x90\x81R`@\x80\x83 `\x01\x84R\x90\x91R\x90 T\x16\x80\x15\x15\x91V[a\x0E\xE4\x81a\n\x8EV[\x15\x80a\x0F\x97W[a\x0E\xF4WP_\x90V[\x7Fn\xE3\xEF\xEC\xAE\x88=\xF2\xD7\xCC\xDA\"a\x0BL\xA7q\xA2\x99\xE7\x07\xCB\re\xC4\xEC\x97\xDCNfh\xAD\x80T`\x01`\x01`\xA0\x1B\x03\x92\x83\x16_\x81\x81R`\x02` \x81\x81R`@\x80\x84 `\x01\x80\x86R\x81\x84R\x82\x86 \x80T`\x01`\x01`\xA0\x1B\x03\x19\x90\x81\x16\x90\x91U\x89T\x81\x16\x88\x17\x90\x99U\x98\x90\x96\x16\x80\x85R\x92\x82R\x80\x84 \x88\x85R\x82R\x80\x84 \x80T\x88\x16\x90\x95\x17\x90\x94U\x82\x80R\x93\x90\x93R \x80T\x90\x92\x16\x17\x90U\x80T\x80\x82\x01\x90\x81\x10a\x06\xE7W\x81U\x90V[Pa\x0F\xA0a\n\xFCV[a\x0E\xEBV[a\x0F\xAE\x81a\n\x8EV[\x15\x80a\x10gW[a\x0F\xBEWP_\x90V[\x7Fy\xC0n\x8C\x99\xA6g\xAD\xDAc\xC5\xFAo\x05i])c\x0F\xC6*\xD2\xDD\x06\x9F\xA9)\xD5qM\xE8\x9D\x80T`\x01`\x01`\xA0\x1B\x03\x83\x81\x16_\x81\x81R`\x02` \x90\x81R`@\x80\x83 \x83\x80R\x82R\x82 \x80T`\x01`\x01`\xA0\x1B\x03\x19\x90\x81\x16\x90\x91U`\x01\x92\x83\x90R\x7F\xAC3\xFFu\xC1\x9Ep\xFE\x83P}\xB0\xD6\x83\xFD4e\xC9\x96Y\x8D\xC9rh\x8Bz\xCEgl\x89\x07{\x90\x91R\x85T\x16\x90\x91\x17\x90\x93U\x91\x92a\x10V\x92\x90\x91\x16\x90a\x0E\x04V[\x80T\x81\x81\x01\x80\x91\x11a\x06\xE7W\x81U\x90V[Pa\x10pa\n\xFCV[a\x0F\xB5V[a\x10~\x81a\n\x13V[\x15\x80a\x11KW[a\x10\x8EWP_\x90V[\x7F9jZ\xBBk\xCAV\xE9\x1B\xB5\xDDk\xBCC\xDC\x9C7\xF3\xB8\xD5\xAFr\x7F\x8BB\x95+1\x8E\xB4\x83\xF7\x80T`\x01`\x01`\xA0\x1B\x03\x92\x83\x16_\x81\x81R`\x04` \x81\x81R`@\x80\x84 `\x01\x80\x86R\x81\x84R\x82\x86 \x80T`\x01`\x01`\xA0\x1B\x03\x19\x90\x81\x16\x90\x91U\x89T\x81\x16\x88\x17\x90\x99U\x98\x90\x96\x16\x80\x85R\x83\x83R\x81\x85 \x89\x86R\x83R\x81\x85 \x80T\x89\x16\x90\x96\x17\x90\x95U\x83\x80R\x94\x90R\x92\x90 \x80T\x90\x93\x16\x17\x90\x91U`\x03T\x91\x82\x01\x91\x82\x10a\x118WP`\x03U`\x01\x90V[`\x11\x90cNH{q`\xE0\x1B_RR`$_\xFD[Pa\x11Ta\x0B\xA3V[a\x10\x85V[a\x11b\x81a\n\x13V[\x15\x80a\x12\x19W[a\x11rWP_\x90V[\x7FV\x0C\\5\xD3b\xEB\xE1(R\xE6\x1B[\xB1\x95p!\x17^\xE6\xB5R\xAC\x19\xE7\xC3\xFBN'+\xED?\x80T`\x01`\x01`\xA0\x1B\x03\x80\x84\x16_\x81\x81R`\x04` \x90\x81R`@\x80\x83 \x83\x80R\x82R\x82 \x80T`\x01`\x01`\xA0\x1B\x03\x19\x90\x81\x16\x90\x91U`\x01\x90\x92R\x7F\x17\xEFV\x8E>\x12\xAB[\x9CrT\xA8\xD5\x84x\x81\x1D\xE0\x0F\x9En\xB3CE\xAC\xD5;\xF8\xFD\t\xD3\xEC\x90R\x84T\x16\x17\x90\x92Ua\x12\x03\x92\x91\x16\x90a\r\xADV[`\x03T`\x01\x81\x01\x80\x91\x11a\x06\xE7W`\x03U`\x01\x90V[Pa\x12\"a\x0B\xA3V[a\x11iV\xFE\xA2dipfsX\"\x12 D&\x83&K7\xB3M\xF4\xFB\xC5\xDD\xFF(\xD7\xE1\t\xE4\xAD\x15u\xA9T\xC1\xB3\xA5\xB8\xDARL\xF1<dsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`@`\x80\x81R`\x04\x806\x10\x15a\0\x13W_\x80\xFD[_5`\xE0\x1C\x80c\x04\xA8\xCCP\x14a\x05\x14W\x80c\x1B\xA3\x9A\x12\x14a\x04wW\x80c=\xFB^\xE7\x14a\x04!W\x80cB\xFD\x07V\x14a\x03\x86W\x80cp@[\x0B\x14a\x02\xDFW\x80cqP\x18\xA6\x14a\x02\x88W\x80c\x8D\xA5\xCB[\x14a\x02aW\x80c\x98\xA7\xE5\xC2\x14a\x01\xE8W\x80c\xA7\xF76\xF2\x14a\x01LW\x80c\xBA\xBC\xC59\x14a\x01\x1EWc\xF2\xFD\xE3\x8B\x14a\0\x94W_\x80\xFD[4a\x01\x1AW` 6`\x03\x19\x01\x12a\x01\x1AWa\0\xADa\x05\x8EV[\x90a\0\xB6a\t\xE8V[`\x01`\x01`\xA0\x1B\x03\x91\x82\x16\x92\x83\x15a\x01\x04WPP_T\x82`\x01`\x01``\x1B\x03`\xA0\x1B\x82\x16\x17_U\x16\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0_\x80\xA3\0[\x90_`$\x92Q\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R\x82\x01R\xFD[_\x80\xFD[\x824a\x01\x1AW` 6`\x03\x19\x01\x12a\x01\x1AW` \x90a\x01Ca\x01>a\x05\x8EV[a\x08\xC7V[\x90Q\x90\x15\x15\x81R\xF3[P\x904a\x01\x1AWa\x01\\6a\x05\xE8V[a\x01da\t\xE8V[`\x01`\x01`\xA0\x1B\x03\x82\x16\x92\x83\x15a\x01\xD9Wa\x01~\x83a\n\x13V[a\x01\xCAWPa\x01\x9B\x91\x90\x15a\x01\xC1Wa\x01\x96\x90a\x11YV[a\x08\x87V[\x7F\xE4\x0F\xA3\x8A%\xF4\x8Bf\x05u\xFC\x03\xB5\xA6\xDA\x87\x97GO\xA8\xC0\xC1\x8D\xCE\xC2\xED\xC2\xED\x83\xCE\\\xD1_\x80\xA2\0[a\x01\x96\x90a\x10uV[QcQl5\x0F`\xE1\x1B\x81R\x84\x90\xFD[Qc\xE6\xC4${`\xE0\x1B\x81R\x84\x90\xFD[P\x904a\x01\x1AWa\x01\xF86a\x05\xE8V[a\x02\0a\t\xE8V[`\x01`\x01`\xA0\x1B\x03\x82\x16\x92\x83\x15a\x01\xD9Wa\x02\x1A\x83a\n\x8EV[a\x01\xCAWPa\x022\x91\x90\x15a\x02XWa\x01\x96\x90a\x0F\xA5V[\x7Fz\xFARx\xB1\x13v\xDE\xFF\x82\xD6\xD0\xBE\x86]\xB7=cw\x02r\x8B}&Y\xFE\xE0\x0E=\x11\xB9\x06_\x80\xA2\0[a\x01\x96\x90a\x0E\xDBV[\x824a\x01\x1AW_6`\x03\x19\x01\x12a\x01\x1AW_T\x90Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x90\xF3[4a\x01\x1AW_6`\x03\x19\x01\x12a\x01\x1AWa\x02\xA0a\t\xE8V[_\x80T`\x01`\x01`\xA0\x1B\x03\x19\x81\x16\x82U`\x01`\x01`\xA0\x1B\x03\x16\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x82\x80\xA3\0[P4a\x01\x1AW_6`\x03\x19\x01\x12a\x01\x1AW`\x03Ta\x02\xFC\x81a\x06\xA7V[\x91_\x80R` R\x82_ `\x01\x91\x82\x91`\x01_R` R`\x01\x80`\xA0\x1B\x03\x90\x81\x86_ T\x16_\x93[a\x039W[\x86Q\x80a\x035\x88\x82a\x05\xA4V[\x03\x90\xF3[\x81\x84\x10\x80a\x03{W[\x15a\x03vWa\x03_\x90a\x03U\x85\x88a\x06\xFBV[\x84\x82\x16\x90Ra\x0E\x9BV[\x90\x15a\x03vWa\x03o\x90\x93a\x06\xD9V[\x92\x84a\x03#V[a\x03(V[P\x82\x81\x16\x15\x15a\x03BV[P4a\x01\x1AW` 6`\x03\x19\x01\x12a\x01\x1AWa\x03\xA0a\x05\x8EV[a\x03\xA8a\t\xE8V[`\x01`\x01`\xA0\x1B\x03\x81\x81\x16\x93\x90\x92\x90\x84\x15a\x04\x14Wa\x03\xC6\x83a\n\x8EV[\x15a\x04\x07W\x84a\x03\xE1\x81\x86a\x03\xDA\x87a\x0C\xFBV[\x16\x14a\x06\x17V[\x7F\xD4\xC6XA\x991\x8A\xBFY\xE9Y\x99\x06\xD3\xEE\xC5PP\x9Bm\x1D\x84\x1B\xDA\xB9\x91<\xD5kp\xCD7_\x80\xA2\0[Qc=\x0F)=`\xE0\x1B\x81R\xFD[Qc\xE6\xC4${`\xE0\x1B\x81R\xFD[P\x904a\x01\x1AW` 6`\x03\x19\x01\x12a\x01\x1AW\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x92\x83\x82\x11a\x01\x1AW6`#\x83\x01\x12\x15a\x01\x1AW\x81\x015\x92\x83\x11a\x01\x1AW6`$\x84\x83\x01\x01\x11a\x01\x1AW` \x92`$a\x01C\x92\x01a\x07;V[\x824a\x01\x1AW_6`\x03\x19\x01\x12a\x01\x1AW`\x01\x80T\x90\x80a\x04\x97\x83a\x06\xA7V[\x92_\x80R`\x02` R\x84_ `\x01_R` R`\x01\x80`\xA0\x1B\x03\x90\x81\x86_ T\x16_\x93[a\x04\xCCW\x86Q\x80a\x035\x88\x82a\x05\xA4V[\x81\x84\x10\x80a\x05\tW[\x15a\x03vWa\x04\xF2\x90a\x04\xE8\x85\x88a\x06\xFBV[\x84\x82\x16\x90Ra\x0E[V[\x90\x15a\x03vWa\x05\x02\x90\x93a\x06\xD9V[\x92\x84a\x04\xBBV[P\x82\x81\x16\x15\x15a\x04\xD5V[P4a\x01\x1AW` 6`\x03\x19\x01\x12a\x01\x1AWa\x05.a\x05\x8EV[a\x056a\t\xE8V[`\x01`\x01`\xA0\x1B\x03\x81\x81\x16\x93\x90\x92\x90\x84\x15a\x04\x14Wa\x05T\x83a\n\x13V[\x15a\x04\x07W\x84a\x05h\x81\x86a\x03\xDA\x87a\x0CBV[\x7F\xC861\xD6\x96\x1F\xB0\x8DZ\xD5\x89v,B\x1F\x82V\xCBM\xB3\xAC\xCE\x18X\xEF\xFB\xF5\x81\xA1\xD4\xF8P_\x80\xA2\0[`\x045\x90`\x01`\x01`\xA0\x1B\x03\x82\x16\x82\x03a\x01\x1AWV[` \x90` `@\x81\x83\x01\x92\x82\x81R\x85Q\x80\x94R\x01\x93\x01\x91_[\x82\x81\x10a\x05\xCBWPPPP\x90V[\x83Q`\x01`\x01`\xA0\x1B\x03\x16\x85R\x93\x81\x01\x93\x92\x81\x01\x92`\x01\x01a\x05\xBDV[`@\x90`\x03\x19\x01\x12a\x01\x1AW`\x045`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x03a\x01\x1AW\x90`$5\x80\x15\x15\x81\x03a\x01\x1AW\x90V[\x15a\x06\x1EWV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x13`$\x82\x01Rr\x10Y\x19\x1C\x99\\\xDC\xC8\x1B\x9B\xDD\x08\x1C\x99[[\xDD\x99Y`j\x1B`D\x82\x01R`d\x90\xFD[\x90`\x1F\x80\x19\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x06{W`@RV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x06{W`\x05\x1B` \x01\x90V[\x90a\x06\xB1\x82a\x06\x8FV[a\x06\xBE`@Q\x91\x82a\x06YV[\x82\x81R\x80\x92a\x06\xCF`\x1F\x19\x91a\x06\x8FV[\x01\x90` 6\x91\x017V[_\x19\x81\x14a\x06\xE7W`\x01\x01\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[\x80Q\x82\x10\x15a\x07\x0FW` \x91`\x05\x1B\x01\x01\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[\x90\x81` \x91\x03\x12a\x01\x1AWQ\x80\x15\x15\x81\x03a\x01\x1AW\x90V[`\x01_\x81\x90R\x7F\x17\xEFV\x8E>\x12\xAB[\x9CrT\xA8\xD5\x84x\x81\x1D\xE0\x0F\x9En\xB3CE\xAC\xD5;\xF8\xFD\t\xD3\xEC` \x90\x81R\x7FV\x0C\\5\xD3b\xEB\xE1(R\xE6\x1B[\xB1\x95p!\x17^\xE6\xB5R\xAC\x19\xE7\xC3\xFBN'+\xED?T`\x01`\x01`\xA0\x1B\x03\x90\x81\x16\x94\x92\x93`@\x93\x92\x91`\x04\x91\x90\x87\x15a\x08zW\x95\x96\x87[a\x07\xC1W[`@Qc#\xA9\xA4\xF7`\xE0\x1B\x81R`\x04\x90\xFD[\x86\x81\x16\x80\x15a\x08tW\x84\x87Q\x80\x92c=\xFB^\xE7`\xE0\x1B\x82R\x82\x87\x83\x01R\x88`$\x83\x01R\x81`D\x8A\x88\x82\x84\x017_\x81\x8C\x84\x01\x01R\x81`\x1F\x19`\x1F\x8D\x01\x16\x81\x01\x03\x01\x91Z\xFA\x90\x81\x15a\x08jW_\x91a\x08=W[Pa\x083Wa\x08 \x90a\x0E\x9BV[\x96\x90\x15a\x08.W\x95\x87a\x07\xAAV[a\x07\xAFV[PPPPPPP\x90V[a\x08]\x91P\x85=\x87\x11a\x08cW[a\x08U\x81\x83a\x06YV[\x81\x01\x90a\x07#V[_a\x08\x12V[P=a\x08KV[\x87Q=_\x82>=\x90\xFD[Pa\x07\xAFV[PPPPPPPP`\x01\x90V[\x15a\x08\x8EWV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x11`$\x82\x01Rp\x10Y\x19\x1C\x99\\\xDC\xC8\x1B\x9B\xDD\x08\x18Y\x19\x19Y`z\x1B`D\x82\x01R`d\x90\xFD[`\x01_\x81\x90R\x7F\xAC3\xFFu\xC1\x9Ep\xFE\x83P}\xB0\xD6\x83\xFD4e\xC9\x96Y\x8D\xC9rh\x8Bz\xCEgl\x89\x07{` \x90\x81R\x7Fy\xC0n\x8C\x99\xA6g\xAD\xDAc\xC5\xFAo\x05i])c\x0F\xC6*\xD2\xDD\x06\x9F\xA9)\xD5qM\xE8\x9DT`\x01`\x01`\xA0\x1B\x03\x94\x90\x85\x16\x92\x90\x91`@\x90\x84\x15a\t\xDCW\x90\x91\x93\x84[a\tQW[`@Qc\x02K3\xF5`\xE5\x1B\x81R\x87\x87\x16`\x04\x82\x01R`$\x90\xFD[\x86\x81\x16\x80\x15a\t\xD6W\x82`$\x91\x85Q\x92\x83\x80\x92c\xBA\xBC\xC59`\xE0\x1B\x82R\x8C\x8C\x16`\x04\x83\x01RZ\xFA\x90\x81\x15a\t\xCCW_\x91a\t\xAFW[Pa\t\xA5Wa\t\x94\x90a\x0E[V[\x90\x15a\t\xA0W\x84a\t2V[a\t7V[PPP\x92P\x90P\x90V[a\t\xC6\x91P\x83=\x85\x11a\x08cWa\x08U\x81\x83a\x06YV[_a\t\x86V[\x84Q=_\x82>=\x90\xFD[Pa\t7V[PPP\x92PPP`\x01\x90V[_T`\x01`\x01`\xA0\x1B\x03\x163\x03a\t\xFBWV[`@Qc\x11\x8C\xDA\xA7`\xE0\x1B\x81R3`\x04\x82\x01R`$\x90\xFD[`\x01\x80`\xA0\x1B\x03\x80\x91\x16\x90\x81_R` `\x04\x81R`@\x90\x81_ _\x80R\x81R\x82\x82_ T\x16\x15\x80a\nqW[\x15a\nhW_\x80R`\x04\x81R\x81_ \x90`\x01_RR_ T\x16\x14_\x14a\ndW`\x01\x90V[_\x90V[PPPP`\x01\x90V[P\x83_R`\x04\x81R\x81_ `\x01_R\x81R\x82\x82_ T\x16\x15a\n?V[`\x01\x80`\xA0\x1B\x03\x80\x91\x16\x90\x81_R` `\x02\x81R`@\x90\x81_ _\x80R\x81R\x82\x82_ T\x16\x15\x80a\n\xDFW[\x15a\nhW_\x80R`\x02\x81R\x81_ \x90`\x01_RR_ T\x16\x14_\x14a\ndW`\x01\x90V[P\x83_R`\x02\x81R\x81_ `\x01_R\x81R\x82\x82_ T\x16\x15a\n\xBAV[_\x80R\x7F\xAC3\xFFu\xC1\x9Ep\xFE\x83P}\xB0\xD6\x83\xFD4e\xC9\x96Y\x8D\xC9rh\x8Bz\xCEgl\x89\x07{` \x90\x81R\x7Fn\xE3\xEF\xEC\xAE\x88=\xF2\xD7\xCC\xDA\"a\x0BL\xA7q\xA2\x99\xE7\x07\xCB\re\xC4\xEC\x97\xDCNfh\xADT`\x01`\x01`\xA0\x1B\x03\x91`@\x91\x83\x16\x15\x80a\x0B\x89W[\x15a\x0B\x81W_\x80R`\x02\x81R\x81_ \x90`\x01_RR_ T\x16\x15_\x14a\ndW`\x01\x90V[PPP`\x01\x90V[P`\x02\x81R\x81_ `\x01_R\x81R\x82\x82_ T\x16\x15a\x0B\\V[_\x80R\x7F\x17\xEFV\x8E>\x12\xAB[\x9CrT\xA8\xD5\x84x\x81\x1D\xE0\x0F\x9En\xB3CE\xAC\xD5;\xF8\xFD\t\xD3\xEC` \x90\x81R\x7F9jZ\xBBk\xCAV\xE9\x1B\xB5\xDDk\xBCC\xDC\x9C7\xF3\xB8\xD5\xAFr\x7F\x8BB\x95+1\x8E\xB4\x83\xF7T`\x01`\x01`\xA0\x1B\x03\x91`@\x91\x83\x16\x15\x80a\x0C(W[\x15a\x0B\x81W_\x80R`\x04\x81R\x81_ \x90`\x01_RR_ T\x16\x15_\x14a\ndW`\x01\x90V[P`\x04\x81R\x81_ `\x01_R\x81R\x82\x82_ T\x16\x15a\x0C\x03V[`\x01`\x01`\xA0\x1B\x03\x81\x81\x16\x90\x81\x15\x80\x15a\x0C\xEBW[a\x0C\xE4W\x81_R` `\x04\x81Ra\x0C\x94`@\x92\x83_ _\x80R\x83R\x80\x84_ T\x16\x90\x85_R`\x04\x84R\x84_ `\x01_R\x84R\x84_ T\x16\x90a\r\xADV[\x82_R`\x04\x81R\x81_ _\x80R\x81R\x81_ \x92`\x01`\x01``\x1B\x03`\xA0\x1B\x93\x84\x81T\x16\x90U_R`\x04\x81R\x81_ \x90`\x01_RR_ \x90\x81T\x16\x90U`\x03T_\x19\x81\x01\x90\x81\x11a\x06\xE7W`\x03U\x90V[PPP_\x90V[Pa\x0C\xF5\x83a\n\x13V[\x15a\x0CWV[`\x01`\x01`\xA0\x1B\x03\x81\x81\x16\x90\x81\x15\x80\x15a\r\x9DW[a\x0C\xE4W\x81_R` `\x02\x81Ra\rM`@\x92\x83_ _\x80R\x83R\x80\x84_ T\x16\x90\x85_R`\x02\x84R\x84_ `\x01_R\x84R\x84_ T\x16\x90a\x0E\x04V[\x82_R`\x02\x81R\x81_ _\x80R\x81R\x81_ \x92`\x01`\x01``\x1B\x03`\xA0\x1B\x93\x84\x81T\x16\x90U_R`\x02\x81R\x81_ \x90`\x01_RR_ \x90\x81T\x16\x90U`\x01T_\x19\x81\x01\x90\x81\x11a\x06\xE7W`\x01U\x90V[Pa\r\xA7\x83a\n\x8EV[\x15a\r\x10V[\x90`\x01\x80`\xA0\x1B\x03\x80\x91\x16\x90\x81_R`\x04` R`@_ _\x80R` R`@_ \x92\x16`\x01`\x01``\x1B\x03`\xA0\x1B\x92\x81\x84\x82T\x16\x17\x90U_R`\x04` R`@_ `\x01_R` R`@_ \x91\x82T\x16\x17\x90UV[\x90`\x01\x80`\xA0\x1B\x03\x80\x91\x16\x90\x81_R`\x02` R`@_ _\x80R` R`@_ \x92\x16`\x01`\x01``\x1B\x03`\xA0\x1B\x92\x81\x84\x82T\x16\x17\x90U_R`\x02` R`@_ `\x01_R` R`@_ \x91\x82T\x16\x17\x90UV[a\x0Ed\x81a\n\x8EV[a\x0EoWP_\x90_\x90V[`\x01`\x01`\xA0\x1B\x03\x90\x81\x16_\x90\x81R`\x02` \x90\x81R`@\x80\x83 `\x01\x84R\x90\x91R\x90 T\x16\x80\x15\x15\x91V[a\x0E\xA4\x81a\n\x13V[a\x0E\xAFWP_\x90_\x90V[`\x01`\x01`\xA0\x1B\x03\x90\x81\x16_\x90\x81R`\x04` \x90\x81R`@\x80\x83 `\x01\x84R\x90\x91R\x90 T\x16\x80\x15\x15\x91V[a\x0E\xE4\x81a\n\x8EV[\x15\x80a\x0F\x97W[a\x0E\xF4WP_\x90V[\x7Fn\xE3\xEF\xEC\xAE\x88=\xF2\xD7\xCC\xDA\"a\x0BL\xA7q\xA2\x99\xE7\x07\xCB\re\xC4\xEC\x97\xDCNfh\xAD\x80T`\x01`\x01`\xA0\x1B\x03\x92\x83\x16_\x81\x81R`\x02` \x81\x81R`@\x80\x84 `\x01\x80\x86R\x81\x84R\x82\x86 \x80T`\x01`\x01`\xA0\x1B\x03\x19\x90\x81\x16\x90\x91U\x89T\x81\x16\x88\x17\x90\x99U\x98\x90\x96\x16\x80\x85R\x92\x82R\x80\x84 \x88\x85R\x82R\x80\x84 \x80T\x88\x16\x90\x95\x17\x90\x94U\x82\x80R\x93\x90\x93R \x80T\x90\x92\x16\x17\x90U\x80T\x80\x82\x01\x90\x81\x10a\x06\xE7W\x81U\x90V[Pa\x0F\xA0a\n\xFCV[a\x0E\xEBV[a\x0F\xAE\x81a\n\x8EV[\x15\x80a\x10gW[a\x0F\xBEWP_\x90V[\x7Fy\xC0n\x8C\x99\xA6g\xAD\xDAc\xC5\xFAo\x05i])c\x0F\xC6*\xD2\xDD\x06\x9F\xA9)\xD5qM\xE8\x9D\x80T`\x01`\x01`\xA0\x1B\x03\x83\x81\x16_\x81\x81R`\x02` \x90\x81R`@\x80\x83 \x83\x80R\x82R\x82 \x80T`\x01`\x01`\xA0\x1B\x03\x19\x90\x81\x16\x90\x91U`\x01\x92\x83\x90R\x7F\xAC3\xFFu\xC1\x9Ep\xFE\x83P}\xB0\xD6\x83\xFD4e\xC9\x96Y\x8D\xC9rh\x8Bz\xCEgl\x89\x07{\x90\x91R\x85T\x16\x90\x91\x17\x90\x93U\x91\x92a\x10V\x92\x90\x91\x16\x90a\x0E\x04V[\x80T\x81\x81\x01\x80\x91\x11a\x06\xE7W\x81U\x90V[Pa\x10pa\n\xFCV[a\x0F\xB5V[a\x10~\x81a\n\x13V[\x15\x80a\x11KW[a\x10\x8EWP_\x90V[\x7F9jZ\xBBk\xCAV\xE9\x1B\xB5\xDDk\xBCC\xDC\x9C7\xF3\xB8\xD5\xAFr\x7F\x8BB\x95+1\x8E\xB4\x83\xF7\x80T`\x01`\x01`\xA0\x1B\x03\x92\x83\x16_\x81\x81R`\x04` \x81\x81R`@\x80\x84 `\x01\x80\x86R\x81\x84R\x82\x86 \x80T`\x01`\x01`\xA0\x1B\x03\x19\x90\x81\x16\x90\x91U\x89T\x81\x16\x88\x17\x90\x99U\x98\x90\x96\x16\x80\x85R\x83\x83R\x81\x85 \x89\x86R\x83R\x81\x85 \x80T\x89\x16\x90\x96\x17\x90\x95U\x83\x80R\x94\x90R\x92\x90 \x80T\x90\x93\x16\x17\x90\x91U`\x03T\x91\x82\x01\x91\x82\x10a\x118WP`\x03U`\x01\x90V[`\x11\x90cNH{q`\xE0\x1B_RR`$_\xFD[Pa\x11Ta\x0B\xA3V[a\x10\x85V[a\x11b\x81a\n\x13V[\x15\x80a\x12\x19W[a\x11rWP_\x90V[\x7FV\x0C\\5\xD3b\xEB\xE1(R\xE6\x1B[\xB1\x95p!\x17^\xE6\xB5R\xAC\x19\xE7\xC3\xFBN'+\xED?\x80T`\x01`\x01`\xA0\x1B\x03\x80\x84\x16_\x81\x81R`\x04` \x90\x81R`@\x80\x83 \x83\x80R\x82R\x82 \x80T`\x01`\x01`\xA0\x1B\x03\x19\x90\x81\x16\x90\x91U`\x01\x90\x92R\x7F\x17\xEFV\x8E>\x12\xAB[\x9CrT\xA8\xD5\x84x\x81\x1D\xE0\x0F\x9En\xB3CE\xAC\xD5;\xF8\xFD\t\xD3\xEC\x90R\x84T\x16\x17\x90\x92Ua\x12\x03\x92\x91\x16\x90a\r\xADV[`\x03T`\x01\x81\x01\x80\x91\x11a\x06\xE7W`\x03U`\x01\x90V[Pa\x12\"a\x0B\xA3V[a\x11iV\xFE\xA2dipfsX\"\x12 D&\x83&K7\xB3M\xF4\xFB\xC5\xDD\xFF(\xD7\xE1\t\xE4\xAD\x15u\xA9T\xC1\xB3\xA5\xB8\xDARL\xF1<dsolcC\0\x08\x19\x003",
    );
    /**Custom error with signature `AddressAlreadyExists()` and selector `0xa2d86a1e`.
```solidity
error AddressAlreadyExists();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AddressAlreadyExists {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AddressAlreadyExists> for UnderlyingRustTuple<'_> {
            fn from(value: AddressAlreadyExists) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AddressAlreadyExists {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AddressAlreadyExists {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AddressAlreadyExists()";
            const SELECTOR: [u8; 4] = [162u8, 216u8, 106u8, 30u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `AddressDoesNotExist()` and selector `0x3d0f293d`.
```solidity
error AddressDoesNotExist();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AddressDoesNotExist {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AddressDoesNotExist> for UnderlyingRustTuple<'_> {
            fn from(value: AddressDoesNotExist) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AddressDoesNotExist {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AddressDoesNotExist {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AddressDoesNotExist()";
            const SELECTOR: [u8; 4] = [61u8, 15u8, 41u8, 61u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `CalldataCheckFailed()` and selector `0x23a9a4f7`.
```solidity
error CalldataCheckFailed();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CalldataCheckFailed {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<CalldataCheckFailed> for UnderlyingRustTuple<'_> {
            fn from(value: CalldataCheckFailed) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for CalldataCheckFailed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for CalldataCheckFailed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "CalldataCheckFailed()";
            const SELECTOR: [u8; 4] = [35u8, 169u8, 164u8, 247u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `InvalidAddress()` and selector `0xe6c4247b`.
```solidity
error InvalidAddress();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidAddress {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidAddress> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidAddress) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidAddress {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidAddress {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidAddress()";
            const SELECTOR: [u8; 4] = [230u8, 196u8, 36u8, 123u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `OwnableInvalidOwner(address)` and selector `0x1e4fbdf7`.
```solidity
error OwnableInvalidOwner(address owner);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableInvalidOwner {
        pub owner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableInvalidOwner> for UnderlyingRustTuple<'_> {
            fn from(value: OwnableInvalidOwner) -> Self {
                (value.owner,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for OwnableInvalidOwner {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { owner: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableInvalidOwner {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableInvalidOwner(address)";
            const SELECTOR: [u8; 4] = [30u8, 79u8, 189u8, 247u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `OwnableUnauthorizedAccount(address)` and selector `0x118cdaa7`.
```solidity
error OwnableUnauthorizedAccount(address account);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableUnauthorizedAccount {
        pub account: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: OwnableUnauthorizedAccount) -> Self {
                (value.account,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for OwnableUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { account: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableUnauthorizedAccount(address)";
            const SELECTOR: [u8; 4] = [17u8, 140u8, 218u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `ProposerCheckFailed(address)` and selector `0x49667ea0`.
```solidity
error ProposerCheckFailed(address batchSubmitter);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ProposerCheckFailed {
        pub batchSubmitter: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ProposerCheckFailed> for UnderlyingRustTuple<'_> {
            fn from(value: ProposerCheckFailed) -> Self {
                (value.batchSubmitter,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ProposerCheckFailed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { batchSubmitter: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ProposerCheckFailed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ProposerCheckFailed(address)";
            const SELECTOR: [u8; 4] = [73u8, 102u8, 126u8, 160u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.batchSubmitter,
                    ),
                )
            }
        }
    };
    /**Event with signature `CalldataCheckAdded(address)` and selector `0xe40fa38a25f48b660575fc03b5a6da8797474fa8c0c18dcec2edc2ed83ce5cd1`.
```solidity
event CalldataCheckAdded(address indexed check);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct CalldataCheckAdded {
        #[allow(missing_docs)]
        pub check: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for CalldataCheckAdded {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "CalldataCheckAdded(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                228u8,
                15u8,
                163u8,
                138u8,
                37u8,
                244u8,
                139u8,
                102u8,
                5u8,
                117u8,
                252u8,
                3u8,
                181u8,
                166u8,
                218u8,
                135u8,
                151u8,
                71u8,
                79u8,
                168u8,
                192u8,
                193u8,
                141u8,
                206u8,
                194u8,
                237u8,
                194u8,
                237u8,
                131u8,
                206u8,
                92u8,
                209u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { check: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.check.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.check,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for CalldataCheckAdded {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&CalldataCheckAdded> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &CalldataCheckAdded) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `CalldataCheckRemoved(address)` and selector `0xc83631d6961fb08d5ad589762c421f8256cb4db3acce1858effbf581a1d4f850`.
```solidity
event CalldataCheckRemoved(address indexed check);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct CalldataCheckRemoved {
        #[allow(missing_docs)]
        pub check: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for CalldataCheckRemoved {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "CalldataCheckRemoved(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                200u8,
                54u8,
                49u8,
                214u8,
                150u8,
                31u8,
                176u8,
                141u8,
                90u8,
                213u8,
                137u8,
                118u8,
                44u8,
                66u8,
                31u8,
                130u8,
                86u8,
                203u8,
                77u8,
                179u8,
                172u8,
                206u8,
                24u8,
                88u8,
                239u8,
                251u8,
                245u8,
                129u8,
                161u8,
                212u8,
                248u8,
                80u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { check: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.check.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.check,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for CalldataCheckRemoved {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&CalldataCheckRemoved> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &CalldataCheckRemoved) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `OwnershipTransferred(address,address)` and selector `0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0`.
```solidity
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct OwnershipTransferred {
        #[allow(missing_docs)]
        pub previousOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OwnershipTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OwnershipTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousOwner: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousOwner.clone(),
                    self.newOwner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousOwner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OwnershipTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OwnershipTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &OwnershipTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `ProposerCheckAdded(address)` and selector `0x7afa5278b11376deff82d6d0be865db73d637702728b7d2659fee00e3d11b906`.
```solidity
event ProposerCheckAdded(address indexed check);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct ProposerCheckAdded {
        #[allow(missing_docs)]
        pub check: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for ProposerCheckAdded {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "ProposerCheckAdded(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                122u8,
                250u8,
                82u8,
                120u8,
                177u8,
                19u8,
                118u8,
                222u8,
                255u8,
                130u8,
                214u8,
                208u8,
                190u8,
                134u8,
                93u8,
                183u8,
                61u8,
                99u8,
                119u8,
                2u8,
                114u8,
                139u8,
                125u8,
                38u8,
                89u8,
                254u8,
                224u8,
                14u8,
                61u8,
                17u8,
                185u8,
                6u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { check: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.check.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.check,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for ProposerCheckAdded {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&ProposerCheckAdded> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &ProposerCheckAdded) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `ProposerCheckRemoved(address)` and selector `0xd4c6584199318abf59e9599906d3eec550509b6d1d841bdab9913cd56b70cd37`.
```solidity
event ProposerCheckRemoved(address indexed check);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct ProposerCheckRemoved {
        #[allow(missing_docs)]
        pub check: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for ProposerCheckRemoved {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "ProposerCheckRemoved(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                212u8,
                198u8,
                88u8,
                65u8,
                153u8,
                49u8,
                138u8,
                191u8,
                89u8,
                233u8,
                89u8,
                153u8,
                6u8,
                211u8,
                238u8,
                197u8,
                80u8,
                80u8,
                155u8,
                109u8,
                29u8,
                132u8,
                27u8,
                218u8,
                185u8,
                145u8,
                60u8,
                213u8,
                107u8,
                112u8,
                205u8,
                55u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { check: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.check.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.check,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for ProposerCheckRemoved {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&ProposerCheckRemoved> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &ProposerCheckRemoved) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address admin);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        pub admin: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value.admin,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { admin: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin,
                    ),
                )
            }
        }
    };
    /**Function with signature `addCalldataCheck(address,bool)` and selector `0xa7f736f2`.
```solidity
function addCalldataCheck(address _address, bool addToHead) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addCalldataCheckCall {
        pub _address: alloy::sol_types::private::Address,
        pub addToHead: bool,
    }
    ///Container type for the return parameters of the [`addCalldataCheck(address,bool)`](addCalldataCheckCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addCalldataCheckReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address, bool);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addCalldataCheckCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: addCalldataCheckCall) -> Self {
                    (value._address, value.addToHead)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for addCalldataCheckCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _address: tuple.0,
                        addToHead: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addCalldataCheckReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: addCalldataCheckReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for addCalldataCheckReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for addCalldataCheckCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = addCalldataCheckReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "addCalldataCheck(address,bool)";
            const SELECTOR: [u8; 4] = [167u8, 247u8, 54u8, 242u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._address,
                    ),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.addToHead,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `addProposerCheck(address,bool)` and selector `0x98a7e5c2`.
```solidity
function addProposerCheck(address _address, bool addToHead) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addProposerCheckCall {
        pub _address: alloy::sol_types::private::Address,
        pub addToHead: bool,
    }
    ///Container type for the return parameters of the [`addProposerCheck(address,bool)`](addProposerCheckCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addProposerCheckReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address, bool);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addProposerCheckCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: addProposerCheckCall) -> Self {
                    (value._address, value.addToHead)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for addProposerCheckCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _address: tuple.0,
                        addToHead: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addProposerCheckReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: addProposerCheckReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for addProposerCheckReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for addProposerCheckCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = addProposerCheckReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "addProposerCheck(address,bool)";
            const SELECTOR: [u8; 4] = [152u8, 167u8, 229u8, 194u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._address,
                    ),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.addToHead,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getAllCalldataChecks()` and selector `0x70405b0b`.
```solidity
function getAllCalldataChecks() external view returns (address[] memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAllCalldataChecksCall {}
    ///Container type for the return parameters of the [`getAllCalldataChecks()`](getAllCalldataChecksCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAllCalldataChecksReturn {
        pub _0: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAllCalldataChecksCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAllCalldataChecksCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAllCalldataChecksCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAllCalldataChecksReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAllCalldataChecksReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAllCalldataChecksReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getAllCalldataChecksCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getAllCalldataChecksReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getAllCalldataChecks()";
            const SELECTOR: [u8; 4] = [112u8, 64u8, 91u8, 11u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getAllProposerChecks()` and selector `0x1ba39a12`.
```solidity
function getAllProposerChecks() external view returns (address[] memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAllProposerChecksCall {}
    ///Container type for the return parameters of the [`getAllProposerChecks()`](getAllProposerChecksCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAllProposerChecksReturn {
        pub _0: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAllProposerChecksCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAllProposerChecksCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAllProposerChecksCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAllProposerChecksReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAllProposerChecksReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAllProposerChecksReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getAllProposerChecksCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getAllProposerChecksReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getAllProposerChecks()";
            const SELECTOR: [u8; 4] = [27u8, 163u8, 154u8, 18u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isAllowed(address)` and selector `0xbabcc539`.
```solidity
function isAllowed(address proposer) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedCall {
        pub proposer: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`isAllowed(address)`](isAllowedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedReturn {
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedCall> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedCall) -> Self {
                    (value.proposer,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { proposer: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isAllowedCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isAllowedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isAllowed(address)";
            const SELECTOR: [u8; 4] = [186u8, 188u8, 197u8, 57u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.proposer,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isCalldataAllowed(bytes)` and selector `0x3dfb5ee7`.
```solidity
function isCalldataAllowed(bytes memory data) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isCalldataAllowedCall {
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`isCalldataAllowed(bytes)`](isCalldataAllowedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isCalldataAllowedReturn {
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isCalldataAllowedCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: isCalldataAllowedCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isCalldataAllowedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isCalldataAllowedReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: isCalldataAllowedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isCalldataAllowedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isCalldataAllowedCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isCalldataAllowedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isCalldataAllowed(bytes)";
            const SELECTOR: [u8; 4] = [61u8, 251u8, 94u8, 231u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `owner()` and selector `0x8da5cb5b`.
```solidity
function owner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerCall {}
    ///Container type for the return parameters of the [`owner()`](ownerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "owner()";
            const SELECTOR: [u8; 4] = [141u8, 165u8, 203u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `removeCalldataCheck(address)` and selector `0x04a8cc50`.
```solidity
function removeCalldataCheck(address _address) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct removeCalldataCheckCall {
        pub _address: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`removeCalldataCheck(address)`](removeCalldataCheckCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct removeCalldataCheckReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<removeCalldataCheckCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: removeCalldataCheckCall) -> Self {
                    (value._address,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for removeCalldataCheckCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _address: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<removeCalldataCheckReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: removeCalldataCheckReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for removeCalldataCheckReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for removeCalldataCheckCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = removeCalldataCheckReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "removeCalldataCheck(address)";
            const SELECTOR: [u8; 4] = [4u8, 168u8, 204u8, 80u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._address,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `removeProposerCheck(address)` and selector `0x42fd0756`.
```solidity
function removeProposerCheck(address _address) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct removeProposerCheckCall {
        pub _address: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`removeProposerCheck(address)`](removeProposerCheckCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct removeProposerCheckReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<removeProposerCheckCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: removeProposerCheckCall) -> Self {
                    (value._address,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for removeProposerCheckCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _address: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<removeProposerCheckReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: removeProposerCheckReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for removeProposerCheckReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for removeProposerCheckCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = removeProposerCheckReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "removeProposerCheck(address)";
            const SELECTOR: [u8; 4] = [66u8, 253u8, 7u8, 86u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._address,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `renounceOwnership()` and selector `0x715018a6`.
```solidity
function renounceOwnership() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipCall {}
    ///Container type for the return parameters of the [`renounceOwnership()`](renounceOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceOwnershipCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceOwnership()";
            const SELECTOR: [u8; 4] = [113u8, 80u8, 24u8, 166u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferOwnership(address)` and selector `0xf2fde38b`.
```solidity
function transferOwnership(address newOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipCall {
        pub newOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferOwnership(address)`](transferOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipCall) -> Self {
                    (value.newOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferOwnershipCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferOwnership(address)";
            const SELECTOR: [u8; 4] = [242u8, 253u8, 227u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newOwner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`RequireAnyModule`](self) function calls.
    pub enum RequireAnyModuleCalls {
        addCalldataCheck(addCalldataCheckCall),
        addProposerCheck(addProposerCheckCall),
        getAllCalldataChecks(getAllCalldataChecksCall),
        getAllProposerChecks(getAllProposerChecksCall),
        isAllowed(isAllowedCall),
        isCalldataAllowed(isCalldataAllowedCall),
        owner(ownerCall),
        removeCalldataCheck(removeCalldataCheckCall),
        removeProposerCheck(removeProposerCheckCall),
        renounceOwnership(renounceOwnershipCall),
        transferOwnership(transferOwnershipCall),
    }
    #[automatically_derived]
    impl RequireAnyModuleCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [4u8, 168u8, 204u8, 80u8],
            [27u8, 163u8, 154u8, 18u8],
            [61u8, 251u8, 94u8, 231u8],
            [66u8, 253u8, 7u8, 86u8],
            [112u8, 64u8, 91u8, 11u8],
            [113u8, 80u8, 24u8, 166u8],
            [141u8, 165u8, 203u8, 91u8],
            [152u8, 167u8, 229u8, 194u8],
            [167u8, 247u8, 54u8, 242u8],
            [186u8, 188u8, 197u8, 57u8],
            [242u8, 253u8, 227u8, 139u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for RequireAnyModuleCalls {
        const NAME: &'static str = "RequireAnyModuleCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 11usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::addCalldataCheck(_) => {
                    <addCalldataCheckCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::addProposerCheck(_) => {
                    <addProposerCheckCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getAllCalldataChecks(_) => {
                    <getAllCalldataChecksCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getAllProposerChecks(_) => {
                    <getAllProposerChecksCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isAllowed(_) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isCalldataAllowed(_) => {
                    <isCalldataAllowedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::owner(_) => <ownerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::removeCalldataCheck(_) => {
                    <removeCalldataCheckCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::removeProposerCheck(_) => {
                    <removeProposerCheckCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::renounceOwnership(_) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferOwnership(_) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<RequireAnyModuleCalls>] = &[
                {
                    fn removeCalldataCheck(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAnyModuleCalls> {
                        <removeCalldataCheckCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAnyModuleCalls::removeCalldataCheck)
                    }
                    removeCalldataCheck
                },
                {
                    fn getAllProposerChecks(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAnyModuleCalls> {
                        <getAllProposerChecksCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAnyModuleCalls::getAllProposerChecks)
                    }
                    getAllProposerChecks
                },
                {
                    fn isCalldataAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAnyModuleCalls> {
                        <isCalldataAllowedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAnyModuleCalls::isCalldataAllowed)
                    }
                    isCalldataAllowed
                },
                {
                    fn removeProposerCheck(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAnyModuleCalls> {
                        <removeProposerCheckCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAnyModuleCalls::removeProposerCheck)
                    }
                    removeProposerCheck
                },
                {
                    fn getAllCalldataChecks(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAnyModuleCalls> {
                        <getAllCalldataChecksCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAnyModuleCalls::getAllCalldataChecks)
                    }
                    getAllCalldataChecks
                },
                {
                    fn renounceOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAnyModuleCalls> {
                        <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAnyModuleCalls::renounceOwnership)
                    }
                    renounceOwnership
                },
                {
                    fn owner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAnyModuleCalls> {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAnyModuleCalls::owner)
                    }
                    owner
                },
                {
                    fn addProposerCheck(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAnyModuleCalls> {
                        <addProposerCheckCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAnyModuleCalls::addProposerCheck)
                    }
                    addProposerCheck
                },
                {
                    fn addCalldataCheck(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAnyModuleCalls> {
                        <addCalldataCheckCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAnyModuleCalls::addCalldataCheck)
                    }
                    addCalldataCheck
                },
                {
                    fn isAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAnyModuleCalls> {
                        <isAllowedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAnyModuleCalls::isAllowed)
                    }
                    isAllowed
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAnyModuleCalls> {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAnyModuleCalls::transferOwnership)
                    }
                    transferOwnership
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::addCalldataCheck(inner) => {
                    <addCalldataCheckCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::addProposerCheck(inner) => {
                    <addProposerCheckCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getAllCalldataChecks(inner) => {
                    <getAllCalldataChecksCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getAllProposerChecks(inner) => {
                    <getAllProposerChecksCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isCalldataAllowed(inner) => {
                    <isCalldataAllowedCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::removeCalldataCheck(inner) => {
                    <removeCalldataCheckCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::removeProposerCheck(inner) => {
                    <removeProposerCheckCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::addCalldataCheck(inner) => {
                    <addCalldataCheckCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::addProposerCheck(inner) => {
                    <addProposerCheckCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getAllCalldataChecks(inner) => {
                    <getAllCalldataChecksCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getAllProposerChecks(inner) => {
                    <getAllProposerChecksCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isCalldataAllowed(inner) => {
                    <isCalldataAllowedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::removeCalldataCheck(inner) => {
                    <removeCalldataCheckCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::removeProposerCheck(inner) => {
                    <removeProposerCheckCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`RequireAnyModule`](self) custom errors.
    pub enum RequireAnyModuleErrors {
        AddressAlreadyExists(AddressAlreadyExists),
        AddressDoesNotExist(AddressDoesNotExist),
        CalldataCheckFailed(CalldataCheckFailed),
        InvalidAddress(InvalidAddress),
        OwnableInvalidOwner(OwnableInvalidOwner),
        OwnableUnauthorizedAccount(OwnableUnauthorizedAccount),
        ProposerCheckFailed(ProposerCheckFailed),
    }
    #[automatically_derived]
    impl RequireAnyModuleErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [17u8, 140u8, 218u8, 167u8],
            [30u8, 79u8, 189u8, 247u8],
            [35u8, 169u8, 164u8, 247u8],
            [61u8, 15u8, 41u8, 61u8],
            [73u8, 102u8, 126u8, 160u8],
            [162u8, 216u8, 106u8, 30u8],
            [230u8, 196u8, 36u8, 123u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for RequireAnyModuleErrors {
        const NAME: &'static str = "RequireAnyModuleErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 7usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AddressAlreadyExists(_) => {
                    <AddressAlreadyExists as alloy_sol_types::SolError>::SELECTOR
                }
                Self::AddressDoesNotExist(_) => {
                    <AddressDoesNotExist as alloy_sol_types::SolError>::SELECTOR
                }
                Self::CalldataCheckFailed(_) => {
                    <CalldataCheckFailed as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidAddress(_) => {
                    <InvalidAddress as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableInvalidOwner(_) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableUnauthorizedAccount(_) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ProposerCheckFailed(_) => {
                    <ProposerCheckFailed as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<RequireAnyModuleErrors>] = &[
                {
                    fn OwnableUnauthorizedAccount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAnyModuleErrors> {
                        <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAnyModuleErrors::OwnableUnauthorizedAccount)
                    }
                    OwnableUnauthorizedAccount
                },
                {
                    fn OwnableInvalidOwner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAnyModuleErrors> {
                        <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAnyModuleErrors::OwnableInvalidOwner)
                    }
                    OwnableInvalidOwner
                },
                {
                    fn CalldataCheckFailed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAnyModuleErrors> {
                        <CalldataCheckFailed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAnyModuleErrors::CalldataCheckFailed)
                    }
                    CalldataCheckFailed
                },
                {
                    fn AddressDoesNotExist(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAnyModuleErrors> {
                        <AddressDoesNotExist as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAnyModuleErrors::AddressDoesNotExist)
                    }
                    AddressDoesNotExist
                },
                {
                    fn ProposerCheckFailed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAnyModuleErrors> {
                        <ProposerCheckFailed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAnyModuleErrors::ProposerCheckFailed)
                    }
                    ProposerCheckFailed
                },
                {
                    fn AddressAlreadyExists(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAnyModuleErrors> {
                        <AddressAlreadyExists as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAnyModuleErrors::AddressAlreadyExists)
                    }
                    AddressAlreadyExists
                },
                {
                    fn InvalidAddress(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAnyModuleErrors> {
                        <InvalidAddress as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAnyModuleErrors::InvalidAddress)
                    }
                    InvalidAddress
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AddressAlreadyExists(inner) => {
                    <AddressAlreadyExists as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::AddressDoesNotExist(inner) => {
                    <AddressDoesNotExist as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::CalldataCheckFailed(inner) => {
                    <CalldataCheckFailed as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidAddress(inner) => {
                    <InvalidAddress as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ProposerCheckFailed(inner) => {
                    <ProposerCheckFailed as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AddressAlreadyExists(inner) => {
                    <AddressAlreadyExists as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::AddressDoesNotExist(inner) => {
                    <AddressDoesNotExist as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::CalldataCheckFailed(inner) => {
                    <CalldataCheckFailed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidAddress(inner) => {
                    <InvalidAddress as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ProposerCheckFailed(inner) => {
                    <ProposerCheckFailed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`RequireAnyModule`](self) events.
    pub enum RequireAnyModuleEvents {
        CalldataCheckAdded(CalldataCheckAdded),
        CalldataCheckRemoved(CalldataCheckRemoved),
        OwnershipTransferred(OwnershipTransferred),
        ProposerCheckAdded(ProposerCheckAdded),
        ProposerCheckRemoved(ProposerCheckRemoved),
    }
    #[automatically_derived]
    impl RequireAnyModuleEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                122u8,
                250u8,
                82u8,
                120u8,
                177u8,
                19u8,
                118u8,
                222u8,
                255u8,
                130u8,
                214u8,
                208u8,
                190u8,
                134u8,
                93u8,
                183u8,
                61u8,
                99u8,
                119u8,
                2u8,
                114u8,
                139u8,
                125u8,
                38u8,
                89u8,
                254u8,
                224u8,
                14u8,
                61u8,
                17u8,
                185u8,
                6u8,
            ],
            [
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ],
            [
                200u8,
                54u8,
                49u8,
                214u8,
                150u8,
                31u8,
                176u8,
                141u8,
                90u8,
                213u8,
                137u8,
                118u8,
                44u8,
                66u8,
                31u8,
                130u8,
                86u8,
                203u8,
                77u8,
                179u8,
                172u8,
                206u8,
                24u8,
                88u8,
                239u8,
                251u8,
                245u8,
                129u8,
                161u8,
                212u8,
                248u8,
                80u8,
            ],
            [
                212u8,
                198u8,
                88u8,
                65u8,
                153u8,
                49u8,
                138u8,
                191u8,
                89u8,
                233u8,
                89u8,
                153u8,
                6u8,
                211u8,
                238u8,
                197u8,
                80u8,
                80u8,
                155u8,
                109u8,
                29u8,
                132u8,
                27u8,
                218u8,
                185u8,
                145u8,
                60u8,
                213u8,
                107u8,
                112u8,
                205u8,
                55u8,
            ],
            [
                228u8,
                15u8,
                163u8,
                138u8,
                37u8,
                244u8,
                139u8,
                102u8,
                5u8,
                117u8,
                252u8,
                3u8,
                181u8,
                166u8,
                218u8,
                135u8,
                151u8,
                71u8,
                79u8,
                168u8,
                192u8,
                193u8,
                141u8,
                206u8,
                194u8,
                237u8,
                194u8,
                237u8,
                131u8,
                206u8,
                92u8,
                209u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for RequireAnyModuleEvents {
        const NAME: &'static str = "RequireAnyModuleEvents";
        const COUNT: usize = 5usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <CalldataCheckAdded as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <CalldataCheckAdded as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::CalldataCheckAdded)
                }
                Some(
                    <CalldataCheckRemoved as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <CalldataCheckRemoved as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::CalldataCheckRemoved)
                }
                Some(
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::OwnershipTransferred)
                }
                Some(
                    <ProposerCheckAdded as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <ProposerCheckAdded as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::ProposerCheckAdded)
                }
                Some(
                    <ProposerCheckRemoved as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <ProposerCheckRemoved as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::ProposerCheckRemoved)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for RequireAnyModuleEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::CalldataCheckAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::CalldataCheckRemoved(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::ProposerCheckAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::ProposerCheckRemoved(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::CalldataCheckAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::CalldataCheckRemoved(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::ProposerCheckAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::ProposerCheckRemoved(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`RequireAnyModule`](self) contract instance.

See the [wrapper's documentation](`RequireAnyModuleInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> RequireAnyModuleInstance<T, P, N> {
        RequireAnyModuleInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        admin: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<RequireAnyModuleInstance<T, P, N>>,
    > {
        RequireAnyModuleInstance::<T, P, N>::deploy(provider, admin)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        admin: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        RequireAnyModuleInstance::<T, P, N>::deploy_builder(provider, admin)
    }
    /**A [`RequireAnyModule`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`RequireAnyModule`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct RequireAnyModuleInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for RequireAnyModuleInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("RequireAnyModuleInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > RequireAnyModuleInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`RequireAnyModule`](self) contract instance.

See the [wrapper's documentation](`RequireAnyModuleInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            admin: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<RequireAnyModuleInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, admin);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            admin: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { admin },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> RequireAnyModuleInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> RequireAnyModuleInstance<T, P, N> {
            RequireAnyModuleInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > RequireAnyModuleInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`addCalldataCheck`] function.
        pub fn addCalldataCheck(
            &self,
            _address: alloy::sol_types::private::Address,
            addToHead: bool,
        ) -> alloy_contract::SolCallBuilder<T, &P, addCalldataCheckCall, N> {
            self.call_builder(
                &addCalldataCheckCall {
                    _address,
                    addToHead,
                },
            )
        }
        ///Creates a new call builder for the [`addProposerCheck`] function.
        pub fn addProposerCheck(
            &self,
            _address: alloy::sol_types::private::Address,
            addToHead: bool,
        ) -> alloy_contract::SolCallBuilder<T, &P, addProposerCheckCall, N> {
            self.call_builder(
                &addProposerCheckCall {
                    _address,
                    addToHead,
                },
            )
        }
        ///Creates a new call builder for the [`getAllCalldataChecks`] function.
        pub fn getAllCalldataChecks(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getAllCalldataChecksCall, N> {
            self.call_builder(&getAllCalldataChecksCall {})
        }
        ///Creates a new call builder for the [`getAllProposerChecks`] function.
        pub fn getAllProposerChecks(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getAllProposerChecksCall, N> {
            self.call_builder(&getAllProposerChecksCall {})
        }
        ///Creates a new call builder for the [`isAllowed`] function.
        pub fn isAllowed(
            &self,
            proposer: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, isAllowedCall, N> {
            self.call_builder(&isAllowedCall { proposer })
        }
        ///Creates a new call builder for the [`isCalldataAllowed`] function.
        pub fn isCalldataAllowed(
            &self,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, isCalldataAllowedCall, N> {
            self.call_builder(&isCalldataAllowedCall { data })
        }
        ///Creates a new call builder for the [`owner`] function.
        pub fn owner(&self) -> alloy_contract::SolCallBuilder<T, &P, ownerCall, N> {
            self.call_builder(&ownerCall {})
        }
        ///Creates a new call builder for the [`removeCalldataCheck`] function.
        pub fn removeCalldataCheck(
            &self,
            _address: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, removeCalldataCheckCall, N> {
            self.call_builder(
                &removeCalldataCheckCall {
                    _address,
                },
            )
        }
        ///Creates a new call builder for the [`removeProposerCheck`] function.
        pub fn removeProposerCheck(
            &self,
            _address: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, removeProposerCheckCall, N> {
            self.call_builder(
                &removeProposerCheckCall {
                    _address,
                },
            )
        }
        ///Creates a new call builder for the [`renounceOwnership`] function.
        pub fn renounceOwnership(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, renounceOwnershipCall, N> {
            self.call_builder(&renounceOwnershipCall {})
        }
        ///Creates a new call builder for the [`transferOwnership`] function.
        pub fn transferOwnership(
            &self,
            newOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferOwnershipCall, N> {
            self.call_builder(&transferOwnershipCall { newOwner })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > RequireAnyModuleInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`CalldataCheckAdded`] event.
        pub fn CalldataCheckAdded_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, CalldataCheckAdded, N> {
            self.event_filter::<CalldataCheckAdded>()
        }
        ///Creates a new event filter for the [`CalldataCheckRemoved`] event.
        pub fn CalldataCheckRemoved_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, CalldataCheckRemoved, N> {
            self.event_filter::<CalldataCheckRemoved>()
        }
        ///Creates a new event filter for the [`OwnershipTransferred`] event.
        pub fn OwnershipTransferred_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, OwnershipTransferred, N> {
            self.event_filter::<OwnershipTransferred>()
        }
        ///Creates a new event filter for the [`ProposerCheckAdded`] event.
        pub fn ProposerCheckAdded_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, ProposerCheckAdded, N> {
            self.event_filter::<ProposerCheckAdded>()
        }
        ///Creates a new event filter for the [`ProposerCheckRemoved`] event.
        pub fn ProposerCheckRemoved_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, ProposerCheckRemoved, N> {
            self.event_filter::<ProposerCheckRemoved>()
        }
    }
}
