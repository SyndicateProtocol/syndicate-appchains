/**

Generated by the following Solidity interface...
```solidity
interface RequireAnyModule {
    error AddressAlreadyExists();
    error AddressDoesNotExist();
    error CheckFailed(address batchSubmitter);
    error InvalidAddress();
    error OwnableInvalidOwner(address owner);
    error OwnableUnauthorizedAccount(address account);

    event CheckAdded(address indexed check);
    event CheckRemoved(address indexed check);
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor(address admin);

    function addCheck(address _address, bool addToHead) external;
    function getAllChecks() external view returns (address[] memory);
    function isAllowed(address proposer) external view returns (bool);
    function owner() external view returns (address);
    function removeCheck(address _address) external;
    function renounceOwnership() external;
    function transferOwnership(address newOwner) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "admin",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "addCheck",
    "inputs": [
      {
        "name": "_address",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "addToHead",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "getAllChecks",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isAllowed",
    "inputs": [
      {
        "name": "proposer",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "removeCheck",
    "inputs": [
      {
        "name": "_address",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "renounceOwnership",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "transferOwnership",
    "inputs": [
      {
        "name": "newOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "CheckAdded",
    "inputs": [
      {
        "name": "check",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "CheckRemoved",
    "inputs": [
      {
        "name": "check",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "OwnershipTransferred",
    "inputs": [
      {
        "name": "previousOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AddressAlreadyExists",
    "inputs": []
  },
  {
    "type": "error",
    "name": "AddressDoesNotExist",
    "inputs": []
  },
  {
    "type": "error",
    "name": "CheckFailed",
    "inputs": [
      {
        "name": "batchSubmitter",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "InvalidAddress",
    "inputs": []
  },
  {
    "type": "error",
    "name": "OwnableInvalidOwner",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "OwnableUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ]
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod RequireAnyModule {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60806040523461002f576100196100146100f4565b610115565b610021610034565b61138f6102d6823961138f90f35b61003a565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906100669061003e565b810190811060018060401b0382111761007e57604052565b610048565b9061009661008f610034565b928361005c565b565b5f80fd5b60018060a01b031690565b6100b09061009c565b90565b6100bc816100a7565b036100c357565b5f80fd5b905051906100d4826100b3565b565b906020828203126100ef576100ec915f016100c7565b90565b610098565b6101126116658038038061010781610083565b9283398101906100d6565b90565b61011e90610170565b565b90565b90565b61013a61013561013f92610120565b610123565b61009c565b90565b61014b90610126565b90565b610157906100a7565b9052565b919061016e905f6020850194019061014e565b565b8061018b6101856101805f610142565b6100a7565b916100a7565b1461019b5761019990610276565b565b6101c56101a75f610142565b6101af610034565b918291631e4fbdf760e01b83526004830161015b565b0390fd5b5f1c90565b60018060a01b031690565b6101e56101ea916101c9565b6101ce565b90565b6101f790546101d9565b90565b5f1b90565b9061021060018060a01b03916101fa565b9181191691161790565b61022e6102296102339261009c565b610123565b61009c565b90565b61023f9061021a565b90565b61024b90610236565b90565b90565b9061026661026161026d92610242565b61024e565b82546101ff565b9055565b5f0190565b61027f5f6101ed565b610289825f610251565b906102bd6102b77f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610242565b91610242565b916102c6610034565b806102d081610271565b0390a356fe60806040526004361015610013575b6103b0565b61001d5f3561008c565b806368b23e5214610087578063715018a6146100825780638da5cb5b1461007d578063babcc53914610078578063c2b8d79c14610073578063c34d826a1461006e5763f2fde38b0361000e5761037d565b610348565b610275565b6101f0565b610194565b61013f565b6100fd565b60e01c90565b60405190565b5f80fd5b5f80fd5b60018060a01b031690565b6100b4906100a0565b90565b6100c0816100ab565b036100c757565b5f80fd5b905035906100d8826100b7565b565b906020828203126100f3576100f0915f016100cb565b90565b61009c565b5f0190565b3461012b576101156101103660046100da565b6105af565b61011d610092565b80610127816100f8565b0390f35b610098565b5f91031261013a57565b61009c565b3461016d5761014f366004610130565b6101576105df565b61015f610092565b80610169816100f8565b0390f35b610098565b61017b906100ab565b9052565b9190610192905f60208501940190610172565b565b346101c4576101a4366004610130565b6101c06101af61061e565b6101b7610092565b9182918261017f565b0390f35b610098565b151590565b6101d7906101c9565b9052565b91906101ee905f602085019401906101ce565b565b346102205761021c61020b6102063660046100da565b6106e5565b610213610092565b918291826101db565b0390f35b610098565b61022e816101c9565b0361023557565b5f80fd5b9050359061024682610225565b565b9190604083820312610270578061026461026d925f86016100cb565b93602001610239565b90565b61009c565b346102a45761028e610288366004610248565b906109ce565b610296610092565b806102a0816100f8565b0390f35b610098565b5190565b60209181520190565b60200190565b6102c5906100ab565b9052565b906102d6816020936102bc565b0190565b60200190565b906102fd6102f76102f0846102a9565b80936102ad565b926102b6565b905f5b81811061030d5750505090565b90919261032661032060019286516102c9565b946102da565b9101919091610300565b6103459160208201915f8184039101526102e0565b90565b3461037857610358366004610130565b610374610363610ae5565b61036b610092565b91829182610330565b0390f35b610098565b346103ab576103956103903660046100da565b610c2d565b61039d610092565b806103a7816100f8565b0390f35b610098565b5f80fd5b6103c5906103c0610c38565b6104b7565b565b90565b90565b6103e16103dc6103e6926103c7565b6103ca565b6100a0565b90565b6103f2906103cd565b90565b90565b60209181520190565b5f7f41646472657373206e6f742072656d6f76656400000000000000000000000000910152565b61043560136020926103f8565b61043e81610401565b0190565b6104579060208101905f818303910152610428565b90565b1561046157565b610469610092565b62461bcd60e51b81528061047f60048201610442565b0390fd5b61049761049261049c926100a0565b6103ca565b6100a0565b90565b6104a890610483565b90565b6104b49061049f565b90565b806104d26104cc6104c75f6103e9565b6100ab565b916100ab565b1461058c576104f46104ee60016104e984916103f5565b610cda565b156101c9565b6105695761052761050f600161050a84916103f5565b610f03565b61052161051b846100ab565b916100ab565b1461045a565b6105517fd37223475c04a60e97eb30bc3a38b4aef6a37def09d1ed6b88c881847362426d916104ab565b9061055a610092565b80610564816100f8565b0390a2565b610571610092565b633d0f293d60e01b815280610588600482016100f8565b0390fd5b610594610092565b63e6c4247b60e01b8152806105ab600482016100f8565b0390fd5b6105b8906103b4565b565b6105c2610c38565b6105ca6105cc565b565b6105dd6105d85f6103e9565b611072565b565b6105e76105ba565b565b5f90565b5f1c90565b60018060a01b031690565b61060961060e916105ed565b6105f2565b90565b61061b90546105fd565b90565b6106266105e9565b506106305f610611565b90565b5f90565b61064090610483565b90565b61064c90610637565b90565b6106589061049f565b90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906106839061065b565b810190811067ffffffffffffffff82111761069d57604052565b610665565b60e01b90565b905051906106b582610225565b565b906020828203126106d0576106cd915f016106a8565b90565b61009c565b6106dd610092565b3d5f823e3d90fd5b6106ed610633565b506107006106fb60016103f5565b6110d1565b918261071c6107166107115f6103e9565b6100ab565b916100ab565b1461082b57915b8061073e6107386107335f6103e9565b6100ab565b916100ab565b1461082057610783602061075961075484610643565b61064f565b63babcc53990610778869261076c610092565b958694859384936106a2565b83526004830161017f565b03915afa90811561081b575f916107ed575b506107e6576107b06107b8916107ab60016103f5565b61110b565b9190156101c9565b1561072357506107e291505b6107cc610092565b91829163654b7bc360e01b83526004830161017f565b0390fd5b5050600190565b61080e915060203d8111610814575b6108068183610679565b8101906106b7565b5f610795565b503d6107fc565b6106d5565b506107e291506107c4565b915050600190565b9061084591610840610c38565b6108c9565b565b5f7f41646472657373206e6f74206164646564000000000000000000000000000000910152565b61087b60116020926103f8565b61088481610847565b0190565b61089d9060208101905f81830391015261086e565b90565b156108a757565b6108af610092565b62461bcd60e51b8152806108c560048201610888565b0390fd5b90816108e56108df6108da5f6103e9565b6100ab565b916100ab565b146109ab576108fe60016108f984916103f5565b610cda565b610988575f146109675761092461091f600161091a84916103f5565b611157565b6108a0565b5b61094f7f75ec3ef6c1afb45dd0a2bbb3a4f14cac03241c33fc24c352e25ea690e22a9232916104ab565b90610958610092565b80610962816100f8565b0390a2565b61098361097e600161097984916103f5565b611137565b6108a0565b610925565b610990610092565b63516c350f60e11b8152806109a7600482016100f8565b0390fd5b6109b3610092565b63e6c4247b60e01b8152806109ca600482016100f8565b0390fd5b906109d891610833565b565b606090565b906109f26109eb610092565b9283610679565b565b67ffffffffffffffff8111610a0c5760208091020190565b610665565b90610a23610a1e836109f4565b6109df565b918252565b369037565b90610a52610a3a83610a11565b92602080610a4886936109f4565b9201910390610a28565b565b90565b610a6b610a66610a70926103c7565b6103ca565b610a54565b90565b634e487b7160e01b5f52601160045260245ffd5b610a9090610a54565b5f198114610a9e5760010190565b610a73565b634e487b7160e01b5f52603260045260245ffd5b90610ac1826102a9565b811015610ad2576020809102010190565b610aa3565b90610ae1906100ab565b9052565b610aed6109da565b50610b00610afb60016103f5565b61117b565b610b0981610a2d565b610b1b610b1660016103f5565b6110d1565b610b245f610a57565b905b81610b39610b3386610a54565b91610a54565b1080610b9e575b15610b9557610b7181610b62610b7993610b5d8791879092610ab7565b610ad7565b610b6c60016103f5565b61110b565b9190156101c9565b610b8d57610b879091610a87565b90610b26565b505090505b90565b50509050610b92565b5080610bba610bb4610baf5f6103e9565b6100ab565b916100ab565b1415610b40565b610bd290610bcd610c38565b610bd4565b565b80610bef610be9610be45f6103e9565b6100ab565b916100ab565b14610bff57610bfd90611072565b565b610c29610c0b5f6103e9565b610c13610092565b918291631e4fbdf760e01b83526004830161017f565b0390fd5b610c3690610bc1565b565b610c4061061e565b610c59610c53610c4e611192565b6100ab565b916100ab565b03610c6057565b610c89610c6b611192565b610c73610092565b91829163118cdaa760e01b83526004830161017f565b0390fd5b90610c97906104ab565b5f5260205260405f2090565b5f90565b610cb0906101c9565b90565b90610cbd90610ca7565b5f5260205260405f2090565b610cd25f6103e9565b90565b600190565b610ce2610633565b50610d0a610d05610cf7600184018590610c8d565b610cff610ca3565b90610cb3565b610611565b610d23610d1d610d18610cc9565b6100ab565b916100ab565b1480610d87575b5f14610d8057610d6a610d64610d5f610d516001610d709501610d4b610cc9565b90610c8d565b610d59610cd5565b90610cb3565b610611565b926100ab565b916100ab565b145f14610d7c57600190565b5f90565b5050600190565b50610daf610daa610d9c600184018590610c8d565b610da4610cd5565b90610cb3565b610611565b610dc8610dc2610dbd610cc9565b6100ab565b916100ab565b14610d2a565b610dd75f6103e9565b90565b1b90565b91906008610dfe910291610df860018060a01b0384610dda565b92610dda565b9181191691161790565b90565b9190610e21610e1c610e29936104ab565b610e08565b908354610dde565b9055565b610e3f91610e396105e9565b91610e0b565b565b90565b610e58610e53610e5d92610e41565b6103ca565b610a54565b90565b90565b610e6f610e74916105ed565b610e60565b90565b610e819054610e63565b90565b610e93610e9991939293610a54565b92610a54565b8203918211610ea457565b610a73565b5f1b90565b90610eba5f1991610ea9565b9181191691161790565b610ed8610ed3610edd92610a54565b6103ca565b610a54565b90565b90565b90610ef8610ef3610eff92610ec4565b610ee0565b8254610eae565b9055565b610f0b6105e9565b5081610f26610f20610f1b610dce565b6100ab565b916100ab565b14801561101d575b61100f5780610f9761100c92610f61610f5c610f4e600186018890610c8d565b610f56610ca3565b90610cb3565b610611565b610f88610f83610f75600187018990610c8d565b610f7d610cd5565b90610cb3565b610611565b90610f91610cd5565b9261119f565b610fbf5f610fba610fac600185018790610c8d565b610fb4610ca3565b90610cb3565b610e2d565b610fe75f610fe2610fd4600185018790610c8d565b610fdc610cd5565b90610cb3565b610e2d565b6110065f610ff56001610e44565b92019161100183610e77565b610e84565b90610ee3565b90565b505061101a5f6103e9565b90565b5061103261102c828490610cda565b156101c9565b610f2e565b9061104860018060a01b0391610ea9565b9181191691161790565b9061106761106261106e926104ab565b610e08565b8254611037565b9055565b61107b5f610611565b611085825f611052565b906110b96110b37f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0936104ab565b916104ab565b916110c2610092565b806110cc816100f8565b0390a3565b6111036110f56001611108936110e56105e9565b50016110ef610cc9565b90610c8d565b6110fd610cd5565b90610cb3565b610611565b90565b9061113191611118610633565b506111216105e9565b509061112b610cd5565b916111ea565b91909190565b9061115491611144610633565b509061114e610ca3565b91611266565b90565b9061117491611164610633565b509061116e610cd5565b91611266565b90565b5f90565b5f61118f91611188611177565b5001610e77565b90565b61119a6105e9565b503390565b91926111de6111e39260016111e8966111d7836111d26111c2858b018590610c8d565b6111cc89156101c9565b90610cb3565b611052565b9501610c8d565b610cb3565b611052565b565b916111f3610633565b506111fc6105e9565b5061121161120b848490610cda565b156101c9565b5f14611228575050505f906112255f6103e9565b90565b61123b6112409260016112459501610c8d565b610cb3565b610611565b908161126061125a611255610cc9565b6100ab565b916100ab565b14159190565b9161128592611273610633565b509161127d610cc9565b9091926112ad565b90565b61129761129d91939293610a54565b92610a54565b82018092116112a857565b610a73565b916112b6610633565b506112cb6112c5848390610cda565b156101c9565b80611348575b6112dd57505050505f90565b6113439361131e926113146113086113036112fc600189018590610c8d565b8590610cb3565b610611565b9186908590859261119f565b849290919261119f565b61133d5f61132c6001610e44565b92019161133883610e77565b611288565b90610ee3565b600190565b50611354838390610cda565b6112d156fea2646970667358221220f0985439a17efe2c414084861be26c5f31ef4d3013f9b01d690bbbecdd6b6ee864736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4a\0/Wa\0\x19a\0\x14a\0\xF4V[a\x01\x15V[a\0!a\x004V[a\x13\x8Fa\x02\xD6\x829a\x13\x8F\x90\xF3[a\0:V[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0f\x90a\0>V[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0~W`@RV[a\0HV[\x90a\0\x96a\0\x8Fa\x004V[\x92\x83a\0\\V[V[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xB0\x90a\0\x9CV[\x90V[a\0\xBC\x81a\0\xA7V[\x03a\0\xC3WV[_\x80\xFD[\x90PQ\x90a\0\xD4\x82a\0\xB3V[V[\x90` \x82\x82\x03\x12a\0\xEFWa\0\xEC\x91_\x01a\0\xC7V[\x90V[a\0\x98V[a\x01\x12a\x16e\x808\x03\x80a\x01\x07\x81a\0\x83V[\x92\x839\x81\x01\x90a\0\xD6V[\x90V[a\x01\x1E\x90a\x01pV[V[\x90V[\x90V[a\x01:a\x015a\x01?\x92a\x01 V[a\x01#V[a\0\x9CV[\x90V[a\x01K\x90a\x01&V[\x90V[a\x01W\x90a\0\xA7V[\x90RV[\x91\x90a\x01n\x90_` \x85\x01\x94\x01\x90a\x01NV[V[\x80a\x01\x8Ba\x01\x85a\x01\x80_a\x01BV[a\0\xA7V[\x91a\0\xA7V[\x14a\x01\x9BWa\x01\x99\x90a\x02vV[V[a\x01\xC5a\x01\xA7_a\x01BV[a\x01\xAFa\x004V[\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x01[V[\x03\x90\xFD[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01\xE5a\x01\xEA\x91a\x01\xC9V[a\x01\xCEV[\x90V[a\x01\xF7\x90Ta\x01\xD9V[\x90V[_\x1B\x90V[\x90a\x02\x10`\x01\x80`\xA0\x1B\x03\x91a\x01\xFAV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x02.a\x02)a\x023\x92a\0\x9CV[a\x01#V[a\0\x9CV[\x90V[a\x02?\x90a\x02\x1AV[\x90V[a\x02K\x90a\x026V[\x90V[\x90V[\x90a\x02fa\x02aa\x02m\x92a\x02BV[a\x02NV[\x82Ta\x01\xFFV[\x90UV[_\x01\x90V[a\x02\x7F_a\x01\xEDV[a\x02\x89\x82_a\x02QV[\x90a\x02\xBDa\x02\xB7\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x02BV[\x91a\x02BV[\x91a\x02\xC6a\x004V[\x80a\x02\xD0\x81a\x02qV[\x03\x90\xA3V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x03\xB0V[a\0\x1D_5a\0\x8CV[\x80ch\xB2>R\x14a\0\x87W\x80cqP\x18\xA6\x14a\0\x82W\x80c\x8D\xA5\xCB[\x14a\0}W\x80c\xBA\xBC\xC59\x14a\0xW\x80c\xC2\xB8\xD7\x9C\x14a\0sW\x80c\xC3M\x82j\x14a\0nWc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\x03}V[a\x03HV[a\x02uV[a\x01\xF0V[a\x01\x94V[a\x01?V[a\0\xFDV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xB4\x90a\0\xA0V[\x90V[a\0\xC0\x81a\0\xABV[\x03a\0\xC7WV[_\x80\xFD[\x90P5\x90a\0\xD8\x82a\0\xB7V[V[\x90` \x82\x82\x03\x12a\0\xF3Wa\0\xF0\x91_\x01a\0\xCBV[\x90V[a\0\x9CV[_\x01\x90V[4a\x01+Wa\x01\x15a\x01\x106`\x04a\0\xDAV[a\x05\xAFV[a\x01\x1Da\0\x92V[\x80a\x01'\x81a\0\xF8V[\x03\x90\xF3[a\0\x98V[_\x91\x03\x12a\x01:WV[a\0\x9CV[4a\x01mWa\x01O6`\x04a\x010V[a\x01Wa\x05\xDFV[a\x01_a\0\x92V[\x80a\x01i\x81a\0\xF8V[\x03\x90\xF3[a\0\x98V[a\x01{\x90a\0\xABV[\x90RV[\x91\x90a\x01\x92\x90_` \x85\x01\x94\x01\x90a\x01rV[V[4a\x01\xC4Wa\x01\xA46`\x04a\x010V[a\x01\xC0a\x01\xAFa\x06\x1EV[a\x01\xB7a\0\x92V[\x91\x82\x91\x82a\x01\x7FV[\x03\x90\xF3[a\0\x98V[\x15\x15\x90V[a\x01\xD7\x90a\x01\xC9V[\x90RV[\x91\x90a\x01\xEE\x90_` \x85\x01\x94\x01\x90a\x01\xCEV[V[4a\x02 Wa\x02\x1Ca\x02\x0Ba\x02\x066`\x04a\0\xDAV[a\x06\xE5V[a\x02\x13a\0\x92V[\x91\x82\x91\x82a\x01\xDBV[\x03\x90\xF3[a\0\x98V[a\x02.\x81a\x01\xC9V[\x03a\x025WV[_\x80\xFD[\x90P5\x90a\x02F\x82a\x02%V[V[\x91\x90`@\x83\x82\x03\x12a\x02pW\x80a\x02da\x02m\x92_\x86\x01a\0\xCBV[\x93` \x01a\x029V[\x90V[a\0\x9CV[4a\x02\xA4Wa\x02\x8Ea\x02\x886`\x04a\x02HV[\x90a\t\xCEV[a\x02\x96a\0\x92V[\x80a\x02\xA0\x81a\0\xF8V[\x03\x90\xF3[a\0\x98V[Q\x90V[` \x91\x81R\x01\x90V[` \x01\x90V[a\x02\xC5\x90a\0\xABV[\x90RV[\x90a\x02\xD6\x81` \x93a\x02\xBCV[\x01\x90V[` \x01\x90V[\x90a\x02\xFDa\x02\xF7a\x02\xF0\x84a\x02\xA9V[\x80\x93a\x02\xADV[\x92a\x02\xB6V[\x90_[\x81\x81\x10a\x03\rWPPP\x90V[\x90\x91\x92a\x03&a\x03 `\x01\x92\x86Qa\x02\xC9V[\x94a\x02\xDAV[\x91\x01\x91\x90\x91a\x03\0V[a\x03E\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x02\xE0V[\x90V[4a\x03xWa\x03X6`\x04a\x010V[a\x03ta\x03ca\n\xE5V[a\x03ka\0\x92V[\x91\x82\x91\x82a\x030V[\x03\x90\xF3[a\0\x98V[4a\x03\xABWa\x03\x95a\x03\x906`\x04a\0\xDAV[a\x0C-V[a\x03\x9Da\0\x92V[\x80a\x03\xA7\x81a\0\xF8V[\x03\x90\xF3[a\0\x98V[_\x80\xFD[a\x03\xC5\x90a\x03\xC0a\x0C8V[a\x04\xB7V[V[\x90V[\x90V[a\x03\xE1a\x03\xDCa\x03\xE6\x92a\x03\xC7V[a\x03\xCAV[a\0\xA0V[\x90V[a\x03\xF2\x90a\x03\xCDV[\x90V[\x90V[` \x91\x81R\x01\x90V[_\x7FAddress not removed\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x045`\x13` \x92a\x03\xF8V[a\x04>\x81a\x04\x01V[\x01\x90V[a\x04W\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x04(V[\x90V[\x15a\x04aWV[a\x04ia\0\x92V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x04\x7F`\x04\x82\x01a\x04BV[\x03\x90\xFD[a\x04\x97a\x04\x92a\x04\x9C\x92a\0\xA0V[a\x03\xCAV[a\0\xA0V[\x90V[a\x04\xA8\x90a\x04\x83V[\x90V[a\x04\xB4\x90a\x04\x9FV[\x90V[\x80a\x04\xD2a\x04\xCCa\x04\xC7_a\x03\xE9V[a\0\xABV[\x91a\0\xABV[\x14a\x05\x8CWa\x04\xF4a\x04\xEE`\x01a\x04\xE9\x84\x91a\x03\xF5V[a\x0C\xDAV[\x15a\x01\xC9V[a\x05iWa\x05'a\x05\x0F`\x01a\x05\n\x84\x91a\x03\xF5V[a\x0F\x03V[a\x05!a\x05\x1B\x84a\0\xABV[\x91a\0\xABV[\x14a\x04ZV[a\x05Q\x7F\xD3r#G\\\x04\xA6\x0E\x97\xEB0\xBC:8\xB4\xAE\xF6\xA3}\xEF\t\xD1\xEDk\x88\xC8\x81\x84sbBm\x91a\x04\xABV[\x90a\x05Za\0\x92V[\x80a\x05d\x81a\0\xF8V[\x03\x90\xA2V[a\x05qa\0\x92V[c=\x0F)=`\xE0\x1B\x81R\x80a\x05\x88`\x04\x82\x01a\0\xF8V[\x03\x90\xFD[a\x05\x94a\0\x92V[c\xE6\xC4${`\xE0\x1B\x81R\x80a\x05\xAB`\x04\x82\x01a\0\xF8V[\x03\x90\xFD[a\x05\xB8\x90a\x03\xB4V[V[a\x05\xC2a\x0C8V[a\x05\xCAa\x05\xCCV[V[a\x05\xDDa\x05\xD8_a\x03\xE9V[a\x10rV[V[a\x05\xE7a\x05\xBAV[V[_\x90V[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x06\ta\x06\x0E\x91a\x05\xEDV[a\x05\xF2V[\x90V[a\x06\x1B\x90Ta\x05\xFDV[\x90V[a\x06&a\x05\xE9V[Pa\x060_a\x06\x11V[\x90V[_\x90V[a\x06@\x90a\x04\x83V[\x90V[a\x06L\x90a\x067V[\x90V[a\x06X\x90a\x04\x9FV[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x06\x83\x90a\x06[V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x06\x9DW`@RV[a\x06eV[`\xE0\x1B\x90V[\x90PQ\x90a\x06\xB5\x82a\x02%V[V[\x90` \x82\x82\x03\x12a\x06\xD0Wa\x06\xCD\x91_\x01a\x06\xA8V[\x90V[a\0\x9CV[a\x06\xDDa\0\x92V[=_\x82>=\x90\xFD[a\x06\xEDa\x063V[Pa\x07\0a\x06\xFB`\x01a\x03\xF5V[a\x10\xD1V[\x91\x82a\x07\x1Ca\x07\x16a\x07\x11_a\x03\xE9V[a\0\xABV[\x91a\0\xABV[\x14a\x08+W\x91[\x80a\x07>a\x078a\x073_a\x03\xE9V[a\0\xABV[\x91a\0\xABV[\x14a\x08 Wa\x07\x83` a\x07Ya\x07T\x84a\x06CV[a\x06OV[c\xBA\xBC\xC59\x90a\x07x\x86\x92a\x07la\0\x92V[\x95\x86\x94\x85\x93\x84\x93a\x06\xA2V[\x83R`\x04\x83\x01a\x01\x7FV[\x03\x91Z\xFA\x90\x81\x15a\x08\x1BW_\x91a\x07\xEDW[Pa\x07\xE6Wa\x07\xB0a\x07\xB8\x91a\x07\xAB`\x01a\x03\xF5V[a\x11\x0BV[\x91\x90\x15a\x01\xC9V[\x15a\x07#WPa\x07\xE2\x91P[a\x07\xCCa\0\x92V[\x91\x82\x91ceK{\xC3`\xE0\x1B\x83R`\x04\x83\x01a\x01\x7FV[\x03\x90\xFD[PP`\x01\x90V[a\x08\x0E\x91P` =\x81\x11a\x08\x14W[a\x08\x06\x81\x83a\x06yV[\x81\x01\x90a\x06\xB7V[_a\x07\x95V[P=a\x07\xFCV[a\x06\xD5V[Pa\x07\xE2\x91Pa\x07\xC4V[\x91PP`\x01\x90V[\x90a\x08E\x91a\x08@a\x0C8V[a\x08\xC9V[V[_\x7FAddress not added\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x08{`\x11` \x92a\x03\xF8V[a\x08\x84\x81a\x08GV[\x01\x90V[a\x08\x9D\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x08nV[\x90V[\x15a\x08\xA7WV[a\x08\xAFa\0\x92V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x08\xC5`\x04\x82\x01a\x08\x88V[\x03\x90\xFD[\x90\x81a\x08\xE5a\x08\xDFa\x08\xDA_a\x03\xE9V[a\0\xABV[\x91a\0\xABV[\x14a\t\xABWa\x08\xFE`\x01a\x08\xF9\x84\x91a\x03\xF5V[a\x0C\xDAV[a\t\x88W_\x14a\tgWa\t$a\t\x1F`\x01a\t\x1A\x84\x91a\x03\xF5V[a\x11WV[a\x08\xA0V[[a\tO\x7Fu\xEC>\xF6\xC1\xAF\xB4]\xD0\xA2\xBB\xB3\xA4\xF1L\xAC\x03$\x1C3\xFC$\xC3R\xE2^\xA6\x90\xE2*\x922\x91a\x04\xABV[\x90a\tXa\0\x92V[\x80a\tb\x81a\0\xF8V[\x03\x90\xA2V[a\t\x83a\t~`\x01a\ty\x84\x91a\x03\xF5V[a\x117V[a\x08\xA0V[a\t%V[a\t\x90a\0\x92V[cQl5\x0F`\xE1\x1B\x81R\x80a\t\xA7`\x04\x82\x01a\0\xF8V[\x03\x90\xFD[a\t\xB3a\0\x92V[c\xE6\xC4${`\xE0\x1B\x81R\x80a\t\xCA`\x04\x82\x01a\0\xF8V[\x03\x90\xFD[\x90a\t\xD8\x91a\x083V[V[``\x90V[\x90a\t\xF2a\t\xEBa\0\x92V[\x92\x83a\x06yV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\n\x0CW` \x80\x91\x02\x01\x90V[a\x06eV[\x90a\n#a\n\x1E\x83a\t\xF4V[a\t\xDFV[\x91\x82RV[6\x907V[\x90a\nRa\n:\x83a\n\x11V[\x92` \x80a\nH\x86\x93a\t\xF4V[\x92\x01\x91\x03\x90a\n(V[V[\x90V[a\nka\nfa\np\x92a\x03\xC7V[a\x03\xCAV[a\nTV[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\n\x90\x90a\nTV[_\x19\x81\x14a\n\x9EW`\x01\x01\x90V[a\nsV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[\x90a\n\xC1\x82a\x02\xA9V[\x81\x10\x15a\n\xD2W` \x80\x91\x02\x01\x01\x90V[a\n\xA3V[\x90a\n\xE1\x90a\0\xABV[\x90RV[a\n\xEDa\t\xDAV[Pa\x0B\0a\n\xFB`\x01a\x03\xF5V[a\x11{V[a\x0B\t\x81a\n-V[a\x0B\x1Ba\x0B\x16`\x01a\x03\xF5V[a\x10\xD1V[a\x0B$_a\nWV[\x90[\x81a\x0B9a\x0B3\x86a\nTV[\x91a\nTV[\x10\x80a\x0B\x9EW[\x15a\x0B\x95Wa\x0Bq\x81a\x0Bba\x0By\x93a\x0B]\x87\x91\x87\x90\x92a\n\xB7V[a\n\xD7V[a\x0Bl`\x01a\x03\xF5V[a\x11\x0BV[\x91\x90\x15a\x01\xC9V[a\x0B\x8DWa\x0B\x87\x90\x91a\n\x87V[\x90a\x0B&V[PP\x90P[\x90V[PP\x90Pa\x0B\x92V[P\x80a\x0B\xBAa\x0B\xB4a\x0B\xAF_a\x03\xE9V[a\0\xABV[\x91a\0\xABV[\x14\x15a\x0B@V[a\x0B\xD2\x90a\x0B\xCDa\x0C8V[a\x0B\xD4V[V[\x80a\x0B\xEFa\x0B\xE9a\x0B\xE4_a\x03\xE9V[a\0\xABV[\x91a\0\xABV[\x14a\x0B\xFFWa\x0B\xFD\x90a\x10rV[V[a\x0C)a\x0C\x0B_a\x03\xE9V[a\x0C\x13a\0\x92V[\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x01\x7FV[\x03\x90\xFD[a\x0C6\x90a\x0B\xC1V[V[a\x0C@a\x06\x1EV[a\x0CYa\x0CSa\x0CNa\x11\x92V[a\0\xABV[\x91a\0\xABV[\x03a\x0C`WV[a\x0C\x89a\x0Cka\x11\x92V[a\x0Csa\0\x92V[\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x01\x7FV[\x03\x90\xFD[\x90a\x0C\x97\x90a\x04\xABV[_R` R`@_ \x90V[_\x90V[a\x0C\xB0\x90a\x01\xC9V[\x90V[\x90a\x0C\xBD\x90a\x0C\xA7V[_R` R`@_ \x90V[a\x0C\xD2_a\x03\xE9V[\x90V[`\x01\x90V[a\x0C\xE2a\x063V[Pa\r\na\r\x05a\x0C\xF7`\x01\x84\x01\x85\x90a\x0C\x8DV[a\x0C\xFFa\x0C\xA3V[\x90a\x0C\xB3V[a\x06\x11V[a\r#a\r\x1Da\r\x18a\x0C\xC9V[a\0\xABV[\x91a\0\xABV[\x14\x80a\r\x87W[_\x14a\r\x80Wa\rja\rda\r_a\rQ`\x01a\rp\x95\x01a\rKa\x0C\xC9V[\x90a\x0C\x8DV[a\rYa\x0C\xD5V[\x90a\x0C\xB3V[a\x06\x11V[\x92a\0\xABV[\x91a\0\xABV[\x14_\x14a\r|W`\x01\x90V[_\x90V[PP`\x01\x90V[Pa\r\xAFa\r\xAAa\r\x9C`\x01\x84\x01\x85\x90a\x0C\x8DV[a\r\xA4a\x0C\xD5V[\x90a\x0C\xB3V[a\x06\x11V[a\r\xC8a\r\xC2a\r\xBDa\x0C\xC9V[a\0\xABV[\x91a\0\xABV[\x14a\r*V[a\r\xD7_a\x03\xE9V[\x90V[\x1B\x90V[\x91\x90`\x08a\r\xFE\x91\x02\x91a\r\xF8`\x01\x80`\xA0\x1B\x03\x84a\r\xDAV[\x92a\r\xDAV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x91\x90a\x0E!a\x0E\x1Ca\x0E)\x93a\x04\xABV[a\x0E\x08V[\x90\x83Ta\r\xDEV[\x90UV[a\x0E?\x91a\x0E9a\x05\xE9V[\x91a\x0E\x0BV[V[\x90V[a\x0EXa\x0ESa\x0E]\x92a\x0EAV[a\x03\xCAV[a\nTV[\x90V[\x90V[a\x0Eoa\x0Et\x91a\x05\xEDV[a\x0E`V[\x90V[a\x0E\x81\x90Ta\x0EcV[\x90V[a\x0E\x93a\x0E\x99\x91\x93\x92\x93a\nTV[\x92a\nTV[\x82\x03\x91\x82\x11a\x0E\xA4WV[a\nsV[_\x1B\x90V[\x90a\x0E\xBA_\x19\x91a\x0E\xA9V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0E\xD8a\x0E\xD3a\x0E\xDD\x92a\nTV[a\x03\xCAV[a\nTV[\x90V[\x90V[\x90a\x0E\xF8a\x0E\xF3a\x0E\xFF\x92a\x0E\xC4V[a\x0E\xE0V[\x82Ta\x0E\xAEV[\x90UV[a\x0F\x0Ba\x05\xE9V[P\x81a\x0F&a\x0F a\x0F\x1Ba\r\xCEV[a\0\xABV[\x91a\0\xABV[\x14\x80\x15a\x10\x1DW[a\x10\x0FW\x80a\x0F\x97a\x10\x0C\x92a\x0Faa\x0F\\a\x0FN`\x01\x86\x01\x88\x90a\x0C\x8DV[a\x0FVa\x0C\xA3V[\x90a\x0C\xB3V[a\x06\x11V[a\x0F\x88a\x0F\x83a\x0Fu`\x01\x87\x01\x89\x90a\x0C\x8DV[a\x0F}a\x0C\xD5V[\x90a\x0C\xB3V[a\x06\x11V[\x90a\x0F\x91a\x0C\xD5V[\x92a\x11\x9FV[a\x0F\xBF_a\x0F\xBAa\x0F\xAC`\x01\x85\x01\x87\x90a\x0C\x8DV[a\x0F\xB4a\x0C\xA3V[\x90a\x0C\xB3V[a\x0E-V[a\x0F\xE7_a\x0F\xE2a\x0F\xD4`\x01\x85\x01\x87\x90a\x0C\x8DV[a\x0F\xDCa\x0C\xD5V[\x90a\x0C\xB3V[a\x0E-V[a\x10\x06_a\x0F\xF5`\x01a\x0EDV[\x92\x01\x91a\x10\x01\x83a\x0EwV[a\x0E\x84V[\x90a\x0E\xE3V[\x90V[PPa\x10\x1A_a\x03\xE9V[\x90V[Pa\x102a\x10,\x82\x84\x90a\x0C\xDAV[\x15a\x01\xC9V[a\x0F.V[\x90a\x10H`\x01\x80`\xA0\x1B\x03\x91a\x0E\xA9V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x10ga\x10ba\x10n\x92a\x04\xABV[a\x0E\x08V[\x82Ta\x107V[\x90UV[a\x10{_a\x06\x11V[a\x10\x85\x82_a\x10RV[\x90a\x10\xB9a\x10\xB3\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x04\xABV[\x91a\x04\xABV[\x91a\x10\xC2a\0\x92V[\x80a\x10\xCC\x81a\0\xF8V[\x03\x90\xA3V[a\x11\x03a\x10\xF5`\x01a\x11\x08\x93a\x10\xE5a\x05\xE9V[P\x01a\x10\xEFa\x0C\xC9V[\x90a\x0C\x8DV[a\x10\xFDa\x0C\xD5V[\x90a\x0C\xB3V[a\x06\x11V[\x90V[\x90a\x111\x91a\x11\x18a\x063V[Pa\x11!a\x05\xE9V[P\x90a\x11+a\x0C\xD5V[\x91a\x11\xEAV[\x91\x90\x91\x90V[\x90a\x11T\x91a\x11Da\x063V[P\x90a\x11Na\x0C\xA3V[\x91a\x12fV[\x90V[\x90a\x11t\x91a\x11da\x063V[P\x90a\x11na\x0C\xD5V[\x91a\x12fV[\x90V[_\x90V[_a\x11\x8F\x91a\x11\x88a\x11wV[P\x01a\x0EwV[\x90V[a\x11\x9Aa\x05\xE9V[P3\x90V[\x91\x92a\x11\xDEa\x11\xE3\x92`\x01a\x11\xE8\x96a\x11\xD7\x83a\x11\xD2a\x11\xC2\x85\x8B\x01\x85\x90a\x0C\x8DV[a\x11\xCC\x89\x15a\x01\xC9V[\x90a\x0C\xB3V[a\x10RV[\x95\x01a\x0C\x8DV[a\x0C\xB3V[a\x10RV[V[\x91a\x11\xF3a\x063V[Pa\x11\xFCa\x05\xE9V[Pa\x12\x11a\x12\x0B\x84\x84\x90a\x0C\xDAV[\x15a\x01\xC9V[_\x14a\x12(WPPP_\x90a\x12%_a\x03\xE9V[\x90V[a\x12;a\x12@\x92`\x01a\x12E\x95\x01a\x0C\x8DV[a\x0C\xB3V[a\x06\x11V[\x90\x81a\x12`a\x12Za\x12Ua\x0C\xC9V[a\0\xABV[\x91a\0\xABV[\x14\x15\x91\x90V[\x91a\x12\x85\x92a\x12sa\x063V[P\x91a\x12}a\x0C\xC9V[\x90\x91\x92a\x12\xADV[\x90V[a\x12\x97a\x12\x9D\x91\x93\x92\x93a\nTV[\x92a\nTV[\x82\x01\x80\x92\x11a\x12\xA8WV[a\nsV[\x91a\x12\xB6a\x063V[Pa\x12\xCBa\x12\xC5\x84\x83\x90a\x0C\xDAV[\x15a\x01\xC9V[\x80a\x13HW[a\x12\xDDWPPPP_\x90V[a\x13C\x93a\x13\x1E\x92a\x13\x14a\x13\x08a\x13\x03a\x12\xFC`\x01\x89\x01\x85\x90a\x0C\x8DV[\x85\x90a\x0C\xB3V[a\x06\x11V[\x91\x86\x90\x85\x90\x85\x92a\x11\x9FV[\x84\x92\x90\x91\x92a\x11\x9FV[a\x13=_a\x13,`\x01a\x0EDV[\x92\x01\x91a\x138\x83a\x0EwV[a\x12\x88V[\x90a\x0E\xE3V[`\x01\x90V[Pa\x13T\x83\x83\x90a\x0C\xDAV[a\x12\xD1V\xFE\xA2dipfsX\"\x12 \xF0\x98T9\xA1~\xFE,A@\x84\x86\x1B\xE2l_1\xEFM0\x13\xF9\xB0\x1Di\x0B\xBB\xEC\xDDkn\xE8dsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b6103b0565b61001d5f3561008c565b806368b23e5214610087578063715018a6146100825780638da5cb5b1461007d578063babcc53914610078578063c2b8d79c14610073578063c34d826a1461006e5763f2fde38b0361000e5761037d565b610348565b610275565b6101f0565b610194565b61013f565b6100fd565b60e01c90565b60405190565b5f80fd5b5f80fd5b60018060a01b031690565b6100b4906100a0565b90565b6100c0816100ab565b036100c757565b5f80fd5b905035906100d8826100b7565b565b906020828203126100f3576100f0915f016100cb565b90565b61009c565b5f0190565b3461012b576101156101103660046100da565b6105af565b61011d610092565b80610127816100f8565b0390f35b610098565b5f91031261013a57565b61009c565b3461016d5761014f366004610130565b6101576105df565b61015f610092565b80610169816100f8565b0390f35b610098565b61017b906100ab565b9052565b9190610192905f60208501940190610172565b565b346101c4576101a4366004610130565b6101c06101af61061e565b6101b7610092565b9182918261017f565b0390f35b610098565b151590565b6101d7906101c9565b9052565b91906101ee905f602085019401906101ce565b565b346102205761021c61020b6102063660046100da565b6106e5565b610213610092565b918291826101db565b0390f35b610098565b61022e816101c9565b0361023557565b5f80fd5b9050359061024682610225565b565b9190604083820312610270578061026461026d925f86016100cb565b93602001610239565b90565b61009c565b346102a45761028e610288366004610248565b906109ce565b610296610092565b806102a0816100f8565b0390f35b610098565b5190565b60209181520190565b60200190565b6102c5906100ab565b9052565b906102d6816020936102bc565b0190565b60200190565b906102fd6102f76102f0846102a9565b80936102ad565b926102b6565b905f5b81811061030d5750505090565b90919261032661032060019286516102c9565b946102da565b9101919091610300565b6103459160208201915f8184039101526102e0565b90565b3461037857610358366004610130565b610374610363610ae5565b61036b610092565b91829182610330565b0390f35b610098565b346103ab576103956103903660046100da565b610c2d565b61039d610092565b806103a7816100f8565b0390f35b610098565b5f80fd5b6103c5906103c0610c38565b6104b7565b565b90565b90565b6103e16103dc6103e6926103c7565b6103ca565b6100a0565b90565b6103f2906103cd565b90565b90565b60209181520190565b5f7f41646472657373206e6f742072656d6f76656400000000000000000000000000910152565b61043560136020926103f8565b61043e81610401565b0190565b6104579060208101905f818303910152610428565b90565b1561046157565b610469610092565b62461bcd60e51b81528061047f60048201610442565b0390fd5b61049761049261049c926100a0565b6103ca565b6100a0565b90565b6104a890610483565b90565b6104b49061049f565b90565b806104d26104cc6104c75f6103e9565b6100ab565b916100ab565b1461058c576104f46104ee60016104e984916103f5565b610cda565b156101c9565b6105695761052761050f600161050a84916103f5565b610f03565b61052161051b846100ab565b916100ab565b1461045a565b6105517fd37223475c04a60e97eb30bc3a38b4aef6a37def09d1ed6b88c881847362426d916104ab565b9061055a610092565b80610564816100f8565b0390a2565b610571610092565b633d0f293d60e01b815280610588600482016100f8565b0390fd5b610594610092565b63e6c4247b60e01b8152806105ab600482016100f8565b0390fd5b6105b8906103b4565b565b6105c2610c38565b6105ca6105cc565b565b6105dd6105d85f6103e9565b611072565b565b6105e76105ba565b565b5f90565b5f1c90565b60018060a01b031690565b61060961060e916105ed565b6105f2565b90565b61061b90546105fd565b90565b6106266105e9565b506106305f610611565b90565b5f90565b61064090610483565b90565b61064c90610637565b90565b6106589061049f565b90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906106839061065b565b810190811067ffffffffffffffff82111761069d57604052565b610665565b60e01b90565b905051906106b582610225565b565b906020828203126106d0576106cd915f016106a8565b90565b61009c565b6106dd610092565b3d5f823e3d90fd5b6106ed610633565b506107006106fb60016103f5565b6110d1565b918261071c6107166107115f6103e9565b6100ab565b916100ab565b1461082b57915b8061073e6107386107335f6103e9565b6100ab565b916100ab565b1461082057610783602061075961075484610643565b61064f565b63babcc53990610778869261076c610092565b958694859384936106a2565b83526004830161017f565b03915afa90811561081b575f916107ed575b506107e6576107b06107b8916107ab60016103f5565b61110b565b9190156101c9565b1561072357506107e291505b6107cc610092565b91829163654b7bc360e01b83526004830161017f565b0390fd5b5050600190565b61080e915060203d8111610814575b6108068183610679565b8101906106b7565b5f610795565b503d6107fc565b6106d5565b506107e291506107c4565b915050600190565b9061084591610840610c38565b6108c9565b565b5f7f41646472657373206e6f74206164646564000000000000000000000000000000910152565b61087b60116020926103f8565b61088481610847565b0190565b61089d9060208101905f81830391015261086e565b90565b156108a757565b6108af610092565b62461bcd60e51b8152806108c560048201610888565b0390fd5b90816108e56108df6108da5f6103e9565b6100ab565b916100ab565b146109ab576108fe60016108f984916103f5565b610cda565b610988575f146109675761092461091f600161091a84916103f5565b611157565b6108a0565b5b61094f7f75ec3ef6c1afb45dd0a2bbb3a4f14cac03241c33fc24c352e25ea690e22a9232916104ab565b90610958610092565b80610962816100f8565b0390a2565b61098361097e600161097984916103f5565b611137565b6108a0565b610925565b610990610092565b63516c350f60e11b8152806109a7600482016100f8565b0390fd5b6109b3610092565b63e6c4247b60e01b8152806109ca600482016100f8565b0390fd5b906109d891610833565b565b606090565b906109f26109eb610092565b9283610679565b565b67ffffffffffffffff8111610a0c5760208091020190565b610665565b90610a23610a1e836109f4565b6109df565b918252565b369037565b90610a52610a3a83610a11565b92602080610a4886936109f4565b9201910390610a28565b565b90565b610a6b610a66610a70926103c7565b6103ca565b610a54565b90565b634e487b7160e01b5f52601160045260245ffd5b610a9090610a54565b5f198114610a9e5760010190565b610a73565b634e487b7160e01b5f52603260045260245ffd5b90610ac1826102a9565b811015610ad2576020809102010190565b610aa3565b90610ae1906100ab565b9052565b610aed6109da565b50610b00610afb60016103f5565b61117b565b610b0981610a2d565b610b1b610b1660016103f5565b6110d1565b610b245f610a57565b905b81610b39610b3386610a54565b91610a54565b1080610b9e575b15610b9557610b7181610b62610b7993610b5d8791879092610ab7565b610ad7565b610b6c60016103f5565b61110b565b9190156101c9565b610b8d57610b879091610a87565b90610b26565b505090505b90565b50509050610b92565b5080610bba610bb4610baf5f6103e9565b6100ab565b916100ab565b1415610b40565b610bd290610bcd610c38565b610bd4565b565b80610bef610be9610be45f6103e9565b6100ab565b916100ab565b14610bff57610bfd90611072565b565b610c29610c0b5f6103e9565b610c13610092565b918291631e4fbdf760e01b83526004830161017f565b0390fd5b610c3690610bc1565b565b610c4061061e565b610c59610c53610c4e611192565b6100ab565b916100ab565b03610c6057565b610c89610c6b611192565b610c73610092565b91829163118cdaa760e01b83526004830161017f565b0390fd5b90610c97906104ab565b5f5260205260405f2090565b5f90565b610cb0906101c9565b90565b90610cbd90610ca7565b5f5260205260405f2090565b610cd25f6103e9565b90565b600190565b610ce2610633565b50610d0a610d05610cf7600184018590610c8d565b610cff610ca3565b90610cb3565b610611565b610d23610d1d610d18610cc9565b6100ab565b916100ab565b1480610d87575b5f14610d8057610d6a610d64610d5f610d516001610d709501610d4b610cc9565b90610c8d565b610d59610cd5565b90610cb3565b610611565b926100ab565b916100ab565b145f14610d7c57600190565b5f90565b5050600190565b50610daf610daa610d9c600184018590610c8d565b610da4610cd5565b90610cb3565b610611565b610dc8610dc2610dbd610cc9565b6100ab565b916100ab565b14610d2a565b610dd75f6103e9565b90565b1b90565b91906008610dfe910291610df860018060a01b0384610dda565b92610dda565b9181191691161790565b90565b9190610e21610e1c610e29936104ab565b610e08565b908354610dde565b9055565b610e3f91610e396105e9565b91610e0b565b565b90565b610e58610e53610e5d92610e41565b6103ca565b610a54565b90565b90565b610e6f610e74916105ed565b610e60565b90565b610e819054610e63565b90565b610e93610e9991939293610a54565b92610a54565b8203918211610ea457565b610a73565b5f1b90565b90610eba5f1991610ea9565b9181191691161790565b610ed8610ed3610edd92610a54565b6103ca565b610a54565b90565b90565b90610ef8610ef3610eff92610ec4565b610ee0565b8254610eae565b9055565b610f0b6105e9565b5081610f26610f20610f1b610dce565b6100ab565b916100ab565b14801561101d575b61100f5780610f9761100c92610f61610f5c610f4e600186018890610c8d565b610f56610ca3565b90610cb3565b610611565b610f88610f83610f75600187018990610c8d565b610f7d610cd5565b90610cb3565b610611565b90610f91610cd5565b9261119f565b610fbf5f610fba610fac600185018790610c8d565b610fb4610ca3565b90610cb3565b610e2d565b610fe75f610fe2610fd4600185018790610c8d565b610fdc610cd5565b90610cb3565b610e2d565b6110065f610ff56001610e44565b92019161100183610e77565b610e84565b90610ee3565b90565b505061101a5f6103e9565b90565b5061103261102c828490610cda565b156101c9565b610f2e565b9061104860018060a01b0391610ea9565b9181191691161790565b9061106761106261106e926104ab565b610e08565b8254611037565b9055565b61107b5f610611565b611085825f611052565b906110b96110b37f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0936104ab565b916104ab565b916110c2610092565b806110cc816100f8565b0390a3565b6111036110f56001611108936110e56105e9565b50016110ef610cc9565b90610c8d565b6110fd610cd5565b90610cb3565b610611565b90565b9061113191611118610633565b506111216105e9565b509061112b610cd5565b916111ea565b91909190565b9061115491611144610633565b509061114e610ca3565b91611266565b90565b9061117491611164610633565b509061116e610cd5565b91611266565b90565b5f90565b5f61118f91611188611177565b5001610e77565b90565b61119a6105e9565b503390565b91926111de6111e39260016111e8966111d7836111d26111c2858b018590610c8d565b6111cc89156101c9565b90610cb3565b611052565b9501610c8d565b610cb3565b611052565b565b916111f3610633565b506111fc6105e9565b5061121161120b848490610cda565b156101c9565b5f14611228575050505f906112255f6103e9565b90565b61123b6112409260016112459501610c8d565b610cb3565b610611565b908161126061125a611255610cc9565b6100ab565b916100ab565b14159190565b9161128592611273610633565b509161127d610cc9565b9091926112ad565b90565b61129761129d91939293610a54565b92610a54565b82018092116112a857565b610a73565b916112b6610633565b506112cb6112c5848390610cda565b156101c9565b80611348575b6112dd57505050505f90565b6113439361131e926113146113086113036112fc600189018590610c8d565b8590610cb3565b610611565b9186908590859261119f565b849290919261119f565b61133d5f61132c6001610e44565b92019161133883610e77565b611288565b90610ee3565b600190565b50611354838390610cda565b6112d156fea2646970667358221220f0985439a17efe2c414084861be26c5f31ef4d3013f9b01d690bbbecdd6b6ee864736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x03\xB0V[a\0\x1D_5a\0\x8CV[\x80ch\xB2>R\x14a\0\x87W\x80cqP\x18\xA6\x14a\0\x82W\x80c\x8D\xA5\xCB[\x14a\0}W\x80c\xBA\xBC\xC59\x14a\0xW\x80c\xC2\xB8\xD7\x9C\x14a\0sW\x80c\xC3M\x82j\x14a\0nWc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\x03}V[a\x03HV[a\x02uV[a\x01\xF0V[a\x01\x94V[a\x01?V[a\0\xFDV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xB4\x90a\0\xA0V[\x90V[a\0\xC0\x81a\0\xABV[\x03a\0\xC7WV[_\x80\xFD[\x90P5\x90a\0\xD8\x82a\0\xB7V[V[\x90` \x82\x82\x03\x12a\0\xF3Wa\0\xF0\x91_\x01a\0\xCBV[\x90V[a\0\x9CV[_\x01\x90V[4a\x01+Wa\x01\x15a\x01\x106`\x04a\0\xDAV[a\x05\xAFV[a\x01\x1Da\0\x92V[\x80a\x01'\x81a\0\xF8V[\x03\x90\xF3[a\0\x98V[_\x91\x03\x12a\x01:WV[a\0\x9CV[4a\x01mWa\x01O6`\x04a\x010V[a\x01Wa\x05\xDFV[a\x01_a\0\x92V[\x80a\x01i\x81a\0\xF8V[\x03\x90\xF3[a\0\x98V[a\x01{\x90a\0\xABV[\x90RV[\x91\x90a\x01\x92\x90_` \x85\x01\x94\x01\x90a\x01rV[V[4a\x01\xC4Wa\x01\xA46`\x04a\x010V[a\x01\xC0a\x01\xAFa\x06\x1EV[a\x01\xB7a\0\x92V[\x91\x82\x91\x82a\x01\x7FV[\x03\x90\xF3[a\0\x98V[\x15\x15\x90V[a\x01\xD7\x90a\x01\xC9V[\x90RV[\x91\x90a\x01\xEE\x90_` \x85\x01\x94\x01\x90a\x01\xCEV[V[4a\x02 Wa\x02\x1Ca\x02\x0Ba\x02\x066`\x04a\0\xDAV[a\x06\xE5V[a\x02\x13a\0\x92V[\x91\x82\x91\x82a\x01\xDBV[\x03\x90\xF3[a\0\x98V[a\x02.\x81a\x01\xC9V[\x03a\x025WV[_\x80\xFD[\x90P5\x90a\x02F\x82a\x02%V[V[\x91\x90`@\x83\x82\x03\x12a\x02pW\x80a\x02da\x02m\x92_\x86\x01a\0\xCBV[\x93` \x01a\x029V[\x90V[a\0\x9CV[4a\x02\xA4Wa\x02\x8Ea\x02\x886`\x04a\x02HV[\x90a\t\xCEV[a\x02\x96a\0\x92V[\x80a\x02\xA0\x81a\0\xF8V[\x03\x90\xF3[a\0\x98V[Q\x90V[` \x91\x81R\x01\x90V[` \x01\x90V[a\x02\xC5\x90a\0\xABV[\x90RV[\x90a\x02\xD6\x81` \x93a\x02\xBCV[\x01\x90V[` \x01\x90V[\x90a\x02\xFDa\x02\xF7a\x02\xF0\x84a\x02\xA9V[\x80\x93a\x02\xADV[\x92a\x02\xB6V[\x90_[\x81\x81\x10a\x03\rWPPP\x90V[\x90\x91\x92a\x03&a\x03 `\x01\x92\x86Qa\x02\xC9V[\x94a\x02\xDAV[\x91\x01\x91\x90\x91a\x03\0V[a\x03E\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x02\xE0V[\x90V[4a\x03xWa\x03X6`\x04a\x010V[a\x03ta\x03ca\n\xE5V[a\x03ka\0\x92V[\x91\x82\x91\x82a\x030V[\x03\x90\xF3[a\0\x98V[4a\x03\xABWa\x03\x95a\x03\x906`\x04a\0\xDAV[a\x0C-V[a\x03\x9Da\0\x92V[\x80a\x03\xA7\x81a\0\xF8V[\x03\x90\xF3[a\0\x98V[_\x80\xFD[a\x03\xC5\x90a\x03\xC0a\x0C8V[a\x04\xB7V[V[\x90V[\x90V[a\x03\xE1a\x03\xDCa\x03\xE6\x92a\x03\xC7V[a\x03\xCAV[a\0\xA0V[\x90V[a\x03\xF2\x90a\x03\xCDV[\x90V[\x90V[` \x91\x81R\x01\x90V[_\x7FAddress not removed\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x045`\x13` \x92a\x03\xF8V[a\x04>\x81a\x04\x01V[\x01\x90V[a\x04W\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x04(V[\x90V[\x15a\x04aWV[a\x04ia\0\x92V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x04\x7F`\x04\x82\x01a\x04BV[\x03\x90\xFD[a\x04\x97a\x04\x92a\x04\x9C\x92a\0\xA0V[a\x03\xCAV[a\0\xA0V[\x90V[a\x04\xA8\x90a\x04\x83V[\x90V[a\x04\xB4\x90a\x04\x9FV[\x90V[\x80a\x04\xD2a\x04\xCCa\x04\xC7_a\x03\xE9V[a\0\xABV[\x91a\0\xABV[\x14a\x05\x8CWa\x04\xF4a\x04\xEE`\x01a\x04\xE9\x84\x91a\x03\xF5V[a\x0C\xDAV[\x15a\x01\xC9V[a\x05iWa\x05'a\x05\x0F`\x01a\x05\n\x84\x91a\x03\xF5V[a\x0F\x03V[a\x05!a\x05\x1B\x84a\0\xABV[\x91a\0\xABV[\x14a\x04ZV[a\x05Q\x7F\xD3r#G\\\x04\xA6\x0E\x97\xEB0\xBC:8\xB4\xAE\xF6\xA3}\xEF\t\xD1\xEDk\x88\xC8\x81\x84sbBm\x91a\x04\xABV[\x90a\x05Za\0\x92V[\x80a\x05d\x81a\0\xF8V[\x03\x90\xA2V[a\x05qa\0\x92V[c=\x0F)=`\xE0\x1B\x81R\x80a\x05\x88`\x04\x82\x01a\0\xF8V[\x03\x90\xFD[a\x05\x94a\0\x92V[c\xE6\xC4${`\xE0\x1B\x81R\x80a\x05\xAB`\x04\x82\x01a\0\xF8V[\x03\x90\xFD[a\x05\xB8\x90a\x03\xB4V[V[a\x05\xC2a\x0C8V[a\x05\xCAa\x05\xCCV[V[a\x05\xDDa\x05\xD8_a\x03\xE9V[a\x10rV[V[a\x05\xE7a\x05\xBAV[V[_\x90V[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x06\ta\x06\x0E\x91a\x05\xEDV[a\x05\xF2V[\x90V[a\x06\x1B\x90Ta\x05\xFDV[\x90V[a\x06&a\x05\xE9V[Pa\x060_a\x06\x11V[\x90V[_\x90V[a\x06@\x90a\x04\x83V[\x90V[a\x06L\x90a\x067V[\x90V[a\x06X\x90a\x04\x9FV[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x06\x83\x90a\x06[V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x06\x9DW`@RV[a\x06eV[`\xE0\x1B\x90V[\x90PQ\x90a\x06\xB5\x82a\x02%V[V[\x90` \x82\x82\x03\x12a\x06\xD0Wa\x06\xCD\x91_\x01a\x06\xA8V[\x90V[a\0\x9CV[a\x06\xDDa\0\x92V[=_\x82>=\x90\xFD[a\x06\xEDa\x063V[Pa\x07\0a\x06\xFB`\x01a\x03\xF5V[a\x10\xD1V[\x91\x82a\x07\x1Ca\x07\x16a\x07\x11_a\x03\xE9V[a\0\xABV[\x91a\0\xABV[\x14a\x08+W\x91[\x80a\x07>a\x078a\x073_a\x03\xE9V[a\0\xABV[\x91a\0\xABV[\x14a\x08 Wa\x07\x83` a\x07Ya\x07T\x84a\x06CV[a\x06OV[c\xBA\xBC\xC59\x90a\x07x\x86\x92a\x07la\0\x92V[\x95\x86\x94\x85\x93\x84\x93a\x06\xA2V[\x83R`\x04\x83\x01a\x01\x7FV[\x03\x91Z\xFA\x90\x81\x15a\x08\x1BW_\x91a\x07\xEDW[Pa\x07\xE6Wa\x07\xB0a\x07\xB8\x91a\x07\xAB`\x01a\x03\xF5V[a\x11\x0BV[\x91\x90\x15a\x01\xC9V[\x15a\x07#WPa\x07\xE2\x91P[a\x07\xCCa\0\x92V[\x91\x82\x91ceK{\xC3`\xE0\x1B\x83R`\x04\x83\x01a\x01\x7FV[\x03\x90\xFD[PP`\x01\x90V[a\x08\x0E\x91P` =\x81\x11a\x08\x14W[a\x08\x06\x81\x83a\x06yV[\x81\x01\x90a\x06\xB7V[_a\x07\x95V[P=a\x07\xFCV[a\x06\xD5V[Pa\x07\xE2\x91Pa\x07\xC4V[\x91PP`\x01\x90V[\x90a\x08E\x91a\x08@a\x0C8V[a\x08\xC9V[V[_\x7FAddress not added\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x08{`\x11` \x92a\x03\xF8V[a\x08\x84\x81a\x08GV[\x01\x90V[a\x08\x9D\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x08nV[\x90V[\x15a\x08\xA7WV[a\x08\xAFa\0\x92V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x08\xC5`\x04\x82\x01a\x08\x88V[\x03\x90\xFD[\x90\x81a\x08\xE5a\x08\xDFa\x08\xDA_a\x03\xE9V[a\0\xABV[\x91a\0\xABV[\x14a\t\xABWa\x08\xFE`\x01a\x08\xF9\x84\x91a\x03\xF5V[a\x0C\xDAV[a\t\x88W_\x14a\tgWa\t$a\t\x1F`\x01a\t\x1A\x84\x91a\x03\xF5V[a\x11WV[a\x08\xA0V[[a\tO\x7Fu\xEC>\xF6\xC1\xAF\xB4]\xD0\xA2\xBB\xB3\xA4\xF1L\xAC\x03$\x1C3\xFC$\xC3R\xE2^\xA6\x90\xE2*\x922\x91a\x04\xABV[\x90a\tXa\0\x92V[\x80a\tb\x81a\0\xF8V[\x03\x90\xA2V[a\t\x83a\t~`\x01a\ty\x84\x91a\x03\xF5V[a\x117V[a\x08\xA0V[a\t%V[a\t\x90a\0\x92V[cQl5\x0F`\xE1\x1B\x81R\x80a\t\xA7`\x04\x82\x01a\0\xF8V[\x03\x90\xFD[a\t\xB3a\0\x92V[c\xE6\xC4${`\xE0\x1B\x81R\x80a\t\xCA`\x04\x82\x01a\0\xF8V[\x03\x90\xFD[\x90a\t\xD8\x91a\x083V[V[``\x90V[\x90a\t\xF2a\t\xEBa\0\x92V[\x92\x83a\x06yV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\n\x0CW` \x80\x91\x02\x01\x90V[a\x06eV[\x90a\n#a\n\x1E\x83a\t\xF4V[a\t\xDFV[\x91\x82RV[6\x907V[\x90a\nRa\n:\x83a\n\x11V[\x92` \x80a\nH\x86\x93a\t\xF4V[\x92\x01\x91\x03\x90a\n(V[V[\x90V[a\nka\nfa\np\x92a\x03\xC7V[a\x03\xCAV[a\nTV[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\n\x90\x90a\nTV[_\x19\x81\x14a\n\x9EW`\x01\x01\x90V[a\nsV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[\x90a\n\xC1\x82a\x02\xA9V[\x81\x10\x15a\n\xD2W` \x80\x91\x02\x01\x01\x90V[a\n\xA3V[\x90a\n\xE1\x90a\0\xABV[\x90RV[a\n\xEDa\t\xDAV[Pa\x0B\0a\n\xFB`\x01a\x03\xF5V[a\x11{V[a\x0B\t\x81a\n-V[a\x0B\x1Ba\x0B\x16`\x01a\x03\xF5V[a\x10\xD1V[a\x0B$_a\nWV[\x90[\x81a\x0B9a\x0B3\x86a\nTV[\x91a\nTV[\x10\x80a\x0B\x9EW[\x15a\x0B\x95Wa\x0Bq\x81a\x0Bba\x0By\x93a\x0B]\x87\x91\x87\x90\x92a\n\xB7V[a\n\xD7V[a\x0Bl`\x01a\x03\xF5V[a\x11\x0BV[\x91\x90\x15a\x01\xC9V[a\x0B\x8DWa\x0B\x87\x90\x91a\n\x87V[\x90a\x0B&V[PP\x90P[\x90V[PP\x90Pa\x0B\x92V[P\x80a\x0B\xBAa\x0B\xB4a\x0B\xAF_a\x03\xE9V[a\0\xABV[\x91a\0\xABV[\x14\x15a\x0B@V[a\x0B\xD2\x90a\x0B\xCDa\x0C8V[a\x0B\xD4V[V[\x80a\x0B\xEFa\x0B\xE9a\x0B\xE4_a\x03\xE9V[a\0\xABV[\x91a\0\xABV[\x14a\x0B\xFFWa\x0B\xFD\x90a\x10rV[V[a\x0C)a\x0C\x0B_a\x03\xE9V[a\x0C\x13a\0\x92V[\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x01\x7FV[\x03\x90\xFD[a\x0C6\x90a\x0B\xC1V[V[a\x0C@a\x06\x1EV[a\x0CYa\x0CSa\x0CNa\x11\x92V[a\0\xABV[\x91a\0\xABV[\x03a\x0C`WV[a\x0C\x89a\x0Cka\x11\x92V[a\x0Csa\0\x92V[\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x01\x7FV[\x03\x90\xFD[\x90a\x0C\x97\x90a\x04\xABV[_R` R`@_ \x90V[_\x90V[a\x0C\xB0\x90a\x01\xC9V[\x90V[\x90a\x0C\xBD\x90a\x0C\xA7V[_R` R`@_ \x90V[a\x0C\xD2_a\x03\xE9V[\x90V[`\x01\x90V[a\x0C\xE2a\x063V[Pa\r\na\r\x05a\x0C\xF7`\x01\x84\x01\x85\x90a\x0C\x8DV[a\x0C\xFFa\x0C\xA3V[\x90a\x0C\xB3V[a\x06\x11V[a\r#a\r\x1Da\r\x18a\x0C\xC9V[a\0\xABV[\x91a\0\xABV[\x14\x80a\r\x87W[_\x14a\r\x80Wa\rja\rda\r_a\rQ`\x01a\rp\x95\x01a\rKa\x0C\xC9V[\x90a\x0C\x8DV[a\rYa\x0C\xD5V[\x90a\x0C\xB3V[a\x06\x11V[\x92a\0\xABV[\x91a\0\xABV[\x14_\x14a\r|W`\x01\x90V[_\x90V[PP`\x01\x90V[Pa\r\xAFa\r\xAAa\r\x9C`\x01\x84\x01\x85\x90a\x0C\x8DV[a\r\xA4a\x0C\xD5V[\x90a\x0C\xB3V[a\x06\x11V[a\r\xC8a\r\xC2a\r\xBDa\x0C\xC9V[a\0\xABV[\x91a\0\xABV[\x14a\r*V[a\r\xD7_a\x03\xE9V[\x90V[\x1B\x90V[\x91\x90`\x08a\r\xFE\x91\x02\x91a\r\xF8`\x01\x80`\xA0\x1B\x03\x84a\r\xDAV[\x92a\r\xDAV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x91\x90a\x0E!a\x0E\x1Ca\x0E)\x93a\x04\xABV[a\x0E\x08V[\x90\x83Ta\r\xDEV[\x90UV[a\x0E?\x91a\x0E9a\x05\xE9V[\x91a\x0E\x0BV[V[\x90V[a\x0EXa\x0ESa\x0E]\x92a\x0EAV[a\x03\xCAV[a\nTV[\x90V[\x90V[a\x0Eoa\x0Et\x91a\x05\xEDV[a\x0E`V[\x90V[a\x0E\x81\x90Ta\x0EcV[\x90V[a\x0E\x93a\x0E\x99\x91\x93\x92\x93a\nTV[\x92a\nTV[\x82\x03\x91\x82\x11a\x0E\xA4WV[a\nsV[_\x1B\x90V[\x90a\x0E\xBA_\x19\x91a\x0E\xA9V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0E\xD8a\x0E\xD3a\x0E\xDD\x92a\nTV[a\x03\xCAV[a\nTV[\x90V[\x90V[\x90a\x0E\xF8a\x0E\xF3a\x0E\xFF\x92a\x0E\xC4V[a\x0E\xE0V[\x82Ta\x0E\xAEV[\x90UV[a\x0F\x0Ba\x05\xE9V[P\x81a\x0F&a\x0F a\x0F\x1Ba\r\xCEV[a\0\xABV[\x91a\0\xABV[\x14\x80\x15a\x10\x1DW[a\x10\x0FW\x80a\x0F\x97a\x10\x0C\x92a\x0Faa\x0F\\a\x0FN`\x01\x86\x01\x88\x90a\x0C\x8DV[a\x0FVa\x0C\xA3V[\x90a\x0C\xB3V[a\x06\x11V[a\x0F\x88a\x0F\x83a\x0Fu`\x01\x87\x01\x89\x90a\x0C\x8DV[a\x0F}a\x0C\xD5V[\x90a\x0C\xB3V[a\x06\x11V[\x90a\x0F\x91a\x0C\xD5V[\x92a\x11\x9FV[a\x0F\xBF_a\x0F\xBAa\x0F\xAC`\x01\x85\x01\x87\x90a\x0C\x8DV[a\x0F\xB4a\x0C\xA3V[\x90a\x0C\xB3V[a\x0E-V[a\x0F\xE7_a\x0F\xE2a\x0F\xD4`\x01\x85\x01\x87\x90a\x0C\x8DV[a\x0F\xDCa\x0C\xD5V[\x90a\x0C\xB3V[a\x0E-V[a\x10\x06_a\x0F\xF5`\x01a\x0EDV[\x92\x01\x91a\x10\x01\x83a\x0EwV[a\x0E\x84V[\x90a\x0E\xE3V[\x90V[PPa\x10\x1A_a\x03\xE9V[\x90V[Pa\x102a\x10,\x82\x84\x90a\x0C\xDAV[\x15a\x01\xC9V[a\x0F.V[\x90a\x10H`\x01\x80`\xA0\x1B\x03\x91a\x0E\xA9V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x10ga\x10ba\x10n\x92a\x04\xABV[a\x0E\x08V[\x82Ta\x107V[\x90UV[a\x10{_a\x06\x11V[a\x10\x85\x82_a\x10RV[\x90a\x10\xB9a\x10\xB3\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x04\xABV[\x91a\x04\xABV[\x91a\x10\xC2a\0\x92V[\x80a\x10\xCC\x81a\0\xF8V[\x03\x90\xA3V[a\x11\x03a\x10\xF5`\x01a\x11\x08\x93a\x10\xE5a\x05\xE9V[P\x01a\x10\xEFa\x0C\xC9V[\x90a\x0C\x8DV[a\x10\xFDa\x0C\xD5V[\x90a\x0C\xB3V[a\x06\x11V[\x90V[\x90a\x111\x91a\x11\x18a\x063V[Pa\x11!a\x05\xE9V[P\x90a\x11+a\x0C\xD5V[\x91a\x11\xEAV[\x91\x90\x91\x90V[\x90a\x11T\x91a\x11Da\x063V[P\x90a\x11Na\x0C\xA3V[\x91a\x12fV[\x90V[\x90a\x11t\x91a\x11da\x063V[P\x90a\x11na\x0C\xD5V[\x91a\x12fV[\x90V[_\x90V[_a\x11\x8F\x91a\x11\x88a\x11wV[P\x01a\x0EwV[\x90V[a\x11\x9Aa\x05\xE9V[P3\x90V[\x91\x92a\x11\xDEa\x11\xE3\x92`\x01a\x11\xE8\x96a\x11\xD7\x83a\x11\xD2a\x11\xC2\x85\x8B\x01\x85\x90a\x0C\x8DV[a\x11\xCC\x89\x15a\x01\xC9V[\x90a\x0C\xB3V[a\x10RV[\x95\x01a\x0C\x8DV[a\x0C\xB3V[a\x10RV[V[\x91a\x11\xF3a\x063V[Pa\x11\xFCa\x05\xE9V[Pa\x12\x11a\x12\x0B\x84\x84\x90a\x0C\xDAV[\x15a\x01\xC9V[_\x14a\x12(WPPP_\x90a\x12%_a\x03\xE9V[\x90V[a\x12;a\x12@\x92`\x01a\x12E\x95\x01a\x0C\x8DV[a\x0C\xB3V[a\x06\x11V[\x90\x81a\x12`a\x12Za\x12Ua\x0C\xC9V[a\0\xABV[\x91a\0\xABV[\x14\x15\x91\x90V[\x91a\x12\x85\x92a\x12sa\x063V[P\x91a\x12}a\x0C\xC9V[\x90\x91\x92a\x12\xADV[\x90V[a\x12\x97a\x12\x9D\x91\x93\x92\x93a\nTV[\x92a\nTV[\x82\x01\x80\x92\x11a\x12\xA8WV[a\nsV[\x91a\x12\xB6a\x063V[Pa\x12\xCBa\x12\xC5\x84\x83\x90a\x0C\xDAV[\x15a\x01\xC9V[\x80a\x13HW[a\x12\xDDWPPPP_\x90V[a\x13C\x93a\x13\x1E\x92a\x13\x14a\x13\x08a\x13\x03a\x12\xFC`\x01\x89\x01\x85\x90a\x0C\x8DV[\x85\x90a\x0C\xB3V[a\x06\x11V[\x91\x86\x90\x85\x90\x85\x92a\x11\x9FV[\x84\x92\x90\x91\x92a\x11\x9FV[a\x13=_a\x13,`\x01a\x0EDV[\x92\x01\x91a\x138\x83a\x0EwV[a\x12\x88V[\x90a\x0E\xE3V[`\x01\x90V[Pa\x13T\x83\x83\x90a\x0C\xDAV[a\x12\xD1V\xFE\xA2dipfsX\"\x12 \xF0\x98T9\xA1~\xFE,A@\x84\x86\x1B\xE2l_1\xEFM0\x13\xF9\xB0\x1Di\x0B\xBB\xEC\xDDkn\xE8dsolcC\0\x08\x19\x003",
    );
    /**Custom error with signature `AddressAlreadyExists()` and selector `0xa2d86a1e`.
```solidity
error AddressAlreadyExists();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AddressAlreadyExists {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AddressAlreadyExists> for UnderlyingRustTuple<'_> {
            fn from(value: AddressAlreadyExists) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AddressAlreadyExists {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AddressAlreadyExists {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AddressAlreadyExists()";
            const SELECTOR: [u8; 4] = [162u8, 216u8, 106u8, 30u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `AddressDoesNotExist()` and selector `0x3d0f293d`.
```solidity
error AddressDoesNotExist();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AddressDoesNotExist {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AddressDoesNotExist> for UnderlyingRustTuple<'_> {
            fn from(value: AddressDoesNotExist) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AddressDoesNotExist {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AddressDoesNotExist {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AddressDoesNotExist()";
            const SELECTOR: [u8; 4] = [61u8, 15u8, 41u8, 61u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `CheckFailed(address)` and selector `0x654b7bc3`.
```solidity
error CheckFailed(address batchSubmitter);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CheckFailed {
        #[allow(missing_docs)]
        pub batchSubmitter: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<CheckFailed> for UnderlyingRustTuple<'_> {
            fn from(value: CheckFailed) -> Self {
                (value.batchSubmitter,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for CheckFailed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { batchSubmitter: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for CheckFailed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "CheckFailed(address)";
            const SELECTOR: [u8; 4] = [101u8, 75u8, 123u8, 195u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.batchSubmitter,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `InvalidAddress()` and selector `0xe6c4247b`.
```solidity
error InvalidAddress();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidAddress {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidAddress> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidAddress) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidAddress {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidAddress {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidAddress()";
            const SELECTOR: [u8; 4] = [230u8, 196u8, 36u8, 123u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `OwnableInvalidOwner(address)` and selector `0x1e4fbdf7`.
```solidity
error OwnableInvalidOwner(address owner);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableInvalidOwner {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableInvalidOwner> for UnderlyingRustTuple<'_> {
            fn from(value: OwnableInvalidOwner) -> Self {
                (value.owner,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for OwnableInvalidOwner {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { owner: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableInvalidOwner {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableInvalidOwner(address)";
            const SELECTOR: [u8; 4] = [30u8, 79u8, 189u8, 247u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `OwnableUnauthorizedAccount(address)` and selector `0x118cdaa7`.
```solidity
error OwnableUnauthorizedAccount(address account);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableUnauthorizedAccount {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: OwnableUnauthorizedAccount) -> Self {
                (value.account,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for OwnableUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { account: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableUnauthorizedAccount(address)";
            const SELECTOR: [u8; 4] = [17u8, 140u8, 218u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
        }
    };
    /**Event with signature `CheckAdded(address)` and selector `0x75ec3ef6c1afb45dd0a2bbb3a4f14cac03241c33fc24c352e25ea690e22a9232`.
```solidity
event CheckAdded(address indexed check);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct CheckAdded {
        #[allow(missing_docs)]
        pub check: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for CheckAdded {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "CheckAdded(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                117u8,
                236u8,
                62u8,
                246u8,
                193u8,
                175u8,
                180u8,
                93u8,
                208u8,
                162u8,
                187u8,
                179u8,
                164u8,
                241u8,
                76u8,
                172u8,
                3u8,
                36u8,
                28u8,
                51u8,
                252u8,
                36u8,
                195u8,
                82u8,
                226u8,
                94u8,
                166u8,
                144u8,
                226u8,
                42u8,
                146u8,
                50u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { check: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.check.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.check,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for CheckAdded {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&CheckAdded> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &CheckAdded) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `CheckRemoved(address)` and selector `0xd37223475c04a60e97eb30bc3a38b4aef6a37def09d1ed6b88c881847362426d`.
```solidity
event CheckRemoved(address indexed check);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct CheckRemoved {
        #[allow(missing_docs)]
        pub check: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for CheckRemoved {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "CheckRemoved(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                211u8,
                114u8,
                35u8,
                71u8,
                92u8,
                4u8,
                166u8,
                14u8,
                151u8,
                235u8,
                48u8,
                188u8,
                58u8,
                56u8,
                180u8,
                174u8,
                246u8,
                163u8,
                125u8,
                239u8,
                9u8,
                209u8,
                237u8,
                107u8,
                136u8,
                200u8,
                129u8,
                132u8,
                115u8,
                98u8,
                66u8,
                109u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { check: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.check.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.check,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for CheckRemoved {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&CheckRemoved> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &CheckRemoved) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `OwnershipTransferred(address,address)` and selector `0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0`.
```solidity
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct OwnershipTransferred {
        #[allow(missing_docs)]
        pub previousOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OwnershipTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OwnershipTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousOwner: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousOwner.clone(),
                    self.newOwner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousOwner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OwnershipTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OwnershipTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &OwnershipTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address admin);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub admin: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value.admin,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { admin: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin,
                    ),
                )
            }
        }
    };
    /**Function with signature `addCheck(address,bool)` and selector `0xc2b8d79c`.
```solidity
function addCheck(address _address, bool addToHead) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addCheckCall {
        #[allow(missing_docs)]
        pub _address: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub addToHead: bool,
    }
    ///Container type for the return parameters of the [`addCheck(address,bool)`](addCheckCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addCheckReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address, bool);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addCheckCall> for UnderlyingRustTuple<'_> {
                fn from(value: addCheckCall) -> Self {
                    (value._address, value.addToHead)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for addCheckCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _address: tuple.0,
                        addToHead: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addCheckReturn> for UnderlyingRustTuple<'_> {
                fn from(value: addCheckReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for addCheckReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for addCheckCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = addCheckReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "addCheck(address,bool)";
            const SELECTOR: [u8; 4] = [194u8, 184u8, 215u8, 156u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._address,
                    ),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.addToHead,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getAllChecks()` and selector `0xc34d826a`.
```solidity
function getAllChecks() external view returns (address[] memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAllChecksCall {}
    ///Container type for the return parameters of the [`getAllChecks()`](getAllChecksCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAllChecksReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAllChecksCall> for UnderlyingRustTuple<'_> {
                fn from(value: getAllChecksCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getAllChecksCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAllChecksReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getAllChecksReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getAllChecksReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getAllChecksCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getAllChecksReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getAllChecks()";
            const SELECTOR: [u8; 4] = [195u8, 77u8, 130u8, 106u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isAllowed(address)` and selector `0xbabcc539`.
```solidity
function isAllowed(address proposer) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedCall {
        #[allow(missing_docs)]
        pub proposer: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`isAllowed(address)`](isAllowedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedCall> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedCall) -> Self {
                    (value.proposer,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { proposer: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isAllowedCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isAllowedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isAllowed(address)";
            const SELECTOR: [u8; 4] = [186u8, 188u8, 197u8, 57u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.proposer,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `owner()` and selector `0x8da5cb5b`.
```solidity
function owner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerCall {}
    ///Container type for the return parameters of the [`owner()`](ownerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "owner()";
            const SELECTOR: [u8; 4] = [141u8, 165u8, 203u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `removeCheck(address)` and selector `0x68b23e52`.
```solidity
function removeCheck(address _address) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct removeCheckCall {
        #[allow(missing_docs)]
        pub _address: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`removeCheck(address)`](removeCheckCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct removeCheckReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<removeCheckCall> for UnderlyingRustTuple<'_> {
                fn from(value: removeCheckCall) -> Self {
                    (value._address,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for removeCheckCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _address: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<removeCheckReturn> for UnderlyingRustTuple<'_> {
                fn from(value: removeCheckReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for removeCheckReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for removeCheckCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = removeCheckReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "removeCheck(address)";
            const SELECTOR: [u8; 4] = [104u8, 178u8, 62u8, 82u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._address,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `renounceOwnership()` and selector `0x715018a6`.
```solidity
function renounceOwnership() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipCall {}
    ///Container type for the return parameters of the [`renounceOwnership()`](renounceOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceOwnershipCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceOwnership()";
            const SELECTOR: [u8; 4] = [113u8, 80u8, 24u8, 166u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferOwnership(address)` and selector `0xf2fde38b`.
```solidity
function transferOwnership(address newOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipCall {
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferOwnership(address)`](transferOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipCall) -> Self {
                    (value.newOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferOwnershipCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferOwnership(address)";
            const SELECTOR: [u8; 4] = [242u8, 253u8, 227u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newOwner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`RequireAnyModule`](self) function calls.
    pub enum RequireAnyModuleCalls {
        #[allow(missing_docs)]
        addCheck(addCheckCall),
        #[allow(missing_docs)]
        getAllChecks(getAllChecksCall),
        #[allow(missing_docs)]
        isAllowed(isAllowedCall),
        #[allow(missing_docs)]
        owner(ownerCall),
        #[allow(missing_docs)]
        removeCheck(removeCheckCall),
        #[allow(missing_docs)]
        renounceOwnership(renounceOwnershipCall),
        #[allow(missing_docs)]
        transferOwnership(transferOwnershipCall),
    }
    #[automatically_derived]
    impl RequireAnyModuleCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [104u8, 178u8, 62u8, 82u8],
            [113u8, 80u8, 24u8, 166u8],
            [141u8, 165u8, 203u8, 91u8],
            [186u8, 188u8, 197u8, 57u8],
            [194u8, 184u8, 215u8, 156u8],
            [195u8, 77u8, 130u8, 106u8],
            [242u8, 253u8, 227u8, 139u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for RequireAnyModuleCalls {
        const NAME: &'static str = "RequireAnyModuleCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 7usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::addCheck(_) => <addCheckCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::getAllChecks(_) => {
                    <getAllChecksCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isAllowed(_) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::owner(_) => <ownerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::removeCheck(_) => {
                    <removeCheckCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::renounceOwnership(_) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferOwnership(_) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<RequireAnyModuleCalls>] = &[
                {
                    fn removeCheck(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAnyModuleCalls> {
                        <removeCheckCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAnyModuleCalls::removeCheck)
                    }
                    removeCheck
                },
                {
                    fn renounceOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAnyModuleCalls> {
                        <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAnyModuleCalls::renounceOwnership)
                    }
                    renounceOwnership
                },
                {
                    fn owner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAnyModuleCalls> {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAnyModuleCalls::owner)
                    }
                    owner
                },
                {
                    fn isAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAnyModuleCalls> {
                        <isAllowedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAnyModuleCalls::isAllowed)
                    }
                    isAllowed
                },
                {
                    fn addCheck(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAnyModuleCalls> {
                        <addCheckCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAnyModuleCalls::addCheck)
                    }
                    addCheck
                },
                {
                    fn getAllChecks(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAnyModuleCalls> {
                        <getAllChecksCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAnyModuleCalls::getAllChecks)
                    }
                    getAllChecks
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAnyModuleCalls> {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAnyModuleCalls::transferOwnership)
                    }
                    transferOwnership
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::addCheck(inner) => {
                    <addCheckCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::getAllChecks(inner) => {
                    <getAllChecksCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::removeCheck(inner) => {
                    <removeCheckCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::addCheck(inner) => {
                    <addCheckCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getAllChecks(inner) => {
                    <getAllChecksCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::removeCheck(inner) => {
                    <removeCheckCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`RequireAnyModule`](self) custom errors.
    pub enum RequireAnyModuleErrors {
        #[allow(missing_docs)]
        AddressAlreadyExists(AddressAlreadyExists),
        #[allow(missing_docs)]
        AddressDoesNotExist(AddressDoesNotExist),
        #[allow(missing_docs)]
        CheckFailed(CheckFailed),
        #[allow(missing_docs)]
        InvalidAddress(InvalidAddress),
        #[allow(missing_docs)]
        OwnableInvalidOwner(OwnableInvalidOwner),
        #[allow(missing_docs)]
        OwnableUnauthorizedAccount(OwnableUnauthorizedAccount),
    }
    #[automatically_derived]
    impl RequireAnyModuleErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [17u8, 140u8, 218u8, 167u8],
            [30u8, 79u8, 189u8, 247u8],
            [61u8, 15u8, 41u8, 61u8],
            [101u8, 75u8, 123u8, 195u8],
            [162u8, 216u8, 106u8, 30u8],
            [230u8, 196u8, 36u8, 123u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for RequireAnyModuleErrors {
        const NAME: &'static str = "RequireAnyModuleErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 6usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AddressAlreadyExists(_) => {
                    <AddressAlreadyExists as alloy_sol_types::SolError>::SELECTOR
                }
                Self::AddressDoesNotExist(_) => {
                    <AddressDoesNotExist as alloy_sol_types::SolError>::SELECTOR
                }
                Self::CheckFailed(_) => {
                    <CheckFailed as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidAddress(_) => {
                    <InvalidAddress as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableInvalidOwner(_) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableUnauthorizedAccount(_) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<RequireAnyModuleErrors>] = &[
                {
                    fn OwnableUnauthorizedAccount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAnyModuleErrors> {
                        <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAnyModuleErrors::OwnableUnauthorizedAccount)
                    }
                    OwnableUnauthorizedAccount
                },
                {
                    fn OwnableInvalidOwner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAnyModuleErrors> {
                        <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAnyModuleErrors::OwnableInvalidOwner)
                    }
                    OwnableInvalidOwner
                },
                {
                    fn AddressDoesNotExist(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAnyModuleErrors> {
                        <AddressDoesNotExist as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAnyModuleErrors::AddressDoesNotExist)
                    }
                    AddressDoesNotExist
                },
                {
                    fn CheckFailed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAnyModuleErrors> {
                        <CheckFailed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAnyModuleErrors::CheckFailed)
                    }
                    CheckFailed
                },
                {
                    fn AddressAlreadyExists(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAnyModuleErrors> {
                        <AddressAlreadyExists as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAnyModuleErrors::AddressAlreadyExists)
                    }
                    AddressAlreadyExists
                },
                {
                    fn InvalidAddress(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAnyModuleErrors> {
                        <InvalidAddress as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAnyModuleErrors::InvalidAddress)
                    }
                    InvalidAddress
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AddressAlreadyExists(inner) => {
                    <AddressAlreadyExists as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::AddressDoesNotExist(inner) => {
                    <AddressDoesNotExist as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::CheckFailed(inner) => {
                    <CheckFailed as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::InvalidAddress(inner) => {
                    <InvalidAddress as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AddressAlreadyExists(inner) => {
                    <AddressAlreadyExists as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::AddressDoesNotExist(inner) => {
                    <AddressDoesNotExist as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::CheckFailed(inner) => {
                    <CheckFailed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidAddress(inner) => {
                    <InvalidAddress as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`RequireAnyModule`](self) events.
    pub enum RequireAnyModuleEvents {
        #[allow(missing_docs)]
        CheckAdded(CheckAdded),
        #[allow(missing_docs)]
        CheckRemoved(CheckRemoved),
        #[allow(missing_docs)]
        OwnershipTransferred(OwnershipTransferred),
    }
    #[automatically_derived]
    impl RequireAnyModuleEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                117u8,
                236u8,
                62u8,
                246u8,
                193u8,
                175u8,
                180u8,
                93u8,
                208u8,
                162u8,
                187u8,
                179u8,
                164u8,
                241u8,
                76u8,
                172u8,
                3u8,
                36u8,
                28u8,
                51u8,
                252u8,
                36u8,
                195u8,
                82u8,
                226u8,
                94u8,
                166u8,
                144u8,
                226u8,
                42u8,
                146u8,
                50u8,
            ],
            [
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ],
            [
                211u8,
                114u8,
                35u8,
                71u8,
                92u8,
                4u8,
                166u8,
                14u8,
                151u8,
                235u8,
                48u8,
                188u8,
                58u8,
                56u8,
                180u8,
                174u8,
                246u8,
                163u8,
                125u8,
                239u8,
                9u8,
                209u8,
                237u8,
                107u8,
                136u8,
                200u8,
                129u8,
                132u8,
                115u8,
                98u8,
                66u8,
                109u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for RequireAnyModuleEvents {
        const NAME: &'static str = "RequireAnyModuleEvents";
        const COUNT: usize = 3usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<CheckAdded as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <CheckAdded as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::CheckAdded)
                }
                Some(<CheckRemoved as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <CheckRemoved as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::CheckRemoved)
                }
                Some(
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::OwnershipTransferred)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for RequireAnyModuleEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::CheckAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::CheckRemoved(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::CheckAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::CheckRemoved(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`RequireAnyModule`](self) contract instance.

See the [wrapper's documentation](`RequireAnyModuleInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> RequireAnyModuleInstance<T, P, N> {
        RequireAnyModuleInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        admin: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<RequireAnyModuleInstance<T, P, N>>,
    > {
        RequireAnyModuleInstance::<T, P, N>::deploy(provider, admin)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        admin: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        RequireAnyModuleInstance::<T, P, N>::deploy_builder(provider, admin)
    }
    /**A [`RequireAnyModule`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`RequireAnyModule`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct RequireAnyModuleInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for RequireAnyModuleInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("RequireAnyModuleInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > RequireAnyModuleInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`RequireAnyModule`](self) contract instance.

See the [wrapper's documentation](`RequireAnyModuleInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            admin: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<RequireAnyModuleInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, admin);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            admin: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { admin },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> RequireAnyModuleInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> RequireAnyModuleInstance<T, P, N> {
            RequireAnyModuleInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > RequireAnyModuleInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`addCheck`] function.
        pub fn addCheck(
            &self,
            _address: alloy::sol_types::private::Address,
            addToHead: bool,
        ) -> alloy_contract::SolCallBuilder<T, &P, addCheckCall, N> {
            self.call_builder(
                &addCheckCall {
                    _address,
                    addToHead,
                },
            )
        }
        ///Creates a new call builder for the [`getAllChecks`] function.
        pub fn getAllChecks(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getAllChecksCall, N> {
            self.call_builder(&getAllChecksCall {})
        }
        ///Creates a new call builder for the [`isAllowed`] function.
        pub fn isAllowed(
            &self,
            proposer: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, isAllowedCall, N> {
            self.call_builder(&isAllowedCall { proposer })
        }
        ///Creates a new call builder for the [`owner`] function.
        pub fn owner(&self) -> alloy_contract::SolCallBuilder<T, &P, ownerCall, N> {
            self.call_builder(&ownerCall {})
        }
        ///Creates a new call builder for the [`removeCheck`] function.
        pub fn removeCheck(
            &self,
            _address: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, removeCheckCall, N> {
            self.call_builder(&removeCheckCall { _address })
        }
        ///Creates a new call builder for the [`renounceOwnership`] function.
        pub fn renounceOwnership(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, renounceOwnershipCall, N> {
            self.call_builder(&renounceOwnershipCall {})
        }
        ///Creates a new call builder for the [`transferOwnership`] function.
        pub fn transferOwnership(
            &self,
            newOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferOwnershipCall, N> {
            self.call_builder(&transferOwnershipCall { newOwner })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > RequireAnyModuleInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`CheckAdded`] event.
        pub fn CheckAdded_filter(&self) -> alloy_contract::Event<T, &P, CheckAdded, N> {
            self.event_filter::<CheckAdded>()
        }
        ///Creates a new event filter for the [`CheckRemoved`] event.
        pub fn CheckRemoved_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, CheckRemoved, N> {
            self.event_filter::<CheckRemoved>()
        }
        ///Creates a new event filter for the [`OwnershipTransferred`] event.
        pub fn OwnershipTransferred_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, OwnershipTransferred, N> {
            self.event_filter::<OwnershipTransferred>()
        }
    }
}
