/**

Generated by the following Solidity interface...
```solidity
interface SealedBidAuctionSequencingModule {
    error AddressNotAllowed();
    error AuctionNotActive();
    error AuctionNotEnded();
    error BidExceedsDeposit();
    error InvalidBidDeposit();
    error InvalidBidReveal();
    error InvalidDuration();
    error NoBidFound();
    error NoFundsToWithdraw();
    error TransactionFailed();

    event BidRevealed(address indexed bidder, uint256 bid, bool isHighestBid);

    constructor(uint256 _duration, address _treasury);

    function auctionActive() external view returns (bool);
    function auctionType() external view returns (string memory);
    function bid(bytes32 _sealedBid) external payable;
    function bids(address) external view returns (bytes32 sealedBid, uint256 deposit);
    function endTime() external view returns (uint256);
    function finalizeAuction() external;
    function getAuctionEndTime() external view returns (uint256);
    function getAuctionType() external view returns (string memory);
    function getAuctionWinner() external view returns (address);
    function getCurrentPrice() external view returns (uint256);
    function highestBid() external view returns (uint256);
    function highestBidder() external view returns (address);
    function isAllowed(address proposer) external view returns (bool);
    function isAuctionActive() external view returns (bool);
    function refunds(address) external view returns (uint256);
    function revealBid(uint256 _bid, string memory _salt) external;
    function treasury() external view returns (address);
    function withdrawFunds() external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_duration",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "_treasury",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "auctionActive",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "auctionType",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "bid",
    "inputs": [
      {
        "name": "_sealedBid",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "bids",
    "inputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "sealedBid",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "deposit",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "endTime",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "finalizeAuction",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "getAuctionEndTime",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getAuctionType",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getAuctionWinner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getCurrentPrice",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "highestBid",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "highestBidder",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isAllowed",
    "inputs": [
      {
        "name": "proposer",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isAuctionActive",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "refunds",
    "inputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "revealBid",
    "inputs": [
      {
        "name": "_bid",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "_salt",
        "type": "string",
        "internalType": "string"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "treasury",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "withdrawFunds",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "BidRevealed",
    "inputs": [
      {
        "name": "bidder",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "bid",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "isHighestBid",
        "type": "bool",
        "indexed": false,
        "internalType": "bool"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AddressNotAllowed",
    "inputs": []
  },
  {
    "type": "error",
    "name": "AuctionNotActive",
    "inputs": []
  },
  {
    "type": "error",
    "name": "AuctionNotEnded",
    "inputs": []
  },
  {
    "type": "error",
    "name": "BidExceedsDeposit",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidBidDeposit",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidBidReveal",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidDuration",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NoBidFound",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NoFundsToWithdraw",
    "inputs": []
  },
  {
    "type": "error",
    "name": "TransactionFailed",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod SealedBidAuctionSequencingModule {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234801561000f575f80fd5b506040516118c43803806118c483398181016040528101906100319190610217565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610096576040517f2b53784e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f82036100cf576040517f7616640100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040518060400160405280600981526020017f5365616c65644269640000000000000000000000000000000000000000000000815250600190816101529190610486565b50600160025f6101000a81548160ff02191690831515021790555081426101799190610582565b60038190555050506105b5565b5f80fd5b5f819050919050565b61019c8161018a565b81146101a6575f80fd5b50565b5f815190506101b781610193565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6101e6826101bd565b9050919050565b6101f6816101dc565b8114610200575f80fd5b50565b5f81519050610211816101ed565b92915050565b5f806040838503121561022d5761022c610186565b5b5f61023a858286016101a9565b925050602061024b85828601610203565b9150509250929050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806102d057607f821691505b6020821081036102e3576102e261028c565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026103457fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261030a565b61034f868361030a565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61038a6103856103808461018a565b610367565b61018a565b9050919050565b5f819050919050565b6103a383610370565b6103b76103af82610391565b848454610316565b825550505050565b5f90565b6103cb6103bf565b6103d681848461039a565b505050565b5b818110156103f9576103ee5f826103c3565b6001810190506103dc565b5050565b601f82111561043e5761040f816102e9565b610418846102fb565b81016020851015610427578190505b61043b610433856102fb565b8301826103db565b50505b505050565b5f82821c905092915050565b5f61045e5f1984600802610443565b1980831691505092915050565b5f610476838361044f565b9150826002028217905092915050565b61048f82610255565b67ffffffffffffffff8111156104a8576104a761025f565b5b6104b282546102b9565b6104bd8282856103fd565b5f60209050601f8311600181146104ee575f84156104dc578287015190505b6104e6858261046b565b86555061054d565b601f1984166104fc866102e9565b5f5b82811015610523578489015182556001820191506020850194506020810190506104fe565b86831015610540578489015161053c601f89168261044f565b8355505b6001600288020188555050505b505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61058c8261018a565b91506105978361018a565b92508282019050808211156105af576105ae610555565b5b92915050565b611302806105c25f395ff3fe608060405260043610610108575f3560e01c80639222800611610094578063bc3da53511610063578063bc3da5351461032f578063d1b4b9a31461036b578063d57bde7914610395578063eb91d37e146103bf578063f77282ab146103e957610108565b80639222800614610283578063957bb1e0146102ad578063994595e1146102c9578063babcc539146102f357610108565b80634c583d8a116100db5780634c583d8a1461019e57806361d027b3146101c857806362ea82db146101f2578063787c0a6c1461022f57806391f901571461025957610108565b806311163b2c1461010c5780632163b8c51461013657806324600fc31461015e5780633197cbb614610174575b5f80fd5b348015610117575f80fd5b506101206103ff565b60405161012d9190610e00565b60405180910390f35b348015610141575f80fd5b5061015c60048036038101906101579190610f90565b61048f565b005b348015610169575f80fd5b5061017261080d565b005b34801561017f575f80fd5b5061018861096c565b6040516101959190610ff9565b60405180910390f35b3480156101a9575f80fd5b506101b2610972565b6040516101bf9190611051565b60405180910390f35b3480156101d3575f80fd5b506101dc61099a565b6040516101e99190611051565b60405180910390f35b3480156101fd575f80fd5b5061021860048036038101906102139190611094565b6109bd565b6040516102269291906110d7565b60405180910390f35b34801561023a575f80fd5b506102436109dd565b6040516102509190610ff9565b60405180910390f35b348015610264575f80fd5b5061026d6109e6565b60405161027a9190611051565b60405180910390f35b34801561028e575f80fd5b50610297610a0b565b6040516102a49190611118565b60405180910390f35b6102c760048036038101906102c2919061115b565b610a1d565b005b3480156102d4575f80fd5b506102dd610b05565b6040516102ea9190610e00565b60405180910390f35b3480156102fe575f80fd5b5061031960048036038101906103149190611094565b610b91565b6040516103269190611118565b60405180910390f35b34801561033a575f80fd5b5061035560048036038101906103509190611094565b610be9565b6040516103629190610ff9565b60405180910390f35b348015610376575f80fd5b5061037f610bfe565b60405161038c9190611118565b60405180910390f35b3480156103a0575f80fd5b506103a9610c13565b6040516103b69190610ff9565b60405180910390f35b3480156103ca575f80fd5b506103d3610c19565b6040516103e09190610ff9565b60405180910390f35b3480156103f4575f80fd5b506103fd610c22565b005b60606001805461040e906111b3565b80601f016020809104026020016040519081016040528092919081815260200182805461043a906111b3565b80156104855780601f1061045c57610100808354040283529160200191610485565b820191905f5260205f20905b81548152906001019060200180831161046857829003601f168201915b5050505050905090565b60025f9054906101000a900460ff166104d4576040517f69b8d0fe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f60065f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206040518060400160405290815f820154815260200160018201548152505090505f81602001510361056f576040517fb82eb6b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80602001518311156105ad576040517ff3baba5600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f83836040516020016105c192919061123d565b604051602081830303815290604052805190602001209050815f01518114610615576040517fa49935ac00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f60055485111561072a575f73ffffffffffffffffffffffffffffffffffffffff1660045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146106da5760055460075f60045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055505b846005819055503360045f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050610771565b826020015160075f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055505b3373ffffffffffffffffffffffffffffffffffffffff167f9c2d1dff1e244149eef8b49255674d40752acd825b23d4ad303807f98fe5953286836040516107b9929190611264565b60405180910390a25f60065f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20600101819055505050505050565b5f60075f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205490505f8103610887576040517f67e3990d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f60075f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055505f3373ffffffffffffffffffffffffffffffffffffffff16826040516108ee906112b8565b5f6040518083038185875af1925050503d805f8114610928576040519150601f19603f3d011682016040523d82523d5f602084013e61092d565b606091505b5050905080610968576040517fbf961a2800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b60035481565b5f60045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6006602052805f5260405f205f91509050805f0154908060010154905082565b5f600354905090565b60045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025f9054906101000a900460ff1681565b60025f9054906101000a900460ff16610a62576040517f69b8d0fe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f3403610a9b576040517f61700f9100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405180604001604052808281526020013481525060065f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f820151815f01556020820151816001015590505050565b60018054610b12906111b3565b80601f0160208091040260200160405190810160405280929190818152602001828054610b3e906111b3565b8015610b895780601f10610b6057610100808354040283529160200191610b89565b820191905f5260205f20905b815481529060010190602001808311610b6c57829003601f168201915b505050505081565b5f60045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b6007602052805f5260405f205f915090505481565b5f60025f9054906101000a900460ff16905090565b60055481565b5f600554905090565b600354421015610c5e576040517f6463738900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f60025f6101000a81548160ff0219169083151502179055505f73ffffffffffffffffffffffffffffffffffffffff1660045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610d8e575f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600554604051610d12906112b8565b5f6040518083038185875af1925050503d805f8114610d4c576040519150601f19603f3d011682016040523d82523d5f602084013e610d51565b606091505b5050905080610d8c576040517fbf961a2800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f610dd282610d90565b610ddc8185610d9a565b9350610dec818560208601610daa565b610df581610db8565b840191505092915050565b5f6020820190508181035f830152610e188184610dc8565b905092915050565b5f604051905090565b5f80fd5b5f80fd5b5f819050919050565b610e4381610e31565b8114610e4d575f80fd5b50565b5f81359050610e5e81610e3a565b92915050565b5f80fd5b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610ea282610db8565b810181811067ffffffffffffffff82111715610ec157610ec0610e6c565b5b80604052505050565b5f610ed3610e20565b9050610edf8282610e99565b919050565b5f67ffffffffffffffff821115610efe57610efd610e6c565b5b610f0782610db8565b9050602081019050919050565b828183375f83830152505050565b5f610f34610f2f84610ee4565b610eca565b905082815260208101848484011115610f5057610f4f610e68565b5b610f5b848285610f14565b509392505050565b5f82601f830112610f7757610f76610e64565b5b8135610f87848260208601610f22565b91505092915050565b5f8060408385031215610fa657610fa5610e29565b5b5f610fb385828601610e50565b925050602083013567ffffffffffffffff811115610fd457610fd3610e2d565b5b610fe085828601610f63565b9150509250929050565b610ff381610e31565b82525050565b5f60208201905061100c5f830184610fea565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61103b82611012565b9050919050565b61104b81611031565b82525050565b5f6020820190506110645f830184611042565b92915050565b61107381611031565b811461107d575f80fd5b50565b5f8135905061108e8161106a565b92915050565b5f602082840312156110a9576110a8610e29565b5b5f6110b684828501611080565b91505092915050565b5f819050919050565b6110d1816110bf565b82525050565b5f6040820190506110ea5f8301856110c8565b6110f76020830184610fea565b9392505050565b5f8115159050919050565b611112816110fe565b82525050565b5f60208201905061112b5f830184611109565b92915050565b61113a816110bf565b8114611144575f80fd5b50565b5f8135905061115581611131565b92915050565b5f602082840312156111705761116f610e29565b5b5f61117d84828501611147565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806111ca57607f821691505b6020821081036111dd576111dc611186565b5b50919050565b5f819050919050565b6111fd6111f882610e31565b6111e3565b82525050565b5f81905092915050565b5f61121782610d90565b6112218185611203565b9350611231818560208601610daa565b80840191505092915050565b5f61124882856111ec565b602082019150611258828461120d565b91508190509392505050565b5f6040820190506112775f830185610fea565b6112846020830184611109565b9392505050565b5f81905092915050565b50565b5f6112a35f8361128b565b91506112ae82611295565b5f82019050919050565b5f6112c282611298565b915081905091905056fea2646970667358221220e7d58dfb34ac529ffde68b2e83ae113559a0f68f2ff8ccf7997bfcf0c8b3341364736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`@Qa\x18\xC48\x03\x80a\x18\xC4\x839\x81\x81\x01`@R\x81\x01\x90a\x001\x91\x90a\x02\x17V[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a\0\x96W`@Q\x7F+SxN\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x82\x03a\0\xCFW`@Q\x7Fv\x16d\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x80_\x80a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP`@Q\x80`@\x01`@R\x80`\t\x81R` \x01\x7FSealedBid\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP`\x01\x90\x81a\x01R\x91\x90a\x04\x86V[P`\x01`\x02_a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x81Ba\x01y\x91\x90a\x05\x82V[`\x03\x81\x90UPPPa\x05\xB5V[_\x80\xFD[_\x81\x90P\x91\x90PV[a\x01\x9C\x81a\x01\x8AV[\x81\x14a\x01\xA6W_\x80\xFD[PV[_\x81Q\x90Pa\x01\xB7\x81a\x01\x93V[\x92\x91PPV[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a\x01\xE6\x82a\x01\xBDV[\x90P\x91\x90PV[a\x01\xF6\x81a\x01\xDCV[\x81\x14a\x02\0W_\x80\xFD[PV[_\x81Q\x90Pa\x02\x11\x81a\x01\xEDV[\x92\x91PPV[_\x80`@\x83\x85\x03\x12\x15a\x02-Wa\x02,a\x01\x86V[[_a\x02:\x85\x82\x86\x01a\x01\xA9V[\x92PP` a\x02K\x85\x82\x86\x01a\x02\x03V[\x91PP\x92P\x92\x90PV[_\x81Q\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\"`\x04R`$_\xFD[_`\x02\x82\x04\x90P`\x01\x82\x16\x80a\x02\xD0W`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a\x02\xE3Wa\x02\xE2a\x02\x8CV[[P\x91\x90PV[_\x81\x90P\x81_R` _ \x90P\x91\x90PV[_` `\x1F\x83\x01\x04\x90P\x91\x90PV[_\x82\x82\x1B\x90P\x92\x91PPV[_`\x08\x83\x02a\x03E\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82a\x03\nV[a\x03O\x86\x83a\x03\nV[\x95P\x80\x19\x84\x16\x93P\x80\x86\x16\x84\x17\x92PPP\x93\x92PPPV[_\x81\x90P\x91\x90PV[_a\x03\x8Aa\x03\x85a\x03\x80\x84a\x01\x8AV[a\x03gV[a\x01\x8AV[\x90P\x91\x90PV[_\x81\x90P\x91\x90PV[a\x03\xA3\x83a\x03pV[a\x03\xB7a\x03\xAF\x82a\x03\x91V[\x84\x84Ta\x03\x16V[\x82UPPPPV[_\x90V[a\x03\xCBa\x03\xBFV[a\x03\xD6\x81\x84\x84a\x03\x9AV[PPPV[[\x81\x81\x10\x15a\x03\xF9Wa\x03\xEE_\x82a\x03\xC3V[`\x01\x81\x01\x90Pa\x03\xDCV[PPV[`\x1F\x82\x11\x15a\x04>Wa\x04\x0F\x81a\x02\xE9V[a\x04\x18\x84a\x02\xFBV[\x81\x01` \x85\x10\x15a\x04'W\x81\x90P[a\x04;a\x043\x85a\x02\xFBV[\x83\x01\x82a\x03\xDBV[PP[PPPV[_\x82\x82\x1C\x90P\x92\x91PPV[_a\x04^_\x19\x84`\x08\x02a\x04CV[\x19\x80\x83\x16\x91PP\x92\x91PPV[_a\x04v\x83\x83a\x04OV[\x91P\x82`\x02\x02\x82\x17\x90P\x92\x91PPV[a\x04\x8F\x82a\x02UV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x04\xA8Wa\x04\xA7a\x02_V[[a\x04\xB2\x82Ta\x02\xB9V[a\x04\xBD\x82\x82\x85a\x03\xFDV[_` \x90P`\x1F\x83\x11`\x01\x81\x14a\x04\xEEW_\x84\x15a\x04\xDCW\x82\x87\x01Q\x90P[a\x04\xE6\x85\x82a\x04kV[\x86UPa\x05MV[`\x1F\x19\x84\x16a\x04\xFC\x86a\x02\xE9V[_[\x82\x81\x10\x15a\x05#W\x84\x89\x01Q\x82U`\x01\x82\x01\x91P` \x85\x01\x94P` \x81\x01\x90Pa\x04\xFEV[\x86\x83\x10\x15a\x05@W\x84\x89\x01Qa\x05<`\x1F\x89\x16\x82a\x04OV[\x83UP[`\x01`\x02\x88\x02\x01\x88UPPP[PPPPPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[_a\x05\x8C\x82a\x01\x8AV[\x91Pa\x05\x97\x83a\x01\x8AV[\x92P\x82\x82\x01\x90P\x80\x82\x11\x15a\x05\xAFWa\x05\xAEa\x05UV[[\x92\x91PPV[a\x13\x02\x80a\x05\xC2_9_\xF3\xFE`\x80`@R`\x046\x10a\x01\x08W_5`\xE0\x1C\x80c\x92\"\x80\x06\x11a\0\x94W\x80c\xBC=\xA55\x11a\0cW\x80c\xBC=\xA55\x14a\x03/W\x80c\xD1\xB4\xB9\xA3\x14a\x03kW\x80c\xD5{\xDEy\x14a\x03\x95W\x80c\xEB\x91\xD3~\x14a\x03\xBFW\x80c\xF7r\x82\xAB\x14a\x03\xE9Wa\x01\x08V[\x80c\x92\"\x80\x06\x14a\x02\x83W\x80c\x95{\xB1\xE0\x14a\x02\xADW\x80c\x99E\x95\xE1\x14a\x02\xC9W\x80c\xBA\xBC\xC59\x14a\x02\xF3Wa\x01\x08V[\x80cLX=\x8A\x11a\0\xDBW\x80cLX=\x8A\x14a\x01\x9EW\x80ca\xD0'\xB3\x14a\x01\xC8W\x80cb\xEA\x82\xDB\x14a\x01\xF2W\x80cx|\nl\x14a\x02/W\x80c\x91\xF9\x01W\x14a\x02YWa\x01\x08V[\x80c\x11\x16;,\x14a\x01\x0CW\x80c!c\xB8\xC5\x14a\x016W\x80c$`\x0F\xC3\x14a\x01^W\x80c1\x97\xCB\xB6\x14a\x01tW[_\x80\xFD[4\x80\x15a\x01\x17W_\x80\xFD[Pa\x01 a\x03\xFFV[`@Qa\x01-\x91\x90a\x0E\0V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01AW_\x80\xFD[Pa\x01\\`\x04\x806\x03\x81\x01\x90a\x01W\x91\x90a\x0F\x90V[a\x04\x8FV[\0[4\x80\x15a\x01iW_\x80\xFD[Pa\x01ra\x08\rV[\0[4\x80\x15a\x01\x7FW_\x80\xFD[Pa\x01\x88a\tlV[`@Qa\x01\x95\x91\x90a\x0F\xF9V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01\xA9W_\x80\xFD[Pa\x01\xB2a\trV[`@Qa\x01\xBF\x91\x90a\x10QV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01\xD3W_\x80\xFD[Pa\x01\xDCa\t\x9AV[`@Qa\x01\xE9\x91\x90a\x10QV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01\xFDW_\x80\xFD[Pa\x02\x18`\x04\x806\x03\x81\x01\x90a\x02\x13\x91\x90a\x10\x94V[a\t\xBDV[`@Qa\x02&\x92\x91\x90a\x10\xD7V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02:W_\x80\xFD[Pa\x02Ca\t\xDDV[`@Qa\x02P\x91\x90a\x0F\xF9V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02dW_\x80\xFD[Pa\x02ma\t\xE6V[`@Qa\x02z\x91\x90a\x10QV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02\x8EW_\x80\xFD[Pa\x02\x97a\n\x0BV[`@Qa\x02\xA4\x91\x90a\x11\x18V[`@Q\x80\x91\x03\x90\xF3[a\x02\xC7`\x04\x806\x03\x81\x01\x90a\x02\xC2\x91\x90a\x11[V[a\n\x1DV[\0[4\x80\x15a\x02\xD4W_\x80\xFD[Pa\x02\xDDa\x0B\x05V[`@Qa\x02\xEA\x91\x90a\x0E\0V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02\xFEW_\x80\xFD[Pa\x03\x19`\x04\x806\x03\x81\x01\x90a\x03\x14\x91\x90a\x10\x94V[a\x0B\x91V[`@Qa\x03&\x91\x90a\x11\x18V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x03:W_\x80\xFD[Pa\x03U`\x04\x806\x03\x81\x01\x90a\x03P\x91\x90a\x10\x94V[a\x0B\xE9V[`@Qa\x03b\x91\x90a\x0F\xF9V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x03vW_\x80\xFD[Pa\x03\x7Fa\x0B\xFEV[`@Qa\x03\x8C\x91\x90a\x11\x18V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x03\xA0W_\x80\xFD[Pa\x03\xA9a\x0C\x13V[`@Qa\x03\xB6\x91\x90a\x0F\xF9V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x03\xCAW_\x80\xFD[Pa\x03\xD3a\x0C\x19V[`@Qa\x03\xE0\x91\x90a\x0F\xF9V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x03\xF4W_\x80\xFD[Pa\x03\xFDa\x0C\"V[\0[```\x01\x80Ta\x04\x0E\x90a\x11\xB3V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x04:\x90a\x11\xB3V[\x80\x15a\x04\x85W\x80`\x1F\x10a\x04\\Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x04\x85V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x04hW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x90P\x90V[`\x02_\x90T\x90a\x01\0\n\x90\x04`\xFF\x16a\x04\xD4W`@Q\x7Fi\xB8\xD0\xFE\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_`\x06_3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ `@Q\x80`@\x01`@R\x90\x81_\x82\x01T\x81R` \x01`\x01\x82\x01T\x81RPP\x90P_\x81` \x01Q\x03a\x05oW`@Q\x7F\xB8.\xB6\xB7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x80` \x01Q\x83\x11\x15a\x05\xADW`@Q\x7F\xF3\xBA\xBAV\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x83\x83`@Q` \x01a\x05\xC1\x92\x91\x90a\x12=V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P\x81_\x01Q\x81\x14a\x06\x15W`@Q\x7F\xA4\x995\xAC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_`\x05T\x85\x11\x15a\x07*W_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\x04_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x06\xDAW`\x05T`\x07_`\x04_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ \x81\x90UP[\x84`\x05\x81\x90UP3`\x04_a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP`\x01\x90Pa\x07qV[\x82` \x01Q`\x07_3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ \x81\x90UP[3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\x9C-\x1D\xFF\x1E$AI\xEE\xF8\xB4\x92UgM@u*\xCD\x82[#\xD4\xAD08\x07\xF9\x8F\xE5\x952\x86\x83`@Qa\x07\xB9\x92\x91\x90a\x12dV[`@Q\x80\x91\x03\x90\xA2_`\x06_3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ `\x01\x01\x81\x90UPPPPPPV[_`\x07_3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ T\x90P_\x81\x03a\x08\x87W`@Q\x7Fg\xE3\x99\r\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_`\x07_3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ \x81\x90UP_3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82`@Qa\x08\xEE\x90a\x12\xB8V[_`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80_\x81\x14a\t(W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\t-V[``\x91P[PP\x90P\x80a\thW`@Q\x7F\xBF\x96\x1A(\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[PPV[`\x03T\x81V[_`\x04_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P\x90V[_\x80T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81V[`\x06` R\x80_R`@_ _\x91P\x90P\x80_\x01T\x90\x80`\x01\x01T\x90P\x82V[_`\x03T\x90P\x90V[`\x04_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81V[`\x02_\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x81V[`\x02_\x90T\x90a\x01\0\n\x90\x04`\xFF\x16a\nbW`@Q\x7Fi\xB8\xD0\xFE\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_4\x03a\n\x9BW`@Q\x7Fap\x0F\x91\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`@Q\x80`@\x01`@R\x80\x82\x81R` \x014\x81RP`\x06_3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x82\x01Q\x81_\x01U` \x82\x01Q\x81`\x01\x01U\x90PPPV[`\x01\x80Ta\x0B\x12\x90a\x11\xB3V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x0B>\x90a\x11\xB3V[\x80\x15a\x0B\x89W\x80`\x1F\x10a\x0B`Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x0B\x89V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x0BlW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81V[_`\x04_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14\x90P\x91\x90PV[`\x07` R\x80_R`@_ _\x91P\x90PT\x81V[_`\x02_\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x90P\x90V[`\x05T\x81V[_`\x05T\x90P\x90V[`\x03TB\x10\x15a\x0C^W`@Q\x7Fdcs\x89\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_`\x02_a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\x04_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\r\x8EW_\x80_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\x05T`@Qa\r\x12\x90a\x12\xB8V[_`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80_\x81\x14a\rLW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\rQV[``\x91P[PP\x90P\x80a\r\x8CW`@Q\x7F\xBF\x96\x1A(\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[P[V[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[\x82\x81\x83^_\x83\x83\x01RPPPV[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[_a\r\xD2\x82a\r\x90V[a\r\xDC\x81\x85a\r\x9AV[\x93Pa\r\xEC\x81\x85` \x86\x01a\r\xAAV[a\r\xF5\x81a\r\xB8V[\x84\x01\x91PP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\x0E\x18\x81\x84a\r\xC8V[\x90P\x92\x91PPV[_`@Q\x90P\x90V[_\x80\xFD[_\x80\xFD[_\x81\x90P\x91\x90PV[a\x0EC\x81a\x0E1V[\x81\x14a\x0EMW_\x80\xFD[PV[_\x815\x90Pa\x0E^\x81a\x0E:V[\x92\x91PPV[_\x80\xFD[_\x80\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[a\x0E\xA2\x82a\r\xB8V[\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\x0E\xC1Wa\x0E\xC0a\x0ElV[[\x80`@RPPPV[_a\x0E\xD3a\x0E V[\x90Pa\x0E\xDF\x82\x82a\x0E\x99V[\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x0E\xFEWa\x0E\xFDa\x0ElV[[a\x0F\x07\x82a\r\xB8V[\x90P` \x81\x01\x90P\x91\x90PV[\x82\x81\x837_\x83\x83\x01RPPPV[_a\x0F4a\x0F/\x84a\x0E\xE4V[a\x0E\xCAV[\x90P\x82\x81R` \x81\x01\x84\x84\x84\x01\x11\x15a\x0FPWa\x0FOa\x0EhV[[a\x0F[\x84\x82\x85a\x0F\x14V[P\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a\x0FwWa\x0Fva\x0EdV[[\x815a\x0F\x87\x84\x82` \x86\x01a\x0F\"V[\x91PP\x92\x91PPV[_\x80`@\x83\x85\x03\x12\x15a\x0F\xA6Wa\x0F\xA5a\x0E)V[[_a\x0F\xB3\x85\x82\x86\x01a\x0EPV[\x92PP` \x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0F\xD4Wa\x0F\xD3a\x0E-V[[a\x0F\xE0\x85\x82\x86\x01a\x0FcV[\x91PP\x92P\x92\x90PV[a\x0F\xF3\x81a\x0E1V[\x82RPPV[_` \x82\x01\x90Pa\x10\x0C_\x83\x01\x84a\x0F\xEAV[\x92\x91PPV[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a\x10;\x82a\x10\x12V[\x90P\x91\x90PV[a\x10K\x81a\x101V[\x82RPPV[_` \x82\x01\x90Pa\x10d_\x83\x01\x84a\x10BV[\x92\x91PPV[a\x10s\x81a\x101V[\x81\x14a\x10}W_\x80\xFD[PV[_\x815\x90Pa\x10\x8E\x81a\x10jV[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x10\xA9Wa\x10\xA8a\x0E)V[[_a\x10\xB6\x84\x82\x85\x01a\x10\x80V[\x91PP\x92\x91PPV[_\x81\x90P\x91\x90PV[a\x10\xD1\x81a\x10\xBFV[\x82RPPV[_`@\x82\x01\x90Pa\x10\xEA_\x83\x01\x85a\x10\xC8V[a\x10\xF7` \x83\x01\x84a\x0F\xEAV[\x93\x92PPPV[_\x81\x15\x15\x90P\x91\x90PV[a\x11\x12\x81a\x10\xFEV[\x82RPPV[_` \x82\x01\x90Pa\x11+_\x83\x01\x84a\x11\tV[\x92\x91PPV[a\x11:\x81a\x10\xBFV[\x81\x14a\x11DW_\x80\xFD[PV[_\x815\x90Pa\x11U\x81a\x111V[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x11pWa\x11oa\x0E)V[[_a\x11}\x84\x82\x85\x01a\x11GV[\x91PP\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\"`\x04R`$_\xFD[_`\x02\x82\x04\x90P`\x01\x82\x16\x80a\x11\xCAW`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a\x11\xDDWa\x11\xDCa\x11\x86V[[P\x91\x90PV[_\x81\x90P\x91\x90PV[a\x11\xFDa\x11\xF8\x82a\x0E1V[a\x11\xE3V[\x82RPPV[_\x81\x90P\x92\x91PPV[_a\x12\x17\x82a\r\x90V[a\x12!\x81\x85a\x12\x03V[\x93Pa\x121\x81\x85` \x86\x01a\r\xAAV[\x80\x84\x01\x91PP\x92\x91PPV[_a\x12H\x82\x85a\x11\xECV[` \x82\x01\x91Pa\x12X\x82\x84a\x12\rV[\x91P\x81\x90P\x93\x92PPPV[_`@\x82\x01\x90Pa\x12w_\x83\x01\x85a\x0F\xEAV[a\x12\x84` \x83\x01\x84a\x11\tV[\x93\x92PPPV[_\x81\x90P\x92\x91PPV[PV[_a\x12\xA3_\x83a\x12\x8BV[\x91Pa\x12\xAE\x82a\x12\x95V[_\x82\x01\x90P\x91\x90PV[_a\x12\xC2\x82a\x12\x98V[\x91P\x81\x90P\x91\x90PV\xFE\xA2dipfsX\"\x12 \xE7\xD5\x8D\xFB4\xACR\x9F\xFD\xE6\x8B.\x83\xAE\x115Y\xA0\xF6\x8F/\xF8\xCC\xF7\x99{\xFC\xF0\xC8\xB34\x13dsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405260043610610108575f3560e01c80639222800611610094578063bc3da53511610063578063bc3da5351461032f578063d1b4b9a31461036b578063d57bde7914610395578063eb91d37e146103bf578063f77282ab146103e957610108565b80639222800614610283578063957bb1e0146102ad578063994595e1146102c9578063babcc539146102f357610108565b80634c583d8a116100db5780634c583d8a1461019e57806361d027b3146101c857806362ea82db146101f2578063787c0a6c1461022f57806391f901571461025957610108565b806311163b2c1461010c5780632163b8c51461013657806324600fc31461015e5780633197cbb614610174575b5f80fd5b348015610117575f80fd5b506101206103ff565b60405161012d9190610e00565b60405180910390f35b348015610141575f80fd5b5061015c60048036038101906101579190610f90565b61048f565b005b348015610169575f80fd5b5061017261080d565b005b34801561017f575f80fd5b5061018861096c565b6040516101959190610ff9565b60405180910390f35b3480156101a9575f80fd5b506101b2610972565b6040516101bf9190611051565b60405180910390f35b3480156101d3575f80fd5b506101dc61099a565b6040516101e99190611051565b60405180910390f35b3480156101fd575f80fd5b5061021860048036038101906102139190611094565b6109bd565b6040516102269291906110d7565b60405180910390f35b34801561023a575f80fd5b506102436109dd565b6040516102509190610ff9565b60405180910390f35b348015610264575f80fd5b5061026d6109e6565b60405161027a9190611051565b60405180910390f35b34801561028e575f80fd5b50610297610a0b565b6040516102a49190611118565b60405180910390f35b6102c760048036038101906102c2919061115b565b610a1d565b005b3480156102d4575f80fd5b506102dd610b05565b6040516102ea9190610e00565b60405180910390f35b3480156102fe575f80fd5b5061031960048036038101906103149190611094565b610b91565b6040516103269190611118565b60405180910390f35b34801561033a575f80fd5b5061035560048036038101906103509190611094565b610be9565b6040516103629190610ff9565b60405180910390f35b348015610376575f80fd5b5061037f610bfe565b60405161038c9190611118565b60405180910390f35b3480156103a0575f80fd5b506103a9610c13565b6040516103b69190610ff9565b60405180910390f35b3480156103ca575f80fd5b506103d3610c19565b6040516103e09190610ff9565b60405180910390f35b3480156103f4575f80fd5b506103fd610c22565b005b60606001805461040e906111b3565b80601f016020809104026020016040519081016040528092919081815260200182805461043a906111b3565b80156104855780601f1061045c57610100808354040283529160200191610485565b820191905f5260205f20905b81548152906001019060200180831161046857829003601f168201915b5050505050905090565b60025f9054906101000a900460ff166104d4576040517f69b8d0fe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f60065f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206040518060400160405290815f820154815260200160018201548152505090505f81602001510361056f576040517fb82eb6b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80602001518311156105ad576040517ff3baba5600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f83836040516020016105c192919061123d565b604051602081830303815290604052805190602001209050815f01518114610615576040517fa49935ac00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f60055485111561072a575f73ffffffffffffffffffffffffffffffffffffffff1660045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146106da5760055460075f60045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055505b846005819055503360045f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050610771565b826020015160075f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055505b3373ffffffffffffffffffffffffffffffffffffffff167f9c2d1dff1e244149eef8b49255674d40752acd825b23d4ad303807f98fe5953286836040516107b9929190611264565b60405180910390a25f60065f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20600101819055505050505050565b5f60075f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205490505f8103610887576040517f67e3990d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f60075f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055505f3373ffffffffffffffffffffffffffffffffffffffff16826040516108ee906112b8565b5f6040518083038185875af1925050503d805f8114610928576040519150601f19603f3d011682016040523d82523d5f602084013e61092d565b606091505b5050905080610968576040517fbf961a2800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b60035481565b5f60045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6006602052805f5260405f205f91509050805f0154908060010154905082565b5f600354905090565b60045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025f9054906101000a900460ff1681565b60025f9054906101000a900460ff16610a62576040517f69b8d0fe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f3403610a9b576040517f61700f9100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405180604001604052808281526020013481525060065f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f820151815f01556020820151816001015590505050565b60018054610b12906111b3565b80601f0160208091040260200160405190810160405280929190818152602001828054610b3e906111b3565b8015610b895780601f10610b6057610100808354040283529160200191610b89565b820191905f5260205f20905b815481529060010190602001808311610b6c57829003601f168201915b505050505081565b5f60045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b6007602052805f5260405f205f915090505481565b5f60025f9054906101000a900460ff16905090565b60055481565b5f600554905090565b600354421015610c5e576040517f6463738900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f60025f6101000a81548160ff0219169083151502179055505f73ffffffffffffffffffffffffffffffffffffffff1660045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610d8e575f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600554604051610d12906112b8565b5f6040518083038185875af1925050503d805f8114610d4c576040519150601f19603f3d011682016040523d82523d5f602084013e610d51565b606091505b5050905080610d8c576040517fbf961a2800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f610dd282610d90565b610ddc8185610d9a565b9350610dec818560208601610daa565b610df581610db8565b840191505092915050565b5f6020820190508181035f830152610e188184610dc8565b905092915050565b5f604051905090565b5f80fd5b5f80fd5b5f819050919050565b610e4381610e31565b8114610e4d575f80fd5b50565b5f81359050610e5e81610e3a565b92915050565b5f80fd5b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610ea282610db8565b810181811067ffffffffffffffff82111715610ec157610ec0610e6c565b5b80604052505050565b5f610ed3610e20565b9050610edf8282610e99565b919050565b5f67ffffffffffffffff821115610efe57610efd610e6c565b5b610f0782610db8565b9050602081019050919050565b828183375f83830152505050565b5f610f34610f2f84610ee4565b610eca565b905082815260208101848484011115610f5057610f4f610e68565b5b610f5b848285610f14565b509392505050565b5f82601f830112610f7757610f76610e64565b5b8135610f87848260208601610f22565b91505092915050565b5f8060408385031215610fa657610fa5610e29565b5b5f610fb385828601610e50565b925050602083013567ffffffffffffffff811115610fd457610fd3610e2d565b5b610fe085828601610f63565b9150509250929050565b610ff381610e31565b82525050565b5f60208201905061100c5f830184610fea565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61103b82611012565b9050919050565b61104b81611031565b82525050565b5f6020820190506110645f830184611042565b92915050565b61107381611031565b811461107d575f80fd5b50565b5f8135905061108e8161106a565b92915050565b5f602082840312156110a9576110a8610e29565b5b5f6110b684828501611080565b91505092915050565b5f819050919050565b6110d1816110bf565b82525050565b5f6040820190506110ea5f8301856110c8565b6110f76020830184610fea565b9392505050565b5f8115159050919050565b611112816110fe565b82525050565b5f60208201905061112b5f830184611109565b92915050565b61113a816110bf565b8114611144575f80fd5b50565b5f8135905061115581611131565b92915050565b5f602082840312156111705761116f610e29565b5b5f61117d84828501611147565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806111ca57607f821691505b6020821081036111dd576111dc611186565b5b50919050565b5f819050919050565b6111fd6111f882610e31565b6111e3565b82525050565b5f81905092915050565b5f61121782610d90565b6112218185611203565b9350611231818560208601610daa565b80840191505092915050565b5f61124882856111ec565b602082019150611258828461120d565b91508190509392505050565b5f6040820190506112775f830185610fea565b6112846020830184611109565b9392505050565b5f81905092915050565b50565b5f6112a35f8361128b565b91506112ae82611295565b5f82019050919050565b5f6112c282611298565b915081905091905056fea2646970667358221220e7d58dfb34ac529ffde68b2e83ae113559a0f68f2ff8ccf7997bfcf0c8b3341364736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10a\x01\x08W_5`\xE0\x1C\x80c\x92\"\x80\x06\x11a\0\x94W\x80c\xBC=\xA55\x11a\0cW\x80c\xBC=\xA55\x14a\x03/W\x80c\xD1\xB4\xB9\xA3\x14a\x03kW\x80c\xD5{\xDEy\x14a\x03\x95W\x80c\xEB\x91\xD3~\x14a\x03\xBFW\x80c\xF7r\x82\xAB\x14a\x03\xE9Wa\x01\x08V[\x80c\x92\"\x80\x06\x14a\x02\x83W\x80c\x95{\xB1\xE0\x14a\x02\xADW\x80c\x99E\x95\xE1\x14a\x02\xC9W\x80c\xBA\xBC\xC59\x14a\x02\xF3Wa\x01\x08V[\x80cLX=\x8A\x11a\0\xDBW\x80cLX=\x8A\x14a\x01\x9EW\x80ca\xD0'\xB3\x14a\x01\xC8W\x80cb\xEA\x82\xDB\x14a\x01\xF2W\x80cx|\nl\x14a\x02/W\x80c\x91\xF9\x01W\x14a\x02YWa\x01\x08V[\x80c\x11\x16;,\x14a\x01\x0CW\x80c!c\xB8\xC5\x14a\x016W\x80c$`\x0F\xC3\x14a\x01^W\x80c1\x97\xCB\xB6\x14a\x01tW[_\x80\xFD[4\x80\x15a\x01\x17W_\x80\xFD[Pa\x01 a\x03\xFFV[`@Qa\x01-\x91\x90a\x0E\0V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01AW_\x80\xFD[Pa\x01\\`\x04\x806\x03\x81\x01\x90a\x01W\x91\x90a\x0F\x90V[a\x04\x8FV[\0[4\x80\x15a\x01iW_\x80\xFD[Pa\x01ra\x08\rV[\0[4\x80\x15a\x01\x7FW_\x80\xFD[Pa\x01\x88a\tlV[`@Qa\x01\x95\x91\x90a\x0F\xF9V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01\xA9W_\x80\xFD[Pa\x01\xB2a\trV[`@Qa\x01\xBF\x91\x90a\x10QV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01\xD3W_\x80\xFD[Pa\x01\xDCa\t\x9AV[`@Qa\x01\xE9\x91\x90a\x10QV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01\xFDW_\x80\xFD[Pa\x02\x18`\x04\x806\x03\x81\x01\x90a\x02\x13\x91\x90a\x10\x94V[a\t\xBDV[`@Qa\x02&\x92\x91\x90a\x10\xD7V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02:W_\x80\xFD[Pa\x02Ca\t\xDDV[`@Qa\x02P\x91\x90a\x0F\xF9V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02dW_\x80\xFD[Pa\x02ma\t\xE6V[`@Qa\x02z\x91\x90a\x10QV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02\x8EW_\x80\xFD[Pa\x02\x97a\n\x0BV[`@Qa\x02\xA4\x91\x90a\x11\x18V[`@Q\x80\x91\x03\x90\xF3[a\x02\xC7`\x04\x806\x03\x81\x01\x90a\x02\xC2\x91\x90a\x11[V[a\n\x1DV[\0[4\x80\x15a\x02\xD4W_\x80\xFD[Pa\x02\xDDa\x0B\x05V[`@Qa\x02\xEA\x91\x90a\x0E\0V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02\xFEW_\x80\xFD[Pa\x03\x19`\x04\x806\x03\x81\x01\x90a\x03\x14\x91\x90a\x10\x94V[a\x0B\x91V[`@Qa\x03&\x91\x90a\x11\x18V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x03:W_\x80\xFD[Pa\x03U`\x04\x806\x03\x81\x01\x90a\x03P\x91\x90a\x10\x94V[a\x0B\xE9V[`@Qa\x03b\x91\x90a\x0F\xF9V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x03vW_\x80\xFD[Pa\x03\x7Fa\x0B\xFEV[`@Qa\x03\x8C\x91\x90a\x11\x18V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x03\xA0W_\x80\xFD[Pa\x03\xA9a\x0C\x13V[`@Qa\x03\xB6\x91\x90a\x0F\xF9V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x03\xCAW_\x80\xFD[Pa\x03\xD3a\x0C\x19V[`@Qa\x03\xE0\x91\x90a\x0F\xF9V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x03\xF4W_\x80\xFD[Pa\x03\xFDa\x0C\"V[\0[```\x01\x80Ta\x04\x0E\x90a\x11\xB3V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x04:\x90a\x11\xB3V[\x80\x15a\x04\x85W\x80`\x1F\x10a\x04\\Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x04\x85V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x04hW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x90P\x90V[`\x02_\x90T\x90a\x01\0\n\x90\x04`\xFF\x16a\x04\xD4W`@Q\x7Fi\xB8\xD0\xFE\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_`\x06_3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ `@Q\x80`@\x01`@R\x90\x81_\x82\x01T\x81R` \x01`\x01\x82\x01T\x81RPP\x90P_\x81` \x01Q\x03a\x05oW`@Q\x7F\xB8.\xB6\xB7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x80` \x01Q\x83\x11\x15a\x05\xADW`@Q\x7F\xF3\xBA\xBAV\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x83\x83`@Q` \x01a\x05\xC1\x92\x91\x90a\x12=V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P\x81_\x01Q\x81\x14a\x06\x15W`@Q\x7F\xA4\x995\xAC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_`\x05T\x85\x11\x15a\x07*W_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\x04_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x06\xDAW`\x05T`\x07_`\x04_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ \x81\x90UP[\x84`\x05\x81\x90UP3`\x04_a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP`\x01\x90Pa\x07qV[\x82` \x01Q`\x07_3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ \x81\x90UP[3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\x9C-\x1D\xFF\x1E$AI\xEE\xF8\xB4\x92UgM@u*\xCD\x82[#\xD4\xAD08\x07\xF9\x8F\xE5\x952\x86\x83`@Qa\x07\xB9\x92\x91\x90a\x12dV[`@Q\x80\x91\x03\x90\xA2_`\x06_3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ `\x01\x01\x81\x90UPPPPPPV[_`\x07_3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ T\x90P_\x81\x03a\x08\x87W`@Q\x7Fg\xE3\x99\r\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_`\x07_3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ \x81\x90UP_3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82`@Qa\x08\xEE\x90a\x12\xB8V[_`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80_\x81\x14a\t(W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\t-V[``\x91P[PP\x90P\x80a\thW`@Q\x7F\xBF\x96\x1A(\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[PPV[`\x03T\x81V[_`\x04_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P\x90V[_\x80T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81V[`\x06` R\x80_R`@_ _\x91P\x90P\x80_\x01T\x90\x80`\x01\x01T\x90P\x82V[_`\x03T\x90P\x90V[`\x04_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81V[`\x02_\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x81V[`\x02_\x90T\x90a\x01\0\n\x90\x04`\xFF\x16a\nbW`@Q\x7Fi\xB8\xD0\xFE\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_4\x03a\n\x9BW`@Q\x7Fap\x0F\x91\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`@Q\x80`@\x01`@R\x80\x82\x81R` \x014\x81RP`\x06_3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x82\x01Q\x81_\x01U` \x82\x01Q\x81`\x01\x01U\x90PPPV[`\x01\x80Ta\x0B\x12\x90a\x11\xB3V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x0B>\x90a\x11\xB3V[\x80\x15a\x0B\x89W\x80`\x1F\x10a\x0B`Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x0B\x89V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x0BlW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81V[_`\x04_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14\x90P\x91\x90PV[`\x07` R\x80_R`@_ _\x91P\x90PT\x81V[_`\x02_\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x90P\x90V[`\x05T\x81V[_`\x05T\x90P\x90V[`\x03TB\x10\x15a\x0C^W`@Q\x7Fdcs\x89\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_`\x02_a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\x04_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\r\x8EW_\x80_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\x05T`@Qa\r\x12\x90a\x12\xB8V[_`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80_\x81\x14a\rLW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\rQV[``\x91P[PP\x90P\x80a\r\x8CW`@Q\x7F\xBF\x96\x1A(\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[P[V[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[\x82\x81\x83^_\x83\x83\x01RPPPV[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[_a\r\xD2\x82a\r\x90V[a\r\xDC\x81\x85a\r\x9AV[\x93Pa\r\xEC\x81\x85` \x86\x01a\r\xAAV[a\r\xF5\x81a\r\xB8V[\x84\x01\x91PP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\x0E\x18\x81\x84a\r\xC8V[\x90P\x92\x91PPV[_`@Q\x90P\x90V[_\x80\xFD[_\x80\xFD[_\x81\x90P\x91\x90PV[a\x0EC\x81a\x0E1V[\x81\x14a\x0EMW_\x80\xFD[PV[_\x815\x90Pa\x0E^\x81a\x0E:V[\x92\x91PPV[_\x80\xFD[_\x80\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[a\x0E\xA2\x82a\r\xB8V[\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\x0E\xC1Wa\x0E\xC0a\x0ElV[[\x80`@RPPPV[_a\x0E\xD3a\x0E V[\x90Pa\x0E\xDF\x82\x82a\x0E\x99V[\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x0E\xFEWa\x0E\xFDa\x0ElV[[a\x0F\x07\x82a\r\xB8V[\x90P` \x81\x01\x90P\x91\x90PV[\x82\x81\x837_\x83\x83\x01RPPPV[_a\x0F4a\x0F/\x84a\x0E\xE4V[a\x0E\xCAV[\x90P\x82\x81R` \x81\x01\x84\x84\x84\x01\x11\x15a\x0FPWa\x0FOa\x0EhV[[a\x0F[\x84\x82\x85a\x0F\x14V[P\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a\x0FwWa\x0Fva\x0EdV[[\x815a\x0F\x87\x84\x82` \x86\x01a\x0F\"V[\x91PP\x92\x91PPV[_\x80`@\x83\x85\x03\x12\x15a\x0F\xA6Wa\x0F\xA5a\x0E)V[[_a\x0F\xB3\x85\x82\x86\x01a\x0EPV[\x92PP` \x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0F\xD4Wa\x0F\xD3a\x0E-V[[a\x0F\xE0\x85\x82\x86\x01a\x0FcV[\x91PP\x92P\x92\x90PV[a\x0F\xF3\x81a\x0E1V[\x82RPPV[_` \x82\x01\x90Pa\x10\x0C_\x83\x01\x84a\x0F\xEAV[\x92\x91PPV[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a\x10;\x82a\x10\x12V[\x90P\x91\x90PV[a\x10K\x81a\x101V[\x82RPPV[_` \x82\x01\x90Pa\x10d_\x83\x01\x84a\x10BV[\x92\x91PPV[a\x10s\x81a\x101V[\x81\x14a\x10}W_\x80\xFD[PV[_\x815\x90Pa\x10\x8E\x81a\x10jV[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x10\xA9Wa\x10\xA8a\x0E)V[[_a\x10\xB6\x84\x82\x85\x01a\x10\x80V[\x91PP\x92\x91PPV[_\x81\x90P\x91\x90PV[a\x10\xD1\x81a\x10\xBFV[\x82RPPV[_`@\x82\x01\x90Pa\x10\xEA_\x83\x01\x85a\x10\xC8V[a\x10\xF7` \x83\x01\x84a\x0F\xEAV[\x93\x92PPPV[_\x81\x15\x15\x90P\x91\x90PV[a\x11\x12\x81a\x10\xFEV[\x82RPPV[_` \x82\x01\x90Pa\x11+_\x83\x01\x84a\x11\tV[\x92\x91PPV[a\x11:\x81a\x10\xBFV[\x81\x14a\x11DW_\x80\xFD[PV[_\x815\x90Pa\x11U\x81a\x111V[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x11pWa\x11oa\x0E)V[[_a\x11}\x84\x82\x85\x01a\x11GV[\x91PP\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\"`\x04R`$_\xFD[_`\x02\x82\x04\x90P`\x01\x82\x16\x80a\x11\xCAW`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a\x11\xDDWa\x11\xDCa\x11\x86V[[P\x91\x90PV[_\x81\x90P\x91\x90PV[a\x11\xFDa\x11\xF8\x82a\x0E1V[a\x11\xE3V[\x82RPPV[_\x81\x90P\x92\x91PPV[_a\x12\x17\x82a\r\x90V[a\x12!\x81\x85a\x12\x03V[\x93Pa\x121\x81\x85` \x86\x01a\r\xAAV[\x80\x84\x01\x91PP\x92\x91PPV[_a\x12H\x82\x85a\x11\xECV[` \x82\x01\x91Pa\x12X\x82\x84a\x12\rV[\x91P\x81\x90P\x93\x92PPPV[_`@\x82\x01\x90Pa\x12w_\x83\x01\x85a\x0F\xEAV[a\x12\x84` \x83\x01\x84a\x11\tV[\x93\x92PPPV[_\x81\x90P\x92\x91PPV[PV[_a\x12\xA3_\x83a\x12\x8BV[\x91Pa\x12\xAE\x82a\x12\x95V[_\x82\x01\x90P\x91\x90PV[_a\x12\xC2\x82a\x12\x98V[\x91P\x81\x90P\x91\x90PV\xFE\xA2dipfsX\"\x12 \xE7\xD5\x8D\xFB4\xACR\x9F\xFD\xE6\x8B.\x83\xAE\x115Y\xA0\xF6\x8F/\xF8\xCC\xF7\x99{\xFC\xF0\xC8\xB34\x13dsolcC\0\x08\x19\x003",
    );
    /**Custom error with signature `AddressNotAllowed()` and selector `0x2b53784e`.
```solidity
error AddressNotAllowed();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AddressNotAllowed {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AddressNotAllowed> for UnderlyingRustTuple<'_> {
            fn from(value: AddressNotAllowed) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AddressNotAllowed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AddressNotAllowed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AddressNotAllowed()";
            const SELECTOR: [u8; 4] = [43u8, 83u8, 120u8, 78u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `AuctionNotActive()` and selector `0x69b8d0fe`.
```solidity
error AuctionNotActive();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AuctionNotActive {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AuctionNotActive> for UnderlyingRustTuple<'_> {
            fn from(value: AuctionNotActive) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AuctionNotActive {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AuctionNotActive {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AuctionNotActive()";
            const SELECTOR: [u8; 4] = [105u8, 184u8, 208u8, 254u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `AuctionNotEnded()` and selector `0x64637389`.
```solidity
error AuctionNotEnded();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AuctionNotEnded {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AuctionNotEnded> for UnderlyingRustTuple<'_> {
            fn from(value: AuctionNotEnded) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AuctionNotEnded {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AuctionNotEnded {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AuctionNotEnded()";
            const SELECTOR: [u8; 4] = [100u8, 99u8, 115u8, 137u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `BidExceedsDeposit()` and selector `0xf3baba56`.
```solidity
error BidExceedsDeposit();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct BidExceedsDeposit {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<BidExceedsDeposit> for UnderlyingRustTuple<'_> {
            fn from(value: BidExceedsDeposit) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for BidExceedsDeposit {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for BidExceedsDeposit {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "BidExceedsDeposit()";
            const SELECTOR: [u8; 4] = [243u8, 186u8, 186u8, 86u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `InvalidBidDeposit()` and selector `0x61700f91`.
```solidity
error InvalidBidDeposit();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidBidDeposit {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidBidDeposit> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidBidDeposit) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidBidDeposit {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidBidDeposit {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidBidDeposit()";
            const SELECTOR: [u8; 4] = [97u8, 112u8, 15u8, 145u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `InvalidBidReveal()` and selector `0xa49935ac`.
```solidity
error InvalidBidReveal();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidBidReveal {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidBidReveal> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidBidReveal) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidBidReveal {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidBidReveal {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidBidReveal()";
            const SELECTOR: [u8; 4] = [164u8, 153u8, 53u8, 172u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `InvalidDuration()` and selector `0x76166401`.
```solidity
error InvalidDuration();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidDuration {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidDuration> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidDuration) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidDuration {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidDuration {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidDuration()";
            const SELECTOR: [u8; 4] = [118u8, 22u8, 100u8, 1u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `NoBidFound()` and selector `0xb82eb6b7`.
```solidity
error NoBidFound();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NoBidFound {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NoBidFound> for UnderlyingRustTuple<'_> {
            fn from(value: NoBidFound) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NoBidFound {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NoBidFound {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NoBidFound()";
            const SELECTOR: [u8; 4] = [184u8, 46u8, 182u8, 183u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `NoFundsToWithdraw()` and selector `0x67e3990d`.
```solidity
error NoFundsToWithdraw();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NoFundsToWithdraw {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NoFundsToWithdraw> for UnderlyingRustTuple<'_> {
            fn from(value: NoFundsToWithdraw) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NoFundsToWithdraw {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NoFundsToWithdraw {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NoFundsToWithdraw()";
            const SELECTOR: [u8; 4] = [103u8, 227u8, 153u8, 13u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `TransactionFailed()` and selector `0xbf961a28`.
```solidity
error TransactionFailed();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TransactionFailed {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<TransactionFailed> for UnderlyingRustTuple<'_> {
            fn from(value: TransactionFailed) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for TransactionFailed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for TransactionFailed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "TransactionFailed()";
            const SELECTOR: [u8; 4] = [191u8, 150u8, 26u8, 40u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Event with signature `BidRevealed(address,uint256,bool)` and selector `0x9c2d1dff1e244149eef8b49255674d40752acd825b23d4ad303807f98fe59532`.
```solidity
event BidRevealed(address indexed bidder, uint256 bid, bool isHighestBid);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct BidRevealed {
        #[allow(missing_docs)]
        pub bidder: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub bid: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub isHighestBid: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for BidRevealed {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bool,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "BidRevealed(address,uint256,bool)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                156u8,
                45u8,
                29u8,
                255u8,
                30u8,
                36u8,
                65u8,
                73u8,
                238u8,
                248u8,
                180u8,
                146u8,
                85u8,
                103u8,
                77u8,
                64u8,
                117u8,
                42u8,
                205u8,
                130u8,
                91u8,
                35u8,
                212u8,
                173u8,
                48u8,
                56u8,
                7u8,
                249u8,
                143u8,
                229u8,
                149u8,
                50u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    bidder: topics.1,
                    bid: data.0,
                    isHighestBid: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.bid),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.isHighestBid,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.bidder.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.bidder,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for BidRevealed {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&BidRevealed> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &BidRevealed) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(uint256 _duration, address _treasury);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub _duration: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub _treasury: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value._duration, value._treasury)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _duration: tuple.0,
                        _treasury: tuple.1,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._duration),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._treasury,
                    ),
                )
            }
        }
    };
    /**Function with signature `auctionActive()` and selector `0x92228006`.
```solidity
function auctionActive() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct auctionActiveCall {}
    ///Container type for the return parameters of the [`auctionActive()`](auctionActiveCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct auctionActiveReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<auctionActiveCall> for UnderlyingRustTuple<'_> {
                fn from(value: auctionActiveCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for auctionActiveCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<auctionActiveReturn> for UnderlyingRustTuple<'_> {
                fn from(value: auctionActiveReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for auctionActiveReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for auctionActiveCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = auctionActiveReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "auctionActive()";
            const SELECTOR: [u8; 4] = [146u8, 34u8, 128u8, 6u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `auctionType()` and selector `0x994595e1`.
```solidity
function auctionType() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct auctionTypeCall {}
    ///Container type for the return parameters of the [`auctionType()`](auctionTypeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct auctionTypeReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<auctionTypeCall> for UnderlyingRustTuple<'_> {
                fn from(value: auctionTypeCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for auctionTypeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<auctionTypeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: auctionTypeReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for auctionTypeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for auctionTypeCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = auctionTypeReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "auctionType()";
            const SELECTOR: [u8; 4] = [153u8, 69u8, 149u8, 225u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `bid(bytes32)` and selector `0x957bb1e0`.
```solidity
function bid(bytes32 _sealedBid) external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bidCall {
        #[allow(missing_docs)]
        pub _sealedBid: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`bid(bytes32)`](bidCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bidReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bidCall> for UnderlyingRustTuple<'_> {
                fn from(value: bidCall) -> Self {
                    (value._sealedBid,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for bidCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _sealedBid: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bidReturn> for UnderlyingRustTuple<'_> {
                fn from(value: bidReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for bidReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for bidCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bidReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "bid(bytes32)";
            const SELECTOR: [u8; 4] = [149u8, 123u8, 177u8, 224u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self._sealedBid),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `bids(address)` and selector `0x62ea82db`.
```solidity
function bids(address) external view returns (bytes32 sealedBid, uint256 deposit);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bidsCall {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`bids(address)`](bidsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bidsReturn {
        #[allow(missing_docs)]
        pub sealedBid: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub deposit: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bidsCall> for UnderlyingRustTuple<'_> {
                fn from(value: bidsCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for bidsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bidsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: bidsReturn) -> Self {
                    (value.sealedBid, value.deposit)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for bidsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        sealedBid: tuple.0,
                        deposit: tuple.1,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for bidsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bidsReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "bids(address)";
            const SELECTOR: [u8; 4] = [98u8, 234u8, 130u8, 219u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `endTime()` and selector `0x3197cbb6`.
```solidity
function endTime() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct endTimeCall {}
    ///Container type for the return parameters of the [`endTime()`](endTimeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct endTimeReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<endTimeCall> for UnderlyingRustTuple<'_> {
                fn from(value: endTimeCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for endTimeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<endTimeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: endTimeReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for endTimeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for endTimeCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = endTimeReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "endTime()";
            const SELECTOR: [u8; 4] = [49u8, 151u8, 203u8, 182u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `finalizeAuction()` and selector `0xf77282ab`.
```solidity
function finalizeAuction() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct finalizeAuctionCall {}
    ///Container type for the return parameters of the [`finalizeAuction()`](finalizeAuctionCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct finalizeAuctionReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<finalizeAuctionCall> for UnderlyingRustTuple<'_> {
                fn from(value: finalizeAuctionCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for finalizeAuctionCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<finalizeAuctionReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: finalizeAuctionReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for finalizeAuctionReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for finalizeAuctionCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = finalizeAuctionReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "finalizeAuction()";
            const SELECTOR: [u8; 4] = [247u8, 114u8, 130u8, 171u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getAuctionEndTime()` and selector `0x787c0a6c`.
```solidity
function getAuctionEndTime() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAuctionEndTimeCall {}
    ///Container type for the return parameters of the [`getAuctionEndTime()`](getAuctionEndTimeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAuctionEndTimeReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAuctionEndTimeCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAuctionEndTimeCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAuctionEndTimeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAuctionEndTimeReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAuctionEndTimeReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAuctionEndTimeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getAuctionEndTimeCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getAuctionEndTimeReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getAuctionEndTime()";
            const SELECTOR: [u8; 4] = [120u8, 124u8, 10u8, 108u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getAuctionType()` and selector `0x11163b2c`.
```solidity
function getAuctionType() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAuctionTypeCall {}
    ///Container type for the return parameters of the [`getAuctionType()`](getAuctionTypeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAuctionTypeReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAuctionTypeCall> for UnderlyingRustTuple<'_> {
                fn from(value: getAuctionTypeCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getAuctionTypeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAuctionTypeReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAuctionTypeReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAuctionTypeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getAuctionTypeCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getAuctionTypeReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getAuctionType()";
            const SELECTOR: [u8; 4] = [17u8, 22u8, 59u8, 44u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getAuctionWinner()` and selector `0x4c583d8a`.
```solidity
function getAuctionWinner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAuctionWinnerCall {}
    ///Container type for the return parameters of the [`getAuctionWinner()`](getAuctionWinnerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAuctionWinnerReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAuctionWinnerCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAuctionWinnerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAuctionWinnerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAuctionWinnerReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAuctionWinnerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAuctionWinnerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getAuctionWinnerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getAuctionWinnerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getAuctionWinner()";
            const SELECTOR: [u8; 4] = [76u8, 88u8, 61u8, 138u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getCurrentPrice()` and selector `0xeb91d37e`.
```solidity
function getCurrentPrice() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCurrentPriceCall {}
    ///Container type for the return parameters of the [`getCurrentPrice()`](getCurrentPriceCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCurrentPriceReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCurrentPriceCall> for UnderlyingRustTuple<'_> {
                fn from(value: getCurrentPriceCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getCurrentPriceCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCurrentPriceReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCurrentPriceReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCurrentPriceReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getCurrentPriceCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getCurrentPriceReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getCurrentPrice()";
            const SELECTOR: [u8; 4] = [235u8, 145u8, 211u8, 126u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `highestBid()` and selector `0xd57bde79`.
```solidity
function highestBid() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct highestBidCall {}
    ///Container type for the return parameters of the [`highestBid()`](highestBidCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct highestBidReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<highestBidCall> for UnderlyingRustTuple<'_> {
                fn from(value: highestBidCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for highestBidCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<highestBidReturn> for UnderlyingRustTuple<'_> {
                fn from(value: highestBidReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for highestBidReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for highestBidCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = highestBidReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "highestBid()";
            const SELECTOR: [u8; 4] = [213u8, 123u8, 222u8, 121u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `highestBidder()` and selector `0x91f90157`.
```solidity
function highestBidder() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct highestBidderCall {}
    ///Container type for the return parameters of the [`highestBidder()`](highestBidderCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct highestBidderReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<highestBidderCall> for UnderlyingRustTuple<'_> {
                fn from(value: highestBidderCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for highestBidderCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<highestBidderReturn> for UnderlyingRustTuple<'_> {
                fn from(value: highestBidderReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for highestBidderReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for highestBidderCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = highestBidderReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "highestBidder()";
            const SELECTOR: [u8; 4] = [145u8, 249u8, 1u8, 87u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isAllowed(address)` and selector `0xbabcc539`.
```solidity
function isAllowed(address proposer) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedCall {
        #[allow(missing_docs)]
        pub proposer: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`isAllowed(address)`](isAllowedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedCall> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedCall) -> Self {
                    (value.proposer,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { proposer: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isAllowedCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isAllowedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isAllowed(address)";
            const SELECTOR: [u8; 4] = [186u8, 188u8, 197u8, 57u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.proposer,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isAuctionActive()` and selector `0xd1b4b9a3`.
```solidity
function isAuctionActive() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAuctionActiveCall {}
    ///Container type for the return parameters of the [`isAuctionActive()`](isAuctionActiveCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAuctionActiveReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAuctionActiveCall> for UnderlyingRustTuple<'_> {
                fn from(value: isAuctionActiveCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAuctionActiveCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAuctionActiveReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: isAuctionActiveReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isAuctionActiveReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isAuctionActiveCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isAuctionActiveReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isAuctionActive()";
            const SELECTOR: [u8; 4] = [209u8, 180u8, 185u8, 163u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `refunds(address)` and selector `0xbc3da535`.
```solidity
function refunds(address) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct refundsCall {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`refunds(address)`](refundsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct refundsReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<refundsCall> for UnderlyingRustTuple<'_> {
                fn from(value: refundsCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for refundsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<refundsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: refundsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for refundsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for refundsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = refundsReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "refunds(address)";
            const SELECTOR: [u8; 4] = [188u8, 61u8, 165u8, 53u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `revealBid(uint256,string)` and selector `0x2163b8c5`.
```solidity
function revealBid(uint256 _bid, string memory _salt) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct revealBidCall {
        #[allow(missing_docs)]
        pub _bid: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub _salt: alloy::sol_types::private::String,
    }
    ///Container type for the return parameters of the [`revealBid(uint256,string)`](revealBidCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct revealBidReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::String,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::String,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<revealBidCall> for UnderlyingRustTuple<'_> {
                fn from(value: revealBidCall) -> Self {
                    (value._bid, value._salt)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for revealBidCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _bid: tuple.0,
                        _salt: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<revealBidReturn> for UnderlyingRustTuple<'_> {
                fn from(value: revealBidReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for revealBidReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for revealBidCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::String,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = revealBidReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "revealBid(uint256,string)";
            const SELECTOR: [u8; 4] = [33u8, 99u8, 184u8, 197u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._bid),
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self._salt,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `treasury()` and selector `0x61d027b3`.
```solidity
function treasury() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct treasuryCall {}
    ///Container type for the return parameters of the [`treasury()`](treasuryCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct treasuryReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<treasuryCall> for UnderlyingRustTuple<'_> {
                fn from(value: treasuryCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for treasuryCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<treasuryReturn> for UnderlyingRustTuple<'_> {
                fn from(value: treasuryReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for treasuryReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for treasuryCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = treasuryReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "treasury()";
            const SELECTOR: [u8; 4] = [97u8, 208u8, 39u8, 179u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `withdrawFunds()` and selector `0x24600fc3`.
```solidity
function withdrawFunds() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct withdrawFundsCall {}
    ///Container type for the return parameters of the [`withdrawFunds()`](withdrawFundsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct withdrawFundsReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<withdrawFundsCall> for UnderlyingRustTuple<'_> {
                fn from(value: withdrawFundsCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for withdrawFundsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<withdrawFundsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: withdrawFundsReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for withdrawFundsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for withdrawFundsCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = withdrawFundsReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "withdrawFunds()";
            const SELECTOR: [u8; 4] = [36u8, 96u8, 15u8, 195u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`SealedBidAuctionSequencingModule`](self) function calls.
    pub enum SealedBidAuctionSequencingModuleCalls {
        #[allow(missing_docs)]
        auctionActive(auctionActiveCall),
        #[allow(missing_docs)]
        auctionType(auctionTypeCall),
        #[allow(missing_docs)]
        bid(bidCall),
        #[allow(missing_docs)]
        bids(bidsCall),
        #[allow(missing_docs)]
        endTime(endTimeCall),
        #[allow(missing_docs)]
        finalizeAuction(finalizeAuctionCall),
        #[allow(missing_docs)]
        getAuctionEndTime(getAuctionEndTimeCall),
        #[allow(missing_docs)]
        getAuctionType(getAuctionTypeCall),
        #[allow(missing_docs)]
        getAuctionWinner(getAuctionWinnerCall),
        #[allow(missing_docs)]
        getCurrentPrice(getCurrentPriceCall),
        #[allow(missing_docs)]
        highestBid(highestBidCall),
        #[allow(missing_docs)]
        highestBidder(highestBidderCall),
        #[allow(missing_docs)]
        isAllowed(isAllowedCall),
        #[allow(missing_docs)]
        isAuctionActive(isAuctionActiveCall),
        #[allow(missing_docs)]
        refunds(refundsCall),
        #[allow(missing_docs)]
        revealBid(revealBidCall),
        #[allow(missing_docs)]
        treasury(treasuryCall),
        #[allow(missing_docs)]
        withdrawFunds(withdrawFundsCall),
    }
    #[automatically_derived]
    impl SealedBidAuctionSequencingModuleCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [17u8, 22u8, 59u8, 44u8],
            [33u8, 99u8, 184u8, 197u8],
            [36u8, 96u8, 15u8, 195u8],
            [49u8, 151u8, 203u8, 182u8],
            [76u8, 88u8, 61u8, 138u8],
            [97u8, 208u8, 39u8, 179u8],
            [98u8, 234u8, 130u8, 219u8],
            [120u8, 124u8, 10u8, 108u8],
            [145u8, 249u8, 1u8, 87u8],
            [146u8, 34u8, 128u8, 6u8],
            [149u8, 123u8, 177u8, 224u8],
            [153u8, 69u8, 149u8, 225u8],
            [186u8, 188u8, 197u8, 57u8],
            [188u8, 61u8, 165u8, 53u8],
            [209u8, 180u8, 185u8, 163u8],
            [213u8, 123u8, 222u8, 121u8],
            [235u8, 145u8, 211u8, 126u8],
            [247u8, 114u8, 130u8, 171u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for SealedBidAuctionSequencingModuleCalls {
        const NAME: &'static str = "SealedBidAuctionSequencingModuleCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 18usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::auctionActive(_) => {
                    <auctionActiveCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::auctionType(_) => {
                    <auctionTypeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::bid(_) => <bidCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::bids(_) => <bidsCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::endTime(_) => <endTimeCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::finalizeAuction(_) => {
                    <finalizeAuctionCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getAuctionEndTime(_) => {
                    <getAuctionEndTimeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getAuctionType(_) => {
                    <getAuctionTypeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getAuctionWinner(_) => {
                    <getAuctionWinnerCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getCurrentPrice(_) => {
                    <getCurrentPriceCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::highestBid(_) => {
                    <highestBidCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::highestBidder(_) => {
                    <highestBidderCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isAllowed(_) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isAuctionActive(_) => {
                    <isAuctionActiveCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::refunds(_) => <refundsCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::revealBid(_) => {
                    <revealBidCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::treasury(_) => <treasuryCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::withdrawFunds(_) => {
                    <withdrawFundsCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleCalls>] = &[
                {
                    fn getAuctionType(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleCalls> {
                        <getAuctionTypeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleCalls::getAuctionType)
                    }
                    getAuctionType
                },
                {
                    fn revealBid(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleCalls> {
                        <revealBidCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleCalls::revealBid)
                    }
                    revealBid
                },
                {
                    fn withdrawFunds(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleCalls> {
                        <withdrawFundsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleCalls::withdrawFunds)
                    }
                    withdrawFunds
                },
                {
                    fn endTime(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleCalls> {
                        <endTimeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleCalls::endTime)
                    }
                    endTime
                },
                {
                    fn getAuctionWinner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleCalls> {
                        <getAuctionWinnerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleCalls::getAuctionWinner)
                    }
                    getAuctionWinner
                },
                {
                    fn treasury(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleCalls> {
                        <treasuryCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleCalls::treasury)
                    }
                    treasury
                },
                {
                    fn bids(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleCalls> {
                        <bidsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleCalls::bids)
                    }
                    bids
                },
                {
                    fn getAuctionEndTime(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleCalls> {
                        <getAuctionEndTimeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SealedBidAuctionSequencingModuleCalls::getAuctionEndTime,
                            )
                    }
                    getAuctionEndTime
                },
                {
                    fn highestBidder(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleCalls> {
                        <highestBidderCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleCalls::highestBidder)
                    }
                    highestBidder
                },
                {
                    fn auctionActive(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleCalls> {
                        <auctionActiveCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleCalls::auctionActive)
                    }
                    auctionActive
                },
                {
                    fn bid(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleCalls> {
                        <bidCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleCalls::bid)
                    }
                    bid
                },
                {
                    fn auctionType(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleCalls> {
                        <auctionTypeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleCalls::auctionType)
                    }
                    auctionType
                },
                {
                    fn isAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleCalls> {
                        <isAllowedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleCalls::isAllowed)
                    }
                    isAllowed
                },
                {
                    fn refunds(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleCalls> {
                        <refundsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleCalls::refunds)
                    }
                    refunds
                },
                {
                    fn isAuctionActive(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleCalls> {
                        <isAuctionActiveCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleCalls::isAuctionActive)
                    }
                    isAuctionActive
                },
                {
                    fn highestBid(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleCalls> {
                        <highestBidCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleCalls::highestBid)
                    }
                    highestBid
                },
                {
                    fn getCurrentPrice(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleCalls> {
                        <getCurrentPriceCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleCalls::getCurrentPrice)
                    }
                    getCurrentPrice
                },
                {
                    fn finalizeAuction(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleCalls> {
                        <finalizeAuctionCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleCalls::finalizeAuction)
                    }
                    finalizeAuction
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::auctionActive(inner) => {
                    <auctionActiveCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::auctionType(inner) => {
                    <auctionTypeCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::bid(inner) => {
                    <bidCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::bids(inner) => {
                    <bidsCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::endTime(inner) => {
                    <endTimeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::finalizeAuction(inner) => {
                    <finalizeAuctionCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getAuctionEndTime(inner) => {
                    <getAuctionEndTimeCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getAuctionType(inner) => {
                    <getAuctionTypeCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getAuctionWinner(inner) => {
                    <getAuctionWinnerCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getCurrentPrice(inner) => {
                    <getCurrentPriceCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::highestBid(inner) => {
                    <highestBidCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::highestBidder(inner) => {
                    <highestBidderCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isAuctionActive(inner) => {
                    <isAuctionActiveCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::refunds(inner) => {
                    <refundsCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::revealBid(inner) => {
                    <revealBidCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::treasury(inner) => {
                    <treasuryCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::withdrawFunds(inner) => {
                    <withdrawFundsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::auctionActive(inner) => {
                    <auctionActiveCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::auctionType(inner) => {
                    <auctionTypeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::bid(inner) => {
                    <bidCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::bids(inner) => {
                    <bidsCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::endTime(inner) => {
                    <endTimeCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::finalizeAuction(inner) => {
                    <finalizeAuctionCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getAuctionEndTime(inner) => {
                    <getAuctionEndTimeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getAuctionType(inner) => {
                    <getAuctionTypeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getAuctionWinner(inner) => {
                    <getAuctionWinnerCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getCurrentPrice(inner) => {
                    <getCurrentPriceCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::highestBid(inner) => {
                    <highestBidCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::highestBidder(inner) => {
                    <highestBidderCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isAuctionActive(inner) => {
                    <isAuctionActiveCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::refunds(inner) => {
                    <refundsCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::revealBid(inner) => {
                    <revealBidCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::treasury(inner) => {
                    <treasuryCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::withdrawFunds(inner) => {
                    <withdrawFundsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`SealedBidAuctionSequencingModule`](self) custom errors.
    pub enum SealedBidAuctionSequencingModuleErrors {
        #[allow(missing_docs)]
        AddressNotAllowed(AddressNotAllowed),
        #[allow(missing_docs)]
        AuctionNotActive(AuctionNotActive),
        #[allow(missing_docs)]
        AuctionNotEnded(AuctionNotEnded),
        #[allow(missing_docs)]
        BidExceedsDeposit(BidExceedsDeposit),
        #[allow(missing_docs)]
        InvalidBidDeposit(InvalidBidDeposit),
        #[allow(missing_docs)]
        InvalidBidReveal(InvalidBidReveal),
        #[allow(missing_docs)]
        InvalidDuration(InvalidDuration),
        #[allow(missing_docs)]
        NoBidFound(NoBidFound),
        #[allow(missing_docs)]
        NoFundsToWithdraw(NoFundsToWithdraw),
        #[allow(missing_docs)]
        TransactionFailed(TransactionFailed),
    }
    #[automatically_derived]
    impl SealedBidAuctionSequencingModuleErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [43u8, 83u8, 120u8, 78u8],
            [97u8, 112u8, 15u8, 145u8],
            [100u8, 99u8, 115u8, 137u8],
            [103u8, 227u8, 153u8, 13u8],
            [105u8, 184u8, 208u8, 254u8],
            [118u8, 22u8, 100u8, 1u8],
            [164u8, 153u8, 53u8, 172u8],
            [184u8, 46u8, 182u8, 183u8],
            [191u8, 150u8, 26u8, 40u8],
            [243u8, 186u8, 186u8, 86u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for SealedBidAuctionSequencingModuleErrors {
        const NAME: &'static str = "SealedBidAuctionSequencingModuleErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 10usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AddressNotAllowed(_) => {
                    <AddressNotAllowed as alloy_sol_types::SolError>::SELECTOR
                }
                Self::AuctionNotActive(_) => {
                    <AuctionNotActive as alloy_sol_types::SolError>::SELECTOR
                }
                Self::AuctionNotEnded(_) => {
                    <AuctionNotEnded as alloy_sol_types::SolError>::SELECTOR
                }
                Self::BidExceedsDeposit(_) => {
                    <BidExceedsDeposit as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidBidDeposit(_) => {
                    <InvalidBidDeposit as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidBidReveal(_) => {
                    <InvalidBidReveal as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidDuration(_) => {
                    <InvalidDuration as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NoBidFound(_) => {
                    <NoBidFound as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NoFundsToWithdraw(_) => {
                    <NoFundsToWithdraw as alloy_sol_types::SolError>::SELECTOR
                }
                Self::TransactionFailed(_) => {
                    <TransactionFailed as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleErrors>] = &[
                {
                    fn AddressNotAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SealedBidAuctionSequencingModuleErrors,
                    > {
                        <AddressNotAllowed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SealedBidAuctionSequencingModuleErrors::AddressNotAllowed,
                            )
                    }
                    AddressNotAllowed
                },
                {
                    fn InvalidBidDeposit(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SealedBidAuctionSequencingModuleErrors,
                    > {
                        <InvalidBidDeposit as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SealedBidAuctionSequencingModuleErrors::InvalidBidDeposit,
                            )
                    }
                    InvalidBidDeposit
                },
                {
                    fn AuctionNotEnded(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SealedBidAuctionSequencingModuleErrors,
                    > {
                        <AuctionNotEnded as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleErrors::AuctionNotEnded)
                    }
                    AuctionNotEnded
                },
                {
                    fn NoFundsToWithdraw(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SealedBidAuctionSequencingModuleErrors,
                    > {
                        <NoFundsToWithdraw as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SealedBidAuctionSequencingModuleErrors::NoFundsToWithdraw,
                            )
                    }
                    NoFundsToWithdraw
                },
                {
                    fn AuctionNotActive(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SealedBidAuctionSequencingModuleErrors,
                    > {
                        <AuctionNotActive as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SealedBidAuctionSequencingModuleErrors::AuctionNotActive,
                            )
                    }
                    AuctionNotActive
                },
                {
                    fn InvalidDuration(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SealedBidAuctionSequencingModuleErrors,
                    > {
                        <InvalidDuration as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleErrors::InvalidDuration)
                    }
                    InvalidDuration
                },
                {
                    fn InvalidBidReveal(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SealedBidAuctionSequencingModuleErrors,
                    > {
                        <InvalidBidReveal as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SealedBidAuctionSequencingModuleErrors::InvalidBidReveal,
                            )
                    }
                    InvalidBidReveal
                },
                {
                    fn NoBidFound(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SealedBidAuctionSequencingModuleErrors,
                    > {
                        <NoBidFound as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleErrors::NoBidFound)
                    }
                    NoBidFound
                },
                {
                    fn TransactionFailed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SealedBidAuctionSequencingModuleErrors,
                    > {
                        <TransactionFailed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SealedBidAuctionSequencingModuleErrors::TransactionFailed,
                            )
                    }
                    TransactionFailed
                },
                {
                    fn BidExceedsDeposit(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SealedBidAuctionSequencingModuleErrors,
                    > {
                        <BidExceedsDeposit as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SealedBidAuctionSequencingModuleErrors::BidExceedsDeposit,
                            )
                    }
                    BidExceedsDeposit
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AddressNotAllowed(inner) => {
                    <AddressNotAllowed as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::AuctionNotActive(inner) => {
                    <AuctionNotActive as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::AuctionNotEnded(inner) => {
                    <AuctionNotEnded as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::BidExceedsDeposit(inner) => {
                    <BidExceedsDeposit as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidBidDeposit(inner) => {
                    <InvalidBidDeposit as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidBidReveal(inner) => {
                    <InvalidBidReveal as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidDuration(inner) => {
                    <InvalidDuration as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NoBidFound(inner) => {
                    <NoBidFound as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::NoFundsToWithdraw(inner) => {
                    <NoFundsToWithdraw as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::TransactionFailed(inner) => {
                    <TransactionFailed as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AddressNotAllowed(inner) => {
                    <AddressNotAllowed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::AuctionNotActive(inner) => {
                    <AuctionNotActive as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::AuctionNotEnded(inner) => {
                    <AuctionNotEnded as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::BidExceedsDeposit(inner) => {
                    <BidExceedsDeposit as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidBidDeposit(inner) => {
                    <InvalidBidDeposit as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidBidReveal(inner) => {
                    <InvalidBidReveal as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidDuration(inner) => {
                    <InvalidDuration as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NoBidFound(inner) => {
                    <NoBidFound as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
                Self::NoFundsToWithdraw(inner) => {
                    <NoFundsToWithdraw as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::TransactionFailed(inner) => {
                    <TransactionFailed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`SealedBidAuctionSequencingModule`](self) events.
    pub enum SealedBidAuctionSequencingModuleEvents {
        #[allow(missing_docs)]
        BidRevealed(BidRevealed),
    }
    #[automatically_derived]
    impl SealedBidAuctionSequencingModuleEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                156u8,
                45u8,
                29u8,
                255u8,
                30u8,
                36u8,
                65u8,
                73u8,
                238u8,
                248u8,
                180u8,
                146u8,
                85u8,
                103u8,
                77u8,
                64u8,
                117u8,
                42u8,
                205u8,
                130u8,
                91u8,
                35u8,
                212u8,
                173u8,
                48u8,
                56u8,
                7u8,
                249u8,
                143u8,
                229u8,
                149u8,
                50u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for SealedBidAuctionSequencingModuleEvents {
        const NAME: &'static str = "SealedBidAuctionSequencingModuleEvents";
        const COUNT: usize = 1usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<BidRevealed as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <BidRevealed as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::BidRevealed)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData
    for SealedBidAuctionSequencingModuleEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::BidRevealed(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::BidRevealed(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`SealedBidAuctionSequencingModule`](self) contract instance.

See the [wrapper's documentation](`SealedBidAuctionSequencingModuleInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> SealedBidAuctionSequencingModuleInstance<T, P, N> {
        SealedBidAuctionSequencingModuleInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _duration: alloy::sol_types::private::primitives::aliases::U256,
        _treasury: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<
            SealedBidAuctionSequencingModuleInstance<T, P, N>,
        >,
    > {
        SealedBidAuctionSequencingModuleInstance::<
            T,
            P,
            N,
        >::deploy(provider, _duration, _treasury)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _duration: alloy::sol_types::private::primitives::aliases::U256,
        _treasury: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        SealedBidAuctionSequencingModuleInstance::<
            T,
            P,
            N,
        >::deploy_builder(provider, _duration, _treasury)
    }
    /**A [`SealedBidAuctionSequencingModule`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`SealedBidAuctionSequencingModule`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct SealedBidAuctionSequencingModuleInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug
    for SealedBidAuctionSequencingModuleInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("SealedBidAuctionSequencingModuleInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SealedBidAuctionSequencingModuleInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`SealedBidAuctionSequencingModule`](self) contract instance.

See the [wrapper's documentation](`SealedBidAuctionSequencingModuleInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _duration: alloy::sol_types::private::primitives::aliases::U256,
            _treasury: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<SealedBidAuctionSequencingModuleInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, _duration, _treasury);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _duration: alloy::sol_types::private::primitives::aliases::U256,
            _treasury: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall {
                            _duration,
                            _treasury,
                        },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<
        T,
        P: ::core::clone::Clone,
        N,
    > SealedBidAuctionSequencingModuleInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(
            self,
        ) -> SealedBidAuctionSequencingModuleInstance<T, P, N> {
            SealedBidAuctionSequencingModuleInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SealedBidAuctionSequencingModuleInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`auctionActive`] function.
        pub fn auctionActive(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, auctionActiveCall, N> {
            self.call_builder(&auctionActiveCall {})
        }
        ///Creates a new call builder for the [`auctionType`] function.
        pub fn auctionType(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, auctionTypeCall, N> {
            self.call_builder(&auctionTypeCall {})
        }
        ///Creates a new call builder for the [`bid`] function.
        pub fn bid(
            &self,
            _sealedBid: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, bidCall, N> {
            self.call_builder(&bidCall { _sealedBid })
        }
        ///Creates a new call builder for the [`bids`] function.
        pub fn bids(
            &self,
            _0: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, bidsCall, N> {
            self.call_builder(&bidsCall { _0 })
        }
        ///Creates a new call builder for the [`endTime`] function.
        pub fn endTime(&self) -> alloy_contract::SolCallBuilder<T, &P, endTimeCall, N> {
            self.call_builder(&endTimeCall {})
        }
        ///Creates a new call builder for the [`finalizeAuction`] function.
        pub fn finalizeAuction(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, finalizeAuctionCall, N> {
            self.call_builder(&finalizeAuctionCall {})
        }
        ///Creates a new call builder for the [`getAuctionEndTime`] function.
        pub fn getAuctionEndTime(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getAuctionEndTimeCall, N> {
            self.call_builder(&getAuctionEndTimeCall {})
        }
        ///Creates a new call builder for the [`getAuctionType`] function.
        pub fn getAuctionType(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getAuctionTypeCall, N> {
            self.call_builder(&getAuctionTypeCall {})
        }
        ///Creates a new call builder for the [`getAuctionWinner`] function.
        pub fn getAuctionWinner(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getAuctionWinnerCall, N> {
            self.call_builder(&getAuctionWinnerCall {})
        }
        ///Creates a new call builder for the [`getCurrentPrice`] function.
        pub fn getCurrentPrice(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getCurrentPriceCall, N> {
            self.call_builder(&getCurrentPriceCall {})
        }
        ///Creates a new call builder for the [`highestBid`] function.
        pub fn highestBid(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, highestBidCall, N> {
            self.call_builder(&highestBidCall {})
        }
        ///Creates a new call builder for the [`highestBidder`] function.
        pub fn highestBidder(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, highestBidderCall, N> {
            self.call_builder(&highestBidderCall {})
        }
        ///Creates a new call builder for the [`isAllowed`] function.
        pub fn isAllowed(
            &self,
            proposer: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, isAllowedCall, N> {
            self.call_builder(&isAllowedCall { proposer })
        }
        ///Creates a new call builder for the [`isAuctionActive`] function.
        pub fn isAuctionActive(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, isAuctionActiveCall, N> {
            self.call_builder(&isAuctionActiveCall {})
        }
        ///Creates a new call builder for the [`refunds`] function.
        pub fn refunds(
            &self,
            _0: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, refundsCall, N> {
            self.call_builder(&refundsCall { _0 })
        }
        ///Creates a new call builder for the [`revealBid`] function.
        pub fn revealBid(
            &self,
            _bid: alloy::sol_types::private::primitives::aliases::U256,
            _salt: alloy::sol_types::private::String,
        ) -> alloy_contract::SolCallBuilder<T, &P, revealBidCall, N> {
            self.call_builder(&revealBidCall { _bid, _salt })
        }
        ///Creates a new call builder for the [`treasury`] function.
        pub fn treasury(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, treasuryCall, N> {
            self.call_builder(&treasuryCall {})
        }
        ///Creates a new call builder for the [`withdrawFunds`] function.
        pub fn withdrawFunds(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, withdrawFundsCall, N> {
            self.call_builder(&withdrawFundsCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SealedBidAuctionSequencingModuleInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`BidRevealed`] event.
        pub fn BidRevealed_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, BidRevealed, N> {
            self.event_filter::<BidRevealed>()
        }
    }
}
