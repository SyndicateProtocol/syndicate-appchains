/**

Generated by the following Solidity interface...
```solidity
interface SealedBidAuctionSequencingModule {
    error AddressNotAllowed();
    error AuctionNotActive();
    error AuctionNotEnded();
    error BidExceedsDeposit();
    error InvalidBidDeposit();
    error InvalidBidReveal();
    error InvalidDuration();
    error NoBidFound();
    error NoFundsToWithdraw();
    error TransactionFailed();

    event BidRevealed(address indexed bidder, uint256 bid, bool isHighestBid);

    constructor(uint256 _duration, address _treasury);

    function auctionActive() external view returns (bool);
    function auctionType() external view returns (string memory);
    function bid(bytes32 _sealedBid) external payable;
    function bids(address) external view returns (bytes32 sealedBid, uint256 deposit);
    function endTime() external view returns (uint256);
    function finalizeAuction() external;
    function getAuctionEndTime() external view returns (uint256);
    function getAuctionType() external view returns (string memory);
    function getAuctionWinner() external view returns (address);
    function getCurrentPrice() external view returns (uint256);
    function highestBid() external view returns (uint256);
    function highestBidder() external view returns (address);
    function isAllowed(address proposer) external view returns (bool);
    function isAuctionActive() external view returns (bool);
    function refunds(address) external view returns (uint256);
    function revealBid(uint256 _bid, string memory _salt) external;
    function treasury() external view returns (address);
    function withdrawFunds() external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_duration",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "_treasury",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "auctionActive",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "auctionType",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "bid",
    "inputs": [
      {
        "name": "_sealedBid",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "bids",
    "inputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "sealedBid",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "deposit",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "endTime",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "finalizeAuction",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "getAuctionEndTime",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getAuctionType",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getAuctionWinner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getCurrentPrice",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "highestBid",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "highestBidder",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isAllowed",
    "inputs": [
      {
        "name": "proposer",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isAuctionActive",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "refunds",
    "inputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "revealBid",
    "inputs": [
      {
        "name": "_bid",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "_salt",
        "type": "string",
        "internalType": "string"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "treasury",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "withdrawFunds",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "BidRevealed",
    "inputs": [
      {
        "name": "bidder",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "bid",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "isHighestBid",
        "type": "bool",
        "indexed": false,
        "internalType": "bool"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AddressNotAllowed",
    "inputs": []
  },
  {
    "type": "error",
    "name": "AuctionNotActive",
    "inputs": []
  },
  {
    "type": "error",
    "name": "AuctionNotEnded",
    "inputs": []
  },
  {
    "type": "error",
    "name": "BidExceedsDeposit",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidBidDeposit",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidBidReveal",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidDuration",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NoBidFound",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NoFundsToWithdraw",
    "inputs": []
  },
  {
    "type": "error",
    "name": "TransactionFailed",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod SealedBidAuctionSequencingModule {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60803461015457601f6108a738819003918201601f19168301916001600160401b038311848410176101585780849260409485528339810103126101545780516020909101516001600160a01b03811690819003610154578015610142578115610130575f80546001600160a01b0319169190911790556001805480821c9082168015610126575b602082101461011257601f81116100e6575b5060126814d9585b1959109a5960ba1b01815560ff19600254161760025542018042116100d25760035560405161073a908161016d8239f35b634e487b7160e01b5f52601160045260245ffd5b815f5281601f60205f20920160051c8201915b828110610107575050610099565b5f81550182906100f9565b634e487b7160e01b5f52602260045260245ffd5b90607f1690610087565b604051637616640160e01b8152600490fd5b6040516315a9bc2760e11b8152600490fd5b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe60406080815260049081361015610014575f80fd5b5f3560e01c806311163b2c146102045780632163b8c51461039557806324600fc3146103475780633197cbb6146102bf5780634c583d8a1461029857806361d027b31461032057806362ea82db146102dd578063787c0a6c146102bf57806391f90157146102985780639222800614610172578063957bb1e014610230578063994595e114610204578063babcc539146101d0578063bc3da53514610195578063d1b4b9a314610172578063d57bde7914610154578063eb91d37e146101545763f77282ab146100e2575f80fd5b34610150575f366003190112610150576003544210610143576002805460ff1916905581546001600160a01b0390811661011857005b5f80808093815416600554905af161012e6106d5565b501561013657005b516317f2c34560e31b8152fd5b51636463738960e01b8152fd5b5f80fd5b5034610150575f366003190112610150576020906005549051908152f35b5034610150575f3660031901126101505760209060ff6002541690519015158152f35b50903461015057602036600319011261015057356001600160a01b0381169190829003610150576020915f5260078252805f20549051908152f35b50346101505760203660031901126101505781356001600160a01b0381811691829003610150576020935416149051908152f35b5034610150575f3660031901126101505761022c906102216105ef565b905191829182610557565b0390f35b5060203660031901126101505760ff600254161561028b57341561027e5780600191519261025d84610581565b3583526020830190348252335f5260066020525f2092518355519101555f80f35b516361700f9160e01b8152fd5b516334dc687f60e11b8152fd5b5034610150575f36600319011261015057905490516001600160a01b039091168152602090f35b5034610150575f366003190112610150576020906003549051908152f35b50903461015057602036600319011261015057356001600160a01b03811690819003610150575f526006602052805f206001815491015482519182526020820152f35b5034610150575f366003190112610150575f5490516001600160a01b039091168152602090f35b5034610150575f36600319011261015057335f526007602052805f20548015610387575f8080809333825260076020528186812055335af161012e6106d5565b50516367e3990d60e01b8152fd5b5034610150578060031936011261015057602435823567ffffffffffffffff821161015057366023830112156101505781840135916103d3836105d3565b6103df855191826105b1565b83815260209384820192366024838301011161015057815f92602488930186378301015260ff600254161561054757335f5260068452845f2090600186519261042784610581565b80548452015492858301938085521561053757835185116105275761046c8780518093898201958987525180918484015e81015f8382015203888101845201826105b1565b51902090510361051757916006915f9560019594879060055484118914610504575050858060a01b03815416806104f0575b50600582905580546001600160a01b03191633179055845b84519182521515828201527f9c2d1dff1e244149eef8b49255674d40752acd825b23d4ad303807f98fe59532843392a23385525282200155005b60055490885260078452858820555f61049e565b51338952600785528689205590506104b6565b505050516329264d6b60e21b8152fd5b86516379dd5d2b60e11b81528890fd5b865163b82eb6b760e01b81528890fd5b84516334dc687f60e11b81528690fd5b602060409281835280519182918282860152018484015e5f828201840152601f01601f1916010190565b6040810190811067ffffffffffffffff82111761059d57604052565b634e487b7160e01b5f52604160045260245ffd5b90601f8019910116810190811067ffffffffffffffff82111761059d57604052565b67ffffffffffffffff811161059d57601f01601f191660200190565b604051905f60018054918260011c600184169283156106cb575b60209485831085146106b7578288528794908115610697575060011461063a575b5050610638925003836105b1565b565b9093915060015f527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6935f915b81831061067f57505061063893508201015f8061062a565b85548884018501529485019487945091830191610667565b91505061063894925060ff191682840152151560051b8201015f8061062a565b634e487b7160e01b5f52602260045260245ffd5b90607f1690610609565b3d156106ff573d906106e6826105d3565b916106f460405193846105b1565b82523d5f602084013e565b60609056fea2646970667358221220fe8ea2286a2a375b9354c036dcc0c2f25dc00f8b14e4bd04d0afee81f98aa11d64736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x804a\x01TW`\x1Fa\x08\xA78\x81\x90\x03\x91\x82\x01`\x1F\x19\x16\x83\x01\x91`\x01`\x01`@\x1B\x03\x83\x11\x84\x84\x10\x17a\x01XW\x80\x84\x92`@\x94\x85R\x839\x81\x01\x03\x12a\x01TW\x80Q` \x90\x91\x01Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x90\x81\x90\x03a\x01TW\x80\x15a\x01BW\x81\x15a\x010W_\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16\x91\x90\x91\x17\x90U`\x01\x80T\x80\x82\x1C\x90\x82\x16\x80\x15a\x01&W[` \x82\x10\x14a\x01\x12W`\x1F\x81\x11a\0\xE6W[P`\x12h\x14\xD9X[\x19Y\x10\x9AY`\xBA\x1B\x01\x81U`\xFF\x19`\x02T\x16\x17`\x02UB\x01\x80B\x11a\0\xD2W`\x03U`@Qa\x07:\x90\x81a\x01m\x829\xF3[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[\x81_R\x81`\x1F` _ \x92\x01`\x05\x1C\x82\x01\x91[\x82\x81\x10a\x01\x07WPPa\0\x99V[_\x81U\x01\x82\x90a\0\xF9V[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x7F\x16\x90a\0\x87V[`@Qcv\x16d\x01`\xE0\x1B\x81R`\x04\x90\xFD[`@Qc\x15\xA9\xBC'`\xE1\x1B\x81R`\x04\x90\xFD[_\x80\xFD[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD\xFE`@`\x80\x81R`\x04\x90\x816\x10\x15a\0\x14W_\x80\xFD[_5`\xE0\x1C\x80c\x11\x16;,\x14a\x02\x04W\x80c!c\xB8\xC5\x14a\x03\x95W\x80c$`\x0F\xC3\x14a\x03GW\x80c1\x97\xCB\xB6\x14a\x02\xBFW\x80cLX=\x8A\x14a\x02\x98W\x80ca\xD0'\xB3\x14a\x03 W\x80cb\xEA\x82\xDB\x14a\x02\xDDW\x80cx|\nl\x14a\x02\xBFW\x80c\x91\xF9\x01W\x14a\x02\x98W\x80c\x92\"\x80\x06\x14a\x01rW\x80c\x95{\xB1\xE0\x14a\x020W\x80c\x99E\x95\xE1\x14a\x02\x04W\x80c\xBA\xBC\xC59\x14a\x01\xD0W\x80c\xBC=\xA55\x14a\x01\x95W\x80c\xD1\xB4\xB9\xA3\x14a\x01rW\x80c\xD5{\xDEy\x14a\x01TW\x80c\xEB\x91\xD3~\x14a\x01TWc\xF7r\x82\xAB\x14a\0\xE2W_\x80\xFD[4a\x01PW_6`\x03\x19\x01\x12a\x01PW`\x03TB\x10a\x01CW`\x02\x80T`\xFF\x19\x16\x90U\x81T`\x01`\x01`\xA0\x1B\x03\x90\x81\x16a\x01\x18W\0[_\x80\x80\x80\x93\x81T\x16`\x05T\x90Z\xF1a\x01.a\x06\xD5V[P\x15a\x016W\0[Qc\x17\xF2\xC3E`\xE3\x1B\x81R\xFD[Qcdcs\x89`\xE0\x1B\x81R\xFD[_\x80\xFD[P4a\x01PW_6`\x03\x19\x01\x12a\x01PW` \x90`\x05T\x90Q\x90\x81R\xF3[P4a\x01PW_6`\x03\x19\x01\x12a\x01PW` \x90`\xFF`\x02T\x16\x90Q\x90\x15\x15\x81R\xF3[P\x904a\x01PW` 6`\x03\x19\x01\x12a\x01PW5`\x01`\x01`\xA0\x1B\x03\x81\x16\x91\x90\x82\x90\x03a\x01PW` \x91_R`\x07\x82R\x80_ T\x90Q\x90\x81R\xF3[P4a\x01PW` 6`\x03\x19\x01\x12a\x01PW\x815`\x01`\x01`\xA0\x1B\x03\x81\x81\x16\x91\x82\x90\x03a\x01PW` \x93T\x16\x14\x90Q\x90\x81R\xF3[P4a\x01PW_6`\x03\x19\x01\x12a\x01PWa\x02,\x90a\x02!a\x05\xEFV[\x90Q\x91\x82\x91\x82a\x05WV[\x03\x90\xF3[P` 6`\x03\x19\x01\x12a\x01PW`\xFF`\x02T\x16\x15a\x02\x8BW4\x15a\x02~W\x80`\x01\x91Q\x92a\x02]\x84a\x05\x81V[5\x83R` \x83\x01\x904\x82R3_R`\x06` R_ \x92Q\x83UQ\x91\x01U_\x80\xF3[Qcap\x0F\x91`\xE0\x1B\x81R\xFD[Qc4\xDCh\x7F`\xE1\x1B\x81R\xFD[P4a\x01PW_6`\x03\x19\x01\x12a\x01PW\x90T\x90Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x90\xF3[P4a\x01PW_6`\x03\x19\x01\x12a\x01PW` \x90`\x03T\x90Q\x90\x81R\xF3[P\x904a\x01PW` 6`\x03\x19\x01\x12a\x01PW5`\x01`\x01`\xA0\x1B\x03\x81\x16\x90\x81\x90\x03a\x01PW_R`\x06` R\x80_ `\x01\x81T\x91\x01T\x82Q\x91\x82R` \x82\x01R\xF3[P4a\x01PW_6`\x03\x19\x01\x12a\x01PW_T\x90Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x90\xF3[P4a\x01PW_6`\x03\x19\x01\x12a\x01PW3_R`\x07` R\x80_ T\x80\x15a\x03\x87W_\x80\x80\x80\x933\x82R`\x07` R\x81\x86\x81 U3Z\xF1a\x01.a\x06\xD5V[PQcg\xE3\x99\r`\xE0\x1B\x81R\xFD[P4a\x01PW\x80`\x03\x196\x01\x12a\x01PW`$5\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x01PW6`#\x83\x01\x12\x15a\x01PW\x81\x84\x015\x91a\x03\xD3\x83a\x05\xD3V[a\x03\xDF\x85Q\x91\x82a\x05\xB1V[\x83\x81R` \x93\x84\x82\x01\x926`$\x83\x83\x01\x01\x11a\x01PW\x81_\x92`$\x88\x93\x01\x867\x83\x01\x01R`\xFF`\x02T\x16\x15a\x05GW3_R`\x06\x84R\x84_ \x90`\x01\x86Q\x92a\x04'\x84a\x05\x81V[\x80T\x84R\x01T\x92\x85\x83\x01\x93\x80\x85R\x15a\x057W\x83Q\x85\x11a\x05'Wa\x04l\x87\x80Q\x80\x93\x89\x82\x01\x95\x89\x87RQ\x80\x91\x84\x84\x01^\x81\x01_\x83\x82\x01R\x03\x88\x81\x01\x84R\x01\x82a\x05\xB1V[Q\x90 \x90Q\x03a\x05\x17W\x91`\x06\x91_\x95`\x01\x95\x94\x87\x90`\x05T\x84\x11\x89\x14a\x05\x04WPP\x85\x80`\xA0\x1B\x03\x81T\x16\x80a\x04\xF0W[P`\x05\x82\x90U\x80T`\x01`\x01`\xA0\x1B\x03\x19\x163\x17\x90U\x84[\x84Q\x91\x82R\x15\x15\x82\x82\x01R\x7F\x9C-\x1D\xFF\x1E$AI\xEE\xF8\xB4\x92UgM@u*\xCD\x82[#\xD4\xAD08\x07\xF9\x8F\xE5\x952\x843\x92\xA23\x85RR\x82 \x01U\0[`\x05T\x90\x88R`\x07\x84R\x85\x88 U_a\x04\x9EV[Q3\x89R`\x07\x85R\x86\x89 U\x90Pa\x04\xB6V[PPPQc)&Mk`\xE2\x1B\x81R\xFD[\x86Qcy\xDD]+`\xE1\x1B\x81R\x88\x90\xFD[\x86Qc\xB8.\xB6\xB7`\xE0\x1B\x81R\x88\x90\xFD[\x84Qc4\xDCh\x7F`\xE1\x1B\x81R\x86\x90\xFD[` `@\x92\x81\x83R\x80Q\x91\x82\x91\x82\x82\x86\x01R\x01\x84\x84\x01^_\x82\x82\x01\x84\x01R`\x1F\x01`\x1F\x19\x16\x01\x01\x90V[`@\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x05\x9DW`@RV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90`\x1F\x80\x19\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x05\x9DW`@RV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05\x9DW`\x1F\x01`\x1F\x19\x16` \x01\x90V[`@Q\x90_`\x01\x80T\x91\x82`\x01\x1C`\x01\x84\x16\x92\x83\x15a\x06\xCBW[` \x94\x85\x83\x10\x85\x14a\x06\xB7W\x82\x88R\x87\x94\x90\x81\x15a\x06\x97WP`\x01\x14a\x06:W[PPa\x068\x92P\x03\x83a\x05\xB1V[V[\x90\x93\x91P`\x01_R\x7F\xB1\x0E-Rv\x12\x07;&\xEE\xCD\xFDq~j2\x0C\xF4KJ\xFA\xC2\xB0s-\x9F\xCB\xE2\xB7\xFA\x0C\xF6\x93_\x91[\x81\x83\x10a\x06\x7FWPPa\x068\x93P\x82\x01\x01_\x80a\x06*V[\x85T\x88\x84\x01\x85\x01R\x94\x85\x01\x94\x87\x94P\x91\x83\x01\x91a\x06gV[\x91PPa\x068\x94\x92P`\xFF\x19\x16\x82\x84\x01R\x15\x15`\x05\x1B\x82\x01\x01_\x80a\x06*V[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x7F\x16\x90a\x06\tV[=\x15a\x06\xFFW=\x90a\x06\xE6\x82a\x05\xD3V[\x91a\x06\xF4`@Q\x93\x84a\x05\xB1V[\x82R=_` \x84\x01>V[``\x90V\xFE\xA2dipfsX\"\x12 \xFE\x8E\xA2(j*7[\x93T\xC06\xDC\xC0\xC2\xF2]\xC0\x0F\x8B\x14\xE4\xBD\x04\xD0\xAF\xEE\x81\xF9\x8A\xA1\x1DdsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60406080815260049081361015610014575f80fd5b5f3560e01c806311163b2c146102045780632163b8c51461039557806324600fc3146103475780633197cbb6146102bf5780634c583d8a1461029857806361d027b31461032057806362ea82db146102dd578063787c0a6c146102bf57806391f90157146102985780639222800614610172578063957bb1e014610230578063994595e114610204578063babcc539146101d0578063bc3da53514610195578063d1b4b9a314610172578063d57bde7914610154578063eb91d37e146101545763f77282ab146100e2575f80fd5b34610150575f366003190112610150576003544210610143576002805460ff1916905581546001600160a01b0390811661011857005b5f80808093815416600554905af161012e6106d5565b501561013657005b516317f2c34560e31b8152fd5b51636463738960e01b8152fd5b5f80fd5b5034610150575f366003190112610150576020906005549051908152f35b5034610150575f3660031901126101505760209060ff6002541690519015158152f35b50903461015057602036600319011261015057356001600160a01b0381169190829003610150576020915f5260078252805f20549051908152f35b50346101505760203660031901126101505781356001600160a01b0381811691829003610150576020935416149051908152f35b5034610150575f3660031901126101505761022c906102216105ef565b905191829182610557565b0390f35b5060203660031901126101505760ff600254161561028b57341561027e5780600191519261025d84610581565b3583526020830190348252335f5260066020525f2092518355519101555f80f35b516361700f9160e01b8152fd5b516334dc687f60e11b8152fd5b5034610150575f36600319011261015057905490516001600160a01b039091168152602090f35b5034610150575f366003190112610150576020906003549051908152f35b50903461015057602036600319011261015057356001600160a01b03811690819003610150575f526006602052805f206001815491015482519182526020820152f35b5034610150575f366003190112610150575f5490516001600160a01b039091168152602090f35b5034610150575f36600319011261015057335f526007602052805f20548015610387575f8080809333825260076020528186812055335af161012e6106d5565b50516367e3990d60e01b8152fd5b5034610150578060031936011261015057602435823567ffffffffffffffff821161015057366023830112156101505781840135916103d3836105d3565b6103df855191826105b1565b83815260209384820192366024838301011161015057815f92602488930186378301015260ff600254161561054757335f5260068452845f2090600186519261042784610581565b80548452015492858301938085521561053757835185116105275761046c8780518093898201958987525180918484015e81015f8382015203888101845201826105b1565b51902090510361051757916006915f9560019594879060055484118914610504575050858060a01b03815416806104f0575b50600582905580546001600160a01b03191633179055845b84519182521515828201527f9c2d1dff1e244149eef8b49255674d40752acd825b23d4ad303807f98fe59532843392a23385525282200155005b60055490885260078452858820555f61049e565b51338952600785528689205590506104b6565b505050516329264d6b60e21b8152fd5b86516379dd5d2b60e11b81528890fd5b865163b82eb6b760e01b81528890fd5b84516334dc687f60e11b81528690fd5b602060409281835280519182918282860152018484015e5f828201840152601f01601f1916010190565b6040810190811067ffffffffffffffff82111761059d57604052565b634e487b7160e01b5f52604160045260245ffd5b90601f8019910116810190811067ffffffffffffffff82111761059d57604052565b67ffffffffffffffff811161059d57601f01601f191660200190565b604051905f60018054918260011c600184169283156106cb575b60209485831085146106b7578288528794908115610697575060011461063a575b5050610638925003836105b1565b565b9093915060015f527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6935f915b81831061067f57505061063893508201015f8061062a565b85548884018501529485019487945091830191610667565b91505061063894925060ff191682840152151560051b8201015f8061062a565b634e487b7160e01b5f52602260045260245ffd5b90607f1690610609565b3d156106ff573d906106e6826105d3565b916106f460405193846105b1565b82523d5f602084013e565b60609056fea2646970667358221220fe8ea2286a2a375b9354c036dcc0c2f25dc00f8b14e4bd04d0afee81f98aa11d64736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`@`\x80\x81R`\x04\x90\x816\x10\x15a\0\x14W_\x80\xFD[_5`\xE0\x1C\x80c\x11\x16;,\x14a\x02\x04W\x80c!c\xB8\xC5\x14a\x03\x95W\x80c$`\x0F\xC3\x14a\x03GW\x80c1\x97\xCB\xB6\x14a\x02\xBFW\x80cLX=\x8A\x14a\x02\x98W\x80ca\xD0'\xB3\x14a\x03 W\x80cb\xEA\x82\xDB\x14a\x02\xDDW\x80cx|\nl\x14a\x02\xBFW\x80c\x91\xF9\x01W\x14a\x02\x98W\x80c\x92\"\x80\x06\x14a\x01rW\x80c\x95{\xB1\xE0\x14a\x020W\x80c\x99E\x95\xE1\x14a\x02\x04W\x80c\xBA\xBC\xC59\x14a\x01\xD0W\x80c\xBC=\xA55\x14a\x01\x95W\x80c\xD1\xB4\xB9\xA3\x14a\x01rW\x80c\xD5{\xDEy\x14a\x01TW\x80c\xEB\x91\xD3~\x14a\x01TWc\xF7r\x82\xAB\x14a\0\xE2W_\x80\xFD[4a\x01PW_6`\x03\x19\x01\x12a\x01PW`\x03TB\x10a\x01CW`\x02\x80T`\xFF\x19\x16\x90U\x81T`\x01`\x01`\xA0\x1B\x03\x90\x81\x16a\x01\x18W\0[_\x80\x80\x80\x93\x81T\x16`\x05T\x90Z\xF1a\x01.a\x06\xD5V[P\x15a\x016W\0[Qc\x17\xF2\xC3E`\xE3\x1B\x81R\xFD[Qcdcs\x89`\xE0\x1B\x81R\xFD[_\x80\xFD[P4a\x01PW_6`\x03\x19\x01\x12a\x01PW` \x90`\x05T\x90Q\x90\x81R\xF3[P4a\x01PW_6`\x03\x19\x01\x12a\x01PW` \x90`\xFF`\x02T\x16\x90Q\x90\x15\x15\x81R\xF3[P\x904a\x01PW` 6`\x03\x19\x01\x12a\x01PW5`\x01`\x01`\xA0\x1B\x03\x81\x16\x91\x90\x82\x90\x03a\x01PW` \x91_R`\x07\x82R\x80_ T\x90Q\x90\x81R\xF3[P4a\x01PW` 6`\x03\x19\x01\x12a\x01PW\x815`\x01`\x01`\xA0\x1B\x03\x81\x81\x16\x91\x82\x90\x03a\x01PW` \x93T\x16\x14\x90Q\x90\x81R\xF3[P4a\x01PW_6`\x03\x19\x01\x12a\x01PWa\x02,\x90a\x02!a\x05\xEFV[\x90Q\x91\x82\x91\x82a\x05WV[\x03\x90\xF3[P` 6`\x03\x19\x01\x12a\x01PW`\xFF`\x02T\x16\x15a\x02\x8BW4\x15a\x02~W\x80`\x01\x91Q\x92a\x02]\x84a\x05\x81V[5\x83R` \x83\x01\x904\x82R3_R`\x06` R_ \x92Q\x83UQ\x91\x01U_\x80\xF3[Qcap\x0F\x91`\xE0\x1B\x81R\xFD[Qc4\xDCh\x7F`\xE1\x1B\x81R\xFD[P4a\x01PW_6`\x03\x19\x01\x12a\x01PW\x90T\x90Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x90\xF3[P4a\x01PW_6`\x03\x19\x01\x12a\x01PW` \x90`\x03T\x90Q\x90\x81R\xF3[P\x904a\x01PW` 6`\x03\x19\x01\x12a\x01PW5`\x01`\x01`\xA0\x1B\x03\x81\x16\x90\x81\x90\x03a\x01PW_R`\x06` R\x80_ `\x01\x81T\x91\x01T\x82Q\x91\x82R` \x82\x01R\xF3[P4a\x01PW_6`\x03\x19\x01\x12a\x01PW_T\x90Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x90\xF3[P4a\x01PW_6`\x03\x19\x01\x12a\x01PW3_R`\x07` R\x80_ T\x80\x15a\x03\x87W_\x80\x80\x80\x933\x82R`\x07` R\x81\x86\x81 U3Z\xF1a\x01.a\x06\xD5V[PQcg\xE3\x99\r`\xE0\x1B\x81R\xFD[P4a\x01PW\x80`\x03\x196\x01\x12a\x01PW`$5\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x01PW6`#\x83\x01\x12\x15a\x01PW\x81\x84\x015\x91a\x03\xD3\x83a\x05\xD3V[a\x03\xDF\x85Q\x91\x82a\x05\xB1V[\x83\x81R` \x93\x84\x82\x01\x926`$\x83\x83\x01\x01\x11a\x01PW\x81_\x92`$\x88\x93\x01\x867\x83\x01\x01R`\xFF`\x02T\x16\x15a\x05GW3_R`\x06\x84R\x84_ \x90`\x01\x86Q\x92a\x04'\x84a\x05\x81V[\x80T\x84R\x01T\x92\x85\x83\x01\x93\x80\x85R\x15a\x057W\x83Q\x85\x11a\x05'Wa\x04l\x87\x80Q\x80\x93\x89\x82\x01\x95\x89\x87RQ\x80\x91\x84\x84\x01^\x81\x01_\x83\x82\x01R\x03\x88\x81\x01\x84R\x01\x82a\x05\xB1V[Q\x90 \x90Q\x03a\x05\x17W\x91`\x06\x91_\x95`\x01\x95\x94\x87\x90`\x05T\x84\x11\x89\x14a\x05\x04WPP\x85\x80`\xA0\x1B\x03\x81T\x16\x80a\x04\xF0W[P`\x05\x82\x90U\x80T`\x01`\x01`\xA0\x1B\x03\x19\x163\x17\x90U\x84[\x84Q\x91\x82R\x15\x15\x82\x82\x01R\x7F\x9C-\x1D\xFF\x1E$AI\xEE\xF8\xB4\x92UgM@u*\xCD\x82[#\xD4\xAD08\x07\xF9\x8F\xE5\x952\x843\x92\xA23\x85RR\x82 \x01U\0[`\x05T\x90\x88R`\x07\x84R\x85\x88 U_a\x04\x9EV[Q3\x89R`\x07\x85R\x86\x89 U\x90Pa\x04\xB6V[PPPQc)&Mk`\xE2\x1B\x81R\xFD[\x86Qcy\xDD]+`\xE1\x1B\x81R\x88\x90\xFD[\x86Qc\xB8.\xB6\xB7`\xE0\x1B\x81R\x88\x90\xFD[\x84Qc4\xDCh\x7F`\xE1\x1B\x81R\x86\x90\xFD[` `@\x92\x81\x83R\x80Q\x91\x82\x91\x82\x82\x86\x01R\x01\x84\x84\x01^_\x82\x82\x01\x84\x01R`\x1F\x01`\x1F\x19\x16\x01\x01\x90V[`@\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x05\x9DW`@RV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90`\x1F\x80\x19\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x05\x9DW`@RV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05\x9DW`\x1F\x01`\x1F\x19\x16` \x01\x90V[`@Q\x90_`\x01\x80T\x91\x82`\x01\x1C`\x01\x84\x16\x92\x83\x15a\x06\xCBW[` \x94\x85\x83\x10\x85\x14a\x06\xB7W\x82\x88R\x87\x94\x90\x81\x15a\x06\x97WP`\x01\x14a\x06:W[PPa\x068\x92P\x03\x83a\x05\xB1V[V[\x90\x93\x91P`\x01_R\x7F\xB1\x0E-Rv\x12\x07;&\xEE\xCD\xFDq~j2\x0C\xF4KJ\xFA\xC2\xB0s-\x9F\xCB\xE2\xB7\xFA\x0C\xF6\x93_\x91[\x81\x83\x10a\x06\x7FWPPa\x068\x93P\x82\x01\x01_\x80a\x06*V[\x85T\x88\x84\x01\x85\x01R\x94\x85\x01\x94\x87\x94P\x91\x83\x01\x91a\x06gV[\x91PPa\x068\x94\x92P`\xFF\x19\x16\x82\x84\x01R\x15\x15`\x05\x1B\x82\x01\x01_\x80a\x06*V[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x7F\x16\x90a\x06\tV[=\x15a\x06\xFFW=\x90a\x06\xE6\x82a\x05\xD3V[\x91a\x06\xF4`@Q\x93\x84a\x05\xB1V[\x82R=_` \x84\x01>V[``\x90V\xFE\xA2dipfsX\"\x12 \xFE\x8E\xA2(j*7[\x93T\xC06\xDC\xC0\xC2\xF2]\xC0\x0F\x8B\x14\xE4\xBD\x04\xD0\xAF\xEE\x81\xF9\x8A\xA1\x1DdsolcC\0\x08\x19\x003",
    );
    /**Custom error with signature `AddressNotAllowed()` and selector `0x2b53784e`.
```solidity
error AddressNotAllowed();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AddressNotAllowed {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AddressNotAllowed> for UnderlyingRustTuple<'_> {
            fn from(value: AddressNotAllowed) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AddressNotAllowed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AddressNotAllowed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AddressNotAllowed()";
            const SELECTOR: [u8; 4] = [43u8, 83u8, 120u8, 78u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `AuctionNotActive()` and selector `0x69b8d0fe`.
```solidity
error AuctionNotActive();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AuctionNotActive {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AuctionNotActive> for UnderlyingRustTuple<'_> {
            fn from(value: AuctionNotActive) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AuctionNotActive {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AuctionNotActive {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AuctionNotActive()";
            const SELECTOR: [u8; 4] = [105u8, 184u8, 208u8, 254u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `AuctionNotEnded()` and selector `0x64637389`.
```solidity
error AuctionNotEnded();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AuctionNotEnded {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AuctionNotEnded> for UnderlyingRustTuple<'_> {
            fn from(value: AuctionNotEnded) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AuctionNotEnded {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AuctionNotEnded {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AuctionNotEnded()";
            const SELECTOR: [u8; 4] = [100u8, 99u8, 115u8, 137u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `BidExceedsDeposit()` and selector `0xf3baba56`.
```solidity
error BidExceedsDeposit();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct BidExceedsDeposit {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<BidExceedsDeposit> for UnderlyingRustTuple<'_> {
            fn from(value: BidExceedsDeposit) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for BidExceedsDeposit {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for BidExceedsDeposit {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "BidExceedsDeposit()";
            const SELECTOR: [u8; 4] = [243u8, 186u8, 186u8, 86u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `InvalidBidDeposit()` and selector `0x61700f91`.
```solidity
error InvalidBidDeposit();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidBidDeposit {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidBidDeposit> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidBidDeposit) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidBidDeposit {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidBidDeposit {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidBidDeposit()";
            const SELECTOR: [u8; 4] = [97u8, 112u8, 15u8, 145u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `InvalidBidReveal()` and selector `0xa49935ac`.
```solidity
error InvalidBidReveal();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidBidReveal {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidBidReveal> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidBidReveal) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidBidReveal {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidBidReveal {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidBidReveal()";
            const SELECTOR: [u8; 4] = [164u8, 153u8, 53u8, 172u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `InvalidDuration()` and selector `0x76166401`.
```solidity
error InvalidDuration();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidDuration {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidDuration> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidDuration) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidDuration {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidDuration {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidDuration()";
            const SELECTOR: [u8; 4] = [118u8, 22u8, 100u8, 1u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `NoBidFound()` and selector `0xb82eb6b7`.
```solidity
error NoBidFound();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NoBidFound {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NoBidFound> for UnderlyingRustTuple<'_> {
            fn from(value: NoBidFound) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NoBidFound {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NoBidFound {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NoBidFound()";
            const SELECTOR: [u8; 4] = [184u8, 46u8, 182u8, 183u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `NoFundsToWithdraw()` and selector `0x67e3990d`.
```solidity
error NoFundsToWithdraw();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NoFundsToWithdraw {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NoFundsToWithdraw> for UnderlyingRustTuple<'_> {
            fn from(value: NoFundsToWithdraw) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NoFundsToWithdraw {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NoFundsToWithdraw {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NoFundsToWithdraw()";
            const SELECTOR: [u8; 4] = [103u8, 227u8, 153u8, 13u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `TransactionFailed()` and selector `0xbf961a28`.
```solidity
error TransactionFailed();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TransactionFailed {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<TransactionFailed> for UnderlyingRustTuple<'_> {
            fn from(value: TransactionFailed) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for TransactionFailed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for TransactionFailed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "TransactionFailed()";
            const SELECTOR: [u8; 4] = [191u8, 150u8, 26u8, 40u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Event with signature `BidRevealed(address,uint256,bool)` and selector `0x9c2d1dff1e244149eef8b49255674d40752acd825b23d4ad303807f98fe59532`.
```solidity
event BidRevealed(address indexed bidder, uint256 bid, bool isHighestBid);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct BidRevealed {
        #[allow(missing_docs)]
        pub bidder: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub bid: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub isHighestBid: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for BidRevealed {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bool,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "BidRevealed(address,uint256,bool)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                156u8,
                45u8,
                29u8,
                255u8,
                30u8,
                36u8,
                65u8,
                73u8,
                238u8,
                248u8,
                180u8,
                146u8,
                85u8,
                103u8,
                77u8,
                64u8,
                117u8,
                42u8,
                205u8,
                130u8,
                91u8,
                35u8,
                212u8,
                173u8,
                48u8,
                56u8,
                7u8,
                249u8,
                143u8,
                229u8,
                149u8,
                50u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    bidder: topics.1,
                    bid: data.0,
                    isHighestBid: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.bid),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.isHighestBid,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.bidder.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.bidder,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for BidRevealed {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&BidRevealed> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &BidRevealed) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(uint256 _duration, address _treasury);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        pub _duration: alloy::sol_types::private::primitives::aliases::U256,
        pub _treasury: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value._duration, value._treasury)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _duration: tuple.0,
                        _treasury: tuple.1,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._duration),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._treasury,
                    ),
                )
            }
        }
    };
    /**Function with signature `auctionActive()` and selector `0x92228006`.
```solidity
function auctionActive() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct auctionActiveCall {}
    ///Container type for the return parameters of the [`auctionActive()`](auctionActiveCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct auctionActiveReturn {
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<auctionActiveCall> for UnderlyingRustTuple<'_> {
                fn from(value: auctionActiveCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for auctionActiveCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<auctionActiveReturn> for UnderlyingRustTuple<'_> {
                fn from(value: auctionActiveReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for auctionActiveReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for auctionActiveCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = auctionActiveReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "auctionActive()";
            const SELECTOR: [u8; 4] = [146u8, 34u8, 128u8, 6u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `auctionType()` and selector `0x994595e1`.
```solidity
function auctionType() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct auctionTypeCall {}
    ///Container type for the return parameters of the [`auctionType()`](auctionTypeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct auctionTypeReturn {
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<auctionTypeCall> for UnderlyingRustTuple<'_> {
                fn from(value: auctionTypeCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for auctionTypeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<auctionTypeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: auctionTypeReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for auctionTypeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for auctionTypeCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = auctionTypeReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "auctionType()";
            const SELECTOR: [u8; 4] = [153u8, 69u8, 149u8, 225u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `bid(bytes32)` and selector `0x957bb1e0`.
```solidity
function bid(bytes32 _sealedBid) external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bidCall {
        pub _sealedBid: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`bid(bytes32)`](bidCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bidReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bidCall> for UnderlyingRustTuple<'_> {
                fn from(value: bidCall) -> Self {
                    (value._sealedBid,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for bidCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _sealedBid: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bidReturn> for UnderlyingRustTuple<'_> {
                fn from(value: bidReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for bidReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for bidCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bidReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "bid(bytes32)";
            const SELECTOR: [u8; 4] = [149u8, 123u8, 177u8, 224u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self._sealedBid),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `bids(address)` and selector `0x62ea82db`.
```solidity
function bids(address) external view returns (bytes32 sealedBid, uint256 deposit);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bidsCall {
        pub _0: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`bids(address)`](bidsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bidsReturn {
        pub sealedBid: alloy::sol_types::private::FixedBytes<32>,
        pub deposit: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bidsCall> for UnderlyingRustTuple<'_> {
                fn from(value: bidsCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for bidsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bidsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: bidsReturn) -> Self {
                    (value.sealedBid, value.deposit)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for bidsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        sealedBid: tuple.0,
                        deposit: tuple.1,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for bidsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bidsReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "bids(address)";
            const SELECTOR: [u8; 4] = [98u8, 234u8, 130u8, 219u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `endTime()` and selector `0x3197cbb6`.
```solidity
function endTime() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct endTimeCall {}
    ///Container type for the return parameters of the [`endTime()`](endTimeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct endTimeReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<endTimeCall> for UnderlyingRustTuple<'_> {
                fn from(value: endTimeCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for endTimeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<endTimeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: endTimeReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for endTimeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for endTimeCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = endTimeReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "endTime()";
            const SELECTOR: [u8; 4] = [49u8, 151u8, 203u8, 182u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `finalizeAuction()` and selector `0xf77282ab`.
```solidity
function finalizeAuction() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct finalizeAuctionCall {}
    ///Container type for the return parameters of the [`finalizeAuction()`](finalizeAuctionCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct finalizeAuctionReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<finalizeAuctionCall> for UnderlyingRustTuple<'_> {
                fn from(value: finalizeAuctionCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for finalizeAuctionCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<finalizeAuctionReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: finalizeAuctionReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for finalizeAuctionReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for finalizeAuctionCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = finalizeAuctionReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "finalizeAuction()";
            const SELECTOR: [u8; 4] = [247u8, 114u8, 130u8, 171u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getAuctionEndTime()` and selector `0x787c0a6c`.
```solidity
function getAuctionEndTime() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAuctionEndTimeCall {}
    ///Container type for the return parameters of the [`getAuctionEndTime()`](getAuctionEndTimeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAuctionEndTimeReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAuctionEndTimeCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAuctionEndTimeCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAuctionEndTimeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAuctionEndTimeReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAuctionEndTimeReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAuctionEndTimeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getAuctionEndTimeCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getAuctionEndTimeReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getAuctionEndTime()";
            const SELECTOR: [u8; 4] = [120u8, 124u8, 10u8, 108u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getAuctionType()` and selector `0x11163b2c`.
```solidity
function getAuctionType() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAuctionTypeCall {}
    ///Container type for the return parameters of the [`getAuctionType()`](getAuctionTypeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAuctionTypeReturn {
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAuctionTypeCall> for UnderlyingRustTuple<'_> {
                fn from(value: getAuctionTypeCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getAuctionTypeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAuctionTypeReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAuctionTypeReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAuctionTypeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getAuctionTypeCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getAuctionTypeReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getAuctionType()";
            const SELECTOR: [u8; 4] = [17u8, 22u8, 59u8, 44u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getAuctionWinner()` and selector `0x4c583d8a`.
```solidity
function getAuctionWinner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAuctionWinnerCall {}
    ///Container type for the return parameters of the [`getAuctionWinner()`](getAuctionWinnerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAuctionWinnerReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAuctionWinnerCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAuctionWinnerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAuctionWinnerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAuctionWinnerReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAuctionWinnerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAuctionWinnerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getAuctionWinnerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getAuctionWinnerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getAuctionWinner()";
            const SELECTOR: [u8; 4] = [76u8, 88u8, 61u8, 138u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getCurrentPrice()` and selector `0xeb91d37e`.
```solidity
function getCurrentPrice() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCurrentPriceCall {}
    ///Container type for the return parameters of the [`getCurrentPrice()`](getCurrentPriceCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCurrentPriceReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCurrentPriceCall> for UnderlyingRustTuple<'_> {
                fn from(value: getCurrentPriceCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getCurrentPriceCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCurrentPriceReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCurrentPriceReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCurrentPriceReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getCurrentPriceCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getCurrentPriceReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getCurrentPrice()";
            const SELECTOR: [u8; 4] = [235u8, 145u8, 211u8, 126u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `highestBid()` and selector `0xd57bde79`.
```solidity
function highestBid() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct highestBidCall {}
    ///Container type for the return parameters of the [`highestBid()`](highestBidCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct highestBidReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<highestBidCall> for UnderlyingRustTuple<'_> {
                fn from(value: highestBidCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for highestBidCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<highestBidReturn> for UnderlyingRustTuple<'_> {
                fn from(value: highestBidReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for highestBidReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for highestBidCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = highestBidReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "highestBid()";
            const SELECTOR: [u8; 4] = [213u8, 123u8, 222u8, 121u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `highestBidder()` and selector `0x91f90157`.
```solidity
function highestBidder() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct highestBidderCall {}
    ///Container type for the return parameters of the [`highestBidder()`](highestBidderCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct highestBidderReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<highestBidderCall> for UnderlyingRustTuple<'_> {
                fn from(value: highestBidderCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for highestBidderCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<highestBidderReturn> for UnderlyingRustTuple<'_> {
                fn from(value: highestBidderReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for highestBidderReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for highestBidderCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = highestBidderReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "highestBidder()";
            const SELECTOR: [u8; 4] = [145u8, 249u8, 1u8, 87u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isAllowed(address)` and selector `0xbabcc539`.
```solidity
function isAllowed(address proposer) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedCall {
        pub proposer: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`isAllowed(address)`](isAllowedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedReturn {
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedCall> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedCall) -> Self {
                    (value.proposer,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { proposer: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isAllowedCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isAllowedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isAllowed(address)";
            const SELECTOR: [u8; 4] = [186u8, 188u8, 197u8, 57u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.proposer,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isAuctionActive()` and selector `0xd1b4b9a3`.
```solidity
function isAuctionActive() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAuctionActiveCall {}
    ///Container type for the return parameters of the [`isAuctionActive()`](isAuctionActiveCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAuctionActiveReturn {
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAuctionActiveCall> for UnderlyingRustTuple<'_> {
                fn from(value: isAuctionActiveCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAuctionActiveCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAuctionActiveReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: isAuctionActiveReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isAuctionActiveReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isAuctionActiveCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isAuctionActiveReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isAuctionActive()";
            const SELECTOR: [u8; 4] = [209u8, 180u8, 185u8, 163u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `refunds(address)` and selector `0xbc3da535`.
```solidity
function refunds(address) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct refundsCall {
        pub _0: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`refunds(address)`](refundsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct refundsReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<refundsCall> for UnderlyingRustTuple<'_> {
                fn from(value: refundsCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for refundsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<refundsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: refundsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for refundsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for refundsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = refundsReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "refunds(address)";
            const SELECTOR: [u8; 4] = [188u8, 61u8, 165u8, 53u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `revealBid(uint256,string)` and selector `0x2163b8c5`.
```solidity
function revealBid(uint256 _bid, string memory _salt) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct revealBidCall {
        pub _bid: alloy::sol_types::private::primitives::aliases::U256,
        pub _salt: alloy::sol_types::private::String,
    }
    ///Container type for the return parameters of the [`revealBid(uint256,string)`](revealBidCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct revealBidReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::String,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::String,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<revealBidCall> for UnderlyingRustTuple<'_> {
                fn from(value: revealBidCall) -> Self {
                    (value._bid, value._salt)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for revealBidCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _bid: tuple.0,
                        _salt: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<revealBidReturn> for UnderlyingRustTuple<'_> {
                fn from(value: revealBidReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for revealBidReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for revealBidCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::String,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = revealBidReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "revealBid(uint256,string)";
            const SELECTOR: [u8; 4] = [33u8, 99u8, 184u8, 197u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._bid),
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self._salt,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `treasury()` and selector `0x61d027b3`.
```solidity
function treasury() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct treasuryCall {}
    ///Container type for the return parameters of the [`treasury()`](treasuryCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct treasuryReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<treasuryCall> for UnderlyingRustTuple<'_> {
                fn from(value: treasuryCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for treasuryCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<treasuryReturn> for UnderlyingRustTuple<'_> {
                fn from(value: treasuryReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for treasuryReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for treasuryCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = treasuryReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "treasury()";
            const SELECTOR: [u8; 4] = [97u8, 208u8, 39u8, 179u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `withdrawFunds()` and selector `0x24600fc3`.
```solidity
function withdrawFunds() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct withdrawFundsCall {}
    ///Container type for the return parameters of the [`withdrawFunds()`](withdrawFundsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct withdrawFundsReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<withdrawFundsCall> for UnderlyingRustTuple<'_> {
                fn from(value: withdrawFundsCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for withdrawFundsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<withdrawFundsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: withdrawFundsReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for withdrawFundsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for withdrawFundsCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = withdrawFundsReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "withdrawFunds()";
            const SELECTOR: [u8; 4] = [36u8, 96u8, 15u8, 195u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`SealedBidAuctionSequencingModule`](self) function calls.
    pub enum SealedBidAuctionSequencingModuleCalls {
        auctionActive(auctionActiveCall),
        auctionType(auctionTypeCall),
        bid(bidCall),
        bids(bidsCall),
        endTime(endTimeCall),
        finalizeAuction(finalizeAuctionCall),
        getAuctionEndTime(getAuctionEndTimeCall),
        getAuctionType(getAuctionTypeCall),
        getAuctionWinner(getAuctionWinnerCall),
        getCurrentPrice(getCurrentPriceCall),
        highestBid(highestBidCall),
        highestBidder(highestBidderCall),
        isAllowed(isAllowedCall),
        isAuctionActive(isAuctionActiveCall),
        refunds(refundsCall),
        revealBid(revealBidCall),
        treasury(treasuryCall),
        withdrawFunds(withdrawFundsCall),
    }
    #[automatically_derived]
    impl SealedBidAuctionSequencingModuleCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [17u8, 22u8, 59u8, 44u8],
            [33u8, 99u8, 184u8, 197u8],
            [36u8, 96u8, 15u8, 195u8],
            [49u8, 151u8, 203u8, 182u8],
            [76u8, 88u8, 61u8, 138u8],
            [97u8, 208u8, 39u8, 179u8],
            [98u8, 234u8, 130u8, 219u8],
            [120u8, 124u8, 10u8, 108u8],
            [145u8, 249u8, 1u8, 87u8],
            [146u8, 34u8, 128u8, 6u8],
            [149u8, 123u8, 177u8, 224u8],
            [153u8, 69u8, 149u8, 225u8],
            [186u8, 188u8, 197u8, 57u8],
            [188u8, 61u8, 165u8, 53u8],
            [209u8, 180u8, 185u8, 163u8],
            [213u8, 123u8, 222u8, 121u8],
            [235u8, 145u8, 211u8, 126u8],
            [247u8, 114u8, 130u8, 171u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for SealedBidAuctionSequencingModuleCalls {
        const NAME: &'static str = "SealedBidAuctionSequencingModuleCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 18usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::auctionActive(_) => {
                    <auctionActiveCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::auctionType(_) => {
                    <auctionTypeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::bid(_) => <bidCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::bids(_) => <bidsCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::endTime(_) => <endTimeCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::finalizeAuction(_) => {
                    <finalizeAuctionCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getAuctionEndTime(_) => {
                    <getAuctionEndTimeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getAuctionType(_) => {
                    <getAuctionTypeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getAuctionWinner(_) => {
                    <getAuctionWinnerCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getCurrentPrice(_) => {
                    <getCurrentPriceCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::highestBid(_) => {
                    <highestBidCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::highestBidder(_) => {
                    <highestBidderCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isAllowed(_) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isAuctionActive(_) => {
                    <isAuctionActiveCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::refunds(_) => <refundsCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::revealBid(_) => {
                    <revealBidCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::treasury(_) => <treasuryCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::withdrawFunds(_) => {
                    <withdrawFundsCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleCalls>] = &[
                {
                    fn getAuctionType(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleCalls> {
                        <getAuctionTypeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleCalls::getAuctionType)
                    }
                    getAuctionType
                },
                {
                    fn revealBid(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleCalls> {
                        <revealBidCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleCalls::revealBid)
                    }
                    revealBid
                },
                {
                    fn withdrawFunds(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleCalls> {
                        <withdrawFundsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleCalls::withdrawFunds)
                    }
                    withdrawFunds
                },
                {
                    fn endTime(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleCalls> {
                        <endTimeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleCalls::endTime)
                    }
                    endTime
                },
                {
                    fn getAuctionWinner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleCalls> {
                        <getAuctionWinnerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleCalls::getAuctionWinner)
                    }
                    getAuctionWinner
                },
                {
                    fn treasury(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleCalls> {
                        <treasuryCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleCalls::treasury)
                    }
                    treasury
                },
                {
                    fn bids(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleCalls> {
                        <bidsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleCalls::bids)
                    }
                    bids
                },
                {
                    fn getAuctionEndTime(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleCalls> {
                        <getAuctionEndTimeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SealedBidAuctionSequencingModuleCalls::getAuctionEndTime,
                            )
                    }
                    getAuctionEndTime
                },
                {
                    fn highestBidder(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleCalls> {
                        <highestBidderCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleCalls::highestBidder)
                    }
                    highestBidder
                },
                {
                    fn auctionActive(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleCalls> {
                        <auctionActiveCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleCalls::auctionActive)
                    }
                    auctionActive
                },
                {
                    fn bid(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleCalls> {
                        <bidCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleCalls::bid)
                    }
                    bid
                },
                {
                    fn auctionType(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleCalls> {
                        <auctionTypeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleCalls::auctionType)
                    }
                    auctionType
                },
                {
                    fn isAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleCalls> {
                        <isAllowedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleCalls::isAllowed)
                    }
                    isAllowed
                },
                {
                    fn refunds(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleCalls> {
                        <refundsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleCalls::refunds)
                    }
                    refunds
                },
                {
                    fn isAuctionActive(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleCalls> {
                        <isAuctionActiveCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleCalls::isAuctionActive)
                    }
                    isAuctionActive
                },
                {
                    fn highestBid(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleCalls> {
                        <highestBidCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleCalls::highestBid)
                    }
                    highestBid
                },
                {
                    fn getCurrentPrice(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleCalls> {
                        <getCurrentPriceCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleCalls::getCurrentPrice)
                    }
                    getCurrentPrice
                },
                {
                    fn finalizeAuction(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleCalls> {
                        <finalizeAuctionCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleCalls::finalizeAuction)
                    }
                    finalizeAuction
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::auctionActive(inner) => {
                    <auctionActiveCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::auctionType(inner) => {
                    <auctionTypeCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::bid(inner) => {
                    <bidCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::bids(inner) => {
                    <bidsCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::endTime(inner) => {
                    <endTimeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::finalizeAuction(inner) => {
                    <finalizeAuctionCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getAuctionEndTime(inner) => {
                    <getAuctionEndTimeCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getAuctionType(inner) => {
                    <getAuctionTypeCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getAuctionWinner(inner) => {
                    <getAuctionWinnerCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getCurrentPrice(inner) => {
                    <getCurrentPriceCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::highestBid(inner) => {
                    <highestBidCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::highestBidder(inner) => {
                    <highestBidderCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isAuctionActive(inner) => {
                    <isAuctionActiveCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::refunds(inner) => {
                    <refundsCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::revealBid(inner) => {
                    <revealBidCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::treasury(inner) => {
                    <treasuryCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::withdrawFunds(inner) => {
                    <withdrawFundsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::auctionActive(inner) => {
                    <auctionActiveCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::auctionType(inner) => {
                    <auctionTypeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::bid(inner) => {
                    <bidCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::bids(inner) => {
                    <bidsCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::endTime(inner) => {
                    <endTimeCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::finalizeAuction(inner) => {
                    <finalizeAuctionCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getAuctionEndTime(inner) => {
                    <getAuctionEndTimeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getAuctionType(inner) => {
                    <getAuctionTypeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getAuctionWinner(inner) => {
                    <getAuctionWinnerCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getCurrentPrice(inner) => {
                    <getCurrentPriceCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::highestBid(inner) => {
                    <highestBidCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::highestBidder(inner) => {
                    <highestBidderCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isAuctionActive(inner) => {
                    <isAuctionActiveCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::refunds(inner) => {
                    <refundsCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::revealBid(inner) => {
                    <revealBidCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::treasury(inner) => {
                    <treasuryCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::withdrawFunds(inner) => {
                    <withdrawFundsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`SealedBidAuctionSequencingModule`](self) custom errors.
    pub enum SealedBidAuctionSequencingModuleErrors {
        AddressNotAllowed(AddressNotAllowed),
        AuctionNotActive(AuctionNotActive),
        AuctionNotEnded(AuctionNotEnded),
        BidExceedsDeposit(BidExceedsDeposit),
        InvalidBidDeposit(InvalidBidDeposit),
        InvalidBidReveal(InvalidBidReveal),
        InvalidDuration(InvalidDuration),
        NoBidFound(NoBidFound),
        NoFundsToWithdraw(NoFundsToWithdraw),
        TransactionFailed(TransactionFailed),
    }
    #[automatically_derived]
    impl SealedBidAuctionSequencingModuleErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [43u8, 83u8, 120u8, 78u8],
            [97u8, 112u8, 15u8, 145u8],
            [100u8, 99u8, 115u8, 137u8],
            [103u8, 227u8, 153u8, 13u8],
            [105u8, 184u8, 208u8, 254u8],
            [118u8, 22u8, 100u8, 1u8],
            [164u8, 153u8, 53u8, 172u8],
            [184u8, 46u8, 182u8, 183u8],
            [191u8, 150u8, 26u8, 40u8],
            [243u8, 186u8, 186u8, 86u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for SealedBidAuctionSequencingModuleErrors {
        const NAME: &'static str = "SealedBidAuctionSequencingModuleErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 10usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AddressNotAllowed(_) => {
                    <AddressNotAllowed as alloy_sol_types::SolError>::SELECTOR
                }
                Self::AuctionNotActive(_) => {
                    <AuctionNotActive as alloy_sol_types::SolError>::SELECTOR
                }
                Self::AuctionNotEnded(_) => {
                    <AuctionNotEnded as alloy_sol_types::SolError>::SELECTOR
                }
                Self::BidExceedsDeposit(_) => {
                    <BidExceedsDeposit as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidBidDeposit(_) => {
                    <InvalidBidDeposit as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidBidReveal(_) => {
                    <InvalidBidReveal as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidDuration(_) => {
                    <InvalidDuration as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NoBidFound(_) => {
                    <NoBidFound as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NoFundsToWithdraw(_) => {
                    <NoFundsToWithdraw as alloy_sol_types::SolError>::SELECTOR
                }
                Self::TransactionFailed(_) => {
                    <TransactionFailed as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<SealedBidAuctionSequencingModuleErrors>] = &[
                {
                    fn AddressNotAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SealedBidAuctionSequencingModuleErrors,
                    > {
                        <AddressNotAllowed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SealedBidAuctionSequencingModuleErrors::AddressNotAllowed,
                            )
                    }
                    AddressNotAllowed
                },
                {
                    fn InvalidBidDeposit(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SealedBidAuctionSequencingModuleErrors,
                    > {
                        <InvalidBidDeposit as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SealedBidAuctionSequencingModuleErrors::InvalidBidDeposit,
                            )
                    }
                    InvalidBidDeposit
                },
                {
                    fn AuctionNotEnded(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SealedBidAuctionSequencingModuleErrors,
                    > {
                        <AuctionNotEnded as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleErrors::AuctionNotEnded)
                    }
                    AuctionNotEnded
                },
                {
                    fn NoFundsToWithdraw(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SealedBidAuctionSequencingModuleErrors,
                    > {
                        <NoFundsToWithdraw as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SealedBidAuctionSequencingModuleErrors::NoFundsToWithdraw,
                            )
                    }
                    NoFundsToWithdraw
                },
                {
                    fn AuctionNotActive(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SealedBidAuctionSequencingModuleErrors,
                    > {
                        <AuctionNotActive as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SealedBidAuctionSequencingModuleErrors::AuctionNotActive,
                            )
                    }
                    AuctionNotActive
                },
                {
                    fn InvalidDuration(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SealedBidAuctionSequencingModuleErrors,
                    > {
                        <InvalidDuration as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleErrors::InvalidDuration)
                    }
                    InvalidDuration
                },
                {
                    fn InvalidBidReveal(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SealedBidAuctionSequencingModuleErrors,
                    > {
                        <InvalidBidReveal as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SealedBidAuctionSequencingModuleErrors::InvalidBidReveal,
                            )
                    }
                    InvalidBidReveal
                },
                {
                    fn NoBidFound(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SealedBidAuctionSequencingModuleErrors,
                    > {
                        <NoBidFound as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SealedBidAuctionSequencingModuleErrors::NoBidFound)
                    }
                    NoBidFound
                },
                {
                    fn TransactionFailed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SealedBidAuctionSequencingModuleErrors,
                    > {
                        <TransactionFailed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SealedBidAuctionSequencingModuleErrors::TransactionFailed,
                            )
                    }
                    TransactionFailed
                },
                {
                    fn BidExceedsDeposit(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SealedBidAuctionSequencingModuleErrors,
                    > {
                        <BidExceedsDeposit as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SealedBidAuctionSequencingModuleErrors::BidExceedsDeposit,
                            )
                    }
                    BidExceedsDeposit
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AddressNotAllowed(inner) => {
                    <AddressNotAllowed as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::AuctionNotActive(inner) => {
                    <AuctionNotActive as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::AuctionNotEnded(inner) => {
                    <AuctionNotEnded as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::BidExceedsDeposit(inner) => {
                    <BidExceedsDeposit as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidBidDeposit(inner) => {
                    <InvalidBidDeposit as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidBidReveal(inner) => {
                    <InvalidBidReveal as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidDuration(inner) => {
                    <InvalidDuration as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NoBidFound(inner) => {
                    <NoBidFound as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::NoFundsToWithdraw(inner) => {
                    <NoFundsToWithdraw as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::TransactionFailed(inner) => {
                    <TransactionFailed as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AddressNotAllowed(inner) => {
                    <AddressNotAllowed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::AuctionNotActive(inner) => {
                    <AuctionNotActive as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::AuctionNotEnded(inner) => {
                    <AuctionNotEnded as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::BidExceedsDeposit(inner) => {
                    <BidExceedsDeposit as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidBidDeposit(inner) => {
                    <InvalidBidDeposit as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidBidReveal(inner) => {
                    <InvalidBidReveal as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidDuration(inner) => {
                    <InvalidDuration as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NoBidFound(inner) => {
                    <NoBidFound as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
                Self::NoFundsToWithdraw(inner) => {
                    <NoFundsToWithdraw as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::TransactionFailed(inner) => {
                    <TransactionFailed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`SealedBidAuctionSequencingModule`](self) events.
    pub enum SealedBidAuctionSequencingModuleEvents {
        BidRevealed(BidRevealed),
    }
    #[automatically_derived]
    impl SealedBidAuctionSequencingModuleEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                156u8,
                45u8,
                29u8,
                255u8,
                30u8,
                36u8,
                65u8,
                73u8,
                238u8,
                248u8,
                180u8,
                146u8,
                85u8,
                103u8,
                77u8,
                64u8,
                117u8,
                42u8,
                205u8,
                130u8,
                91u8,
                35u8,
                212u8,
                173u8,
                48u8,
                56u8,
                7u8,
                249u8,
                143u8,
                229u8,
                149u8,
                50u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for SealedBidAuctionSequencingModuleEvents {
        const NAME: &'static str = "SealedBidAuctionSequencingModuleEvents";
        const COUNT: usize = 1usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<BidRevealed as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <BidRevealed as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::BidRevealed)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData
    for SealedBidAuctionSequencingModuleEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::BidRevealed(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::BidRevealed(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`SealedBidAuctionSequencingModule`](self) contract instance.

See the [wrapper's documentation](`SealedBidAuctionSequencingModuleInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> SealedBidAuctionSequencingModuleInstance<T, P, N> {
        SealedBidAuctionSequencingModuleInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _duration: alloy::sol_types::private::primitives::aliases::U256,
        _treasury: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<
            SealedBidAuctionSequencingModuleInstance<T, P, N>,
        >,
    > {
        SealedBidAuctionSequencingModuleInstance::<
            T,
            P,
            N,
        >::deploy(provider, _duration, _treasury)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _duration: alloy::sol_types::private::primitives::aliases::U256,
        _treasury: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        SealedBidAuctionSequencingModuleInstance::<
            T,
            P,
            N,
        >::deploy_builder(provider, _duration, _treasury)
    }
    /**A [`SealedBidAuctionSequencingModule`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`SealedBidAuctionSequencingModule`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct SealedBidAuctionSequencingModuleInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug
    for SealedBidAuctionSequencingModuleInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("SealedBidAuctionSequencingModuleInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SealedBidAuctionSequencingModuleInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`SealedBidAuctionSequencingModule`](self) contract instance.

See the [wrapper's documentation](`SealedBidAuctionSequencingModuleInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _duration: alloy::sol_types::private::primitives::aliases::U256,
            _treasury: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<SealedBidAuctionSequencingModuleInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, _duration, _treasury);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _duration: alloy::sol_types::private::primitives::aliases::U256,
            _treasury: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall {
                            _duration,
                            _treasury,
                        },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<
        T,
        P: ::core::clone::Clone,
        N,
    > SealedBidAuctionSequencingModuleInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(
            self,
        ) -> SealedBidAuctionSequencingModuleInstance<T, P, N> {
            SealedBidAuctionSequencingModuleInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SealedBidAuctionSequencingModuleInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`auctionActive`] function.
        pub fn auctionActive(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, auctionActiveCall, N> {
            self.call_builder(&auctionActiveCall {})
        }
        ///Creates a new call builder for the [`auctionType`] function.
        pub fn auctionType(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, auctionTypeCall, N> {
            self.call_builder(&auctionTypeCall {})
        }
        ///Creates a new call builder for the [`bid`] function.
        pub fn bid(
            &self,
            _sealedBid: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, bidCall, N> {
            self.call_builder(&bidCall { _sealedBid })
        }
        ///Creates a new call builder for the [`bids`] function.
        pub fn bids(
            &self,
            _0: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, bidsCall, N> {
            self.call_builder(&bidsCall { _0 })
        }
        ///Creates a new call builder for the [`endTime`] function.
        pub fn endTime(&self) -> alloy_contract::SolCallBuilder<T, &P, endTimeCall, N> {
            self.call_builder(&endTimeCall {})
        }
        ///Creates a new call builder for the [`finalizeAuction`] function.
        pub fn finalizeAuction(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, finalizeAuctionCall, N> {
            self.call_builder(&finalizeAuctionCall {})
        }
        ///Creates a new call builder for the [`getAuctionEndTime`] function.
        pub fn getAuctionEndTime(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getAuctionEndTimeCall, N> {
            self.call_builder(&getAuctionEndTimeCall {})
        }
        ///Creates a new call builder for the [`getAuctionType`] function.
        pub fn getAuctionType(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getAuctionTypeCall, N> {
            self.call_builder(&getAuctionTypeCall {})
        }
        ///Creates a new call builder for the [`getAuctionWinner`] function.
        pub fn getAuctionWinner(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getAuctionWinnerCall, N> {
            self.call_builder(&getAuctionWinnerCall {})
        }
        ///Creates a new call builder for the [`getCurrentPrice`] function.
        pub fn getCurrentPrice(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getCurrentPriceCall, N> {
            self.call_builder(&getCurrentPriceCall {})
        }
        ///Creates a new call builder for the [`highestBid`] function.
        pub fn highestBid(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, highestBidCall, N> {
            self.call_builder(&highestBidCall {})
        }
        ///Creates a new call builder for the [`highestBidder`] function.
        pub fn highestBidder(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, highestBidderCall, N> {
            self.call_builder(&highestBidderCall {})
        }
        ///Creates a new call builder for the [`isAllowed`] function.
        pub fn isAllowed(
            &self,
            proposer: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, isAllowedCall, N> {
            self.call_builder(&isAllowedCall { proposer })
        }
        ///Creates a new call builder for the [`isAuctionActive`] function.
        pub fn isAuctionActive(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, isAuctionActiveCall, N> {
            self.call_builder(&isAuctionActiveCall {})
        }
        ///Creates a new call builder for the [`refunds`] function.
        pub fn refunds(
            &self,
            _0: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, refundsCall, N> {
            self.call_builder(&refundsCall { _0 })
        }
        ///Creates a new call builder for the [`revealBid`] function.
        pub fn revealBid(
            &self,
            _bid: alloy::sol_types::private::primitives::aliases::U256,
            _salt: alloy::sol_types::private::String,
        ) -> alloy_contract::SolCallBuilder<T, &P, revealBidCall, N> {
            self.call_builder(&revealBidCall { _bid, _salt })
        }
        ///Creates a new call builder for the [`treasury`] function.
        pub fn treasury(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, treasuryCall, N> {
            self.call_builder(&treasuryCall {})
        }
        ///Creates a new call builder for the [`withdrawFunds`] function.
        pub fn withdrawFunds(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, withdrawFundsCall, N> {
            self.call_builder(&withdrawFundsCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SealedBidAuctionSequencingModuleInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`BidRevealed`] event.
        pub fn BidRevealed_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, BidRevealed, N> {
            self.event_filter::<BidRevealed>()
        }
    }
}
