/**

Generated by the following Solidity interface...
```solidity
interface AddBatchTransactionsToMetabasedSequencerChainContract {
    function IS_SCRIPT() external view returns (bool);
    function metabasedSequencerChainContract() external view returns (address);
    function run() external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "IS_SCRIPT",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "metabasedSequencerChainContract",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract MetabasedSequencerChain"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "run",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod AddBatchTransactionsToMetabasedSequencerChainContract {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052600c805462ff00ff191662010001179055348015601f575f80fd5b506103b68061002d5f395ff3fe608060405234801561000f575f80fd5b506004361061003f575f3560e01c80632815bf1914610043578063c04062261461007a578063f8ccbf4714610084575b5f80fd5b600c5461005d90630100000090046001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100826100a7565b005b600c546100979062010000900460ff1681565b6040519015158152602001610071565b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c6001600160a01b0316637fb5297f6040518163ffffffff1660e01b81526004015f604051808303815f87803b158015610101575f80fd5b505af1158015610113573d5f803e3d5ffd5b5050600c80546301000000600160b81b03191676b1567b5dfa038e4f279d3b585d4d45b8bdd2263d0000001790555050604080516002808252606082019092525f91602082015b606081526020019060019003908161015a57905050600c546040805163010000009092046001600160a01b031660208301819052600191830191909152919250606001604051602081830303815290604052825f815181106101be576101be6102f5565b60200260200101819052508060026040516020016101f19291906001600160a01b03929092168252602082015260400190565b60405160208183030381529060405282600181518110610213576102136102f5565b6020908102919091010152600c54604051630b83249d60e01b815263010000009091046001600160a01b031690630b83249d90610254908590600401610309565b5f604051808303815f87803b15801561026b575f80fd5b505af115801561027d573d5f803e3d5ffd5b505050507f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c6001600160a01b03166376eadd366040518163ffffffff1660e01b81526004015f604051808303815f87803b1580156102db575f80fd5b505af11580156102ed573d5f803e3d5ffd5b505050505050565b634e487b7160e01b5f52603260045260245ffd5b5f602080830181845280855180835260408601915060408160051b87010192508387015f5b8281101561037357878503603f1901845281518051808752808883018989015e5f878201890152601f01601f191690950186019450928501929085019060010161032e565b509297965050505050505056fea2646970667358221220736ce14eff3c09b2f981ffbfd5f5c71c590b1edfa674898986dbcf3601e7575564736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x0C\x80Tb\xFF\0\xFF\x19\x16b\x01\0\x01\x17\x90U4\x80\x15`\x1FW_\x80\xFD[Pa\x03\xB6\x80a\0-_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\0?W_5`\xE0\x1C\x80c(\x15\xBF\x19\x14a\0CW\x80c\xC0@b&\x14a\0zW\x80c\xF8\xCC\xBFG\x14a\0\x84W[_\x80\xFD[`\x0CTa\0]\x90c\x01\0\0\0\x90\x04`\x01`\x01`\xA0\x1B\x03\x16\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\0\x82a\0\xA7V[\0[`\x0CTa\0\x97\x90b\x01\0\0\x90\x04`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01a\0qV[\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-_\x1C`\x01`\x01`\xA0\x1B\x03\x16c\x7F\xB5)\x7F`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x01\x01W_\x80\xFD[PZ\xF1\x15\x80\x15a\x01\x13W=_\x80>=_\xFD[PP`\x0C\x80Tc\x01\0\0\0`\x01`\xB8\x1B\x03\x19\x16v\xB1V{]\xFA\x03\x8EO'\x9D;X]ME\xB8\xBD\xD2&=\0\0\0\x17\x90UPP`@\x80Q`\x02\x80\x82R``\x82\x01\x90\x92R_\x91` \x82\x01[``\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x01ZW\x90PP`\x0CT`@\x80Qc\x01\0\0\0\x90\x92\x04`\x01`\x01`\xA0\x1B\x03\x16` \x83\x01\x81\x90R`\x01\x91\x83\x01\x91\x90\x91R\x91\x92P``\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x82_\x81Q\x81\x10a\x01\xBEWa\x01\xBEa\x02\xF5V[` \x02` \x01\x01\x81\x90RP\x80`\x02`@Q` \x01a\x01\xF1\x92\x91\x90`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x82R` \x82\x01R`@\x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x82`\x01\x81Q\x81\x10a\x02\x13Wa\x02\x13a\x02\xF5V[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x0CT`@Qc\x0B\x83$\x9D`\xE0\x1B\x81Rc\x01\0\0\0\x90\x91\x04`\x01`\x01`\xA0\x1B\x03\x16\x90c\x0B\x83$\x9D\x90a\x02T\x90\x85\x90`\x04\x01a\x03\tV[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x02kW_\x80\xFD[PZ\xF1\x15\x80\x15a\x02}W=_\x80>=_\xFD[PPPP\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-_\x1C`\x01`\x01`\xA0\x1B\x03\x16cv\xEA\xDD6`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x02\xDBW_\x80\xFD[PZ\xF1\x15\x80\x15a\x02\xEDW=_\x80>=_\xFD[PPPPPPV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_` \x80\x83\x01\x81\x84R\x80\x85Q\x80\x83R`@\x86\x01\x91P`@\x81`\x05\x1B\x87\x01\x01\x92P\x83\x87\x01_[\x82\x81\x10\x15a\x03sW\x87\x85\x03`?\x19\x01\x84R\x81Q\x80Q\x80\x87R\x80\x88\x83\x01\x89\x89\x01^_\x87\x82\x01\x89\x01R`\x1F\x01`\x1F\x19\x16\x90\x95\x01\x86\x01\x94P\x92\x85\x01\x92\x90\x85\x01\x90`\x01\x01a\x03.V[P\x92\x97\x96PPPPPPPV\xFE\xA2dipfsX\"\x12 sl\xE1N\xFF<\t\xB2\xF9\x81\xFF\xBF\xD5\xF5\xC7\x1CY\x0B\x1E\xDF\xA6t\x89\x89\x86\xDB\xCF6\x01\xE7WUdsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f80fd5b506004361061003f575f3560e01c80632815bf1914610043578063c04062261461007a578063f8ccbf4714610084575b5f80fd5b600c5461005d90630100000090046001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100826100a7565b005b600c546100979062010000900460ff1681565b6040519015158152602001610071565b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c6001600160a01b0316637fb5297f6040518163ffffffff1660e01b81526004015f604051808303815f87803b158015610101575f80fd5b505af1158015610113573d5f803e3d5ffd5b5050600c80546301000000600160b81b03191676b1567b5dfa038e4f279d3b585d4d45b8bdd2263d0000001790555050604080516002808252606082019092525f91602082015b606081526020019060019003908161015a57905050600c546040805163010000009092046001600160a01b031660208301819052600191830191909152919250606001604051602081830303815290604052825f815181106101be576101be6102f5565b60200260200101819052508060026040516020016101f19291906001600160a01b03929092168252602082015260400190565b60405160208183030381529060405282600181518110610213576102136102f5565b6020908102919091010152600c54604051630b83249d60e01b815263010000009091046001600160a01b031690630b83249d90610254908590600401610309565b5f604051808303815f87803b15801561026b575f80fd5b505af115801561027d573d5f803e3d5ffd5b505050507f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c6001600160a01b03166376eadd366040518163ffffffff1660e01b81526004015f604051808303815f87803b1580156102db575f80fd5b505af11580156102ed573d5f803e3d5ffd5b505050505050565b634e487b7160e01b5f52603260045260245ffd5b5f602080830181845280855180835260408601915060408160051b87010192508387015f5b8281101561037357878503603f1901845281518051808752808883018989015e5f878201890152601f01601f191690950186019450928501929085019060010161032e565b509297965050505050505056fea2646970667358221220736ce14eff3c09b2f981ffbfd5f5c71c590b1edfa674898986dbcf3601e7575564736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\0?W_5`\xE0\x1C\x80c(\x15\xBF\x19\x14a\0CW\x80c\xC0@b&\x14a\0zW\x80c\xF8\xCC\xBFG\x14a\0\x84W[_\x80\xFD[`\x0CTa\0]\x90c\x01\0\0\0\x90\x04`\x01`\x01`\xA0\x1B\x03\x16\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\0\x82a\0\xA7V[\0[`\x0CTa\0\x97\x90b\x01\0\0\x90\x04`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01a\0qV[\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-_\x1C`\x01`\x01`\xA0\x1B\x03\x16c\x7F\xB5)\x7F`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x01\x01W_\x80\xFD[PZ\xF1\x15\x80\x15a\x01\x13W=_\x80>=_\xFD[PP`\x0C\x80Tc\x01\0\0\0`\x01`\xB8\x1B\x03\x19\x16v\xB1V{]\xFA\x03\x8EO'\x9D;X]ME\xB8\xBD\xD2&=\0\0\0\x17\x90UPP`@\x80Q`\x02\x80\x82R``\x82\x01\x90\x92R_\x91` \x82\x01[``\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x01ZW\x90PP`\x0CT`@\x80Qc\x01\0\0\0\x90\x92\x04`\x01`\x01`\xA0\x1B\x03\x16` \x83\x01\x81\x90R`\x01\x91\x83\x01\x91\x90\x91R\x91\x92P``\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x82_\x81Q\x81\x10a\x01\xBEWa\x01\xBEa\x02\xF5V[` \x02` \x01\x01\x81\x90RP\x80`\x02`@Q` \x01a\x01\xF1\x92\x91\x90`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x82R` \x82\x01R`@\x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x82`\x01\x81Q\x81\x10a\x02\x13Wa\x02\x13a\x02\xF5V[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x0CT`@Qc\x0B\x83$\x9D`\xE0\x1B\x81Rc\x01\0\0\0\x90\x91\x04`\x01`\x01`\xA0\x1B\x03\x16\x90c\x0B\x83$\x9D\x90a\x02T\x90\x85\x90`\x04\x01a\x03\tV[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x02kW_\x80\xFD[PZ\xF1\x15\x80\x15a\x02}W=_\x80>=_\xFD[PPPP\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-_\x1C`\x01`\x01`\xA0\x1B\x03\x16cv\xEA\xDD6`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x02\xDBW_\x80\xFD[PZ\xF1\x15\x80\x15a\x02\xEDW=_\x80>=_\xFD[PPPPPPV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_` \x80\x83\x01\x81\x84R\x80\x85Q\x80\x83R`@\x86\x01\x91P`@\x81`\x05\x1B\x87\x01\x01\x92P\x83\x87\x01_[\x82\x81\x10\x15a\x03sW\x87\x85\x03`?\x19\x01\x84R\x81Q\x80Q\x80\x87R\x80\x88\x83\x01\x89\x89\x01^_\x87\x82\x01\x89\x01R`\x1F\x01`\x1F\x19\x16\x90\x95\x01\x86\x01\x94P\x92\x85\x01\x92\x90\x85\x01\x90`\x01\x01a\x03.V[P\x92\x97\x96PPPPPPPV\xFE\xA2dipfsX\"\x12 sl\xE1N\xFF<\t\xB2\xF9\x81\xFF\xBF\xD5\xF5\xC7\x1CY\x0B\x1E\xDF\xA6t\x89\x89\x86\xDB\xCF6\x01\xE7WUdsolcC\0\x08\x19\x003",
    );
    /**Function with signature `IS_SCRIPT()` and selector `0xf8ccbf47`.
```solidity
function IS_SCRIPT() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTCall {}
    ///Container type for the return parameters of the [`IS_SCRIPT()`](IS_SCRIPTCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTReturn {
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTCall> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTReturn> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for IS_SCRIPTCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = IS_SCRIPTReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "IS_SCRIPT()";
            const SELECTOR: [u8; 4] = [248u8, 204u8, 191u8, 71u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `metabasedSequencerChainContract()` and selector `0x2815bf19`.
```solidity
function metabasedSequencerChainContract() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct metabasedSequencerChainContractCall {}
    ///Container type for the return parameters of the [`metabasedSequencerChainContract()`](metabasedSequencerChainContractCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct metabasedSequencerChainContractReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<metabasedSequencerChainContractCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: metabasedSequencerChainContractCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for metabasedSequencerChainContractCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<metabasedSequencerChainContractReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: metabasedSequencerChainContractReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for metabasedSequencerChainContractReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for metabasedSequencerChainContractCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = metabasedSequencerChainContractReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "metabasedSequencerChainContract()";
            const SELECTOR: [u8; 4] = [40u8, 21u8, 191u8, 25u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `run()` and selector `0xc0406226`.
```solidity
function run() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runCall {}
    ///Container type for the return parameters of the [`run()`](runCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runCall> for UnderlyingRustTuple<'_> {
                fn from(value: runCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runReturn> for UnderlyingRustTuple<'_> {
                fn from(value: runReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for runCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = runReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "run()";
            const SELECTOR: [u8; 4] = [192u8, 64u8, 98u8, 38u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`AddBatchTransactionsToMetabasedSequencerChainContract`](self) function calls.
    pub enum AddBatchTransactionsToMetabasedSequencerChainContractCalls {
        IS_SCRIPT(IS_SCRIPTCall),
        metabasedSequencerChainContract(metabasedSequencerChainContractCall),
        run(runCall),
    }
    #[automatically_derived]
    impl AddBatchTransactionsToMetabasedSequencerChainContractCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [40u8, 21u8, 191u8, 25u8],
            [192u8, 64u8, 98u8, 38u8],
            [248u8, 204u8, 191u8, 71u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface
    for AddBatchTransactionsToMetabasedSequencerChainContractCalls {
        const NAME: &'static str = "AddBatchTransactionsToMetabasedSequencerChainContractCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 3usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::IS_SCRIPT(_) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::metabasedSequencerChainContract(_) => {
                    <metabasedSequencerChainContractCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::run(_) => <runCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<
                AddBatchTransactionsToMetabasedSequencerChainContractCalls,
            >] = &[
                {
                    fn metabasedSequencerChainContract(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        AddBatchTransactionsToMetabasedSequencerChainContractCalls,
                    > {
                        <metabasedSequencerChainContractCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                AddBatchTransactionsToMetabasedSequencerChainContractCalls::metabasedSequencerChainContract,
                            )
                    }
                    metabasedSequencerChainContract
                },
                {
                    fn run(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        AddBatchTransactionsToMetabasedSequencerChainContractCalls,
                    > {
                        <runCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                AddBatchTransactionsToMetabasedSequencerChainContractCalls::run,
                            )
                    }
                    run
                },
                {
                    fn IS_SCRIPT(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        AddBatchTransactionsToMetabasedSequencerChainContractCalls,
                    > {
                        <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                AddBatchTransactionsToMetabasedSequencerChainContractCalls::IS_SCRIPT,
                            )
                    }
                    IS_SCRIPT
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::metabasedSequencerChainContract(inner) => {
                    <metabasedSequencerChainContractCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::metabasedSequencerChainContract(inner) => {
                    <metabasedSequencerChainContractCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`AddBatchTransactionsToMetabasedSequencerChainContract`](self) contract instance.

See the [wrapper's documentation](`AddBatchTransactionsToMetabasedSequencerChainContractInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> AddBatchTransactionsToMetabasedSequencerChainContractInstance<T, P, N> {
        AddBatchTransactionsToMetabasedSequencerChainContractInstance::<
            T,
            P,
            N,
        >::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<
            AddBatchTransactionsToMetabasedSequencerChainContractInstance<T, P, N>,
        >,
    > {
        AddBatchTransactionsToMetabasedSequencerChainContractInstance::<
            T,
            P,
            N,
        >::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        AddBatchTransactionsToMetabasedSequencerChainContractInstance::<
            T,
            P,
            N,
        >::deploy_builder(provider)
    }
    /**A [`AddBatchTransactionsToMetabasedSequencerChainContract`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`AddBatchTransactionsToMetabasedSequencerChainContract`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct AddBatchTransactionsToMetabasedSequencerChainContractInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug
    for AddBatchTransactionsToMetabasedSequencerChainContractInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(
                    "AddBatchTransactionsToMetabasedSequencerChainContractInstance",
                )
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AddBatchTransactionsToMetabasedSequencerChainContractInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`AddBatchTransactionsToMetabasedSequencerChainContract`](self) contract instance.

See the [wrapper's documentation](`AddBatchTransactionsToMetabasedSequencerChainContractInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<
            AddBatchTransactionsToMetabasedSequencerChainContractInstance<T, P, N>,
        > {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<
        T,
        P: ::core::clone::Clone,
        N,
    > AddBatchTransactionsToMetabasedSequencerChainContractInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(
            self,
        ) -> AddBatchTransactionsToMetabasedSequencerChainContractInstance<T, P, N> {
            AddBatchTransactionsToMetabasedSequencerChainContractInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AddBatchTransactionsToMetabasedSequencerChainContractInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`IS_SCRIPT`] function.
        pub fn IS_SCRIPT(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, IS_SCRIPTCall, N> {
            self.call_builder(&IS_SCRIPTCall {})
        }
        ///Creates a new call builder for the [`metabasedSequencerChainContract`] function.
        pub fn metabasedSequencerChainContract(
            &self,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            metabasedSequencerChainContractCall,
            N,
        > {
            self.call_builder(
                &metabasedSequencerChainContractCall {
                },
            )
        }
        ///Creates a new call builder for the [`run`] function.
        pub fn run(&self) -> alloy_contract::SolCallBuilder<T, &P, runCall, N> {
            self.call_builder(&runCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AddBatchTransactionsToMetabasedSequencerChainContractInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
