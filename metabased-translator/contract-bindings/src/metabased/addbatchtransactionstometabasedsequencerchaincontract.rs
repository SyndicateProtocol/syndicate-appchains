/**

Generated by the following Solidity interface...
```solidity
interface AddBatchTransactionsToMetabasedSequencerChainContract {
    function IS_SCRIPT() external view returns (bool);
    function metabasedSequencerChainContract() external view returns (address);
    function run() external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "IS_SCRIPT",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "metabasedSequencerChainContract",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract MetabasedSequencerChain"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "run",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod AddBatchTransactionsToMetabasedSequencerChainContract {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60806040526001600c5f6101000a81548160ff0219169083151502179055506001600c60026101000a81548160ff0219169083151502179055503480156043575f80fd5b50610698806100515f395ff3fe608060405234801561000f575f80fd5b506004361061003f575f3560e01c80632815bf1914610043578063c040622614610061578063f8ccbf471461006b575b5f80fd5b61004b610089565b6040516100589190610412565b60405180910390f35b6100696100af565b005b610073610385565b6040516100809190610445565b60405180910390f35b600c60039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c73ffffffffffffffffffffffffffffffffffffffff16637fb5297f6040518163ffffffff1660e01b81526004015f604051808303815f87803b158015610116575f80fd5b505af1158015610128573d5f803e3d5ffd5b5050505073b1567b5dfa038e4f279d3b585d4d45b8bdd2263d600c60036101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505f600267ffffffffffffffff81111561019d5761019c61045e565b5b6040519080825280602002602001820160405280156101d057816020015b60608152602001906001900390816101bb5790505b5090505f600c60039054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160405160200161020d9291906104c3565b604051602081830303815290604052825f8151811061022f5761022e6104ea565b5b602002602001018190525080600260405160200161024e9291906104c3565b60405160208183030381529060405282600181518110610271576102706104ea565b5b6020026020010181905250600c60039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630b83249d836040518263ffffffff1660e01b81526004016102d79190610642565b5f604051808303815f87803b1580156102ee575f80fd5b505af1158015610300573d5f803e3d5ffd5b505050507f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c73ffffffffffffffffffffffffffffffffffffffff166376eadd366040518163ffffffff1660e01b81526004015f604051808303815f87803b15801561036b575f80fd5b505af115801561037d573d5f803e3d5ffd5b505050505050565b600c60029054906101000a900460ff1681565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f819050919050565b5f6103da6103d56103d084610398565b6103b7565b610398565b9050919050565b5f6103eb826103c0565b9050919050565b5f6103fc826103e1565b9050919050565b61040c816103f2565b82525050565b5f6020820190506104255f830184610403565b92915050565b5f8115159050919050565b61043f8161042b565b82525050565b5f6020820190506104585f830184610436565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b5f61049582610398565b9050919050565b6104a58161048b565b82525050565b5f819050919050565b6104bd816104ab565b82525050565b5f6040820190506104d65f83018561049c565b6104e360208301846104b4565b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f61058282610540565b61058c818561054a565b935061059c81856020860161055a565b6105a581610568565b840191505092915050565b5f6105bb8383610578565b905092915050565b5f602082019050919050565b5f6105d982610517565b6105e38185610521565b9350836020820285016105f585610531565b805f5b85811015610630578484038952815161061185826105b0565b945061061c836105c3565b925060208a019950506001810190506105f8565b50829750879550505050505092915050565b5f6020820190508181035f83015261065a81846105cf565b90509291505056fea2646970667358221220f1dd274f059b88a53351a4c68726664efa308034031020d526d002fcc9c865f564736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x01`\x0C_a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP`\x01`\x0C`\x02a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP4\x80\x15`CW_\x80\xFD[Pa\x06\x98\x80a\0Q_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\0?W_5`\xE0\x1C\x80c(\x15\xBF\x19\x14a\0CW\x80c\xC0@b&\x14a\0aW\x80c\xF8\xCC\xBFG\x14a\0kW[_\x80\xFD[a\0Ka\0\x89V[`@Qa\0X\x91\x90a\x04\x12V[`@Q\x80\x91\x03\x90\xF3[a\0ia\0\xAFV[\0[a\0sa\x03\x85V[`@Qa\0\x80\x91\x90a\x04EV[`@Q\x80\x91\x03\x90\xF3[`\x0C`\x03\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81V[\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-_\x1Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x7F\xB5)\x7F`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x01\x16W_\x80\xFD[PZ\xF1\x15\x80\x15a\x01(W=_\x80>=_\xFD[PPPPs\xB1V{]\xFA\x03\x8EO'\x9D;X]ME\xB8\xBD\xD2&=`\x0C`\x03a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP_`\x02g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x01\x9DWa\x01\x9Ca\x04^V[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x01\xD0W\x81` \x01[``\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x01\xBBW\x90P[P\x90P_`\x0C`\x03\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P\x80`\x01`@Q` \x01a\x02\r\x92\x91\x90a\x04\xC3V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x82_\x81Q\x81\x10a\x02/Wa\x02.a\x04\xEAV[[` \x02` \x01\x01\x81\x90RP\x80`\x02`@Q` \x01a\x02N\x92\x91\x90a\x04\xC3V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x82`\x01\x81Q\x81\x10a\x02qWa\x02pa\x04\xEAV[[` \x02` \x01\x01\x81\x90RP`\x0C`\x03\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x0B\x83$\x9D\x83`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x02\xD7\x91\x90a\x06BV[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x02\xEEW_\x80\xFD[PZ\xF1\x15\x80\x15a\x03\0W=_\x80>=_\xFD[PPPP\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-_\x1Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16cv\xEA\xDD6`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x03kW_\x80\xFD[PZ\xF1\x15\x80\x15a\x03}W=_\x80>=_\xFD[PPPPPPV[`\x0C`\x02\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x81V[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_\x81\x90P\x91\x90PV[_a\x03\xDAa\x03\xD5a\x03\xD0\x84a\x03\x98V[a\x03\xB7V[a\x03\x98V[\x90P\x91\x90PV[_a\x03\xEB\x82a\x03\xC0V[\x90P\x91\x90PV[_a\x03\xFC\x82a\x03\xE1V[\x90P\x91\x90PV[a\x04\x0C\x81a\x03\xF2V[\x82RPPV[_` \x82\x01\x90Pa\x04%_\x83\x01\x84a\x04\x03V[\x92\x91PPV[_\x81\x15\x15\x90P\x91\x90PV[a\x04?\x81a\x04+V[\x82RPPV[_` \x82\x01\x90Pa\x04X_\x83\x01\x84a\x046V[\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[_a\x04\x95\x82a\x03\x98V[\x90P\x91\x90PV[a\x04\xA5\x81a\x04\x8BV[\x82RPPV[_\x81\x90P\x91\x90PV[a\x04\xBD\x81a\x04\xABV[\x82RPPV[_`@\x82\x01\x90Pa\x04\xD6_\x83\x01\x85a\x04\x9CV[a\x04\xE3` \x83\x01\x84a\x04\xB4V[\x93\x92PPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_\x81\x90P` \x82\x01\x90P\x91\x90PV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[\x82\x81\x83^_\x83\x83\x01RPPPV[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[_a\x05\x82\x82a\x05@V[a\x05\x8C\x81\x85a\x05JV[\x93Pa\x05\x9C\x81\x85` \x86\x01a\x05ZV[a\x05\xA5\x81a\x05hV[\x84\x01\x91PP\x92\x91PPV[_a\x05\xBB\x83\x83a\x05xV[\x90P\x92\x91PPV[_` \x82\x01\x90P\x91\x90PV[_a\x05\xD9\x82a\x05\x17V[a\x05\xE3\x81\x85a\x05!V[\x93P\x83` \x82\x02\x85\x01a\x05\xF5\x85a\x051V[\x80_[\x85\x81\x10\x15a\x060W\x84\x84\x03\x89R\x81Qa\x06\x11\x85\x82a\x05\xB0V[\x94Pa\x06\x1C\x83a\x05\xC3V[\x92P` \x8A\x01\x99PP`\x01\x81\x01\x90Pa\x05\xF8V[P\x82\x97P\x87\x95PPPPPP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\x06Z\x81\x84a\x05\xCFV[\x90P\x92\x91PPV\xFE\xA2dipfsX\"\x12 \xF1\xDD'O\x05\x9B\x88\xA53Q\xA4\xC6\x87&fN\xFA0\x804\x03\x10 \xD5&\xD0\x02\xFC\xC9\xC8e\xF5dsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f80fd5b506004361061003f575f3560e01c80632815bf1914610043578063c040622614610061578063f8ccbf471461006b575b5f80fd5b61004b610089565b6040516100589190610412565b60405180910390f35b6100696100af565b005b610073610385565b6040516100809190610445565b60405180910390f35b600c60039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c73ffffffffffffffffffffffffffffffffffffffff16637fb5297f6040518163ffffffff1660e01b81526004015f604051808303815f87803b158015610116575f80fd5b505af1158015610128573d5f803e3d5ffd5b5050505073b1567b5dfa038e4f279d3b585d4d45b8bdd2263d600c60036101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505f600267ffffffffffffffff81111561019d5761019c61045e565b5b6040519080825280602002602001820160405280156101d057816020015b60608152602001906001900390816101bb5790505b5090505f600c60039054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160405160200161020d9291906104c3565b604051602081830303815290604052825f8151811061022f5761022e6104ea565b5b602002602001018190525080600260405160200161024e9291906104c3565b60405160208183030381529060405282600181518110610271576102706104ea565b5b6020026020010181905250600c60039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630b83249d836040518263ffffffff1660e01b81526004016102d79190610642565b5f604051808303815f87803b1580156102ee575f80fd5b505af1158015610300573d5f803e3d5ffd5b505050507f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c73ffffffffffffffffffffffffffffffffffffffff166376eadd366040518163ffffffff1660e01b81526004015f604051808303815f87803b15801561036b575f80fd5b505af115801561037d573d5f803e3d5ffd5b505050505050565b600c60029054906101000a900460ff1681565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f819050919050565b5f6103da6103d56103d084610398565b6103b7565b610398565b9050919050565b5f6103eb826103c0565b9050919050565b5f6103fc826103e1565b9050919050565b61040c816103f2565b82525050565b5f6020820190506104255f830184610403565b92915050565b5f8115159050919050565b61043f8161042b565b82525050565b5f6020820190506104585f830184610436565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b5f61049582610398565b9050919050565b6104a58161048b565b82525050565b5f819050919050565b6104bd816104ab565b82525050565b5f6040820190506104d65f83018561049c565b6104e360208301846104b4565b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f61058282610540565b61058c818561054a565b935061059c81856020860161055a565b6105a581610568565b840191505092915050565b5f6105bb8383610578565b905092915050565b5f602082019050919050565b5f6105d982610517565b6105e38185610521565b9350836020820285016105f585610531565b805f5b85811015610630578484038952815161061185826105b0565b945061061c836105c3565b925060208a019950506001810190506105f8565b50829750879550505050505092915050565b5f6020820190508181035f83015261065a81846105cf565b90509291505056fea2646970667358221220f1dd274f059b88a53351a4c68726664efa308034031020d526d002fcc9c865f564736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\0?W_5`\xE0\x1C\x80c(\x15\xBF\x19\x14a\0CW\x80c\xC0@b&\x14a\0aW\x80c\xF8\xCC\xBFG\x14a\0kW[_\x80\xFD[a\0Ka\0\x89V[`@Qa\0X\x91\x90a\x04\x12V[`@Q\x80\x91\x03\x90\xF3[a\0ia\0\xAFV[\0[a\0sa\x03\x85V[`@Qa\0\x80\x91\x90a\x04EV[`@Q\x80\x91\x03\x90\xF3[`\x0C`\x03\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81V[\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-_\x1Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x7F\xB5)\x7F`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x01\x16W_\x80\xFD[PZ\xF1\x15\x80\x15a\x01(W=_\x80>=_\xFD[PPPPs\xB1V{]\xFA\x03\x8EO'\x9D;X]ME\xB8\xBD\xD2&=`\x0C`\x03a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP_`\x02g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x01\x9DWa\x01\x9Ca\x04^V[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x01\xD0W\x81` \x01[``\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x01\xBBW\x90P[P\x90P_`\x0C`\x03\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P\x80`\x01`@Q` \x01a\x02\r\x92\x91\x90a\x04\xC3V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x82_\x81Q\x81\x10a\x02/Wa\x02.a\x04\xEAV[[` \x02` \x01\x01\x81\x90RP\x80`\x02`@Q` \x01a\x02N\x92\x91\x90a\x04\xC3V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x82`\x01\x81Q\x81\x10a\x02qWa\x02pa\x04\xEAV[[` \x02` \x01\x01\x81\x90RP`\x0C`\x03\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x0B\x83$\x9D\x83`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x02\xD7\x91\x90a\x06BV[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x02\xEEW_\x80\xFD[PZ\xF1\x15\x80\x15a\x03\0W=_\x80>=_\xFD[PPPP\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-_\x1Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16cv\xEA\xDD6`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x03kW_\x80\xFD[PZ\xF1\x15\x80\x15a\x03}W=_\x80>=_\xFD[PPPPPPV[`\x0C`\x02\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x81V[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_\x81\x90P\x91\x90PV[_a\x03\xDAa\x03\xD5a\x03\xD0\x84a\x03\x98V[a\x03\xB7V[a\x03\x98V[\x90P\x91\x90PV[_a\x03\xEB\x82a\x03\xC0V[\x90P\x91\x90PV[_a\x03\xFC\x82a\x03\xE1V[\x90P\x91\x90PV[a\x04\x0C\x81a\x03\xF2V[\x82RPPV[_` \x82\x01\x90Pa\x04%_\x83\x01\x84a\x04\x03V[\x92\x91PPV[_\x81\x15\x15\x90P\x91\x90PV[a\x04?\x81a\x04+V[\x82RPPV[_` \x82\x01\x90Pa\x04X_\x83\x01\x84a\x046V[\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[_a\x04\x95\x82a\x03\x98V[\x90P\x91\x90PV[a\x04\xA5\x81a\x04\x8BV[\x82RPPV[_\x81\x90P\x91\x90PV[a\x04\xBD\x81a\x04\xABV[\x82RPPV[_`@\x82\x01\x90Pa\x04\xD6_\x83\x01\x85a\x04\x9CV[a\x04\xE3` \x83\x01\x84a\x04\xB4V[\x93\x92PPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_\x81\x90P` \x82\x01\x90P\x91\x90PV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[\x82\x81\x83^_\x83\x83\x01RPPPV[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[_a\x05\x82\x82a\x05@V[a\x05\x8C\x81\x85a\x05JV[\x93Pa\x05\x9C\x81\x85` \x86\x01a\x05ZV[a\x05\xA5\x81a\x05hV[\x84\x01\x91PP\x92\x91PPV[_a\x05\xBB\x83\x83a\x05xV[\x90P\x92\x91PPV[_` \x82\x01\x90P\x91\x90PV[_a\x05\xD9\x82a\x05\x17V[a\x05\xE3\x81\x85a\x05!V[\x93P\x83` \x82\x02\x85\x01a\x05\xF5\x85a\x051V[\x80_[\x85\x81\x10\x15a\x060W\x84\x84\x03\x89R\x81Qa\x06\x11\x85\x82a\x05\xB0V[\x94Pa\x06\x1C\x83a\x05\xC3V[\x92P` \x8A\x01\x99PP`\x01\x81\x01\x90Pa\x05\xF8V[P\x82\x97P\x87\x95PPPPPP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\x06Z\x81\x84a\x05\xCFV[\x90P\x92\x91PPV\xFE\xA2dipfsX\"\x12 \xF1\xDD'O\x05\x9B\x88\xA53Q\xA4\xC6\x87&fN\xFA0\x804\x03\x10 \xD5&\xD0\x02\xFC\xC9\xC8e\xF5dsolcC\0\x08\x19\x003",
    );
    /**Function with signature `IS_SCRIPT()` and selector `0xf8ccbf47`.
```solidity
function IS_SCRIPT() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTCall {}
    ///Container type for the return parameters of the [`IS_SCRIPT()`](IS_SCRIPTCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTCall> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTReturn> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for IS_SCRIPTCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = IS_SCRIPTReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "IS_SCRIPT()";
            const SELECTOR: [u8; 4] = [248u8, 204u8, 191u8, 71u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `metabasedSequencerChainContract()` and selector `0x2815bf19`.
```solidity
function metabasedSequencerChainContract() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct metabasedSequencerChainContractCall {}
    ///Container type for the return parameters of the [`metabasedSequencerChainContract()`](metabasedSequencerChainContractCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct metabasedSequencerChainContractReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<metabasedSequencerChainContractCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: metabasedSequencerChainContractCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for metabasedSequencerChainContractCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<metabasedSequencerChainContractReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: metabasedSequencerChainContractReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for metabasedSequencerChainContractReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for metabasedSequencerChainContractCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = metabasedSequencerChainContractReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "metabasedSequencerChainContract()";
            const SELECTOR: [u8; 4] = [40u8, 21u8, 191u8, 25u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `run()` and selector `0xc0406226`.
```solidity
function run() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runCall {}
    ///Container type for the return parameters of the [`run()`](runCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runCall> for UnderlyingRustTuple<'_> {
                fn from(value: runCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runReturn> for UnderlyingRustTuple<'_> {
                fn from(value: runReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for runCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = runReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "run()";
            const SELECTOR: [u8; 4] = [192u8, 64u8, 98u8, 38u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`AddBatchTransactionsToMetabasedSequencerChainContract`](self) function calls.
    pub enum AddBatchTransactionsToMetabasedSequencerChainContractCalls {
        #[allow(missing_docs)]
        IS_SCRIPT(IS_SCRIPTCall),
        #[allow(missing_docs)]
        metabasedSequencerChainContract(metabasedSequencerChainContractCall),
        #[allow(missing_docs)]
        run(runCall),
    }
    #[automatically_derived]
    impl AddBatchTransactionsToMetabasedSequencerChainContractCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [40u8, 21u8, 191u8, 25u8],
            [192u8, 64u8, 98u8, 38u8],
            [248u8, 204u8, 191u8, 71u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface
    for AddBatchTransactionsToMetabasedSequencerChainContractCalls {
        const NAME: &'static str = "AddBatchTransactionsToMetabasedSequencerChainContractCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 3usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::IS_SCRIPT(_) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::metabasedSequencerChainContract(_) => {
                    <metabasedSequencerChainContractCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::run(_) => <runCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<
                AddBatchTransactionsToMetabasedSequencerChainContractCalls,
            >] = &[
                {
                    fn metabasedSequencerChainContract(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        AddBatchTransactionsToMetabasedSequencerChainContractCalls,
                    > {
                        <metabasedSequencerChainContractCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                AddBatchTransactionsToMetabasedSequencerChainContractCalls::metabasedSequencerChainContract,
                            )
                    }
                    metabasedSequencerChainContract
                },
                {
                    fn run(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        AddBatchTransactionsToMetabasedSequencerChainContractCalls,
                    > {
                        <runCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                AddBatchTransactionsToMetabasedSequencerChainContractCalls::run,
                            )
                    }
                    run
                },
                {
                    fn IS_SCRIPT(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        AddBatchTransactionsToMetabasedSequencerChainContractCalls,
                    > {
                        <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                AddBatchTransactionsToMetabasedSequencerChainContractCalls::IS_SCRIPT,
                            )
                    }
                    IS_SCRIPT
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::metabasedSequencerChainContract(inner) => {
                    <metabasedSequencerChainContractCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::metabasedSequencerChainContract(inner) => {
                    <metabasedSequencerChainContractCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`AddBatchTransactionsToMetabasedSequencerChainContract`](self) contract instance.

See the [wrapper's documentation](`AddBatchTransactionsToMetabasedSequencerChainContractInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> AddBatchTransactionsToMetabasedSequencerChainContractInstance<T, P, N> {
        AddBatchTransactionsToMetabasedSequencerChainContractInstance::<
            T,
            P,
            N,
        >::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<
            AddBatchTransactionsToMetabasedSequencerChainContractInstance<T, P, N>,
        >,
    > {
        AddBatchTransactionsToMetabasedSequencerChainContractInstance::<
            T,
            P,
            N,
        >::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        AddBatchTransactionsToMetabasedSequencerChainContractInstance::<
            T,
            P,
            N,
        >::deploy_builder(provider)
    }
    /**A [`AddBatchTransactionsToMetabasedSequencerChainContract`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`AddBatchTransactionsToMetabasedSequencerChainContract`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct AddBatchTransactionsToMetabasedSequencerChainContractInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug
    for AddBatchTransactionsToMetabasedSequencerChainContractInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(
                    "AddBatchTransactionsToMetabasedSequencerChainContractInstance",
                )
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AddBatchTransactionsToMetabasedSequencerChainContractInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`AddBatchTransactionsToMetabasedSequencerChainContract`](self) contract instance.

See the [wrapper's documentation](`AddBatchTransactionsToMetabasedSequencerChainContractInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<
            AddBatchTransactionsToMetabasedSequencerChainContractInstance<T, P, N>,
        > {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<
        T,
        P: ::core::clone::Clone,
        N,
    > AddBatchTransactionsToMetabasedSequencerChainContractInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(
            self,
        ) -> AddBatchTransactionsToMetabasedSequencerChainContractInstance<T, P, N> {
            AddBatchTransactionsToMetabasedSequencerChainContractInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AddBatchTransactionsToMetabasedSequencerChainContractInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`IS_SCRIPT`] function.
        pub fn IS_SCRIPT(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, IS_SCRIPTCall, N> {
            self.call_builder(&IS_SCRIPTCall {})
        }
        ///Creates a new call builder for the [`metabasedSequencerChainContract`] function.
        pub fn metabasedSequencerChainContract(
            &self,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            metabasedSequencerChainContractCall,
            N,
        > {
            self.call_builder(
                &metabasedSequencerChainContractCall {
                },
            )
        }
        ///Creates a new call builder for the [`run`] function.
        pub fn run(&self) -> alloy_contract::SolCallBuilder<T, &P, runCall, N> {
            self.call_builder(&runCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AddBatchTransactionsToMetabasedSequencerChainContractInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
