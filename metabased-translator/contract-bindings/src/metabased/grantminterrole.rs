/**

Generated by the following Solidity interface...
```solidity
interface GrantMinterRole {
    function IS_SCRIPT() external view returns (bool);
    function MINTER_ROLE() external view returns (bytes32);
    function run() external;
    function synd() external view returns (address);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "IS_SCRIPT",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "MINTER_ROLE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "run",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "synd",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract AccessControl"
      }
    ],
    "stateMutability": "view"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod GrantMinterRole {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608080604052346026576201000162ff00ff19600c541617600c55610511908161002b8239f35b5f80fdfe6080604081815260049182361015610015575f80fd5b5f925f3560e01c918263a5220ded1461046557508163c0406226146100b157508063d5391393146100775763f8ccbf471461004e575f80fd5b3461007357816003193601126100735760209060ff600c5460101c1690519015158152f35b5080fd5b5034610073578160031936011261007357602090517f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a68152f35b838334610461575f36600319011261046157737109709ecfa91a80626ff3989d68f67f5b1dd12d90813b15610461578051637fb5297f60e01b81525f81868183875af1801561045757610444575b50805167ffffffffffffffff949060a081018681118282101761043157835281815260209560208201608036823782511561041e57734e527486594696a7607ff3379e21746689a3fd6d90528151906001916001101561041e577337d911cbd7bb03521a975ec2de03ce1dd01568838584015282516002101561041e57739c2f68b133286cfcc8677bd342bc724a0f2e2546606084015282516003101561041e577318f33cef45817c428d98c4e188a770191fdd4b796080840152600c80546301000000600160b81b031916769a0ef1333681b357047282144dc06d7daa1f76ba0000001781559787835b610245575b5050505050839450823b15610240578151633b756e9b60e11b81529284918491829084905af190811561023757506102245750f35b61022d9061048b565b6102345780f35b80fd5b513d84823e3d90fd5b505050fd5b8451811015610419576001600160a01b038061026183886104b3565b5116156103e457808b5460181c16908061027b84896104b3565b511691803b156103d657908b91828b518092632f2ff15d60e01b82527f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a68d830152602496878301528160449687925af180156103da57908d916103c2575b50506102e584896104b3565b5116918951928a8401848110888211176103b0578b8e60a39282526016875288870195754772616e746564204d494e5445525f524f4c4520746f60501b8752601f83519788938c85019a63319af33360e01b8c526064968a87015251918287870152826084918288015e828601015281199687938501520116810103908101855201168201908282108783111761039e57508b879695949293879482938d5251906a636f6e736f6c652e6c6f675afa50019091926101ea565b634e487b7160e01b5f90815260418b52fd5b8260418c634e487b7160e01b5f52525ffd5b6103cb9061048b565b6103d6578b8e6102d9565b8b80fd5b8b513d8f823e3d90fd5b875162461bcd60e51b8152808801849052600f60248201526e496e76616c6964206164647265737360881b6044820152606490fd5b6101ef565b603284634e487b7160e01b5f525260245ffd5b604183634e487b7160e01b5f525260245ffd5b61044f91935061048b565b5f91846100ff565b82513d5f823e3d90fd5b5f80fd5b34610461575f36600319011261046157600c5460181c6001600160a01b03168152602090f35b67ffffffffffffffff811161049f57604052565b634e487b7160e01b5f52604160045260245ffd5b80518210156104c75760209160051b010190565b634e487b7160e01b5f52603260045260245ffdfea2646970667358221220b9420476299b4f86a46eceaf3a70025533c8c9536cd73be16faffce4934804ef64736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80\x80`@R4`&Wb\x01\0\x01b\xFF\0\xFF\x19`\x0CT\x16\x17`\x0CUa\x05\x11\x90\x81a\0+\x829\xF3[_\x80\xFD\xFE`\x80`@\x81\x81R`\x04\x91\x826\x10\x15a\0\x15W_\x80\xFD[_\x92_5`\xE0\x1C\x91\x82c\xA5\"\r\xED\x14a\x04eWP\x81c\xC0@b&\x14a\0\xB1WP\x80c\xD59\x13\x93\x14a\0wWc\xF8\xCC\xBFG\x14a\0NW_\x80\xFD[4a\0sW\x81`\x03\x196\x01\x12a\0sW` \x90`\xFF`\x0CT`\x10\x1C\x16\x90Q\x90\x15\x15\x81R\xF3[P\x80\xFD[P4a\0sW\x81`\x03\x196\x01\x12a\0sW` \x90Q\x7F\x9F-\xF0\xFE\xD2\xC7vH\xDEX`\xA4\xCCP\x8C\xD0\x81\x8C\x85\xB8\xB8\xA1\xABL\xEE\xEF\x8D\x98\x1C\x89V\xA6\x81R\xF3[\x83\x834a\x04aW_6`\x03\x19\x01\x12a\x04aWsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90\x81;\x15a\x04aW\x80Qc\x7F\xB5)\x7F`\xE0\x1B\x81R_\x81\x86\x81\x83\x87Z\xF1\x80\x15a\x04WWa\x04DW[P\x80Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x94\x90`\xA0\x81\x01\x86\x81\x11\x82\x82\x10\x17a\x041W\x83R\x81\x81R` \x95` \x82\x01`\x806\x827\x82Q\x15a\x04\x1EWsNRt\x86YF\x96\xA7`\x7F\xF37\x9E!tf\x89\xA3\xFDm\x90R\x81Q\x90`\x01\x91`\x01\x10\x15a\x04\x1EWs7\xD9\x11\xCB\xD7\xBB\x03R\x1A\x97^\xC2\xDE\x03\xCE\x1D\xD0\x15h\x83\x85\x84\x01R\x82Q`\x02\x10\x15a\x04\x1EWs\x9C/h\xB13(l\xFC\xC8g{\xD3B\xBCrJ\x0F.%F``\x84\x01R\x82Q`\x03\x10\x15a\x04\x1EWs\x18\xF3<\xEFE\x81|B\x8D\x98\xC4\xE1\x88\xA7p\x19\x1F\xDDKy`\x80\x84\x01R`\x0C\x80Tc\x01\0\0\0`\x01`\xB8\x1B\x03\x19\x16v\x9A\x0E\xF136\x81\xB3W\x04r\x82\x14M\xC0m}\xAA\x1Fv\xBA\0\0\0\x17\x81U\x97\x87\x83[a\x02EW[PPPPP\x83\x94P\x82;\x15a\x02@W\x81Qc;un\x9B`\xE1\x1B\x81R\x92\x84\x91\x84\x91\x82\x90\x84\x90Z\xF1\x90\x81\x15a\x027WPa\x02$WP\xF3[a\x02-\x90a\x04\x8BV[a\x024W\x80\xF3[\x80\xFD[Q=\x84\x82>=\x90\xFD[PPP\xFD[\x84Q\x81\x10\x15a\x04\x19W`\x01`\x01`\xA0\x1B\x03\x80a\x02a\x83\x88a\x04\xB3V[Q\x16\x15a\x03\xE4W\x80\x8BT`\x18\x1C\x16\x90\x80a\x02{\x84\x89a\x04\xB3V[Q\x16\x91\x80;\x15a\x03\xD6W\x90\x8B\x91\x82\x8BQ\x80\x92c//\xF1]`\xE0\x1B\x82R\x7F\x9F-\xF0\xFE\xD2\xC7vH\xDEX`\xA4\xCCP\x8C\xD0\x81\x8C\x85\xB8\xB8\xA1\xABL\xEE\xEF\x8D\x98\x1C\x89V\xA6\x8D\x83\x01R`$\x96\x87\x83\x01R\x81`D\x96\x87\x92Z\xF1\x80\x15a\x03\xDAW\x90\x8D\x91a\x03\xC2W[PPa\x02\xE5\x84\x89a\x04\xB3V[Q\x16\x91\x89Q\x92\x8A\x84\x01\x84\x81\x10\x88\x82\x11\x17a\x03\xB0W\x8B\x8E`\xA3\x92\x82R`\x16\x87R\x88\x87\x01\x95uGranted MINTER_ROLE to`P\x1B\x87R`\x1F\x83Q\x97\x88\x93\x8C\x85\x01\x9Ac1\x9A\xF33`\xE0\x1B\x8CR`d\x96\x8A\x87\x01RQ\x91\x82\x87\x87\x01R\x82`\x84\x91\x82\x88\x01^\x82\x86\x01\x01R\x81\x19\x96\x87\x93\x85\x01R\x01\x16\x81\x01\x03\x90\x81\x01\x85R\x01\x16\x82\x01\x90\x82\x82\x10\x87\x83\x11\x17a\x03\x9EWP\x8B\x87\x96\x95\x94\x92\x93\x87\x94\x82\x93\x8DRQ\x90jconsole.logZ\xFAP\x01\x90\x91\x92a\x01\xEAV[cNH{q`\xE0\x1B_\x90\x81R`A\x8BR\xFD[\x82`A\x8CcNH{q`\xE0\x1B_RR_\xFD[a\x03\xCB\x90a\x04\x8BV[a\x03\xD6W\x8B\x8Ea\x02\xD9V[\x8B\x80\xFD[\x8BQ=\x8F\x82>=\x90\xFD[\x87QbF\x1B\xCD`\xE5\x1B\x81R\x80\x88\x01\x84\x90R`\x0F`$\x82\x01RnInvalid address`\x88\x1B`D\x82\x01R`d\x90\xFD[a\x01\xEFV[`2\x84cNH{q`\xE0\x1B_RR`$_\xFD[`A\x83cNH{q`\xE0\x1B_RR`$_\xFD[a\x04O\x91\x93Pa\x04\x8BV[_\x91\x84a\0\xFFV[\x82Q=_\x82>=\x90\xFD[_\x80\xFD[4a\x04aW_6`\x03\x19\x01\x12a\x04aW`\x0CT`\x18\x1C`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x90\xF3[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04\x9FW`@RV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x80Q\x82\x10\x15a\x04\xC7W` \x91`\x05\x1B\x01\x01\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD\xFE\xA2dipfsX\"\x12 \xB9B\x04v)\x9BO\x86\xA4n\xCE\xAF:p\x02U3\xC8\xC9Sl\xD7;\xE1o\xAF\xFC\xE4\x93H\x04\xEFdsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x6080604081815260049182361015610015575f80fd5b5f925f3560e01c918263a5220ded1461046557508163c0406226146100b157508063d5391393146100775763f8ccbf471461004e575f80fd5b3461007357816003193601126100735760209060ff600c5460101c1690519015158152f35b5080fd5b5034610073578160031936011261007357602090517f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a68152f35b838334610461575f36600319011261046157737109709ecfa91a80626ff3989d68f67f5b1dd12d90813b15610461578051637fb5297f60e01b81525f81868183875af1801561045757610444575b50805167ffffffffffffffff949060a081018681118282101761043157835281815260209560208201608036823782511561041e57734e527486594696a7607ff3379e21746689a3fd6d90528151906001916001101561041e577337d911cbd7bb03521a975ec2de03ce1dd01568838584015282516002101561041e57739c2f68b133286cfcc8677bd342bc724a0f2e2546606084015282516003101561041e577318f33cef45817c428d98c4e188a770191fdd4b796080840152600c80546301000000600160b81b031916769a0ef1333681b357047282144dc06d7daa1f76ba0000001781559787835b610245575b5050505050839450823b15610240578151633b756e9b60e11b81529284918491829084905af190811561023757506102245750f35b61022d9061048b565b6102345780f35b80fd5b513d84823e3d90fd5b505050fd5b8451811015610419576001600160a01b038061026183886104b3565b5116156103e457808b5460181c16908061027b84896104b3565b511691803b156103d657908b91828b518092632f2ff15d60e01b82527f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a68d830152602496878301528160449687925af180156103da57908d916103c2575b50506102e584896104b3565b5116918951928a8401848110888211176103b0578b8e60a39282526016875288870195754772616e746564204d494e5445525f524f4c4520746f60501b8752601f83519788938c85019a63319af33360e01b8c526064968a87015251918287870152826084918288015e828601015281199687938501520116810103908101855201168201908282108783111761039e57508b879695949293879482938d5251906a636f6e736f6c652e6c6f675afa50019091926101ea565b634e487b7160e01b5f90815260418b52fd5b8260418c634e487b7160e01b5f52525ffd5b6103cb9061048b565b6103d6578b8e6102d9565b8b80fd5b8b513d8f823e3d90fd5b875162461bcd60e51b8152808801849052600f60248201526e496e76616c6964206164647265737360881b6044820152606490fd5b6101ef565b603284634e487b7160e01b5f525260245ffd5b604183634e487b7160e01b5f525260245ffd5b61044f91935061048b565b5f91846100ff565b82513d5f823e3d90fd5b5f80fd5b34610461575f36600319011261046157600c5460181c6001600160a01b03168152602090f35b67ffffffffffffffff811161049f57604052565b634e487b7160e01b5f52604160045260245ffd5b80518210156104c75760209160051b010190565b634e487b7160e01b5f52603260045260245ffdfea2646970667358221220b9420476299b4f86a46eceaf3a70025533c8c9536cd73be16faffce4934804ef64736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@\x81\x81R`\x04\x91\x826\x10\x15a\0\x15W_\x80\xFD[_\x92_5`\xE0\x1C\x91\x82c\xA5\"\r\xED\x14a\x04eWP\x81c\xC0@b&\x14a\0\xB1WP\x80c\xD59\x13\x93\x14a\0wWc\xF8\xCC\xBFG\x14a\0NW_\x80\xFD[4a\0sW\x81`\x03\x196\x01\x12a\0sW` \x90`\xFF`\x0CT`\x10\x1C\x16\x90Q\x90\x15\x15\x81R\xF3[P\x80\xFD[P4a\0sW\x81`\x03\x196\x01\x12a\0sW` \x90Q\x7F\x9F-\xF0\xFE\xD2\xC7vH\xDEX`\xA4\xCCP\x8C\xD0\x81\x8C\x85\xB8\xB8\xA1\xABL\xEE\xEF\x8D\x98\x1C\x89V\xA6\x81R\xF3[\x83\x834a\x04aW_6`\x03\x19\x01\x12a\x04aWsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90\x81;\x15a\x04aW\x80Qc\x7F\xB5)\x7F`\xE0\x1B\x81R_\x81\x86\x81\x83\x87Z\xF1\x80\x15a\x04WWa\x04DW[P\x80Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x94\x90`\xA0\x81\x01\x86\x81\x11\x82\x82\x10\x17a\x041W\x83R\x81\x81R` \x95` \x82\x01`\x806\x827\x82Q\x15a\x04\x1EWsNRt\x86YF\x96\xA7`\x7F\xF37\x9E!tf\x89\xA3\xFDm\x90R\x81Q\x90`\x01\x91`\x01\x10\x15a\x04\x1EWs7\xD9\x11\xCB\xD7\xBB\x03R\x1A\x97^\xC2\xDE\x03\xCE\x1D\xD0\x15h\x83\x85\x84\x01R\x82Q`\x02\x10\x15a\x04\x1EWs\x9C/h\xB13(l\xFC\xC8g{\xD3B\xBCrJ\x0F.%F``\x84\x01R\x82Q`\x03\x10\x15a\x04\x1EWs\x18\xF3<\xEFE\x81|B\x8D\x98\xC4\xE1\x88\xA7p\x19\x1F\xDDKy`\x80\x84\x01R`\x0C\x80Tc\x01\0\0\0`\x01`\xB8\x1B\x03\x19\x16v\x9A\x0E\xF136\x81\xB3W\x04r\x82\x14M\xC0m}\xAA\x1Fv\xBA\0\0\0\x17\x81U\x97\x87\x83[a\x02EW[PPPPP\x83\x94P\x82;\x15a\x02@W\x81Qc;un\x9B`\xE1\x1B\x81R\x92\x84\x91\x84\x91\x82\x90\x84\x90Z\xF1\x90\x81\x15a\x027WPa\x02$WP\xF3[a\x02-\x90a\x04\x8BV[a\x024W\x80\xF3[\x80\xFD[Q=\x84\x82>=\x90\xFD[PPP\xFD[\x84Q\x81\x10\x15a\x04\x19W`\x01`\x01`\xA0\x1B\x03\x80a\x02a\x83\x88a\x04\xB3V[Q\x16\x15a\x03\xE4W\x80\x8BT`\x18\x1C\x16\x90\x80a\x02{\x84\x89a\x04\xB3V[Q\x16\x91\x80;\x15a\x03\xD6W\x90\x8B\x91\x82\x8BQ\x80\x92c//\xF1]`\xE0\x1B\x82R\x7F\x9F-\xF0\xFE\xD2\xC7vH\xDEX`\xA4\xCCP\x8C\xD0\x81\x8C\x85\xB8\xB8\xA1\xABL\xEE\xEF\x8D\x98\x1C\x89V\xA6\x8D\x83\x01R`$\x96\x87\x83\x01R\x81`D\x96\x87\x92Z\xF1\x80\x15a\x03\xDAW\x90\x8D\x91a\x03\xC2W[PPa\x02\xE5\x84\x89a\x04\xB3V[Q\x16\x91\x89Q\x92\x8A\x84\x01\x84\x81\x10\x88\x82\x11\x17a\x03\xB0W\x8B\x8E`\xA3\x92\x82R`\x16\x87R\x88\x87\x01\x95uGranted MINTER_ROLE to`P\x1B\x87R`\x1F\x83Q\x97\x88\x93\x8C\x85\x01\x9Ac1\x9A\xF33`\xE0\x1B\x8CR`d\x96\x8A\x87\x01RQ\x91\x82\x87\x87\x01R\x82`\x84\x91\x82\x88\x01^\x82\x86\x01\x01R\x81\x19\x96\x87\x93\x85\x01R\x01\x16\x81\x01\x03\x90\x81\x01\x85R\x01\x16\x82\x01\x90\x82\x82\x10\x87\x83\x11\x17a\x03\x9EWP\x8B\x87\x96\x95\x94\x92\x93\x87\x94\x82\x93\x8DRQ\x90jconsole.logZ\xFAP\x01\x90\x91\x92a\x01\xEAV[cNH{q`\xE0\x1B_\x90\x81R`A\x8BR\xFD[\x82`A\x8CcNH{q`\xE0\x1B_RR_\xFD[a\x03\xCB\x90a\x04\x8BV[a\x03\xD6W\x8B\x8Ea\x02\xD9V[\x8B\x80\xFD[\x8BQ=\x8F\x82>=\x90\xFD[\x87QbF\x1B\xCD`\xE5\x1B\x81R\x80\x88\x01\x84\x90R`\x0F`$\x82\x01RnInvalid address`\x88\x1B`D\x82\x01R`d\x90\xFD[a\x01\xEFV[`2\x84cNH{q`\xE0\x1B_RR`$_\xFD[`A\x83cNH{q`\xE0\x1B_RR`$_\xFD[a\x04O\x91\x93Pa\x04\x8BV[_\x91\x84a\0\xFFV[\x82Q=_\x82>=\x90\xFD[_\x80\xFD[4a\x04aW_6`\x03\x19\x01\x12a\x04aW`\x0CT`\x18\x1C`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x90\xF3[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04\x9FW`@RV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x80Q\x82\x10\x15a\x04\xC7W` \x91`\x05\x1B\x01\x01\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD\xFE\xA2dipfsX\"\x12 \xB9B\x04v)\x9BO\x86\xA4n\xCE\xAF:p\x02U3\xC8\xC9Sl\xD7;\xE1o\xAF\xFC\xE4\x93H\x04\xEFdsolcC\0\x08\x19\x003",
    );
    /**Function with signature `IS_SCRIPT()` and selector `0xf8ccbf47`.
```solidity
function IS_SCRIPT() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTCall {}
    ///Container type for the return parameters of the [`IS_SCRIPT()`](IS_SCRIPTCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTReturn {
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTCall> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTReturn> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for IS_SCRIPTCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = IS_SCRIPTReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "IS_SCRIPT()";
            const SELECTOR: [u8; 4] = [248u8, 204u8, 191u8, 71u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `MINTER_ROLE()` and selector `0xd5391393`.
```solidity
function MINTER_ROLE() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MINTER_ROLECall {}
    ///Container type for the return parameters of the [`MINTER_ROLE()`](MINTER_ROLECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MINTER_ROLEReturn {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<MINTER_ROLECall> for UnderlyingRustTuple<'_> {
                fn from(value: MINTER_ROLECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for MINTER_ROLECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<MINTER_ROLEReturn> for UnderlyingRustTuple<'_> {
                fn from(value: MINTER_ROLEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for MINTER_ROLEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for MINTER_ROLECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = MINTER_ROLEReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "MINTER_ROLE()";
            const SELECTOR: [u8; 4] = [213u8, 57u8, 19u8, 147u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `run()` and selector `0xc0406226`.
```solidity
function run() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runCall {}
    ///Container type for the return parameters of the [`run()`](runCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runCall> for UnderlyingRustTuple<'_> {
                fn from(value: runCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runReturn> for UnderlyingRustTuple<'_> {
                fn from(value: runReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for runCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = runReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "run()";
            const SELECTOR: [u8; 4] = [192u8, 64u8, 98u8, 38u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `synd()` and selector `0xa5220ded`.
```solidity
function synd() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct syndCall {}
    ///Container type for the return parameters of the [`synd()`](syndCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct syndReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<syndCall> for UnderlyingRustTuple<'_> {
                fn from(value: syndCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for syndCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<syndReturn> for UnderlyingRustTuple<'_> {
                fn from(value: syndReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for syndReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for syndCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = syndReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "synd()";
            const SELECTOR: [u8; 4] = [165u8, 34u8, 13u8, 237u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`GrantMinterRole`](self) function calls.
    pub enum GrantMinterRoleCalls {
        IS_SCRIPT(IS_SCRIPTCall),
        MINTER_ROLE(MINTER_ROLECall),
        run(runCall),
        synd(syndCall),
    }
    #[automatically_derived]
    impl GrantMinterRoleCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [165u8, 34u8, 13u8, 237u8],
            [192u8, 64u8, 98u8, 38u8],
            [213u8, 57u8, 19u8, 147u8],
            [248u8, 204u8, 191u8, 71u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for GrantMinterRoleCalls {
        const NAME: &'static str = "GrantMinterRoleCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 4usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::IS_SCRIPT(_) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::MINTER_ROLE(_) => {
                    <MINTER_ROLECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::run(_) => <runCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::synd(_) => <syndCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<GrantMinterRoleCalls>] = &[
                {
                    fn synd(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<GrantMinterRoleCalls> {
                        <syndCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(GrantMinterRoleCalls::synd)
                    }
                    synd
                },
                {
                    fn run(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<GrantMinterRoleCalls> {
                        <runCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(GrantMinterRoleCalls::run)
                    }
                    run
                },
                {
                    fn MINTER_ROLE(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<GrantMinterRoleCalls> {
                        <MINTER_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(GrantMinterRoleCalls::MINTER_ROLE)
                    }
                    MINTER_ROLE
                },
                {
                    fn IS_SCRIPT(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<GrantMinterRoleCalls> {
                        <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(GrantMinterRoleCalls::IS_SCRIPT)
                    }
                    IS_SCRIPT
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::MINTER_ROLE(inner) => {
                    <MINTER_ROLECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::synd(inner) => {
                    <syndCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::MINTER_ROLE(inner) => {
                    <MINTER_ROLECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::synd(inner) => {
                    <syndCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`GrantMinterRole`](self) contract instance.

See the [wrapper's documentation](`GrantMinterRoleInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> GrantMinterRoleInstance<T, P, N> {
        GrantMinterRoleInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<GrantMinterRoleInstance<T, P, N>>,
    > {
        GrantMinterRoleInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        GrantMinterRoleInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`GrantMinterRole`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`GrantMinterRole`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct GrantMinterRoleInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for GrantMinterRoleInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("GrantMinterRoleInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > GrantMinterRoleInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`GrantMinterRole`](self) contract instance.

See the [wrapper's documentation](`GrantMinterRoleInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<GrantMinterRoleInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> GrantMinterRoleInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> GrantMinterRoleInstance<T, P, N> {
            GrantMinterRoleInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > GrantMinterRoleInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`IS_SCRIPT`] function.
        pub fn IS_SCRIPT(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, IS_SCRIPTCall, N> {
            self.call_builder(&IS_SCRIPTCall {})
        }
        ///Creates a new call builder for the [`MINTER_ROLE`] function.
        pub fn MINTER_ROLE(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, MINTER_ROLECall, N> {
            self.call_builder(&MINTER_ROLECall {})
        }
        ///Creates a new call builder for the [`run`] function.
        pub fn run(&self) -> alloy_contract::SolCallBuilder<T, &P, runCall, N> {
            self.call_builder(&runCall {})
        }
        ///Creates a new call builder for the [`synd`] function.
        pub fn synd(&self) -> alloy_contract::SolCallBuilder<T, &P, syndCall, N> {
            self.call_builder(&syndCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > GrantMinterRoleInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
