/**

Generated by the following Solidity interface...
```solidity
interface RequireAllModule {
    error AddressAlreadyExists();
    error AddressDoesNotExist();
    error CalldataCheckFailed(address requireAddress);
    error CheckFailed(address requireAddress, address batchSubmitter);
    error InvalidAddress();
    error OwnableInvalidOwner(address owner);
    error OwnableUnauthorizedAccount(address account);

    event CalldataCheckAdded(address indexed check);
    event CalldataCheckRemoved(address indexed check);
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event ProposerCheckAdded(address indexed check);
    event ProposerCheckRemoved(address indexed check);

    constructor(address admin);

    function addCalldataCheck(address _address, bool addToHead) external;
    function addProposerCheck(address _address, bool addToHead) external;
    function getAllCalldataChecks() external view returns (address[] memory);
    function getAllProposerChecks() external view returns (address[] memory);
    function isAllowed(address proposer) external view returns (bool);
    function isCalldataAllowed(bytes memory data) external view returns (bool);
    function owner() external view returns (address);
    function removeCalldataCheck(address _address) external;
    function removeProposerCheck(address _address) external;
    function renounceOwnership() external;
    function transferOwnership(address newOwner) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "admin",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "addCalldataCheck",
    "inputs": [
      {
        "name": "_address",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "addToHead",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "addProposerCheck",
    "inputs": [
      {
        "name": "_address",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "addToHead",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "getAllCalldataChecks",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getAllProposerChecks",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isAllowed",
    "inputs": [
      {
        "name": "proposer",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isCalldataAllowed",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "removeCalldataCheck",
    "inputs": [
      {
        "name": "_address",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "removeProposerCheck",
    "inputs": [
      {
        "name": "_address",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "renounceOwnership",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "transferOwnership",
    "inputs": [
      {
        "name": "newOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "CalldataCheckAdded",
    "inputs": [
      {
        "name": "check",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "CalldataCheckRemoved",
    "inputs": [
      {
        "name": "check",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "OwnershipTransferred",
    "inputs": [
      {
        "name": "previousOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "ProposerCheckAdded",
    "inputs": [
      {
        "name": "check",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "ProposerCheckRemoved",
    "inputs": [
      {
        "name": "check",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AddressAlreadyExists",
    "inputs": []
  },
  {
    "type": "error",
    "name": "AddressDoesNotExist",
    "inputs": []
  },
  {
    "type": "error",
    "name": "CalldataCheckFailed",
    "inputs": [
      {
        "name": "requireAddress",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "CheckFailed",
    "inputs": [
      {
        "name": "requireAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "batchSubmitter",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "InvalidAddress",
    "inputs": []
  },
  {
    "type": "error",
    "name": "OwnableInvalidOwner",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "OwnableUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ]
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod RequireAllModule {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60806040523461002f576100196100146100f4565b610115565b610021610034565b6119e56102d682396119e590f35b61003a565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906100669061003e565b810190811060018060401b0382111761007e57604052565b610048565b9061009661008f610034565b928361005c565b565b5f80fd5b60018060a01b031690565b6100b09061009c565b90565b6100bc816100a7565b036100c357565b5f80fd5b905051906100d4826100b3565b565b906020828203126100ef576100ec915f016100c7565b90565b610098565b610112611cbb8038038061010781610083565b9283398101906100d6565b90565b61011e90610170565b565b90565b90565b61013a61013561013f92610120565b610123565b61009c565b90565b61014b90610126565b90565b610157906100a7565b9052565b919061016e905f6020850194019061014e565b565b8061018b6101856101805f610142565b6100a7565b916100a7565b1461019b5761019990610276565b565b6101c56101a75f610142565b6101af610034565b918291631e4fbdf760e01b83526004830161015b565b0390fd5b5f1c90565b60018060a01b031690565b6101e56101ea916101c9565b6101ce565b90565b6101f790546101d9565b90565b5f1b90565b9061021060018060a01b03916101fa565b9181191691161790565b61022e6102296102339261009c565b610123565b61009c565b90565b61023f9061021a565b90565b61024b90610236565b90565b90565b9061026661026161026d92610242565b61024e565b82546101ff565b9055565b5f0190565b61027f5f6101ed565b610289825f610251565b906102bd6102b77f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610242565b91610242565b916102c6610034565b806102d081610271565b0390a356fe60806040526004361015610013575b610547565b61001d5f356100cc565b806304a8cc50146100c75780631ba39a12146100c25780633dfb5ee7146100bd57806342fd0756146100b857806370405b0b146100b3578063715018a6146100ae5780638da5cb5b146100a957806398a7e5c2146100a4578063a7f736f21461009f578063babcc5391461009a5763f2fde38b0361000e57610514565b6104df565b6104ab565b610477565b6103f2565b61039d565b610368565b610335565b6102ff565b610222565b610141565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b60018060a01b031690565b6100f8906100e4565b90565b610104816100ef565b0361010b57565b5f80fd5b9050359061011c826100fb565b565b9060208282031261013757610134915f0161010f565b90565b6100dc565b5f0190565b3461016f5761015961015436600461011e565b610746565b6101616100d2565b8061016b8161013c565b0390f35b6100d8565b5f91031261017e57565b6100dc565b5190565b60209181520190565b60200190565b61019f906100ef565b9052565b906101b081602093610196565b0190565b60200190565b906101d76101d16101ca84610183565b8093610187565b92610190565b905f5b8181106101e75750505090565b9091926102006101fa60019286516101a3565b946101b4565b91019190916101da565b61021f9160208201915f8184039101526101ba565b90565b3461025257610232366004610174565b61024e61023d6108a3565b6102456100d2565b9182918261020a565b0390f35b6100d8565b5f80fd5b5f80fd5b5f80fd5b909182601f8301121561029d5781359167ffffffffffffffff831161029857602001926001830284011161029357565b61025f565b61025b565b610257565b906020828203126102d3575f82013567ffffffffffffffff81116102ce576102ca9201610263565b9091565b6100e0565b6100dc565b151590565b6102e6906102d8565b9052565b91906102fd905f602085019401906102dd565b565b346103305761032c61031b6103153660046102a2565b90610a3b565b6103236100d2565b918291826102ea565b0390f35b6100d8565b346103635761034d61034836600461011e565b610c76565b6103556100d2565b8061035f8161013c565b0390f35b6100d8565b3461039857610378366004610174565b610394610383610c81565b61038b6100d2565b9182918261020a565b0390f35b6100d8565b346103cb576103ad366004610174565b6103b5610d82565b6103bd6100d2565b806103c78161013c565b0390f35b6100d8565b6103d9906100ef565b9052565b91906103f0905f602085019401906103d0565b565b3461042257610402366004610174565b61041e61040d610dc1565b6104156100d2565b918291826103dd565b0390f35b6100d8565b610430816102d8565b0361043757565b5f80fd5b9050359061044882610427565b565b9190604083820312610472578061046661046f925f860161010f565b9360200161043b565b90565b6100dc565b346104a65761049061048a36600461044a565b90610f75565b6104986100d2565b806104a28161013c565b0390f35b6100d8565b346104da576104c46104be36600461044a565b9061109e565b6104cc6100d2565b806104d68161013c565b0390f35b6100d8565b3461050f5761050b6104fa6104f536600461011e565b6110f1565b6105026100d2565b918291826102ea565b0390f35b6100d8565b346105425761052c61052736600461011e565b611283565b6105346100d2565b8061053e8161013c565b0390f35b6100d8565b5f80fd5b61055c9061055761128e565b61064e565b565b90565b90565b61057861057361057d9261055e565b610561565b6100e4565b90565b61058990610564565b90565b90565b60209181520190565b5f7f41646472657373206e6f742072656d6f76656400000000000000000000000000910152565b6105cc601360209261058f565b6105d581610598565b0190565b6105ee9060208101905f8183039101526105bf565b90565b156105f857565b6106006100d2565b62461bcd60e51b815280610616600482016105d9565b0390fd5b61062e610629610633926100e4565b610561565b6100e4565b90565b61063f9061061a565b90565b61064b90610636565b90565b8061066961066361065e5f610580565b6100ef565b916100ef565b146107235761068b6106856003610680849161058c565b611330565b156102d8565b610700576106be6106a660036106a1849161058c565b611559565b6106b86106b2846100ef565b916100ef565b146105f1565b6106e87fc83631d6961fb08d5ad589762c421f8256cb4db3acce1858effbf581a1d4f85091610642565b906106f16100d2565b806106fb8161013c565b0390a2565b6107086100d2565b633d0f293d60e01b81528061071f6004820161013c565b0390fd5b61072b6100d2565b63e6c4247b60e01b8152806107426004820161013c565b0390fd5b61074f9061054b565b565b606090565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061077e90610756565b810190811067ffffffffffffffff82111761079857604052565b610760565b906107b06107a96100d2565b9283610774565b565b67ffffffffffffffff81116107ca5760208091020190565b610760565b906107e16107dc836107b2565b61079d565b918252565b369037565b906108106107f8836107cf565b9260208061080686936107b2565b92019103906107e6565b565b90565b61082961082461082e9261055e565b610561565b610812565b90565b634e487b7160e01b5f52601160045260245ffd5b61084e90610812565b5f19811461085c5760010190565b610831565b634e487b7160e01b5f52603260045260245ffd5b9061087f82610183565b811015610890576020809102010190565b610861565b9061089f906100ef565b9052565b6108ab610751565b506108be6108b9600161058c565b611691565b6108c7816107eb565b6108d96108d4600161058c565b6116a8565b6108e25f610815565b905b816108f76108f186610812565b91610812565b108061095c575b156109535761092f816109206109379361091b8791879092610875565b610895565b61092a600161058c565b6116e2565b9190156102d8565b61094b576109459091610845565b906108e4565b505090505b90565b50509050610950565b508061097861097261096d5f610580565b6100ef565b916100ef565b14156108fe565b5f90565b61098c9061061a565b90565b61099890610983565b90565b6109a490610636565b90565b60e01b90565b905051906109ba82610427565b565b906020828203126109d5576109d2915f016109ad565b90565b6100dc565b60209181520190565b90825f939282370152565b9190610a0881610a0181610a0d956109da565b80956109e3565b610756565b0190565b9091610a289260208301925f8185039101526109ee565b90565b610a336100d2565b3d5f823e3d90fd5b919091610a4661097f565b50610a59610a54600361058c565b6116a8565b5b80610a75610a6f610a6a5f610580565b6100ef565b916100ef565b14610b6257610a8b610a868261098f565b61099b565b6020633dfb5ee7918490610ab18894610abc610aa56100d2565b968795869485946109a7565b845260048401610a11565b03915afa8015610b5d57610ad8915f91610b2f575b50156102d8565b610b0957610af2610afa91610aed600361058c565b6116e2565b9190156102d8565b15610a5a57505090505b600190565b610b2b90610b156100d2565b9182916349b8dff760e01b8352600483016103dd565b0390fd5b610b50915060203d8111610b56575b610b488183610774565b8101906109bc565b5f610ad1565b503d610b3e565b610a2b565b50509050610b04565b610b7c90610b7761128e565b610b7e565b565b80610b99610b93610b8e5f610580565b6100ef565b916100ef565b14610c5357610bbb610bb56001610bb0849161058c565b611330565b156102d8565b610c3057610bee610bd66001610bd1849161058c565b611559565b610be8610be2846100ef565b916100ef565b146105f1565b610c187fd4c6584199318abf59e9599906d3eec550509b6d1d841bdab9913cd56b70cd3791610642565b90610c216100d2565b80610c2b8161013c565b0390a2565b610c386100d2565b633d0f293d60e01b815280610c4f6004820161013c565b0390fd5b610c5b6100d2565b63e6c4247b60e01b815280610c726004820161013c565b0390fd5b610c7f90610b6b565b565b610c89610751565b50610c9c610c97600361058c565b611691565b610ca5816107eb565b610cb7610cb2600361058c565b6116a8565b610cc05f610815565b905b81610cd5610ccf86610812565b91610812565b1080610d3a575b15610d3157610d0d81610cfe610d1593610cf98791879092610875565b610895565b610d08600361058c565b6116e2565b9190156102d8565b610d2957610d239091610845565b90610cc2565b505090505b90565b50509050610d2e565b5080610d56610d50610d4b5f610580565b6100ef565b916100ef565b1415610cdc565b610d6561128e565b610d6d610d6f565b565b610d80610d7b5f610580565b611749565b565b610d8a610d5d565b565b5f90565b5f1c90565b60018060a01b031690565b610dac610db191610d90565b610d95565b90565b610dbe9054610da0565b90565b610dc9610d8c565b50610dd35f610db4565b90565b90610de891610de361128e565b610e6c565b565b5f7f41646472657373206e6f74206164646564000000000000000000000000000000910152565b610e1e601160209261058f565b610e2781610dea565b0190565b610e409060208101905f818303910152610e11565b90565b15610e4a57565b610e526100d2565b62461bcd60e51b815280610e6860048201610e2b565b0390fd5b9081610e88610e82610e7d5f610580565b6100ef565b916100ef565b14610f5257610ea16001610e9c849161058c565b611330565b610f2f57610ead61097f565b505f14610f1357610ed1610ecb6001610ec6849161058c565b6117c8565b5b610e43565b610efb7f7afa5278b11376deff82d6d0be865db73d637702728b7d2659fee00e3d11b90691610642565b90610f046100d2565b80610f0e8161013c565b0390a2565b610ed1610f2a6001610f25849161058c565b6117a8565b610ecc565b610f376100d2565b63516c350f60e11b815280610f4e6004820161013c565b0390fd5b610f5a6100d2565b63e6c4247b60e01b815280610f716004820161013c565b0390fd5b90610f7f91610dd6565b565b90610f9391610f8e61128e565b610f95565b565b9081610fb1610fab610fa65f610580565b6100ef565b916100ef565b1461107b57610fca6003610fc5849161058c565b611330565b61105857610fd661097f565b505f1461103c57610ffa610ff46003610fef849161058c565b6117c8565b5b610e43565b6110247fe40fa38a25f48b660575fc03b5a6da8797474fa8c0c18dcec2edc2ed83ce5cd191610642565b9061102d6100d2565b806110378161013c565b0390a2565b610ffa611053600361104e849161058c565b6117a8565b610ff5565b6110606100d2565b63516c350f60e11b8152806110776004820161013c565b0390fd5b6110836100d2565b63e6c4247b60e01b81528061109a6004820161013c565b0390fd5b906110a891610f81565b565b6110b39061061a565b90565b6110bf906110aa565b90565b6110cb90610636565b90565b9160206110ef9294936110e860408201965f8301906103d0565b01906103d0565b565b6110f961097f565b5061110c611107600161058c565b6116a8565b5b8061112861112261111d5f610580565b6100ef565b916100ef565b146112105761116d602061114361113e846110b6565b6110c2565b63babcc5399061116286926111566100d2565b958694859384936109a7565b8352600483016103dd565b03915afa801561120b57611189915f916111dd575b50156102d8565b6111b8576111a36111ab9161119e600161058c565b6116e2565b9190156102d8565b1561110d5750505b600190565b6111d96111c36100d2565b928392630b2d152f60e01b8452600484016110ce565b0390fd5b6111fe915060203d8111611204575b6111f68183610774565b8101906109bc565b5f611182565b503d6111ec565b610a2b565b50506111b3565b6112289061122361128e565b61122a565b565b8061124561123f61123a5f610580565b6100ef565b916100ef565b146112555761125390611749565b565b61127f6112615f610580565b6112696100d2565b918291631e4fbdf760e01b8352600483016103dd565b0390fd5b61128c90611217565b565b611296610dc1565b6112af6112a96112a46117e8565b6100ef565b916100ef565b036112b657565b6112df6112c16117e8565b6112c96100d2565b91829163118cdaa760e01b8352600483016103dd565b0390fd5b906112ed90610642565b5f5260205260405f2090565b5f90565b611306906102d8565b90565b90611313906112fd565b5f5260205260405f2090565b6113285f610580565b90565b600190565b61133861097f565b5061136061135b61134d6001840185906112e3565b6113556112f9565b90611309565b610db4565b61137961137361136e61131f565b6100ef565b916100ef565b14806113dd575b5f146113d6576113c06113ba6113b56113a760016113c695016113a161131f565b906112e3565b6113af61132b565b90611309565b610db4565b926100ef565b916100ef565b145f146113d257600190565b5f90565b5050600190565b506114056114006113f26001840185906112e3565b6113fa61132b565b90611309565b610db4565b61141e61141861141361131f565b6100ef565b916100ef565b14611380565b61142d5f610580565b90565b1b90565b9190600861145491029161144e60018060a01b0384611430565b92611430565b9181191691161790565b90565b919061147761147261147f93610642565b61145e565b908354611434565b9055565b6114959161148f610d8c565b91611461565b565b90565b6114ae6114a96114b392611497565b610561565b610812565b90565b90565b6114c56114ca91610d90565b6114b6565b90565b6114d790546114b9565b90565b6114e96114ef91939293610812565b92610812565b82039182116114fa57565b610831565b5f1b90565b906115105f19916114ff565b9181191691161790565b61152e61152961153392610812565b610561565b610812565b90565b90565b9061154e6115496115559261151a565b611536565b8254611504565b9055565b611561610d8c565b508161157c611576611571611424565b6100ef565b916100ef565b148015611673575b61166557806115ed611662926115b76115b26115a46001860188906112e3565b6115ac6112f9565b90611309565b610db4565b6115de6115d96115cb6001870189906112e3565b6115d361132b565b90611309565b610db4565b906115e761132b565b926117f5565b6116155f6116106116026001850187906112e3565b61160a6112f9565b90611309565b611483565b61163d5f61163861162a6001850187906112e3565b61163261132b565b90611309565b611483565b61165c5f61164b600161149a565b920191611657836114cd565b6114da565b90611539565b90565b50506116705f610580565b90565b50611688611682828490611330565b156102d8565b611584565b5f90565b5f6116a59161169e61168d565b50016114cd565b90565b6116da6116cc60016116df936116bc610d8c565b50016116c661131f565b906112e3565b6116d461132b565b90611309565b610db4565b90565b90611708916116ef61097f565b506116f8610d8c565b509061170261132b565b91611840565b91909190565b9061171f60018060a01b03916114ff565b9181191691161790565b9061173e61173961174592610642565b61145e565b825461170e565b9055565b6117525f610db4565b61175c825f611729565b9061179061178a7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610642565b91610642565b916117996100d2565b806117a38161013c565b0390a3565b906117c5916117b561097f565b50906117bf6112f9565b916118bc565b90565b906117e5916117d561097f565b50906117df61132b565b916118bc565b90565b6117f0610d8c565b503390565b919261183461183992600161183e9661182d83611828611818858b0185906112e3565b61182289156102d8565b90611309565b611729565b95016112e3565b611309565b611729565b565b9161184961097f565b50611852610d8c565b50611867611861848490611330565b156102d8565b5f1461187e575050505f9061187b5f610580565b90565b61189161189692600161189b95016112e3565b611309565b610db4565b90816118b66118b06118ab61131f565b6100ef565b916100ef565b14159190565b916118db926118c961097f565b50916118d361131f565b909192611903565b90565b6118ed6118f391939293610812565b92610812565b82018092116118fe57565b610831565b9161190c61097f565b5061192161191b848390611330565b156102d8565b8061199e575b61193357505050505f90565b611999936119749261196a61195e6119596119526001890185906112e3565b8590611309565b610db4565b918690859085926117f5565b84929091926117f5565b6119935f611982600161149a565b92019161198e836114cd565b6118de565b90611539565b600190565b506119aa838390611330565b61192756fea2646970667358221220b5b78b923d2dcec6256399d18853401956c9f804370e0c6166f7279324a163f364736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4a\0/Wa\0\x19a\0\x14a\0\xF4V[a\x01\x15V[a\0!a\x004V[a\x19\xE5a\x02\xD6\x829a\x19\xE5\x90\xF3[a\0:V[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0f\x90a\0>V[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0~W`@RV[a\0HV[\x90a\0\x96a\0\x8Fa\x004V[\x92\x83a\0\\V[V[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xB0\x90a\0\x9CV[\x90V[a\0\xBC\x81a\0\xA7V[\x03a\0\xC3WV[_\x80\xFD[\x90PQ\x90a\0\xD4\x82a\0\xB3V[V[\x90` \x82\x82\x03\x12a\0\xEFWa\0\xEC\x91_\x01a\0\xC7V[\x90V[a\0\x98V[a\x01\x12a\x1C\xBB\x808\x03\x80a\x01\x07\x81a\0\x83V[\x92\x839\x81\x01\x90a\0\xD6V[\x90V[a\x01\x1E\x90a\x01pV[V[\x90V[\x90V[a\x01:a\x015a\x01?\x92a\x01 V[a\x01#V[a\0\x9CV[\x90V[a\x01K\x90a\x01&V[\x90V[a\x01W\x90a\0\xA7V[\x90RV[\x91\x90a\x01n\x90_` \x85\x01\x94\x01\x90a\x01NV[V[\x80a\x01\x8Ba\x01\x85a\x01\x80_a\x01BV[a\0\xA7V[\x91a\0\xA7V[\x14a\x01\x9BWa\x01\x99\x90a\x02vV[V[a\x01\xC5a\x01\xA7_a\x01BV[a\x01\xAFa\x004V[\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x01[V[\x03\x90\xFD[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01\xE5a\x01\xEA\x91a\x01\xC9V[a\x01\xCEV[\x90V[a\x01\xF7\x90Ta\x01\xD9V[\x90V[_\x1B\x90V[\x90a\x02\x10`\x01\x80`\xA0\x1B\x03\x91a\x01\xFAV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x02.a\x02)a\x023\x92a\0\x9CV[a\x01#V[a\0\x9CV[\x90V[a\x02?\x90a\x02\x1AV[\x90V[a\x02K\x90a\x026V[\x90V[\x90V[\x90a\x02fa\x02aa\x02m\x92a\x02BV[a\x02NV[\x82Ta\x01\xFFV[\x90UV[_\x01\x90V[a\x02\x7F_a\x01\xEDV[a\x02\x89\x82_a\x02QV[\x90a\x02\xBDa\x02\xB7\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x02BV[\x91a\x02BV[\x91a\x02\xC6a\x004V[\x80a\x02\xD0\x81a\x02qV[\x03\x90\xA3V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x05GV[a\0\x1D_5a\0\xCCV[\x80c\x04\xA8\xCCP\x14a\0\xC7W\x80c\x1B\xA3\x9A\x12\x14a\0\xC2W\x80c=\xFB^\xE7\x14a\0\xBDW\x80cB\xFD\x07V\x14a\0\xB8W\x80cp@[\x0B\x14a\0\xB3W\x80cqP\x18\xA6\x14a\0\xAEW\x80c\x8D\xA5\xCB[\x14a\0\xA9W\x80c\x98\xA7\xE5\xC2\x14a\0\xA4W\x80c\xA7\xF76\xF2\x14a\0\x9FW\x80c\xBA\xBC\xC59\x14a\0\x9AWc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\x05\x14V[a\x04\xDFV[a\x04\xABV[a\x04wV[a\x03\xF2V[a\x03\x9DV[a\x03hV[a\x035V[a\x02\xFFV[a\x02\"V[a\x01AV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xF8\x90a\0\xE4V[\x90V[a\x01\x04\x81a\0\xEFV[\x03a\x01\x0BWV[_\x80\xFD[\x90P5\x90a\x01\x1C\x82a\0\xFBV[V[\x90` \x82\x82\x03\x12a\x017Wa\x014\x91_\x01a\x01\x0FV[\x90V[a\0\xDCV[_\x01\x90V[4a\x01oWa\x01Ya\x01T6`\x04a\x01\x1EV[a\x07FV[a\x01aa\0\xD2V[\x80a\x01k\x81a\x01<V[\x03\x90\xF3[a\0\xD8V[_\x91\x03\x12a\x01~WV[a\0\xDCV[Q\x90V[` \x91\x81R\x01\x90V[` \x01\x90V[a\x01\x9F\x90a\0\xEFV[\x90RV[\x90a\x01\xB0\x81` \x93a\x01\x96V[\x01\x90V[` \x01\x90V[\x90a\x01\xD7a\x01\xD1a\x01\xCA\x84a\x01\x83V[\x80\x93a\x01\x87V[\x92a\x01\x90V[\x90_[\x81\x81\x10a\x01\xE7WPPP\x90V[\x90\x91\x92a\x02\0a\x01\xFA`\x01\x92\x86Qa\x01\xA3V[\x94a\x01\xB4V[\x91\x01\x91\x90\x91a\x01\xDAV[a\x02\x1F\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x01\xBAV[\x90V[4a\x02RWa\x0226`\x04a\x01tV[a\x02Na\x02=a\x08\xA3V[a\x02Ea\0\xD2V[\x91\x82\x91\x82a\x02\nV[\x03\x90\xF3[a\0\xD8V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x02\x9DW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x02\x98W` \x01\x92`\x01\x83\x02\x84\x01\x11a\x02\x93WV[a\x02_V[a\x02[V[a\x02WV[\x90` \x82\x82\x03\x12a\x02\xD3W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\xCEWa\x02\xCA\x92\x01a\x02cV[\x90\x91V[a\0\xE0V[a\0\xDCV[\x15\x15\x90V[a\x02\xE6\x90a\x02\xD8V[\x90RV[\x91\x90a\x02\xFD\x90_` \x85\x01\x94\x01\x90a\x02\xDDV[V[4a\x030Wa\x03,a\x03\x1Ba\x03\x156`\x04a\x02\xA2V[\x90a\n;V[a\x03#a\0\xD2V[\x91\x82\x91\x82a\x02\xEAV[\x03\x90\xF3[a\0\xD8V[4a\x03cWa\x03Ma\x03H6`\x04a\x01\x1EV[a\x0CvV[a\x03Ua\0\xD2V[\x80a\x03_\x81a\x01<V[\x03\x90\xF3[a\0\xD8V[4a\x03\x98Wa\x03x6`\x04a\x01tV[a\x03\x94a\x03\x83a\x0C\x81V[a\x03\x8Ba\0\xD2V[\x91\x82\x91\x82a\x02\nV[\x03\x90\xF3[a\0\xD8V[4a\x03\xCBWa\x03\xAD6`\x04a\x01tV[a\x03\xB5a\r\x82V[a\x03\xBDa\0\xD2V[\x80a\x03\xC7\x81a\x01<V[\x03\x90\xF3[a\0\xD8V[a\x03\xD9\x90a\0\xEFV[\x90RV[\x91\x90a\x03\xF0\x90_` \x85\x01\x94\x01\x90a\x03\xD0V[V[4a\x04\"Wa\x04\x026`\x04a\x01tV[a\x04\x1Ea\x04\ra\r\xC1V[a\x04\x15a\0\xD2V[\x91\x82\x91\x82a\x03\xDDV[\x03\x90\xF3[a\0\xD8V[a\x040\x81a\x02\xD8V[\x03a\x047WV[_\x80\xFD[\x90P5\x90a\x04H\x82a\x04'V[V[\x91\x90`@\x83\x82\x03\x12a\x04rW\x80a\x04fa\x04o\x92_\x86\x01a\x01\x0FV[\x93` \x01a\x04;V[\x90V[a\0\xDCV[4a\x04\xA6Wa\x04\x90a\x04\x8A6`\x04a\x04JV[\x90a\x0FuV[a\x04\x98a\0\xD2V[\x80a\x04\xA2\x81a\x01<V[\x03\x90\xF3[a\0\xD8V[4a\x04\xDAWa\x04\xC4a\x04\xBE6`\x04a\x04JV[\x90a\x10\x9EV[a\x04\xCCa\0\xD2V[\x80a\x04\xD6\x81a\x01<V[\x03\x90\xF3[a\0\xD8V[4a\x05\x0FWa\x05\x0Ba\x04\xFAa\x04\xF56`\x04a\x01\x1EV[a\x10\xF1V[a\x05\x02a\0\xD2V[\x91\x82\x91\x82a\x02\xEAV[\x03\x90\xF3[a\0\xD8V[4a\x05BWa\x05,a\x05'6`\x04a\x01\x1EV[a\x12\x83V[a\x054a\0\xD2V[\x80a\x05>\x81a\x01<V[\x03\x90\xF3[a\0\xD8V[_\x80\xFD[a\x05\\\x90a\x05Wa\x12\x8EV[a\x06NV[V[\x90V[\x90V[a\x05xa\x05sa\x05}\x92a\x05^V[a\x05aV[a\0\xE4V[\x90V[a\x05\x89\x90a\x05dV[\x90V[\x90V[` \x91\x81R\x01\x90V[_\x7FAddress not removed\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x05\xCC`\x13` \x92a\x05\x8FV[a\x05\xD5\x81a\x05\x98V[\x01\x90V[a\x05\xEE\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x05\xBFV[\x90V[\x15a\x05\xF8WV[a\x06\0a\0\xD2V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x06\x16`\x04\x82\x01a\x05\xD9V[\x03\x90\xFD[a\x06.a\x06)a\x063\x92a\0\xE4V[a\x05aV[a\0\xE4V[\x90V[a\x06?\x90a\x06\x1AV[\x90V[a\x06K\x90a\x066V[\x90V[\x80a\x06ia\x06ca\x06^_a\x05\x80V[a\0\xEFV[\x91a\0\xEFV[\x14a\x07#Wa\x06\x8Ba\x06\x85`\x03a\x06\x80\x84\x91a\x05\x8CV[a\x130V[\x15a\x02\xD8V[a\x07\0Wa\x06\xBEa\x06\xA6`\x03a\x06\xA1\x84\x91a\x05\x8CV[a\x15YV[a\x06\xB8a\x06\xB2\x84a\0\xEFV[\x91a\0\xEFV[\x14a\x05\xF1V[a\x06\xE8\x7F\xC861\xD6\x96\x1F\xB0\x8DZ\xD5\x89v,B\x1F\x82V\xCBM\xB3\xAC\xCE\x18X\xEF\xFB\xF5\x81\xA1\xD4\xF8P\x91a\x06BV[\x90a\x06\xF1a\0\xD2V[\x80a\x06\xFB\x81a\x01<V[\x03\x90\xA2V[a\x07\x08a\0\xD2V[c=\x0F)=`\xE0\x1B\x81R\x80a\x07\x1F`\x04\x82\x01a\x01<V[\x03\x90\xFD[a\x07+a\0\xD2V[c\xE6\xC4${`\xE0\x1B\x81R\x80a\x07B`\x04\x82\x01a\x01<V[\x03\x90\xFD[a\x07O\x90a\x05KV[V[``\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x07~\x90a\x07VV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x07\x98W`@RV[a\x07`V[\x90a\x07\xB0a\x07\xA9a\0\xD2V[\x92\x83a\x07tV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x07\xCAW` \x80\x91\x02\x01\x90V[a\x07`V[\x90a\x07\xE1a\x07\xDC\x83a\x07\xB2V[a\x07\x9DV[\x91\x82RV[6\x907V[\x90a\x08\x10a\x07\xF8\x83a\x07\xCFV[\x92` \x80a\x08\x06\x86\x93a\x07\xB2V[\x92\x01\x91\x03\x90a\x07\xE6V[V[\x90V[a\x08)a\x08$a\x08.\x92a\x05^V[a\x05aV[a\x08\x12V[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x08N\x90a\x08\x12V[_\x19\x81\x14a\x08\\W`\x01\x01\x90V[a\x081V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[\x90a\x08\x7F\x82a\x01\x83V[\x81\x10\x15a\x08\x90W` \x80\x91\x02\x01\x01\x90V[a\x08aV[\x90a\x08\x9F\x90a\0\xEFV[\x90RV[a\x08\xABa\x07QV[Pa\x08\xBEa\x08\xB9`\x01a\x05\x8CV[a\x16\x91V[a\x08\xC7\x81a\x07\xEBV[a\x08\xD9a\x08\xD4`\x01a\x05\x8CV[a\x16\xA8V[a\x08\xE2_a\x08\x15V[\x90[\x81a\x08\xF7a\x08\xF1\x86a\x08\x12V[\x91a\x08\x12V[\x10\x80a\t\\W[\x15a\tSWa\t/\x81a\t a\t7\x93a\t\x1B\x87\x91\x87\x90\x92a\x08uV[a\x08\x95V[a\t*`\x01a\x05\x8CV[a\x16\xE2V[\x91\x90\x15a\x02\xD8V[a\tKWa\tE\x90\x91a\x08EV[\x90a\x08\xE4V[PP\x90P[\x90V[PP\x90Pa\tPV[P\x80a\txa\tra\tm_a\x05\x80V[a\0\xEFV[\x91a\0\xEFV[\x14\x15a\x08\xFEV[_\x90V[a\t\x8C\x90a\x06\x1AV[\x90V[a\t\x98\x90a\t\x83V[\x90V[a\t\xA4\x90a\x066V[\x90V[`\xE0\x1B\x90V[\x90PQ\x90a\t\xBA\x82a\x04'V[V[\x90` \x82\x82\x03\x12a\t\xD5Wa\t\xD2\x91_\x01a\t\xADV[\x90V[a\0\xDCV[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x827\x01RV[\x91\x90a\n\x08\x81a\n\x01\x81a\n\r\x95a\t\xDAV[\x80\x95a\t\xE3V[a\x07VV[\x01\x90V[\x90\x91a\n(\x92` \x83\x01\x92_\x81\x85\x03\x91\x01Ra\t\xEEV[\x90V[a\n3a\0\xD2V[=_\x82>=\x90\xFD[\x91\x90\x91a\nFa\t\x7FV[Pa\nYa\nT`\x03a\x05\x8CV[a\x16\xA8V[[\x80a\nua\noa\nj_a\x05\x80V[a\0\xEFV[\x91a\0\xEFV[\x14a\x0BbWa\n\x8Ba\n\x86\x82a\t\x8FV[a\t\x9BV[` c=\xFB^\xE7\x91\x84\x90a\n\xB1\x88\x94a\n\xBCa\n\xA5a\0\xD2V[\x96\x87\x95\x86\x94\x85\x94a\t\xA7V[\x84R`\x04\x84\x01a\n\x11V[\x03\x91Z\xFA\x80\x15a\x0B]Wa\n\xD8\x91_\x91a\x0B/W[P\x15a\x02\xD8V[a\x0B\tWa\n\xF2a\n\xFA\x91a\n\xED`\x03a\x05\x8CV[a\x16\xE2V[\x91\x90\x15a\x02\xD8V[\x15a\nZWPP\x90P[`\x01\x90V[a\x0B+\x90a\x0B\x15a\0\xD2V[\x91\x82\x91cI\xB8\xDF\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x03\xDDV[\x03\x90\xFD[a\x0BP\x91P` =\x81\x11a\x0BVW[a\x0BH\x81\x83a\x07tV[\x81\x01\x90a\t\xBCV[_a\n\xD1V[P=a\x0B>V[a\n+V[PP\x90Pa\x0B\x04V[a\x0B|\x90a\x0Bwa\x12\x8EV[a\x0B~V[V[\x80a\x0B\x99a\x0B\x93a\x0B\x8E_a\x05\x80V[a\0\xEFV[\x91a\0\xEFV[\x14a\x0CSWa\x0B\xBBa\x0B\xB5`\x01a\x0B\xB0\x84\x91a\x05\x8CV[a\x130V[\x15a\x02\xD8V[a\x0C0Wa\x0B\xEEa\x0B\xD6`\x01a\x0B\xD1\x84\x91a\x05\x8CV[a\x15YV[a\x0B\xE8a\x0B\xE2\x84a\0\xEFV[\x91a\0\xEFV[\x14a\x05\xF1V[a\x0C\x18\x7F\xD4\xC6XA\x991\x8A\xBFY\xE9Y\x99\x06\xD3\xEE\xC5PP\x9Bm\x1D\x84\x1B\xDA\xB9\x91<\xD5kp\xCD7\x91a\x06BV[\x90a\x0C!a\0\xD2V[\x80a\x0C+\x81a\x01<V[\x03\x90\xA2V[a\x0C8a\0\xD2V[c=\x0F)=`\xE0\x1B\x81R\x80a\x0CO`\x04\x82\x01a\x01<V[\x03\x90\xFD[a\x0C[a\0\xD2V[c\xE6\xC4${`\xE0\x1B\x81R\x80a\x0Cr`\x04\x82\x01a\x01<V[\x03\x90\xFD[a\x0C\x7F\x90a\x0BkV[V[a\x0C\x89a\x07QV[Pa\x0C\x9Ca\x0C\x97`\x03a\x05\x8CV[a\x16\x91V[a\x0C\xA5\x81a\x07\xEBV[a\x0C\xB7a\x0C\xB2`\x03a\x05\x8CV[a\x16\xA8V[a\x0C\xC0_a\x08\x15V[\x90[\x81a\x0C\xD5a\x0C\xCF\x86a\x08\x12V[\x91a\x08\x12V[\x10\x80a\r:W[\x15a\r1Wa\r\r\x81a\x0C\xFEa\r\x15\x93a\x0C\xF9\x87\x91\x87\x90\x92a\x08uV[a\x08\x95V[a\r\x08`\x03a\x05\x8CV[a\x16\xE2V[\x91\x90\x15a\x02\xD8V[a\r)Wa\r#\x90\x91a\x08EV[\x90a\x0C\xC2V[PP\x90P[\x90V[PP\x90Pa\r.V[P\x80a\rVa\rPa\rK_a\x05\x80V[a\0\xEFV[\x91a\0\xEFV[\x14\x15a\x0C\xDCV[a\rea\x12\x8EV[a\rma\roV[V[a\r\x80a\r{_a\x05\x80V[a\x17IV[V[a\r\x8Aa\r]V[V[_\x90V[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\r\xACa\r\xB1\x91a\r\x90V[a\r\x95V[\x90V[a\r\xBE\x90Ta\r\xA0V[\x90V[a\r\xC9a\r\x8CV[Pa\r\xD3_a\r\xB4V[\x90V[\x90a\r\xE8\x91a\r\xE3a\x12\x8EV[a\x0ElV[V[_\x7FAddress not added\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x0E\x1E`\x11` \x92a\x05\x8FV[a\x0E'\x81a\r\xEAV[\x01\x90V[a\x0E@\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x0E\x11V[\x90V[\x15a\x0EJWV[a\x0ERa\0\xD2V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x0Eh`\x04\x82\x01a\x0E+V[\x03\x90\xFD[\x90\x81a\x0E\x88a\x0E\x82a\x0E}_a\x05\x80V[a\0\xEFV[\x91a\0\xEFV[\x14a\x0FRWa\x0E\xA1`\x01a\x0E\x9C\x84\x91a\x05\x8CV[a\x130V[a\x0F/Wa\x0E\xADa\t\x7FV[P_\x14a\x0F\x13Wa\x0E\xD1a\x0E\xCB`\x01a\x0E\xC6\x84\x91a\x05\x8CV[a\x17\xC8V[[a\x0ECV[a\x0E\xFB\x7Fz\xFARx\xB1\x13v\xDE\xFF\x82\xD6\xD0\xBE\x86]\xB7=cw\x02r\x8B}&Y\xFE\xE0\x0E=\x11\xB9\x06\x91a\x06BV[\x90a\x0F\x04a\0\xD2V[\x80a\x0F\x0E\x81a\x01<V[\x03\x90\xA2V[a\x0E\xD1a\x0F*`\x01a\x0F%\x84\x91a\x05\x8CV[a\x17\xA8V[a\x0E\xCCV[a\x0F7a\0\xD2V[cQl5\x0F`\xE1\x1B\x81R\x80a\x0FN`\x04\x82\x01a\x01<V[\x03\x90\xFD[a\x0FZa\0\xD2V[c\xE6\xC4${`\xE0\x1B\x81R\x80a\x0Fq`\x04\x82\x01a\x01<V[\x03\x90\xFD[\x90a\x0F\x7F\x91a\r\xD6V[V[\x90a\x0F\x93\x91a\x0F\x8Ea\x12\x8EV[a\x0F\x95V[V[\x90\x81a\x0F\xB1a\x0F\xABa\x0F\xA6_a\x05\x80V[a\0\xEFV[\x91a\0\xEFV[\x14a\x10{Wa\x0F\xCA`\x03a\x0F\xC5\x84\x91a\x05\x8CV[a\x130V[a\x10XWa\x0F\xD6a\t\x7FV[P_\x14a\x10<Wa\x0F\xFAa\x0F\xF4`\x03a\x0F\xEF\x84\x91a\x05\x8CV[a\x17\xC8V[[a\x0ECV[a\x10$\x7F\xE4\x0F\xA3\x8A%\xF4\x8Bf\x05u\xFC\x03\xB5\xA6\xDA\x87\x97GO\xA8\xC0\xC1\x8D\xCE\xC2\xED\xC2\xED\x83\xCE\\\xD1\x91a\x06BV[\x90a\x10-a\0\xD2V[\x80a\x107\x81a\x01<V[\x03\x90\xA2V[a\x0F\xFAa\x10S`\x03a\x10N\x84\x91a\x05\x8CV[a\x17\xA8V[a\x0F\xF5V[a\x10`a\0\xD2V[cQl5\x0F`\xE1\x1B\x81R\x80a\x10w`\x04\x82\x01a\x01<V[\x03\x90\xFD[a\x10\x83a\0\xD2V[c\xE6\xC4${`\xE0\x1B\x81R\x80a\x10\x9A`\x04\x82\x01a\x01<V[\x03\x90\xFD[\x90a\x10\xA8\x91a\x0F\x81V[V[a\x10\xB3\x90a\x06\x1AV[\x90V[a\x10\xBF\x90a\x10\xAAV[\x90V[a\x10\xCB\x90a\x066V[\x90V[\x91` a\x10\xEF\x92\x94\x93a\x10\xE8`@\x82\x01\x96_\x83\x01\x90a\x03\xD0V[\x01\x90a\x03\xD0V[V[a\x10\xF9a\t\x7FV[Pa\x11\x0Ca\x11\x07`\x01a\x05\x8CV[a\x16\xA8V[[\x80a\x11(a\x11\"a\x11\x1D_a\x05\x80V[a\0\xEFV[\x91a\0\xEFV[\x14a\x12\x10Wa\x11m` a\x11Ca\x11>\x84a\x10\xB6V[a\x10\xC2V[c\xBA\xBC\xC59\x90a\x11b\x86\x92a\x11Va\0\xD2V[\x95\x86\x94\x85\x93\x84\x93a\t\xA7V[\x83R`\x04\x83\x01a\x03\xDDV[\x03\x91Z\xFA\x80\x15a\x12\x0BWa\x11\x89\x91_\x91a\x11\xDDW[P\x15a\x02\xD8V[a\x11\xB8Wa\x11\xA3a\x11\xAB\x91a\x11\x9E`\x01a\x05\x8CV[a\x16\xE2V[\x91\x90\x15a\x02\xD8V[\x15a\x11\rWPP[`\x01\x90V[a\x11\xD9a\x11\xC3a\0\xD2V[\x92\x83\x92c\x0B-\x15/`\xE0\x1B\x84R`\x04\x84\x01a\x10\xCEV[\x03\x90\xFD[a\x11\xFE\x91P` =\x81\x11a\x12\x04W[a\x11\xF6\x81\x83a\x07tV[\x81\x01\x90a\t\xBCV[_a\x11\x82V[P=a\x11\xECV[a\n+V[PPa\x11\xB3V[a\x12(\x90a\x12#a\x12\x8EV[a\x12*V[V[\x80a\x12Ea\x12?a\x12:_a\x05\x80V[a\0\xEFV[\x91a\0\xEFV[\x14a\x12UWa\x12S\x90a\x17IV[V[a\x12\x7Fa\x12a_a\x05\x80V[a\x12ia\0\xD2V[\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x03\xDDV[\x03\x90\xFD[a\x12\x8C\x90a\x12\x17V[V[a\x12\x96a\r\xC1V[a\x12\xAFa\x12\xA9a\x12\xA4a\x17\xE8V[a\0\xEFV[\x91a\0\xEFV[\x03a\x12\xB6WV[a\x12\xDFa\x12\xC1a\x17\xE8V[a\x12\xC9a\0\xD2V[\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x03\xDDV[\x03\x90\xFD[\x90a\x12\xED\x90a\x06BV[_R` R`@_ \x90V[_\x90V[a\x13\x06\x90a\x02\xD8V[\x90V[\x90a\x13\x13\x90a\x12\xFDV[_R` R`@_ \x90V[a\x13(_a\x05\x80V[\x90V[`\x01\x90V[a\x138a\t\x7FV[Pa\x13`a\x13[a\x13M`\x01\x84\x01\x85\x90a\x12\xE3V[a\x13Ua\x12\xF9V[\x90a\x13\tV[a\r\xB4V[a\x13ya\x13sa\x13na\x13\x1FV[a\0\xEFV[\x91a\0\xEFV[\x14\x80a\x13\xDDW[_\x14a\x13\xD6Wa\x13\xC0a\x13\xBAa\x13\xB5a\x13\xA7`\x01a\x13\xC6\x95\x01a\x13\xA1a\x13\x1FV[\x90a\x12\xE3V[a\x13\xAFa\x13+V[\x90a\x13\tV[a\r\xB4V[\x92a\0\xEFV[\x91a\0\xEFV[\x14_\x14a\x13\xD2W`\x01\x90V[_\x90V[PP`\x01\x90V[Pa\x14\x05a\x14\0a\x13\xF2`\x01\x84\x01\x85\x90a\x12\xE3V[a\x13\xFAa\x13+V[\x90a\x13\tV[a\r\xB4V[a\x14\x1Ea\x14\x18a\x14\x13a\x13\x1FV[a\0\xEFV[\x91a\0\xEFV[\x14a\x13\x80V[a\x14-_a\x05\x80V[\x90V[\x1B\x90V[\x91\x90`\x08a\x14T\x91\x02\x91a\x14N`\x01\x80`\xA0\x1B\x03\x84a\x140V[\x92a\x140V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x91\x90a\x14wa\x14ra\x14\x7F\x93a\x06BV[a\x14^V[\x90\x83Ta\x144V[\x90UV[a\x14\x95\x91a\x14\x8Fa\r\x8CV[\x91a\x14aV[V[\x90V[a\x14\xAEa\x14\xA9a\x14\xB3\x92a\x14\x97V[a\x05aV[a\x08\x12V[\x90V[\x90V[a\x14\xC5a\x14\xCA\x91a\r\x90V[a\x14\xB6V[\x90V[a\x14\xD7\x90Ta\x14\xB9V[\x90V[a\x14\xE9a\x14\xEF\x91\x93\x92\x93a\x08\x12V[\x92a\x08\x12V[\x82\x03\x91\x82\x11a\x14\xFAWV[a\x081V[_\x1B\x90V[\x90a\x15\x10_\x19\x91a\x14\xFFV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x15.a\x15)a\x153\x92a\x08\x12V[a\x05aV[a\x08\x12V[\x90V[\x90V[\x90a\x15Na\x15Ia\x15U\x92a\x15\x1AV[a\x156V[\x82Ta\x15\x04V[\x90UV[a\x15aa\r\x8CV[P\x81a\x15|a\x15va\x15qa\x14$V[a\0\xEFV[\x91a\0\xEFV[\x14\x80\x15a\x16sW[a\x16eW\x80a\x15\xEDa\x16b\x92a\x15\xB7a\x15\xB2a\x15\xA4`\x01\x86\x01\x88\x90a\x12\xE3V[a\x15\xACa\x12\xF9V[\x90a\x13\tV[a\r\xB4V[a\x15\xDEa\x15\xD9a\x15\xCB`\x01\x87\x01\x89\x90a\x12\xE3V[a\x15\xD3a\x13+V[\x90a\x13\tV[a\r\xB4V[\x90a\x15\xE7a\x13+V[\x92a\x17\xF5V[a\x16\x15_a\x16\x10a\x16\x02`\x01\x85\x01\x87\x90a\x12\xE3V[a\x16\na\x12\xF9V[\x90a\x13\tV[a\x14\x83V[a\x16=_a\x168a\x16*`\x01\x85\x01\x87\x90a\x12\xE3V[a\x162a\x13+V[\x90a\x13\tV[a\x14\x83V[a\x16\\_a\x16K`\x01a\x14\x9AV[\x92\x01\x91a\x16W\x83a\x14\xCDV[a\x14\xDAV[\x90a\x159V[\x90V[PPa\x16p_a\x05\x80V[\x90V[Pa\x16\x88a\x16\x82\x82\x84\x90a\x130V[\x15a\x02\xD8V[a\x15\x84V[_\x90V[_a\x16\xA5\x91a\x16\x9Ea\x16\x8DV[P\x01a\x14\xCDV[\x90V[a\x16\xDAa\x16\xCC`\x01a\x16\xDF\x93a\x16\xBCa\r\x8CV[P\x01a\x16\xC6a\x13\x1FV[\x90a\x12\xE3V[a\x16\xD4a\x13+V[\x90a\x13\tV[a\r\xB4V[\x90V[\x90a\x17\x08\x91a\x16\xEFa\t\x7FV[Pa\x16\xF8a\r\x8CV[P\x90a\x17\x02a\x13+V[\x91a\x18@V[\x91\x90\x91\x90V[\x90a\x17\x1F`\x01\x80`\xA0\x1B\x03\x91a\x14\xFFV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x17>a\x179a\x17E\x92a\x06BV[a\x14^V[\x82Ta\x17\x0EV[\x90UV[a\x17R_a\r\xB4V[a\x17\\\x82_a\x17)V[\x90a\x17\x90a\x17\x8A\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x06BV[\x91a\x06BV[\x91a\x17\x99a\0\xD2V[\x80a\x17\xA3\x81a\x01<V[\x03\x90\xA3V[\x90a\x17\xC5\x91a\x17\xB5a\t\x7FV[P\x90a\x17\xBFa\x12\xF9V[\x91a\x18\xBCV[\x90V[\x90a\x17\xE5\x91a\x17\xD5a\t\x7FV[P\x90a\x17\xDFa\x13+V[\x91a\x18\xBCV[\x90V[a\x17\xF0a\r\x8CV[P3\x90V[\x91\x92a\x184a\x189\x92`\x01a\x18>\x96a\x18-\x83a\x18(a\x18\x18\x85\x8B\x01\x85\x90a\x12\xE3V[a\x18\"\x89\x15a\x02\xD8V[\x90a\x13\tV[a\x17)V[\x95\x01a\x12\xE3V[a\x13\tV[a\x17)V[V[\x91a\x18Ia\t\x7FV[Pa\x18Ra\r\x8CV[Pa\x18ga\x18a\x84\x84\x90a\x130V[\x15a\x02\xD8V[_\x14a\x18~WPPP_\x90a\x18{_a\x05\x80V[\x90V[a\x18\x91a\x18\x96\x92`\x01a\x18\x9B\x95\x01a\x12\xE3V[a\x13\tV[a\r\xB4V[\x90\x81a\x18\xB6a\x18\xB0a\x18\xABa\x13\x1FV[a\0\xEFV[\x91a\0\xEFV[\x14\x15\x91\x90V[\x91a\x18\xDB\x92a\x18\xC9a\t\x7FV[P\x91a\x18\xD3a\x13\x1FV[\x90\x91\x92a\x19\x03V[\x90V[a\x18\xEDa\x18\xF3\x91\x93\x92\x93a\x08\x12V[\x92a\x08\x12V[\x82\x01\x80\x92\x11a\x18\xFEWV[a\x081V[\x91a\x19\x0Ca\t\x7FV[Pa\x19!a\x19\x1B\x84\x83\x90a\x130V[\x15a\x02\xD8V[\x80a\x19\x9EW[a\x193WPPPP_\x90V[a\x19\x99\x93a\x19t\x92a\x19ja\x19^a\x19Ya\x19R`\x01\x89\x01\x85\x90a\x12\xE3V[\x85\x90a\x13\tV[a\r\xB4V[\x91\x86\x90\x85\x90\x85\x92a\x17\xF5V[\x84\x92\x90\x91\x92a\x17\xF5V[a\x19\x93_a\x19\x82`\x01a\x14\x9AV[\x92\x01\x91a\x19\x8E\x83a\x14\xCDV[a\x18\xDEV[\x90a\x159V[`\x01\x90V[Pa\x19\xAA\x83\x83\x90a\x130V[a\x19'V\xFE\xA2dipfsX\"\x12 \xB5\xB7\x8B\x92=-\xCE\xC6%c\x99\xD1\x88S@\x19V\xC9\xF8\x047\x0E\x0Caf\xF7'\x93$\xA1c\xF3dsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b610547565b61001d5f356100cc565b806304a8cc50146100c75780631ba39a12146100c25780633dfb5ee7146100bd57806342fd0756146100b857806370405b0b146100b3578063715018a6146100ae5780638da5cb5b146100a957806398a7e5c2146100a4578063a7f736f21461009f578063babcc5391461009a5763f2fde38b0361000e57610514565b6104df565b6104ab565b610477565b6103f2565b61039d565b610368565b610335565b6102ff565b610222565b610141565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b60018060a01b031690565b6100f8906100e4565b90565b610104816100ef565b0361010b57565b5f80fd5b9050359061011c826100fb565b565b9060208282031261013757610134915f0161010f565b90565b6100dc565b5f0190565b3461016f5761015961015436600461011e565b610746565b6101616100d2565b8061016b8161013c565b0390f35b6100d8565b5f91031261017e57565b6100dc565b5190565b60209181520190565b60200190565b61019f906100ef565b9052565b906101b081602093610196565b0190565b60200190565b906101d76101d16101ca84610183565b8093610187565b92610190565b905f5b8181106101e75750505090565b9091926102006101fa60019286516101a3565b946101b4565b91019190916101da565b61021f9160208201915f8184039101526101ba565b90565b3461025257610232366004610174565b61024e61023d6108a3565b6102456100d2565b9182918261020a565b0390f35b6100d8565b5f80fd5b5f80fd5b5f80fd5b909182601f8301121561029d5781359167ffffffffffffffff831161029857602001926001830284011161029357565b61025f565b61025b565b610257565b906020828203126102d3575f82013567ffffffffffffffff81116102ce576102ca9201610263565b9091565b6100e0565b6100dc565b151590565b6102e6906102d8565b9052565b91906102fd905f602085019401906102dd565b565b346103305761032c61031b6103153660046102a2565b90610a3b565b6103236100d2565b918291826102ea565b0390f35b6100d8565b346103635761034d61034836600461011e565b610c76565b6103556100d2565b8061035f8161013c565b0390f35b6100d8565b3461039857610378366004610174565b610394610383610c81565b61038b6100d2565b9182918261020a565b0390f35b6100d8565b346103cb576103ad366004610174565b6103b5610d82565b6103bd6100d2565b806103c78161013c565b0390f35b6100d8565b6103d9906100ef565b9052565b91906103f0905f602085019401906103d0565b565b3461042257610402366004610174565b61041e61040d610dc1565b6104156100d2565b918291826103dd565b0390f35b6100d8565b610430816102d8565b0361043757565b5f80fd5b9050359061044882610427565b565b9190604083820312610472578061046661046f925f860161010f565b9360200161043b565b90565b6100dc565b346104a65761049061048a36600461044a565b90610f75565b6104986100d2565b806104a28161013c565b0390f35b6100d8565b346104da576104c46104be36600461044a565b9061109e565b6104cc6100d2565b806104d68161013c565b0390f35b6100d8565b3461050f5761050b6104fa6104f536600461011e565b6110f1565b6105026100d2565b918291826102ea565b0390f35b6100d8565b346105425761052c61052736600461011e565b611283565b6105346100d2565b8061053e8161013c565b0390f35b6100d8565b5f80fd5b61055c9061055761128e565b61064e565b565b90565b90565b61057861057361057d9261055e565b610561565b6100e4565b90565b61058990610564565b90565b90565b60209181520190565b5f7f41646472657373206e6f742072656d6f76656400000000000000000000000000910152565b6105cc601360209261058f565b6105d581610598565b0190565b6105ee9060208101905f8183039101526105bf565b90565b156105f857565b6106006100d2565b62461bcd60e51b815280610616600482016105d9565b0390fd5b61062e610629610633926100e4565b610561565b6100e4565b90565b61063f9061061a565b90565b61064b90610636565b90565b8061066961066361065e5f610580565b6100ef565b916100ef565b146107235761068b6106856003610680849161058c565b611330565b156102d8565b610700576106be6106a660036106a1849161058c565b611559565b6106b86106b2846100ef565b916100ef565b146105f1565b6106e87fc83631d6961fb08d5ad589762c421f8256cb4db3acce1858effbf581a1d4f85091610642565b906106f16100d2565b806106fb8161013c565b0390a2565b6107086100d2565b633d0f293d60e01b81528061071f6004820161013c565b0390fd5b61072b6100d2565b63e6c4247b60e01b8152806107426004820161013c565b0390fd5b61074f9061054b565b565b606090565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061077e90610756565b810190811067ffffffffffffffff82111761079857604052565b610760565b906107b06107a96100d2565b9283610774565b565b67ffffffffffffffff81116107ca5760208091020190565b610760565b906107e16107dc836107b2565b61079d565b918252565b369037565b906108106107f8836107cf565b9260208061080686936107b2565b92019103906107e6565b565b90565b61082961082461082e9261055e565b610561565b610812565b90565b634e487b7160e01b5f52601160045260245ffd5b61084e90610812565b5f19811461085c5760010190565b610831565b634e487b7160e01b5f52603260045260245ffd5b9061087f82610183565b811015610890576020809102010190565b610861565b9061089f906100ef565b9052565b6108ab610751565b506108be6108b9600161058c565b611691565b6108c7816107eb565b6108d96108d4600161058c565b6116a8565b6108e25f610815565b905b816108f76108f186610812565b91610812565b108061095c575b156109535761092f816109206109379361091b8791879092610875565b610895565b61092a600161058c565b6116e2565b9190156102d8565b61094b576109459091610845565b906108e4565b505090505b90565b50509050610950565b508061097861097261096d5f610580565b6100ef565b916100ef565b14156108fe565b5f90565b61098c9061061a565b90565b61099890610983565b90565b6109a490610636565b90565b60e01b90565b905051906109ba82610427565b565b906020828203126109d5576109d2915f016109ad565b90565b6100dc565b60209181520190565b90825f939282370152565b9190610a0881610a0181610a0d956109da565b80956109e3565b610756565b0190565b9091610a289260208301925f8185039101526109ee565b90565b610a336100d2565b3d5f823e3d90fd5b919091610a4661097f565b50610a59610a54600361058c565b6116a8565b5b80610a75610a6f610a6a5f610580565b6100ef565b916100ef565b14610b6257610a8b610a868261098f565b61099b565b6020633dfb5ee7918490610ab18894610abc610aa56100d2565b968795869485946109a7565b845260048401610a11565b03915afa8015610b5d57610ad8915f91610b2f575b50156102d8565b610b0957610af2610afa91610aed600361058c565b6116e2565b9190156102d8565b15610a5a57505090505b600190565b610b2b90610b156100d2565b9182916349b8dff760e01b8352600483016103dd565b0390fd5b610b50915060203d8111610b56575b610b488183610774565b8101906109bc565b5f610ad1565b503d610b3e565b610a2b565b50509050610b04565b610b7c90610b7761128e565b610b7e565b565b80610b99610b93610b8e5f610580565b6100ef565b916100ef565b14610c5357610bbb610bb56001610bb0849161058c565b611330565b156102d8565b610c3057610bee610bd66001610bd1849161058c565b611559565b610be8610be2846100ef565b916100ef565b146105f1565b610c187fd4c6584199318abf59e9599906d3eec550509b6d1d841bdab9913cd56b70cd3791610642565b90610c216100d2565b80610c2b8161013c565b0390a2565b610c386100d2565b633d0f293d60e01b815280610c4f6004820161013c565b0390fd5b610c5b6100d2565b63e6c4247b60e01b815280610c726004820161013c565b0390fd5b610c7f90610b6b565b565b610c89610751565b50610c9c610c97600361058c565b611691565b610ca5816107eb565b610cb7610cb2600361058c565b6116a8565b610cc05f610815565b905b81610cd5610ccf86610812565b91610812565b1080610d3a575b15610d3157610d0d81610cfe610d1593610cf98791879092610875565b610895565b610d08600361058c565b6116e2565b9190156102d8565b610d2957610d239091610845565b90610cc2565b505090505b90565b50509050610d2e565b5080610d56610d50610d4b5f610580565b6100ef565b916100ef565b1415610cdc565b610d6561128e565b610d6d610d6f565b565b610d80610d7b5f610580565b611749565b565b610d8a610d5d565b565b5f90565b5f1c90565b60018060a01b031690565b610dac610db191610d90565b610d95565b90565b610dbe9054610da0565b90565b610dc9610d8c565b50610dd35f610db4565b90565b90610de891610de361128e565b610e6c565b565b5f7f41646472657373206e6f74206164646564000000000000000000000000000000910152565b610e1e601160209261058f565b610e2781610dea565b0190565b610e409060208101905f818303910152610e11565b90565b15610e4a57565b610e526100d2565b62461bcd60e51b815280610e6860048201610e2b565b0390fd5b9081610e88610e82610e7d5f610580565b6100ef565b916100ef565b14610f5257610ea16001610e9c849161058c565b611330565b610f2f57610ead61097f565b505f14610f1357610ed1610ecb6001610ec6849161058c565b6117c8565b5b610e43565b610efb7f7afa5278b11376deff82d6d0be865db73d637702728b7d2659fee00e3d11b90691610642565b90610f046100d2565b80610f0e8161013c565b0390a2565b610ed1610f2a6001610f25849161058c565b6117a8565b610ecc565b610f376100d2565b63516c350f60e11b815280610f4e6004820161013c565b0390fd5b610f5a6100d2565b63e6c4247b60e01b815280610f716004820161013c565b0390fd5b90610f7f91610dd6565b565b90610f9391610f8e61128e565b610f95565b565b9081610fb1610fab610fa65f610580565b6100ef565b916100ef565b1461107b57610fca6003610fc5849161058c565b611330565b61105857610fd661097f565b505f1461103c57610ffa610ff46003610fef849161058c565b6117c8565b5b610e43565b6110247fe40fa38a25f48b660575fc03b5a6da8797474fa8c0c18dcec2edc2ed83ce5cd191610642565b9061102d6100d2565b806110378161013c565b0390a2565b610ffa611053600361104e849161058c565b6117a8565b610ff5565b6110606100d2565b63516c350f60e11b8152806110776004820161013c565b0390fd5b6110836100d2565b63e6c4247b60e01b81528061109a6004820161013c565b0390fd5b906110a891610f81565b565b6110b39061061a565b90565b6110bf906110aa565b90565b6110cb90610636565b90565b9160206110ef9294936110e860408201965f8301906103d0565b01906103d0565b565b6110f961097f565b5061110c611107600161058c565b6116a8565b5b8061112861112261111d5f610580565b6100ef565b916100ef565b146112105761116d602061114361113e846110b6565b6110c2565b63babcc5399061116286926111566100d2565b958694859384936109a7565b8352600483016103dd565b03915afa801561120b57611189915f916111dd575b50156102d8565b6111b8576111a36111ab9161119e600161058c565b6116e2565b9190156102d8565b1561110d5750505b600190565b6111d96111c36100d2565b928392630b2d152f60e01b8452600484016110ce565b0390fd5b6111fe915060203d8111611204575b6111f68183610774565b8101906109bc565b5f611182565b503d6111ec565b610a2b565b50506111b3565b6112289061122361128e565b61122a565b565b8061124561123f61123a5f610580565b6100ef565b916100ef565b146112555761125390611749565b565b61127f6112615f610580565b6112696100d2565b918291631e4fbdf760e01b8352600483016103dd565b0390fd5b61128c90611217565b565b611296610dc1565b6112af6112a96112a46117e8565b6100ef565b916100ef565b036112b657565b6112df6112c16117e8565b6112c96100d2565b91829163118cdaa760e01b8352600483016103dd565b0390fd5b906112ed90610642565b5f5260205260405f2090565b5f90565b611306906102d8565b90565b90611313906112fd565b5f5260205260405f2090565b6113285f610580565b90565b600190565b61133861097f565b5061136061135b61134d6001840185906112e3565b6113556112f9565b90611309565b610db4565b61137961137361136e61131f565b6100ef565b916100ef565b14806113dd575b5f146113d6576113c06113ba6113b56113a760016113c695016113a161131f565b906112e3565b6113af61132b565b90611309565b610db4565b926100ef565b916100ef565b145f146113d257600190565b5f90565b5050600190565b506114056114006113f26001840185906112e3565b6113fa61132b565b90611309565b610db4565b61141e61141861141361131f565b6100ef565b916100ef565b14611380565b61142d5f610580565b90565b1b90565b9190600861145491029161144e60018060a01b0384611430565b92611430565b9181191691161790565b90565b919061147761147261147f93610642565b61145e565b908354611434565b9055565b6114959161148f610d8c565b91611461565b565b90565b6114ae6114a96114b392611497565b610561565b610812565b90565b90565b6114c56114ca91610d90565b6114b6565b90565b6114d790546114b9565b90565b6114e96114ef91939293610812565b92610812565b82039182116114fa57565b610831565b5f1b90565b906115105f19916114ff565b9181191691161790565b61152e61152961153392610812565b610561565b610812565b90565b90565b9061154e6115496115559261151a565b611536565b8254611504565b9055565b611561610d8c565b508161157c611576611571611424565b6100ef565b916100ef565b148015611673575b61166557806115ed611662926115b76115b26115a46001860188906112e3565b6115ac6112f9565b90611309565b610db4565b6115de6115d96115cb6001870189906112e3565b6115d361132b565b90611309565b610db4565b906115e761132b565b926117f5565b6116155f6116106116026001850187906112e3565b61160a6112f9565b90611309565b611483565b61163d5f61163861162a6001850187906112e3565b61163261132b565b90611309565b611483565b61165c5f61164b600161149a565b920191611657836114cd565b6114da565b90611539565b90565b50506116705f610580565b90565b50611688611682828490611330565b156102d8565b611584565b5f90565b5f6116a59161169e61168d565b50016114cd565b90565b6116da6116cc60016116df936116bc610d8c565b50016116c661131f565b906112e3565b6116d461132b565b90611309565b610db4565b90565b90611708916116ef61097f565b506116f8610d8c565b509061170261132b565b91611840565b91909190565b9061171f60018060a01b03916114ff565b9181191691161790565b9061173e61173961174592610642565b61145e565b825461170e565b9055565b6117525f610db4565b61175c825f611729565b9061179061178a7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610642565b91610642565b916117996100d2565b806117a38161013c565b0390a3565b906117c5916117b561097f565b50906117bf6112f9565b916118bc565b90565b906117e5916117d561097f565b50906117df61132b565b916118bc565b90565b6117f0610d8c565b503390565b919261183461183992600161183e9661182d83611828611818858b0185906112e3565b61182289156102d8565b90611309565b611729565b95016112e3565b611309565b611729565b565b9161184961097f565b50611852610d8c565b50611867611861848490611330565b156102d8565b5f1461187e575050505f9061187b5f610580565b90565b61189161189692600161189b95016112e3565b611309565b610db4565b90816118b66118b06118ab61131f565b6100ef565b916100ef565b14159190565b916118db926118c961097f565b50916118d361131f565b909192611903565b90565b6118ed6118f391939293610812565b92610812565b82018092116118fe57565b610831565b9161190c61097f565b5061192161191b848390611330565b156102d8565b8061199e575b61193357505050505f90565b611999936119749261196a61195e6119596119526001890185906112e3565b8590611309565b610db4565b918690859085926117f5565b84929091926117f5565b6119935f611982600161149a565b92019161198e836114cd565b6118de565b90611539565b600190565b506119aa838390611330565b61192756fea2646970667358221220b5b78b923d2dcec6256399d18853401956c9f804370e0c6166f7279324a163f364736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x05GV[a\0\x1D_5a\0\xCCV[\x80c\x04\xA8\xCCP\x14a\0\xC7W\x80c\x1B\xA3\x9A\x12\x14a\0\xC2W\x80c=\xFB^\xE7\x14a\0\xBDW\x80cB\xFD\x07V\x14a\0\xB8W\x80cp@[\x0B\x14a\0\xB3W\x80cqP\x18\xA6\x14a\0\xAEW\x80c\x8D\xA5\xCB[\x14a\0\xA9W\x80c\x98\xA7\xE5\xC2\x14a\0\xA4W\x80c\xA7\xF76\xF2\x14a\0\x9FW\x80c\xBA\xBC\xC59\x14a\0\x9AWc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\x05\x14V[a\x04\xDFV[a\x04\xABV[a\x04wV[a\x03\xF2V[a\x03\x9DV[a\x03hV[a\x035V[a\x02\xFFV[a\x02\"V[a\x01AV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xF8\x90a\0\xE4V[\x90V[a\x01\x04\x81a\0\xEFV[\x03a\x01\x0BWV[_\x80\xFD[\x90P5\x90a\x01\x1C\x82a\0\xFBV[V[\x90` \x82\x82\x03\x12a\x017Wa\x014\x91_\x01a\x01\x0FV[\x90V[a\0\xDCV[_\x01\x90V[4a\x01oWa\x01Ya\x01T6`\x04a\x01\x1EV[a\x07FV[a\x01aa\0\xD2V[\x80a\x01k\x81a\x01<V[\x03\x90\xF3[a\0\xD8V[_\x91\x03\x12a\x01~WV[a\0\xDCV[Q\x90V[` \x91\x81R\x01\x90V[` \x01\x90V[a\x01\x9F\x90a\0\xEFV[\x90RV[\x90a\x01\xB0\x81` \x93a\x01\x96V[\x01\x90V[` \x01\x90V[\x90a\x01\xD7a\x01\xD1a\x01\xCA\x84a\x01\x83V[\x80\x93a\x01\x87V[\x92a\x01\x90V[\x90_[\x81\x81\x10a\x01\xE7WPPP\x90V[\x90\x91\x92a\x02\0a\x01\xFA`\x01\x92\x86Qa\x01\xA3V[\x94a\x01\xB4V[\x91\x01\x91\x90\x91a\x01\xDAV[a\x02\x1F\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x01\xBAV[\x90V[4a\x02RWa\x0226`\x04a\x01tV[a\x02Na\x02=a\x08\xA3V[a\x02Ea\0\xD2V[\x91\x82\x91\x82a\x02\nV[\x03\x90\xF3[a\0\xD8V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x02\x9DW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x02\x98W` \x01\x92`\x01\x83\x02\x84\x01\x11a\x02\x93WV[a\x02_V[a\x02[V[a\x02WV[\x90` \x82\x82\x03\x12a\x02\xD3W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\xCEWa\x02\xCA\x92\x01a\x02cV[\x90\x91V[a\0\xE0V[a\0\xDCV[\x15\x15\x90V[a\x02\xE6\x90a\x02\xD8V[\x90RV[\x91\x90a\x02\xFD\x90_` \x85\x01\x94\x01\x90a\x02\xDDV[V[4a\x030Wa\x03,a\x03\x1Ba\x03\x156`\x04a\x02\xA2V[\x90a\n;V[a\x03#a\0\xD2V[\x91\x82\x91\x82a\x02\xEAV[\x03\x90\xF3[a\0\xD8V[4a\x03cWa\x03Ma\x03H6`\x04a\x01\x1EV[a\x0CvV[a\x03Ua\0\xD2V[\x80a\x03_\x81a\x01<V[\x03\x90\xF3[a\0\xD8V[4a\x03\x98Wa\x03x6`\x04a\x01tV[a\x03\x94a\x03\x83a\x0C\x81V[a\x03\x8Ba\0\xD2V[\x91\x82\x91\x82a\x02\nV[\x03\x90\xF3[a\0\xD8V[4a\x03\xCBWa\x03\xAD6`\x04a\x01tV[a\x03\xB5a\r\x82V[a\x03\xBDa\0\xD2V[\x80a\x03\xC7\x81a\x01<V[\x03\x90\xF3[a\0\xD8V[a\x03\xD9\x90a\0\xEFV[\x90RV[\x91\x90a\x03\xF0\x90_` \x85\x01\x94\x01\x90a\x03\xD0V[V[4a\x04\"Wa\x04\x026`\x04a\x01tV[a\x04\x1Ea\x04\ra\r\xC1V[a\x04\x15a\0\xD2V[\x91\x82\x91\x82a\x03\xDDV[\x03\x90\xF3[a\0\xD8V[a\x040\x81a\x02\xD8V[\x03a\x047WV[_\x80\xFD[\x90P5\x90a\x04H\x82a\x04'V[V[\x91\x90`@\x83\x82\x03\x12a\x04rW\x80a\x04fa\x04o\x92_\x86\x01a\x01\x0FV[\x93` \x01a\x04;V[\x90V[a\0\xDCV[4a\x04\xA6Wa\x04\x90a\x04\x8A6`\x04a\x04JV[\x90a\x0FuV[a\x04\x98a\0\xD2V[\x80a\x04\xA2\x81a\x01<V[\x03\x90\xF3[a\0\xD8V[4a\x04\xDAWa\x04\xC4a\x04\xBE6`\x04a\x04JV[\x90a\x10\x9EV[a\x04\xCCa\0\xD2V[\x80a\x04\xD6\x81a\x01<V[\x03\x90\xF3[a\0\xD8V[4a\x05\x0FWa\x05\x0Ba\x04\xFAa\x04\xF56`\x04a\x01\x1EV[a\x10\xF1V[a\x05\x02a\0\xD2V[\x91\x82\x91\x82a\x02\xEAV[\x03\x90\xF3[a\0\xD8V[4a\x05BWa\x05,a\x05'6`\x04a\x01\x1EV[a\x12\x83V[a\x054a\0\xD2V[\x80a\x05>\x81a\x01<V[\x03\x90\xF3[a\0\xD8V[_\x80\xFD[a\x05\\\x90a\x05Wa\x12\x8EV[a\x06NV[V[\x90V[\x90V[a\x05xa\x05sa\x05}\x92a\x05^V[a\x05aV[a\0\xE4V[\x90V[a\x05\x89\x90a\x05dV[\x90V[\x90V[` \x91\x81R\x01\x90V[_\x7FAddress not removed\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x05\xCC`\x13` \x92a\x05\x8FV[a\x05\xD5\x81a\x05\x98V[\x01\x90V[a\x05\xEE\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x05\xBFV[\x90V[\x15a\x05\xF8WV[a\x06\0a\0\xD2V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x06\x16`\x04\x82\x01a\x05\xD9V[\x03\x90\xFD[a\x06.a\x06)a\x063\x92a\0\xE4V[a\x05aV[a\0\xE4V[\x90V[a\x06?\x90a\x06\x1AV[\x90V[a\x06K\x90a\x066V[\x90V[\x80a\x06ia\x06ca\x06^_a\x05\x80V[a\0\xEFV[\x91a\0\xEFV[\x14a\x07#Wa\x06\x8Ba\x06\x85`\x03a\x06\x80\x84\x91a\x05\x8CV[a\x130V[\x15a\x02\xD8V[a\x07\0Wa\x06\xBEa\x06\xA6`\x03a\x06\xA1\x84\x91a\x05\x8CV[a\x15YV[a\x06\xB8a\x06\xB2\x84a\0\xEFV[\x91a\0\xEFV[\x14a\x05\xF1V[a\x06\xE8\x7F\xC861\xD6\x96\x1F\xB0\x8DZ\xD5\x89v,B\x1F\x82V\xCBM\xB3\xAC\xCE\x18X\xEF\xFB\xF5\x81\xA1\xD4\xF8P\x91a\x06BV[\x90a\x06\xF1a\0\xD2V[\x80a\x06\xFB\x81a\x01<V[\x03\x90\xA2V[a\x07\x08a\0\xD2V[c=\x0F)=`\xE0\x1B\x81R\x80a\x07\x1F`\x04\x82\x01a\x01<V[\x03\x90\xFD[a\x07+a\0\xD2V[c\xE6\xC4${`\xE0\x1B\x81R\x80a\x07B`\x04\x82\x01a\x01<V[\x03\x90\xFD[a\x07O\x90a\x05KV[V[``\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x07~\x90a\x07VV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x07\x98W`@RV[a\x07`V[\x90a\x07\xB0a\x07\xA9a\0\xD2V[\x92\x83a\x07tV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x07\xCAW` \x80\x91\x02\x01\x90V[a\x07`V[\x90a\x07\xE1a\x07\xDC\x83a\x07\xB2V[a\x07\x9DV[\x91\x82RV[6\x907V[\x90a\x08\x10a\x07\xF8\x83a\x07\xCFV[\x92` \x80a\x08\x06\x86\x93a\x07\xB2V[\x92\x01\x91\x03\x90a\x07\xE6V[V[\x90V[a\x08)a\x08$a\x08.\x92a\x05^V[a\x05aV[a\x08\x12V[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x08N\x90a\x08\x12V[_\x19\x81\x14a\x08\\W`\x01\x01\x90V[a\x081V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[\x90a\x08\x7F\x82a\x01\x83V[\x81\x10\x15a\x08\x90W` \x80\x91\x02\x01\x01\x90V[a\x08aV[\x90a\x08\x9F\x90a\0\xEFV[\x90RV[a\x08\xABa\x07QV[Pa\x08\xBEa\x08\xB9`\x01a\x05\x8CV[a\x16\x91V[a\x08\xC7\x81a\x07\xEBV[a\x08\xD9a\x08\xD4`\x01a\x05\x8CV[a\x16\xA8V[a\x08\xE2_a\x08\x15V[\x90[\x81a\x08\xF7a\x08\xF1\x86a\x08\x12V[\x91a\x08\x12V[\x10\x80a\t\\W[\x15a\tSWa\t/\x81a\t a\t7\x93a\t\x1B\x87\x91\x87\x90\x92a\x08uV[a\x08\x95V[a\t*`\x01a\x05\x8CV[a\x16\xE2V[\x91\x90\x15a\x02\xD8V[a\tKWa\tE\x90\x91a\x08EV[\x90a\x08\xE4V[PP\x90P[\x90V[PP\x90Pa\tPV[P\x80a\txa\tra\tm_a\x05\x80V[a\0\xEFV[\x91a\0\xEFV[\x14\x15a\x08\xFEV[_\x90V[a\t\x8C\x90a\x06\x1AV[\x90V[a\t\x98\x90a\t\x83V[\x90V[a\t\xA4\x90a\x066V[\x90V[`\xE0\x1B\x90V[\x90PQ\x90a\t\xBA\x82a\x04'V[V[\x90` \x82\x82\x03\x12a\t\xD5Wa\t\xD2\x91_\x01a\t\xADV[\x90V[a\0\xDCV[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x827\x01RV[\x91\x90a\n\x08\x81a\n\x01\x81a\n\r\x95a\t\xDAV[\x80\x95a\t\xE3V[a\x07VV[\x01\x90V[\x90\x91a\n(\x92` \x83\x01\x92_\x81\x85\x03\x91\x01Ra\t\xEEV[\x90V[a\n3a\0\xD2V[=_\x82>=\x90\xFD[\x91\x90\x91a\nFa\t\x7FV[Pa\nYa\nT`\x03a\x05\x8CV[a\x16\xA8V[[\x80a\nua\noa\nj_a\x05\x80V[a\0\xEFV[\x91a\0\xEFV[\x14a\x0BbWa\n\x8Ba\n\x86\x82a\t\x8FV[a\t\x9BV[` c=\xFB^\xE7\x91\x84\x90a\n\xB1\x88\x94a\n\xBCa\n\xA5a\0\xD2V[\x96\x87\x95\x86\x94\x85\x94a\t\xA7V[\x84R`\x04\x84\x01a\n\x11V[\x03\x91Z\xFA\x80\x15a\x0B]Wa\n\xD8\x91_\x91a\x0B/W[P\x15a\x02\xD8V[a\x0B\tWa\n\xF2a\n\xFA\x91a\n\xED`\x03a\x05\x8CV[a\x16\xE2V[\x91\x90\x15a\x02\xD8V[\x15a\nZWPP\x90P[`\x01\x90V[a\x0B+\x90a\x0B\x15a\0\xD2V[\x91\x82\x91cI\xB8\xDF\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x03\xDDV[\x03\x90\xFD[a\x0BP\x91P` =\x81\x11a\x0BVW[a\x0BH\x81\x83a\x07tV[\x81\x01\x90a\t\xBCV[_a\n\xD1V[P=a\x0B>V[a\n+V[PP\x90Pa\x0B\x04V[a\x0B|\x90a\x0Bwa\x12\x8EV[a\x0B~V[V[\x80a\x0B\x99a\x0B\x93a\x0B\x8E_a\x05\x80V[a\0\xEFV[\x91a\0\xEFV[\x14a\x0CSWa\x0B\xBBa\x0B\xB5`\x01a\x0B\xB0\x84\x91a\x05\x8CV[a\x130V[\x15a\x02\xD8V[a\x0C0Wa\x0B\xEEa\x0B\xD6`\x01a\x0B\xD1\x84\x91a\x05\x8CV[a\x15YV[a\x0B\xE8a\x0B\xE2\x84a\0\xEFV[\x91a\0\xEFV[\x14a\x05\xF1V[a\x0C\x18\x7F\xD4\xC6XA\x991\x8A\xBFY\xE9Y\x99\x06\xD3\xEE\xC5PP\x9Bm\x1D\x84\x1B\xDA\xB9\x91<\xD5kp\xCD7\x91a\x06BV[\x90a\x0C!a\0\xD2V[\x80a\x0C+\x81a\x01<V[\x03\x90\xA2V[a\x0C8a\0\xD2V[c=\x0F)=`\xE0\x1B\x81R\x80a\x0CO`\x04\x82\x01a\x01<V[\x03\x90\xFD[a\x0C[a\0\xD2V[c\xE6\xC4${`\xE0\x1B\x81R\x80a\x0Cr`\x04\x82\x01a\x01<V[\x03\x90\xFD[a\x0C\x7F\x90a\x0BkV[V[a\x0C\x89a\x07QV[Pa\x0C\x9Ca\x0C\x97`\x03a\x05\x8CV[a\x16\x91V[a\x0C\xA5\x81a\x07\xEBV[a\x0C\xB7a\x0C\xB2`\x03a\x05\x8CV[a\x16\xA8V[a\x0C\xC0_a\x08\x15V[\x90[\x81a\x0C\xD5a\x0C\xCF\x86a\x08\x12V[\x91a\x08\x12V[\x10\x80a\r:W[\x15a\r1Wa\r\r\x81a\x0C\xFEa\r\x15\x93a\x0C\xF9\x87\x91\x87\x90\x92a\x08uV[a\x08\x95V[a\r\x08`\x03a\x05\x8CV[a\x16\xE2V[\x91\x90\x15a\x02\xD8V[a\r)Wa\r#\x90\x91a\x08EV[\x90a\x0C\xC2V[PP\x90P[\x90V[PP\x90Pa\r.V[P\x80a\rVa\rPa\rK_a\x05\x80V[a\0\xEFV[\x91a\0\xEFV[\x14\x15a\x0C\xDCV[a\rea\x12\x8EV[a\rma\roV[V[a\r\x80a\r{_a\x05\x80V[a\x17IV[V[a\r\x8Aa\r]V[V[_\x90V[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\r\xACa\r\xB1\x91a\r\x90V[a\r\x95V[\x90V[a\r\xBE\x90Ta\r\xA0V[\x90V[a\r\xC9a\r\x8CV[Pa\r\xD3_a\r\xB4V[\x90V[\x90a\r\xE8\x91a\r\xE3a\x12\x8EV[a\x0ElV[V[_\x7FAddress not added\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x0E\x1E`\x11` \x92a\x05\x8FV[a\x0E'\x81a\r\xEAV[\x01\x90V[a\x0E@\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x0E\x11V[\x90V[\x15a\x0EJWV[a\x0ERa\0\xD2V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x0Eh`\x04\x82\x01a\x0E+V[\x03\x90\xFD[\x90\x81a\x0E\x88a\x0E\x82a\x0E}_a\x05\x80V[a\0\xEFV[\x91a\0\xEFV[\x14a\x0FRWa\x0E\xA1`\x01a\x0E\x9C\x84\x91a\x05\x8CV[a\x130V[a\x0F/Wa\x0E\xADa\t\x7FV[P_\x14a\x0F\x13Wa\x0E\xD1a\x0E\xCB`\x01a\x0E\xC6\x84\x91a\x05\x8CV[a\x17\xC8V[[a\x0ECV[a\x0E\xFB\x7Fz\xFARx\xB1\x13v\xDE\xFF\x82\xD6\xD0\xBE\x86]\xB7=cw\x02r\x8B}&Y\xFE\xE0\x0E=\x11\xB9\x06\x91a\x06BV[\x90a\x0F\x04a\0\xD2V[\x80a\x0F\x0E\x81a\x01<V[\x03\x90\xA2V[a\x0E\xD1a\x0F*`\x01a\x0F%\x84\x91a\x05\x8CV[a\x17\xA8V[a\x0E\xCCV[a\x0F7a\0\xD2V[cQl5\x0F`\xE1\x1B\x81R\x80a\x0FN`\x04\x82\x01a\x01<V[\x03\x90\xFD[a\x0FZa\0\xD2V[c\xE6\xC4${`\xE0\x1B\x81R\x80a\x0Fq`\x04\x82\x01a\x01<V[\x03\x90\xFD[\x90a\x0F\x7F\x91a\r\xD6V[V[\x90a\x0F\x93\x91a\x0F\x8Ea\x12\x8EV[a\x0F\x95V[V[\x90\x81a\x0F\xB1a\x0F\xABa\x0F\xA6_a\x05\x80V[a\0\xEFV[\x91a\0\xEFV[\x14a\x10{Wa\x0F\xCA`\x03a\x0F\xC5\x84\x91a\x05\x8CV[a\x130V[a\x10XWa\x0F\xD6a\t\x7FV[P_\x14a\x10<Wa\x0F\xFAa\x0F\xF4`\x03a\x0F\xEF\x84\x91a\x05\x8CV[a\x17\xC8V[[a\x0ECV[a\x10$\x7F\xE4\x0F\xA3\x8A%\xF4\x8Bf\x05u\xFC\x03\xB5\xA6\xDA\x87\x97GO\xA8\xC0\xC1\x8D\xCE\xC2\xED\xC2\xED\x83\xCE\\\xD1\x91a\x06BV[\x90a\x10-a\0\xD2V[\x80a\x107\x81a\x01<V[\x03\x90\xA2V[a\x0F\xFAa\x10S`\x03a\x10N\x84\x91a\x05\x8CV[a\x17\xA8V[a\x0F\xF5V[a\x10`a\0\xD2V[cQl5\x0F`\xE1\x1B\x81R\x80a\x10w`\x04\x82\x01a\x01<V[\x03\x90\xFD[a\x10\x83a\0\xD2V[c\xE6\xC4${`\xE0\x1B\x81R\x80a\x10\x9A`\x04\x82\x01a\x01<V[\x03\x90\xFD[\x90a\x10\xA8\x91a\x0F\x81V[V[a\x10\xB3\x90a\x06\x1AV[\x90V[a\x10\xBF\x90a\x10\xAAV[\x90V[a\x10\xCB\x90a\x066V[\x90V[\x91` a\x10\xEF\x92\x94\x93a\x10\xE8`@\x82\x01\x96_\x83\x01\x90a\x03\xD0V[\x01\x90a\x03\xD0V[V[a\x10\xF9a\t\x7FV[Pa\x11\x0Ca\x11\x07`\x01a\x05\x8CV[a\x16\xA8V[[\x80a\x11(a\x11\"a\x11\x1D_a\x05\x80V[a\0\xEFV[\x91a\0\xEFV[\x14a\x12\x10Wa\x11m` a\x11Ca\x11>\x84a\x10\xB6V[a\x10\xC2V[c\xBA\xBC\xC59\x90a\x11b\x86\x92a\x11Va\0\xD2V[\x95\x86\x94\x85\x93\x84\x93a\t\xA7V[\x83R`\x04\x83\x01a\x03\xDDV[\x03\x91Z\xFA\x80\x15a\x12\x0BWa\x11\x89\x91_\x91a\x11\xDDW[P\x15a\x02\xD8V[a\x11\xB8Wa\x11\xA3a\x11\xAB\x91a\x11\x9E`\x01a\x05\x8CV[a\x16\xE2V[\x91\x90\x15a\x02\xD8V[\x15a\x11\rWPP[`\x01\x90V[a\x11\xD9a\x11\xC3a\0\xD2V[\x92\x83\x92c\x0B-\x15/`\xE0\x1B\x84R`\x04\x84\x01a\x10\xCEV[\x03\x90\xFD[a\x11\xFE\x91P` =\x81\x11a\x12\x04W[a\x11\xF6\x81\x83a\x07tV[\x81\x01\x90a\t\xBCV[_a\x11\x82V[P=a\x11\xECV[a\n+V[PPa\x11\xB3V[a\x12(\x90a\x12#a\x12\x8EV[a\x12*V[V[\x80a\x12Ea\x12?a\x12:_a\x05\x80V[a\0\xEFV[\x91a\0\xEFV[\x14a\x12UWa\x12S\x90a\x17IV[V[a\x12\x7Fa\x12a_a\x05\x80V[a\x12ia\0\xD2V[\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x03\xDDV[\x03\x90\xFD[a\x12\x8C\x90a\x12\x17V[V[a\x12\x96a\r\xC1V[a\x12\xAFa\x12\xA9a\x12\xA4a\x17\xE8V[a\0\xEFV[\x91a\0\xEFV[\x03a\x12\xB6WV[a\x12\xDFa\x12\xC1a\x17\xE8V[a\x12\xC9a\0\xD2V[\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x03\xDDV[\x03\x90\xFD[\x90a\x12\xED\x90a\x06BV[_R` R`@_ \x90V[_\x90V[a\x13\x06\x90a\x02\xD8V[\x90V[\x90a\x13\x13\x90a\x12\xFDV[_R` R`@_ \x90V[a\x13(_a\x05\x80V[\x90V[`\x01\x90V[a\x138a\t\x7FV[Pa\x13`a\x13[a\x13M`\x01\x84\x01\x85\x90a\x12\xE3V[a\x13Ua\x12\xF9V[\x90a\x13\tV[a\r\xB4V[a\x13ya\x13sa\x13na\x13\x1FV[a\0\xEFV[\x91a\0\xEFV[\x14\x80a\x13\xDDW[_\x14a\x13\xD6Wa\x13\xC0a\x13\xBAa\x13\xB5a\x13\xA7`\x01a\x13\xC6\x95\x01a\x13\xA1a\x13\x1FV[\x90a\x12\xE3V[a\x13\xAFa\x13+V[\x90a\x13\tV[a\r\xB4V[\x92a\0\xEFV[\x91a\0\xEFV[\x14_\x14a\x13\xD2W`\x01\x90V[_\x90V[PP`\x01\x90V[Pa\x14\x05a\x14\0a\x13\xF2`\x01\x84\x01\x85\x90a\x12\xE3V[a\x13\xFAa\x13+V[\x90a\x13\tV[a\r\xB4V[a\x14\x1Ea\x14\x18a\x14\x13a\x13\x1FV[a\0\xEFV[\x91a\0\xEFV[\x14a\x13\x80V[a\x14-_a\x05\x80V[\x90V[\x1B\x90V[\x91\x90`\x08a\x14T\x91\x02\x91a\x14N`\x01\x80`\xA0\x1B\x03\x84a\x140V[\x92a\x140V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x91\x90a\x14wa\x14ra\x14\x7F\x93a\x06BV[a\x14^V[\x90\x83Ta\x144V[\x90UV[a\x14\x95\x91a\x14\x8Fa\r\x8CV[\x91a\x14aV[V[\x90V[a\x14\xAEa\x14\xA9a\x14\xB3\x92a\x14\x97V[a\x05aV[a\x08\x12V[\x90V[\x90V[a\x14\xC5a\x14\xCA\x91a\r\x90V[a\x14\xB6V[\x90V[a\x14\xD7\x90Ta\x14\xB9V[\x90V[a\x14\xE9a\x14\xEF\x91\x93\x92\x93a\x08\x12V[\x92a\x08\x12V[\x82\x03\x91\x82\x11a\x14\xFAWV[a\x081V[_\x1B\x90V[\x90a\x15\x10_\x19\x91a\x14\xFFV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x15.a\x15)a\x153\x92a\x08\x12V[a\x05aV[a\x08\x12V[\x90V[\x90V[\x90a\x15Na\x15Ia\x15U\x92a\x15\x1AV[a\x156V[\x82Ta\x15\x04V[\x90UV[a\x15aa\r\x8CV[P\x81a\x15|a\x15va\x15qa\x14$V[a\0\xEFV[\x91a\0\xEFV[\x14\x80\x15a\x16sW[a\x16eW\x80a\x15\xEDa\x16b\x92a\x15\xB7a\x15\xB2a\x15\xA4`\x01\x86\x01\x88\x90a\x12\xE3V[a\x15\xACa\x12\xF9V[\x90a\x13\tV[a\r\xB4V[a\x15\xDEa\x15\xD9a\x15\xCB`\x01\x87\x01\x89\x90a\x12\xE3V[a\x15\xD3a\x13+V[\x90a\x13\tV[a\r\xB4V[\x90a\x15\xE7a\x13+V[\x92a\x17\xF5V[a\x16\x15_a\x16\x10a\x16\x02`\x01\x85\x01\x87\x90a\x12\xE3V[a\x16\na\x12\xF9V[\x90a\x13\tV[a\x14\x83V[a\x16=_a\x168a\x16*`\x01\x85\x01\x87\x90a\x12\xE3V[a\x162a\x13+V[\x90a\x13\tV[a\x14\x83V[a\x16\\_a\x16K`\x01a\x14\x9AV[\x92\x01\x91a\x16W\x83a\x14\xCDV[a\x14\xDAV[\x90a\x159V[\x90V[PPa\x16p_a\x05\x80V[\x90V[Pa\x16\x88a\x16\x82\x82\x84\x90a\x130V[\x15a\x02\xD8V[a\x15\x84V[_\x90V[_a\x16\xA5\x91a\x16\x9Ea\x16\x8DV[P\x01a\x14\xCDV[\x90V[a\x16\xDAa\x16\xCC`\x01a\x16\xDF\x93a\x16\xBCa\r\x8CV[P\x01a\x16\xC6a\x13\x1FV[\x90a\x12\xE3V[a\x16\xD4a\x13+V[\x90a\x13\tV[a\r\xB4V[\x90V[\x90a\x17\x08\x91a\x16\xEFa\t\x7FV[Pa\x16\xF8a\r\x8CV[P\x90a\x17\x02a\x13+V[\x91a\x18@V[\x91\x90\x91\x90V[\x90a\x17\x1F`\x01\x80`\xA0\x1B\x03\x91a\x14\xFFV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x17>a\x179a\x17E\x92a\x06BV[a\x14^V[\x82Ta\x17\x0EV[\x90UV[a\x17R_a\r\xB4V[a\x17\\\x82_a\x17)V[\x90a\x17\x90a\x17\x8A\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x06BV[\x91a\x06BV[\x91a\x17\x99a\0\xD2V[\x80a\x17\xA3\x81a\x01<V[\x03\x90\xA3V[\x90a\x17\xC5\x91a\x17\xB5a\t\x7FV[P\x90a\x17\xBFa\x12\xF9V[\x91a\x18\xBCV[\x90V[\x90a\x17\xE5\x91a\x17\xD5a\t\x7FV[P\x90a\x17\xDFa\x13+V[\x91a\x18\xBCV[\x90V[a\x17\xF0a\r\x8CV[P3\x90V[\x91\x92a\x184a\x189\x92`\x01a\x18>\x96a\x18-\x83a\x18(a\x18\x18\x85\x8B\x01\x85\x90a\x12\xE3V[a\x18\"\x89\x15a\x02\xD8V[\x90a\x13\tV[a\x17)V[\x95\x01a\x12\xE3V[a\x13\tV[a\x17)V[V[\x91a\x18Ia\t\x7FV[Pa\x18Ra\r\x8CV[Pa\x18ga\x18a\x84\x84\x90a\x130V[\x15a\x02\xD8V[_\x14a\x18~WPPP_\x90a\x18{_a\x05\x80V[\x90V[a\x18\x91a\x18\x96\x92`\x01a\x18\x9B\x95\x01a\x12\xE3V[a\x13\tV[a\r\xB4V[\x90\x81a\x18\xB6a\x18\xB0a\x18\xABa\x13\x1FV[a\0\xEFV[\x91a\0\xEFV[\x14\x15\x91\x90V[\x91a\x18\xDB\x92a\x18\xC9a\t\x7FV[P\x91a\x18\xD3a\x13\x1FV[\x90\x91\x92a\x19\x03V[\x90V[a\x18\xEDa\x18\xF3\x91\x93\x92\x93a\x08\x12V[\x92a\x08\x12V[\x82\x01\x80\x92\x11a\x18\xFEWV[a\x081V[\x91a\x19\x0Ca\t\x7FV[Pa\x19!a\x19\x1B\x84\x83\x90a\x130V[\x15a\x02\xD8V[\x80a\x19\x9EW[a\x193WPPPP_\x90V[a\x19\x99\x93a\x19t\x92a\x19ja\x19^a\x19Ya\x19R`\x01\x89\x01\x85\x90a\x12\xE3V[\x85\x90a\x13\tV[a\r\xB4V[\x91\x86\x90\x85\x90\x85\x92a\x17\xF5V[\x84\x92\x90\x91\x92a\x17\xF5V[a\x19\x93_a\x19\x82`\x01a\x14\x9AV[\x92\x01\x91a\x19\x8E\x83a\x14\xCDV[a\x18\xDEV[\x90a\x159V[`\x01\x90V[Pa\x19\xAA\x83\x83\x90a\x130V[a\x19'V\xFE\xA2dipfsX\"\x12 \xB5\xB7\x8B\x92=-\xCE\xC6%c\x99\xD1\x88S@\x19V\xC9\xF8\x047\x0E\x0Caf\xF7'\x93$\xA1c\xF3dsolcC\0\x08\x19\x003",
    );
    /**Custom error with signature `AddressAlreadyExists()` and selector `0xa2d86a1e`.
```solidity
error AddressAlreadyExists();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AddressAlreadyExists {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AddressAlreadyExists> for UnderlyingRustTuple<'_> {
            fn from(value: AddressAlreadyExists) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AddressAlreadyExists {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AddressAlreadyExists {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AddressAlreadyExists()";
            const SELECTOR: [u8; 4] = [162u8, 216u8, 106u8, 30u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `AddressDoesNotExist()` and selector `0x3d0f293d`.
```solidity
error AddressDoesNotExist();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AddressDoesNotExist {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AddressDoesNotExist> for UnderlyingRustTuple<'_> {
            fn from(value: AddressDoesNotExist) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AddressDoesNotExist {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AddressDoesNotExist {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AddressDoesNotExist()";
            const SELECTOR: [u8; 4] = [61u8, 15u8, 41u8, 61u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `CalldataCheckFailed(address)` and selector `0x49b8dff7`.
```solidity
error CalldataCheckFailed(address requireAddress);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CalldataCheckFailed {
        #[allow(missing_docs)]
        pub requireAddress: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<CalldataCheckFailed> for UnderlyingRustTuple<'_> {
            fn from(value: CalldataCheckFailed) -> Self {
                (value.requireAddress,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for CalldataCheckFailed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { requireAddress: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for CalldataCheckFailed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "CalldataCheckFailed(address)";
            const SELECTOR: [u8; 4] = [73u8, 184u8, 223u8, 247u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.requireAddress,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `CheckFailed(address,address)` and selector `0x0b2d152f`.
```solidity
error CheckFailed(address requireAddress, address batchSubmitter);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CheckFailed {
        #[allow(missing_docs)]
        pub requireAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub batchSubmitter: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<CheckFailed> for UnderlyingRustTuple<'_> {
            fn from(value: CheckFailed) -> Self {
                (value.requireAddress, value.batchSubmitter)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for CheckFailed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    requireAddress: tuple.0,
                    batchSubmitter: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for CheckFailed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "CheckFailed(address,address)";
            const SELECTOR: [u8; 4] = [11u8, 45u8, 21u8, 47u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.requireAddress,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.batchSubmitter,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `InvalidAddress()` and selector `0xe6c4247b`.
```solidity
error InvalidAddress();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidAddress {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidAddress> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidAddress) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidAddress {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidAddress {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidAddress()";
            const SELECTOR: [u8; 4] = [230u8, 196u8, 36u8, 123u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `OwnableInvalidOwner(address)` and selector `0x1e4fbdf7`.
```solidity
error OwnableInvalidOwner(address owner);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableInvalidOwner {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableInvalidOwner> for UnderlyingRustTuple<'_> {
            fn from(value: OwnableInvalidOwner) -> Self {
                (value.owner,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for OwnableInvalidOwner {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { owner: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableInvalidOwner {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableInvalidOwner(address)";
            const SELECTOR: [u8; 4] = [30u8, 79u8, 189u8, 247u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `OwnableUnauthorizedAccount(address)` and selector `0x118cdaa7`.
```solidity
error OwnableUnauthorizedAccount(address account);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableUnauthorizedAccount {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: OwnableUnauthorizedAccount) -> Self {
                (value.account,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for OwnableUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { account: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableUnauthorizedAccount(address)";
            const SELECTOR: [u8; 4] = [17u8, 140u8, 218u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
        }
    };
    /**Event with signature `CalldataCheckAdded(address)` and selector `0xe40fa38a25f48b660575fc03b5a6da8797474fa8c0c18dcec2edc2ed83ce5cd1`.
```solidity
event CalldataCheckAdded(address indexed check);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct CalldataCheckAdded {
        #[allow(missing_docs)]
        pub check: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for CalldataCheckAdded {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "CalldataCheckAdded(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                228u8,
                15u8,
                163u8,
                138u8,
                37u8,
                244u8,
                139u8,
                102u8,
                5u8,
                117u8,
                252u8,
                3u8,
                181u8,
                166u8,
                218u8,
                135u8,
                151u8,
                71u8,
                79u8,
                168u8,
                192u8,
                193u8,
                141u8,
                206u8,
                194u8,
                237u8,
                194u8,
                237u8,
                131u8,
                206u8,
                92u8,
                209u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { check: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.check.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.check,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for CalldataCheckAdded {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&CalldataCheckAdded> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &CalldataCheckAdded) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `CalldataCheckRemoved(address)` and selector `0xc83631d6961fb08d5ad589762c421f8256cb4db3acce1858effbf581a1d4f850`.
```solidity
event CalldataCheckRemoved(address indexed check);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct CalldataCheckRemoved {
        #[allow(missing_docs)]
        pub check: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for CalldataCheckRemoved {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "CalldataCheckRemoved(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                200u8,
                54u8,
                49u8,
                214u8,
                150u8,
                31u8,
                176u8,
                141u8,
                90u8,
                213u8,
                137u8,
                118u8,
                44u8,
                66u8,
                31u8,
                130u8,
                86u8,
                203u8,
                77u8,
                179u8,
                172u8,
                206u8,
                24u8,
                88u8,
                239u8,
                251u8,
                245u8,
                129u8,
                161u8,
                212u8,
                248u8,
                80u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { check: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.check.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.check,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for CalldataCheckRemoved {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&CalldataCheckRemoved> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &CalldataCheckRemoved) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `OwnershipTransferred(address,address)` and selector `0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0`.
```solidity
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct OwnershipTransferred {
        #[allow(missing_docs)]
        pub previousOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OwnershipTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OwnershipTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousOwner: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousOwner.clone(),
                    self.newOwner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousOwner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OwnershipTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OwnershipTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &OwnershipTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `ProposerCheckAdded(address)` and selector `0x7afa5278b11376deff82d6d0be865db73d637702728b7d2659fee00e3d11b906`.
```solidity
event ProposerCheckAdded(address indexed check);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct ProposerCheckAdded {
        #[allow(missing_docs)]
        pub check: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for ProposerCheckAdded {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "ProposerCheckAdded(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                122u8,
                250u8,
                82u8,
                120u8,
                177u8,
                19u8,
                118u8,
                222u8,
                255u8,
                130u8,
                214u8,
                208u8,
                190u8,
                134u8,
                93u8,
                183u8,
                61u8,
                99u8,
                119u8,
                2u8,
                114u8,
                139u8,
                125u8,
                38u8,
                89u8,
                254u8,
                224u8,
                14u8,
                61u8,
                17u8,
                185u8,
                6u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { check: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.check.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.check,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for ProposerCheckAdded {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&ProposerCheckAdded> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &ProposerCheckAdded) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `ProposerCheckRemoved(address)` and selector `0xd4c6584199318abf59e9599906d3eec550509b6d1d841bdab9913cd56b70cd37`.
```solidity
event ProposerCheckRemoved(address indexed check);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct ProposerCheckRemoved {
        #[allow(missing_docs)]
        pub check: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for ProposerCheckRemoved {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "ProposerCheckRemoved(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                212u8,
                198u8,
                88u8,
                65u8,
                153u8,
                49u8,
                138u8,
                191u8,
                89u8,
                233u8,
                89u8,
                153u8,
                6u8,
                211u8,
                238u8,
                197u8,
                80u8,
                80u8,
                155u8,
                109u8,
                29u8,
                132u8,
                27u8,
                218u8,
                185u8,
                145u8,
                60u8,
                213u8,
                107u8,
                112u8,
                205u8,
                55u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { check: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.check.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.check,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for ProposerCheckRemoved {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&ProposerCheckRemoved> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &ProposerCheckRemoved) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address admin);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub admin: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value.admin,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { admin: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin,
                    ),
                )
            }
        }
    };
    /**Function with signature `addCalldataCheck(address,bool)` and selector `0xa7f736f2`.
```solidity
function addCalldataCheck(address _address, bool addToHead) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addCalldataCheckCall {
        #[allow(missing_docs)]
        pub _address: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub addToHead: bool,
    }
    ///Container type for the return parameters of the [`addCalldataCheck(address,bool)`](addCalldataCheckCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addCalldataCheckReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address, bool);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addCalldataCheckCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: addCalldataCheckCall) -> Self {
                    (value._address, value.addToHead)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for addCalldataCheckCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _address: tuple.0,
                        addToHead: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addCalldataCheckReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: addCalldataCheckReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for addCalldataCheckReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for addCalldataCheckCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = addCalldataCheckReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "addCalldataCheck(address,bool)";
            const SELECTOR: [u8; 4] = [167u8, 247u8, 54u8, 242u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._address,
                    ),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.addToHead,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `addProposerCheck(address,bool)` and selector `0x98a7e5c2`.
```solidity
function addProposerCheck(address _address, bool addToHead) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addProposerCheckCall {
        #[allow(missing_docs)]
        pub _address: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub addToHead: bool,
    }
    ///Container type for the return parameters of the [`addProposerCheck(address,bool)`](addProposerCheckCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addProposerCheckReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address, bool);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addProposerCheckCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: addProposerCheckCall) -> Self {
                    (value._address, value.addToHead)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for addProposerCheckCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _address: tuple.0,
                        addToHead: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addProposerCheckReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: addProposerCheckReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for addProposerCheckReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for addProposerCheckCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = addProposerCheckReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "addProposerCheck(address,bool)";
            const SELECTOR: [u8; 4] = [152u8, 167u8, 229u8, 194u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._address,
                    ),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.addToHead,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getAllCalldataChecks()` and selector `0x70405b0b`.
```solidity
function getAllCalldataChecks() external view returns (address[] memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAllCalldataChecksCall {}
    ///Container type for the return parameters of the [`getAllCalldataChecks()`](getAllCalldataChecksCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAllCalldataChecksReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAllCalldataChecksCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAllCalldataChecksCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAllCalldataChecksCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAllCalldataChecksReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAllCalldataChecksReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAllCalldataChecksReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getAllCalldataChecksCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getAllCalldataChecksReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getAllCalldataChecks()";
            const SELECTOR: [u8; 4] = [112u8, 64u8, 91u8, 11u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getAllProposerChecks()` and selector `0x1ba39a12`.
```solidity
function getAllProposerChecks() external view returns (address[] memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAllProposerChecksCall {}
    ///Container type for the return parameters of the [`getAllProposerChecks()`](getAllProposerChecksCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAllProposerChecksReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAllProposerChecksCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAllProposerChecksCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAllProposerChecksCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAllProposerChecksReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAllProposerChecksReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAllProposerChecksReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getAllProposerChecksCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getAllProposerChecksReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getAllProposerChecks()";
            const SELECTOR: [u8; 4] = [27u8, 163u8, 154u8, 18u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isAllowed(address)` and selector `0xbabcc539`.
```solidity
function isAllowed(address proposer) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedCall {
        #[allow(missing_docs)]
        pub proposer: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`isAllowed(address)`](isAllowedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedCall> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedCall) -> Self {
                    (value.proposer,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { proposer: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isAllowedCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isAllowedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isAllowed(address)";
            const SELECTOR: [u8; 4] = [186u8, 188u8, 197u8, 57u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.proposer,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isCalldataAllowed(bytes)` and selector `0x3dfb5ee7`.
```solidity
function isCalldataAllowed(bytes memory data) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isCalldataAllowedCall {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`isCalldataAllowed(bytes)`](isCalldataAllowedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isCalldataAllowedReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isCalldataAllowedCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: isCalldataAllowedCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isCalldataAllowedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isCalldataAllowedReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: isCalldataAllowedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isCalldataAllowedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isCalldataAllowedCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isCalldataAllowedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isCalldataAllowed(bytes)";
            const SELECTOR: [u8; 4] = [61u8, 251u8, 94u8, 231u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `owner()` and selector `0x8da5cb5b`.
```solidity
function owner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerCall {}
    ///Container type for the return parameters of the [`owner()`](ownerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "owner()";
            const SELECTOR: [u8; 4] = [141u8, 165u8, 203u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `removeCalldataCheck(address)` and selector `0x04a8cc50`.
```solidity
function removeCalldataCheck(address _address) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct removeCalldataCheckCall {
        #[allow(missing_docs)]
        pub _address: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`removeCalldataCheck(address)`](removeCalldataCheckCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct removeCalldataCheckReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<removeCalldataCheckCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: removeCalldataCheckCall) -> Self {
                    (value._address,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for removeCalldataCheckCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _address: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<removeCalldataCheckReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: removeCalldataCheckReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for removeCalldataCheckReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for removeCalldataCheckCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = removeCalldataCheckReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "removeCalldataCheck(address)";
            const SELECTOR: [u8; 4] = [4u8, 168u8, 204u8, 80u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._address,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `removeProposerCheck(address)` and selector `0x42fd0756`.
```solidity
function removeProposerCheck(address _address) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct removeProposerCheckCall {
        #[allow(missing_docs)]
        pub _address: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`removeProposerCheck(address)`](removeProposerCheckCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct removeProposerCheckReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<removeProposerCheckCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: removeProposerCheckCall) -> Self {
                    (value._address,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for removeProposerCheckCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _address: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<removeProposerCheckReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: removeProposerCheckReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for removeProposerCheckReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for removeProposerCheckCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = removeProposerCheckReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "removeProposerCheck(address)";
            const SELECTOR: [u8; 4] = [66u8, 253u8, 7u8, 86u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._address,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `renounceOwnership()` and selector `0x715018a6`.
```solidity
function renounceOwnership() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipCall {}
    ///Container type for the return parameters of the [`renounceOwnership()`](renounceOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceOwnershipCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceOwnership()";
            const SELECTOR: [u8; 4] = [113u8, 80u8, 24u8, 166u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferOwnership(address)` and selector `0xf2fde38b`.
```solidity
function transferOwnership(address newOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipCall {
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferOwnership(address)`](transferOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipCall) -> Self {
                    (value.newOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferOwnershipCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferOwnership(address)";
            const SELECTOR: [u8; 4] = [242u8, 253u8, 227u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newOwner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`RequireAllModule`](self) function calls.
    pub enum RequireAllModuleCalls {
        #[allow(missing_docs)]
        addCalldataCheck(addCalldataCheckCall),
        #[allow(missing_docs)]
        addProposerCheck(addProposerCheckCall),
        #[allow(missing_docs)]
        getAllCalldataChecks(getAllCalldataChecksCall),
        #[allow(missing_docs)]
        getAllProposerChecks(getAllProposerChecksCall),
        #[allow(missing_docs)]
        isAllowed(isAllowedCall),
        #[allow(missing_docs)]
        isCalldataAllowed(isCalldataAllowedCall),
        #[allow(missing_docs)]
        owner(ownerCall),
        #[allow(missing_docs)]
        removeCalldataCheck(removeCalldataCheckCall),
        #[allow(missing_docs)]
        removeProposerCheck(removeProposerCheckCall),
        #[allow(missing_docs)]
        renounceOwnership(renounceOwnershipCall),
        #[allow(missing_docs)]
        transferOwnership(transferOwnershipCall),
    }
    #[automatically_derived]
    impl RequireAllModuleCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [4u8, 168u8, 204u8, 80u8],
            [27u8, 163u8, 154u8, 18u8],
            [61u8, 251u8, 94u8, 231u8],
            [66u8, 253u8, 7u8, 86u8],
            [112u8, 64u8, 91u8, 11u8],
            [113u8, 80u8, 24u8, 166u8],
            [141u8, 165u8, 203u8, 91u8],
            [152u8, 167u8, 229u8, 194u8],
            [167u8, 247u8, 54u8, 242u8],
            [186u8, 188u8, 197u8, 57u8],
            [242u8, 253u8, 227u8, 139u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for RequireAllModuleCalls {
        const NAME: &'static str = "RequireAllModuleCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 11usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::addCalldataCheck(_) => {
                    <addCalldataCheckCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::addProposerCheck(_) => {
                    <addProposerCheckCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getAllCalldataChecks(_) => {
                    <getAllCalldataChecksCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getAllProposerChecks(_) => {
                    <getAllProposerChecksCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isAllowed(_) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isCalldataAllowed(_) => {
                    <isCalldataAllowedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::owner(_) => <ownerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::removeCalldataCheck(_) => {
                    <removeCalldataCheckCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::removeProposerCheck(_) => {
                    <removeProposerCheckCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::renounceOwnership(_) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferOwnership(_) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<RequireAllModuleCalls>] = &[
                {
                    fn removeCalldataCheck(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAllModuleCalls> {
                        <removeCalldataCheckCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAllModuleCalls::removeCalldataCheck)
                    }
                    removeCalldataCheck
                },
                {
                    fn getAllProposerChecks(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAllModuleCalls> {
                        <getAllProposerChecksCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAllModuleCalls::getAllProposerChecks)
                    }
                    getAllProposerChecks
                },
                {
                    fn isCalldataAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAllModuleCalls> {
                        <isCalldataAllowedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAllModuleCalls::isCalldataAllowed)
                    }
                    isCalldataAllowed
                },
                {
                    fn removeProposerCheck(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAllModuleCalls> {
                        <removeProposerCheckCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAllModuleCalls::removeProposerCheck)
                    }
                    removeProposerCheck
                },
                {
                    fn getAllCalldataChecks(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAllModuleCalls> {
                        <getAllCalldataChecksCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAllModuleCalls::getAllCalldataChecks)
                    }
                    getAllCalldataChecks
                },
                {
                    fn renounceOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAllModuleCalls> {
                        <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAllModuleCalls::renounceOwnership)
                    }
                    renounceOwnership
                },
                {
                    fn owner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAllModuleCalls> {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAllModuleCalls::owner)
                    }
                    owner
                },
                {
                    fn addProposerCheck(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAllModuleCalls> {
                        <addProposerCheckCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAllModuleCalls::addProposerCheck)
                    }
                    addProposerCheck
                },
                {
                    fn addCalldataCheck(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAllModuleCalls> {
                        <addCalldataCheckCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAllModuleCalls::addCalldataCheck)
                    }
                    addCalldataCheck
                },
                {
                    fn isAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAllModuleCalls> {
                        <isAllowedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAllModuleCalls::isAllowed)
                    }
                    isAllowed
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAllModuleCalls> {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAllModuleCalls::transferOwnership)
                    }
                    transferOwnership
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::addCalldataCheck(inner) => {
                    <addCalldataCheckCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::addProposerCheck(inner) => {
                    <addProposerCheckCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getAllCalldataChecks(inner) => {
                    <getAllCalldataChecksCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getAllProposerChecks(inner) => {
                    <getAllProposerChecksCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isCalldataAllowed(inner) => {
                    <isCalldataAllowedCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::removeCalldataCheck(inner) => {
                    <removeCalldataCheckCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::removeProposerCheck(inner) => {
                    <removeProposerCheckCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::addCalldataCheck(inner) => {
                    <addCalldataCheckCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::addProposerCheck(inner) => {
                    <addProposerCheckCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getAllCalldataChecks(inner) => {
                    <getAllCalldataChecksCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getAllProposerChecks(inner) => {
                    <getAllProposerChecksCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isCalldataAllowed(inner) => {
                    <isCalldataAllowedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::removeCalldataCheck(inner) => {
                    <removeCalldataCheckCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::removeProposerCheck(inner) => {
                    <removeProposerCheckCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`RequireAllModule`](self) custom errors.
    pub enum RequireAllModuleErrors {
        #[allow(missing_docs)]
        AddressAlreadyExists(AddressAlreadyExists),
        #[allow(missing_docs)]
        AddressDoesNotExist(AddressDoesNotExist),
        #[allow(missing_docs)]
        CalldataCheckFailed(CalldataCheckFailed),
        #[allow(missing_docs)]
        CheckFailed(CheckFailed),
        #[allow(missing_docs)]
        InvalidAddress(InvalidAddress),
        #[allow(missing_docs)]
        OwnableInvalidOwner(OwnableInvalidOwner),
        #[allow(missing_docs)]
        OwnableUnauthorizedAccount(OwnableUnauthorizedAccount),
    }
    #[automatically_derived]
    impl RequireAllModuleErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [11u8, 45u8, 21u8, 47u8],
            [17u8, 140u8, 218u8, 167u8],
            [30u8, 79u8, 189u8, 247u8],
            [61u8, 15u8, 41u8, 61u8],
            [73u8, 184u8, 223u8, 247u8],
            [162u8, 216u8, 106u8, 30u8],
            [230u8, 196u8, 36u8, 123u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for RequireAllModuleErrors {
        const NAME: &'static str = "RequireAllModuleErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 7usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AddressAlreadyExists(_) => {
                    <AddressAlreadyExists as alloy_sol_types::SolError>::SELECTOR
                }
                Self::AddressDoesNotExist(_) => {
                    <AddressDoesNotExist as alloy_sol_types::SolError>::SELECTOR
                }
                Self::CalldataCheckFailed(_) => {
                    <CalldataCheckFailed as alloy_sol_types::SolError>::SELECTOR
                }
                Self::CheckFailed(_) => {
                    <CheckFailed as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidAddress(_) => {
                    <InvalidAddress as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableInvalidOwner(_) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableUnauthorizedAccount(_) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<RequireAllModuleErrors>] = &[
                {
                    fn CheckFailed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAllModuleErrors> {
                        <CheckFailed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAllModuleErrors::CheckFailed)
                    }
                    CheckFailed
                },
                {
                    fn OwnableUnauthorizedAccount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAllModuleErrors> {
                        <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAllModuleErrors::OwnableUnauthorizedAccount)
                    }
                    OwnableUnauthorizedAccount
                },
                {
                    fn OwnableInvalidOwner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAllModuleErrors> {
                        <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAllModuleErrors::OwnableInvalidOwner)
                    }
                    OwnableInvalidOwner
                },
                {
                    fn AddressDoesNotExist(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAllModuleErrors> {
                        <AddressDoesNotExist as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAllModuleErrors::AddressDoesNotExist)
                    }
                    AddressDoesNotExist
                },
                {
                    fn CalldataCheckFailed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAllModuleErrors> {
                        <CalldataCheckFailed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAllModuleErrors::CalldataCheckFailed)
                    }
                    CalldataCheckFailed
                },
                {
                    fn AddressAlreadyExists(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAllModuleErrors> {
                        <AddressAlreadyExists as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAllModuleErrors::AddressAlreadyExists)
                    }
                    AddressAlreadyExists
                },
                {
                    fn InvalidAddress(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAllModuleErrors> {
                        <InvalidAddress as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAllModuleErrors::InvalidAddress)
                    }
                    InvalidAddress
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AddressAlreadyExists(inner) => {
                    <AddressAlreadyExists as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::AddressDoesNotExist(inner) => {
                    <AddressDoesNotExist as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::CalldataCheckFailed(inner) => {
                    <CalldataCheckFailed as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::CheckFailed(inner) => {
                    <CheckFailed as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::InvalidAddress(inner) => {
                    <InvalidAddress as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AddressAlreadyExists(inner) => {
                    <AddressAlreadyExists as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::AddressDoesNotExist(inner) => {
                    <AddressDoesNotExist as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::CalldataCheckFailed(inner) => {
                    <CalldataCheckFailed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::CheckFailed(inner) => {
                    <CheckFailed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidAddress(inner) => {
                    <InvalidAddress as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`RequireAllModule`](self) events.
    pub enum RequireAllModuleEvents {
        #[allow(missing_docs)]
        CalldataCheckAdded(CalldataCheckAdded),
        #[allow(missing_docs)]
        CalldataCheckRemoved(CalldataCheckRemoved),
        #[allow(missing_docs)]
        OwnershipTransferred(OwnershipTransferred),
        #[allow(missing_docs)]
        ProposerCheckAdded(ProposerCheckAdded),
        #[allow(missing_docs)]
        ProposerCheckRemoved(ProposerCheckRemoved),
    }
    #[automatically_derived]
    impl RequireAllModuleEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                122u8,
                250u8,
                82u8,
                120u8,
                177u8,
                19u8,
                118u8,
                222u8,
                255u8,
                130u8,
                214u8,
                208u8,
                190u8,
                134u8,
                93u8,
                183u8,
                61u8,
                99u8,
                119u8,
                2u8,
                114u8,
                139u8,
                125u8,
                38u8,
                89u8,
                254u8,
                224u8,
                14u8,
                61u8,
                17u8,
                185u8,
                6u8,
            ],
            [
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ],
            [
                200u8,
                54u8,
                49u8,
                214u8,
                150u8,
                31u8,
                176u8,
                141u8,
                90u8,
                213u8,
                137u8,
                118u8,
                44u8,
                66u8,
                31u8,
                130u8,
                86u8,
                203u8,
                77u8,
                179u8,
                172u8,
                206u8,
                24u8,
                88u8,
                239u8,
                251u8,
                245u8,
                129u8,
                161u8,
                212u8,
                248u8,
                80u8,
            ],
            [
                212u8,
                198u8,
                88u8,
                65u8,
                153u8,
                49u8,
                138u8,
                191u8,
                89u8,
                233u8,
                89u8,
                153u8,
                6u8,
                211u8,
                238u8,
                197u8,
                80u8,
                80u8,
                155u8,
                109u8,
                29u8,
                132u8,
                27u8,
                218u8,
                185u8,
                145u8,
                60u8,
                213u8,
                107u8,
                112u8,
                205u8,
                55u8,
            ],
            [
                228u8,
                15u8,
                163u8,
                138u8,
                37u8,
                244u8,
                139u8,
                102u8,
                5u8,
                117u8,
                252u8,
                3u8,
                181u8,
                166u8,
                218u8,
                135u8,
                151u8,
                71u8,
                79u8,
                168u8,
                192u8,
                193u8,
                141u8,
                206u8,
                194u8,
                237u8,
                194u8,
                237u8,
                131u8,
                206u8,
                92u8,
                209u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for RequireAllModuleEvents {
        const NAME: &'static str = "RequireAllModuleEvents";
        const COUNT: usize = 5usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <CalldataCheckAdded as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <CalldataCheckAdded as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::CalldataCheckAdded)
                }
                Some(
                    <CalldataCheckRemoved as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <CalldataCheckRemoved as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::CalldataCheckRemoved)
                }
                Some(
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::OwnershipTransferred)
                }
                Some(
                    <ProposerCheckAdded as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <ProposerCheckAdded as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::ProposerCheckAdded)
                }
                Some(
                    <ProposerCheckRemoved as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <ProposerCheckRemoved as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::ProposerCheckRemoved)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for RequireAllModuleEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::CalldataCheckAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::CalldataCheckRemoved(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::ProposerCheckAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::ProposerCheckRemoved(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::CalldataCheckAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::CalldataCheckRemoved(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::ProposerCheckAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::ProposerCheckRemoved(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`RequireAllModule`](self) contract instance.

See the [wrapper's documentation](`RequireAllModuleInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> RequireAllModuleInstance<T, P, N> {
        RequireAllModuleInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        admin: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<RequireAllModuleInstance<T, P, N>>,
    > {
        RequireAllModuleInstance::<T, P, N>::deploy(provider, admin)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        admin: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        RequireAllModuleInstance::<T, P, N>::deploy_builder(provider, admin)
    }
    /**A [`RequireAllModule`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`RequireAllModule`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct RequireAllModuleInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for RequireAllModuleInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("RequireAllModuleInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > RequireAllModuleInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`RequireAllModule`](self) contract instance.

See the [wrapper's documentation](`RequireAllModuleInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            admin: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<RequireAllModuleInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, admin);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            admin: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { admin },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> RequireAllModuleInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> RequireAllModuleInstance<T, P, N> {
            RequireAllModuleInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > RequireAllModuleInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`addCalldataCheck`] function.
        pub fn addCalldataCheck(
            &self,
            _address: alloy::sol_types::private::Address,
            addToHead: bool,
        ) -> alloy_contract::SolCallBuilder<T, &P, addCalldataCheckCall, N> {
            self.call_builder(
                &addCalldataCheckCall {
                    _address,
                    addToHead,
                },
            )
        }
        ///Creates a new call builder for the [`addProposerCheck`] function.
        pub fn addProposerCheck(
            &self,
            _address: alloy::sol_types::private::Address,
            addToHead: bool,
        ) -> alloy_contract::SolCallBuilder<T, &P, addProposerCheckCall, N> {
            self.call_builder(
                &addProposerCheckCall {
                    _address,
                    addToHead,
                },
            )
        }
        ///Creates a new call builder for the [`getAllCalldataChecks`] function.
        pub fn getAllCalldataChecks(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getAllCalldataChecksCall, N> {
            self.call_builder(&getAllCalldataChecksCall {})
        }
        ///Creates a new call builder for the [`getAllProposerChecks`] function.
        pub fn getAllProposerChecks(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getAllProposerChecksCall, N> {
            self.call_builder(&getAllProposerChecksCall {})
        }
        ///Creates a new call builder for the [`isAllowed`] function.
        pub fn isAllowed(
            &self,
            proposer: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, isAllowedCall, N> {
            self.call_builder(&isAllowedCall { proposer })
        }
        ///Creates a new call builder for the [`isCalldataAllowed`] function.
        pub fn isCalldataAllowed(
            &self,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, isCalldataAllowedCall, N> {
            self.call_builder(&isCalldataAllowedCall { data })
        }
        ///Creates a new call builder for the [`owner`] function.
        pub fn owner(&self) -> alloy_contract::SolCallBuilder<T, &P, ownerCall, N> {
            self.call_builder(&ownerCall {})
        }
        ///Creates a new call builder for the [`removeCalldataCheck`] function.
        pub fn removeCalldataCheck(
            &self,
            _address: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, removeCalldataCheckCall, N> {
            self.call_builder(
                &removeCalldataCheckCall {
                    _address,
                },
            )
        }
        ///Creates a new call builder for the [`removeProposerCheck`] function.
        pub fn removeProposerCheck(
            &self,
            _address: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, removeProposerCheckCall, N> {
            self.call_builder(
                &removeProposerCheckCall {
                    _address,
                },
            )
        }
        ///Creates a new call builder for the [`renounceOwnership`] function.
        pub fn renounceOwnership(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, renounceOwnershipCall, N> {
            self.call_builder(&renounceOwnershipCall {})
        }
        ///Creates a new call builder for the [`transferOwnership`] function.
        pub fn transferOwnership(
            &self,
            newOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferOwnershipCall, N> {
            self.call_builder(&transferOwnershipCall { newOwner })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > RequireAllModuleInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`CalldataCheckAdded`] event.
        pub fn CalldataCheckAdded_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, CalldataCheckAdded, N> {
            self.event_filter::<CalldataCheckAdded>()
        }
        ///Creates a new event filter for the [`CalldataCheckRemoved`] event.
        pub fn CalldataCheckRemoved_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, CalldataCheckRemoved, N> {
            self.event_filter::<CalldataCheckRemoved>()
        }
        ///Creates a new event filter for the [`OwnershipTransferred`] event.
        pub fn OwnershipTransferred_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, OwnershipTransferred, N> {
            self.event_filter::<OwnershipTransferred>()
        }
        ///Creates a new event filter for the [`ProposerCheckAdded`] event.
        pub fn ProposerCheckAdded_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, ProposerCheckAdded, N> {
            self.event_filter::<ProposerCheckAdded>()
        }
        ///Creates a new event filter for the [`ProposerCheckRemoved`] event.
        pub fn ProposerCheckRemoved_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, ProposerCheckRemoved, N> {
            self.event_filter::<ProposerCheckRemoved>()
        }
    }
}
