/**

Generated by the following Solidity interface...
```solidity
interface RequireAllModule {
    error AddressAlreadyExists();
    error AddressDoesNotExist();
    error CheckFailed(address requireAddress, address batchSubmitter);
    error InvalidAddress();
    error OwnableInvalidOwner(address owner);
    error OwnableUnauthorizedAccount(address account);

    event CheckAdded(address indexed check);
    event CheckRemoved(address indexed check);
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor(address admin);

    function addCheck(address _address, bool addToHead) external;
    function getAllChecks() external view returns (address[] memory);
    function isAllowed(address proposer) external view returns (bool);
    function owner() external view returns (address);
    function removeCheck(address _address) external;
    function renounceOwnership() external;
    function transferOwnership(address newOwner) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "admin",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "addCheck",
    "inputs": [
      {
        "name": "_address",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "addToHead",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "getAllChecks",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isAllowed",
    "inputs": [
      {
        "name": "proposer",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "removeCheck",
    "inputs": [
      {
        "name": "_address",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "renounceOwnership",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "transferOwnership",
    "inputs": [
      {
        "name": "newOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "CheckAdded",
    "inputs": [
      {
        "name": "check",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "CheckRemoved",
    "inputs": [
      {
        "name": "check",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "OwnershipTransferred",
    "inputs": [
      {
        "name": "previousOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AddressAlreadyExists",
    "inputs": []
  },
  {
    "type": "error",
    "name": "AddressDoesNotExist",
    "inputs": []
  },
  {
    "type": "error",
    "name": "CheckFailed",
    "inputs": [
      {
        "name": "requireAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "batchSubmitter",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "InvalidAddress",
    "inputs": []
  },
  {
    "type": "error",
    "name": "OwnableInvalidOwner",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "OwnableUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ]
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod RequireAllModule {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60806040523461002f576100196100146100f4565b610115565b610021610034565b61138a6102d6823961138a90f35b61003a565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906100669061003e565b810190811060018060401b0382111761007e57604052565b610048565b9061009661008f610034565b928361005c565b565b5f80fd5b60018060a01b031690565b6100b09061009c565b90565b6100bc816100a7565b036100c357565b5f80fd5b905051906100d4826100b3565b565b906020828203126100ef576100ec915f016100c7565b90565b610098565b6101126116608038038061010781610083565b9283398101906100d6565b90565b61011e90610170565b565b90565b90565b61013a61013561013f92610120565b610123565b61009c565b90565b61014b90610126565b90565b610157906100a7565b9052565b919061016e905f6020850194019061014e565b565b8061018b6101856101805f610142565b6100a7565b916100a7565b1461019b5761019990610276565b565b6101c56101a75f610142565b6101af610034565b918291631e4fbdf760e01b83526004830161015b565b0390fd5b5f1c90565b60018060a01b031690565b6101e56101ea916101c9565b6101ce565b90565b6101f790546101d9565b90565b5f1b90565b9061021060018060a01b03916101fa565b9181191691161790565b61022e6102296102339261009c565b610123565b61009c565b90565b61023f9061021a565b90565b61024b90610236565b90565b90565b9061026661026161026d92610242565b61024e565b82546101ff565b9055565b5f0190565b61027f5f6101ed565b610289825f610251565b906102bd6102b77f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610242565b91610242565b916102c6610034565b806102d081610271565b0390a356fe60806040526004361015610013575b6103b0565b61001d5f3561008c565b806368b23e5214610087578063715018a6146100825780638da5cb5b1461007d578063babcc53914610078578063c2b8d79c14610073578063c34d826a1461006e5763f2fde38b0361000e5761037d565b610348565b610275565b6101f0565b610194565b61013f565b6100fd565b60e01c90565b60405190565b5f80fd5b5f80fd5b60018060a01b031690565b6100b4906100a0565b90565b6100c0816100ab565b036100c757565b5f80fd5b905035906100d8826100b7565b565b906020828203126100f3576100f0915f016100cb565b90565b61009c565b5f0190565b3461012b576101156101103660046100da565b6105af565b61011d610092565b80610127816100f8565b0390f35b610098565b5f91031261013a57565b61009c565b3461016d5761014f366004610130565b6101576105df565b61015f610092565b80610169816100f8565b0390f35b610098565b61017b906100ab565b9052565b9190610192905f60208501940190610172565b565b346101c4576101a4366004610130565b6101c06101af61061e565b6101b7610092565b9182918261017f565b0390f35b610098565b151590565b6101d7906101c9565b9052565b91906101ee905f602085019401906101ce565b565b346102205761021c61020b6102063660046100da565b610708565b610213610092565b918291826101db565b0390f35b610098565b61022e816101c9565b0361023557565b5f80fd5b9050359061024682610225565b565b9190604083820312610270578061026461026d925f86016100cb565b93602001610239565b90565b61009c565b346102a45761028e610288366004610248565b906109c9565b610296610092565b806102a0816100f8565b0390f35b610098565b5190565b60209181520190565b60200190565b6102c5906100ab565b9052565b906102d6816020936102bc565b0190565b60200190565b906102fd6102f76102f0846102a9565b80936102ad565b926102b6565b905f5b81811061030d5750505090565b90919261032661032060019286516102c9565b946102da565b9101919091610300565b6103459160208201915f8184039101526102e0565b90565b3461037857610358366004610130565b610374610363610ae0565b61036b610092565b91829182610330565b0390f35b610098565b346103ab576103956103903660046100da565b610c28565b61039d610092565b806103a7816100f8565b0390f35b610098565b5f80fd5b6103c5906103c0610c33565b6104b7565b565b90565b90565b6103e16103dc6103e6926103c7565b6103ca565b6100a0565b90565b6103f2906103cd565b90565b90565b60209181520190565b5f7f41646472657373206e6f742072656d6f76656400000000000000000000000000910152565b61043560136020926103f8565b61043e81610401565b0190565b6104579060208101905f818303910152610428565b90565b1561046157565b610469610092565b62461bcd60e51b81528061047f60048201610442565b0390fd5b61049761049261049c926100a0565b6103ca565b6100a0565b90565b6104a890610483565b90565b6104b49061049f565b90565b806104d26104cc6104c75f6103e9565b6100ab565b916100ab565b1461058c576104f46104ee60016104e984916103f5565b610cd5565b156101c9565b6105695761052761050f600161050a84916103f5565b610efe565b61052161051b846100ab565b916100ab565b1461045a565b6105517fd37223475c04a60e97eb30bc3a38b4aef6a37def09d1ed6b88c881847362426d916104ab565b9061055a610092565b80610564816100f8565b0390a2565b610571610092565b633d0f293d60e01b815280610588600482016100f8565b0390fd5b610594610092565b63e6c4247b60e01b8152806105ab600482016100f8565b0390fd5b6105b8906103b4565b565b6105c2610c33565b6105ca6105cc565b565b6105dd6105d85f6103e9565b61106d565b565b6105e76105ba565b565b5f90565b5f1c90565b60018060a01b031690565b61060961060e916105ed565b6105f2565b90565b61061b90546105fd565b90565b6106266105e9565b506106305f610611565b90565b5f90565b61064090610483565b90565b61064c90610637565b90565b6106589061049f565b90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906106839061065b565b810190811067ffffffffffffffff82111761069d57604052565b610665565b60e01b90565b905051906106b582610225565b565b906020828203126106d0576106cd915f016106a8565b90565b61009c565b6106dd610092565b3d5f823e3d90fd5b9160206107069294936106ff60408201965f830190610172565b0190610172565b565b610710610633565b5061072361071e60016103f5565b6110cc565b5b8061073f6107396107345f6103e9565b6100ab565b916100ab565b1461082757610784602061075a61075584610643565b61064f565b63babcc53990610779869261076d610092565b958694859384936106a2565b83526004830161017f565b03915afa8015610822576107a0915f916107f4575b50156101c9565b6107cf576107ba6107c2916107b560016103f5565b611106565b9190156101c9565b156107245750505b600190565b6107f06107da610092565b928392630b2d152f60e01b8452600484016106e5565b0390fd5b610815915060203d811161081b575b61080d8183610679565b8101906106b7565b5f610799565b503d610803565b6106d5565b50506107ca565b906108409161083b610c33565b6108c4565b565b5f7f41646472657373206e6f74206164646564000000000000000000000000000000910152565b61087660116020926103f8565b61087f81610842565b0190565b6108989060208101905f818303910152610869565b90565b156108a257565b6108aa610092565b62461bcd60e51b8152806108c060048201610883565b0390fd5b90816108e06108da6108d55f6103e9565b6100ab565b916100ab565b146109a6576108f960016108f484916103f5565b610cd5565b610983575f146109625761091f61091a600161091584916103f5565b611152565b61089b565b5b61094a7f75ec3ef6c1afb45dd0a2bbb3a4f14cac03241c33fc24c352e25ea690e22a9232916104ab565b90610953610092565b8061095d816100f8565b0390a2565b61097e610979600161097484916103f5565b611132565b61089b565b610920565b61098b610092565b63516c350f60e11b8152806109a2600482016100f8565b0390fd5b6109ae610092565b63e6c4247b60e01b8152806109c5600482016100f8565b0390fd5b906109d39161082e565b565b606090565b906109ed6109e6610092565b9283610679565b565b67ffffffffffffffff8111610a075760208091020190565b610665565b90610a1e610a19836109ef565b6109da565b918252565b369037565b90610a4d610a3583610a0c565b92602080610a4386936109ef565b9201910390610a23565b565b90565b610a66610a61610a6b926103c7565b6103ca565b610a4f565b90565b634e487b7160e01b5f52601160045260245ffd5b610a8b90610a4f565b5f198114610a995760010190565b610a6e565b634e487b7160e01b5f52603260045260245ffd5b90610abc826102a9565b811015610acd576020809102010190565b610a9e565b90610adc906100ab565b9052565b610ae86109d5565b50610afb610af660016103f5565b611176565b610b0481610a28565b610b16610b1160016103f5565b6110cc565b610b1f5f610a52565b905b81610b34610b2e86610a4f565b91610a4f565b1080610b99575b15610b9057610b6c81610b5d610b7493610b588791879092610ab2565b610ad2565b610b6760016103f5565b611106565b9190156101c9565b610b8857610b829091610a82565b90610b21565b505090505b90565b50509050610b8d565b5080610bb5610baf610baa5f6103e9565b6100ab565b916100ab565b1415610b3b565b610bcd90610bc8610c33565b610bcf565b565b80610bea610be4610bdf5f6103e9565b6100ab565b916100ab565b14610bfa57610bf89061106d565b565b610c24610c065f6103e9565b610c0e610092565b918291631e4fbdf760e01b83526004830161017f565b0390fd5b610c3190610bbc565b565b610c3b61061e565b610c54610c4e610c4961118d565b6100ab565b916100ab565b03610c5b57565b610c84610c6661118d565b610c6e610092565b91829163118cdaa760e01b83526004830161017f565b0390fd5b90610c92906104ab565b5f5260205260405f2090565b5f90565b610cab906101c9565b90565b90610cb890610ca2565b5f5260205260405f2090565b610ccd5f6103e9565b90565b600190565b610cdd610633565b50610d05610d00610cf2600184018590610c88565b610cfa610c9e565b90610cae565b610611565b610d1e610d18610d13610cc4565b6100ab565b916100ab565b1480610d82575b5f14610d7b57610d65610d5f610d5a610d4c6001610d6b9501610d46610cc4565b90610c88565b610d54610cd0565b90610cae565b610611565b926100ab565b916100ab565b145f14610d7757600190565b5f90565b5050600190565b50610daa610da5610d97600184018590610c88565b610d9f610cd0565b90610cae565b610611565b610dc3610dbd610db8610cc4565b6100ab565b916100ab565b14610d25565b610dd25f6103e9565b90565b1b90565b91906008610df9910291610df360018060a01b0384610dd5565b92610dd5565b9181191691161790565b90565b9190610e1c610e17610e24936104ab565b610e03565b908354610dd9565b9055565b610e3a91610e346105e9565b91610e06565b565b90565b610e53610e4e610e5892610e3c565b6103ca565b610a4f565b90565b90565b610e6a610e6f916105ed565b610e5b565b90565b610e7c9054610e5e565b90565b610e8e610e9491939293610a4f565b92610a4f565b8203918211610e9f57565b610a6e565b5f1b90565b90610eb55f1991610ea4565b9181191691161790565b610ed3610ece610ed892610a4f565b6103ca565b610a4f565b90565b90565b90610ef3610eee610efa92610ebf565b610edb565b8254610ea9565b9055565b610f066105e9565b5081610f21610f1b610f16610dc9565b6100ab565b916100ab565b148015611018575b61100a5780610f9261100792610f5c610f57610f49600186018890610c88565b610f51610c9e565b90610cae565b610611565b610f83610f7e610f70600187018990610c88565b610f78610cd0565b90610cae565b610611565b90610f8c610cd0565b9261119a565b610fba5f610fb5610fa7600185018790610c88565b610faf610c9e565b90610cae565b610e28565b610fe25f610fdd610fcf600185018790610c88565b610fd7610cd0565b90610cae565b610e28565b6110015f610ff06001610e3f565b920191610ffc83610e72565b610e7f565b90610ede565b90565b50506110155f6103e9565b90565b5061102d611027828490610cd5565b156101c9565b610f29565b9061104360018060a01b0391610ea4565b9181191691161790565b9061106261105d611069926104ab565b610e03565b8254611032565b9055565b6110765f610611565b611080825f61104d565b906110b46110ae7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0936104ab565b916104ab565b916110bd610092565b806110c7816100f8565b0390a3565b6110fe6110f06001611103936110e06105e9565b50016110ea610cc4565b90610c88565b6110f8610cd0565b90610cae565b610611565b90565b9061112c91611113610633565b5061111c6105e9565b5090611126610cd0565b916111e5565b91909190565b9061114f9161113f610633565b5090611149610c9e565b91611261565b90565b9061116f9161115f610633565b5090611169610cd0565b91611261565b90565b5f90565b5f61118a91611183611172565b5001610e72565b90565b6111956105e9565b503390565b91926111d96111de9260016111e3966111d2836111cd6111bd858b018590610c88565b6111c789156101c9565b90610cae565b61104d565b9501610c88565b610cae565b61104d565b565b916111ee610633565b506111f76105e9565b5061120c611206848490610cd5565b156101c9565b5f14611223575050505f906112205f6103e9565b90565b61123661123b9260016112409501610c88565b610cae565b610611565b908161125b611255611250610cc4565b6100ab565b916100ab565b14159190565b916112809261126e610633565b5091611278610cc4565b9091926112a8565b90565b61129261129891939293610a4f565b92610a4f565b82018092116112a357565b610a6e565b916112b1610633565b506112c66112c0848390610cd5565b156101c9565b80611343575b6112d857505050505f90565b61133e936113199261130f6113036112fe6112f7600189018590610c88565b8590610cae565b610611565b9186908590859261119a565b849290919261119a565b6113385f6113276001610e3f565b92019161133383610e72565b611283565b90610ede565b600190565b5061134f838390610cd5565b6112cc56fea26469706673582212201a8a3cf2eeaaeab9c56af889f4e74f896e0aa249c4db57afe9d7a8f0f477fe0564736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4a\0/Wa\0\x19a\0\x14a\0\xF4V[a\x01\x15V[a\0!a\x004V[a\x13\x8Aa\x02\xD6\x829a\x13\x8A\x90\xF3[a\0:V[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0f\x90a\0>V[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0~W`@RV[a\0HV[\x90a\0\x96a\0\x8Fa\x004V[\x92\x83a\0\\V[V[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xB0\x90a\0\x9CV[\x90V[a\0\xBC\x81a\0\xA7V[\x03a\0\xC3WV[_\x80\xFD[\x90PQ\x90a\0\xD4\x82a\0\xB3V[V[\x90` \x82\x82\x03\x12a\0\xEFWa\0\xEC\x91_\x01a\0\xC7V[\x90V[a\0\x98V[a\x01\x12a\x16`\x808\x03\x80a\x01\x07\x81a\0\x83V[\x92\x839\x81\x01\x90a\0\xD6V[\x90V[a\x01\x1E\x90a\x01pV[V[\x90V[\x90V[a\x01:a\x015a\x01?\x92a\x01 V[a\x01#V[a\0\x9CV[\x90V[a\x01K\x90a\x01&V[\x90V[a\x01W\x90a\0\xA7V[\x90RV[\x91\x90a\x01n\x90_` \x85\x01\x94\x01\x90a\x01NV[V[\x80a\x01\x8Ba\x01\x85a\x01\x80_a\x01BV[a\0\xA7V[\x91a\0\xA7V[\x14a\x01\x9BWa\x01\x99\x90a\x02vV[V[a\x01\xC5a\x01\xA7_a\x01BV[a\x01\xAFa\x004V[\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x01[V[\x03\x90\xFD[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01\xE5a\x01\xEA\x91a\x01\xC9V[a\x01\xCEV[\x90V[a\x01\xF7\x90Ta\x01\xD9V[\x90V[_\x1B\x90V[\x90a\x02\x10`\x01\x80`\xA0\x1B\x03\x91a\x01\xFAV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x02.a\x02)a\x023\x92a\0\x9CV[a\x01#V[a\0\x9CV[\x90V[a\x02?\x90a\x02\x1AV[\x90V[a\x02K\x90a\x026V[\x90V[\x90V[\x90a\x02fa\x02aa\x02m\x92a\x02BV[a\x02NV[\x82Ta\x01\xFFV[\x90UV[_\x01\x90V[a\x02\x7F_a\x01\xEDV[a\x02\x89\x82_a\x02QV[\x90a\x02\xBDa\x02\xB7\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x02BV[\x91a\x02BV[\x91a\x02\xC6a\x004V[\x80a\x02\xD0\x81a\x02qV[\x03\x90\xA3V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x03\xB0V[a\0\x1D_5a\0\x8CV[\x80ch\xB2>R\x14a\0\x87W\x80cqP\x18\xA6\x14a\0\x82W\x80c\x8D\xA5\xCB[\x14a\0}W\x80c\xBA\xBC\xC59\x14a\0xW\x80c\xC2\xB8\xD7\x9C\x14a\0sW\x80c\xC3M\x82j\x14a\0nWc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\x03}V[a\x03HV[a\x02uV[a\x01\xF0V[a\x01\x94V[a\x01?V[a\0\xFDV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xB4\x90a\0\xA0V[\x90V[a\0\xC0\x81a\0\xABV[\x03a\0\xC7WV[_\x80\xFD[\x90P5\x90a\0\xD8\x82a\0\xB7V[V[\x90` \x82\x82\x03\x12a\0\xF3Wa\0\xF0\x91_\x01a\0\xCBV[\x90V[a\0\x9CV[_\x01\x90V[4a\x01+Wa\x01\x15a\x01\x106`\x04a\0\xDAV[a\x05\xAFV[a\x01\x1Da\0\x92V[\x80a\x01'\x81a\0\xF8V[\x03\x90\xF3[a\0\x98V[_\x91\x03\x12a\x01:WV[a\0\x9CV[4a\x01mWa\x01O6`\x04a\x010V[a\x01Wa\x05\xDFV[a\x01_a\0\x92V[\x80a\x01i\x81a\0\xF8V[\x03\x90\xF3[a\0\x98V[a\x01{\x90a\0\xABV[\x90RV[\x91\x90a\x01\x92\x90_` \x85\x01\x94\x01\x90a\x01rV[V[4a\x01\xC4Wa\x01\xA46`\x04a\x010V[a\x01\xC0a\x01\xAFa\x06\x1EV[a\x01\xB7a\0\x92V[\x91\x82\x91\x82a\x01\x7FV[\x03\x90\xF3[a\0\x98V[\x15\x15\x90V[a\x01\xD7\x90a\x01\xC9V[\x90RV[\x91\x90a\x01\xEE\x90_` \x85\x01\x94\x01\x90a\x01\xCEV[V[4a\x02 Wa\x02\x1Ca\x02\x0Ba\x02\x066`\x04a\0\xDAV[a\x07\x08V[a\x02\x13a\0\x92V[\x91\x82\x91\x82a\x01\xDBV[\x03\x90\xF3[a\0\x98V[a\x02.\x81a\x01\xC9V[\x03a\x025WV[_\x80\xFD[\x90P5\x90a\x02F\x82a\x02%V[V[\x91\x90`@\x83\x82\x03\x12a\x02pW\x80a\x02da\x02m\x92_\x86\x01a\0\xCBV[\x93` \x01a\x029V[\x90V[a\0\x9CV[4a\x02\xA4Wa\x02\x8Ea\x02\x886`\x04a\x02HV[\x90a\t\xC9V[a\x02\x96a\0\x92V[\x80a\x02\xA0\x81a\0\xF8V[\x03\x90\xF3[a\0\x98V[Q\x90V[` \x91\x81R\x01\x90V[` \x01\x90V[a\x02\xC5\x90a\0\xABV[\x90RV[\x90a\x02\xD6\x81` \x93a\x02\xBCV[\x01\x90V[` \x01\x90V[\x90a\x02\xFDa\x02\xF7a\x02\xF0\x84a\x02\xA9V[\x80\x93a\x02\xADV[\x92a\x02\xB6V[\x90_[\x81\x81\x10a\x03\rWPPP\x90V[\x90\x91\x92a\x03&a\x03 `\x01\x92\x86Qa\x02\xC9V[\x94a\x02\xDAV[\x91\x01\x91\x90\x91a\x03\0V[a\x03E\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x02\xE0V[\x90V[4a\x03xWa\x03X6`\x04a\x010V[a\x03ta\x03ca\n\xE0V[a\x03ka\0\x92V[\x91\x82\x91\x82a\x030V[\x03\x90\xF3[a\0\x98V[4a\x03\xABWa\x03\x95a\x03\x906`\x04a\0\xDAV[a\x0C(V[a\x03\x9Da\0\x92V[\x80a\x03\xA7\x81a\0\xF8V[\x03\x90\xF3[a\0\x98V[_\x80\xFD[a\x03\xC5\x90a\x03\xC0a\x0C3V[a\x04\xB7V[V[\x90V[\x90V[a\x03\xE1a\x03\xDCa\x03\xE6\x92a\x03\xC7V[a\x03\xCAV[a\0\xA0V[\x90V[a\x03\xF2\x90a\x03\xCDV[\x90V[\x90V[` \x91\x81R\x01\x90V[_\x7FAddress not removed\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x045`\x13` \x92a\x03\xF8V[a\x04>\x81a\x04\x01V[\x01\x90V[a\x04W\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x04(V[\x90V[\x15a\x04aWV[a\x04ia\0\x92V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x04\x7F`\x04\x82\x01a\x04BV[\x03\x90\xFD[a\x04\x97a\x04\x92a\x04\x9C\x92a\0\xA0V[a\x03\xCAV[a\0\xA0V[\x90V[a\x04\xA8\x90a\x04\x83V[\x90V[a\x04\xB4\x90a\x04\x9FV[\x90V[\x80a\x04\xD2a\x04\xCCa\x04\xC7_a\x03\xE9V[a\0\xABV[\x91a\0\xABV[\x14a\x05\x8CWa\x04\xF4a\x04\xEE`\x01a\x04\xE9\x84\x91a\x03\xF5V[a\x0C\xD5V[\x15a\x01\xC9V[a\x05iWa\x05'a\x05\x0F`\x01a\x05\n\x84\x91a\x03\xF5V[a\x0E\xFEV[a\x05!a\x05\x1B\x84a\0\xABV[\x91a\0\xABV[\x14a\x04ZV[a\x05Q\x7F\xD3r#G\\\x04\xA6\x0E\x97\xEB0\xBC:8\xB4\xAE\xF6\xA3}\xEF\t\xD1\xEDk\x88\xC8\x81\x84sbBm\x91a\x04\xABV[\x90a\x05Za\0\x92V[\x80a\x05d\x81a\0\xF8V[\x03\x90\xA2V[a\x05qa\0\x92V[c=\x0F)=`\xE0\x1B\x81R\x80a\x05\x88`\x04\x82\x01a\0\xF8V[\x03\x90\xFD[a\x05\x94a\0\x92V[c\xE6\xC4${`\xE0\x1B\x81R\x80a\x05\xAB`\x04\x82\x01a\0\xF8V[\x03\x90\xFD[a\x05\xB8\x90a\x03\xB4V[V[a\x05\xC2a\x0C3V[a\x05\xCAa\x05\xCCV[V[a\x05\xDDa\x05\xD8_a\x03\xE9V[a\x10mV[V[a\x05\xE7a\x05\xBAV[V[_\x90V[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x06\ta\x06\x0E\x91a\x05\xEDV[a\x05\xF2V[\x90V[a\x06\x1B\x90Ta\x05\xFDV[\x90V[a\x06&a\x05\xE9V[Pa\x060_a\x06\x11V[\x90V[_\x90V[a\x06@\x90a\x04\x83V[\x90V[a\x06L\x90a\x067V[\x90V[a\x06X\x90a\x04\x9FV[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x06\x83\x90a\x06[V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x06\x9DW`@RV[a\x06eV[`\xE0\x1B\x90V[\x90PQ\x90a\x06\xB5\x82a\x02%V[V[\x90` \x82\x82\x03\x12a\x06\xD0Wa\x06\xCD\x91_\x01a\x06\xA8V[\x90V[a\0\x9CV[a\x06\xDDa\0\x92V[=_\x82>=\x90\xFD[\x91` a\x07\x06\x92\x94\x93a\x06\xFF`@\x82\x01\x96_\x83\x01\x90a\x01rV[\x01\x90a\x01rV[V[a\x07\x10a\x063V[Pa\x07#a\x07\x1E`\x01a\x03\xF5V[a\x10\xCCV[[\x80a\x07?a\x079a\x074_a\x03\xE9V[a\0\xABV[\x91a\0\xABV[\x14a\x08'Wa\x07\x84` a\x07Za\x07U\x84a\x06CV[a\x06OV[c\xBA\xBC\xC59\x90a\x07y\x86\x92a\x07ma\0\x92V[\x95\x86\x94\x85\x93\x84\x93a\x06\xA2V[\x83R`\x04\x83\x01a\x01\x7FV[\x03\x91Z\xFA\x80\x15a\x08\"Wa\x07\xA0\x91_\x91a\x07\xF4W[P\x15a\x01\xC9V[a\x07\xCFWa\x07\xBAa\x07\xC2\x91a\x07\xB5`\x01a\x03\xF5V[a\x11\x06V[\x91\x90\x15a\x01\xC9V[\x15a\x07$WPP[`\x01\x90V[a\x07\xF0a\x07\xDAa\0\x92V[\x92\x83\x92c\x0B-\x15/`\xE0\x1B\x84R`\x04\x84\x01a\x06\xE5V[\x03\x90\xFD[a\x08\x15\x91P` =\x81\x11a\x08\x1BW[a\x08\r\x81\x83a\x06yV[\x81\x01\x90a\x06\xB7V[_a\x07\x99V[P=a\x08\x03V[a\x06\xD5V[PPa\x07\xCAV[\x90a\x08@\x91a\x08;a\x0C3V[a\x08\xC4V[V[_\x7FAddress not added\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x08v`\x11` \x92a\x03\xF8V[a\x08\x7F\x81a\x08BV[\x01\x90V[a\x08\x98\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x08iV[\x90V[\x15a\x08\xA2WV[a\x08\xAAa\0\x92V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x08\xC0`\x04\x82\x01a\x08\x83V[\x03\x90\xFD[\x90\x81a\x08\xE0a\x08\xDAa\x08\xD5_a\x03\xE9V[a\0\xABV[\x91a\0\xABV[\x14a\t\xA6Wa\x08\xF9`\x01a\x08\xF4\x84\x91a\x03\xF5V[a\x0C\xD5V[a\t\x83W_\x14a\tbWa\t\x1Fa\t\x1A`\x01a\t\x15\x84\x91a\x03\xF5V[a\x11RV[a\x08\x9BV[[a\tJ\x7Fu\xEC>\xF6\xC1\xAF\xB4]\xD0\xA2\xBB\xB3\xA4\xF1L\xAC\x03$\x1C3\xFC$\xC3R\xE2^\xA6\x90\xE2*\x922\x91a\x04\xABV[\x90a\tSa\0\x92V[\x80a\t]\x81a\0\xF8V[\x03\x90\xA2V[a\t~a\ty`\x01a\tt\x84\x91a\x03\xF5V[a\x112V[a\x08\x9BV[a\t V[a\t\x8Ba\0\x92V[cQl5\x0F`\xE1\x1B\x81R\x80a\t\xA2`\x04\x82\x01a\0\xF8V[\x03\x90\xFD[a\t\xAEa\0\x92V[c\xE6\xC4${`\xE0\x1B\x81R\x80a\t\xC5`\x04\x82\x01a\0\xF8V[\x03\x90\xFD[\x90a\t\xD3\x91a\x08.V[V[``\x90V[\x90a\t\xEDa\t\xE6a\0\x92V[\x92\x83a\x06yV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\n\x07W` \x80\x91\x02\x01\x90V[a\x06eV[\x90a\n\x1Ea\n\x19\x83a\t\xEFV[a\t\xDAV[\x91\x82RV[6\x907V[\x90a\nMa\n5\x83a\n\x0CV[\x92` \x80a\nC\x86\x93a\t\xEFV[\x92\x01\x91\x03\x90a\n#V[V[\x90V[a\nfa\naa\nk\x92a\x03\xC7V[a\x03\xCAV[a\nOV[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\n\x8B\x90a\nOV[_\x19\x81\x14a\n\x99W`\x01\x01\x90V[a\nnV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[\x90a\n\xBC\x82a\x02\xA9V[\x81\x10\x15a\n\xCDW` \x80\x91\x02\x01\x01\x90V[a\n\x9EV[\x90a\n\xDC\x90a\0\xABV[\x90RV[a\n\xE8a\t\xD5V[Pa\n\xFBa\n\xF6`\x01a\x03\xF5V[a\x11vV[a\x0B\x04\x81a\n(V[a\x0B\x16a\x0B\x11`\x01a\x03\xF5V[a\x10\xCCV[a\x0B\x1F_a\nRV[\x90[\x81a\x0B4a\x0B.\x86a\nOV[\x91a\nOV[\x10\x80a\x0B\x99W[\x15a\x0B\x90Wa\x0Bl\x81a\x0B]a\x0Bt\x93a\x0BX\x87\x91\x87\x90\x92a\n\xB2V[a\n\xD2V[a\x0Bg`\x01a\x03\xF5V[a\x11\x06V[\x91\x90\x15a\x01\xC9V[a\x0B\x88Wa\x0B\x82\x90\x91a\n\x82V[\x90a\x0B!V[PP\x90P[\x90V[PP\x90Pa\x0B\x8DV[P\x80a\x0B\xB5a\x0B\xAFa\x0B\xAA_a\x03\xE9V[a\0\xABV[\x91a\0\xABV[\x14\x15a\x0B;V[a\x0B\xCD\x90a\x0B\xC8a\x0C3V[a\x0B\xCFV[V[\x80a\x0B\xEAa\x0B\xE4a\x0B\xDF_a\x03\xE9V[a\0\xABV[\x91a\0\xABV[\x14a\x0B\xFAWa\x0B\xF8\x90a\x10mV[V[a\x0C$a\x0C\x06_a\x03\xE9V[a\x0C\x0Ea\0\x92V[\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x01\x7FV[\x03\x90\xFD[a\x0C1\x90a\x0B\xBCV[V[a\x0C;a\x06\x1EV[a\x0CTa\x0CNa\x0CIa\x11\x8DV[a\0\xABV[\x91a\0\xABV[\x03a\x0C[WV[a\x0C\x84a\x0Cfa\x11\x8DV[a\x0Cna\0\x92V[\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x01\x7FV[\x03\x90\xFD[\x90a\x0C\x92\x90a\x04\xABV[_R` R`@_ \x90V[_\x90V[a\x0C\xAB\x90a\x01\xC9V[\x90V[\x90a\x0C\xB8\x90a\x0C\xA2V[_R` R`@_ \x90V[a\x0C\xCD_a\x03\xE9V[\x90V[`\x01\x90V[a\x0C\xDDa\x063V[Pa\r\x05a\r\0a\x0C\xF2`\x01\x84\x01\x85\x90a\x0C\x88V[a\x0C\xFAa\x0C\x9EV[\x90a\x0C\xAEV[a\x06\x11V[a\r\x1Ea\r\x18a\r\x13a\x0C\xC4V[a\0\xABV[\x91a\0\xABV[\x14\x80a\r\x82W[_\x14a\r{Wa\rea\r_a\rZa\rL`\x01a\rk\x95\x01a\rFa\x0C\xC4V[\x90a\x0C\x88V[a\rTa\x0C\xD0V[\x90a\x0C\xAEV[a\x06\x11V[\x92a\0\xABV[\x91a\0\xABV[\x14_\x14a\rwW`\x01\x90V[_\x90V[PP`\x01\x90V[Pa\r\xAAa\r\xA5a\r\x97`\x01\x84\x01\x85\x90a\x0C\x88V[a\r\x9Fa\x0C\xD0V[\x90a\x0C\xAEV[a\x06\x11V[a\r\xC3a\r\xBDa\r\xB8a\x0C\xC4V[a\0\xABV[\x91a\0\xABV[\x14a\r%V[a\r\xD2_a\x03\xE9V[\x90V[\x1B\x90V[\x91\x90`\x08a\r\xF9\x91\x02\x91a\r\xF3`\x01\x80`\xA0\x1B\x03\x84a\r\xD5V[\x92a\r\xD5V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x91\x90a\x0E\x1Ca\x0E\x17a\x0E$\x93a\x04\xABV[a\x0E\x03V[\x90\x83Ta\r\xD9V[\x90UV[a\x0E:\x91a\x0E4a\x05\xE9V[\x91a\x0E\x06V[V[\x90V[a\x0ESa\x0ENa\x0EX\x92a\x0E<V[a\x03\xCAV[a\nOV[\x90V[\x90V[a\x0Eja\x0Eo\x91a\x05\xEDV[a\x0E[V[\x90V[a\x0E|\x90Ta\x0E^V[\x90V[a\x0E\x8Ea\x0E\x94\x91\x93\x92\x93a\nOV[\x92a\nOV[\x82\x03\x91\x82\x11a\x0E\x9FWV[a\nnV[_\x1B\x90V[\x90a\x0E\xB5_\x19\x91a\x0E\xA4V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0E\xD3a\x0E\xCEa\x0E\xD8\x92a\nOV[a\x03\xCAV[a\nOV[\x90V[\x90V[\x90a\x0E\xF3a\x0E\xEEa\x0E\xFA\x92a\x0E\xBFV[a\x0E\xDBV[\x82Ta\x0E\xA9V[\x90UV[a\x0F\x06a\x05\xE9V[P\x81a\x0F!a\x0F\x1Ba\x0F\x16a\r\xC9V[a\0\xABV[\x91a\0\xABV[\x14\x80\x15a\x10\x18W[a\x10\nW\x80a\x0F\x92a\x10\x07\x92a\x0F\\a\x0FWa\x0FI`\x01\x86\x01\x88\x90a\x0C\x88V[a\x0FQa\x0C\x9EV[\x90a\x0C\xAEV[a\x06\x11V[a\x0F\x83a\x0F~a\x0Fp`\x01\x87\x01\x89\x90a\x0C\x88V[a\x0Fxa\x0C\xD0V[\x90a\x0C\xAEV[a\x06\x11V[\x90a\x0F\x8Ca\x0C\xD0V[\x92a\x11\x9AV[a\x0F\xBA_a\x0F\xB5a\x0F\xA7`\x01\x85\x01\x87\x90a\x0C\x88V[a\x0F\xAFa\x0C\x9EV[\x90a\x0C\xAEV[a\x0E(V[a\x0F\xE2_a\x0F\xDDa\x0F\xCF`\x01\x85\x01\x87\x90a\x0C\x88V[a\x0F\xD7a\x0C\xD0V[\x90a\x0C\xAEV[a\x0E(V[a\x10\x01_a\x0F\xF0`\x01a\x0E?V[\x92\x01\x91a\x0F\xFC\x83a\x0ErV[a\x0E\x7FV[\x90a\x0E\xDEV[\x90V[PPa\x10\x15_a\x03\xE9V[\x90V[Pa\x10-a\x10'\x82\x84\x90a\x0C\xD5V[\x15a\x01\xC9V[a\x0F)V[\x90a\x10C`\x01\x80`\xA0\x1B\x03\x91a\x0E\xA4V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x10ba\x10]a\x10i\x92a\x04\xABV[a\x0E\x03V[\x82Ta\x102V[\x90UV[a\x10v_a\x06\x11V[a\x10\x80\x82_a\x10MV[\x90a\x10\xB4a\x10\xAE\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x04\xABV[\x91a\x04\xABV[\x91a\x10\xBDa\0\x92V[\x80a\x10\xC7\x81a\0\xF8V[\x03\x90\xA3V[a\x10\xFEa\x10\xF0`\x01a\x11\x03\x93a\x10\xE0a\x05\xE9V[P\x01a\x10\xEAa\x0C\xC4V[\x90a\x0C\x88V[a\x10\xF8a\x0C\xD0V[\x90a\x0C\xAEV[a\x06\x11V[\x90V[\x90a\x11,\x91a\x11\x13a\x063V[Pa\x11\x1Ca\x05\xE9V[P\x90a\x11&a\x0C\xD0V[\x91a\x11\xE5V[\x91\x90\x91\x90V[\x90a\x11O\x91a\x11?a\x063V[P\x90a\x11Ia\x0C\x9EV[\x91a\x12aV[\x90V[\x90a\x11o\x91a\x11_a\x063V[P\x90a\x11ia\x0C\xD0V[\x91a\x12aV[\x90V[_\x90V[_a\x11\x8A\x91a\x11\x83a\x11rV[P\x01a\x0ErV[\x90V[a\x11\x95a\x05\xE9V[P3\x90V[\x91\x92a\x11\xD9a\x11\xDE\x92`\x01a\x11\xE3\x96a\x11\xD2\x83a\x11\xCDa\x11\xBD\x85\x8B\x01\x85\x90a\x0C\x88V[a\x11\xC7\x89\x15a\x01\xC9V[\x90a\x0C\xAEV[a\x10MV[\x95\x01a\x0C\x88V[a\x0C\xAEV[a\x10MV[V[\x91a\x11\xEEa\x063V[Pa\x11\xF7a\x05\xE9V[Pa\x12\x0Ca\x12\x06\x84\x84\x90a\x0C\xD5V[\x15a\x01\xC9V[_\x14a\x12#WPPP_\x90a\x12 _a\x03\xE9V[\x90V[a\x126a\x12;\x92`\x01a\x12@\x95\x01a\x0C\x88V[a\x0C\xAEV[a\x06\x11V[\x90\x81a\x12[a\x12Ua\x12Pa\x0C\xC4V[a\0\xABV[\x91a\0\xABV[\x14\x15\x91\x90V[\x91a\x12\x80\x92a\x12na\x063V[P\x91a\x12xa\x0C\xC4V[\x90\x91\x92a\x12\xA8V[\x90V[a\x12\x92a\x12\x98\x91\x93\x92\x93a\nOV[\x92a\nOV[\x82\x01\x80\x92\x11a\x12\xA3WV[a\nnV[\x91a\x12\xB1a\x063V[Pa\x12\xC6a\x12\xC0\x84\x83\x90a\x0C\xD5V[\x15a\x01\xC9V[\x80a\x13CW[a\x12\xD8WPPPP_\x90V[a\x13>\x93a\x13\x19\x92a\x13\x0Fa\x13\x03a\x12\xFEa\x12\xF7`\x01\x89\x01\x85\x90a\x0C\x88V[\x85\x90a\x0C\xAEV[a\x06\x11V[\x91\x86\x90\x85\x90\x85\x92a\x11\x9AV[\x84\x92\x90\x91\x92a\x11\x9AV[a\x138_a\x13'`\x01a\x0E?V[\x92\x01\x91a\x133\x83a\x0ErV[a\x12\x83V[\x90a\x0E\xDEV[`\x01\x90V[Pa\x13O\x83\x83\x90a\x0C\xD5V[a\x12\xCCV\xFE\xA2dipfsX\"\x12 \x1A\x8A<\xF2\xEE\xAA\xEA\xB9\xC5j\xF8\x89\xF4\xE7O\x89n\n\xA2I\xC4\xDBW\xAF\xE9\xD7\xA8\xF0\xF4w\xFE\x05dsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b6103b0565b61001d5f3561008c565b806368b23e5214610087578063715018a6146100825780638da5cb5b1461007d578063babcc53914610078578063c2b8d79c14610073578063c34d826a1461006e5763f2fde38b0361000e5761037d565b610348565b610275565b6101f0565b610194565b61013f565b6100fd565b60e01c90565b60405190565b5f80fd5b5f80fd5b60018060a01b031690565b6100b4906100a0565b90565b6100c0816100ab565b036100c757565b5f80fd5b905035906100d8826100b7565b565b906020828203126100f3576100f0915f016100cb565b90565b61009c565b5f0190565b3461012b576101156101103660046100da565b6105af565b61011d610092565b80610127816100f8565b0390f35b610098565b5f91031261013a57565b61009c565b3461016d5761014f366004610130565b6101576105df565b61015f610092565b80610169816100f8565b0390f35b610098565b61017b906100ab565b9052565b9190610192905f60208501940190610172565b565b346101c4576101a4366004610130565b6101c06101af61061e565b6101b7610092565b9182918261017f565b0390f35b610098565b151590565b6101d7906101c9565b9052565b91906101ee905f602085019401906101ce565b565b346102205761021c61020b6102063660046100da565b610708565b610213610092565b918291826101db565b0390f35b610098565b61022e816101c9565b0361023557565b5f80fd5b9050359061024682610225565b565b9190604083820312610270578061026461026d925f86016100cb565b93602001610239565b90565b61009c565b346102a45761028e610288366004610248565b906109c9565b610296610092565b806102a0816100f8565b0390f35b610098565b5190565b60209181520190565b60200190565b6102c5906100ab565b9052565b906102d6816020936102bc565b0190565b60200190565b906102fd6102f76102f0846102a9565b80936102ad565b926102b6565b905f5b81811061030d5750505090565b90919261032661032060019286516102c9565b946102da565b9101919091610300565b6103459160208201915f8184039101526102e0565b90565b3461037857610358366004610130565b610374610363610ae0565b61036b610092565b91829182610330565b0390f35b610098565b346103ab576103956103903660046100da565b610c28565b61039d610092565b806103a7816100f8565b0390f35b610098565b5f80fd5b6103c5906103c0610c33565b6104b7565b565b90565b90565b6103e16103dc6103e6926103c7565b6103ca565b6100a0565b90565b6103f2906103cd565b90565b90565b60209181520190565b5f7f41646472657373206e6f742072656d6f76656400000000000000000000000000910152565b61043560136020926103f8565b61043e81610401565b0190565b6104579060208101905f818303910152610428565b90565b1561046157565b610469610092565b62461bcd60e51b81528061047f60048201610442565b0390fd5b61049761049261049c926100a0565b6103ca565b6100a0565b90565b6104a890610483565b90565b6104b49061049f565b90565b806104d26104cc6104c75f6103e9565b6100ab565b916100ab565b1461058c576104f46104ee60016104e984916103f5565b610cd5565b156101c9565b6105695761052761050f600161050a84916103f5565b610efe565b61052161051b846100ab565b916100ab565b1461045a565b6105517fd37223475c04a60e97eb30bc3a38b4aef6a37def09d1ed6b88c881847362426d916104ab565b9061055a610092565b80610564816100f8565b0390a2565b610571610092565b633d0f293d60e01b815280610588600482016100f8565b0390fd5b610594610092565b63e6c4247b60e01b8152806105ab600482016100f8565b0390fd5b6105b8906103b4565b565b6105c2610c33565b6105ca6105cc565b565b6105dd6105d85f6103e9565b61106d565b565b6105e76105ba565b565b5f90565b5f1c90565b60018060a01b031690565b61060961060e916105ed565b6105f2565b90565b61061b90546105fd565b90565b6106266105e9565b506106305f610611565b90565b5f90565b61064090610483565b90565b61064c90610637565b90565b6106589061049f565b90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906106839061065b565b810190811067ffffffffffffffff82111761069d57604052565b610665565b60e01b90565b905051906106b582610225565b565b906020828203126106d0576106cd915f016106a8565b90565b61009c565b6106dd610092565b3d5f823e3d90fd5b9160206107069294936106ff60408201965f830190610172565b0190610172565b565b610710610633565b5061072361071e60016103f5565b6110cc565b5b8061073f6107396107345f6103e9565b6100ab565b916100ab565b1461082757610784602061075a61075584610643565b61064f565b63babcc53990610779869261076d610092565b958694859384936106a2565b83526004830161017f565b03915afa8015610822576107a0915f916107f4575b50156101c9565b6107cf576107ba6107c2916107b560016103f5565b611106565b9190156101c9565b156107245750505b600190565b6107f06107da610092565b928392630b2d152f60e01b8452600484016106e5565b0390fd5b610815915060203d811161081b575b61080d8183610679565b8101906106b7565b5f610799565b503d610803565b6106d5565b50506107ca565b906108409161083b610c33565b6108c4565b565b5f7f41646472657373206e6f74206164646564000000000000000000000000000000910152565b61087660116020926103f8565b61087f81610842565b0190565b6108989060208101905f818303910152610869565b90565b156108a257565b6108aa610092565b62461bcd60e51b8152806108c060048201610883565b0390fd5b90816108e06108da6108d55f6103e9565b6100ab565b916100ab565b146109a6576108f960016108f484916103f5565b610cd5565b610983575f146109625761091f61091a600161091584916103f5565b611152565b61089b565b5b61094a7f75ec3ef6c1afb45dd0a2bbb3a4f14cac03241c33fc24c352e25ea690e22a9232916104ab565b90610953610092565b8061095d816100f8565b0390a2565b61097e610979600161097484916103f5565b611132565b61089b565b610920565b61098b610092565b63516c350f60e11b8152806109a2600482016100f8565b0390fd5b6109ae610092565b63e6c4247b60e01b8152806109c5600482016100f8565b0390fd5b906109d39161082e565b565b606090565b906109ed6109e6610092565b9283610679565b565b67ffffffffffffffff8111610a075760208091020190565b610665565b90610a1e610a19836109ef565b6109da565b918252565b369037565b90610a4d610a3583610a0c565b92602080610a4386936109ef565b9201910390610a23565b565b90565b610a66610a61610a6b926103c7565b6103ca565b610a4f565b90565b634e487b7160e01b5f52601160045260245ffd5b610a8b90610a4f565b5f198114610a995760010190565b610a6e565b634e487b7160e01b5f52603260045260245ffd5b90610abc826102a9565b811015610acd576020809102010190565b610a9e565b90610adc906100ab565b9052565b610ae86109d5565b50610afb610af660016103f5565b611176565b610b0481610a28565b610b16610b1160016103f5565b6110cc565b610b1f5f610a52565b905b81610b34610b2e86610a4f565b91610a4f565b1080610b99575b15610b9057610b6c81610b5d610b7493610b588791879092610ab2565b610ad2565b610b6760016103f5565b611106565b9190156101c9565b610b8857610b829091610a82565b90610b21565b505090505b90565b50509050610b8d565b5080610bb5610baf610baa5f6103e9565b6100ab565b916100ab565b1415610b3b565b610bcd90610bc8610c33565b610bcf565b565b80610bea610be4610bdf5f6103e9565b6100ab565b916100ab565b14610bfa57610bf89061106d565b565b610c24610c065f6103e9565b610c0e610092565b918291631e4fbdf760e01b83526004830161017f565b0390fd5b610c3190610bbc565b565b610c3b61061e565b610c54610c4e610c4961118d565b6100ab565b916100ab565b03610c5b57565b610c84610c6661118d565b610c6e610092565b91829163118cdaa760e01b83526004830161017f565b0390fd5b90610c92906104ab565b5f5260205260405f2090565b5f90565b610cab906101c9565b90565b90610cb890610ca2565b5f5260205260405f2090565b610ccd5f6103e9565b90565b600190565b610cdd610633565b50610d05610d00610cf2600184018590610c88565b610cfa610c9e565b90610cae565b610611565b610d1e610d18610d13610cc4565b6100ab565b916100ab565b1480610d82575b5f14610d7b57610d65610d5f610d5a610d4c6001610d6b9501610d46610cc4565b90610c88565b610d54610cd0565b90610cae565b610611565b926100ab565b916100ab565b145f14610d7757600190565b5f90565b5050600190565b50610daa610da5610d97600184018590610c88565b610d9f610cd0565b90610cae565b610611565b610dc3610dbd610db8610cc4565b6100ab565b916100ab565b14610d25565b610dd25f6103e9565b90565b1b90565b91906008610df9910291610df360018060a01b0384610dd5565b92610dd5565b9181191691161790565b90565b9190610e1c610e17610e24936104ab565b610e03565b908354610dd9565b9055565b610e3a91610e346105e9565b91610e06565b565b90565b610e53610e4e610e5892610e3c565b6103ca565b610a4f565b90565b90565b610e6a610e6f916105ed565b610e5b565b90565b610e7c9054610e5e565b90565b610e8e610e9491939293610a4f565b92610a4f565b8203918211610e9f57565b610a6e565b5f1b90565b90610eb55f1991610ea4565b9181191691161790565b610ed3610ece610ed892610a4f565b6103ca565b610a4f565b90565b90565b90610ef3610eee610efa92610ebf565b610edb565b8254610ea9565b9055565b610f066105e9565b5081610f21610f1b610f16610dc9565b6100ab565b916100ab565b148015611018575b61100a5780610f9261100792610f5c610f57610f49600186018890610c88565b610f51610c9e565b90610cae565b610611565b610f83610f7e610f70600187018990610c88565b610f78610cd0565b90610cae565b610611565b90610f8c610cd0565b9261119a565b610fba5f610fb5610fa7600185018790610c88565b610faf610c9e565b90610cae565b610e28565b610fe25f610fdd610fcf600185018790610c88565b610fd7610cd0565b90610cae565b610e28565b6110015f610ff06001610e3f565b920191610ffc83610e72565b610e7f565b90610ede565b90565b50506110155f6103e9565b90565b5061102d611027828490610cd5565b156101c9565b610f29565b9061104360018060a01b0391610ea4565b9181191691161790565b9061106261105d611069926104ab565b610e03565b8254611032565b9055565b6110765f610611565b611080825f61104d565b906110b46110ae7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0936104ab565b916104ab565b916110bd610092565b806110c7816100f8565b0390a3565b6110fe6110f06001611103936110e06105e9565b50016110ea610cc4565b90610c88565b6110f8610cd0565b90610cae565b610611565b90565b9061112c91611113610633565b5061111c6105e9565b5090611126610cd0565b916111e5565b91909190565b9061114f9161113f610633565b5090611149610c9e565b91611261565b90565b9061116f9161115f610633565b5090611169610cd0565b91611261565b90565b5f90565b5f61118a91611183611172565b5001610e72565b90565b6111956105e9565b503390565b91926111d96111de9260016111e3966111d2836111cd6111bd858b018590610c88565b6111c789156101c9565b90610cae565b61104d565b9501610c88565b610cae565b61104d565b565b916111ee610633565b506111f76105e9565b5061120c611206848490610cd5565b156101c9565b5f14611223575050505f906112205f6103e9565b90565b61123661123b9260016112409501610c88565b610cae565b610611565b908161125b611255611250610cc4565b6100ab565b916100ab565b14159190565b916112809261126e610633565b5091611278610cc4565b9091926112a8565b90565b61129261129891939293610a4f565b92610a4f565b82018092116112a357565b610a6e565b916112b1610633565b506112c66112c0848390610cd5565b156101c9565b80611343575b6112d857505050505f90565b61133e936113199261130f6113036112fe6112f7600189018590610c88565b8590610cae565b610611565b9186908590859261119a565b849290919261119a565b6113385f6113276001610e3f565b92019161133383610e72565b611283565b90610ede565b600190565b5061134f838390610cd5565b6112cc56fea26469706673582212201a8a3cf2eeaaeab9c56af889f4e74f896e0aa249c4db57afe9d7a8f0f477fe0564736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x03\xB0V[a\0\x1D_5a\0\x8CV[\x80ch\xB2>R\x14a\0\x87W\x80cqP\x18\xA6\x14a\0\x82W\x80c\x8D\xA5\xCB[\x14a\0}W\x80c\xBA\xBC\xC59\x14a\0xW\x80c\xC2\xB8\xD7\x9C\x14a\0sW\x80c\xC3M\x82j\x14a\0nWc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\x03}V[a\x03HV[a\x02uV[a\x01\xF0V[a\x01\x94V[a\x01?V[a\0\xFDV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xB4\x90a\0\xA0V[\x90V[a\0\xC0\x81a\0\xABV[\x03a\0\xC7WV[_\x80\xFD[\x90P5\x90a\0\xD8\x82a\0\xB7V[V[\x90` \x82\x82\x03\x12a\0\xF3Wa\0\xF0\x91_\x01a\0\xCBV[\x90V[a\0\x9CV[_\x01\x90V[4a\x01+Wa\x01\x15a\x01\x106`\x04a\0\xDAV[a\x05\xAFV[a\x01\x1Da\0\x92V[\x80a\x01'\x81a\0\xF8V[\x03\x90\xF3[a\0\x98V[_\x91\x03\x12a\x01:WV[a\0\x9CV[4a\x01mWa\x01O6`\x04a\x010V[a\x01Wa\x05\xDFV[a\x01_a\0\x92V[\x80a\x01i\x81a\0\xF8V[\x03\x90\xF3[a\0\x98V[a\x01{\x90a\0\xABV[\x90RV[\x91\x90a\x01\x92\x90_` \x85\x01\x94\x01\x90a\x01rV[V[4a\x01\xC4Wa\x01\xA46`\x04a\x010V[a\x01\xC0a\x01\xAFa\x06\x1EV[a\x01\xB7a\0\x92V[\x91\x82\x91\x82a\x01\x7FV[\x03\x90\xF3[a\0\x98V[\x15\x15\x90V[a\x01\xD7\x90a\x01\xC9V[\x90RV[\x91\x90a\x01\xEE\x90_` \x85\x01\x94\x01\x90a\x01\xCEV[V[4a\x02 Wa\x02\x1Ca\x02\x0Ba\x02\x066`\x04a\0\xDAV[a\x07\x08V[a\x02\x13a\0\x92V[\x91\x82\x91\x82a\x01\xDBV[\x03\x90\xF3[a\0\x98V[a\x02.\x81a\x01\xC9V[\x03a\x025WV[_\x80\xFD[\x90P5\x90a\x02F\x82a\x02%V[V[\x91\x90`@\x83\x82\x03\x12a\x02pW\x80a\x02da\x02m\x92_\x86\x01a\0\xCBV[\x93` \x01a\x029V[\x90V[a\0\x9CV[4a\x02\xA4Wa\x02\x8Ea\x02\x886`\x04a\x02HV[\x90a\t\xC9V[a\x02\x96a\0\x92V[\x80a\x02\xA0\x81a\0\xF8V[\x03\x90\xF3[a\0\x98V[Q\x90V[` \x91\x81R\x01\x90V[` \x01\x90V[a\x02\xC5\x90a\0\xABV[\x90RV[\x90a\x02\xD6\x81` \x93a\x02\xBCV[\x01\x90V[` \x01\x90V[\x90a\x02\xFDa\x02\xF7a\x02\xF0\x84a\x02\xA9V[\x80\x93a\x02\xADV[\x92a\x02\xB6V[\x90_[\x81\x81\x10a\x03\rWPPP\x90V[\x90\x91\x92a\x03&a\x03 `\x01\x92\x86Qa\x02\xC9V[\x94a\x02\xDAV[\x91\x01\x91\x90\x91a\x03\0V[a\x03E\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x02\xE0V[\x90V[4a\x03xWa\x03X6`\x04a\x010V[a\x03ta\x03ca\n\xE0V[a\x03ka\0\x92V[\x91\x82\x91\x82a\x030V[\x03\x90\xF3[a\0\x98V[4a\x03\xABWa\x03\x95a\x03\x906`\x04a\0\xDAV[a\x0C(V[a\x03\x9Da\0\x92V[\x80a\x03\xA7\x81a\0\xF8V[\x03\x90\xF3[a\0\x98V[_\x80\xFD[a\x03\xC5\x90a\x03\xC0a\x0C3V[a\x04\xB7V[V[\x90V[\x90V[a\x03\xE1a\x03\xDCa\x03\xE6\x92a\x03\xC7V[a\x03\xCAV[a\0\xA0V[\x90V[a\x03\xF2\x90a\x03\xCDV[\x90V[\x90V[` \x91\x81R\x01\x90V[_\x7FAddress not removed\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x045`\x13` \x92a\x03\xF8V[a\x04>\x81a\x04\x01V[\x01\x90V[a\x04W\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x04(V[\x90V[\x15a\x04aWV[a\x04ia\0\x92V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x04\x7F`\x04\x82\x01a\x04BV[\x03\x90\xFD[a\x04\x97a\x04\x92a\x04\x9C\x92a\0\xA0V[a\x03\xCAV[a\0\xA0V[\x90V[a\x04\xA8\x90a\x04\x83V[\x90V[a\x04\xB4\x90a\x04\x9FV[\x90V[\x80a\x04\xD2a\x04\xCCa\x04\xC7_a\x03\xE9V[a\0\xABV[\x91a\0\xABV[\x14a\x05\x8CWa\x04\xF4a\x04\xEE`\x01a\x04\xE9\x84\x91a\x03\xF5V[a\x0C\xD5V[\x15a\x01\xC9V[a\x05iWa\x05'a\x05\x0F`\x01a\x05\n\x84\x91a\x03\xF5V[a\x0E\xFEV[a\x05!a\x05\x1B\x84a\0\xABV[\x91a\0\xABV[\x14a\x04ZV[a\x05Q\x7F\xD3r#G\\\x04\xA6\x0E\x97\xEB0\xBC:8\xB4\xAE\xF6\xA3}\xEF\t\xD1\xEDk\x88\xC8\x81\x84sbBm\x91a\x04\xABV[\x90a\x05Za\0\x92V[\x80a\x05d\x81a\0\xF8V[\x03\x90\xA2V[a\x05qa\0\x92V[c=\x0F)=`\xE0\x1B\x81R\x80a\x05\x88`\x04\x82\x01a\0\xF8V[\x03\x90\xFD[a\x05\x94a\0\x92V[c\xE6\xC4${`\xE0\x1B\x81R\x80a\x05\xAB`\x04\x82\x01a\0\xF8V[\x03\x90\xFD[a\x05\xB8\x90a\x03\xB4V[V[a\x05\xC2a\x0C3V[a\x05\xCAa\x05\xCCV[V[a\x05\xDDa\x05\xD8_a\x03\xE9V[a\x10mV[V[a\x05\xE7a\x05\xBAV[V[_\x90V[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x06\ta\x06\x0E\x91a\x05\xEDV[a\x05\xF2V[\x90V[a\x06\x1B\x90Ta\x05\xFDV[\x90V[a\x06&a\x05\xE9V[Pa\x060_a\x06\x11V[\x90V[_\x90V[a\x06@\x90a\x04\x83V[\x90V[a\x06L\x90a\x067V[\x90V[a\x06X\x90a\x04\x9FV[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x06\x83\x90a\x06[V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x06\x9DW`@RV[a\x06eV[`\xE0\x1B\x90V[\x90PQ\x90a\x06\xB5\x82a\x02%V[V[\x90` \x82\x82\x03\x12a\x06\xD0Wa\x06\xCD\x91_\x01a\x06\xA8V[\x90V[a\0\x9CV[a\x06\xDDa\0\x92V[=_\x82>=\x90\xFD[\x91` a\x07\x06\x92\x94\x93a\x06\xFF`@\x82\x01\x96_\x83\x01\x90a\x01rV[\x01\x90a\x01rV[V[a\x07\x10a\x063V[Pa\x07#a\x07\x1E`\x01a\x03\xF5V[a\x10\xCCV[[\x80a\x07?a\x079a\x074_a\x03\xE9V[a\0\xABV[\x91a\0\xABV[\x14a\x08'Wa\x07\x84` a\x07Za\x07U\x84a\x06CV[a\x06OV[c\xBA\xBC\xC59\x90a\x07y\x86\x92a\x07ma\0\x92V[\x95\x86\x94\x85\x93\x84\x93a\x06\xA2V[\x83R`\x04\x83\x01a\x01\x7FV[\x03\x91Z\xFA\x80\x15a\x08\"Wa\x07\xA0\x91_\x91a\x07\xF4W[P\x15a\x01\xC9V[a\x07\xCFWa\x07\xBAa\x07\xC2\x91a\x07\xB5`\x01a\x03\xF5V[a\x11\x06V[\x91\x90\x15a\x01\xC9V[\x15a\x07$WPP[`\x01\x90V[a\x07\xF0a\x07\xDAa\0\x92V[\x92\x83\x92c\x0B-\x15/`\xE0\x1B\x84R`\x04\x84\x01a\x06\xE5V[\x03\x90\xFD[a\x08\x15\x91P` =\x81\x11a\x08\x1BW[a\x08\r\x81\x83a\x06yV[\x81\x01\x90a\x06\xB7V[_a\x07\x99V[P=a\x08\x03V[a\x06\xD5V[PPa\x07\xCAV[\x90a\x08@\x91a\x08;a\x0C3V[a\x08\xC4V[V[_\x7FAddress not added\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x08v`\x11` \x92a\x03\xF8V[a\x08\x7F\x81a\x08BV[\x01\x90V[a\x08\x98\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x08iV[\x90V[\x15a\x08\xA2WV[a\x08\xAAa\0\x92V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x08\xC0`\x04\x82\x01a\x08\x83V[\x03\x90\xFD[\x90\x81a\x08\xE0a\x08\xDAa\x08\xD5_a\x03\xE9V[a\0\xABV[\x91a\0\xABV[\x14a\t\xA6Wa\x08\xF9`\x01a\x08\xF4\x84\x91a\x03\xF5V[a\x0C\xD5V[a\t\x83W_\x14a\tbWa\t\x1Fa\t\x1A`\x01a\t\x15\x84\x91a\x03\xF5V[a\x11RV[a\x08\x9BV[[a\tJ\x7Fu\xEC>\xF6\xC1\xAF\xB4]\xD0\xA2\xBB\xB3\xA4\xF1L\xAC\x03$\x1C3\xFC$\xC3R\xE2^\xA6\x90\xE2*\x922\x91a\x04\xABV[\x90a\tSa\0\x92V[\x80a\t]\x81a\0\xF8V[\x03\x90\xA2V[a\t~a\ty`\x01a\tt\x84\x91a\x03\xF5V[a\x112V[a\x08\x9BV[a\t V[a\t\x8Ba\0\x92V[cQl5\x0F`\xE1\x1B\x81R\x80a\t\xA2`\x04\x82\x01a\0\xF8V[\x03\x90\xFD[a\t\xAEa\0\x92V[c\xE6\xC4${`\xE0\x1B\x81R\x80a\t\xC5`\x04\x82\x01a\0\xF8V[\x03\x90\xFD[\x90a\t\xD3\x91a\x08.V[V[``\x90V[\x90a\t\xEDa\t\xE6a\0\x92V[\x92\x83a\x06yV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\n\x07W` \x80\x91\x02\x01\x90V[a\x06eV[\x90a\n\x1Ea\n\x19\x83a\t\xEFV[a\t\xDAV[\x91\x82RV[6\x907V[\x90a\nMa\n5\x83a\n\x0CV[\x92` \x80a\nC\x86\x93a\t\xEFV[\x92\x01\x91\x03\x90a\n#V[V[\x90V[a\nfa\naa\nk\x92a\x03\xC7V[a\x03\xCAV[a\nOV[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\n\x8B\x90a\nOV[_\x19\x81\x14a\n\x99W`\x01\x01\x90V[a\nnV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[\x90a\n\xBC\x82a\x02\xA9V[\x81\x10\x15a\n\xCDW` \x80\x91\x02\x01\x01\x90V[a\n\x9EV[\x90a\n\xDC\x90a\0\xABV[\x90RV[a\n\xE8a\t\xD5V[Pa\n\xFBa\n\xF6`\x01a\x03\xF5V[a\x11vV[a\x0B\x04\x81a\n(V[a\x0B\x16a\x0B\x11`\x01a\x03\xF5V[a\x10\xCCV[a\x0B\x1F_a\nRV[\x90[\x81a\x0B4a\x0B.\x86a\nOV[\x91a\nOV[\x10\x80a\x0B\x99W[\x15a\x0B\x90Wa\x0Bl\x81a\x0B]a\x0Bt\x93a\x0BX\x87\x91\x87\x90\x92a\n\xB2V[a\n\xD2V[a\x0Bg`\x01a\x03\xF5V[a\x11\x06V[\x91\x90\x15a\x01\xC9V[a\x0B\x88Wa\x0B\x82\x90\x91a\n\x82V[\x90a\x0B!V[PP\x90P[\x90V[PP\x90Pa\x0B\x8DV[P\x80a\x0B\xB5a\x0B\xAFa\x0B\xAA_a\x03\xE9V[a\0\xABV[\x91a\0\xABV[\x14\x15a\x0B;V[a\x0B\xCD\x90a\x0B\xC8a\x0C3V[a\x0B\xCFV[V[\x80a\x0B\xEAa\x0B\xE4a\x0B\xDF_a\x03\xE9V[a\0\xABV[\x91a\0\xABV[\x14a\x0B\xFAWa\x0B\xF8\x90a\x10mV[V[a\x0C$a\x0C\x06_a\x03\xE9V[a\x0C\x0Ea\0\x92V[\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x01\x7FV[\x03\x90\xFD[a\x0C1\x90a\x0B\xBCV[V[a\x0C;a\x06\x1EV[a\x0CTa\x0CNa\x0CIa\x11\x8DV[a\0\xABV[\x91a\0\xABV[\x03a\x0C[WV[a\x0C\x84a\x0Cfa\x11\x8DV[a\x0Cna\0\x92V[\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x01\x7FV[\x03\x90\xFD[\x90a\x0C\x92\x90a\x04\xABV[_R` R`@_ \x90V[_\x90V[a\x0C\xAB\x90a\x01\xC9V[\x90V[\x90a\x0C\xB8\x90a\x0C\xA2V[_R` R`@_ \x90V[a\x0C\xCD_a\x03\xE9V[\x90V[`\x01\x90V[a\x0C\xDDa\x063V[Pa\r\x05a\r\0a\x0C\xF2`\x01\x84\x01\x85\x90a\x0C\x88V[a\x0C\xFAa\x0C\x9EV[\x90a\x0C\xAEV[a\x06\x11V[a\r\x1Ea\r\x18a\r\x13a\x0C\xC4V[a\0\xABV[\x91a\0\xABV[\x14\x80a\r\x82W[_\x14a\r{Wa\rea\r_a\rZa\rL`\x01a\rk\x95\x01a\rFa\x0C\xC4V[\x90a\x0C\x88V[a\rTa\x0C\xD0V[\x90a\x0C\xAEV[a\x06\x11V[\x92a\0\xABV[\x91a\0\xABV[\x14_\x14a\rwW`\x01\x90V[_\x90V[PP`\x01\x90V[Pa\r\xAAa\r\xA5a\r\x97`\x01\x84\x01\x85\x90a\x0C\x88V[a\r\x9Fa\x0C\xD0V[\x90a\x0C\xAEV[a\x06\x11V[a\r\xC3a\r\xBDa\r\xB8a\x0C\xC4V[a\0\xABV[\x91a\0\xABV[\x14a\r%V[a\r\xD2_a\x03\xE9V[\x90V[\x1B\x90V[\x91\x90`\x08a\r\xF9\x91\x02\x91a\r\xF3`\x01\x80`\xA0\x1B\x03\x84a\r\xD5V[\x92a\r\xD5V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x91\x90a\x0E\x1Ca\x0E\x17a\x0E$\x93a\x04\xABV[a\x0E\x03V[\x90\x83Ta\r\xD9V[\x90UV[a\x0E:\x91a\x0E4a\x05\xE9V[\x91a\x0E\x06V[V[\x90V[a\x0ESa\x0ENa\x0EX\x92a\x0E<V[a\x03\xCAV[a\nOV[\x90V[\x90V[a\x0Eja\x0Eo\x91a\x05\xEDV[a\x0E[V[\x90V[a\x0E|\x90Ta\x0E^V[\x90V[a\x0E\x8Ea\x0E\x94\x91\x93\x92\x93a\nOV[\x92a\nOV[\x82\x03\x91\x82\x11a\x0E\x9FWV[a\nnV[_\x1B\x90V[\x90a\x0E\xB5_\x19\x91a\x0E\xA4V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0E\xD3a\x0E\xCEa\x0E\xD8\x92a\nOV[a\x03\xCAV[a\nOV[\x90V[\x90V[\x90a\x0E\xF3a\x0E\xEEa\x0E\xFA\x92a\x0E\xBFV[a\x0E\xDBV[\x82Ta\x0E\xA9V[\x90UV[a\x0F\x06a\x05\xE9V[P\x81a\x0F!a\x0F\x1Ba\x0F\x16a\r\xC9V[a\0\xABV[\x91a\0\xABV[\x14\x80\x15a\x10\x18W[a\x10\nW\x80a\x0F\x92a\x10\x07\x92a\x0F\\a\x0FWa\x0FI`\x01\x86\x01\x88\x90a\x0C\x88V[a\x0FQa\x0C\x9EV[\x90a\x0C\xAEV[a\x06\x11V[a\x0F\x83a\x0F~a\x0Fp`\x01\x87\x01\x89\x90a\x0C\x88V[a\x0Fxa\x0C\xD0V[\x90a\x0C\xAEV[a\x06\x11V[\x90a\x0F\x8Ca\x0C\xD0V[\x92a\x11\x9AV[a\x0F\xBA_a\x0F\xB5a\x0F\xA7`\x01\x85\x01\x87\x90a\x0C\x88V[a\x0F\xAFa\x0C\x9EV[\x90a\x0C\xAEV[a\x0E(V[a\x0F\xE2_a\x0F\xDDa\x0F\xCF`\x01\x85\x01\x87\x90a\x0C\x88V[a\x0F\xD7a\x0C\xD0V[\x90a\x0C\xAEV[a\x0E(V[a\x10\x01_a\x0F\xF0`\x01a\x0E?V[\x92\x01\x91a\x0F\xFC\x83a\x0ErV[a\x0E\x7FV[\x90a\x0E\xDEV[\x90V[PPa\x10\x15_a\x03\xE9V[\x90V[Pa\x10-a\x10'\x82\x84\x90a\x0C\xD5V[\x15a\x01\xC9V[a\x0F)V[\x90a\x10C`\x01\x80`\xA0\x1B\x03\x91a\x0E\xA4V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x10ba\x10]a\x10i\x92a\x04\xABV[a\x0E\x03V[\x82Ta\x102V[\x90UV[a\x10v_a\x06\x11V[a\x10\x80\x82_a\x10MV[\x90a\x10\xB4a\x10\xAE\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x04\xABV[\x91a\x04\xABV[\x91a\x10\xBDa\0\x92V[\x80a\x10\xC7\x81a\0\xF8V[\x03\x90\xA3V[a\x10\xFEa\x10\xF0`\x01a\x11\x03\x93a\x10\xE0a\x05\xE9V[P\x01a\x10\xEAa\x0C\xC4V[\x90a\x0C\x88V[a\x10\xF8a\x0C\xD0V[\x90a\x0C\xAEV[a\x06\x11V[\x90V[\x90a\x11,\x91a\x11\x13a\x063V[Pa\x11\x1Ca\x05\xE9V[P\x90a\x11&a\x0C\xD0V[\x91a\x11\xE5V[\x91\x90\x91\x90V[\x90a\x11O\x91a\x11?a\x063V[P\x90a\x11Ia\x0C\x9EV[\x91a\x12aV[\x90V[\x90a\x11o\x91a\x11_a\x063V[P\x90a\x11ia\x0C\xD0V[\x91a\x12aV[\x90V[_\x90V[_a\x11\x8A\x91a\x11\x83a\x11rV[P\x01a\x0ErV[\x90V[a\x11\x95a\x05\xE9V[P3\x90V[\x91\x92a\x11\xD9a\x11\xDE\x92`\x01a\x11\xE3\x96a\x11\xD2\x83a\x11\xCDa\x11\xBD\x85\x8B\x01\x85\x90a\x0C\x88V[a\x11\xC7\x89\x15a\x01\xC9V[\x90a\x0C\xAEV[a\x10MV[\x95\x01a\x0C\x88V[a\x0C\xAEV[a\x10MV[V[\x91a\x11\xEEa\x063V[Pa\x11\xF7a\x05\xE9V[Pa\x12\x0Ca\x12\x06\x84\x84\x90a\x0C\xD5V[\x15a\x01\xC9V[_\x14a\x12#WPPP_\x90a\x12 _a\x03\xE9V[\x90V[a\x126a\x12;\x92`\x01a\x12@\x95\x01a\x0C\x88V[a\x0C\xAEV[a\x06\x11V[\x90\x81a\x12[a\x12Ua\x12Pa\x0C\xC4V[a\0\xABV[\x91a\0\xABV[\x14\x15\x91\x90V[\x91a\x12\x80\x92a\x12na\x063V[P\x91a\x12xa\x0C\xC4V[\x90\x91\x92a\x12\xA8V[\x90V[a\x12\x92a\x12\x98\x91\x93\x92\x93a\nOV[\x92a\nOV[\x82\x01\x80\x92\x11a\x12\xA3WV[a\nnV[\x91a\x12\xB1a\x063V[Pa\x12\xC6a\x12\xC0\x84\x83\x90a\x0C\xD5V[\x15a\x01\xC9V[\x80a\x13CW[a\x12\xD8WPPPP_\x90V[a\x13>\x93a\x13\x19\x92a\x13\x0Fa\x13\x03a\x12\xFEa\x12\xF7`\x01\x89\x01\x85\x90a\x0C\x88V[\x85\x90a\x0C\xAEV[a\x06\x11V[\x91\x86\x90\x85\x90\x85\x92a\x11\x9AV[\x84\x92\x90\x91\x92a\x11\x9AV[a\x138_a\x13'`\x01a\x0E?V[\x92\x01\x91a\x133\x83a\x0ErV[a\x12\x83V[\x90a\x0E\xDEV[`\x01\x90V[Pa\x13O\x83\x83\x90a\x0C\xD5V[a\x12\xCCV\xFE\xA2dipfsX\"\x12 \x1A\x8A<\xF2\xEE\xAA\xEA\xB9\xC5j\xF8\x89\xF4\xE7O\x89n\n\xA2I\xC4\xDBW\xAF\xE9\xD7\xA8\xF0\xF4w\xFE\x05dsolcC\0\x08\x19\x003",
    );
    /**Custom error with signature `AddressAlreadyExists()` and selector `0xa2d86a1e`.
```solidity
error AddressAlreadyExists();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AddressAlreadyExists {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AddressAlreadyExists> for UnderlyingRustTuple<'_> {
            fn from(value: AddressAlreadyExists) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AddressAlreadyExists {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AddressAlreadyExists {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AddressAlreadyExists()";
            const SELECTOR: [u8; 4] = [162u8, 216u8, 106u8, 30u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `AddressDoesNotExist()` and selector `0x3d0f293d`.
```solidity
error AddressDoesNotExist();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AddressDoesNotExist {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AddressDoesNotExist> for UnderlyingRustTuple<'_> {
            fn from(value: AddressDoesNotExist) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AddressDoesNotExist {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AddressDoesNotExist {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AddressDoesNotExist()";
            const SELECTOR: [u8; 4] = [61u8, 15u8, 41u8, 61u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `CheckFailed(address,address)` and selector `0x0b2d152f`.
```solidity
error CheckFailed(address requireAddress, address batchSubmitter);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CheckFailed {
        #[allow(missing_docs)]
        pub requireAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub batchSubmitter: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<CheckFailed> for UnderlyingRustTuple<'_> {
            fn from(value: CheckFailed) -> Self {
                (value.requireAddress, value.batchSubmitter)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for CheckFailed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    requireAddress: tuple.0,
                    batchSubmitter: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for CheckFailed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "CheckFailed(address,address)";
            const SELECTOR: [u8; 4] = [11u8, 45u8, 21u8, 47u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.requireAddress,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.batchSubmitter,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `InvalidAddress()` and selector `0xe6c4247b`.
```solidity
error InvalidAddress();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidAddress {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidAddress> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidAddress) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidAddress {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidAddress {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidAddress()";
            const SELECTOR: [u8; 4] = [230u8, 196u8, 36u8, 123u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `OwnableInvalidOwner(address)` and selector `0x1e4fbdf7`.
```solidity
error OwnableInvalidOwner(address owner);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableInvalidOwner {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableInvalidOwner> for UnderlyingRustTuple<'_> {
            fn from(value: OwnableInvalidOwner) -> Self {
                (value.owner,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for OwnableInvalidOwner {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { owner: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableInvalidOwner {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableInvalidOwner(address)";
            const SELECTOR: [u8; 4] = [30u8, 79u8, 189u8, 247u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `OwnableUnauthorizedAccount(address)` and selector `0x118cdaa7`.
```solidity
error OwnableUnauthorizedAccount(address account);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableUnauthorizedAccount {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: OwnableUnauthorizedAccount) -> Self {
                (value.account,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for OwnableUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { account: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableUnauthorizedAccount(address)";
            const SELECTOR: [u8; 4] = [17u8, 140u8, 218u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
        }
    };
    /**Event with signature `CheckAdded(address)` and selector `0x75ec3ef6c1afb45dd0a2bbb3a4f14cac03241c33fc24c352e25ea690e22a9232`.
```solidity
event CheckAdded(address indexed check);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct CheckAdded {
        #[allow(missing_docs)]
        pub check: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for CheckAdded {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "CheckAdded(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                117u8,
                236u8,
                62u8,
                246u8,
                193u8,
                175u8,
                180u8,
                93u8,
                208u8,
                162u8,
                187u8,
                179u8,
                164u8,
                241u8,
                76u8,
                172u8,
                3u8,
                36u8,
                28u8,
                51u8,
                252u8,
                36u8,
                195u8,
                82u8,
                226u8,
                94u8,
                166u8,
                144u8,
                226u8,
                42u8,
                146u8,
                50u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { check: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.check.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.check,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for CheckAdded {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&CheckAdded> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &CheckAdded) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `CheckRemoved(address)` and selector `0xd37223475c04a60e97eb30bc3a38b4aef6a37def09d1ed6b88c881847362426d`.
```solidity
event CheckRemoved(address indexed check);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct CheckRemoved {
        #[allow(missing_docs)]
        pub check: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for CheckRemoved {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "CheckRemoved(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                211u8,
                114u8,
                35u8,
                71u8,
                92u8,
                4u8,
                166u8,
                14u8,
                151u8,
                235u8,
                48u8,
                188u8,
                58u8,
                56u8,
                180u8,
                174u8,
                246u8,
                163u8,
                125u8,
                239u8,
                9u8,
                209u8,
                237u8,
                107u8,
                136u8,
                200u8,
                129u8,
                132u8,
                115u8,
                98u8,
                66u8,
                109u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { check: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.check.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.check,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for CheckRemoved {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&CheckRemoved> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &CheckRemoved) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `OwnershipTransferred(address,address)` and selector `0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0`.
```solidity
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct OwnershipTransferred {
        #[allow(missing_docs)]
        pub previousOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OwnershipTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OwnershipTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousOwner: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousOwner.clone(),
                    self.newOwner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousOwner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OwnershipTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OwnershipTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &OwnershipTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address admin);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub admin: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value.admin,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { admin: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin,
                    ),
                )
            }
        }
    };
    /**Function with signature `addCheck(address,bool)` and selector `0xc2b8d79c`.
```solidity
function addCheck(address _address, bool addToHead) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addCheckCall {
        #[allow(missing_docs)]
        pub _address: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub addToHead: bool,
    }
    ///Container type for the return parameters of the [`addCheck(address,bool)`](addCheckCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addCheckReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address, bool);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addCheckCall> for UnderlyingRustTuple<'_> {
                fn from(value: addCheckCall) -> Self {
                    (value._address, value.addToHead)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for addCheckCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _address: tuple.0,
                        addToHead: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addCheckReturn> for UnderlyingRustTuple<'_> {
                fn from(value: addCheckReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for addCheckReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for addCheckCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = addCheckReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "addCheck(address,bool)";
            const SELECTOR: [u8; 4] = [194u8, 184u8, 215u8, 156u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._address,
                    ),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.addToHead,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getAllChecks()` and selector `0xc34d826a`.
```solidity
function getAllChecks() external view returns (address[] memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAllChecksCall {}
    ///Container type for the return parameters of the [`getAllChecks()`](getAllChecksCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAllChecksReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAllChecksCall> for UnderlyingRustTuple<'_> {
                fn from(value: getAllChecksCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getAllChecksCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAllChecksReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getAllChecksReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getAllChecksReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getAllChecksCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getAllChecksReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getAllChecks()";
            const SELECTOR: [u8; 4] = [195u8, 77u8, 130u8, 106u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isAllowed(address)` and selector `0xbabcc539`.
```solidity
function isAllowed(address proposer) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedCall {
        #[allow(missing_docs)]
        pub proposer: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`isAllowed(address)`](isAllowedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedCall> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedCall) -> Self {
                    (value.proposer,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { proposer: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isAllowedCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isAllowedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isAllowed(address)";
            const SELECTOR: [u8; 4] = [186u8, 188u8, 197u8, 57u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.proposer,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `owner()` and selector `0x8da5cb5b`.
```solidity
function owner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerCall {}
    ///Container type for the return parameters of the [`owner()`](ownerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "owner()";
            const SELECTOR: [u8; 4] = [141u8, 165u8, 203u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `removeCheck(address)` and selector `0x68b23e52`.
```solidity
function removeCheck(address _address) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct removeCheckCall {
        #[allow(missing_docs)]
        pub _address: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`removeCheck(address)`](removeCheckCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct removeCheckReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<removeCheckCall> for UnderlyingRustTuple<'_> {
                fn from(value: removeCheckCall) -> Self {
                    (value._address,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for removeCheckCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _address: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<removeCheckReturn> for UnderlyingRustTuple<'_> {
                fn from(value: removeCheckReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for removeCheckReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for removeCheckCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = removeCheckReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "removeCheck(address)";
            const SELECTOR: [u8; 4] = [104u8, 178u8, 62u8, 82u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._address,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `renounceOwnership()` and selector `0x715018a6`.
```solidity
function renounceOwnership() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipCall {}
    ///Container type for the return parameters of the [`renounceOwnership()`](renounceOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceOwnershipCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceOwnership()";
            const SELECTOR: [u8; 4] = [113u8, 80u8, 24u8, 166u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferOwnership(address)` and selector `0xf2fde38b`.
```solidity
function transferOwnership(address newOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipCall {
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferOwnership(address)`](transferOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipCall) -> Self {
                    (value.newOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferOwnershipCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferOwnership(address)";
            const SELECTOR: [u8; 4] = [242u8, 253u8, 227u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newOwner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`RequireAllModule`](self) function calls.
    pub enum RequireAllModuleCalls {
        #[allow(missing_docs)]
        addCheck(addCheckCall),
        #[allow(missing_docs)]
        getAllChecks(getAllChecksCall),
        #[allow(missing_docs)]
        isAllowed(isAllowedCall),
        #[allow(missing_docs)]
        owner(ownerCall),
        #[allow(missing_docs)]
        removeCheck(removeCheckCall),
        #[allow(missing_docs)]
        renounceOwnership(renounceOwnershipCall),
        #[allow(missing_docs)]
        transferOwnership(transferOwnershipCall),
    }
    #[automatically_derived]
    impl RequireAllModuleCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [104u8, 178u8, 62u8, 82u8],
            [113u8, 80u8, 24u8, 166u8],
            [141u8, 165u8, 203u8, 91u8],
            [186u8, 188u8, 197u8, 57u8],
            [194u8, 184u8, 215u8, 156u8],
            [195u8, 77u8, 130u8, 106u8],
            [242u8, 253u8, 227u8, 139u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for RequireAllModuleCalls {
        const NAME: &'static str = "RequireAllModuleCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 7usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::addCheck(_) => <addCheckCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::getAllChecks(_) => {
                    <getAllChecksCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isAllowed(_) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::owner(_) => <ownerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::removeCheck(_) => {
                    <removeCheckCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::renounceOwnership(_) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferOwnership(_) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<RequireAllModuleCalls>] = &[
                {
                    fn removeCheck(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAllModuleCalls> {
                        <removeCheckCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAllModuleCalls::removeCheck)
                    }
                    removeCheck
                },
                {
                    fn renounceOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAllModuleCalls> {
                        <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAllModuleCalls::renounceOwnership)
                    }
                    renounceOwnership
                },
                {
                    fn owner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAllModuleCalls> {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAllModuleCalls::owner)
                    }
                    owner
                },
                {
                    fn isAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAllModuleCalls> {
                        <isAllowedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAllModuleCalls::isAllowed)
                    }
                    isAllowed
                },
                {
                    fn addCheck(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAllModuleCalls> {
                        <addCheckCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAllModuleCalls::addCheck)
                    }
                    addCheck
                },
                {
                    fn getAllChecks(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAllModuleCalls> {
                        <getAllChecksCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAllModuleCalls::getAllChecks)
                    }
                    getAllChecks
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAllModuleCalls> {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAllModuleCalls::transferOwnership)
                    }
                    transferOwnership
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::addCheck(inner) => {
                    <addCheckCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::getAllChecks(inner) => {
                    <getAllChecksCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::removeCheck(inner) => {
                    <removeCheckCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::addCheck(inner) => {
                    <addCheckCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getAllChecks(inner) => {
                    <getAllChecksCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::removeCheck(inner) => {
                    <removeCheckCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`RequireAllModule`](self) custom errors.
    pub enum RequireAllModuleErrors {
        #[allow(missing_docs)]
        AddressAlreadyExists(AddressAlreadyExists),
        #[allow(missing_docs)]
        AddressDoesNotExist(AddressDoesNotExist),
        #[allow(missing_docs)]
        CheckFailed(CheckFailed),
        #[allow(missing_docs)]
        InvalidAddress(InvalidAddress),
        #[allow(missing_docs)]
        OwnableInvalidOwner(OwnableInvalidOwner),
        #[allow(missing_docs)]
        OwnableUnauthorizedAccount(OwnableUnauthorizedAccount),
    }
    #[automatically_derived]
    impl RequireAllModuleErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [11u8, 45u8, 21u8, 47u8],
            [17u8, 140u8, 218u8, 167u8],
            [30u8, 79u8, 189u8, 247u8],
            [61u8, 15u8, 41u8, 61u8],
            [162u8, 216u8, 106u8, 30u8],
            [230u8, 196u8, 36u8, 123u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for RequireAllModuleErrors {
        const NAME: &'static str = "RequireAllModuleErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 6usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AddressAlreadyExists(_) => {
                    <AddressAlreadyExists as alloy_sol_types::SolError>::SELECTOR
                }
                Self::AddressDoesNotExist(_) => {
                    <AddressDoesNotExist as alloy_sol_types::SolError>::SELECTOR
                }
                Self::CheckFailed(_) => {
                    <CheckFailed as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidAddress(_) => {
                    <InvalidAddress as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableInvalidOwner(_) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableUnauthorizedAccount(_) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<RequireAllModuleErrors>] = &[
                {
                    fn CheckFailed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAllModuleErrors> {
                        <CheckFailed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAllModuleErrors::CheckFailed)
                    }
                    CheckFailed
                },
                {
                    fn OwnableUnauthorizedAccount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAllModuleErrors> {
                        <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAllModuleErrors::OwnableUnauthorizedAccount)
                    }
                    OwnableUnauthorizedAccount
                },
                {
                    fn OwnableInvalidOwner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAllModuleErrors> {
                        <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAllModuleErrors::OwnableInvalidOwner)
                    }
                    OwnableInvalidOwner
                },
                {
                    fn AddressDoesNotExist(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAllModuleErrors> {
                        <AddressDoesNotExist as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAllModuleErrors::AddressDoesNotExist)
                    }
                    AddressDoesNotExist
                },
                {
                    fn AddressAlreadyExists(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAllModuleErrors> {
                        <AddressAlreadyExists as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAllModuleErrors::AddressAlreadyExists)
                    }
                    AddressAlreadyExists
                },
                {
                    fn InvalidAddress(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAllModuleErrors> {
                        <InvalidAddress as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAllModuleErrors::InvalidAddress)
                    }
                    InvalidAddress
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AddressAlreadyExists(inner) => {
                    <AddressAlreadyExists as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::AddressDoesNotExist(inner) => {
                    <AddressDoesNotExist as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::CheckFailed(inner) => {
                    <CheckFailed as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::InvalidAddress(inner) => {
                    <InvalidAddress as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AddressAlreadyExists(inner) => {
                    <AddressAlreadyExists as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::AddressDoesNotExist(inner) => {
                    <AddressDoesNotExist as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::CheckFailed(inner) => {
                    <CheckFailed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidAddress(inner) => {
                    <InvalidAddress as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`RequireAllModule`](self) events.
    pub enum RequireAllModuleEvents {
        #[allow(missing_docs)]
        CheckAdded(CheckAdded),
        #[allow(missing_docs)]
        CheckRemoved(CheckRemoved),
        #[allow(missing_docs)]
        OwnershipTransferred(OwnershipTransferred),
    }
    #[automatically_derived]
    impl RequireAllModuleEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                117u8,
                236u8,
                62u8,
                246u8,
                193u8,
                175u8,
                180u8,
                93u8,
                208u8,
                162u8,
                187u8,
                179u8,
                164u8,
                241u8,
                76u8,
                172u8,
                3u8,
                36u8,
                28u8,
                51u8,
                252u8,
                36u8,
                195u8,
                82u8,
                226u8,
                94u8,
                166u8,
                144u8,
                226u8,
                42u8,
                146u8,
                50u8,
            ],
            [
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ],
            [
                211u8,
                114u8,
                35u8,
                71u8,
                92u8,
                4u8,
                166u8,
                14u8,
                151u8,
                235u8,
                48u8,
                188u8,
                58u8,
                56u8,
                180u8,
                174u8,
                246u8,
                163u8,
                125u8,
                239u8,
                9u8,
                209u8,
                237u8,
                107u8,
                136u8,
                200u8,
                129u8,
                132u8,
                115u8,
                98u8,
                66u8,
                109u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for RequireAllModuleEvents {
        const NAME: &'static str = "RequireAllModuleEvents";
        const COUNT: usize = 3usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<CheckAdded as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <CheckAdded as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::CheckAdded)
                }
                Some(<CheckRemoved as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <CheckRemoved as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::CheckRemoved)
                }
                Some(
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::OwnershipTransferred)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for RequireAllModuleEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::CheckAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::CheckRemoved(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::CheckAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::CheckRemoved(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`RequireAllModule`](self) contract instance.

See the [wrapper's documentation](`RequireAllModuleInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> RequireAllModuleInstance<T, P, N> {
        RequireAllModuleInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        admin: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<RequireAllModuleInstance<T, P, N>>,
    > {
        RequireAllModuleInstance::<T, P, N>::deploy(provider, admin)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        admin: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        RequireAllModuleInstance::<T, P, N>::deploy_builder(provider, admin)
    }
    /**A [`RequireAllModule`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`RequireAllModule`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct RequireAllModuleInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for RequireAllModuleInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("RequireAllModuleInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > RequireAllModuleInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`RequireAllModule`](self) contract instance.

See the [wrapper's documentation](`RequireAllModuleInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            admin: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<RequireAllModuleInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, admin);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            admin: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { admin },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> RequireAllModuleInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> RequireAllModuleInstance<T, P, N> {
            RequireAllModuleInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > RequireAllModuleInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`addCheck`] function.
        pub fn addCheck(
            &self,
            _address: alloy::sol_types::private::Address,
            addToHead: bool,
        ) -> alloy_contract::SolCallBuilder<T, &P, addCheckCall, N> {
            self.call_builder(
                &addCheckCall {
                    _address,
                    addToHead,
                },
            )
        }
        ///Creates a new call builder for the [`getAllChecks`] function.
        pub fn getAllChecks(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getAllChecksCall, N> {
            self.call_builder(&getAllChecksCall {})
        }
        ///Creates a new call builder for the [`isAllowed`] function.
        pub fn isAllowed(
            &self,
            proposer: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, isAllowedCall, N> {
            self.call_builder(&isAllowedCall { proposer })
        }
        ///Creates a new call builder for the [`owner`] function.
        pub fn owner(&self) -> alloy_contract::SolCallBuilder<T, &P, ownerCall, N> {
            self.call_builder(&ownerCall {})
        }
        ///Creates a new call builder for the [`removeCheck`] function.
        pub fn removeCheck(
            &self,
            _address: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, removeCheckCall, N> {
            self.call_builder(&removeCheckCall { _address })
        }
        ///Creates a new call builder for the [`renounceOwnership`] function.
        pub fn renounceOwnership(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, renounceOwnershipCall, N> {
            self.call_builder(&renounceOwnershipCall {})
        }
        ///Creates a new call builder for the [`transferOwnership`] function.
        pub fn transferOwnership(
            &self,
            newOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferOwnershipCall, N> {
            self.call_builder(&transferOwnershipCall { newOwner })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > RequireAllModuleInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`CheckAdded`] event.
        pub fn CheckAdded_filter(&self) -> alloy_contract::Event<T, &P, CheckAdded, N> {
            self.event_filter::<CheckAdded>()
        }
        ///Creates a new event filter for the [`CheckRemoved`] event.
        pub fn CheckRemoved_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, CheckRemoved, N> {
            self.event_filter::<CheckRemoved>()
        }
        ///Creates a new event filter for the [`OwnershipTransferred`] event.
        pub fn OwnershipTransferred_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, OwnershipTransferred, N> {
            self.event_filter::<OwnershipTransferred>()
        }
    }
}
