/**

Generated by the following Solidity interface...
```solidity
interface AtomicSequencer {
    constructor();

    fallback() external payable;

    function implementation() external view returns (address);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "fallback",
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "implementation",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod AtomicSequencer {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60a0604052348015600e575f80fd5b506040516019906069565b604051809103905ff0801580156031573d5f803e3d5ffd5b5073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250506076565b610a7b806101f383390190565b6080516101606100935f395f8181606a0152608f01526101605ff3fe608060405260043610610021575f3560e01c80635c60da1b1461002c57610022565b5b61002a610056565b005b348015610037575f80fd5b50610040610068565b60405161004d9190610111565b60405180910390f35b61006661006161008c565b6100b3565b565b7f000000000000000000000000000000000000000000000000000000000000000081565b5f7f0000000000000000000000000000000000000000000000000000000000000000905090565b365f80375f80365f845af43d5f803e805f81146100ce573d5ff35b3d5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6100fb826100d2565b9050919050565b61010b816100f1565b82525050565b5f6020820190506101245f830184610102565b9291505056fea2646970667358221220b05e2831229e6da841c8a7d48cbf4c4733ee688cb6b2671e0b0975292d993ed964736f6c634300081900336080604052348015600e575f80fd5b50610a5f8061001c5f395ff3fe608060405234801561000f575f80fd5b5060043610610034575f3560e01c806334993fa3146100385780636bae6e1c14610054575b5f80fd5b610052600480360381019061004d91906104bd565b610070565b005b61006e600480360381019061006991906105c2565b610289565b005b5f8686905014806100875750838390508686905014155b806100985750818190508686905014155b156100cf576040517f82a8734a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f5b86869050811015610280578282828181106100ef576100ee610640565b5b905060200201602081019061010491906106a2565b156101c05786868281811061011c5761011b610640565b5b90506020020160208101906101319190610738565b73ffffffffffffffffffffffffffffffffffffffff16633514d37b86868481811061015f5761015e610640565b5b9050602002810190610171919061076f565b6040518363ffffffff1660e01b815260040161018e92919061082b565b5f604051808303815f87803b1580156101a5575f80fd5b505af11580156101b7573d5f803e3d5ffd5b50505050610273565b8686828181106101d3576101d2610640565b5b90506020020160208101906101e89190610738565b73ffffffffffffffffffffffffffffffffffffffff166346e2cc0986868481811061021657610215610640565b5b9050602002810190610228919061076f565b6040518363ffffffff1660e01b815260040161024592919061082b565b5f604051808303815f87803b15801561025c575f80fd5b505af115801561026e573d5f803e3d5ffd5b505050505b80806001019150506100d1565b50505050505050565b5f8484905014806102a05750818190508484905014155b156102d7576040517f82a8734a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f5b848490508110156103a3578484828181106102f7576102f6610640565b5b905060200201602081019061030c9190610738565b73ffffffffffffffffffffffffffffffffffffffff16630b83249d84848481811061033a57610339610640565b5b905060200281019061034c919061084d565b6040518363ffffffff1660e01b8152600401610369929190610a07565b5f604051808303815f87803b158015610380575f80fd5b505af1158015610392573d5f803e3d5ffd5b5050505080806001019150506102d9565b5050505050565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f8083601f8401126103d3576103d26103b2565b5b8235905067ffffffffffffffff8111156103f0576103ef6103b6565b5b60208301915083602082028301111561040c5761040b6103ba565b5b9250929050565b5f8083601f840112610428576104276103b2565b5b8235905067ffffffffffffffff811115610445576104446103b6565b5b602083019150836020820283011115610461576104606103ba565b5b9250929050565b5f8083601f84011261047d5761047c6103b2565b5b8235905067ffffffffffffffff81111561049a576104996103b6565b5b6020830191508360208202830111156104b6576104b56103ba565b5b9250929050565b5f805f805f80606087890312156104d7576104d66103aa565b5b5f87013567ffffffffffffffff8111156104f4576104f36103ae565b5b61050089828a016103be565b9650965050602087013567ffffffffffffffff811115610523576105226103ae565b5b61052f89828a01610413565b9450945050604087013567ffffffffffffffff811115610552576105516103ae565b5b61055e89828a01610468565b92509250509295509295509295565b5f8083601f840112610582576105816103b2565b5b8235905067ffffffffffffffff81111561059f5761059e6103b6565b5b6020830191508360208202830111156105bb576105ba6103ba565b5b9250929050565b5f805f80604085870312156105da576105d96103aa565b5b5f85013567ffffffffffffffff8111156105f7576105f66103ae565b5b610603878288016103be565b9450945050602085013567ffffffffffffffff811115610626576106256103ae565b5b6106328782880161056d565b925092505092959194509250565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f8115159050919050565b6106818161066d565b811461068b575f80fd5b50565b5f8135905061069c81610678565b92915050565b5f602082840312156106b7576106b66103aa565b5b5f6106c48482850161068e565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6106f6826106cd565b9050919050565b5f610707826106ec565b9050919050565b610717816106fd565b8114610721575f80fd5b50565b5f813590506107328161070e565b92915050565b5f6020828403121561074d5761074c6103aa565b5b5f61075a84828501610724565b91505092915050565b5f80fd5b5f80fd5b5f80fd5b5f808335600160200384360303811261078b5761078a610763565b5b80840192508235915067ffffffffffffffff8211156107ad576107ac610767565b5b6020830192506001820236038313156107c9576107c861076b565b5b509250929050565b5f82825260208201905092915050565b828183375f83830152505050565b5f601f19601f8301169050919050565b5f61080a83856107d1565b93506108178385846107e1565b610820836107ef565b840190509392505050565b5f6020820190508181035f8301526108448184866107ff565b90509392505050565b5f808335600160200384360303811261086957610868610763565b5b80840192508235915067ffffffffffffffff82111561088b5761088a610767565b5b6020830192506020820236038313156108a7576108a661076b565b5b509250929050565b5f82825260208201905092915050565b5f819050919050565b5f82825260208201905092915050565b5f6108e383856108c8565b93506108f08385846107e1565b6108f9836107ef565b840190509392505050565b5f6109108484846108d8565b90509392505050565b5f80fd5b5f80fd5b5f80fd5b5f808335600160200384360303811261094157610940610921565b5b83810192508235915060208301925067ffffffffffffffff82111561096957610968610919565b5b60018202360383131561097f5761097e61091d565b5b509250929050565b5f602082019050919050565b5f61099e83856108af565b9350836020840285016109b0846108bf565b805f5b878110156109f55784840389526109ca8284610925565b6109d5868284610904565b95506109e084610987565b935060208b019a5050506001810190506109b3565b50829750879450505050509392505050565b5f6020820190508181035f830152610a20818486610993565b9050939250505056fea2646970667358221220618544e8f5534ba53b069994b00bf728b4328368c312ffa4762987ee19b3e19c64736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xA0`@R4\x80\x15`\x0EW_\x80\xFD[P`@Q`\x19\x90`iV[`@Q\x80\x91\x03\x90_\xF0\x80\x15\x80\x15`1W=_\x80>=_\xFD[Ps\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\x80\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP`vV[a\n{\x80a\x01\xF3\x839\x01\x90V[`\x80Qa\x01`a\0\x93_9_\x81\x81`j\x01R`\x8F\x01Ra\x01`_\xF3\xFE`\x80`@R`\x046\x10a\0!W_5`\xE0\x1C\x80c\\`\xDA\x1B\x14a\0,Wa\0\"V[[a\0*a\0VV[\0[4\x80\x15a\x007W_\x80\xFD[Pa\0@a\0hV[`@Qa\0M\x91\x90a\x01\x11V[`@Q\x80\x91\x03\x90\xF3[a\0fa\0aa\0\x8CV[a\0\xB3V[V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81V[_\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90P\x90V[6_\x807_\x806_\x84Z\xF4=_\x80>\x80_\x81\x14a\0\xCEW=_\xF3[=_\xFD[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a\0\xFB\x82a\0\xD2V[\x90P\x91\x90PV[a\x01\x0B\x81a\0\xF1V[\x82RPPV[_` \x82\x01\x90Pa\x01$_\x83\x01\x84a\x01\x02V[\x92\x91PPV\xFE\xA2dipfsX\"\x12 \xB0^(1\"\x9Em\xA8A\xC8\xA7\xD4\x8C\xBFLG3\xEEh\x8C\xB6\xB2g\x1E\x0B\tu)-\x99>\xD9dsolcC\0\x08\x19\x003`\x80`@R4\x80\x15`\x0EW_\x80\xFD[Pa\n_\x80a\0\x1C_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\x004W_5`\xE0\x1C\x80c4\x99?\xA3\x14a\08W\x80ck\xAEn\x1C\x14a\0TW[_\x80\xFD[a\0R`\x04\x806\x03\x81\x01\x90a\0M\x91\x90a\x04\xBDV[a\0pV[\0[a\0n`\x04\x806\x03\x81\x01\x90a\0i\x91\x90a\x05\xC2V[a\x02\x89V[\0[_\x86\x86\x90P\x14\x80a\0\x87WP\x83\x83\x90P\x86\x86\x90P\x14\x15[\x80a\0\x98WP\x81\x81\x90P\x86\x86\x90P\x14\x15[\x15a\0\xCFW`@Q\x7F\x82\xA8sJ\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_[\x86\x86\x90P\x81\x10\x15a\x02\x80W\x82\x82\x82\x81\x81\x10a\0\xEFWa\0\xEEa\x06@V[[\x90P` \x02\x01` \x81\x01\x90a\x01\x04\x91\x90a\x06\xA2V[\x15a\x01\xC0W\x86\x86\x82\x81\x81\x10a\x01\x1CWa\x01\x1Ba\x06@V[[\x90P` \x02\x01` \x81\x01\x90a\x011\x91\x90a\x078V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c5\x14\xD3{\x86\x86\x84\x81\x81\x10a\x01_Wa\x01^a\x06@V[[\x90P` \x02\x81\x01\x90a\x01q\x91\x90a\x07oV[`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x01\x8E\x92\x91\x90a\x08+V[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x01\xA5W_\x80\xFD[PZ\xF1\x15\x80\x15a\x01\xB7W=_\x80>=_\xFD[PPPPa\x02sV[\x86\x86\x82\x81\x81\x10a\x01\xD3Wa\x01\xD2a\x06@V[[\x90P` \x02\x01` \x81\x01\x90a\x01\xE8\x91\x90a\x078V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16cF\xE2\xCC\t\x86\x86\x84\x81\x81\x10a\x02\x16Wa\x02\x15a\x06@V[[\x90P` \x02\x81\x01\x90a\x02(\x91\x90a\x07oV[`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x02E\x92\x91\x90a\x08+V[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x02\\W_\x80\xFD[PZ\xF1\x15\x80\x15a\x02nW=_\x80>=_\xFD[PPPP[\x80\x80`\x01\x01\x91PPa\0\xD1V[PPPPPPPV[_\x84\x84\x90P\x14\x80a\x02\xA0WP\x81\x81\x90P\x84\x84\x90P\x14\x15[\x15a\x02\xD7W`@Q\x7F\x82\xA8sJ\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_[\x84\x84\x90P\x81\x10\x15a\x03\xA3W\x84\x84\x82\x81\x81\x10a\x02\xF7Wa\x02\xF6a\x06@V[[\x90P` \x02\x01` \x81\x01\x90a\x03\x0C\x91\x90a\x078V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x0B\x83$\x9D\x84\x84\x84\x81\x81\x10a\x03:Wa\x039a\x06@V[[\x90P` \x02\x81\x01\x90a\x03L\x91\x90a\x08MV[`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x03i\x92\x91\x90a\n\x07V[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x03\x80W_\x80\xFD[PZ\xF1\x15\x80\x15a\x03\x92W=_\x80>=_\xFD[PPPP\x80\x80`\x01\x01\x91PPa\x02\xD9V[PPPPPV[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\x83`\x1F\x84\x01\x12a\x03\xD3Wa\x03\xD2a\x03\xB2V[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x03\xF0Wa\x03\xEFa\x03\xB6V[[` \x83\x01\x91P\x83` \x82\x02\x83\x01\x11\x15a\x04\x0CWa\x04\x0Ba\x03\xBAV[[\x92P\x92\x90PV[_\x80\x83`\x1F\x84\x01\x12a\x04(Wa\x04'a\x03\xB2V[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x04EWa\x04Da\x03\xB6V[[` \x83\x01\x91P\x83` \x82\x02\x83\x01\x11\x15a\x04aWa\x04`a\x03\xBAV[[\x92P\x92\x90PV[_\x80\x83`\x1F\x84\x01\x12a\x04}Wa\x04|a\x03\xB2V[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x04\x9AWa\x04\x99a\x03\xB6V[[` \x83\x01\x91P\x83` \x82\x02\x83\x01\x11\x15a\x04\xB6Wa\x04\xB5a\x03\xBAV[[\x92P\x92\x90PV[_\x80_\x80_\x80``\x87\x89\x03\x12\x15a\x04\xD7Wa\x04\xD6a\x03\xAAV[[_\x87\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x04\xF4Wa\x04\xF3a\x03\xAEV[[a\x05\0\x89\x82\x8A\x01a\x03\xBEV[\x96P\x96PP` \x87\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x05#Wa\x05\"a\x03\xAEV[[a\x05/\x89\x82\x8A\x01a\x04\x13V[\x94P\x94PP`@\x87\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x05RWa\x05Qa\x03\xAEV[[a\x05^\x89\x82\x8A\x01a\x04hV[\x92P\x92PP\x92\x95P\x92\x95P\x92\x95V[_\x80\x83`\x1F\x84\x01\x12a\x05\x82Wa\x05\x81a\x03\xB2V[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x05\x9FWa\x05\x9Ea\x03\xB6V[[` \x83\x01\x91P\x83` \x82\x02\x83\x01\x11\x15a\x05\xBBWa\x05\xBAa\x03\xBAV[[\x92P\x92\x90PV[_\x80_\x80`@\x85\x87\x03\x12\x15a\x05\xDAWa\x05\xD9a\x03\xAAV[[_\x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x05\xF7Wa\x05\xF6a\x03\xAEV[[a\x06\x03\x87\x82\x88\x01a\x03\xBEV[\x94P\x94PP` \x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x06&Wa\x06%a\x03\xAEV[[a\x062\x87\x82\x88\x01a\x05mV[\x92P\x92PP\x92\x95\x91\x94P\x92PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[_\x81\x15\x15\x90P\x91\x90PV[a\x06\x81\x81a\x06mV[\x81\x14a\x06\x8BW_\x80\xFD[PV[_\x815\x90Pa\x06\x9C\x81a\x06xV[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x06\xB7Wa\x06\xB6a\x03\xAAV[[_a\x06\xC4\x84\x82\x85\x01a\x06\x8EV[\x91PP\x92\x91PPV[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a\x06\xF6\x82a\x06\xCDV[\x90P\x91\x90PV[_a\x07\x07\x82a\x06\xECV[\x90P\x91\x90PV[a\x07\x17\x81a\x06\xFDV[\x81\x14a\x07!W_\x80\xFD[PV[_\x815\x90Pa\x072\x81a\x07\x0EV[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x07MWa\x07La\x03\xAAV[[_a\x07Z\x84\x82\x85\x01a\x07$V[\x91PP\x92\x91PPV[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\x835`\x01` \x03\x846\x03\x03\x81\x12a\x07\x8BWa\x07\x8Aa\x07cV[[\x80\x84\x01\x92P\x825\x91Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x07\xADWa\x07\xACa\x07gV[[` \x83\x01\x92P`\x01\x82\x026\x03\x83\x13\x15a\x07\xC9Wa\x07\xC8a\x07kV[[P\x92P\x92\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[\x82\x81\x837_\x83\x83\x01RPPPV[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[_a\x08\n\x83\x85a\x07\xD1V[\x93Pa\x08\x17\x83\x85\x84a\x07\xE1V[a\x08 \x83a\x07\xEFV[\x84\x01\x90P\x93\x92PPPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\x08D\x81\x84\x86a\x07\xFFV[\x90P\x93\x92PPPV[_\x80\x835`\x01` \x03\x846\x03\x03\x81\x12a\x08iWa\x08ha\x07cV[[\x80\x84\x01\x92P\x825\x91Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x08\x8BWa\x08\x8Aa\x07gV[[` \x83\x01\x92P` \x82\x026\x03\x83\x13\x15a\x08\xA7Wa\x08\xA6a\x07kV[[P\x92P\x92\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_\x81\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_a\x08\xE3\x83\x85a\x08\xC8V[\x93Pa\x08\xF0\x83\x85\x84a\x07\xE1V[a\x08\xF9\x83a\x07\xEFV[\x84\x01\x90P\x93\x92PPPV[_a\t\x10\x84\x84\x84a\x08\xD8V[\x90P\x93\x92PPPV[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\x835`\x01` \x03\x846\x03\x03\x81\x12a\tAWa\t@a\t!V[[\x83\x81\x01\x92P\x825\x91P` \x83\x01\x92Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\tiWa\tha\t\x19V[[`\x01\x82\x026\x03\x83\x13\x15a\t\x7FWa\t~a\t\x1DV[[P\x92P\x92\x90PV[_` \x82\x01\x90P\x91\x90PV[_a\t\x9E\x83\x85a\x08\xAFV[\x93P\x83` \x84\x02\x85\x01a\t\xB0\x84a\x08\xBFV[\x80_[\x87\x81\x10\x15a\t\xF5W\x84\x84\x03\x89Ra\t\xCA\x82\x84a\t%V[a\t\xD5\x86\x82\x84a\t\x04V[\x95Pa\t\xE0\x84a\t\x87V[\x93P` \x8B\x01\x9APPP`\x01\x81\x01\x90Pa\t\xB3V[P\x82\x97P\x87\x94PPPPP\x93\x92PPPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\n \x81\x84\x86a\t\x93V[\x90P\x93\x92PPPV\xFE\xA2dipfsX\"\x12 a\x85D\xE8\xF5SK\xA5;\x06\x99\x94\xB0\x0B\xF7(\xB42\x83h\xC3\x12\xFF\xA4v)\x87\xEE\x19\xB3\xE1\x9CdsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405260043610610021575f3560e01c80635c60da1b1461002c57610022565b5b61002a610056565b005b348015610037575f80fd5b50610040610068565b60405161004d9190610111565b60405180910390f35b61006661006161008c565b6100b3565b565b7f000000000000000000000000000000000000000000000000000000000000000081565b5f7f0000000000000000000000000000000000000000000000000000000000000000905090565b365f80375f80365f845af43d5f803e805f81146100ce573d5ff35b3d5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6100fb826100d2565b9050919050565b61010b816100f1565b82525050565b5f6020820190506101245f830184610102565b9291505056fea2646970667358221220b05e2831229e6da841c8a7d48cbf4c4733ee688cb6b2671e0b0975292d993ed964736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10a\0!W_5`\xE0\x1C\x80c\\`\xDA\x1B\x14a\0,Wa\0\"V[[a\0*a\0VV[\0[4\x80\x15a\x007W_\x80\xFD[Pa\0@a\0hV[`@Qa\0M\x91\x90a\x01\x11V[`@Q\x80\x91\x03\x90\xF3[a\0fa\0aa\0\x8CV[a\0\xB3V[V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81V[_\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90P\x90V[6_\x807_\x806_\x84Z\xF4=_\x80>\x80_\x81\x14a\0\xCEW=_\xF3[=_\xFD[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a\0\xFB\x82a\0\xD2V[\x90P\x91\x90PV[a\x01\x0B\x81a\0\xF1V[\x82RPPV[_` \x82\x01\x90Pa\x01$_\x83\x01\x84a\x01\x02V[\x92\x91PPV\xFE\xA2dipfsX\"\x12 \xB0^(1\"\x9Em\xA8A\xC8\xA7\xD4\x8C\xBFLG3\xEEh\x8C\xB6\xB2g\x1E\x0B\tu)-\x99>\xD9dsolcC\0\x08\x19\x003",
    );
    /**Constructor`.
```solidity
constructor();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {}
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Function with signature `implementation()` and selector `0x5c60da1b`.
```solidity
function implementation() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct implementationCall {}
    ///Container type for the return parameters of the [`implementation()`](implementationCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct implementationReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<implementationCall> for UnderlyingRustTuple<'_> {
                fn from(value: implementationCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for implementationCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<implementationReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: implementationReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for implementationReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for implementationCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = implementationReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "implementation()";
            const SELECTOR: [u8; 4] = [92u8, 96u8, 218u8, 27u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`AtomicSequencer`](self) function calls.
    pub enum AtomicSequencerCalls {
        #[allow(missing_docs)]
        implementation(implementationCall),
    }
    #[automatically_derived]
    impl AtomicSequencerCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[[92u8, 96u8, 218u8, 27u8]];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for AtomicSequencerCalls {
        const NAME: &'static str = "AtomicSequencerCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 1usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::implementation(_) => {
                    <implementationCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<AtomicSequencerCalls>] = &[
                {
                    fn implementation(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AtomicSequencerCalls> {
                        <implementationCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AtomicSequencerCalls::implementation)
                    }
                    implementation
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::implementation(inner) => {
                    <implementationCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::implementation(inner) => {
                    <implementationCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`AtomicSequencer`](self) contract instance.

See the [wrapper's documentation](`AtomicSequencerInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> AtomicSequencerInstance<T, P, N> {
        AtomicSequencerInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<AtomicSequencerInstance<T, P, N>>,
    > {
        AtomicSequencerInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        AtomicSequencerInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`AtomicSequencer`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`AtomicSequencer`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct AtomicSequencerInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for AtomicSequencerInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("AtomicSequencerInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AtomicSequencerInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`AtomicSequencer`](self) contract instance.

See the [wrapper's documentation](`AtomicSequencerInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<AtomicSequencerInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> AtomicSequencerInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> AtomicSequencerInstance<T, P, N> {
            AtomicSequencerInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AtomicSequencerInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`implementation`] function.
        pub fn implementation(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, implementationCall, N> {
            self.call_builder(&implementationCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AtomicSequencerInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
