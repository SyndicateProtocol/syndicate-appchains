/**

Generated by the following Solidity interface...
```solidity
interface AtomicSequencer {
    constructor();

    fallback() external payable;

    function implementation() external view returns (address);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "fallback",
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "implementation",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod AtomicSequencer {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60a0604052348015600e575f80fd5b506040516019906042565b604051809103905ff0801580156031573d5f803e3d5ffd5b506001600160a01b0316608052604f565b6106418061015683390190565b60805160ec61006a5f395f8181603201526074015260ec5ff3fe608060405260043610601b575f3560e01c80635c60da1b146023575b60216070565b005b348015602d575f80fd5b5060547f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b60977f00000000000000000000000000000000000000000000000000000000000000006099565b565b365f80375f80365f845af43d5f803e80801560b2573d5ff35b3d5ffdfea2646970667358221220f1c762e2998bd13d33d4ed74d26234057318c06ea081500e803900bc212a548564736f6c634300081900336080604052348015600e575f80fd5b506106258061001c5f395ff3fe608060405234801561000f575f80fd5b5060043610610034575f3560e01c806334993fa3146100385780636bae6e1c1461004d575b5f80fd5b61004b610046366004610331565b610060565b005b61004b61005b3660046103c4565b610229565b84158061006d5750848314155b806100785750848114155b156100965760405163415439a560e11b815260040160405180910390fd5b5f5b85811015610220578282828181106100b2576100b261042b565b90506020020160208101906100c7919061043f565b15610174578686828181106100de576100de61042b565b90506020020160208101906100f39190610465565b6001600160a01b0316633514d37b8686848181106101135761011361042b565b9050602002810190610125919061048b565b6040518363ffffffff1660e01b81526004016101429291906104f6565b5f604051808303815f87803b158015610159575f80fd5b505af115801561016b573d5f803e3d5ffd5b50505050610218565b8686828181106101865761018661042b565b905060200201602081019061019b9190610465565b6001600160a01b03166346e2cc098686848181106101bb576101bb61042b565b90506020028101906101cd919061048b565b6040518363ffffffff1660e01b81526004016101ea9291906104f6565b5f604051808303815f87803b158015610201575f80fd5b505af1158015610213573d5f803e3d5ffd5b505050505b600101610098565b50505050505050565b5f5b838110156102e2578484828181106102455761024561042b565b905060200201602081019061025a9190610465565b6001600160a01b0316630b83249d84848481811061027a5761027a61042b565b905060200281019061028c9190610511565b6040518363ffffffff1660e01b81526004016102a9929190610557565b5f604051808303815f87803b1580156102c0575f80fd5b505af11580156102d2573d5f803e3d5ffd5b50506001909201915061022b9050565b5050505050565b5f8083601f8401126102f9575f80fd5b50813567ffffffffffffffff811115610310575f80fd5b6020830191508360208260051b850101111561032a575f80fd5b9250929050565b5f805f805f8060608789031215610346575f80fd5b863567ffffffffffffffff8082111561035d575f80fd5b6103698a838b016102e9565b90985096506020890135915080821115610381575f80fd5b61038d8a838b016102e9565b909650945060408901359150808211156103a5575f80fd5b506103b289828a016102e9565b979a9699509497509295939492505050565b5f805f80604085870312156103d7575f80fd5b843567ffffffffffffffff808211156103ee575f80fd5b6103fa888389016102e9565b90965094506020870135915080821115610412575f80fd5b5061041f878288016102e9565b95989497509550505050565b634e487b7160e01b5f52603260045260245ffd5b5f6020828403121561044f575f80fd5b8135801515811461045e575f80fd5b9392505050565b5f60208284031215610475575f80fd5b81356001600160a01b038116811461045e575f80fd5b5f808335601e198436030181126104a0575f80fd5b83018035915067ffffffffffffffff8211156104ba575f80fd5b60200191503681900382131561032a575f80fd5b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b602081525f6105096020830184866104ce565b949350505050565b5f808335601e19843603018112610526575f80fd5b83018035915067ffffffffffffffff821115610540575f80fd5b6020019150600581901b360382131561032a575f80fd5b60208082528181018390525f906040600585901b8401810190840186845b878110156105e257868403603f190183528135368a9003601e1901811261059a575f80fd5b8901858101903567ffffffffffffffff8111156105b5575f80fd5b8036038213156105c3575f80fd5b6105ce8682846104ce565b955050509184019190840190600101610575565b509197965050505050505056fea264697066735822122093f6f4368cfb9fa96dc702ebe2441b2701a57a05c4b18e2078e5a8383fae653a64736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xA0`@R4\x80\x15`\x0EW_\x80\xFD[P`@Q`\x19\x90`BV[`@Q\x80\x91\x03\x90_\xF0\x80\x15\x80\x15`1W=_\x80>=_\xFD[P`\x01`\x01`\xA0\x1B\x03\x16`\x80R`OV[a\x06A\x80a\x01V\x839\x01\x90V[`\x80Q`\xECa\0j_9_\x81\x81`2\x01R`t\x01R`\xEC_\xF3\xFE`\x80`@R`\x046\x10`\x1BW_5`\xE0\x1C\x80c\\`\xDA\x1B\x14`#W[`!`pV[\0[4\x80\x15`-W_\x80\xFD[P`T\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01`@Q\x80\x91\x03\x90\xF3[`\x97\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x99V[V[6_\x807_\x806_\x84Z\xF4=_\x80>\x80\x80\x15`\xB2W=_\xF3[=_\xFD\xFE\xA2dipfsX\"\x12 \xF1\xC7b\xE2\x99\x8B\xD1=3\xD4\xEDt\xD2b4\x05s\x18\xC0n\xA0\x81P\x0E\x809\0\xBC!*T\x85dsolcC\0\x08\x19\x003`\x80`@R4\x80\x15`\x0EW_\x80\xFD[Pa\x06%\x80a\0\x1C_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\x004W_5`\xE0\x1C\x80c4\x99?\xA3\x14a\08W\x80ck\xAEn\x1C\x14a\0MW[_\x80\xFD[a\0Ka\0F6`\x04a\x031V[a\0`V[\0[a\0Ka\0[6`\x04a\x03\xC4V[a\x02)V[\x84\x15\x80a\0mWP\x84\x83\x14\x15[\x80a\0xWP\x84\x81\x14\x15[\x15a\0\x96W`@QcAT9\xA5`\xE1\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_[\x85\x81\x10\x15a\x02 W\x82\x82\x82\x81\x81\x10a\0\xB2Wa\0\xB2a\x04+V[\x90P` \x02\x01` \x81\x01\x90a\0\xC7\x91\x90a\x04?V[\x15a\x01tW\x86\x86\x82\x81\x81\x10a\0\xDEWa\0\xDEa\x04+V[\x90P` \x02\x01` \x81\x01\x90a\0\xF3\x91\x90a\x04eV[`\x01`\x01`\xA0\x1B\x03\x16c5\x14\xD3{\x86\x86\x84\x81\x81\x10a\x01\x13Wa\x01\x13a\x04+V[\x90P` \x02\x81\x01\x90a\x01%\x91\x90a\x04\x8BV[`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x01B\x92\x91\x90a\x04\xF6V[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x01YW_\x80\xFD[PZ\xF1\x15\x80\x15a\x01kW=_\x80>=_\xFD[PPPPa\x02\x18V[\x86\x86\x82\x81\x81\x10a\x01\x86Wa\x01\x86a\x04+V[\x90P` \x02\x01` \x81\x01\x90a\x01\x9B\x91\x90a\x04eV[`\x01`\x01`\xA0\x1B\x03\x16cF\xE2\xCC\t\x86\x86\x84\x81\x81\x10a\x01\xBBWa\x01\xBBa\x04+V[\x90P` \x02\x81\x01\x90a\x01\xCD\x91\x90a\x04\x8BV[`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x01\xEA\x92\x91\x90a\x04\xF6V[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x02\x01W_\x80\xFD[PZ\xF1\x15\x80\x15a\x02\x13W=_\x80>=_\xFD[PPPP[`\x01\x01a\0\x98V[PPPPPPPV[_[\x83\x81\x10\x15a\x02\xE2W\x84\x84\x82\x81\x81\x10a\x02EWa\x02Ea\x04+V[\x90P` \x02\x01` \x81\x01\x90a\x02Z\x91\x90a\x04eV[`\x01`\x01`\xA0\x1B\x03\x16c\x0B\x83$\x9D\x84\x84\x84\x81\x81\x10a\x02zWa\x02za\x04+V[\x90P` \x02\x81\x01\x90a\x02\x8C\x91\x90a\x05\x11V[`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x02\xA9\x92\x91\x90a\x05WV[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x02\xC0W_\x80\xFD[PZ\xF1\x15\x80\x15a\x02\xD2W=_\x80>=_\xFD[PP`\x01\x90\x92\x01\x91Pa\x02+\x90PV[PPPPPV[_\x80\x83`\x1F\x84\x01\x12a\x02\xF9W_\x80\xFD[P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x03\x10W_\x80\xFD[` \x83\x01\x91P\x83` \x82`\x05\x1B\x85\x01\x01\x11\x15a\x03*W_\x80\xFD[\x92P\x92\x90PV[_\x80_\x80_\x80``\x87\x89\x03\x12\x15a\x03FW_\x80\xFD[\x865g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x03]W_\x80\xFD[a\x03i\x8A\x83\x8B\x01a\x02\xE9V[\x90\x98P\x96P` \x89\x015\x91P\x80\x82\x11\x15a\x03\x81W_\x80\xFD[a\x03\x8D\x8A\x83\x8B\x01a\x02\xE9V[\x90\x96P\x94P`@\x89\x015\x91P\x80\x82\x11\x15a\x03\xA5W_\x80\xFD[Pa\x03\xB2\x89\x82\x8A\x01a\x02\xE9V[\x97\x9A\x96\x99P\x94\x97P\x92\x95\x93\x94\x92PPPV[_\x80_\x80`@\x85\x87\x03\x12\x15a\x03\xD7W_\x80\xFD[\x845g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x03\xEEW_\x80\xFD[a\x03\xFA\x88\x83\x89\x01a\x02\xE9V[\x90\x96P\x94P` \x87\x015\x91P\x80\x82\x11\x15a\x04\x12W_\x80\xFD[Pa\x04\x1F\x87\x82\x88\x01a\x02\xE9V[\x95\x98\x94\x97P\x95PPPPV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_` \x82\x84\x03\x12\x15a\x04OW_\x80\xFD[\x815\x80\x15\x15\x81\x14a\x04^W_\x80\xFD[\x93\x92PPPV[_` \x82\x84\x03\x12\x15a\x04uW_\x80\xFD[\x815`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x04^W_\x80\xFD[_\x80\x835`\x1E\x19\x846\x03\x01\x81\x12a\x04\xA0W_\x80\xFD[\x83\x01\x805\x91Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x04\xBAW_\x80\xFD[` \x01\x91P6\x81\x90\x03\x82\x13\x15a\x03*W_\x80\xFD[\x81\x83R\x81\x81` \x85\x017P_\x82\x82\x01` \x90\x81\x01\x91\x90\x91R`\x1F\x90\x91\x01`\x1F\x19\x16\x90\x91\x01\x01\x90V[` \x81R_a\x05\t` \x83\x01\x84\x86a\x04\xCEV[\x94\x93PPPPV[_\x80\x835`\x1E\x19\x846\x03\x01\x81\x12a\x05&W_\x80\xFD[\x83\x01\x805\x91Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x05@W_\x80\xFD[` \x01\x91P`\x05\x81\x90\x1B6\x03\x82\x13\x15a\x03*W_\x80\xFD[` \x80\x82R\x81\x81\x01\x83\x90R_\x90`@`\x05\x85\x90\x1B\x84\x01\x81\x01\x90\x84\x01\x86\x84[\x87\x81\x10\x15a\x05\xE2W\x86\x84\x03`?\x19\x01\x83R\x8156\x8A\x90\x03`\x1E\x19\x01\x81\x12a\x05\x9AW_\x80\xFD[\x89\x01\x85\x81\x01\x905g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x05\xB5W_\x80\xFD[\x806\x03\x82\x13\x15a\x05\xC3W_\x80\xFD[a\x05\xCE\x86\x82\x84a\x04\xCEV[\x95PPP\x91\x84\x01\x91\x90\x84\x01\x90`\x01\x01a\x05uV[P\x91\x97\x96PPPPPPPV\xFE\xA2dipfsX\"\x12 \x93\xF6\xF46\x8C\xFB\x9F\xA9m\xC7\x02\xEB\xE2D\x1B'\x01\xA5z\x05\xC4\xB1\x8E x\xE5\xA88?\xAEe:dsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405260043610601b575f3560e01c80635c60da1b146023575b60216070565b005b348015602d575f80fd5b5060547f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b60977f00000000000000000000000000000000000000000000000000000000000000006099565b565b365f80375f80365f845af43d5f803e80801560b2573d5ff35b3d5ffdfea2646970667358221220f1c762e2998bd13d33d4ed74d26234057318c06ea081500e803900bc212a548564736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10`\x1BW_5`\xE0\x1C\x80c\\`\xDA\x1B\x14`#W[`!`pV[\0[4\x80\x15`-W_\x80\xFD[P`T\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01`@Q\x80\x91\x03\x90\xF3[`\x97\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x99V[V[6_\x807_\x806_\x84Z\xF4=_\x80>\x80\x80\x15`\xB2W=_\xF3[=_\xFD\xFE\xA2dipfsX\"\x12 \xF1\xC7b\xE2\x99\x8B\xD1=3\xD4\xEDt\xD2b4\x05s\x18\xC0n\xA0\x81P\x0E\x809\0\xBC!*T\x85dsolcC\0\x08\x19\x003",
    );
    /**Constructor`.
```solidity
constructor();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {}
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Function with signature `implementation()` and selector `0x5c60da1b`.
```solidity
function implementation() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct implementationCall {}
    ///Container type for the return parameters of the [`implementation()`](implementationCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct implementationReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<implementationCall> for UnderlyingRustTuple<'_> {
                fn from(value: implementationCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for implementationCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<implementationReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: implementationReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for implementationReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for implementationCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = implementationReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "implementation()";
            const SELECTOR: [u8; 4] = [92u8, 96u8, 218u8, 27u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`AtomicSequencer`](self) function calls.
    pub enum AtomicSequencerCalls {
        implementation(implementationCall),
    }
    #[automatically_derived]
    impl AtomicSequencerCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[[92u8, 96u8, 218u8, 27u8]];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for AtomicSequencerCalls {
        const NAME: &'static str = "AtomicSequencerCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 1usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::implementation(_) => {
                    <implementationCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<AtomicSequencerCalls>] = &[
                {
                    fn implementation(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AtomicSequencerCalls> {
                        <implementationCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AtomicSequencerCalls::implementation)
                    }
                    implementation
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::implementation(inner) => {
                    <implementationCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::implementation(inner) => {
                    <implementationCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`AtomicSequencer`](self) contract instance.

See the [wrapper's documentation](`AtomicSequencerInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> AtomicSequencerInstance<T, P, N> {
        AtomicSequencerInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<AtomicSequencerInstance<T, P, N>>,
    > {
        AtomicSequencerInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        AtomicSequencerInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`AtomicSequencer`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`AtomicSequencer`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct AtomicSequencerInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for AtomicSequencerInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("AtomicSequencerInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AtomicSequencerInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`AtomicSequencer`](self) contract instance.

See the [wrapper's documentation](`AtomicSequencerInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<AtomicSequencerInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> AtomicSequencerInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> AtomicSequencerInstance<T, P, N> {
            AtomicSequencerInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AtomicSequencerInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`implementation`] function.
        pub fn implementation(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, implementationCall, N> {
            self.call_builder(&implementationCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AtomicSequencerInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
