/**

Generated by the following Solidity interface...
```solidity
interface AtomicSequencerImplementation {
    error InputLengthMismatchError();

    function processBulkTransactionsAtomically(address[] memory chains, bytes[][] memory transactions) external;
    function processTransactionsAtomically(address[] memory chains, bytes[] memory transactions, bool[] memory isRaw) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "processBulkTransactionsAtomically",
    "inputs": [
      {
        "name": "chains",
        "type": "address[]",
        "internalType": "contract MetabasedSequencerChain[]"
      },
      {
        "name": "transactions",
        "type": "bytes[][]",
        "internalType": "bytes[][]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransactionsAtomically",
    "inputs": [
      {
        "name": "chains",
        "type": "address[]",
        "internalType": "contract MetabasedSequencerChain[]"
      },
      {
        "name": "transactions",
        "type": "bytes[]",
        "internalType": "bytes[]"
      },
      {
        "name": "isRaw",
        "type": "bool[]",
        "internalType": "bool[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "error",
    "name": "InputLengthMismatchError",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod AtomicSequencerImplementation {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608080604052346015576104f3908161001a8239f35b5f80fdfe60a0604060805280608051526004908136101561001a575f80fd5b5f3560e01c90816334993fa3146102065750636bae6e1c1461003a575f80fd5b346101d3576080513660031901126101d35767ffffffffffffffff81358181116101d35761006b90369084016103ca565b91906024358281116101d35761008490369086016103ca565b929091841580156101fc575b6101ea575f5b85811061009f57005b6001600160a01b036100ba6100b58389866103fb565b61041f565b1690858110156101d75760059181831b860135601e19873603018112156101d35786019283358681116101d3578060208601921b9081360383136101d357833b156101d35760805151630b83249d60e01b81526020818e01526024810182905295869392840160449081019392908501915f5b82811061017457505050505091815f81819503925af191821561016857600192610159575b5001610096565b61016290610475565b5f610152565b608051513d5f823e3d90fd5b9193955091936043198982030185528535603e19843603018112156101d35783019060208201359160805101918c81116101d35780360383136101d3576101c1602092839260019561049d565b9701950191019188959493919261012d565b5f80fd5b603288634e487b7160e01b5f525260245ffd5b6080515163415439a560e11b81528690fd5b5083851415610090565b9050346101d35760603660031901126101d35767ffffffffffffffff9180358381116101d35761023990369083016103ca565b6024916024358681116101d35761025390369086016103ca565b90966044359081116101d35761026c90369087016103ca565b9096841580156103c0575b80156103b6575b6103a857505f5b84811061028e57005b61029981838a6103fb565b3580151581036101d35715610329576001600160a01b036102be6100b58388886103fb565b16906102cb81858c610433565b9290813b156101d3575f916020838c6102ff8d9560805151998a9788968795633514d37b60e01b875286015284019161049d565b03925af19182156101685760019261031a575b505b01610285565b61032390610475565b5f610312565b6001600160a01b0361033f6100b58388886103fb565b169061034c81858c610433565b9290813b156101d3575f916020838c6103808d9560805151998a97889687956346e2cc0960e01b875286015284019161049d565b03925af191821561016857600192610399575b50610314565b6103a290610475565b5f610393565b63415439a560e11b81528690fd5b508185141561027e565b5082851415610277565b9181601f840112156101d35782359167ffffffffffffffff83116101d3576020808501948460051b0101116101d357565b919081101561040b5760051b0190565b634e487b7160e01b5f52603260045260245ffd5b356001600160a01b03811681036101d35790565b919081101561040b5760051b81013590601e19813603018212156101d357019081359167ffffffffffffffff83116101d35760200182360381136101d3579190565b67ffffffffffffffff811161048957604052565b634e487b7160e01b5f52604160045260245ffd5b908060209392818452848401375f828201840152601f01601f191601019056fea264697066735822122072b3a7e20458f8a574575f38db46392608236b39c313c22746eee78d8797b32b64736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80\x80`@R4`\x15Wa\x04\xF3\x90\x81a\0\x1A\x829\xF3[_\x80\xFD\xFE`\xA0`@`\x80R\x80`\x80QR`\x04\x90\x816\x10\x15a\0\x1AW_\x80\xFD[_5`\xE0\x1C\x90\x81c4\x99?\xA3\x14a\x02\x06WPck\xAEn\x1C\x14a\0:W_\x80\xFD[4a\x01\xD3W`\x80Q6`\x03\x19\x01\x12a\x01\xD3Wg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x815\x81\x81\x11a\x01\xD3Wa\0k\x906\x90\x84\x01a\x03\xCAV[\x91\x90`$5\x82\x81\x11a\x01\xD3Wa\0\x84\x906\x90\x86\x01a\x03\xCAV[\x92\x90\x91\x84\x15\x80\x15a\x01\xFCW[a\x01\xEAW_[\x85\x81\x10a\0\x9FW\0[`\x01`\x01`\xA0\x1B\x03a\0\xBAa\0\xB5\x83\x89\x86a\x03\xFBV[a\x04\x1FV[\x16\x90\x85\x81\x10\x15a\x01\xD7W`\x05\x91\x81\x83\x1B\x86\x015`\x1E\x19\x876\x03\x01\x81\x12\x15a\x01\xD3W\x86\x01\x92\x835\x86\x81\x11a\x01\xD3W\x80` \x86\x01\x92\x1B\x90\x816\x03\x83\x13a\x01\xD3W\x83;\x15a\x01\xD3W`\x80QQc\x0B\x83$\x9D`\xE0\x1B\x81R` \x81\x8E\x01R`$\x81\x01\x82\x90R\x95\x86\x93\x92\x84\x01`D\x90\x81\x01\x93\x92\x90\x85\x01\x91_[\x82\x81\x10a\x01tWPPPPP\x91\x81_\x81\x81\x95\x03\x92Z\xF1\x91\x82\x15a\x01hW`\x01\x92a\x01YW[P\x01a\0\x96V[a\x01b\x90a\x04uV[_a\x01RV[`\x80QQ=_\x82>=\x90\xFD[\x91\x93\x95P\x91\x93`C\x19\x89\x82\x03\x01\x85R\x855`>\x19\x846\x03\x01\x81\x12\x15a\x01\xD3W\x83\x01\x90` \x82\x015\x91`\x80Q\x01\x91\x8C\x81\x11a\x01\xD3W\x806\x03\x83\x13a\x01\xD3Wa\x01\xC1` \x92\x83\x92`\x01\x95a\x04\x9DV[\x97\x01\x95\x01\x91\x01\x91\x88\x95\x94\x93\x91\x92a\x01-V[_\x80\xFD[`2\x88cNH{q`\xE0\x1B_RR`$_\xFD[`\x80QQcAT9\xA5`\xE1\x1B\x81R\x86\x90\xFD[P\x83\x85\x14\x15a\0\x90V[\x90P4a\x01\xD3W``6`\x03\x19\x01\x12a\x01\xD3Wg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91\x805\x83\x81\x11a\x01\xD3Wa\x029\x906\x90\x83\x01a\x03\xCAV[`$\x91`$5\x86\x81\x11a\x01\xD3Wa\x02S\x906\x90\x86\x01a\x03\xCAV[\x90\x96`D5\x90\x81\x11a\x01\xD3Wa\x02l\x906\x90\x87\x01a\x03\xCAV[\x90\x96\x84\x15\x80\x15a\x03\xC0W[\x80\x15a\x03\xB6W[a\x03\xA8WP_[\x84\x81\x10a\x02\x8EW\0[a\x02\x99\x81\x83\x8Aa\x03\xFBV[5\x80\x15\x15\x81\x03a\x01\xD3W\x15a\x03)W`\x01`\x01`\xA0\x1B\x03a\x02\xBEa\0\xB5\x83\x88\x88a\x03\xFBV[\x16\x90a\x02\xCB\x81\x85\x8Ca\x043V[\x92\x90\x81;\x15a\x01\xD3W_\x91` \x83\x8Ca\x02\xFF\x8D\x95`\x80QQ\x99\x8A\x97\x88\x96\x87\x95c5\x14\xD3{`\xE0\x1B\x87R\x86\x01R\x84\x01\x91a\x04\x9DV[\x03\x92Z\xF1\x91\x82\x15a\x01hW`\x01\x92a\x03\x1AW[P[\x01a\x02\x85V[a\x03#\x90a\x04uV[_a\x03\x12V[`\x01`\x01`\xA0\x1B\x03a\x03?a\0\xB5\x83\x88\x88a\x03\xFBV[\x16\x90a\x03L\x81\x85\x8Ca\x043V[\x92\x90\x81;\x15a\x01\xD3W_\x91` \x83\x8Ca\x03\x80\x8D\x95`\x80QQ\x99\x8A\x97\x88\x96\x87\x95cF\xE2\xCC\t`\xE0\x1B\x87R\x86\x01R\x84\x01\x91a\x04\x9DV[\x03\x92Z\xF1\x91\x82\x15a\x01hW`\x01\x92a\x03\x99W[Pa\x03\x14V[a\x03\xA2\x90a\x04uV[_a\x03\x93V[cAT9\xA5`\xE1\x1B\x81R\x86\x90\xFD[P\x81\x85\x14\x15a\x02~V[P\x82\x85\x14\x15a\x02wV[\x91\x81`\x1F\x84\x01\x12\x15a\x01\xD3W\x825\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01\xD3W` \x80\x85\x01\x94\x84`\x05\x1B\x01\x01\x11a\x01\xD3WV[\x91\x90\x81\x10\x15a\x04\x0BW`\x05\x1B\x01\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[5`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x03a\x01\xD3W\x90V[\x91\x90\x81\x10\x15a\x04\x0BW`\x05\x1B\x81\x015\x90`\x1E\x19\x816\x03\x01\x82\x12\x15a\x01\xD3W\x01\x90\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01\xD3W` \x01\x826\x03\x81\x13a\x01\xD3W\x91\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04\x89W`@RV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90\x80` \x93\x92\x81\x84R\x84\x84\x017_\x82\x82\x01\x84\x01R`\x1F\x01`\x1F\x19\x16\x01\x01\x90V\xFE\xA2dipfsX\"\x12 r\xB3\xA7\xE2\x04X\xF8\xA5tW_8\xDBF9&\x08#k9\xC3\x13\xC2'F\xEE\xE7\x8D\x87\x97\xB3+dsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60a0604060805280608051526004908136101561001a575f80fd5b5f3560e01c90816334993fa3146102065750636bae6e1c1461003a575f80fd5b346101d3576080513660031901126101d35767ffffffffffffffff81358181116101d35761006b90369084016103ca565b91906024358281116101d35761008490369086016103ca565b929091841580156101fc575b6101ea575f5b85811061009f57005b6001600160a01b036100ba6100b58389866103fb565b61041f565b1690858110156101d75760059181831b860135601e19873603018112156101d35786019283358681116101d3578060208601921b9081360383136101d357833b156101d35760805151630b83249d60e01b81526020818e01526024810182905295869392840160449081019392908501915f5b82811061017457505050505091815f81819503925af191821561016857600192610159575b5001610096565b61016290610475565b5f610152565b608051513d5f823e3d90fd5b9193955091936043198982030185528535603e19843603018112156101d35783019060208201359160805101918c81116101d35780360383136101d3576101c1602092839260019561049d565b9701950191019188959493919261012d565b5f80fd5b603288634e487b7160e01b5f525260245ffd5b6080515163415439a560e11b81528690fd5b5083851415610090565b9050346101d35760603660031901126101d35767ffffffffffffffff9180358381116101d35761023990369083016103ca565b6024916024358681116101d35761025390369086016103ca565b90966044359081116101d35761026c90369087016103ca565b9096841580156103c0575b80156103b6575b6103a857505f5b84811061028e57005b61029981838a6103fb565b3580151581036101d35715610329576001600160a01b036102be6100b58388886103fb565b16906102cb81858c610433565b9290813b156101d3575f916020838c6102ff8d9560805151998a9788968795633514d37b60e01b875286015284019161049d565b03925af19182156101685760019261031a575b505b01610285565b61032390610475565b5f610312565b6001600160a01b0361033f6100b58388886103fb565b169061034c81858c610433565b9290813b156101d3575f916020838c6103808d9560805151998a97889687956346e2cc0960e01b875286015284019161049d565b03925af191821561016857600192610399575b50610314565b6103a290610475565b5f610393565b63415439a560e11b81528690fd5b508185141561027e565b5082851415610277565b9181601f840112156101d35782359167ffffffffffffffff83116101d3576020808501948460051b0101116101d357565b919081101561040b5760051b0190565b634e487b7160e01b5f52603260045260245ffd5b356001600160a01b03811681036101d35790565b919081101561040b5760051b81013590601e19813603018212156101d357019081359167ffffffffffffffff83116101d35760200182360381136101d3579190565b67ffffffffffffffff811161048957604052565b634e487b7160e01b5f52604160045260245ffd5b908060209392818452848401375f828201840152601f01601f191601019056fea264697066735822122072b3a7e20458f8a574575f38db46392608236b39c313c22746eee78d8797b32b64736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xA0`@`\x80R\x80`\x80QR`\x04\x90\x816\x10\x15a\0\x1AW_\x80\xFD[_5`\xE0\x1C\x90\x81c4\x99?\xA3\x14a\x02\x06WPck\xAEn\x1C\x14a\0:W_\x80\xFD[4a\x01\xD3W`\x80Q6`\x03\x19\x01\x12a\x01\xD3Wg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x815\x81\x81\x11a\x01\xD3Wa\0k\x906\x90\x84\x01a\x03\xCAV[\x91\x90`$5\x82\x81\x11a\x01\xD3Wa\0\x84\x906\x90\x86\x01a\x03\xCAV[\x92\x90\x91\x84\x15\x80\x15a\x01\xFCW[a\x01\xEAW_[\x85\x81\x10a\0\x9FW\0[`\x01`\x01`\xA0\x1B\x03a\0\xBAa\0\xB5\x83\x89\x86a\x03\xFBV[a\x04\x1FV[\x16\x90\x85\x81\x10\x15a\x01\xD7W`\x05\x91\x81\x83\x1B\x86\x015`\x1E\x19\x876\x03\x01\x81\x12\x15a\x01\xD3W\x86\x01\x92\x835\x86\x81\x11a\x01\xD3W\x80` \x86\x01\x92\x1B\x90\x816\x03\x83\x13a\x01\xD3W\x83;\x15a\x01\xD3W`\x80QQc\x0B\x83$\x9D`\xE0\x1B\x81R` \x81\x8E\x01R`$\x81\x01\x82\x90R\x95\x86\x93\x92\x84\x01`D\x90\x81\x01\x93\x92\x90\x85\x01\x91_[\x82\x81\x10a\x01tWPPPPP\x91\x81_\x81\x81\x95\x03\x92Z\xF1\x91\x82\x15a\x01hW`\x01\x92a\x01YW[P\x01a\0\x96V[a\x01b\x90a\x04uV[_a\x01RV[`\x80QQ=_\x82>=\x90\xFD[\x91\x93\x95P\x91\x93`C\x19\x89\x82\x03\x01\x85R\x855`>\x19\x846\x03\x01\x81\x12\x15a\x01\xD3W\x83\x01\x90` \x82\x015\x91`\x80Q\x01\x91\x8C\x81\x11a\x01\xD3W\x806\x03\x83\x13a\x01\xD3Wa\x01\xC1` \x92\x83\x92`\x01\x95a\x04\x9DV[\x97\x01\x95\x01\x91\x01\x91\x88\x95\x94\x93\x91\x92a\x01-V[_\x80\xFD[`2\x88cNH{q`\xE0\x1B_RR`$_\xFD[`\x80QQcAT9\xA5`\xE1\x1B\x81R\x86\x90\xFD[P\x83\x85\x14\x15a\0\x90V[\x90P4a\x01\xD3W``6`\x03\x19\x01\x12a\x01\xD3Wg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91\x805\x83\x81\x11a\x01\xD3Wa\x029\x906\x90\x83\x01a\x03\xCAV[`$\x91`$5\x86\x81\x11a\x01\xD3Wa\x02S\x906\x90\x86\x01a\x03\xCAV[\x90\x96`D5\x90\x81\x11a\x01\xD3Wa\x02l\x906\x90\x87\x01a\x03\xCAV[\x90\x96\x84\x15\x80\x15a\x03\xC0W[\x80\x15a\x03\xB6W[a\x03\xA8WP_[\x84\x81\x10a\x02\x8EW\0[a\x02\x99\x81\x83\x8Aa\x03\xFBV[5\x80\x15\x15\x81\x03a\x01\xD3W\x15a\x03)W`\x01`\x01`\xA0\x1B\x03a\x02\xBEa\0\xB5\x83\x88\x88a\x03\xFBV[\x16\x90a\x02\xCB\x81\x85\x8Ca\x043V[\x92\x90\x81;\x15a\x01\xD3W_\x91` \x83\x8Ca\x02\xFF\x8D\x95`\x80QQ\x99\x8A\x97\x88\x96\x87\x95c5\x14\xD3{`\xE0\x1B\x87R\x86\x01R\x84\x01\x91a\x04\x9DV[\x03\x92Z\xF1\x91\x82\x15a\x01hW`\x01\x92a\x03\x1AW[P[\x01a\x02\x85V[a\x03#\x90a\x04uV[_a\x03\x12V[`\x01`\x01`\xA0\x1B\x03a\x03?a\0\xB5\x83\x88\x88a\x03\xFBV[\x16\x90a\x03L\x81\x85\x8Ca\x043V[\x92\x90\x81;\x15a\x01\xD3W_\x91` \x83\x8Ca\x03\x80\x8D\x95`\x80QQ\x99\x8A\x97\x88\x96\x87\x95cF\xE2\xCC\t`\xE0\x1B\x87R\x86\x01R\x84\x01\x91a\x04\x9DV[\x03\x92Z\xF1\x91\x82\x15a\x01hW`\x01\x92a\x03\x99W[Pa\x03\x14V[a\x03\xA2\x90a\x04uV[_a\x03\x93V[cAT9\xA5`\xE1\x1B\x81R\x86\x90\xFD[P\x81\x85\x14\x15a\x02~V[P\x82\x85\x14\x15a\x02wV[\x91\x81`\x1F\x84\x01\x12\x15a\x01\xD3W\x825\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01\xD3W` \x80\x85\x01\x94\x84`\x05\x1B\x01\x01\x11a\x01\xD3WV[\x91\x90\x81\x10\x15a\x04\x0BW`\x05\x1B\x01\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[5`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x03a\x01\xD3W\x90V[\x91\x90\x81\x10\x15a\x04\x0BW`\x05\x1B\x81\x015\x90`\x1E\x19\x816\x03\x01\x82\x12\x15a\x01\xD3W\x01\x90\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01\xD3W` \x01\x826\x03\x81\x13a\x01\xD3W\x91\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04\x89W`@RV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90\x80` \x93\x92\x81\x84R\x84\x84\x017_\x82\x82\x01\x84\x01R`\x1F\x01`\x1F\x19\x16\x01\x01\x90V\xFE\xA2dipfsX\"\x12 r\xB3\xA7\xE2\x04X\xF8\xA5tW_8\xDBF9&\x08#k9\xC3\x13\xC2'F\xEE\xE7\x8D\x87\x97\xB3+dsolcC\0\x08\x19\x003",
    );
    /**Custom error with signature `InputLengthMismatchError()` and selector `0x82a8734a`.
```solidity
error InputLengthMismatchError();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InputLengthMismatchError {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InputLengthMismatchError>
        for UnderlyingRustTuple<'_> {
            fn from(value: InputLengthMismatchError) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for InputLengthMismatchError {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InputLengthMismatchError {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InputLengthMismatchError()";
            const SELECTOR: [u8; 4] = [130u8, 168u8, 115u8, 74u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Function with signature `processBulkTransactionsAtomically(address[],bytes[][])` and selector `0x6bae6e1c`.
```solidity
function processBulkTransactionsAtomically(address[] memory chains, bytes[][] memory transactions) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processBulkTransactionsAtomicallyCall {
        pub chains: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
        pub transactions: alloy::sol_types::private::Vec<
            alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
        >,
    }
    ///Container type for the return parameters of the [`processBulkTransactionsAtomically(address[],bytes[][])`](processBulkTransactionsAtomicallyCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processBulkTransactionsAtomicallyReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
                alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
                >,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processBulkTransactionsAtomicallyCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: processBulkTransactionsAtomicallyCall) -> Self {
                    (value.chains, value.transactions)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processBulkTransactionsAtomicallyCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        chains: tuple.0,
                        transactions: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processBulkTransactionsAtomicallyReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: processBulkTransactionsAtomicallyReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processBulkTransactionsAtomicallyReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processBulkTransactionsAtomicallyCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
                alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
                >,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processBulkTransactionsAtomicallyReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processBulkTransactionsAtomically(address[],bytes[][])";
            const SELECTOR: [u8; 4] = [107u8, 174u8, 110u8, 28u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(&self.chains),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Array<
                            alloy::sol_types::sol_data::Bytes,
                        >,
                    > as alloy_sol_types::SolType>::tokenize(&self.transactions),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransactionsAtomically(address[],bytes[],bool[])` and selector `0x34993fa3`.
```solidity
function processTransactionsAtomically(address[] memory chains, bytes[] memory transactions, bool[] memory isRaw) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionsAtomicallyCall {
        pub chains: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
        pub transactions: alloy::sol_types::private::Vec<
            alloy::sol_types::private::Bytes,
        >,
        pub isRaw: alloy::sol_types::private::Vec<bool>,
    }
    ///Container type for the return parameters of the [`processTransactionsAtomically(address[],bytes[],bool[])`](processTransactionsAtomicallyCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionsAtomicallyReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bool>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
                alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
                alloy::sol_types::private::Vec<bool>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionsAtomicallyCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionsAtomicallyCall) -> Self {
                    (value.chains, value.transactions, value.isRaw)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionsAtomicallyCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        chains: tuple.0,
                        transactions: tuple.1,
                        isRaw: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionsAtomicallyReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionsAtomicallyReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionsAtomicallyReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionsAtomicallyCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bool>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionsAtomicallyReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransactionsAtomically(address[],bytes[],bool[])";
            const SELECTOR: [u8; 4] = [52u8, 153u8, 63u8, 163u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(&self.chains),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bytes,
                    > as alloy_sol_types::SolType>::tokenize(&self.transactions),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bool,
                    > as alloy_sol_types::SolType>::tokenize(&self.isRaw),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`AtomicSequencerImplementation`](self) function calls.
    pub enum AtomicSequencerImplementationCalls {
        processBulkTransactionsAtomically(processBulkTransactionsAtomicallyCall),
        processTransactionsAtomically(processTransactionsAtomicallyCall),
    }
    #[automatically_derived]
    impl AtomicSequencerImplementationCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [52u8, 153u8, 63u8, 163u8],
            [107u8, 174u8, 110u8, 28u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for AtomicSequencerImplementationCalls {
        const NAME: &'static str = "AtomicSequencerImplementationCalls";
        const MIN_DATA_LENGTH: usize = 128usize;
        const COUNT: usize = 2usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::processBulkTransactionsAtomically(_) => {
                    <processBulkTransactionsAtomicallyCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransactionsAtomically(_) => {
                    <processTransactionsAtomicallyCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<AtomicSequencerImplementationCalls>] = &[
                {
                    fn processTransactionsAtomically(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AtomicSequencerImplementationCalls> {
                        <processTransactionsAtomicallyCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                AtomicSequencerImplementationCalls::processTransactionsAtomically,
                            )
                    }
                    processTransactionsAtomically
                },
                {
                    fn processBulkTransactionsAtomically(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AtomicSequencerImplementationCalls> {
                        <processBulkTransactionsAtomicallyCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                AtomicSequencerImplementationCalls::processBulkTransactionsAtomically,
                            )
                    }
                    processBulkTransactionsAtomically
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::processBulkTransactionsAtomically(inner) => {
                    <processBulkTransactionsAtomicallyCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransactionsAtomically(inner) => {
                    <processTransactionsAtomicallyCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::processBulkTransactionsAtomically(inner) => {
                    <processBulkTransactionsAtomicallyCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransactionsAtomically(inner) => {
                    <processTransactionsAtomicallyCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`AtomicSequencerImplementation`](self) custom errors.
    pub enum AtomicSequencerImplementationErrors {
        InputLengthMismatchError(InputLengthMismatchError),
    }
    #[automatically_derived]
    impl AtomicSequencerImplementationErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[[130u8, 168u8, 115u8, 74u8]];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for AtomicSequencerImplementationErrors {
        const NAME: &'static str = "AtomicSequencerImplementationErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 1usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::InputLengthMismatchError(_) => {
                    <InputLengthMismatchError as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<AtomicSequencerImplementationErrors>] = &[
                {
                    fn InputLengthMismatchError(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AtomicSequencerImplementationErrors> {
                        <InputLengthMismatchError as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                AtomicSequencerImplementationErrors::InputLengthMismatchError,
                            )
                    }
                    InputLengthMismatchError
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::InputLengthMismatchError(inner) => {
                    <InputLengthMismatchError as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::InputLengthMismatchError(inner) => {
                    <InputLengthMismatchError as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`AtomicSequencerImplementation`](self) contract instance.

See the [wrapper's documentation](`AtomicSequencerImplementationInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> AtomicSequencerImplementationInstance<T, P, N> {
        AtomicSequencerImplementationInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<AtomicSequencerImplementationInstance<T, P, N>>,
    > {
        AtomicSequencerImplementationInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        AtomicSequencerImplementationInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`AtomicSequencerImplementation`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`AtomicSequencerImplementation`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct AtomicSequencerImplementationInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for AtomicSequencerImplementationInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("AtomicSequencerImplementationInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AtomicSequencerImplementationInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`AtomicSequencerImplementation`](self) contract instance.

See the [wrapper's documentation](`AtomicSequencerImplementationInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<AtomicSequencerImplementationInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> AtomicSequencerImplementationInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(
            self,
        ) -> AtomicSequencerImplementationInstance<T, P, N> {
            AtomicSequencerImplementationInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AtomicSequencerImplementationInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`processBulkTransactionsAtomically`] function.
        pub fn processBulkTransactionsAtomically(
            &self,
            chains: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            transactions: alloy::sol_types::private::Vec<
                alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
            >,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            processBulkTransactionsAtomicallyCall,
            N,
        > {
            self.call_builder(
                &processBulkTransactionsAtomicallyCall {
                    chains,
                    transactions,
                },
            )
        }
        ///Creates a new call builder for the [`processTransactionsAtomically`] function.
        pub fn processTransactionsAtomically(
            &self,
            chains: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            transactions: alloy::sol_types::private::Vec<
                alloy::sol_types::private::Bytes,
            >,
            isRaw: alloy::sol_types::private::Vec<bool>,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            processTransactionsAtomicallyCall,
            N,
        > {
            self.call_builder(
                &processTransactionsAtomicallyCall {
                    chains,
                    transactions,
                    isRaw,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AtomicSequencerImplementationInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
