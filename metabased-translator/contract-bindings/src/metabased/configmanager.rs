/**

Generated by the following Solidity interface...
```solidity
interface ConfigManager {
    error OwnableInvalidOwner(address owner);
    error OwnableUnauthorizedAccount(address account);

    event ChainConfigCreated(uint256 indexed chainId, address configAddress);
    event ImplementationUpgraded(address newImplementation);
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor();

    function beacon() external view returns (address);
    function createChainConfig(uint256 chainId, bytes32 targetRollupType, bool mineEmptyBlocks, address arbitrumBridgeAddress, address arbitrumInboxAddress, bool arbitrumIgnoreDelayedMessages, uint256 settlementDelay, uint256 settlementStartBlock, address sequencingContractAddress, uint256 sequencingStartBlock, address rollupOwner, string memory defaultSequencingChainRpcUrl) external returns (address);
    function deployedConfigs(uint256) external view returns (address);
    function getChainConfigAddress(uint256 chainId) external view returns (address);
    function owner() external view returns (address);
    function renounceOwnership() external;
    function transferOwnership(address newOwner) external;
    function upgradeImplementation(address newImplementation) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "beacon",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract UpgradeableBeacon"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "createChainConfig",
    "inputs": [
      {
        "name": "chainId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "targetRollupType",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "mineEmptyBlocks",
        "type": "bool",
        "internalType": "bool"
      },
      {
        "name": "arbitrumBridgeAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "arbitrumInboxAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "arbitrumIgnoreDelayedMessages",
        "type": "bool",
        "internalType": "bool"
      },
      {
        "name": "settlementDelay",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "settlementStartBlock",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "sequencingContractAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "sequencingStartBlock",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "rollupOwner",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "defaultSequencingChainRpcUrl",
        "type": "string",
        "internalType": "string"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "deployedConfigs",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getChainConfigAddress",
    "inputs": [
      {
        "name": "chainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "renounceOwnership",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "transferOwnership",
    "inputs": [
      {
        "name": "newOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "upgradeImplementation",
    "inputs": [
      {
        "name": "newImplementation",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "ChainConfigCreated",
    "inputs": [
      {
        "name": "chainId",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      },
      {
        "name": "configAddress",
        "type": "address",
        "indexed": false,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "ImplementationUpgraded",
    "inputs": [
      {
        "name": "newImplementation",
        "type": "address",
        "indexed": false,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "OwnershipTransferred",
    "inputs": [
      {
        "name": "previousOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "OwnableInvalidOwner",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "OwnableUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ]
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod ConfigManager {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60a06040908082523461012257331561010d57505f8054336001600160a01b03198216811783558351926001600160a01b03928316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a36001600160401b0391610e01818101848111838210176100ef578291611327833903905ff0908115610103578351926103b091828501918211858310176100ef5785938593610f7785391681523060208201520301905ff080156100e55760805251610e50908161012782396080518181816103c301528181610528015281816106a4015261089e0152f35b50513d5f823e3d90fd5b634e487b7160e01b5f52604160045260245ffd5b83513d5f823e3d90fd5b631e4fbdf760e01b81525f6004820152602490fd5b5f80fdfe6080806040526004361015610012575f80fd5b5f905f3560e01c90816359659e901461069257508063715018a61461063b57806383f94db7146104f25780638738fc1e146101905780638da5cb5b146101695780639b95cdd114610138578063a33a8b60146101055763f2fde38b14610076575f80fd5b346101025760203660031901126101025761008f6106d3565b61009761096f565b6001600160a01b039081169081156100e9575f54826bffffffffffffffffffffffff60a01b8216175f55167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a380f35b604051631e4fbdf760e01b815260048101849052602490fd5b80fd5b503461010257602036600319011261010257602090600435815260018252604060018060a01b0391205416604051908152f35b50346101025760203660031901126101025760206101576004356107bc565b6040516001600160a01b039091168152f35b5034610102578060031936011261010257546040516001600160a01b039091168152602090f35b5034610102576101803660031901126101025760443580151581036104ee576064356001600160a01b03811681036104ee57608435916001600160a01b03831683036104ee5760a4359081151582036104ee5761010435916001600160a01b03831683036104ee57610144356001600160a01b03811681036104ee5767ffffffffffffffff61016435116104ea57366023610164350112156104ea5767ffffffffffffffff6101643560040135116104d657604051906102616004610164350135601f01601f191660200183610705565b60046101643590810135808452369101602401116104d25761016435600401356024610164350160208401378760206101643560040135840101526102a461096f565b6102b16004351515610727565b6004358852600160205260408820546001600160a01b031661047d57610397946103899360405160208101906004358252602081526102ef816106e9565b5190209860405198899763336b4e7f60e21b60208a015260043560248a015260243560448a01521515606489015260018060a01b0316608488015260018060a01b031660a4870152151560c486015260c43560e486015260e43561010486015260018060a01b03166101248501526101243561014485015260018060a01b03166101648401526101806101848401526101a4830190610773565b03601f198101835282610705565b604051906104808083019083821067ffffffffffffffff83111761046957916103f191849361099b85397f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690610797565b039083f5801561045c576004358083526001602090815260409384902080546001600160a01b0319166001600160a01b03909416938417905592518281527fa644dec51e1b18a43de39b30f4ba14f81f5058cdf7db83262ec60ab612dc54b1908490a2604051908152f35b50604051903d90823e3d90fd5b634e487b7160e01b86526041600452602486fd5b60405162461bcd60e51b815260206004820152602760248201527f436f6e66696720616c72656164792065786973747320666f72207468697320636044820152661a185a5b88125160ca1b6064820152608490fd5b8780fd5b634e487b7160e01b87526041600452602487fd5b8680fd5b5f80fd5b50346104ee5760203660031901126104ee5761050c6106d3565b61051461096f565b6001600160a01b039081169081156105e4577f000000000000000000000000000000000000000000000000000000000000000016803b156104ee575f8091602460405180948193631b2ce7f360e11b83528760048401525af180156105d9576105a7575b5060207f51ea6ffdc9909d5ca341259f7221902e0676585d833e2bb21fa923c85e86288691604051908152a180f35b90915067ffffffffffffffff81116105c5576040525f906020610578565b634e487b7160e01b5f52604160045260245ffd5b6040513d5f823e3d90fd5b60405162461bcd60e51b815260206004820152602960248201527f4e657720696d706c656d656e746174696f6e2063616e6e6f74206265207a65726044820152686f206164647265737360b81b6064820152608490fd5b346104ee575f3660031901126104ee5761065361096f565b5f80546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346104ee575f3660031901126104ee577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b600435906001600160a01b03821682036104ee57565b6040810190811067ffffffffffffffff8211176105c557604052565b90601f8019910116810190811067ffffffffffffffff8211176105c557604052565b1561072e57565b60405162461bcd60e51b815260206004820152601760248201527f436861696e2049442063616e6e6f74206265207a65726f0000000000000000006044820152606490fd5b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b6001600160a01b0390911681526040602082018190526107b992910190610773565b90565b5f81815260016020908152604091829020546001600160a01b03939084168061096757506107eb811515610727565b825182810190828252838152610800816106e9565b5190209280519163336b4e7f60e21b848401526101a49060248401525f60448401525f606484015260016084840152600260a48401525f60c48401525f60e48401525f61010484015260036101248401525f61014484015260046101648401526101806101848401525f8184015282526101e082019167ffffffffffffffff92818110848211176105c5578083526108d86102008301926108c4818a7f00000000000000000000000000000000000000000000000000000000000000001686610797565b036101ff19810183526101df190182610705565b610928856104808551946108ee83830187610705565b8186528286019161099b8339865194859284840197518091895e830190848201905f8252519283915e015f83820152038084520182610705565b51902081519384019460ff60f81b86523060601b602186015260358501526055840152605583526080830191838310908311176105c557525190201690565b935050505090565b5f546001600160a01b0316330361098257565b60405163118cdaa760e01b8152336004820152602490fdfe60a06040908082526104808038038091610019828561028f565b8339810182828203126101e05761002f826102c6565b60208084015191939091906001600160401b0382116101e057019180601f840112156101e0578251610060816102da565b9361006d8751958661028f565b818552838501928483830101116101e057815f9285809301855e85010152833b1561026f577fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d5080546001600160a01b0319166001600160a01b038681169182179092558651635c60da1b60e01b8082529193928582600481885afa918215610265575f9261022e575b50813b156102155750508651837f1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e5f80a28551156101f557508390600488518095819382525afa9182156101eb575f926101a7575b505f8091610184955190845af4903d1561019e573d610169816102da565b906101768851928361028f565b81525f81943d92013e6102f5565b505b60805251610127908161035982396080518160180152f35b606092506102f5565b9391508284813d83116101e4575b6101bf818361028f565b810103126101e0575f80916101d6610184966102c6565b939550915061014b565b5f80fd5b503d6101b5565b86513d5f823e3d90fd5b945050505050346102065750610186565b63b398979f60e01b8152600490fd5b8851634c9c8ce360e01b81529116600482015260249150fd5b9091508581813d831161025e575b610246818361028f565b810103126101e057610257906102c6565b905f6100f6565b503d61023c565b89513d5f823e3d90fd5b8451631933b43b60e21b81526001600160a01b0385166004820152602490fd5b601f909101601f19168101906001600160401b038211908210176102b257604052565b634e487b7160e01b5f52604160045260245ffd5b51906001600160a01b03821682036101e057565b6001600160401b0381116102b257601f01601f191660200190565b9061031c575080511561030a57805190602001fd5b60405163d6bda27560e01b8152600490fd5b8151158061034f575b61032d575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b1561032556fe60806040819052635c60da1b60e01b81526020816004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa90811560a6575f916053575b5060d5565b905060203d60201160a0575b601f8101601f191682019167ffffffffffffffff831181841017608c576087926040520160b1565b5f604e565b634e487b7160e01b5f52604160045260245ffd5b503d605f565b6040513d5f823e3d90fd5b602090607f19011260d1576080516001600160a01b038116810360d15790565b5f80fd5b5f8091368280378136915af43d5f803e1560ed573d5ff35b3d5ffdfea2646970667358221220c9a56beb19eb072b9dc1fab1e8891d58f2e4dc6d96c6d002ab8744fb39474b5c64736f6c63430008190033a2646970667358221220b14446e539580e0473c7c34e96f1c14fded1b6c11e0302b45955228fea08381564736f6c6343000819003360803461011857601f6103b038819003918201601f19168301916001600160401b0383118484101761011c57808492604094855283398101031261011857602061004882610130565b916001600160a01b0391829161005e9101610130565b16918215610100575f5460018060a01b03199380858316175f558360405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3813b156100e957501680916001541617600155604051907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b5f80a261026b90816101458239f35b63211eb15960e21b81529082166004820152602490fd5b604051631e4fbdf760e01b81525f6004820152602490fd5b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b51906001600160a01b03821682036101185756fe60806040526004361015610011575f80fd5b5f3560e01c80633659cfe6146101865780635c60da1b1461015e578063715018a6146101075780638da5cb5b146100e05763f2fde38b14610050575f80fd5b346100dc5760203660031901126100dc576004356001600160a01b03818116918290036100dc5761007f61020a565b81156100c4575f54826bffffffffffffffffffffffff60a01b8216175f55167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3005b604051631e4fbdf760e01b81525f6004820152602490fd5b5f80fd5b346100dc575f3660031901126100dc575f546040516001600160a01b039091168152602090f35b346100dc575f3660031901126100dc5761011f61020a565b5f80546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346100dc575f3660031901126100dc576001546040516001600160a01b039091168152602090f35b346100dc5760203660031901126100dc576004356001600160a01b038116908181036100dc576101b461020a565b3b156101f257600180546001600160a01b031916821790557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b5f80a2005b6024906040519063211eb15960e21b82526004820152fd5b5f546001600160a01b0316330361021d57565b60405163118cdaa760e01b8152336004820152602490fdfea264697066735822122016742793f7eda8046fdd988ad0c2731e1dbcb127b591a516be57fd913f26774564736f6c634300081900336080806040523460765733156061575f8054336001600160a01b03198216811783556040519290916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3610d86908161007b8239f35b631e4fbdf760e01b81525f6004820152602490fd5b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c80632a84b0f014610b1857806341fc712d14610af057806357d1ba2514610ad357806362c73caa1461093e57806366a1d108146108595780636edd6c091461082d578063715018a6146107d657806385e1f4d0146107b95780638da5cb5b14610792578063a3c6e1e714610775578063aa6a43d81461074d578063acc32b3514610730578063b97aba3e1461070e578063bf6db6f8146106e6578063cdad39fc14610178578063d1f4737c1461015b578063e79388e6146101365763f2fde38b146100df575f80fd5b34610132576020366003190112610132576100f8610bd5565b610100610c9f565b6001600160a01b0381161561011a5761011890610cca565b005b604051631e4fbdf760e01b81525f6004820152602490fd5b5f80fd5b34610132575f36600319011261013257602060ff60045460a01c166040519015158152f35b34610132575f366003190112610132576020600654604051908152f35b3461013257610180366003190112610132576044358015158103610132576001600160a01b039060643580831690036101325760843582811681036101325760a435928315158403610132576101043591818316830361013257610144359082821682036101325767ffffffffffffffff610164351161013257366023610164350112156101325767ffffffffffffffff6101643560040135116104de57604051956102356004610164350135601f01601f191660200188610c23565b60046101643590810135808952369101602401116101325761016435600401356024610164350160208901375f60206101643560040135890101525f80516020610d31833981519152549567ffffffffffffffff871615806106d8575b600167ffffffffffffffff89161490816106ce575b1590816106c5575b506106b357600167ffffffffffffffff198816175f80516020610d318339815191525560ff8760401c1615610687575b60043515610642578460643516156105ee578483161561059b578486161561054357848416156104f257600435600155602435600255600354906affffffffffffffffffffff60a81b918260ff610100600160a81b0360643560081b169315151691161717600355846004549260ff60a01b90151560a01b1693169116171760045560c43560055560e435600655816bffffffffffffffffffffffff60a01b9316836007541617600755610124356008551690600954161760095581519167ffffffffffffffff83116104de576103c0836103bb600a54610beb565b610c45565b602090601f841160011461046c5792806103f29260ff955f92610461575b50508160011b915f199060031b1c19161790565b600a555b6103ff33610cca565b60401c161561040a57005b68ff0000000000000000195f80516020610d3183398151915254165f80516020610d31833981519152557fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2602060405160018152a1005b0151905085806103de565b90601f19841691600a5f525f80516020610d11833981519152925f5b8181106104c6575091600193918660ff9794106104ae575b505050811b01600a556103f6565b01515f1960f88460031b161c191690558480806104a0565b92936020600181928786015181550195019301610488565b634e487b7160e01b5f52604160045260245ffd5b60405162461bcd60e51b815260206004820152602360248201527f526f6c6c7570206f776e65722063616e6e6f74206265207a65726f206164647260448201526265737360e81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602a60248201527f53657175656e63696e6720636f6e747261637420616464726573732063616e6e6044820152696f74206265207a65726f60b01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602560248201527f417262697472756d20696e626f7820616464726573732063616e6e6f74206265604482015264207a65726f60d81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602660248201527f417262697472756d2062726964676520616464726573732063616e6e6f74206260448201526565207a65726f60d01b6064820152608490fd5b60405162461bcd60e51b815260206004820152601760248201527f436861696e2049442063616e6e6f74206265207a65726f0000000000000000006044820152606490fd5b68ffffffffffffffffff19871668010000000000000001175f80516020610d31833981519152556102df565b60405163f92ee8a960e01b8152600490fd5b905015896102af565b303b1591506102a7565b5060ff8760401c1615610292565b34610132575f366003190112610132576007546040516001600160a01b039091168152602090f35b34610132575f36600319011261013257602060ff600354166040519015158152f35b34610132575f366003190112610132576020600254604051908152f35b34610132575f366003190112610132576004546040516001600160a01b039091168152602090f35b34610132575f366003190112610132576020600854604051908152f35b34610132575f366003190112610132575f546040516001600160a01b039091168152602090f35b34610132575f366003190112610132576020600154604051908152f35b34610132575f366003190112610132576107ee610c9f565b5f80546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b34610132575f3660031901126101325760035460405160089190911c6001600160a01b03168152602090f35b34610132575f366003190112610132576040515f600a549161087a83610beb565b9283825260209384808401926001906001811690815f1461092057506001146108d8575b5050506108af826040940383610c23565b825193849281845251918280928501528484015e5f828201840152601f01601f19168101030190f35b91909450600a5f525f80516020610d11833981519152915f925b82841061090d575050508201909201916108af84604061089e565b80548685018801529286019281016108f2565b60ff19168552505090151560051b83010192506108af84604061089e565b3461013257602080600319360112610132576004359067ffffffffffffffff908183116101325736602384011215610132578260040135918211610132576024366024848601011161013257610992610c9f565b6109a1836103bb600a54610beb565b5f91601f8411600114610a335750507f0234a4e910f2b1e618f2c93be316ec0c7f40e1af23fe33f9fba2c5bb388a95f292826109f7816024956040955f91610a26575b508160011b915f199060031b1c19161790565b600a555b8083519485936020855282602086015201848401375f828201840152601f01601f19168101030190a1005b87915085010135886109e4565b600a5f9081525f80516020610d118339815191529392601f19861692905b838310610ab757505050926040927f0234a4e910f2b1e618f2c93be316ec0c7f40e1af23fe33f9fba2c5bb388a95f295928260249610610a9c575b5050600181811b01600a556109fb565b83018501355f19600384901b60f8161c191690558580610a8c565b908060018697848396988c010135815501960194019190610a51565b34610132575f366003190112610132576020600554604051908152f35b34610132575f366003190112610132576009546040516001600160a01b039091168152602090f35b3461013257602036600319011261013257610b31610bd5565b610b39610c9f565b6001600160a01b03168015610b8057600980546001600160a01b031916821790557f8829bee46683608d5fd80e243c0fae04d129ce172f70db1021c1128074a6f4d95f80a2005b60405162461bcd60e51b815260206004820152602760248201527f4e657720726f6c6c7570206f776e65722063616e6e6f74206265207a65726f206044820152666164647265737360c81b6064820152608490fd5b600435906001600160a01b038216820361013257565b90600182811c92168015610c19575b6020831014610c0557565b634e487b7160e01b5f52602260045260245ffd5b91607f1691610bfa565b90601f8019910116810190811067ffffffffffffffff8211176104de57604052565b601f8111610c51575050565b600a5f525f80516020610d11833981519152906020601f840160051c83019310610c95575b601f0160051c01905b818110610c8a575050565b5f8155600101610c7f565b9091508190610c76565b5f546001600160a01b03163303610cb257565b60405163118cdaa760e01b8152336004820152602490fd5b5f80546001600160a01b039283166001600160a01b03198216811783559216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a356fec65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8f0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00a264697066735822122020d37d97bde0074ea06ee07c32ce86f33e610a31dbde60b2c2421d007d36e7a664736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xA0`@\x90\x80\x82R4a\x01\"W3\x15a\x01\rWP_\x80T3`\x01`\x01`\xA0\x1B\x03\x19\x82\x16\x81\x17\x83U\x83Q\x92`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x90\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x90\x80\xA3`\x01`\x01`@\x1B\x03\x91a\x0E\x01\x81\x81\x01\x84\x81\x11\x83\x82\x10\x17a\0\xEFW\x82\x91a\x13'\x839\x03\x90_\xF0\x90\x81\x15a\x01\x03W\x83Q\x92a\x03\xB0\x91\x82\x85\x01\x91\x82\x11\x85\x83\x10\x17a\0\xEFW\x85\x93\x85\x93a\x0Fw\x859\x16\x81R0` \x82\x01R\x03\x01\x90_\xF0\x80\x15a\0\xE5W`\x80RQa\x0EP\x90\x81a\x01'\x829`\x80Q\x81\x81\x81a\x03\xC3\x01R\x81\x81a\x05(\x01R\x81\x81a\x06\xA4\x01Ra\x08\x9E\x01R\xF3[PQ=_\x82>=\x90\xFD[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x83Q=_\x82>=\x90\xFD[c\x1EO\xBD\xF7`\xE0\x1B\x81R_`\x04\x82\x01R`$\x90\xFD[_\x80\xFD\xFE`\x80\x80`@R`\x046\x10\x15a\0\x12W_\x80\xFD[_\x90_5`\xE0\x1C\x90\x81cYe\x9E\x90\x14a\x06\x92WP\x80cqP\x18\xA6\x14a\x06;W\x80c\x83\xF9M\xB7\x14a\x04\xF2W\x80c\x878\xFC\x1E\x14a\x01\x90W\x80c\x8D\xA5\xCB[\x14a\x01iW\x80c\x9B\x95\xCD\xD1\x14a\x018W\x80c\xA3:\x8B`\x14a\x01\x05Wc\xF2\xFD\xE3\x8B\x14a\0vW_\x80\xFD[4a\x01\x02W` 6`\x03\x19\x01\x12a\x01\x02Wa\0\x8Fa\x06\xD3V[a\0\x97a\toV[`\x01`\x01`\xA0\x1B\x03\x90\x81\x16\x90\x81\x15a\0\xE9W_T\x82k\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\xA0\x1B\x82\x16\x17_U\x16\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0_\x80\xA3\x80\xF3[`@Qc\x1EO\xBD\xF7`\xE0\x1B\x81R`\x04\x81\x01\x84\x90R`$\x90\xFD[\x80\xFD[P4a\x01\x02W` 6`\x03\x19\x01\x12a\x01\x02W` \x90`\x045\x81R`\x01\x82R`@`\x01\x80`\xA0\x1B\x03\x91 T\x16`@Q\x90\x81R\xF3[P4a\x01\x02W` 6`\x03\x19\x01\x12a\x01\x02W` a\x01W`\x045a\x07\xBCV[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R\xF3[P4a\x01\x02W\x80`\x03\x196\x01\x12a\x01\x02WT`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x90\xF3[P4a\x01\x02Wa\x01\x806`\x03\x19\x01\x12a\x01\x02W`D5\x80\x15\x15\x81\x03a\x04\xEEW`d5`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x03a\x04\xEEW`\x845\x91`\x01`\x01`\xA0\x1B\x03\x83\x16\x83\x03a\x04\xEEW`\xA45\x90\x81\x15\x15\x82\x03a\x04\xEEWa\x01\x045\x91`\x01`\x01`\xA0\x1B\x03\x83\x16\x83\x03a\x04\xEEWa\x01D5`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x03a\x04\xEEWg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x01d5\x11a\x04\xEAW6`#a\x01d5\x01\x12\x15a\x04\xEAWg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x01d5`\x04\x015\x11a\x04\xD6W`@Q\x90a\x02a`\x04a\x01d5\x015`\x1F\x01`\x1F\x19\x16` \x01\x83a\x07\x05V[`\x04a\x01d5\x90\x81\x015\x80\x84R6\x91\x01`$\x01\x11a\x04\xD2Wa\x01d5`\x04\x015`$a\x01d5\x01` \x84\x017\x87` a\x01d5`\x04\x015\x84\x01\x01Ra\x02\xA4a\toV[a\x02\xB1`\x045\x15\x15a\x07'V[`\x045\x88R`\x01` R`@\x88 T`\x01`\x01`\xA0\x1B\x03\x16a\x04}Wa\x03\x97\x94a\x03\x89\x93`@Q` \x81\x01\x90`\x045\x82R` \x81Ra\x02\xEF\x81a\x06\xE9V[Q\x90 \x98`@Q\x98\x89\x97c3kN\x7F`\xE2\x1B` \x8A\x01R`\x045`$\x8A\x01R`$5`D\x8A\x01R\x15\x15`d\x89\x01R`\x01\x80`\xA0\x1B\x03\x16`\x84\x88\x01R`\x01\x80`\xA0\x1B\x03\x16`\xA4\x87\x01R\x15\x15`\xC4\x86\x01R`\xC45`\xE4\x86\x01R`\xE45a\x01\x04\x86\x01R`\x01\x80`\xA0\x1B\x03\x16a\x01$\x85\x01Ra\x01$5a\x01D\x85\x01R`\x01\x80`\xA0\x1B\x03\x16a\x01d\x84\x01Ra\x01\x80a\x01\x84\x84\x01Ra\x01\xA4\x83\x01\x90a\x07sV[\x03`\x1F\x19\x81\x01\x83R\x82a\x07\x05V[`@Q\x90a\x04\x80\x80\x83\x01\x90\x83\x82\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11\x17a\x04iW\x91a\x03\xF1\x91\x84\x93a\t\x9B\x859\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x01`\x01`\xA0\x1B\x03\x16\x90a\x07\x97V[\x03\x90\x83\xF5\x80\x15a\x04\\W`\x045\x80\x83R`\x01` \x90\x81R`@\x93\x84\x90 \x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x90\x94\x16\x93\x84\x17\x90U\x92Q\x82\x81R\x7F\xA6D\xDE\xC5\x1E\x1B\x18\xA4=\xE3\x9B0\xF4\xBA\x14\xF8\x1FPX\xCD\xF7\xDB\x83&.\xC6\n\xB6\x12\xDCT\xB1\x90\x84\x90\xA2`@Q\x90\x81R\xF3[P`@Q\x90=\x90\x82>=\x90\xFD[cNH{q`\xE0\x1B\x86R`A`\x04R`$\x86\xFD[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`'`$\x82\x01R\x7FConfig already exists for this c`D\x82\x01Rf\x1A\x18Z[\x88\x12Q`\xCA\x1B`d\x82\x01R`\x84\x90\xFD[\x87\x80\xFD[cNH{q`\xE0\x1B\x87R`A`\x04R`$\x87\xFD[\x86\x80\xFD[_\x80\xFD[P4a\x04\xEEW` 6`\x03\x19\x01\x12a\x04\xEEWa\x05\x0Ca\x06\xD3V[a\x05\x14a\toV[`\x01`\x01`\xA0\x1B\x03\x90\x81\x16\x90\x81\x15a\x05\xE4W\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x80;\x15a\x04\xEEW_\x80\x91`$`@Q\x80\x94\x81\x93c\x1B,\xE7\xF3`\xE1\x1B\x83R\x87`\x04\x84\x01RZ\xF1\x80\x15a\x05\xD9Wa\x05\xA7W[P` \x7FQ\xEAo\xFD\xC9\x90\x9D\\\xA3A%\x9Fr!\x90.\x06vX]\x83>+\xB2\x1F\xA9#\xC8^\x86(\x86\x91`@Q\x90\x81R\xA1\x80\xF3[\x90\x91Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05\xC5W`@R_\x90` a\x05xV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@Q=_\x82>=\x90\xFD[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`)`$\x82\x01R\x7FNew implementation cannot be zer`D\x82\x01Rho address`\xB8\x1B`d\x82\x01R`\x84\x90\xFD[4a\x04\xEEW_6`\x03\x19\x01\x12a\x04\xEEWa\x06Sa\toV[_\x80T`\x01`\x01`\xA0\x1B\x03\x19\x81\x16\x82U`\x01`\x01`\xA0\x1B\x03\x16\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x82\x80\xA3\0[4a\x04\xEEW_6`\x03\x19\x01\x12a\x04\xEEW\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x90\xF3[`\x045\x90`\x01`\x01`\xA0\x1B\x03\x82\x16\x82\x03a\x04\xEEWV[`@\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x05\xC5W`@RV[\x90`\x1F\x80\x19\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x05\xC5W`@RV[\x15a\x07.WV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x17`$\x82\x01R\x7FChain ID cannot be zero\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x90\xFD[\x80Q\x80\x83R` \x92\x91\x81\x90\x84\x01\x84\x84\x01^_\x82\x82\x01\x84\x01R`\x1F\x01`\x1F\x19\x16\x01\x01\x90V[`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R`@` \x82\x01\x81\x90Ra\x07\xB9\x92\x91\x01\x90a\x07sV[\x90V[_\x81\x81R`\x01` \x90\x81R`@\x91\x82\x90 T`\x01`\x01`\xA0\x1B\x03\x93\x90\x84\x16\x80a\tgWPa\x07\xEB\x81\x15\x15a\x07'V[\x82Q\x82\x81\x01\x90\x82\x82R\x83\x81Ra\x08\0\x81a\x06\xE9V[Q\x90 \x92\x80Q\x91c3kN\x7F`\xE2\x1B\x84\x84\x01Ra\x01\xA4\x90`$\x84\x01R_`D\x84\x01R_`d\x84\x01R`\x01`\x84\x84\x01R`\x02`\xA4\x84\x01R_`\xC4\x84\x01R_`\xE4\x84\x01R_a\x01\x04\x84\x01R`\x03a\x01$\x84\x01R_a\x01D\x84\x01R`\x04a\x01d\x84\x01Ra\x01\x80a\x01\x84\x84\x01R_\x81\x84\x01R\x82Ra\x01\xE0\x82\x01\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x92\x81\x81\x10\x84\x82\x11\x17a\x05\xC5W\x80\x83Ra\x08\xD8a\x02\0\x83\x01\x92a\x08\xC4\x81\x8A\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x86a\x07\x97V[\x03a\x01\xFF\x19\x81\x01\x83Ra\x01\xDF\x19\x01\x82a\x07\x05V[a\t(\x85a\x04\x80\x85Q\x94a\x08\xEE\x83\x83\x01\x87a\x07\x05V[\x81\x86R\x82\x86\x01\x91a\t\x9B\x839\x86Q\x94\x85\x92\x84\x84\x01\x97Q\x80\x91\x89^\x83\x01\x90\x84\x82\x01\x90_\x82RQ\x92\x83\x91^\x01_\x83\x82\x01R\x03\x80\x84R\x01\x82a\x07\x05V[Q\x90 \x81Q\x93\x84\x01\x94`\xFF`\xF8\x1B\x86R0``\x1B`!\x86\x01R`5\x85\x01R`U\x84\x01R`U\x83R`\x80\x83\x01\x91\x83\x83\x10\x90\x83\x11\x17a\x05\xC5WRQ\x90 \x16\x90V[\x93PPPP\x90V[_T`\x01`\x01`\xA0\x1B\x03\x163\x03a\t\x82WV[`@Qc\x11\x8C\xDA\xA7`\xE0\x1B\x81R3`\x04\x82\x01R`$\x90\xFD\xFE`\xA0`@\x90\x80\x82Ra\x04\x80\x808\x03\x80\x91a\0\x19\x82\x85a\x02\x8FV[\x839\x81\x01\x82\x82\x82\x03\x12a\x01\xE0Wa\0/\x82a\x02\xC6V[` \x80\x84\x01Q\x91\x93\x90\x91\x90`\x01`\x01`@\x1B\x03\x82\x11a\x01\xE0W\x01\x91\x80`\x1F\x84\x01\x12\x15a\x01\xE0W\x82Qa\0`\x81a\x02\xDAV[\x93a\0m\x87Q\x95\x86a\x02\x8FV[\x81\x85R\x83\x85\x01\x92\x84\x83\x83\x01\x01\x11a\x01\xE0W\x81_\x92\x85\x80\x93\x01\x85^\x85\x01\x01R\x83;\x15a\x02oW\x7F\xA3\xF0\xADt\xE5B:\xEB\xFD\x80\xD3\xEFCFW\x835\xA9\xA7*\xEA\xEEY\xFFl\xB3X+5\x13=P\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x86\x81\x16\x91\x82\x17\x90\x92U\x86Qc\\`\xDA\x1B`\xE0\x1B\x80\x82R\x91\x93\x92\x85\x82`\x04\x81\x88Z\xFA\x91\x82\x15a\x02eW_\x92a\x02.W[P\x81;\x15a\x02\x15WPP\x86Q\x83\x7F\x1C\xF3\xB0:l\xF1\x9F\xA2\xBA\xBAM\xF1H\xE9\xDC\xAB\xED\xEA\x7F\x8A\\\x07\x84\x0E ~\\\x08\x9B\xE9]>_\x80\xA2\x85Q\x15a\x01\xF5WP\x83\x90`\x04\x88Q\x80\x95\x81\x93\x82RZ\xFA\x91\x82\x15a\x01\xEBW_\x92a\x01\xA7W[P_\x80\x91a\x01\x84\x95Q\x90\x84Z\xF4\x90=\x15a\x01\x9EW=a\x01i\x81a\x02\xDAV[\x90a\x01v\x88Q\x92\x83a\x02\x8FV[\x81R_\x81\x94=\x92\x01>a\x02\xF5V[P[`\x80RQa\x01'\x90\x81a\x03Y\x829`\x80Q\x81`\x18\x01R\xF3[``\x92Pa\x02\xF5V[\x93\x91P\x82\x84\x81=\x83\x11a\x01\xE4W[a\x01\xBF\x81\x83a\x02\x8FV[\x81\x01\x03\x12a\x01\xE0W_\x80\x91a\x01\xD6a\x01\x84\x96a\x02\xC6V[\x93\x95P\x91Pa\x01KV[_\x80\xFD[P=a\x01\xB5V[\x86Q=_\x82>=\x90\xFD[\x94PPPPP4a\x02\x06WPa\x01\x86V[c\xB3\x98\x97\x9F`\xE0\x1B\x81R`\x04\x90\xFD[\x88QcL\x9C\x8C\xE3`\xE0\x1B\x81R\x91\x16`\x04\x82\x01R`$\x91P\xFD[\x90\x91P\x85\x81\x81=\x83\x11a\x02^W[a\x02F\x81\x83a\x02\x8FV[\x81\x01\x03\x12a\x01\xE0Wa\x02W\x90a\x02\xC6V[\x90_a\0\xF6V[P=a\x02<V[\x89Q=_\x82>=\x90\xFD[\x84Qc\x193\xB4;`\xE2\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x85\x16`\x04\x82\x01R`$\x90\xFD[`\x1F\x90\x91\x01`\x1F\x19\x16\x81\x01\x90`\x01`\x01`@\x1B\x03\x82\x11\x90\x82\x10\x17a\x02\xB2W`@RV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[Q\x90`\x01`\x01`\xA0\x1B\x03\x82\x16\x82\x03a\x01\xE0WV[`\x01`\x01`@\x1B\x03\x81\x11a\x02\xB2W`\x1F\x01`\x1F\x19\x16` \x01\x90V[\x90a\x03\x1CWP\x80Q\x15a\x03\nW\x80Q\x90` \x01\xFD[`@Qc\xD6\xBD\xA2u`\xE0\x1B\x81R`\x04\x90\xFD[\x81Q\x15\x80a\x03OW[a\x03-WP\x90V[`@Qc\x99\x96\xB3\x15`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16`\x04\x82\x01R`$\x90\xFD[P\x80;\x15a\x03%V\xFE`\x80`@\x81\x90Rc\\`\xDA\x1B`\xE0\x1B\x81R` \x81`\x04\x81\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x01`\x01`\xA0\x1B\x03\x16Z\xFA\x90\x81\x15`\xA6W_\x91`SW[P`\xD5V[\x90P` =` \x11`\xA0W[`\x1F\x81\x01`\x1F\x19\x16\x82\x01\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11\x81\x84\x10\x17`\x8CW`\x87\x92`@R\x01`\xB1V[_`NV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[P=`_V[`@Q=_\x82>=\x90\xFD[` \x90`\x7F\x19\x01\x12`\xD1W`\x80Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x03`\xD1W\x90V[_\x80\xFD[_\x80\x916\x82\x807\x816\x91Z\xF4=_\x80>\x15`\xEDW=_\xF3[=_\xFD\xFE\xA2dipfsX\"\x12 \xC9\xA5k\xEB\x19\xEB\x07+\x9D\xC1\xFA\xB1\xE8\x89\x1DX\xF2\xE4\xDCm\x96\xC6\xD0\x02\xAB\x87D\xFB9GK\\dsolcC\0\x08\x19\x003\xA2dipfsX\"\x12 \xB1DF\xE59X\x0E\x04s\xC7\xC3N\x96\xF1\xC1O\xDE\xD1\xB6\xC1\x1E\x03\x02\xB4YU\"\x8F\xEA\x088\x15dsolcC\0\x08\x19\x003`\x804a\x01\x18W`\x1Fa\x03\xB08\x81\x90\x03\x91\x82\x01`\x1F\x19\x16\x83\x01\x91`\x01`\x01`@\x1B\x03\x83\x11\x84\x84\x10\x17a\x01\x1CW\x80\x84\x92`@\x94\x85R\x839\x81\x01\x03\x12a\x01\x18W` a\0H\x82a\x010V[\x91`\x01`\x01`\xA0\x1B\x03\x91\x82\x91a\0^\x91\x01a\x010V[\x16\x91\x82\x15a\x01\0W_T`\x01\x80`\xA0\x1B\x03\x19\x93\x80\x85\x83\x16\x17_U\x83`@Q\x92\x16\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0_\x80\xA3\x81;\x15a\0\xE9WP\x16\x80\x91`\x01T\x16\x17`\x01U`@Q\x90\x7F\xBC|\xD7Z \xEE'\xFD\x9A\xDE\xBA\xB3 A\xF7U!M\xBCk\xFF\xA9\x0C\xC0\"[9\xDA.\\-;_\x80\xA2a\x02k\x90\x81a\x01E\x829\xF3[c!\x1E\xB1Y`\xE2\x1B\x81R\x90\x82\x16`\x04\x82\x01R`$\x90\xFD[`@Qc\x1EO\xBD\xF7`\xE0\x1B\x81R_`\x04\x82\x01R`$\x90\xFD[_\x80\xFD[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[Q\x90`\x01`\x01`\xA0\x1B\x03\x82\x16\x82\x03a\x01\x18WV\xFE`\x80`@R`\x046\x10\x15a\0\x11W_\x80\xFD[_5`\xE0\x1C\x80c6Y\xCF\xE6\x14a\x01\x86W\x80c\\`\xDA\x1B\x14a\x01^W\x80cqP\x18\xA6\x14a\x01\x07W\x80c\x8D\xA5\xCB[\x14a\0\xE0Wc\xF2\xFD\xE3\x8B\x14a\0PW_\x80\xFD[4a\0\xDCW` 6`\x03\x19\x01\x12a\0\xDCW`\x045`\x01`\x01`\xA0\x1B\x03\x81\x81\x16\x91\x82\x90\x03a\0\xDCWa\0\x7Fa\x02\nV[\x81\x15a\0\xC4W_T\x82k\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\xA0\x1B\x82\x16\x17_U\x16\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0_\x80\xA3\0[`@Qc\x1EO\xBD\xF7`\xE0\x1B\x81R_`\x04\x82\x01R`$\x90\xFD[_\x80\xFD[4a\0\xDCW_6`\x03\x19\x01\x12a\0\xDCW_T`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x90\xF3[4a\0\xDCW_6`\x03\x19\x01\x12a\0\xDCWa\x01\x1Fa\x02\nV[_\x80T`\x01`\x01`\xA0\x1B\x03\x19\x81\x16\x82U`\x01`\x01`\xA0\x1B\x03\x16\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x82\x80\xA3\0[4a\0\xDCW_6`\x03\x19\x01\x12a\0\xDCW`\x01T`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x90\xF3[4a\0\xDCW` 6`\x03\x19\x01\x12a\0\xDCW`\x045`\x01`\x01`\xA0\x1B\x03\x81\x16\x90\x81\x81\x03a\0\xDCWa\x01\xB4a\x02\nV[;\x15a\x01\xF2W`\x01\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16\x82\x17\x90U\x7F\xBC|\xD7Z \xEE'\xFD\x9A\xDE\xBA\xB3 A\xF7U!M\xBCk\xFF\xA9\x0C\xC0\"[9\xDA.\\-;_\x80\xA2\0[`$\x90`@Q\x90c!\x1E\xB1Y`\xE2\x1B\x82R`\x04\x82\x01R\xFD[_T`\x01`\x01`\xA0\x1B\x03\x163\x03a\x02\x1DWV[`@Qc\x11\x8C\xDA\xA7`\xE0\x1B\x81R3`\x04\x82\x01R`$\x90\xFD\xFE\xA2dipfsX\"\x12 \x16t'\x93\xF7\xED\xA8\x04o\xDD\x98\x8A\xD0\xC2s\x1E\x1D\xBC\xB1'\xB5\x91\xA5\x16\xBEW\xFD\x91?&wEdsolcC\0\x08\x19\x003`\x80\x80`@R4`vW3\x15`aW_\x80T3`\x01`\x01`\xA0\x1B\x03\x19\x82\x16\x81\x17\x83U`@Q\x92\x90\x91`\x01`\x01`\xA0\x1B\x03\x16\x90\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x90\x80\xA3a\r\x86\x90\x81a\0{\x829\xF3[c\x1EO\xBD\xF7`\xE0\x1B\x81R_`\x04\x82\x01R`$\x90\xFD[_\x80\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x11W_\x80\xFD[_5`\xE0\x1C\x80c*\x84\xB0\xF0\x14a\x0B\x18W\x80cA\xFCq-\x14a\n\xF0W\x80cW\xD1\xBA%\x14a\n\xD3W\x80cb\xC7<\xAA\x14a\t>W\x80cf\xA1\xD1\x08\x14a\x08YW\x80cn\xDDl\t\x14a\x08-W\x80cqP\x18\xA6\x14a\x07\xD6W\x80c\x85\xE1\xF4\xD0\x14a\x07\xB9W\x80c\x8D\xA5\xCB[\x14a\x07\x92W\x80c\xA3\xC6\xE1\xE7\x14a\x07uW\x80c\xAAjC\xD8\x14a\x07MW\x80c\xAC\xC3+5\x14a\x070W\x80c\xB9z\xBA>\x14a\x07\x0EW\x80c\xBFm\xB6\xF8\x14a\x06\xE6W\x80c\xCD\xAD9\xFC\x14a\x01xW\x80c\xD1\xF4s|\x14a\x01[W\x80c\xE7\x93\x88\xE6\x14a\x016Wc\xF2\xFD\xE3\x8B\x14a\0\xDFW_\x80\xFD[4a\x012W` 6`\x03\x19\x01\x12a\x012Wa\0\xF8a\x0B\xD5V[a\x01\0a\x0C\x9FV[`\x01`\x01`\xA0\x1B\x03\x81\x16\x15a\x01\x1AWa\x01\x18\x90a\x0C\xCAV[\0[`@Qc\x1EO\xBD\xF7`\xE0\x1B\x81R_`\x04\x82\x01R`$\x90\xFD[_\x80\xFD[4a\x012W_6`\x03\x19\x01\x12a\x012W` `\xFF`\x04T`\xA0\x1C\x16`@Q\x90\x15\x15\x81R\xF3[4a\x012W_6`\x03\x19\x01\x12a\x012W` `\x06T`@Q\x90\x81R\xF3[4a\x012Wa\x01\x806`\x03\x19\x01\x12a\x012W`D5\x80\x15\x15\x81\x03a\x012W`\x01`\x01`\xA0\x1B\x03\x90`d5\x80\x83\x16\x90\x03a\x012W`\x845\x82\x81\x16\x81\x03a\x012W`\xA45\x92\x83\x15\x15\x84\x03a\x012Wa\x01\x045\x91\x81\x83\x16\x83\x03a\x012Wa\x01D5\x90\x82\x82\x16\x82\x03a\x012Wg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x01d5\x11a\x012W6`#a\x01d5\x01\x12\x15a\x012Wg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x01d5`\x04\x015\x11a\x04\xDEW`@Q\x95a\x025`\x04a\x01d5\x015`\x1F\x01`\x1F\x19\x16` \x01\x88a\x0C#V[`\x04a\x01d5\x90\x81\x015\x80\x89R6\x91\x01`$\x01\x11a\x012Wa\x01d5`\x04\x015`$a\x01d5\x01` \x89\x017_` a\x01d5`\x04\x015\x89\x01\x01R_\x80Q` a\r1\x839\x81Q\x91RT\x95g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x87\x16\x15\x80a\x06\xD8W[`\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x89\x16\x14\x90\x81a\x06\xCEW[\x15\x90\x81a\x06\xC5W[Pa\x06\xB3W`\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x88\x16\x17_\x80Q` a\r1\x839\x81Q\x91RU`\xFF\x87`@\x1C\x16\x15a\x06\x87W[`\x045\x15a\x06BW\x84`d5\x16\x15a\x05\xEEW\x84\x83\x16\x15a\x05\x9BW\x84\x86\x16\x15a\x05CW\x84\x84\x16\x15a\x04\xF2W`\x045`\x01U`$5`\x02U`\x03T\x90j\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\xA8\x1B\x91\x82`\xFFa\x01\0`\x01`\xA8\x1B\x03`d5`\x08\x1B\x16\x93\x15\x15\x16\x91\x16\x17\x17`\x03U\x84`\x04T\x92`\xFF`\xA0\x1B\x90\x15\x15`\xA0\x1B\x16\x93\x16\x91\x16\x17\x17`\x04U`\xC45`\x05U`\xE45`\x06U\x81k\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\xA0\x1B\x93\x16\x83`\x07T\x16\x17`\x07Ua\x01$5`\x08U\x16\x90`\tT\x16\x17`\tU\x81Q\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x04\xDEWa\x03\xC0\x83a\x03\xBB`\nTa\x0B\xEBV[a\x0CEV[` \x90`\x1F\x84\x11`\x01\x14a\x04lW\x92\x80a\x03\xF2\x92`\xFF\x95_\x92a\x04aW[PP\x81`\x01\x1B\x91_\x19\x90`\x03\x1B\x1C\x19\x16\x17\x90V[`\nU[a\x03\xFF3a\x0C\xCAV[`@\x1C\x16\x15a\x04\nW\0[h\xFF\0\0\0\0\0\0\0\0\x19_\x80Q` a\r1\x839\x81Q\x91RT\x16_\x80Q` a\r1\x839\x81Q\x91RU\x7F\xC7\xF5\x05\xB2\xF3q\xAE!u\xEEI\x13\xF4I\x9E\x1F&3\xA7\xB5\x93c!\xEE\xD1\xCD\xAE\xB6\x11Q\x81\xD2` `@Q`\x01\x81R\xA1\0[\x01Q\x90P\x85\x80a\x03\xDEV[\x90`\x1F\x19\x84\x16\x91`\n_R_\x80Q` a\r\x11\x839\x81Q\x91R\x92_[\x81\x81\x10a\x04\xC6WP\x91`\x01\x93\x91\x86`\xFF\x97\x94\x10a\x04\xAEW[PPP\x81\x1B\x01`\nUa\x03\xF6V[\x01Q_\x19`\xF8\x84`\x03\x1B\x16\x1C\x19\x16\x90U\x84\x80\x80a\x04\xA0V[\x92\x93` `\x01\x81\x92\x87\x86\x01Q\x81U\x01\x95\x01\x93\x01a\x04\x88V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`#`$\x82\x01R\x7FRollup owner cannot be zero addr`D\x82\x01Rbess`\xE8\x1B`d\x82\x01R`\x84\x90\xFD[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`*`$\x82\x01R\x7FSequencing contract address cann`D\x82\x01Riot be zero`\xB0\x1B`d\x82\x01R`\x84\x90\xFD[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`%`$\x82\x01R\x7FArbitrum inbox address cannot be`D\x82\x01Rd zero`\xD8\x1B`d\x82\x01R`\x84\x90\xFD[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FArbitrum bridge address cannot b`D\x82\x01Ree zero`\xD0\x1B`d\x82\x01R`\x84\x90\xFD[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x17`$\x82\x01R\x7FChain ID cannot be zero\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x90\xFD[h\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x87\x16h\x01\0\0\0\0\0\0\0\x01\x17_\x80Q` a\r1\x839\x81Q\x91RUa\x02\xDFV[`@Qc\xF9.\xE8\xA9`\xE0\x1B\x81R`\x04\x90\xFD[\x90P\x15\x89a\x02\xAFV[0;\x15\x91Pa\x02\xA7V[P`\xFF\x87`@\x1C\x16\x15a\x02\x92V[4a\x012W_6`\x03\x19\x01\x12a\x012W`\x07T`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x90\xF3[4a\x012W_6`\x03\x19\x01\x12a\x012W` `\xFF`\x03T\x16`@Q\x90\x15\x15\x81R\xF3[4a\x012W_6`\x03\x19\x01\x12a\x012W` `\x02T`@Q\x90\x81R\xF3[4a\x012W_6`\x03\x19\x01\x12a\x012W`\x04T`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x90\xF3[4a\x012W_6`\x03\x19\x01\x12a\x012W` `\x08T`@Q\x90\x81R\xF3[4a\x012W_6`\x03\x19\x01\x12a\x012W_T`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x90\xF3[4a\x012W_6`\x03\x19\x01\x12a\x012W` `\x01T`@Q\x90\x81R\xF3[4a\x012W_6`\x03\x19\x01\x12a\x012Wa\x07\xEEa\x0C\x9FV[_\x80T`\x01`\x01`\xA0\x1B\x03\x19\x81\x16\x82U`\x01`\x01`\xA0\x1B\x03\x16\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x82\x80\xA3\0[4a\x012W_6`\x03\x19\x01\x12a\x012W`\x03T`@Q`\x08\x91\x90\x91\x1C`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x90\xF3[4a\x012W_6`\x03\x19\x01\x12a\x012W`@Q_`\nT\x91a\x08z\x83a\x0B\xEBV[\x92\x83\x82R` \x93\x84\x80\x84\x01\x92`\x01\x90`\x01\x81\x16\x90\x81_\x14a\t WP`\x01\x14a\x08\xD8W[PPPa\x08\xAF\x82`@\x94\x03\x83a\x0C#V[\x82Q\x93\x84\x92\x81\x84RQ\x91\x82\x80\x92\x85\x01R\x84\x84\x01^_\x82\x82\x01\x84\x01R`\x1F\x01`\x1F\x19\x16\x81\x01\x03\x01\x90\xF3[\x91\x90\x94P`\n_R_\x80Q` a\r\x11\x839\x81Q\x91R\x91_\x92[\x82\x84\x10a\t\rWPPP\x82\x01\x90\x92\x01\x91a\x08\xAF\x84`@a\x08\x9EV[\x80T\x86\x85\x01\x88\x01R\x92\x86\x01\x92\x81\x01a\x08\xF2V[`\xFF\x19\x16\x85RPP\x90\x15\x15`\x05\x1B\x83\x01\x01\x92Pa\x08\xAF\x84`@a\x08\x9EV[4a\x012W` \x80`\x03\x196\x01\x12a\x012W`\x045\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x81\x83\x11a\x012W6`#\x84\x01\x12\x15a\x012W\x82`\x04\x015\x91\x82\x11a\x012W`$6`$\x84\x86\x01\x01\x11a\x012Wa\t\x92a\x0C\x9FV[a\t\xA1\x83a\x03\xBB`\nTa\x0B\xEBV[_\x91`\x1F\x84\x11`\x01\x14a\n3WPP\x7F\x024\xA4\xE9\x10\xF2\xB1\xE6\x18\xF2\xC9;\xE3\x16\xEC\x0C\x7F@\xE1\xAF#\xFE3\xF9\xFB\xA2\xC5\xBB8\x8A\x95\xF2\x92\x82a\t\xF7\x81`$\x95`@\x95_\x91a\n&W[P\x81`\x01\x1B\x91_\x19\x90`\x03\x1B\x1C\x19\x16\x17\x90V[`\nU[\x80\x83Q\x94\x85\x93` \x85R\x82` \x86\x01R\x01\x84\x84\x017_\x82\x82\x01\x84\x01R`\x1F\x01`\x1F\x19\x16\x81\x01\x03\x01\x90\xA1\0[\x87\x91P\x85\x01\x015\x88a\t\xE4V[`\n_\x90\x81R_\x80Q` a\r\x11\x839\x81Q\x91R\x93\x92`\x1F\x19\x86\x16\x92\x90[\x83\x83\x10a\n\xB7WPPP\x92`@\x92\x7F\x024\xA4\xE9\x10\xF2\xB1\xE6\x18\xF2\xC9;\xE3\x16\xEC\x0C\x7F@\xE1\xAF#\xFE3\xF9\xFB\xA2\xC5\xBB8\x8A\x95\xF2\x95\x92\x82`$\x96\x10a\n\x9CW[PP`\x01\x81\x81\x1B\x01`\nUa\t\xFBV[\x83\x01\x85\x015_\x19`\x03\x84\x90\x1B`\xF8\x16\x1C\x19\x16\x90U\x85\x80a\n\x8CV[\x90\x80`\x01\x86\x97\x84\x83\x96\x98\x8C\x01\x015\x81U\x01\x96\x01\x94\x01\x91\x90a\nQV[4a\x012W_6`\x03\x19\x01\x12a\x012W` `\x05T`@Q\x90\x81R\xF3[4a\x012W_6`\x03\x19\x01\x12a\x012W`\tT`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x90\xF3[4a\x012W` 6`\x03\x19\x01\x12a\x012Wa\x0B1a\x0B\xD5V[a\x0B9a\x0C\x9FV[`\x01`\x01`\xA0\x1B\x03\x16\x80\x15a\x0B\x80W`\t\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16\x82\x17\x90U\x7F\x88)\xBE\xE4f\x83`\x8D_\xD8\x0E$<\x0F\xAE\x04\xD1)\xCE\x17/p\xDB\x10!\xC1\x12\x80t\xA6\xF4\xD9_\x80\xA2\0[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`'`$\x82\x01R\x7FNew rollup owner cannot be zero `D\x82\x01Rfaddress`\xC8\x1B`d\x82\x01R`\x84\x90\xFD[`\x045\x90`\x01`\x01`\xA0\x1B\x03\x82\x16\x82\x03a\x012WV[\x90`\x01\x82\x81\x1C\x92\x16\x80\x15a\x0C\x19W[` \x83\x10\x14a\x0C\x05WV[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x91`\x7F\x16\x91a\x0B\xFAV[\x90`\x1F\x80\x19\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x04\xDEW`@RV[`\x1F\x81\x11a\x0CQWPPV[`\n_R_\x80Q` a\r\x11\x839\x81Q\x91R\x90` `\x1F\x84\x01`\x05\x1C\x83\x01\x93\x10a\x0C\x95W[`\x1F\x01`\x05\x1C\x01\x90[\x81\x81\x10a\x0C\x8AWPPV[_\x81U`\x01\x01a\x0C\x7FV[\x90\x91P\x81\x90a\x0CvV[_T`\x01`\x01`\xA0\x1B\x03\x163\x03a\x0C\xB2WV[`@Qc\x11\x8C\xDA\xA7`\xE0\x1B\x81R3`\x04\x82\x01R`$\x90\xFD[_\x80T`\x01`\x01`\xA0\x1B\x03\x92\x83\x16`\x01`\x01`\xA0\x1B\x03\x19\x82\x16\x81\x17\x83U\x92\x16\x90\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x90\x80\xA3V\xFE\xC6Z{\xB8\xD65\x1C\x1C\xF7\x0C\x95\xA3\x16\xCCj\x92\x83\x9C\x98f\x82\xD9\x8B\xC3_\x95\x8FH\x83\xF9\xD2\xA8\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0\xA2dipfsX\"\x12  \xD3}\x97\xBD\xE0\x07N\xA0n\xE0|2\xCE\x86\xF3>a\n1\xDB\xDE`\xB2\xC2B\x1D\0}6\xE7\xA6dsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x6080806040526004361015610012575f80fd5b5f905f3560e01c90816359659e901461069257508063715018a61461063b57806383f94db7146104f25780638738fc1e146101905780638da5cb5b146101695780639b95cdd114610138578063a33a8b60146101055763f2fde38b14610076575f80fd5b346101025760203660031901126101025761008f6106d3565b61009761096f565b6001600160a01b039081169081156100e9575f54826bffffffffffffffffffffffff60a01b8216175f55167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a380f35b604051631e4fbdf760e01b815260048101849052602490fd5b80fd5b503461010257602036600319011261010257602090600435815260018252604060018060a01b0391205416604051908152f35b50346101025760203660031901126101025760206101576004356107bc565b6040516001600160a01b039091168152f35b5034610102578060031936011261010257546040516001600160a01b039091168152602090f35b5034610102576101803660031901126101025760443580151581036104ee576064356001600160a01b03811681036104ee57608435916001600160a01b03831683036104ee5760a4359081151582036104ee5761010435916001600160a01b03831683036104ee57610144356001600160a01b03811681036104ee5767ffffffffffffffff61016435116104ea57366023610164350112156104ea5767ffffffffffffffff6101643560040135116104d657604051906102616004610164350135601f01601f191660200183610705565b60046101643590810135808452369101602401116104d25761016435600401356024610164350160208401378760206101643560040135840101526102a461096f565b6102b16004351515610727565b6004358852600160205260408820546001600160a01b031661047d57610397946103899360405160208101906004358252602081526102ef816106e9565b5190209860405198899763336b4e7f60e21b60208a015260043560248a015260243560448a01521515606489015260018060a01b0316608488015260018060a01b031660a4870152151560c486015260c43560e486015260e43561010486015260018060a01b03166101248501526101243561014485015260018060a01b03166101648401526101806101848401526101a4830190610773565b03601f198101835282610705565b604051906104808083019083821067ffffffffffffffff83111761046957916103f191849361099b85397f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690610797565b039083f5801561045c576004358083526001602090815260409384902080546001600160a01b0319166001600160a01b03909416938417905592518281527fa644dec51e1b18a43de39b30f4ba14f81f5058cdf7db83262ec60ab612dc54b1908490a2604051908152f35b50604051903d90823e3d90fd5b634e487b7160e01b86526041600452602486fd5b60405162461bcd60e51b815260206004820152602760248201527f436f6e66696720616c72656164792065786973747320666f72207468697320636044820152661a185a5b88125160ca1b6064820152608490fd5b8780fd5b634e487b7160e01b87526041600452602487fd5b8680fd5b5f80fd5b50346104ee5760203660031901126104ee5761050c6106d3565b61051461096f565b6001600160a01b039081169081156105e4577f000000000000000000000000000000000000000000000000000000000000000016803b156104ee575f8091602460405180948193631b2ce7f360e11b83528760048401525af180156105d9576105a7575b5060207f51ea6ffdc9909d5ca341259f7221902e0676585d833e2bb21fa923c85e86288691604051908152a180f35b90915067ffffffffffffffff81116105c5576040525f906020610578565b634e487b7160e01b5f52604160045260245ffd5b6040513d5f823e3d90fd5b60405162461bcd60e51b815260206004820152602960248201527f4e657720696d706c656d656e746174696f6e2063616e6e6f74206265207a65726044820152686f206164647265737360b81b6064820152608490fd5b346104ee575f3660031901126104ee5761065361096f565b5f80546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346104ee575f3660031901126104ee577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b600435906001600160a01b03821682036104ee57565b6040810190811067ffffffffffffffff8211176105c557604052565b90601f8019910116810190811067ffffffffffffffff8211176105c557604052565b1561072e57565b60405162461bcd60e51b815260206004820152601760248201527f436861696e2049442063616e6e6f74206265207a65726f0000000000000000006044820152606490fd5b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b6001600160a01b0390911681526040602082018190526107b992910190610773565b90565b5f81815260016020908152604091829020546001600160a01b03939084168061096757506107eb811515610727565b825182810190828252838152610800816106e9565b5190209280519163336b4e7f60e21b848401526101a49060248401525f60448401525f606484015260016084840152600260a48401525f60c48401525f60e48401525f61010484015260036101248401525f61014484015260046101648401526101806101848401525f8184015282526101e082019167ffffffffffffffff92818110848211176105c5578083526108d86102008301926108c4818a7f00000000000000000000000000000000000000000000000000000000000000001686610797565b036101ff19810183526101df190182610705565b610928856104808551946108ee83830187610705565b8186528286019161099b8339865194859284840197518091895e830190848201905f8252519283915e015f83820152038084520182610705565b51902081519384019460ff60f81b86523060601b602186015260358501526055840152605583526080830191838310908311176105c557525190201690565b935050505090565b5f546001600160a01b0316330361098257565b60405163118cdaa760e01b8152336004820152602490fdfe60a06040908082526104808038038091610019828561028f565b8339810182828203126101e05761002f826102c6565b60208084015191939091906001600160401b0382116101e057019180601f840112156101e0578251610060816102da565b9361006d8751958661028f565b818552838501928483830101116101e057815f9285809301855e85010152833b1561026f577fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d5080546001600160a01b0319166001600160a01b038681169182179092558651635c60da1b60e01b8082529193928582600481885afa918215610265575f9261022e575b50813b156102155750508651837f1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e5f80a28551156101f557508390600488518095819382525afa9182156101eb575f926101a7575b505f8091610184955190845af4903d1561019e573d610169816102da565b906101768851928361028f565b81525f81943d92013e6102f5565b505b60805251610127908161035982396080518160180152f35b606092506102f5565b9391508284813d83116101e4575b6101bf818361028f565b810103126101e0575f80916101d6610184966102c6565b939550915061014b565b5f80fd5b503d6101b5565b86513d5f823e3d90fd5b945050505050346102065750610186565b63b398979f60e01b8152600490fd5b8851634c9c8ce360e01b81529116600482015260249150fd5b9091508581813d831161025e575b610246818361028f565b810103126101e057610257906102c6565b905f6100f6565b503d61023c565b89513d5f823e3d90fd5b8451631933b43b60e21b81526001600160a01b0385166004820152602490fd5b601f909101601f19168101906001600160401b038211908210176102b257604052565b634e487b7160e01b5f52604160045260245ffd5b51906001600160a01b03821682036101e057565b6001600160401b0381116102b257601f01601f191660200190565b9061031c575080511561030a57805190602001fd5b60405163d6bda27560e01b8152600490fd5b8151158061034f575b61032d575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b1561032556fe60806040819052635c60da1b60e01b81526020816004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa90811560a6575f916053575b5060d5565b905060203d60201160a0575b601f8101601f191682019167ffffffffffffffff831181841017608c576087926040520160b1565b5f604e565b634e487b7160e01b5f52604160045260245ffd5b503d605f565b6040513d5f823e3d90fd5b602090607f19011260d1576080516001600160a01b038116810360d15790565b5f80fd5b5f8091368280378136915af43d5f803e1560ed573d5ff35b3d5ffdfea2646970667358221220c9a56beb19eb072b9dc1fab1e8891d58f2e4dc6d96c6d002ab8744fb39474b5c64736f6c63430008190033a2646970667358221220b14446e539580e0473c7c34e96f1c14fded1b6c11e0302b45955228fea08381564736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80\x80`@R`\x046\x10\x15a\0\x12W_\x80\xFD[_\x90_5`\xE0\x1C\x90\x81cYe\x9E\x90\x14a\x06\x92WP\x80cqP\x18\xA6\x14a\x06;W\x80c\x83\xF9M\xB7\x14a\x04\xF2W\x80c\x878\xFC\x1E\x14a\x01\x90W\x80c\x8D\xA5\xCB[\x14a\x01iW\x80c\x9B\x95\xCD\xD1\x14a\x018W\x80c\xA3:\x8B`\x14a\x01\x05Wc\xF2\xFD\xE3\x8B\x14a\0vW_\x80\xFD[4a\x01\x02W` 6`\x03\x19\x01\x12a\x01\x02Wa\0\x8Fa\x06\xD3V[a\0\x97a\toV[`\x01`\x01`\xA0\x1B\x03\x90\x81\x16\x90\x81\x15a\0\xE9W_T\x82k\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\xA0\x1B\x82\x16\x17_U\x16\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0_\x80\xA3\x80\xF3[`@Qc\x1EO\xBD\xF7`\xE0\x1B\x81R`\x04\x81\x01\x84\x90R`$\x90\xFD[\x80\xFD[P4a\x01\x02W` 6`\x03\x19\x01\x12a\x01\x02W` \x90`\x045\x81R`\x01\x82R`@`\x01\x80`\xA0\x1B\x03\x91 T\x16`@Q\x90\x81R\xF3[P4a\x01\x02W` 6`\x03\x19\x01\x12a\x01\x02W` a\x01W`\x045a\x07\xBCV[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R\xF3[P4a\x01\x02W\x80`\x03\x196\x01\x12a\x01\x02WT`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x90\xF3[P4a\x01\x02Wa\x01\x806`\x03\x19\x01\x12a\x01\x02W`D5\x80\x15\x15\x81\x03a\x04\xEEW`d5`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x03a\x04\xEEW`\x845\x91`\x01`\x01`\xA0\x1B\x03\x83\x16\x83\x03a\x04\xEEW`\xA45\x90\x81\x15\x15\x82\x03a\x04\xEEWa\x01\x045\x91`\x01`\x01`\xA0\x1B\x03\x83\x16\x83\x03a\x04\xEEWa\x01D5`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x03a\x04\xEEWg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x01d5\x11a\x04\xEAW6`#a\x01d5\x01\x12\x15a\x04\xEAWg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x01d5`\x04\x015\x11a\x04\xD6W`@Q\x90a\x02a`\x04a\x01d5\x015`\x1F\x01`\x1F\x19\x16` \x01\x83a\x07\x05V[`\x04a\x01d5\x90\x81\x015\x80\x84R6\x91\x01`$\x01\x11a\x04\xD2Wa\x01d5`\x04\x015`$a\x01d5\x01` \x84\x017\x87` a\x01d5`\x04\x015\x84\x01\x01Ra\x02\xA4a\toV[a\x02\xB1`\x045\x15\x15a\x07'V[`\x045\x88R`\x01` R`@\x88 T`\x01`\x01`\xA0\x1B\x03\x16a\x04}Wa\x03\x97\x94a\x03\x89\x93`@Q` \x81\x01\x90`\x045\x82R` \x81Ra\x02\xEF\x81a\x06\xE9V[Q\x90 \x98`@Q\x98\x89\x97c3kN\x7F`\xE2\x1B` \x8A\x01R`\x045`$\x8A\x01R`$5`D\x8A\x01R\x15\x15`d\x89\x01R`\x01\x80`\xA0\x1B\x03\x16`\x84\x88\x01R`\x01\x80`\xA0\x1B\x03\x16`\xA4\x87\x01R\x15\x15`\xC4\x86\x01R`\xC45`\xE4\x86\x01R`\xE45a\x01\x04\x86\x01R`\x01\x80`\xA0\x1B\x03\x16a\x01$\x85\x01Ra\x01$5a\x01D\x85\x01R`\x01\x80`\xA0\x1B\x03\x16a\x01d\x84\x01Ra\x01\x80a\x01\x84\x84\x01Ra\x01\xA4\x83\x01\x90a\x07sV[\x03`\x1F\x19\x81\x01\x83R\x82a\x07\x05V[`@Q\x90a\x04\x80\x80\x83\x01\x90\x83\x82\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11\x17a\x04iW\x91a\x03\xF1\x91\x84\x93a\t\x9B\x859\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x01`\x01`\xA0\x1B\x03\x16\x90a\x07\x97V[\x03\x90\x83\xF5\x80\x15a\x04\\W`\x045\x80\x83R`\x01` \x90\x81R`@\x93\x84\x90 \x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x90\x94\x16\x93\x84\x17\x90U\x92Q\x82\x81R\x7F\xA6D\xDE\xC5\x1E\x1B\x18\xA4=\xE3\x9B0\xF4\xBA\x14\xF8\x1FPX\xCD\xF7\xDB\x83&.\xC6\n\xB6\x12\xDCT\xB1\x90\x84\x90\xA2`@Q\x90\x81R\xF3[P`@Q\x90=\x90\x82>=\x90\xFD[cNH{q`\xE0\x1B\x86R`A`\x04R`$\x86\xFD[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`'`$\x82\x01R\x7FConfig already exists for this c`D\x82\x01Rf\x1A\x18Z[\x88\x12Q`\xCA\x1B`d\x82\x01R`\x84\x90\xFD[\x87\x80\xFD[cNH{q`\xE0\x1B\x87R`A`\x04R`$\x87\xFD[\x86\x80\xFD[_\x80\xFD[P4a\x04\xEEW` 6`\x03\x19\x01\x12a\x04\xEEWa\x05\x0Ca\x06\xD3V[a\x05\x14a\toV[`\x01`\x01`\xA0\x1B\x03\x90\x81\x16\x90\x81\x15a\x05\xE4W\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x80;\x15a\x04\xEEW_\x80\x91`$`@Q\x80\x94\x81\x93c\x1B,\xE7\xF3`\xE1\x1B\x83R\x87`\x04\x84\x01RZ\xF1\x80\x15a\x05\xD9Wa\x05\xA7W[P` \x7FQ\xEAo\xFD\xC9\x90\x9D\\\xA3A%\x9Fr!\x90.\x06vX]\x83>+\xB2\x1F\xA9#\xC8^\x86(\x86\x91`@Q\x90\x81R\xA1\x80\xF3[\x90\x91Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05\xC5W`@R_\x90` a\x05xV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@Q=_\x82>=\x90\xFD[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`)`$\x82\x01R\x7FNew implementation cannot be zer`D\x82\x01Rho address`\xB8\x1B`d\x82\x01R`\x84\x90\xFD[4a\x04\xEEW_6`\x03\x19\x01\x12a\x04\xEEWa\x06Sa\toV[_\x80T`\x01`\x01`\xA0\x1B\x03\x19\x81\x16\x82U`\x01`\x01`\xA0\x1B\x03\x16\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x82\x80\xA3\0[4a\x04\xEEW_6`\x03\x19\x01\x12a\x04\xEEW\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x90\xF3[`\x045\x90`\x01`\x01`\xA0\x1B\x03\x82\x16\x82\x03a\x04\xEEWV[`@\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x05\xC5W`@RV[\x90`\x1F\x80\x19\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x05\xC5W`@RV[\x15a\x07.WV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x17`$\x82\x01R\x7FChain ID cannot be zero\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x90\xFD[\x80Q\x80\x83R` \x92\x91\x81\x90\x84\x01\x84\x84\x01^_\x82\x82\x01\x84\x01R`\x1F\x01`\x1F\x19\x16\x01\x01\x90V[`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R`@` \x82\x01\x81\x90Ra\x07\xB9\x92\x91\x01\x90a\x07sV[\x90V[_\x81\x81R`\x01` \x90\x81R`@\x91\x82\x90 T`\x01`\x01`\xA0\x1B\x03\x93\x90\x84\x16\x80a\tgWPa\x07\xEB\x81\x15\x15a\x07'V[\x82Q\x82\x81\x01\x90\x82\x82R\x83\x81Ra\x08\0\x81a\x06\xE9V[Q\x90 \x92\x80Q\x91c3kN\x7F`\xE2\x1B\x84\x84\x01Ra\x01\xA4\x90`$\x84\x01R_`D\x84\x01R_`d\x84\x01R`\x01`\x84\x84\x01R`\x02`\xA4\x84\x01R_`\xC4\x84\x01R_`\xE4\x84\x01R_a\x01\x04\x84\x01R`\x03a\x01$\x84\x01R_a\x01D\x84\x01R`\x04a\x01d\x84\x01Ra\x01\x80a\x01\x84\x84\x01R_\x81\x84\x01R\x82Ra\x01\xE0\x82\x01\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x92\x81\x81\x10\x84\x82\x11\x17a\x05\xC5W\x80\x83Ra\x08\xD8a\x02\0\x83\x01\x92a\x08\xC4\x81\x8A\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x86a\x07\x97V[\x03a\x01\xFF\x19\x81\x01\x83Ra\x01\xDF\x19\x01\x82a\x07\x05V[a\t(\x85a\x04\x80\x85Q\x94a\x08\xEE\x83\x83\x01\x87a\x07\x05V[\x81\x86R\x82\x86\x01\x91a\t\x9B\x839\x86Q\x94\x85\x92\x84\x84\x01\x97Q\x80\x91\x89^\x83\x01\x90\x84\x82\x01\x90_\x82RQ\x92\x83\x91^\x01_\x83\x82\x01R\x03\x80\x84R\x01\x82a\x07\x05V[Q\x90 \x81Q\x93\x84\x01\x94`\xFF`\xF8\x1B\x86R0``\x1B`!\x86\x01R`5\x85\x01R`U\x84\x01R`U\x83R`\x80\x83\x01\x91\x83\x83\x10\x90\x83\x11\x17a\x05\xC5WRQ\x90 \x16\x90V[\x93PPPP\x90V[_T`\x01`\x01`\xA0\x1B\x03\x163\x03a\t\x82WV[`@Qc\x11\x8C\xDA\xA7`\xE0\x1B\x81R3`\x04\x82\x01R`$\x90\xFD\xFE`\xA0`@\x90\x80\x82Ra\x04\x80\x808\x03\x80\x91a\0\x19\x82\x85a\x02\x8FV[\x839\x81\x01\x82\x82\x82\x03\x12a\x01\xE0Wa\0/\x82a\x02\xC6V[` \x80\x84\x01Q\x91\x93\x90\x91\x90`\x01`\x01`@\x1B\x03\x82\x11a\x01\xE0W\x01\x91\x80`\x1F\x84\x01\x12\x15a\x01\xE0W\x82Qa\0`\x81a\x02\xDAV[\x93a\0m\x87Q\x95\x86a\x02\x8FV[\x81\x85R\x83\x85\x01\x92\x84\x83\x83\x01\x01\x11a\x01\xE0W\x81_\x92\x85\x80\x93\x01\x85^\x85\x01\x01R\x83;\x15a\x02oW\x7F\xA3\xF0\xADt\xE5B:\xEB\xFD\x80\xD3\xEFCFW\x835\xA9\xA7*\xEA\xEEY\xFFl\xB3X+5\x13=P\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x86\x81\x16\x91\x82\x17\x90\x92U\x86Qc\\`\xDA\x1B`\xE0\x1B\x80\x82R\x91\x93\x92\x85\x82`\x04\x81\x88Z\xFA\x91\x82\x15a\x02eW_\x92a\x02.W[P\x81;\x15a\x02\x15WPP\x86Q\x83\x7F\x1C\xF3\xB0:l\xF1\x9F\xA2\xBA\xBAM\xF1H\xE9\xDC\xAB\xED\xEA\x7F\x8A\\\x07\x84\x0E ~\\\x08\x9B\xE9]>_\x80\xA2\x85Q\x15a\x01\xF5WP\x83\x90`\x04\x88Q\x80\x95\x81\x93\x82RZ\xFA\x91\x82\x15a\x01\xEBW_\x92a\x01\xA7W[P_\x80\x91a\x01\x84\x95Q\x90\x84Z\xF4\x90=\x15a\x01\x9EW=a\x01i\x81a\x02\xDAV[\x90a\x01v\x88Q\x92\x83a\x02\x8FV[\x81R_\x81\x94=\x92\x01>a\x02\xF5V[P[`\x80RQa\x01'\x90\x81a\x03Y\x829`\x80Q\x81`\x18\x01R\xF3[``\x92Pa\x02\xF5V[\x93\x91P\x82\x84\x81=\x83\x11a\x01\xE4W[a\x01\xBF\x81\x83a\x02\x8FV[\x81\x01\x03\x12a\x01\xE0W_\x80\x91a\x01\xD6a\x01\x84\x96a\x02\xC6V[\x93\x95P\x91Pa\x01KV[_\x80\xFD[P=a\x01\xB5V[\x86Q=_\x82>=\x90\xFD[\x94PPPPP4a\x02\x06WPa\x01\x86V[c\xB3\x98\x97\x9F`\xE0\x1B\x81R`\x04\x90\xFD[\x88QcL\x9C\x8C\xE3`\xE0\x1B\x81R\x91\x16`\x04\x82\x01R`$\x91P\xFD[\x90\x91P\x85\x81\x81=\x83\x11a\x02^W[a\x02F\x81\x83a\x02\x8FV[\x81\x01\x03\x12a\x01\xE0Wa\x02W\x90a\x02\xC6V[\x90_a\0\xF6V[P=a\x02<V[\x89Q=_\x82>=\x90\xFD[\x84Qc\x193\xB4;`\xE2\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x85\x16`\x04\x82\x01R`$\x90\xFD[`\x1F\x90\x91\x01`\x1F\x19\x16\x81\x01\x90`\x01`\x01`@\x1B\x03\x82\x11\x90\x82\x10\x17a\x02\xB2W`@RV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[Q\x90`\x01`\x01`\xA0\x1B\x03\x82\x16\x82\x03a\x01\xE0WV[`\x01`\x01`@\x1B\x03\x81\x11a\x02\xB2W`\x1F\x01`\x1F\x19\x16` \x01\x90V[\x90a\x03\x1CWP\x80Q\x15a\x03\nW\x80Q\x90` \x01\xFD[`@Qc\xD6\xBD\xA2u`\xE0\x1B\x81R`\x04\x90\xFD[\x81Q\x15\x80a\x03OW[a\x03-WP\x90V[`@Qc\x99\x96\xB3\x15`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16`\x04\x82\x01R`$\x90\xFD[P\x80;\x15a\x03%V\xFE`\x80`@\x81\x90Rc\\`\xDA\x1B`\xE0\x1B\x81R` \x81`\x04\x81\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x01`\x01`\xA0\x1B\x03\x16Z\xFA\x90\x81\x15`\xA6W_\x91`SW[P`\xD5V[\x90P` =` \x11`\xA0W[`\x1F\x81\x01`\x1F\x19\x16\x82\x01\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11\x81\x84\x10\x17`\x8CW`\x87\x92`@R\x01`\xB1V[_`NV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[P=`_V[`@Q=_\x82>=\x90\xFD[` \x90`\x7F\x19\x01\x12`\xD1W`\x80Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x03`\xD1W\x90V[_\x80\xFD[_\x80\x916\x82\x807\x816\x91Z\xF4=_\x80>\x15`\xEDW=_\xF3[=_\xFD\xFE\xA2dipfsX\"\x12 \xC9\xA5k\xEB\x19\xEB\x07+\x9D\xC1\xFA\xB1\xE8\x89\x1DX\xF2\xE4\xDCm\x96\xC6\xD0\x02\xAB\x87D\xFB9GK\\dsolcC\0\x08\x19\x003\xA2dipfsX\"\x12 \xB1DF\xE59X\x0E\x04s\xC7\xC3N\x96\xF1\xC1O\xDE\xD1\xB6\xC1\x1E\x03\x02\xB4YU\"\x8F\xEA\x088\x15dsolcC\0\x08\x19\x003",
    );
    /**Custom error with signature `OwnableInvalidOwner(address)` and selector `0x1e4fbdf7`.
```solidity
error OwnableInvalidOwner(address owner);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableInvalidOwner {
        pub owner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableInvalidOwner> for UnderlyingRustTuple<'_> {
            fn from(value: OwnableInvalidOwner) -> Self {
                (value.owner,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for OwnableInvalidOwner {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { owner: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableInvalidOwner {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableInvalidOwner(address)";
            const SELECTOR: [u8; 4] = [30u8, 79u8, 189u8, 247u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `OwnableUnauthorizedAccount(address)` and selector `0x118cdaa7`.
```solidity
error OwnableUnauthorizedAccount(address account);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableUnauthorizedAccount {
        pub account: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: OwnableUnauthorizedAccount) -> Self {
                (value.account,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for OwnableUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { account: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableUnauthorizedAccount(address)";
            const SELECTOR: [u8; 4] = [17u8, 140u8, 218u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
        }
    };
    /**Event with signature `ChainConfigCreated(uint256,address)` and selector `0xa644dec51e1b18a43de39b30f4ba14f81f5058cdf7db83262ec60ab612dc54b1`.
```solidity
event ChainConfigCreated(uint256 indexed chainId, address configAddress);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct ChainConfigCreated {
        #[allow(missing_docs)]
        pub chainId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub configAddress: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for ChainConfigCreated {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            const SIGNATURE: &'static str = "ChainConfigCreated(uint256,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                166u8,
                68u8,
                222u8,
                197u8,
                30u8,
                27u8,
                24u8,
                164u8,
                61u8,
                227u8,
                155u8,
                48u8,
                244u8,
                186u8,
                20u8,
                248u8,
                31u8,
                80u8,
                88u8,
                205u8,
                247u8,
                219u8,
                131u8,
                38u8,
                46u8,
                198u8,
                10u8,
                182u8,
                18u8,
                220u8,
                84u8,
                177u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    chainId: topics.1,
                    configAddress: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.configAddress,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.chainId.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.chainId);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for ChainConfigCreated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&ChainConfigCreated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &ChainConfigCreated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `ImplementationUpgraded(address)` and selector `0x51ea6ffdc9909d5ca341259f7221902e0676585d833e2bb21fa923c85e862886`.
```solidity
event ImplementationUpgraded(address newImplementation);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct ImplementationUpgraded {
        #[allow(missing_docs)]
        pub newImplementation: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for ImplementationUpgraded {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "ImplementationUpgraded(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                81u8,
                234u8,
                111u8,
                253u8,
                201u8,
                144u8,
                157u8,
                92u8,
                163u8,
                65u8,
                37u8,
                159u8,
                114u8,
                33u8,
                144u8,
                46u8,
                6u8,
                118u8,
                88u8,
                93u8,
                131u8,
                62u8,
                43u8,
                178u8,
                31u8,
                169u8,
                35u8,
                200u8,
                94u8,
                134u8,
                40u8,
                134u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { newImplementation: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newImplementation,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for ImplementationUpgraded {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&ImplementationUpgraded> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &ImplementationUpgraded) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `OwnershipTransferred(address,address)` and selector `0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0`.
```solidity
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct OwnershipTransferred {
        #[allow(missing_docs)]
        pub previousOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OwnershipTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OwnershipTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousOwner: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousOwner.clone(),
                    self.newOwner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousOwner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OwnershipTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OwnershipTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &OwnershipTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {}
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Function with signature `beacon()` and selector `0x59659e90`.
```solidity
function beacon() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct beaconCall {}
    ///Container type for the return parameters of the [`beacon()`](beaconCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct beaconReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<beaconCall> for UnderlyingRustTuple<'_> {
                fn from(value: beaconCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for beaconCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<beaconReturn> for UnderlyingRustTuple<'_> {
                fn from(value: beaconReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for beaconReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for beaconCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = beaconReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "beacon()";
            const SELECTOR: [u8; 4] = [89u8, 101u8, 158u8, 144u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `createChainConfig(uint256,bytes32,bool,address,address,bool,uint256,uint256,address,uint256,address,string)` and selector `0x8738fc1e`.
```solidity
function createChainConfig(uint256 chainId, bytes32 targetRollupType, bool mineEmptyBlocks, address arbitrumBridgeAddress, address arbitrumInboxAddress, bool arbitrumIgnoreDelayedMessages, uint256 settlementDelay, uint256 settlementStartBlock, address sequencingContractAddress, uint256 sequencingStartBlock, address rollupOwner, string memory defaultSequencingChainRpcUrl) external returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct createChainConfigCall {
        pub chainId: alloy::sol_types::private::primitives::aliases::U256,
        pub targetRollupType: alloy::sol_types::private::FixedBytes<32>,
        pub mineEmptyBlocks: bool,
        pub arbitrumBridgeAddress: alloy::sol_types::private::Address,
        pub arbitrumInboxAddress: alloy::sol_types::private::Address,
        pub arbitrumIgnoreDelayedMessages: bool,
        pub settlementDelay: alloy::sol_types::private::primitives::aliases::U256,
        pub settlementStartBlock: alloy::sol_types::private::primitives::aliases::U256,
        pub sequencingContractAddress: alloy::sol_types::private::Address,
        pub sequencingStartBlock: alloy::sol_types::private::primitives::aliases::U256,
        pub rollupOwner: alloy::sol_types::private::Address,
        pub defaultSequencingChainRpcUrl: alloy::sol_types::private::String,
    }
    ///Container type for the return parameters of the [`createChainConfig(uint256,bytes32,bool,address,address,bool,uint256,uint256,address,uint256,address,string)`](createChainConfigCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct createChainConfigReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::String,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::FixedBytes<32>,
                bool,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                bool,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::String,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<createChainConfigCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: createChainConfigCall) -> Self {
                    (
                        value.chainId,
                        value.targetRollupType,
                        value.mineEmptyBlocks,
                        value.arbitrumBridgeAddress,
                        value.arbitrumInboxAddress,
                        value.arbitrumIgnoreDelayedMessages,
                        value.settlementDelay,
                        value.settlementStartBlock,
                        value.sequencingContractAddress,
                        value.sequencingStartBlock,
                        value.rollupOwner,
                        value.defaultSequencingChainRpcUrl,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for createChainConfigCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        chainId: tuple.0,
                        targetRollupType: tuple.1,
                        mineEmptyBlocks: tuple.2,
                        arbitrumBridgeAddress: tuple.3,
                        arbitrumInboxAddress: tuple.4,
                        arbitrumIgnoreDelayedMessages: tuple.5,
                        settlementDelay: tuple.6,
                        settlementStartBlock: tuple.7,
                        sequencingContractAddress: tuple.8,
                        sequencingStartBlock: tuple.9,
                        rollupOwner: tuple.10,
                        defaultSequencingChainRpcUrl: tuple.11,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<createChainConfigReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: createChainConfigReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for createChainConfigReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for createChainConfigCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::String,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = createChainConfigReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "createChainConfig(uint256,bytes32,bool,address,address,bool,uint256,uint256,address,uint256,address,string)";
            const SELECTOR: [u8; 4] = [135u8, 56u8, 252u8, 30u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.chainId),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.targetRollupType),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.mineEmptyBlocks,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.arbitrumBridgeAddress,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.arbitrumInboxAddress,
                    ),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.arbitrumIgnoreDelayedMessages,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.settlementDelay),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.settlementStartBlock),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.sequencingContractAddress,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.sequencingStartBlock),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.rollupOwner,
                    ),
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.defaultSequencingChainRpcUrl,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `deployedConfigs(uint256)` and selector `0xa33a8b60`.
```solidity
function deployedConfigs(uint256) external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct deployedConfigsCall {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`deployedConfigs(uint256)`](deployedConfigsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct deployedConfigsReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<deployedConfigsCall> for UnderlyingRustTuple<'_> {
                fn from(value: deployedConfigsCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for deployedConfigsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<deployedConfigsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: deployedConfigsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for deployedConfigsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for deployedConfigsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = deployedConfigsReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "deployedConfigs(uint256)";
            const SELECTOR: [u8; 4] = [163u8, 58u8, 139u8, 96u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._0),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getChainConfigAddress(uint256)` and selector `0x9b95cdd1`.
```solidity
function getChainConfigAddress(uint256 chainId) external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getChainConfigAddressCall {
        pub chainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`getChainConfigAddress(uint256)`](getChainConfigAddressCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getChainConfigAddressReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getChainConfigAddressCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getChainConfigAddressCall) -> Self {
                    (value.chainId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getChainConfigAddressCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { chainId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getChainConfigAddressReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getChainConfigAddressReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getChainConfigAddressReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getChainConfigAddressCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getChainConfigAddressReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getChainConfigAddress(uint256)";
            const SELECTOR: [u8; 4] = [155u8, 149u8, 205u8, 209u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.chainId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `owner()` and selector `0x8da5cb5b`.
```solidity
function owner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerCall {}
    ///Container type for the return parameters of the [`owner()`](ownerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "owner()";
            const SELECTOR: [u8; 4] = [141u8, 165u8, 203u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `renounceOwnership()` and selector `0x715018a6`.
```solidity
function renounceOwnership() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipCall {}
    ///Container type for the return parameters of the [`renounceOwnership()`](renounceOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceOwnershipCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceOwnership()";
            const SELECTOR: [u8; 4] = [113u8, 80u8, 24u8, 166u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferOwnership(address)` and selector `0xf2fde38b`.
```solidity
function transferOwnership(address newOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipCall {
        pub newOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferOwnership(address)`](transferOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipCall) -> Self {
                    (value.newOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferOwnershipCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferOwnership(address)";
            const SELECTOR: [u8; 4] = [242u8, 253u8, 227u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newOwner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `upgradeImplementation(address)` and selector `0x83f94db7`.
```solidity
function upgradeImplementation(address newImplementation) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct upgradeImplementationCall {
        pub newImplementation: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`upgradeImplementation(address)`](upgradeImplementationCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct upgradeImplementationReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<upgradeImplementationCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: upgradeImplementationCall) -> Self {
                    (value.newImplementation,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for upgradeImplementationCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newImplementation: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<upgradeImplementationReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: upgradeImplementationReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for upgradeImplementationReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for upgradeImplementationCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = upgradeImplementationReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "upgradeImplementation(address)";
            const SELECTOR: [u8; 4] = [131u8, 249u8, 77u8, 183u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newImplementation,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`ConfigManager`](self) function calls.
    pub enum ConfigManagerCalls {
        beacon(beaconCall),
        createChainConfig(createChainConfigCall),
        deployedConfigs(deployedConfigsCall),
        getChainConfigAddress(getChainConfigAddressCall),
        owner(ownerCall),
        renounceOwnership(renounceOwnershipCall),
        transferOwnership(transferOwnershipCall),
        upgradeImplementation(upgradeImplementationCall),
    }
    #[automatically_derived]
    impl ConfigManagerCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [89u8, 101u8, 158u8, 144u8],
            [113u8, 80u8, 24u8, 166u8],
            [131u8, 249u8, 77u8, 183u8],
            [135u8, 56u8, 252u8, 30u8],
            [141u8, 165u8, 203u8, 91u8],
            [155u8, 149u8, 205u8, 209u8],
            [163u8, 58u8, 139u8, 96u8],
            [242u8, 253u8, 227u8, 139u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ConfigManagerCalls {
        const NAME: &'static str = "ConfigManagerCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 8usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::beacon(_) => <beaconCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::createChainConfig(_) => {
                    <createChainConfigCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::deployedConfigs(_) => {
                    <deployedConfigsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getChainConfigAddress(_) => {
                    <getChainConfigAddressCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::owner(_) => <ownerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::renounceOwnership(_) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferOwnership(_) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::upgradeImplementation(_) => {
                    <upgradeImplementationCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<ConfigManagerCalls>] = &[
                {
                    fn beacon(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ConfigManagerCalls> {
                        <beaconCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ConfigManagerCalls::beacon)
                    }
                    beacon
                },
                {
                    fn renounceOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ConfigManagerCalls> {
                        <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ConfigManagerCalls::renounceOwnership)
                    }
                    renounceOwnership
                },
                {
                    fn upgradeImplementation(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ConfigManagerCalls> {
                        <upgradeImplementationCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ConfigManagerCalls::upgradeImplementation)
                    }
                    upgradeImplementation
                },
                {
                    fn createChainConfig(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ConfigManagerCalls> {
                        <createChainConfigCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ConfigManagerCalls::createChainConfig)
                    }
                    createChainConfig
                },
                {
                    fn owner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ConfigManagerCalls> {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ConfigManagerCalls::owner)
                    }
                    owner
                },
                {
                    fn getChainConfigAddress(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ConfigManagerCalls> {
                        <getChainConfigAddressCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ConfigManagerCalls::getChainConfigAddress)
                    }
                    getChainConfigAddress
                },
                {
                    fn deployedConfigs(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ConfigManagerCalls> {
                        <deployedConfigsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ConfigManagerCalls::deployedConfigs)
                    }
                    deployedConfigs
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ConfigManagerCalls> {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ConfigManagerCalls::transferOwnership)
                    }
                    transferOwnership
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::beacon(inner) => {
                    <beaconCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::createChainConfig(inner) => {
                    <createChainConfigCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::deployedConfigs(inner) => {
                    <deployedConfigsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getChainConfigAddress(inner) => {
                    <getChainConfigAddressCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::upgradeImplementation(inner) => {
                    <upgradeImplementationCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::beacon(inner) => {
                    <beaconCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::createChainConfig(inner) => {
                    <createChainConfigCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::deployedConfigs(inner) => {
                    <deployedConfigsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getChainConfigAddress(inner) => {
                    <getChainConfigAddressCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::upgradeImplementation(inner) => {
                    <upgradeImplementationCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`ConfigManager`](self) custom errors.
    pub enum ConfigManagerErrors {
        OwnableInvalidOwner(OwnableInvalidOwner),
        OwnableUnauthorizedAccount(OwnableUnauthorizedAccount),
    }
    #[automatically_derived]
    impl ConfigManagerErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [17u8, 140u8, 218u8, 167u8],
            [30u8, 79u8, 189u8, 247u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ConfigManagerErrors {
        const NAME: &'static str = "ConfigManagerErrors";
        const MIN_DATA_LENGTH: usize = 32usize;
        const COUNT: usize = 2usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::OwnableInvalidOwner(_) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableUnauthorizedAccount(_) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<ConfigManagerErrors>] = &[
                {
                    fn OwnableUnauthorizedAccount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ConfigManagerErrors> {
                        <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ConfigManagerErrors::OwnableUnauthorizedAccount)
                    }
                    OwnableUnauthorizedAccount
                },
                {
                    fn OwnableInvalidOwner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ConfigManagerErrors> {
                        <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ConfigManagerErrors::OwnableInvalidOwner)
                    }
                    OwnableInvalidOwner
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`ConfigManager`](self) events.
    pub enum ConfigManagerEvents {
        ChainConfigCreated(ChainConfigCreated),
        ImplementationUpgraded(ImplementationUpgraded),
        OwnershipTransferred(OwnershipTransferred),
    }
    #[automatically_derived]
    impl ConfigManagerEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                81u8,
                234u8,
                111u8,
                253u8,
                201u8,
                144u8,
                157u8,
                92u8,
                163u8,
                65u8,
                37u8,
                159u8,
                114u8,
                33u8,
                144u8,
                46u8,
                6u8,
                118u8,
                88u8,
                93u8,
                131u8,
                62u8,
                43u8,
                178u8,
                31u8,
                169u8,
                35u8,
                200u8,
                94u8,
                134u8,
                40u8,
                134u8,
            ],
            [
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ],
            [
                166u8,
                68u8,
                222u8,
                197u8,
                30u8,
                27u8,
                24u8,
                164u8,
                61u8,
                227u8,
                155u8,
                48u8,
                244u8,
                186u8,
                20u8,
                248u8,
                31u8,
                80u8,
                88u8,
                205u8,
                247u8,
                219u8,
                131u8,
                38u8,
                46u8,
                198u8,
                10u8,
                182u8,
                18u8,
                220u8,
                84u8,
                177u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for ConfigManagerEvents {
        const NAME: &'static str = "ConfigManagerEvents";
        const COUNT: usize = 3usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <ChainConfigCreated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <ChainConfigCreated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::ChainConfigCreated)
                }
                Some(
                    <ImplementationUpgraded as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <ImplementationUpgraded as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::ImplementationUpgraded)
                }
                Some(
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::OwnershipTransferred)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for ConfigManagerEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::ChainConfigCreated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::ImplementationUpgraded(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::ChainConfigCreated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::ImplementationUpgraded(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`ConfigManager`](self) contract instance.

See the [wrapper's documentation](`ConfigManagerInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> ConfigManagerInstance<T, P, N> {
        ConfigManagerInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<ConfigManagerInstance<T, P, N>>,
    > {
        ConfigManagerInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        ConfigManagerInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`ConfigManager`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`ConfigManager`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct ConfigManagerInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for ConfigManagerInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("ConfigManagerInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ConfigManagerInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`ConfigManager`](self) contract instance.

See the [wrapper's documentation](`ConfigManagerInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<ConfigManagerInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> ConfigManagerInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> ConfigManagerInstance<T, P, N> {
            ConfigManagerInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ConfigManagerInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`beacon`] function.
        pub fn beacon(&self) -> alloy_contract::SolCallBuilder<T, &P, beaconCall, N> {
            self.call_builder(&beaconCall {})
        }
        ///Creates a new call builder for the [`createChainConfig`] function.
        pub fn createChainConfig(
            &self,
            chainId: alloy::sol_types::private::primitives::aliases::U256,
            targetRollupType: alloy::sol_types::private::FixedBytes<32>,
            mineEmptyBlocks: bool,
            arbitrumBridgeAddress: alloy::sol_types::private::Address,
            arbitrumInboxAddress: alloy::sol_types::private::Address,
            arbitrumIgnoreDelayedMessages: bool,
            settlementDelay: alloy::sol_types::private::primitives::aliases::U256,
            settlementStartBlock: alloy::sol_types::private::primitives::aliases::U256,
            sequencingContractAddress: alloy::sol_types::private::Address,
            sequencingStartBlock: alloy::sol_types::private::primitives::aliases::U256,
            rollupOwner: alloy::sol_types::private::Address,
            defaultSequencingChainRpcUrl: alloy::sol_types::private::String,
        ) -> alloy_contract::SolCallBuilder<T, &P, createChainConfigCall, N> {
            self.call_builder(
                &createChainConfigCall {
                    chainId,
                    targetRollupType,
                    mineEmptyBlocks,
                    arbitrumBridgeAddress,
                    arbitrumInboxAddress,
                    arbitrumIgnoreDelayedMessages,
                    settlementDelay,
                    settlementStartBlock,
                    sequencingContractAddress,
                    sequencingStartBlock,
                    rollupOwner,
                    defaultSequencingChainRpcUrl,
                },
            )
        }
        ///Creates a new call builder for the [`deployedConfigs`] function.
        pub fn deployedConfigs(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, deployedConfigsCall, N> {
            self.call_builder(&deployedConfigsCall { _0 })
        }
        ///Creates a new call builder for the [`getChainConfigAddress`] function.
        pub fn getChainConfigAddress(
            &self,
            chainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, getChainConfigAddressCall, N> {
            self.call_builder(
                &getChainConfigAddressCall {
                    chainId,
                },
            )
        }
        ///Creates a new call builder for the [`owner`] function.
        pub fn owner(&self) -> alloy_contract::SolCallBuilder<T, &P, ownerCall, N> {
            self.call_builder(&ownerCall {})
        }
        ///Creates a new call builder for the [`renounceOwnership`] function.
        pub fn renounceOwnership(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, renounceOwnershipCall, N> {
            self.call_builder(&renounceOwnershipCall {})
        }
        ///Creates a new call builder for the [`transferOwnership`] function.
        pub fn transferOwnership(
            &self,
            newOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferOwnershipCall, N> {
            self.call_builder(&transferOwnershipCall { newOwner })
        }
        ///Creates a new call builder for the [`upgradeImplementation`] function.
        pub fn upgradeImplementation(
            &self,
            newImplementation: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, upgradeImplementationCall, N> {
            self.call_builder(
                &upgradeImplementationCall {
                    newImplementation,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ConfigManagerInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`ChainConfigCreated`] event.
        pub fn ChainConfigCreated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, ChainConfigCreated, N> {
            self.event_filter::<ChainConfigCreated>()
        }
        ///Creates a new event filter for the [`ImplementationUpgraded`] event.
        pub fn ImplementationUpgraded_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, ImplementationUpgraded, N> {
            self.event_filter::<ImplementationUpgraded>()
        }
        ///Creates a new event filter for the [`OwnershipTransferred`] event.
        pub fn OwnershipTransferred_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, OwnershipTransferred, N> {
            self.event_filter::<OwnershipTransferred>()
        }
    }
}
