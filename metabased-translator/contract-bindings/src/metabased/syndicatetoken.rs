/**

Generated by the following Solidity interface...
```solidity
interface SyndicateToken {
    error AccessControlBadConfirmation();
    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);
    error ECDSAInvalidSignature();
    error ECDSAInvalidSignatureLength(uint256 length);
    error ECDSAInvalidSignatureS(bytes32 s);
    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);
    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);
    error ERC20InvalidApprover(address approver);
    error ERC20InvalidReceiver(address receiver);
    error ERC20InvalidSender(address sender);
    error ERC20InvalidSpender(address spender);
    error ERC2612ExpiredSignature(uint256 deadline);
    error ERC2612InvalidSigner(address signer, address owner);
    error InvalidAccountNonce(address account, uint256 currentNonce);
    error InvalidShortString();
    error StringTooLong(string str);

    event Approval(address indexed owner, address indexed spender, uint256 value);
    event EIP712DomainChanged();
    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
    event Transfer(address indexed from, address indexed to, uint256 value);

    constructor(address defaultAdmin, address minter);

    function DEFAULT_ADMIN_ROLE() external view returns (bytes32);
    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function MINTER_ROLE() external view returns (bytes32);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 value) external returns (bool);
    function balanceOf(address account) external view returns (uint256);
    function decimals() external view returns (uint8);
    function eip712Domain() external view returns (bytes1 fields, string memory name, string memory version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] memory extensions);
    function getRoleAdmin(bytes32 role) external view returns (bytes32);
    function grantRole(bytes32 role, address account) external;
    function hasRole(bytes32 role, address account) external view returns (bool);
    function mint(address to, uint256 amount) external;
    function name() external view returns (string memory);
    function nonces(address owner) external view returns (uint256);
    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;
    function renounceRole(bytes32 role, address callerConfirmation) external;
    function revokeRole(bytes32 role, address account) external;
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
    function symbol() external view returns (string memory);
    function totalSupply() external view returns (uint256);
    function transfer(address to, uint256 value) external returns (bool);
    function transferFrom(address from, address to, uint256 value) external returns (bool);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "defaultAdmin",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "minter",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "DEFAULT_ADMIN_ROLE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "DOMAIN_SEPARATOR",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "MINTER_ROLE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "allowance",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "spender",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "approve",
    "inputs": [
      {
        "name": "spender",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "value",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "balanceOf",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "decimals",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint8",
        "internalType": "uint8"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "eip712Domain",
    "inputs": [],
    "outputs": [
      {
        "name": "fields",
        "type": "bytes1",
        "internalType": "bytes1"
      },
      {
        "name": "name",
        "type": "string",
        "internalType": "string"
      },
      {
        "name": "version",
        "type": "string",
        "internalType": "string"
      },
      {
        "name": "chainId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "verifyingContract",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "salt",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "extensions",
        "type": "uint256[]",
        "internalType": "uint256[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getRoleAdmin",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "grantRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "hasRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "mint",
    "inputs": [
      {
        "name": "to",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "name",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "nonces",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "permit",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "spender",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "value",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "deadline",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "v",
        "type": "uint8",
        "internalType": "uint8"
      },
      {
        "name": "r",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "s",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "renounceRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "callerConfirmation",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "revokeRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "supportsInterface",
    "inputs": [
      {
        "name": "interfaceId",
        "type": "bytes4",
        "internalType": "bytes4"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "symbol",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "totalSupply",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "transfer",
    "inputs": [
      {
        "name": "to",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "value",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "transferFrom",
    "inputs": [
      {
        "name": "from",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "to",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "value",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "Approval",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "spender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "value",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "EIP712DomainChanged",
    "inputs": [],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleAdminChanged",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "previousAdminRole",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "newAdminRole",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleGranted",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleRevoked",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Transfer",
    "inputs": [
      {
        "name": "from",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "to",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "value",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AccessControlBadConfirmation",
    "inputs": []
  },
  {
    "type": "error",
    "name": "AccessControlUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "neededRole",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ]
  },
  {
    "type": "error",
    "name": "ECDSAInvalidSignature",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ECDSAInvalidSignatureLength",
    "inputs": [
      {
        "name": "length",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ECDSAInvalidSignatureS",
    "inputs": [
      {
        "name": "s",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC20InsufficientAllowance",
    "inputs": [
      {
        "name": "spender",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "allowance",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "needed",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC20InsufficientBalance",
    "inputs": [
      {
        "name": "sender",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "balance",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "needed",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC20InvalidApprover",
    "inputs": [
      {
        "name": "approver",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC20InvalidReceiver",
    "inputs": [
      {
        "name": "receiver",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC20InvalidSender",
    "inputs": [
      {
        "name": "sender",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC20InvalidSpender",
    "inputs": [
      {
        "name": "spender",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC2612ExpiredSignature",
    "inputs": [
      {
        "name": "deadline",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC2612InvalidSigner",
    "inputs": [
      {
        "name": "signer",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "InvalidAccountNonce",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "currentNonce",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "InvalidShortString",
    "inputs": []
  },
  {
    "type": "error",
    "name": "StringTooLong",
    "inputs": [
      {
        "name": "str",
        "type": "string",
        "internalType": "string"
      }
    ]
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod SyndicateToken {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x610160604052346100735761001b610015610147565b906103ec565b610023610078565b61243c610d43823960805181611758015260a0518161178f015260c0518161171f015260e05181611e0901526101005181611e2e015261012051816118f601526101405181611936015261243c90f35b61007e565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906100aa90610082565b810190811060018060401b038211176100c257604052565b61008c565b906100da6100d3610078565b92836100a0565b565b5f80fd5b60018060a01b031690565b6100f4906100e0565b90565b610100816100eb565b0361010757565b5f80fd5b90505190610118826100f7565b565b9190604083820312610142578061013661013f925f860161010b565b9360200161010b565b90565b6100dc565b61016561317f8038038061015a816100c7565b92833981019061011a565b9091565b60018060401b03811161018557610181602091610082565b0190565b61008c565b9061019c61019783610169565b6100c7565b918252565b5f7f53796e6469636174650000000000000000000000000000000000000000000000910152565b6101d2600961018a565b906101df602083016101a1565b565b6101e96101c8565b90565b5f7f53594e4400000000000000000000000000000000000000000000000000000000910152565b61021d600461018a565b9061022a602083016101ec565b565b610234610213565b90565b90565b90565b61025161024c61025692610237565b61023a565b6100e0565b90565b6102629061023d565b90565b60209181520190565b60207f7265737300000000000000000000000000000000000000000000000000000000917f44656661756c742061646d696e2063616e6e6f74206265207a65726f206164645f8201520152565b6102c86024604092610265565b6102d18161026e565b0190565b6102ea9060208101905f8183039101526102bb565b90565b156102f457565b6102fc610078565b62461bcd60e51b815280610312600482016102d5565b0390fd5b5f7f4d696e7465722063616e6e6f74206265207a65726f2061646472657373000000910152565b61034a601d602092610265565b61035381610316565b0190565b61036c9060208101905f81830391015261033d565b90565b1561037657565b61037e610078565b62461bcd60e51b81528061039460048201610357565b0390fd5b90565b5f1b90565b6103b46103af6103b992610237565b61039b565b610398565b90565b6103c55f6103a0565b90565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a690565b9061046c61047a926104156103ff6101e1565b6104076101e1565b61040f61022c565b916104c8565b61043a8161043361042d6104285f610259565b6100eb565b916100eb565b14156102ed565b61045f8361045861045261044d5f610259565b6100eb565b916100eb565b141561036f565b6104676103bc565b6108ec565b506104756103c8565b6108ec565b50565b5f7f3100000000000000000000000000000000000000000000000000000000000000910152565b6104ae600161018a565b906104bb6020830161047d565b565b6104c56104a4565b90565b906104dc92916104d66104bd565b906104de565b565b906104ea939291610530565b565b90565b90565b60200190565b5190565b61051061050b610515926100e0565b61023a565b6100e0565b90565b610521906104fc565b90565b61052d90610518565b90565b6105416105919461057693946105c5565b6105558161054f60066104ec565b906109e7565b6101205261056d8361056760076104ec565b906109e7565b610140526104ef565b610588610582826104f8565b916104f2565b2060e0526104ef565b6105a361059d826104f8565b916104f2565b20610100524660a0526105b4610af9565b6080526105c030610524565b60c052565b906105cf916105d1565b565b906105db916105dd565b565b906105e79161083d565b565b5190565b634e487b7160e01b5f52602260045260245ffd5b9060016002830492168015610621575b602083101461061c57565b6105ed565b91607f1691610611565b5f5260205f2090565b601f602091010490565b1b90565b9190600861065d9102916106575f198461063e565b9261063e565b9181191691161790565b90565b61067e61067961068392610667565b61023a565b610667565b90565b90565b919061069f61069a6106a79361066a565b610686565b908354610642565b9055565b5f90565b6106c1916106bb6106ab565b91610689565b565b5b8181106106cf575050565b806106dc5f6001936106af565b016106c4565b9190601f81116106f2575b505050565b6106fe6107239361062b565b90602061070a84610634565b8301931061072b575b61071c90610634565b01906106c3565b5f80806106ed565b915061071c81929050610713565b1c90565b9061074d905f1990600802610739565b191690565b8161075c9161073d565b906002021790565b9061076e816105e9565b9060018060401b03821161082c576107908261078a8554610601565b856106e2565b602090601f83116001146107c4579180916107b3935f926107b8575b5050610752565b90555b565b90915001515f806107ac565b601f198316916107d38561062b565b925f5b818110610814575091600293918560019694106107fa575b505050020190556107b6565b61080a910151601f84169061073d565b90555f80806107ee565b919360206001819287870151815501950192016107d6565b61008c565b9061083b91610764565b565b9061084c610853926003610831565b6004610831565b565b5f90565b151590565b61086790610398565b90565b906108749061085e565b5f5260205260405f2090565b61088990610518565b90565b9061089690610880565b5f5260205260405f2090565b906108ae60ff9161039b565b9181191691161790565b6108c190610859565b90565b90565b906108dc6108d76108e3926108b8565b6108c4565b82546108a2565b9055565b5f0190565b6108f4610855565b50610909610903828490610b96565b15610859565b5f1461099257610931600161092c5f6109246005869061086a565b01859061088c565b6108c7565b9061093a610bc4565b9061097761097161096b7f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9561085e565b92610880565b92610880565b92610980610078565b8061098a816108e7565b0390a4600190565b50505f90565b5f90565b90565b6109b36109ae6109b89261099c565b61023a565b610667565b90565b90565b6109d26109cd6109d7926109bb565b61039b565b610398565b90565b6109e460ff6109be565b90565b906109f0610998565b50610a026109fd836104ef565b6104f8565b610a15610a0f602061099f565b91610667565b105f14610a295750610a2690610cb8565b90565b5f610a37610a3d9392610bd1565b01610831565b610a4d610a486109da565b61085e565b90565b5f90565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f90565b610a829051610398565b90565b610a8e90610398565b9052565b610a9b90610667565b9052565b610aa8906100eb565b9052565b90959492610af794610ae6610af092610adc608096610ad260a088019c5f890190610a85565b6020870190610a85565b6040850190610a85565b6060830190610a92565b0190610a9f565b565b610b01610a50565b50610b0a610a54565b610b54610b1760e0610a78565b91610b45610b26610100610a78565b46610b3030610524565b91610b39610078565b96879560208701610aac565b602082018103825203826100a0565b610b66610b60826104f8565b916104f2565b2090565b5f1c90565b60ff1690565b610b81610b8691610b6a565b610b6f565b90565b610b939054610b75565b90565b610bbd915f610bb2610bb893610baa610855565b50600561086a565b0161088c565b610b89565b90565b5f90565b610bcc610bc0565b503390565b90565b90565b610beb610be6610bf092610bd4565b61023a565b610667565b90565b90825f9392825e0152565b610c1d610c26602093610c2b93610c14816105e9565b93848093610265565b95869101610bf3565b610082565b0190565b610c449160208201915f818403910152610bfe565b90565b610c61610c5c610c56836104f8565b926104f2565b610a78565b9060208110610c6f575b5090565b610c81905f199060200360080261063e565b165f610c6b565b610c94610c9991610b6a565b61066a565b90565b610cb0610cab610cb592610667565b61039b565b610398565b90565b610cc0610998565b50610cca816104ef565b90610cd4826104f8565b610ce7610ce1601f610bd7565b91610667565b11610d1c5750610d1481610d0e610d08610d03610d1995610c47565b610c88565b916104f8565b17610c9c565b61085e565b90565b610d3e90610d28610078565b91829163305a27a960e01b835260048301610c2f565b0390fdfe60806040526004361015610013575b610b29565b61001d5f3561017c565b806301ffc9a71461017757806306fdde0314610172578063095ea7b31461016d57806318160ddd1461016857806323b872dd14610163578063248a9ca31461015e5780632f2ff15d14610159578063313ce567146101545780633644e5151461014f57806336568abe1461014a57806340c10f191461014557806370a08231146101405780637ecebe001461013b57806384b0196e1461013657806391d148541461013157806395d89b411461012c578063a217fddf14610127578063a9059cbb14610122578063d505accf1461011d578063d539139314610118578063d547741f146101135763dd62ed3e0361000e57610af3565b610a92565b610a5d565b6109f4565b61092b565b6108f6565b610886565b610850565b610814565b6106c0565b61068b565b610639565b610605565b6105d0565b61059b565b61053f565b6104d8565b61043c565b6103cd565b610375565b6102b3565b610204565b60e01c90565b60405190565b5f80fd5b5f80fd5b63ffffffff60e01b1690565b6101a581610190565b036101ac57565b5f80fd5b905035906101bd8261019c565b565b906020828203126101d8576101d5915f016101b0565b90565b61018c565b151590565b6101eb906101dd565b9052565b9190610202905f602085019401906101e2565b565b346102345761023061021f61021a3660046101bf565b610b31565b610227610182565b918291826101ef565b0390f35b610188565b5f91031261024357565b61018c565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b6102896102926020936102979361028081610248565b9384809361024c565b95869101610255565b610260565b0190565b6102b09160208201915f81840391015261026a565b90565b346102e3576102c3366004610239565b6102df6102ce610cca565b6102d6610182565b9182918261029b565b0390f35b610188565b60018060a01b031690565b6102fc906102e8565b90565b610308816102f3565b0361030f57565b5f80fd5b90503590610320826102ff565b565b90565b61032e81610322565b0361033557565b5f80fd5b9050359061034682610325565b565b9190604083820312610370578061036461036d925f8601610313565b93602001610339565b90565b61018c565b346103a6576103a261039161038b366004610348565b90610ce0565b610399610182565b918291826101ef565b0390f35b610188565b6103b490610322565b9052565b91906103cb905f602085019401906103ab565b565b346103fd576103dd366004610239565b6103f96103e8610d2f565b6103f0610182565b918291826103b8565b0390f35b610188565b90916060828403126104375761043461041d845f8501610313565b9361042b8160208601610313565b93604001610339565b90565b61018c565b3461046d57610469610458610452366004610402565b91610d45565b610460610182565b918291826101ef565b0390f35b610188565b90565b61047e81610472565b0361048557565b5f80fd5b9050359061049682610475565b565b906020828203126104b1576104ae915f01610489565b90565b61018c565b6104bf90610472565b9052565b91906104d6905f602085019401906104b6565b565b34610508576105046104f36104ee366004610498565b610dbe565b6104fb610182565b918291826104c3565b0390f35b610188565b91906040838203126105355780610529610532925f8601610489565b93602001610313565b90565b61018c565b5f0190565b3461056e5761055861055236600461050d565b90610e0a565b610560610182565b8061056a8161053a565b0390f35b610188565b60ff1690565b61058290610573565b9052565b9190610599905f60208501940190610579565b565b346105cb576105ab366004610239565b6105c76105b6610e3c565b6105be610182565b91829182610586565b0390f35b610188565b34610600576105e0366004610239565b6105fc6105eb610e52565b6105f3610182565b918291826104c3565b0390f35b610188565b346106345761061e61061836600461050d565b90610e66565b610626610182565b806106308161053a565b0390f35b610188565b346106685761065261064c366004610348565b90610f98565b61065a610182565b806106648161053a565b0390f35b610188565b9060208282031261068657610683915f01610313565b90565b61018c565b346106bb576106b76106a66106a136600461066d565b610fee565b6106ae610182565b918291826103b8565b0390f35b610188565b346106f0576106ec6106db6106d636600461066d565b61100c565b6106e3610182565b918291826103b8565b0390f35b610188565b60ff60f81b1690565b610707906106f5565b9052565b610714906102f3565b9052565b5190565b60209181520190565b60200190565b61073490610322565b9052565b906107458160209361072b565b0190565b60200190565b9061076c61076661075f84610718565b809361071c565b92610725565b905f5b81811061077c5750505090565b90919261079561078f6001928651610738565b94610749565b910191909161076f565b939591946107f06107e5610804956107d76107fa956108119c9a6107ca60e08c01925f8d01906106fe565b8a820360208c015261026a565b9088820360408a015261026a565b9760608701906103ab565b608085019061070b565b60a08301906104b6565b60c081840391015261074f565b90565b3461084b57610824366004610239565b61084761082f6110b7565b9361083e979597939193610182565b9788978861079f565b0390f35b610188565b346108815761087d61086c61086636600461050d565b9061117e565b610874610182565b918291826101ef565b0390f35b610188565b346108b657610896366004610239565b6108b26108a16111a8565b6108a9610182565b9182918261029b565b0390f35b610188565b90565b5f1b90565b6108d76108d26108dc926108bb565b6108be565b610472565b90565b6108e85f6108c3565b90565b6108f36108df565b90565b3461092657610906366004610239565b6109226109116108eb565b610919610182565b918291826104c3565b0390f35b610188565b3461095c57610958610947610941366004610348565b906111be565b61094f610182565b918291826101ef565b0390f35b610188565b61096a81610573565b0361097157565b5f80fd5b9050359061098282610961565b565b60e0818303126109ef5761099a825f8301610313565b926109a88360208401610313565b926109b68160408501610339565b926109c48260608301610339565b926109ec6109d58460808501610975565b936109e38160a08601610489565b9360c001610489565b90565b61018c565b34610a2957610a13610a07366004610984565b9594909493919361128c565b610a1b610182565b80610a258161053a565b0390f35b610188565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a690565b610a5a610a2e565b90565b34610a8d57610a6d366004610239565b610a89610a78610a52565b610a80610182565b918291826104c3565b0390f35b610188565b34610ac157610aab610aa536600461050d565b906113b8565b610ab3610182565b80610abd8161053a565b0390f35b610188565b9190604083820312610aee5780610ae2610aeb925f8601610313565b93602001610313565b90565b61018c565b34610b2457610b20610b0f610b09366004610ac6565b906113da565b610b17610182565b918291826103b8565b0390f35b610188565b5f80fd5b5f90565b610b39610b2d565b5080610b54610b4e637965db0b60e01b610190565b91610190565b14908115610b61575b5090565b610b6b9150611402565b5f610b5d565b606090565b634e487b7160e01b5f52602260045260245ffd5b9060016002830492168015610baa575b6020831014610ba557565b610b76565b91607f1691610b9a565b60209181520190565b5f5260205f2090565b905f9291805490610be0610bd983610b8a565b8094610bb4565b916001811690815f14610c375750600114610bfb575b505050565b610c089192939450610bbd565b915f925b818410610c1f57505001905f8080610bf6565b60018160209295939554848601520191019290610c0c565b92949550505060ff19168252151560200201905f8080610bf6565b90610c5c91610bc6565b90565b634e487b7160e01b5f52604160045260245ffd5b90610c7d90610260565b810190811067ffffffffffffffff821117610c9757604052565b610c5f565b90610cbc610cb592610cac610182565b93848092610c52565b0383610c73565b565b610cc790610c9c565b90565b610cd2610b71565b50610cdd6003610cbe565b90565b610cfd91610cec610b2d565b50610cf5611428565b919091611435565b600190565b5f90565b5f1c90565b90565b610d1a610d1f91610d06565b610d0b565b90565b610d2c9054610d0e565b90565b610d37610d02565b50610d426002610d22565b90565b91610d6f92610d52610b2d565b50610d67610d5e611428565b82908491611485565b919091611555565b600190565b5f90565b610d8190610472565b90565b90610d8e90610d78565b5f5260205260405f2090565b90565b610da9610dae91610d06565b610d9a565b90565b610dbb9054610d9d565b90565b6001610dd7610ddd92610dcf610d74565b506005610d84565b01610db1565b90565b90610dfb91610df6610df182610dbe565b611600565b610dfd565b565b90610e0791611659565b50565b90610e1491610de0565b565b5f90565b90565b90565b610e34610e2f610e3992610e1a565b610e1d565b610573565b90565b610e44610e16565b50610e4f6012610e20565b90565b610e5a610d74565b50610e63611705565b90565b9080610e81610e7b610e76611428565b6102f3565b916102f3565b03610e9257610e8f916117bf565b50565b610e9a610182565b63334bd91960e11b815280610eb16004820161053a565b0390fd5b90610ecf91610eca610ec5610a2e565b611600565b610f6f565b565b610ee5610ee0610eea926108bb565b610e1d565b610322565b90565b5f7f416d6f756e742063616e6e6f74206265207a65726f0000000000000000000000910152565b610f21601560209261024c565b610f2a81610eed565b0190565b610f439060208101905f818303910152610f14565b90565b15610f4d57565b610f55610182565b62461bcd60e51b815280610f6b60048201610f2e565b0390fd5b90610f9691610f9182610f8a610f845f610ed1565b91610322565b1415610f46565b611861565b565b90610fa291610eb5565b565b610fb8610fb3610fbd926102e8565b610e1d565b6102e8565b90565b610fc990610fa4565b90565b610fd590610fc0565b90565b90610fe290610fcc565b5f5260205260405f2090565b61100461100991610ffd610d02565b505f610fd8565b610d22565b90565b61101e90611018610d02565b506118c6565b90565b5f90565b5f90565b606090565b61103790610fc0565b90565b9061104d611046610182565b9283610c73565b565b67ffffffffffffffff81116110675760208091020190565b610c5f565b9061107e6110798361104f565b61103a565b918252565b369037565b906110ad6110958361106c565b926020806110a3869361104f565b9201910390611083565b565b600f60f81b90565b6110bf611021565b506110c8610b71565b506110d1610b71565b506110da610d02565b506110e3611025565b506110ec610d74565b506110f5611029565b506110fe6118e8565b90611107611928565b9046906111133061102e565b9061111d5f6108c3565b9061112f61112a5f610ed1565b611088565b906111386110af565b96959493929190565b9061114b90610fcc565b5f5260205260405f2090565b60ff1690565b61116961116e91610d06565b611157565b90565b61117b905461115d565b90565b6111a5915f61119a6111a093611192610b2d565b506005610d84565b01611141565b611171565b90565b6111b0610b71565b506111bb6004610cbe565b90565b6111db916111ca610b2d565b506111d3611428565b919091611555565b600190565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c990565b919461124c6112569298979561124260a09661123861125d9a61122e60c08a019e5f8b01906104b6565b602089019061070b565b604087019061070b565b60608501906103ab565b60808301906103ab565b01906103ab565b565b60200190565b5190565b91602061128a92949361128360408201965f83019061070b565b019061070b565b565b9695919392949094426112a76112a183610322565b91610322565b1161136857906113106113199493926112f86112c16111e0565b6112e98c80948c916112d38d916119cc565b91926112dd610182565b97889660208801611204565b60208201810382520382610c73565b61130a61130482611265565b9161125f565b206119ff565b92909192611a1c565b8061132c611326876102f3565b916102f3565b03611341575061133f9293919091611435565b565b849061136461134e610182565b9283926325c0072360e11b845260048401611269565b0390fd5b61138a90611374610182565b91829163313c898160e11b8352600483016103b8565b0390fd5b906113a9916113a461139f82610dbe565b611600565b6113ab565b565b906113b5916117bf565b50565b906113c29161138e565b565b906113ce90610fcc565b5f5260205260405f2090565b6113ff916113f56113fa926113ed610d02565b5060016113c4565b610fd8565b610d22565b90565b61140a610b2d565b5061142461141e6301ffc9a760e01b610190565b91610190565b1490565b611430611025565b503390565b916114439291600192611a43565b565b60409061146e611475949695939661146460608401985f85019061070b565b60208301906103ab565b01906103ab565b565b906114829103610322565b90565b9291926114938183906113da565b90816114a86114a25f19610322565b91610322565b106114b5575b5050509050565b816114c86114c287610322565b91610322565b106114ee576114e593946114dd919392611477565b905f92611a43565b805f80806114ae565b50611514849291926114fe610182565b938493637dc7a0d960e11b855260048501611445565b0390fd5b61152c611527611531926108bb565b610e1d565b6102e8565b90565b61153d90611518565b90565b9190611553905f6020850194019061070b565b565b918261157161156b6115665f611534565b6102f3565b916102f3565b146115d2578161159161158b6115865f611534565b6102f3565b916102f3565b146115a4576115a292919091611ba7565b565b6115ce6115b05f611534565b6115b8610182565b91829163ec442f0560e01b835260048301611540565b0390fd5b6115fc6115de5f611534565b6115e6610182565b918291634b637e8f60e11b835260048301611540565b0390fd5b6116129061160c611428565b90611d40565b565b9061162060ff916108be565b9181191691161790565b611633906101dd565b90565b90565b9061164e6116496116559261162a565b611636565b8254611614565b9055565b611661610b2d565b5061167661167082849061117e565b156101dd565b5f146116ff5761169e60016116995f61169160058690610d84565b018590611141565b611639565b906116a7611428565b906116e46116de6116d87f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d95610d78565b92610fcc565b92610fcc565b926116ed610182565b806116f78161053a565b0390a4600190565b50505f90565b61170d610d74565b506117173061102e565b6117496117437f00000000000000000000000000000000000000000000000000000000000000006102f3565b916102f3565b1480611785575b5f1461177a577f000000000000000000000000000000000000000000000000000000000000000090565b611782611df3565b90565b50466117b96117b37f0000000000000000000000000000000000000000000000000000000000000000610322565b91610322565b14611750565b6117c7610b2d565b506117d381839061117e565b5f1461185b576117fa5f6117f55f6117ed60058690610d84565b018590611141565b611639565b90611803611428565b9061184061183a6118347ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b95610d78565b92610fcc565b92610fcc565b92611849610182565b806118538161053a565b0390a4600190565b50505f90565b8061187c6118766118715f611534565b6102f3565b916102f3565b14611898576118969161188e5f611534565b919091611ba7565b565b6118c26118a45f611534565b6118ac610182565b91829163ec442f0560e01b835260048301611540565b0390fd5b6118dd6118e2916118d5610d02565b506008610fd8565b610d22565b90565b90565b6118f0610b71565b506119257f000000000000000000000000000000000000000000000000000000000000000061191f60066118e5565b90611f8d565b90565b611930610b71565b506119657f000000000000000000000000000000000000000000000000000000000000000061195f60076118e5565b90611f8d565b90565b60016119749101610322565b90565b906119835f19916108be565b9181191691161790565b6119a161199c6119a692610322565b610e1d565b610322565b90565b90565b906119c16119bc6119c89261198d565b6119a9565b8254611977565b9055565b6119e0906119d8610d02565b506008610fd8565b6119fc6119ec82610d22565b916119f683611968565b906119ac565b90565b611a1990611a0b610d74565b50611a14611705565b611fdb565b90565b92611a3792611a4094611a2d611025565b50929091926120a1565b909291926121cc565b90565b909281611a60611a5a611a555f611534565b6102f3565b916102f3565b14611b325783611a80611a7a611a755f611534565b6102f3565b916102f3565b14611b0457611aa483611a9f611a98600186906113c4565b8790610fd8565b6119ac565b611aae575b505050565b919091611af9611ae7611ae17f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92593610fcc565b93610fcc565b93611af0610182565b918291826103b8565b0390a35f8080611aa9565b611b2e611b105f611534565b611b18610182565b918291634a1406b160e11b835260048301611540565b0390fd5b611b5c611b3e5f611534565b611b46610182565b91829163e602df0560e01b835260048301611540565b0390fd5b634e487b7160e01b5f52601160045260245ffd5b611b83611b8991939293610322565b92610322565b8201809211611b9457565b611b60565b90611ba49101610322565b90565b91909180611bc5611bbf611bba5f611534565b6102f3565b916102f3565b145f14611ca657611be9611be283611bdd6002610d22565b611b74565b60026119ac565b5b82611c05611bff611bfa5f611534565b6102f3565b916102f3565b145f14611c7a57611c29611c2283611c1d6002610d22565b611477565b60026119ac565b5b919091611c75611c63611c5d7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef93610fcc565b93610fcc565b93611c6c610182565b918291826103b8565b0390a3565b611ca182611c9b611c8c5f8790610fd8565b91611c9683610d22565b611b99565b906119ac565b611c2a565b611cb9611cb45f8390610fd8565b610d22565b80611ccc611cc685610322565b91610322565b10611cf457611cdf611cef918490611477565b611cea5f8490610fd8565b6119ac565b611bea565b90611d19909192611d03610182565b93849363391434e360e21b855260048501611445565b0390fd5b916020611d3e929493611d3760408201965f83019061070b565b01906104b6565b565b90611d55611d4f83839061117e565b156101dd565b611d5d575050565b611d7e611d68610182565b92839263e2517d3f60e01b845260048401611d1d565b0390fd5b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f90565b90959492611df194611de0611dea92611dd6608096611dcc60a088019c5f8901906104b6565b60208701906104b6565b60408501906104b6565b60608301906103ab565b019061070b565b565b611dfb610d74565b50611e04611d82565b611e7b7f000000000000000000000000000000000000000000000000000000000000000091611e6c7f000000000000000000000000000000000000000000000000000000000000000046611e573061102e565b91611e60610182565b96879560208701611da6565b60208201810382520382610c73565b611e8d611e8782611265565b9161125f565b2090565b90565b611ea8611ea3611ead92611e91565b6108be565b610472565b90565b611eba60ff611e94565b90565b5f5260205f2090565b905f9291805490611ee0611ed983610b8a565b8094610bb4565b916001811690815f14611f375750600114611efb575b505050565b611f089192939450611ebd565b915f925b818410611f1f57505001905f8080611ef6565b60018160209295939554848601520191019290611f0c565b92949550505060ff19168252151560200201905f8080611ef6565b90611f5c91611ec6565b90565b90611f7f611f7892611f6f610182565b93848092611f52565b0383610c73565b565b611f8a90611f5f565b90565b90611f96610b71565b50611fa082610d78565b611fb9611fb3611fae611eb0565b610472565b91610472565b14155f14611fce5750611fcb90612337565b90565b611fd89150611f81565b90565b604291611fe6610d74565b50604051917f19010000000000000000000000000000000000000000000000000000000000008352600283015260228201522090565b5f90565b61202c61203191610d06565b61198d565b90565b90565b61204b61204661205092612034565b610e1d565b610322565b90565b61208861208f9461207e606094989795612074608086019a5f8701906104b6565b6020850190610579565b60408301906104b6565b01906104b6565b565b612099610182565b3d5f823e3d90fd5b9392936120ac611025565b506120b561201c565b506120be610d74565b506120c885612020565b6120fa6120f47f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0612037565b91610322565b11612187579061211d602094955f94939293612114610182565b94859485612053565b838052039060015afa15612182576121355f516108be565b8061215061214a6121455f611534565b6102f3565b916102f3565b14612166575f916121605f6108c3565b91929190565b506121705f611534565b60019161217c5f6108c3565b91929190565b612091565b5050506121935f611534565b9060039291929190565b634e487b7160e01b5f52602160045260245ffd5b600411156121bb57565b61219d565b906121ca826121b1565b565b806121df6121d95f6121c0565b916121c0565b145f146121ea575050565b806121fe6121f860016121c0565b916121c0565b145f146122285761220d610182565b63f645eedf60e01b8152806122246004820161053a565b0390fd5b8061223c61223660026121c0565b916121c0565b145f146122715761226d61224f83612020565b612257610182565b91829163fce698f760e01b8352600483016103b8565b0390fd5b61228461227e60036121c0565b916121c0565b1461228c5750565b6122ae90612298610182565b9182916335e2f38360e21b8352600483016104c3565b0390fd5b90565b6122c96122c46122ce926122b2565b610e1d565b610322565b90565b67ffffffffffffffff81116122ef576122eb602091610260565b0190565b610c5f565b90612306612301836122d1565b61103a565b918252565b369037565b9061233561231d836122f4565b9260208061232b86936122d1565b920191039061230b565b565b61233f610b71565b50612349816123a2565b9061235c61235760206122b5565b612310565b918252602082015290565b61237b61237661238092611e91565b610e1d565b610322565b90565b90565b61239a61239561239f92612383565b610e1d565b610322565b90565b6123b76123bc916123b1610d02565b50610d78565b612020565b6123c660ff612367565b16806123db6123d5601f612386565b91610322565b116123e35790565b6123eb610182565b632cd44ac360e21b8152806124026004820161053a565b0390fdfea26469706673582212203f212c603a7d89fac9f08b3594c58e45a98908c19e3253892b80f43a9f1f3e6f64736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"a\x01``@R4a\0sWa\0\x1Ba\0\x15a\x01GV[\x90a\x03\xECV[a\0#a\0xV[a$<a\rC\x829`\x80Q\x81a\x17X\x01R`\xA0Q\x81a\x17\x8F\x01R`\xC0Q\x81a\x17\x1F\x01R`\xE0Q\x81a\x1E\t\x01Ra\x01\0Q\x81a\x1E.\x01Ra\x01 Q\x81a\x18\xF6\x01Ra\x01@Q\x81a\x196\x01Ra$<\x90\xF3[a\0~V[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0\xAA\x90a\0\x82V[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0\xC2W`@RV[a\0\x8CV[\x90a\0\xDAa\0\xD3a\0xV[\x92\x83a\0\xA0V[V[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xF4\x90a\0\xE0V[\x90V[a\x01\0\x81a\0\xEBV[\x03a\x01\x07WV[_\x80\xFD[\x90PQ\x90a\x01\x18\x82a\0\xF7V[V[\x91\x90`@\x83\x82\x03\x12a\x01BW\x80a\x016a\x01?\x92_\x86\x01a\x01\x0BV[\x93` \x01a\x01\x0BV[\x90V[a\0\xDCV[a\x01ea1\x7F\x808\x03\x80a\x01Z\x81a\0\xC7V[\x92\x839\x81\x01\x90a\x01\x1AV[\x90\x91V[`\x01\x80`@\x1B\x03\x81\x11a\x01\x85Wa\x01\x81` \x91a\0\x82V[\x01\x90V[a\0\x8CV[\x90a\x01\x9Ca\x01\x97\x83a\x01iV[a\0\xC7V[\x91\x82RV[_\x7FSyndicate\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x01\xD2`\ta\x01\x8AV[\x90a\x01\xDF` \x83\x01a\x01\xA1V[V[a\x01\xE9a\x01\xC8V[\x90V[_\x7FSYND\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x02\x1D`\x04a\x01\x8AV[\x90a\x02*` \x83\x01a\x01\xECV[V[a\x024a\x02\x13V[\x90V[\x90V[\x90V[a\x02Qa\x02La\x02V\x92a\x027V[a\x02:V[a\0\xE0V[\x90V[a\x02b\x90a\x02=V[\x90V[` \x91\x81R\x01\x90V[` \x7Fress\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FDefault admin cannot be zero add_\x82\x01R\x01RV[a\x02\xC8`$`@\x92a\x02eV[a\x02\xD1\x81a\x02nV[\x01\x90V[a\x02\xEA\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x02\xBBV[\x90V[\x15a\x02\xF4WV[a\x02\xFCa\0xV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x03\x12`\x04\x82\x01a\x02\xD5V[\x03\x90\xFD[_\x7FMinter cannot be zero address\0\0\0\x91\x01RV[a\x03J`\x1D` \x92a\x02eV[a\x03S\x81a\x03\x16V[\x01\x90V[a\x03l\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x03=V[\x90V[\x15a\x03vWV[a\x03~a\0xV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x03\x94`\x04\x82\x01a\x03WV[\x03\x90\xFD[\x90V[_\x1B\x90V[a\x03\xB4a\x03\xAFa\x03\xB9\x92a\x027V[a\x03\x9BV[a\x03\x98V[\x90V[a\x03\xC5_a\x03\xA0V[\x90V[\x7F\x9F-\xF0\xFE\xD2\xC7vH\xDEX`\xA4\xCCP\x8C\xD0\x81\x8C\x85\xB8\xB8\xA1\xABL\xEE\xEF\x8D\x98\x1C\x89V\xA6\x90V[\x90a\x04la\x04z\x92a\x04\x15a\x03\xFFa\x01\xE1V[a\x04\x07a\x01\xE1V[a\x04\x0Fa\x02,V[\x91a\x04\xC8V[a\x04:\x81a\x043a\x04-a\x04(_a\x02YV[a\0\xEBV[\x91a\0\xEBV[\x14\x15a\x02\xEDV[a\x04_\x83a\x04Xa\x04Ra\x04M_a\x02YV[a\0\xEBV[\x91a\0\xEBV[\x14\x15a\x03oV[a\x04ga\x03\xBCV[a\x08\xECV[Pa\x04ua\x03\xC8V[a\x08\xECV[PV[_\x7F1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x04\xAE`\x01a\x01\x8AV[\x90a\x04\xBB` \x83\x01a\x04}V[V[a\x04\xC5a\x04\xA4V[\x90V[\x90a\x04\xDC\x92\x91a\x04\xD6a\x04\xBDV[\x90a\x04\xDEV[V[\x90a\x04\xEA\x93\x92\x91a\x050V[V[\x90V[\x90V[` \x01\x90V[Q\x90V[a\x05\x10a\x05\x0Ba\x05\x15\x92a\0\xE0V[a\x02:V[a\0\xE0V[\x90V[a\x05!\x90a\x04\xFCV[\x90V[a\x05-\x90a\x05\x18V[\x90V[a\x05Aa\x05\x91\x94a\x05v\x93\x94a\x05\xC5V[a\x05U\x81a\x05O`\x06a\x04\xECV[\x90a\t\xE7V[a\x01 Ra\x05m\x83a\x05g`\x07a\x04\xECV[\x90a\t\xE7V[a\x01@Ra\x04\xEFV[a\x05\x88a\x05\x82\x82a\x04\xF8V[\x91a\x04\xF2V[ `\xE0Ra\x04\xEFV[a\x05\xA3a\x05\x9D\x82a\x04\xF8V[\x91a\x04\xF2V[ a\x01\0RF`\xA0Ra\x05\xB4a\n\xF9V[`\x80Ra\x05\xC00a\x05$V[`\xC0RV[\x90a\x05\xCF\x91a\x05\xD1V[V[\x90a\x05\xDB\x91a\x05\xDDV[V[\x90a\x05\xE7\x91a\x08=V[V[Q\x90V[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\x06!W[` \x83\x10\x14a\x06\x1CWV[a\x05\xEDV[\x91`\x7F\x16\x91a\x06\x11V[_R` _ \x90V[`\x1F` \x91\x01\x04\x90V[\x1B\x90V[\x91\x90`\x08a\x06]\x91\x02\x91a\x06W_\x19\x84a\x06>V[\x92a\x06>V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[a\x06~a\x06ya\x06\x83\x92a\x06gV[a\x02:V[a\x06gV[\x90V[\x90V[\x91\x90a\x06\x9Fa\x06\x9Aa\x06\xA7\x93a\x06jV[a\x06\x86V[\x90\x83Ta\x06BV[\x90UV[_\x90V[a\x06\xC1\x91a\x06\xBBa\x06\xABV[\x91a\x06\x89V[V[[\x81\x81\x10a\x06\xCFWPPV[\x80a\x06\xDC_`\x01\x93a\x06\xAFV[\x01a\x06\xC4V[\x91\x90`\x1F\x81\x11a\x06\xF2W[PPPV[a\x06\xFEa\x07#\x93a\x06+V[\x90` a\x07\n\x84a\x064V[\x83\x01\x93\x10a\x07+W[a\x07\x1C\x90a\x064V[\x01\x90a\x06\xC3V[_\x80\x80a\x06\xEDV[\x91Pa\x07\x1C\x81\x92\x90Pa\x07\x13V[\x1C\x90V[\x90a\x07M\x90_\x19\x90`\x08\x02a\x079V[\x19\x16\x90V[\x81a\x07\\\x91a\x07=V[\x90`\x02\x02\x17\x90V[\x90a\x07n\x81a\x05\xE9V[\x90`\x01\x80`@\x1B\x03\x82\x11a\x08,Wa\x07\x90\x82a\x07\x8A\x85Ta\x06\x01V[\x85a\x06\xE2V[` \x90`\x1F\x83\x11`\x01\x14a\x07\xC4W\x91\x80\x91a\x07\xB3\x93_\x92a\x07\xB8W[PPa\x07RV[\x90U[V[\x90\x91P\x01Q_\x80a\x07\xACV[`\x1F\x19\x83\x16\x91a\x07\xD3\x85a\x06+V[\x92_[\x81\x81\x10a\x08\x14WP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x07\xFAW[PPP\x02\x01\x90Ua\x07\xB6V[a\x08\n\x91\x01Q`\x1F\x84\x16\x90a\x07=V[\x90U_\x80\x80a\x07\xEEV[\x91\x93` `\x01\x81\x92\x87\x87\x01Q\x81U\x01\x95\x01\x92\x01a\x07\xD6V[a\0\x8CV[\x90a\x08;\x91a\x07dV[V[\x90a\x08La\x08S\x92`\x03a\x081V[`\x04a\x081V[V[_\x90V[\x15\x15\x90V[a\x08g\x90a\x03\x98V[\x90V[\x90a\x08t\x90a\x08^V[_R` R`@_ \x90V[a\x08\x89\x90a\x05\x18V[\x90V[\x90a\x08\x96\x90a\x08\x80V[_R` R`@_ \x90V[\x90a\x08\xAE`\xFF\x91a\x03\x9BV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x08\xC1\x90a\x08YV[\x90V[\x90V[\x90a\x08\xDCa\x08\xD7a\x08\xE3\x92a\x08\xB8V[a\x08\xC4V[\x82Ta\x08\xA2V[\x90UV[_\x01\x90V[a\x08\xF4a\x08UV[Pa\t\ta\t\x03\x82\x84\x90a\x0B\x96V[\x15a\x08YV[_\x14a\t\x92Wa\t1`\x01a\t,_a\t$`\x05\x86\x90a\x08jV[\x01\x85\x90a\x08\x8CV[a\x08\xC7V[\x90a\t:a\x0B\xC4V[\x90a\twa\tqa\tk\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r\x95a\x08^V[\x92a\x08\x80V[\x92a\x08\x80V[\x92a\t\x80a\0xV[\x80a\t\x8A\x81a\x08\xE7V[\x03\x90\xA4`\x01\x90V[PP_\x90V[_\x90V[\x90V[a\t\xB3a\t\xAEa\t\xB8\x92a\t\x9CV[a\x02:V[a\x06gV[\x90V[\x90V[a\t\xD2a\t\xCDa\t\xD7\x92a\t\xBBV[a\x03\x9BV[a\x03\x98V[\x90V[a\t\xE4`\xFFa\t\xBEV[\x90V[\x90a\t\xF0a\t\x98V[Pa\n\x02a\t\xFD\x83a\x04\xEFV[a\x04\xF8V[a\n\x15a\n\x0F` a\t\x9FV[\x91a\x06gV[\x10_\x14a\n)WPa\n&\x90a\x0C\xB8V[\x90V[_a\n7a\n=\x93\x92a\x0B\xD1V[\x01a\x081V[a\nMa\nHa\t\xDAV[a\x08^V[\x90V[_\x90V[\x7F\x8Bs\xC3\xC6\x9B\xB8\xFE=Q.\xCCL\xF7Y\xCCy#\x9F{\x17\x9B\x0F\xFA\xCA\xA9\xA7]R+9@\x0F\x90V[a\n\x82\x90Qa\x03\x98V[\x90V[a\n\x8E\x90a\x03\x98V[\x90RV[a\n\x9B\x90a\x06gV[\x90RV[a\n\xA8\x90a\0\xEBV[\x90RV[\x90\x95\x94\x92a\n\xF7\x94a\n\xE6a\n\xF0\x92a\n\xDC`\x80\x96a\n\xD2`\xA0\x88\x01\x9C_\x89\x01\x90a\n\x85V[` \x87\x01\x90a\n\x85V[`@\x85\x01\x90a\n\x85V[``\x83\x01\x90a\n\x92V[\x01\x90a\n\x9FV[V[a\x0B\x01a\nPV[Pa\x0B\na\nTV[a\x0BTa\x0B\x17`\xE0a\nxV[\x91a\x0BEa\x0B&a\x01\0a\nxV[Fa\x0B00a\x05$V[\x91a\x0B9a\0xV[\x96\x87\x95` \x87\x01a\n\xACV[` \x82\x01\x81\x03\x82R\x03\x82a\0\xA0V[a\x0Bfa\x0B`\x82a\x04\xF8V[\x91a\x04\xF2V[ \x90V[_\x1C\x90V[`\xFF\x16\x90V[a\x0B\x81a\x0B\x86\x91a\x0BjV[a\x0BoV[\x90V[a\x0B\x93\x90Ta\x0BuV[\x90V[a\x0B\xBD\x91_a\x0B\xB2a\x0B\xB8\x93a\x0B\xAAa\x08UV[P`\x05a\x08jV[\x01a\x08\x8CV[a\x0B\x89V[\x90V[_\x90V[a\x0B\xCCa\x0B\xC0V[P3\x90V[\x90V[\x90V[a\x0B\xEBa\x0B\xE6a\x0B\xF0\x92a\x0B\xD4V[a\x02:V[a\x06gV[\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\x0C\x1Da\x0C&` \x93a\x0C+\x93a\x0C\x14\x81a\x05\xE9V[\x93\x84\x80\x93a\x02eV[\x95\x86\x91\x01a\x0B\xF3V[a\0\x82V[\x01\x90V[a\x0CD\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x0B\xFEV[\x90V[a\x0Caa\x0C\\a\x0CV\x83a\x04\xF8V[\x92a\x04\xF2V[a\nxV[\x90` \x81\x10a\x0CoW[P\x90V[a\x0C\x81\x90_\x19\x90` \x03`\x08\x02a\x06>V[\x16_a\x0CkV[a\x0C\x94a\x0C\x99\x91a\x0BjV[a\x06jV[\x90V[a\x0C\xB0a\x0C\xABa\x0C\xB5\x92a\x06gV[a\x03\x9BV[a\x03\x98V[\x90V[a\x0C\xC0a\t\x98V[Pa\x0C\xCA\x81a\x04\xEFV[\x90a\x0C\xD4\x82a\x04\xF8V[a\x0C\xE7a\x0C\xE1`\x1Fa\x0B\xD7V[\x91a\x06gV[\x11a\r\x1CWPa\r\x14\x81a\r\x0Ea\r\x08a\r\x03a\r\x19\x95a\x0CGV[a\x0C\x88V[\x91a\x04\xF8V[\x17a\x0C\x9CV[a\x08^V[\x90V[a\r>\x90a\r(a\0xV[\x91\x82\x91c0Z'\xA9`\xE0\x1B\x83R`\x04\x83\x01a\x0C/V[\x03\x90\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x0B)V[a\0\x1D_5a\x01|V[\x80c\x01\xFF\xC9\xA7\x14a\x01wW\x80c\x06\xFD\xDE\x03\x14a\x01rW\x80c\t^\xA7\xB3\x14a\x01mW\x80c\x18\x16\r\xDD\x14a\x01hW\x80c#\xB8r\xDD\x14a\x01cW\x80c$\x8A\x9C\xA3\x14a\x01^W\x80c//\xF1]\x14a\x01YW\x80c1<\xE5g\x14a\x01TW\x80c6D\xE5\x15\x14a\x01OW\x80c6V\x8A\xBE\x14a\x01JW\x80c@\xC1\x0F\x19\x14a\x01EW\x80cp\xA0\x821\x14a\x01@W\x80c~\xCE\xBE\0\x14a\x01;W\x80c\x84\xB0\x19n\x14a\x016W\x80c\x91\xD1HT\x14a\x011W\x80c\x95\xD8\x9BA\x14a\x01,W\x80c\xA2\x17\xFD\xDF\x14a\x01'W\x80c\xA9\x05\x9C\xBB\x14a\x01\"W\x80c\xD5\x05\xAC\xCF\x14a\x01\x1DW\x80c\xD59\x13\x93\x14a\x01\x18W\x80c\xD5Gt\x1F\x14a\x01\x13Wc\xDDb\xED>\x03a\0\x0EWa\n\xF3V[a\n\x92V[a\n]V[a\t\xF4V[a\t+V[a\x08\xF6V[a\x08\x86V[a\x08PV[a\x08\x14V[a\x06\xC0V[a\x06\x8BV[a\x069V[a\x06\x05V[a\x05\xD0V[a\x05\x9BV[a\x05?V[a\x04\xD8V[a\x04<V[a\x03\xCDV[a\x03uV[a\x02\xB3V[a\x02\x04V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[c\xFF\xFF\xFF\xFF`\xE0\x1B\x16\x90V[a\x01\xA5\x81a\x01\x90V[\x03a\x01\xACWV[_\x80\xFD[\x90P5\x90a\x01\xBD\x82a\x01\x9CV[V[\x90` \x82\x82\x03\x12a\x01\xD8Wa\x01\xD5\x91_\x01a\x01\xB0V[\x90V[a\x01\x8CV[\x15\x15\x90V[a\x01\xEB\x90a\x01\xDDV[\x90RV[\x91\x90a\x02\x02\x90_` \x85\x01\x94\x01\x90a\x01\xE2V[V[4a\x024Wa\x020a\x02\x1Fa\x02\x1A6`\x04a\x01\xBFV[a\x0B1V[a\x02'a\x01\x82V[\x91\x82\x91\x82a\x01\xEFV[\x03\x90\xF3[a\x01\x88V[_\x91\x03\x12a\x02CWV[a\x01\x8CV[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x02\x89a\x02\x92` \x93a\x02\x97\x93a\x02\x80\x81a\x02HV[\x93\x84\x80\x93a\x02LV[\x95\x86\x91\x01a\x02UV[a\x02`V[\x01\x90V[a\x02\xB0\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x02jV[\x90V[4a\x02\xE3Wa\x02\xC36`\x04a\x029V[a\x02\xDFa\x02\xCEa\x0C\xCAV[a\x02\xD6a\x01\x82V[\x91\x82\x91\x82a\x02\x9BV[\x03\x90\xF3[a\x01\x88V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02\xFC\x90a\x02\xE8V[\x90V[a\x03\x08\x81a\x02\xF3V[\x03a\x03\x0FWV[_\x80\xFD[\x90P5\x90a\x03 \x82a\x02\xFFV[V[\x90V[a\x03.\x81a\x03\"V[\x03a\x035WV[_\x80\xFD[\x90P5\x90a\x03F\x82a\x03%V[V[\x91\x90`@\x83\x82\x03\x12a\x03pW\x80a\x03da\x03m\x92_\x86\x01a\x03\x13V[\x93` \x01a\x039V[\x90V[a\x01\x8CV[4a\x03\xA6Wa\x03\xA2a\x03\x91a\x03\x8B6`\x04a\x03HV[\x90a\x0C\xE0V[a\x03\x99a\x01\x82V[\x91\x82\x91\x82a\x01\xEFV[\x03\x90\xF3[a\x01\x88V[a\x03\xB4\x90a\x03\"V[\x90RV[\x91\x90a\x03\xCB\x90_` \x85\x01\x94\x01\x90a\x03\xABV[V[4a\x03\xFDWa\x03\xDD6`\x04a\x029V[a\x03\xF9a\x03\xE8a\r/V[a\x03\xF0a\x01\x82V[\x91\x82\x91\x82a\x03\xB8V[\x03\x90\xF3[a\x01\x88V[\x90\x91``\x82\x84\x03\x12a\x047Wa\x044a\x04\x1D\x84_\x85\x01a\x03\x13V[\x93a\x04+\x81` \x86\x01a\x03\x13V[\x93`@\x01a\x039V[\x90V[a\x01\x8CV[4a\x04mWa\x04ia\x04Xa\x04R6`\x04a\x04\x02V[\x91a\rEV[a\x04`a\x01\x82V[\x91\x82\x91\x82a\x01\xEFV[\x03\x90\xF3[a\x01\x88V[\x90V[a\x04~\x81a\x04rV[\x03a\x04\x85WV[_\x80\xFD[\x90P5\x90a\x04\x96\x82a\x04uV[V[\x90` \x82\x82\x03\x12a\x04\xB1Wa\x04\xAE\x91_\x01a\x04\x89V[\x90V[a\x01\x8CV[a\x04\xBF\x90a\x04rV[\x90RV[\x91\x90a\x04\xD6\x90_` \x85\x01\x94\x01\x90a\x04\xB6V[V[4a\x05\x08Wa\x05\x04a\x04\xF3a\x04\xEE6`\x04a\x04\x98V[a\r\xBEV[a\x04\xFBa\x01\x82V[\x91\x82\x91\x82a\x04\xC3V[\x03\x90\xF3[a\x01\x88V[\x91\x90`@\x83\x82\x03\x12a\x055W\x80a\x05)a\x052\x92_\x86\x01a\x04\x89V[\x93` \x01a\x03\x13V[\x90V[a\x01\x8CV[_\x01\x90V[4a\x05nWa\x05Xa\x05R6`\x04a\x05\rV[\x90a\x0E\nV[a\x05`a\x01\x82V[\x80a\x05j\x81a\x05:V[\x03\x90\xF3[a\x01\x88V[`\xFF\x16\x90V[a\x05\x82\x90a\x05sV[\x90RV[\x91\x90a\x05\x99\x90_` \x85\x01\x94\x01\x90a\x05yV[V[4a\x05\xCBWa\x05\xAB6`\x04a\x029V[a\x05\xC7a\x05\xB6a\x0E<V[a\x05\xBEa\x01\x82V[\x91\x82\x91\x82a\x05\x86V[\x03\x90\xF3[a\x01\x88V[4a\x06\0Wa\x05\xE06`\x04a\x029V[a\x05\xFCa\x05\xEBa\x0ERV[a\x05\xF3a\x01\x82V[\x91\x82\x91\x82a\x04\xC3V[\x03\x90\xF3[a\x01\x88V[4a\x064Wa\x06\x1Ea\x06\x186`\x04a\x05\rV[\x90a\x0EfV[a\x06&a\x01\x82V[\x80a\x060\x81a\x05:V[\x03\x90\xF3[a\x01\x88V[4a\x06hWa\x06Ra\x06L6`\x04a\x03HV[\x90a\x0F\x98V[a\x06Za\x01\x82V[\x80a\x06d\x81a\x05:V[\x03\x90\xF3[a\x01\x88V[\x90` \x82\x82\x03\x12a\x06\x86Wa\x06\x83\x91_\x01a\x03\x13V[\x90V[a\x01\x8CV[4a\x06\xBBWa\x06\xB7a\x06\xA6a\x06\xA16`\x04a\x06mV[a\x0F\xEEV[a\x06\xAEa\x01\x82V[\x91\x82\x91\x82a\x03\xB8V[\x03\x90\xF3[a\x01\x88V[4a\x06\xF0Wa\x06\xECa\x06\xDBa\x06\xD66`\x04a\x06mV[a\x10\x0CV[a\x06\xE3a\x01\x82V[\x91\x82\x91\x82a\x03\xB8V[\x03\x90\xF3[a\x01\x88V[`\xFF`\xF8\x1B\x16\x90V[a\x07\x07\x90a\x06\xF5V[\x90RV[a\x07\x14\x90a\x02\xF3V[\x90RV[Q\x90V[` \x91\x81R\x01\x90V[` \x01\x90V[a\x074\x90a\x03\"V[\x90RV[\x90a\x07E\x81` \x93a\x07+V[\x01\x90V[` \x01\x90V[\x90a\x07la\x07fa\x07_\x84a\x07\x18V[\x80\x93a\x07\x1CV[\x92a\x07%V[\x90_[\x81\x81\x10a\x07|WPPP\x90V[\x90\x91\x92a\x07\x95a\x07\x8F`\x01\x92\x86Qa\x078V[\x94a\x07IV[\x91\x01\x91\x90\x91a\x07oV[\x93\x95\x91\x94a\x07\xF0a\x07\xE5a\x08\x04\x95a\x07\xD7a\x07\xFA\x95a\x08\x11\x9C\x9Aa\x07\xCA`\xE0\x8C\x01\x92_\x8D\x01\x90a\x06\xFEV[\x8A\x82\x03` \x8C\x01Ra\x02jV[\x90\x88\x82\x03`@\x8A\x01Ra\x02jV[\x97``\x87\x01\x90a\x03\xABV[`\x80\x85\x01\x90a\x07\x0BV[`\xA0\x83\x01\x90a\x04\xB6V[`\xC0\x81\x84\x03\x91\x01Ra\x07OV[\x90V[4a\x08KWa\x08$6`\x04a\x029V[a\x08Ga\x08/a\x10\xB7V[\x93a\x08>\x97\x95\x97\x93\x91\x93a\x01\x82V[\x97\x88\x97\x88a\x07\x9FV[\x03\x90\xF3[a\x01\x88V[4a\x08\x81Wa\x08}a\x08la\x08f6`\x04a\x05\rV[\x90a\x11~V[a\x08ta\x01\x82V[\x91\x82\x91\x82a\x01\xEFV[\x03\x90\xF3[a\x01\x88V[4a\x08\xB6Wa\x08\x966`\x04a\x029V[a\x08\xB2a\x08\xA1a\x11\xA8V[a\x08\xA9a\x01\x82V[\x91\x82\x91\x82a\x02\x9BV[\x03\x90\xF3[a\x01\x88V[\x90V[_\x1B\x90V[a\x08\xD7a\x08\xD2a\x08\xDC\x92a\x08\xBBV[a\x08\xBEV[a\x04rV[\x90V[a\x08\xE8_a\x08\xC3V[\x90V[a\x08\xF3a\x08\xDFV[\x90V[4a\t&Wa\t\x066`\x04a\x029V[a\t\"a\t\x11a\x08\xEBV[a\t\x19a\x01\x82V[\x91\x82\x91\x82a\x04\xC3V[\x03\x90\xF3[a\x01\x88V[4a\t\\Wa\tXa\tGa\tA6`\x04a\x03HV[\x90a\x11\xBEV[a\tOa\x01\x82V[\x91\x82\x91\x82a\x01\xEFV[\x03\x90\xF3[a\x01\x88V[a\tj\x81a\x05sV[\x03a\tqWV[_\x80\xFD[\x90P5\x90a\t\x82\x82a\taV[V[`\xE0\x81\x83\x03\x12a\t\xEFWa\t\x9A\x82_\x83\x01a\x03\x13V[\x92a\t\xA8\x83` \x84\x01a\x03\x13V[\x92a\t\xB6\x81`@\x85\x01a\x039V[\x92a\t\xC4\x82``\x83\x01a\x039V[\x92a\t\xECa\t\xD5\x84`\x80\x85\x01a\tuV[\x93a\t\xE3\x81`\xA0\x86\x01a\x04\x89V[\x93`\xC0\x01a\x04\x89V[\x90V[a\x01\x8CV[4a\n)Wa\n\x13a\n\x076`\x04a\t\x84V[\x95\x94\x90\x94\x93\x91\x93a\x12\x8CV[a\n\x1Ba\x01\x82V[\x80a\n%\x81a\x05:V[\x03\x90\xF3[a\x01\x88V[\x7F\x9F-\xF0\xFE\xD2\xC7vH\xDEX`\xA4\xCCP\x8C\xD0\x81\x8C\x85\xB8\xB8\xA1\xABL\xEE\xEF\x8D\x98\x1C\x89V\xA6\x90V[a\nZa\n.V[\x90V[4a\n\x8DWa\nm6`\x04a\x029V[a\n\x89a\nxa\nRV[a\n\x80a\x01\x82V[\x91\x82\x91\x82a\x04\xC3V[\x03\x90\xF3[a\x01\x88V[4a\n\xC1Wa\n\xABa\n\xA56`\x04a\x05\rV[\x90a\x13\xB8V[a\n\xB3a\x01\x82V[\x80a\n\xBD\x81a\x05:V[\x03\x90\xF3[a\x01\x88V[\x91\x90`@\x83\x82\x03\x12a\n\xEEW\x80a\n\xE2a\n\xEB\x92_\x86\x01a\x03\x13V[\x93` \x01a\x03\x13V[\x90V[a\x01\x8CV[4a\x0B$Wa\x0B a\x0B\x0Fa\x0B\t6`\x04a\n\xC6V[\x90a\x13\xDAV[a\x0B\x17a\x01\x82V[\x91\x82\x91\x82a\x03\xB8V[\x03\x90\xF3[a\x01\x88V[_\x80\xFD[_\x90V[a\x0B9a\x0B-V[P\x80a\x0BTa\x0BNcye\xDB\x0B`\xE0\x1Ba\x01\x90V[\x91a\x01\x90V[\x14\x90\x81\x15a\x0BaW[P\x90V[a\x0Bk\x91Pa\x14\x02V[_a\x0B]V[``\x90V[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\x0B\xAAW[` \x83\x10\x14a\x0B\xA5WV[a\x0BvV[\x91`\x7F\x16\x91a\x0B\x9AV[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\x0B\xE0a\x0B\xD9\x83a\x0B\x8AV[\x80\x94a\x0B\xB4V[\x91`\x01\x81\x16\x90\x81_\x14a\x0C7WP`\x01\x14a\x0B\xFBW[PPPV[a\x0C\x08\x91\x92\x93\x94Pa\x0B\xBDV[\x91_\x92[\x81\x84\x10a\x0C\x1FWPP\x01\x90_\x80\x80a\x0B\xF6V[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\x0C\x0CV[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\x0B\xF6V[\x90a\x0C\\\x91a\x0B\xC6V[\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x0C}\x90a\x02`V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x0C\x97W`@RV[a\x0C_V[\x90a\x0C\xBCa\x0C\xB5\x92a\x0C\xACa\x01\x82V[\x93\x84\x80\x92a\x0CRV[\x03\x83a\x0CsV[V[a\x0C\xC7\x90a\x0C\x9CV[\x90V[a\x0C\xD2a\x0BqV[Pa\x0C\xDD`\x03a\x0C\xBEV[\x90V[a\x0C\xFD\x91a\x0C\xECa\x0B-V[Pa\x0C\xF5a\x14(V[\x91\x90\x91a\x145V[`\x01\x90V[_\x90V[_\x1C\x90V[\x90V[a\r\x1Aa\r\x1F\x91a\r\x06V[a\r\x0BV[\x90V[a\r,\x90Ta\r\x0EV[\x90V[a\r7a\r\x02V[Pa\rB`\x02a\r\"V[\x90V[\x91a\ro\x92a\rRa\x0B-V[Pa\rga\r^a\x14(V[\x82\x90\x84\x91a\x14\x85V[\x91\x90\x91a\x15UV[`\x01\x90V[_\x90V[a\r\x81\x90a\x04rV[\x90V[\x90a\r\x8E\x90a\rxV[_R` R`@_ \x90V[\x90V[a\r\xA9a\r\xAE\x91a\r\x06V[a\r\x9AV[\x90V[a\r\xBB\x90Ta\r\x9DV[\x90V[`\x01a\r\xD7a\r\xDD\x92a\r\xCFa\rtV[P`\x05a\r\x84V[\x01a\r\xB1V[\x90V[\x90a\r\xFB\x91a\r\xF6a\r\xF1\x82a\r\xBEV[a\x16\0V[a\r\xFDV[V[\x90a\x0E\x07\x91a\x16YV[PV[\x90a\x0E\x14\x91a\r\xE0V[V[_\x90V[\x90V[\x90V[a\x0E4a\x0E/a\x0E9\x92a\x0E\x1AV[a\x0E\x1DV[a\x05sV[\x90V[a\x0EDa\x0E\x16V[Pa\x0EO`\x12a\x0E V[\x90V[a\x0EZa\rtV[Pa\x0Eca\x17\x05V[\x90V[\x90\x80a\x0E\x81a\x0E{a\x0Eva\x14(V[a\x02\xF3V[\x91a\x02\xF3V[\x03a\x0E\x92Wa\x0E\x8F\x91a\x17\xBFV[PV[a\x0E\x9Aa\x01\x82V[c3K\xD9\x19`\xE1\x1B\x81R\x80a\x0E\xB1`\x04\x82\x01a\x05:V[\x03\x90\xFD[\x90a\x0E\xCF\x91a\x0E\xCAa\x0E\xC5a\n.V[a\x16\0V[a\x0FoV[V[a\x0E\xE5a\x0E\xE0a\x0E\xEA\x92a\x08\xBBV[a\x0E\x1DV[a\x03\"V[\x90V[_\x7FAmount cannot be zero\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x0F!`\x15` \x92a\x02LV[a\x0F*\x81a\x0E\xEDV[\x01\x90V[a\x0FC\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x0F\x14V[\x90V[\x15a\x0FMWV[a\x0FUa\x01\x82V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x0Fk`\x04\x82\x01a\x0F.V[\x03\x90\xFD[\x90a\x0F\x96\x91a\x0F\x91\x82a\x0F\x8Aa\x0F\x84_a\x0E\xD1V[\x91a\x03\"V[\x14\x15a\x0FFV[a\x18aV[V[\x90a\x0F\xA2\x91a\x0E\xB5V[V[a\x0F\xB8a\x0F\xB3a\x0F\xBD\x92a\x02\xE8V[a\x0E\x1DV[a\x02\xE8V[\x90V[a\x0F\xC9\x90a\x0F\xA4V[\x90V[a\x0F\xD5\x90a\x0F\xC0V[\x90V[\x90a\x0F\xE2\x90a\x0F\xCCV[_R` R`@_ \x90V[a\x10\x04a\x10\t\x91a\x0F\xFDa\r\x02V[P_a\x0F\xD8V[a\r\"V[\x90V[a\x10\x1E\x90a\x10\x18a\r\x02V[Pa\x18\xC6V[\x90V[_\x90V[_\x90V[``\x90V[a\x107\x90a\x0F\xC0V[\x90V[\x90a\x10Ma\x10Fa\x01\x82V[\x92\x83a\x0CsV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x10gW` \x80\x91\x02\x01\x90V[a\x0C_V[\x90a\x10~a\x10y\x83a\x10OV[a\x10:V[\x91\x82RV[6\x907V[\x90a\x10\xADa\x10\x95\x83a\x10lV[\x92` \x80a\x10\xA3\x86\x93a\x10OV[\x92\x01\x91\x03\x90a\x10\x83V[V[`\x0F`\xF8\x1B\x90V[a\x10\xBFa\x10!V[Pa\x10\xC8a\x0BqV[Pa\x10\xD1a\x0BqV[Pa\x10\xDAa\r\x02V[Pa\x10\xE3a\x10%V[Pa\x10\xECa\rtV[Pa\x10\xF5a\x10)V[Pa\x10\xFEa\x18\xE8V[\x90a\x11\x07a\x19(V[\x90F\x90a\x11\x130a\x10.V[\x90a\x11\x1D_a\x08\xC3V[\x90a\x11/a\x11*_a\x0E\xD1V[a\x10\x88V[\x90a\x118a\x10\xAFV[\x96\x95\x94\x93\x92\x91\x90V[\x90a\x11K\x90a\x0F\xCCV[_R` R`@_ \x90V[`\xFF\x16\x90V[a\x11ia\x11n\x91a\r\x06V[a\x11WV[\x90V[a\x11{\x90Ta\x11]V[\x90V[a\x11\xA5\x91_a\x11\x9Aa\x11\xA0\x93a\x11\x92a\x0B-V[P`\x05a\r\x84V[\x01a\x11AV[a\x11qV[\x90V[a\x11\xB0a\x0BqV[Pa\x11\xBB`\x04a\x0C\xBEV[\x90V[a\x11\xDB\x91a\x11\xCAa\x0B-V[Pa\x11\xD3a\x14(V[\x91\x90\x91a\x15UV[`\x01\x90V[\x7Fnq\xED\xAE\x12\xB1\xB9\x7FM\x1F`7\x0F\xEF\x10\x10_\xA2\xFA\xAE\x01&\x11J\x16\x9Cd\x84]a&\xC9\x90V[\x91\x94a\x12La\x12V\x92\x98\x97\x95a\x12B`\xA0\x96a\x128a\x12]\x9Aa\x12.`\xC0\x8A\x01\x9E_\x8B\x01\x90a\x04\xB6V[` \x89\x01\x90a\x07\x0BV[`@\x87\x01\x90a\x07\x0BV[``\x85\x01\x90a\x03\xABV[`\x80\x83\x01\x90a\x03\xABV[\x01\x90a\x03\xABV[V[` \x01\x90V[Q\x90V[\x91` a\x12\x8A\x92\x94\x93a\x12\x83`@\x82\x01\x96_\x83\x01\x90a\x07\x0BV[\x01\x90a\x07\x0BV[V[\x96\x95\x91\x93\x92\x94\x90\x94Ba\x12\xA7a\x12\xA1\x83a\x03\"V[\x91a\x03\"V[\x11a\x13hW\x90a\x13\x10a\x13\x19\x94\x93\x92a\x12\xF8a\x12\xC1a\x11\xE0V[a\x12\xE9\x8C\x80\x94\x8C\x91a\x12\xD3\x8D\x91a\x19\xCCV[\x91\x92a\x12\xDDa\x01\x82V[\x97\x88\x96` \x88\x01a\x12\x04V[` \x82\x01\x81\x03\x82R\x03\x82a\x0CsV[a\x13\na\x13\x04\x82a\x12eV[\x91a\x12_V[ a\x19\xFFV[\x92\x90\x91\x92a\x1A\x1CV[\x80a\x13,a\x13&\x87a\x02\xF3V[\x91a\x02\xF3V[\x03a\x13AWPa\x13?\x92\x93\x91\x90\x91a\x145V[V[\x84\x90a\x13da\x13Na\x01\x82V[\x92\x83\x92c%\xC0\x07#`\xE1\x1B\x84R`\x04\x84\x01a\x12iV[\x03\x90\xFD[a\x13\x8A\x90a\x13ta\x01\x82V[\x91\x82\x91c1<\x89\x81`\xE1\x1B\x83R`\x04\x83\x01a\x03\xB8V[\x03\x90\xFD[\x90a\x13\xA9\x91a\x13\xA4a\x13\x9F\x82a\r\xBEV[a\x16\0V[a\x13\xABV[V[\x90a\x13\xB5\x91a\x17\xBFV[PV[\x90a\x13\xC2\x91a\x13\x8EV[V[\x90a\x13\xCE\x90a\x0F\xCCV[_R` R`@_ \x90V[a\x13\xFF\x91a\x13\xF5a\x13\xFA\x92a\x13\xEDa\r\x02V[P`\x01a\x13\xC4V[a\x0F\xD8V[a\r\"V[\x90V[a\x14\na\x0B-V[Pa\x14$a\x14\x1Ec\x01\xFF\xC9\xA7`\xE0\x1Ba\x01\x90V[\x91a\x01\x90V[\x14\x90V[a\x140a\x10%V[P3\x90V[\x91a\x14C\x92\x91`\x01\x92a\x1ACV[V[`@\x90a\x14na\x14u\x94\x96\x95\x93\x96a\x14d``\x84\x01\x98_\x85\x01\x90a\x07\x0BV[` \x83\x01\x90a\x03\xABV[\x01\x90a\x03\xABV[V[\x90a\x14\x82\x91\x03a\x03\"V[\x90V[\x92\x91\x92a\x14\x93\x81\x83\x90a\x13\xDAV[\x90\x81a\x14\xA8a\x14\xA2_\x19a\x03\"V[\x91a\x03\"V[\x10a\x14\xB5W[PPP\x90PV[\x81a\x14\xC8a\x14\xC2\x87a\x03\"V[\x91a\x03\"V[\x10a\x14\xEEWa\x14\xE5\x93\x94a\x14\xDD\x91\x93\x92a\x14wV[\x90_\x92a\x1ACV[\x80_\x80\x80a\x14\xAEV[Pa\x15\x14\x84\x92\x91\x92a\x14\xFEa\x01\x82V[\x93\x84\x93c}\xC7\xA0\xD9`\xE1\x1B\x85R`\x04\x85\x01a\x14EV[\x03\x90\xFD[a\x15,a\x15'a\x151\x92a\x08\xBBV[a\x0E\x1DV[a\x02\xE8V[\x90V[a\x15=\x90a\x15\x18V[\x90V[\x91\x90a\x15S\x90_` \x85\x01\x94\x01\x90a\x07\x0BV[V[\x91\x82a\x15qa\x15ka\x15f_a\x154V[a\x02\xF3V[\x91a\x02\xF3V[\x14a\x15\xD2W\x81a\x15\x91a\x15\x8Ba\x15\x86_a\x154V[a\x02\xF3V[\x91a\x02\xF3V[\x14a\x15\xA4Wa\x15\xA2\x92\x91\x90\x91a\x1B\xA7V[V[a\x15\xCEa\x15\xB0_a\x154V[a\x15\xB8a\x01\x82V[\x91\x82\x91c\xECD/\x05`\xE0\x1B\x83R`\x04\x83\x01a\x15@V[\x03\x90\xFD[a\x15\xFCa\x15\xDE_a\x154V[a\x15\xE6a\x01\x82V[\x91\x82\x91cKc~\x8F`\xE1\x1B\x83R`\x04\x83\x01a\x15@V[\x03\x90\xFD[a\x16\x12\x90a\x16\x0Ca\x14(V[\x90a\x1D@V[V[\x90a\x16 `\xFF\x91a\x08\xBEV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x163\x90a\x01\xDDV[\x90V[\x90V[\x90a\x16Na\x16Ia\x16U\x92a\x16*V[a\x166V[\x82Ta\x16\x14V[\x90UV[a\x16aa\x0B-V[Pa\x16va\x16p\x82\x84\x90a\x11~V[\x15a\x01\xDDV[_\x14a\x16\xFFWa\x16\x9E`\x01a\x16\x99_a\x16\x91`\x05\x86\x90a\r\x84V[\x01\x85\x90a\x11AV[a\x169V[\x90a\x16\xA7a\x14(V[\x90a\x16\xE4a\x16\xDEa\x16\xD8\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r\x95a\rxV[\x92a\x0F\xCCV[\x92a\x0F\xCCV[\x92a\x16\xEDa\x01\x82V[\x80a\x16\xF7\x81a\x05:V[\x03\x90\xA4`\x01\x90V[PP_\x90V[a\x17\ra\rtV[Pa\x17\x170a\x10.V[a\x17Ia\x17C\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x02\xF3V[\x91a\x02\xF3V[\x14\x80a\x17\x85W[_\x14a\x17zW\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[a\x17\x82a\x1D\xF3V[\x90V[PFa\x17\xB9a\x17\xB3\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x03\"V[\x91a\x03\"V[\x14a\x17PV[a\x17\xC7a\x0B-V[Pa\x17\xD3\x81\x83\x90a\x11~V[_\x14a\x18[Wa\x17\xFA_a\x17\xF5_a\x17\xED`\x05\x86\x90a\r\x84V[\x01\x85\x90a\x11AV[a\x169V[\x90a\x18\x03a\x14(V[\x90a\x18@a\x18:a\x184\x7F\xF69\x1F\\2\xD9\xC6\x9D*G\xEAg\x0BD)t\xB595\xD1\xED\xC7\xFDd\xEB!\xE0G\xA89\x17\x1B\x95a\rxV[\x92a\x0F\xCCV[\x92a\x0F\xCCV[\x92a\x18Ia\x01\x82V[\x80a\x18S\x81a\x05:V[\x03\x90\xA4`\x01\x90V[PP_\x90V[\x80a\x18|a\x18va\x18q_a\x154V[a\x02\xF3V[\x91a\x02\xF3V[\x14a\x18\x98Wa\x18\x96\x91a\x18\x8E_a\x154V[\x91\x90\x91a\x1B\xA7V[V[a\x18\xC2a\x18\xA4_a\x154V[a\x18\xACa\x01\x82V[\x91\x82\x91c\xECD/\x05`\xE0\x1B\x83R`\x04\x83\x01a\x15@V[\x03\x90\xFD[a\x18\xDDa\x18\xE2\x91a\x18\xD5a\r\x02V[P`\x08a\x0F\xD8V[a\r\"V[\x90V[\x90V[a\x18\xF0a\x0BqV[Pa\x19%\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x19\x1F`\x06a\x18\xE5V[\x90a\x1F\x8DV[\x90V[a\x190a\x0BqV[Pa\x19e\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x19_`\x07a\x18\xE5V[\x90a\x1F\x8DV[\x90V[`\x01a\x19t\x91\x01a\x03\"V[\x90V[\x90a\x19\x83_\x19\x91a\x08\xBEV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x19\xA1a\x19\x9Ca\x19\xA6\x92a\x03\"V[a\x0E\x1DV[a\x03\"V[\x90V[\x90V[\x90a\x19\xC1a\x19\xBCa\x19\xC8\x92a\x19\x8DV[a\x19\xA9V[\x82Ta\x19wV[\x90UV[a\x19\xE0\x90a\x19\xD8a\r\x02V[P`\x08a\x0F\xD8V[a\x19\xFCa\x19\xEC\x82a\r\"V[\x91a\x19\xF6\x83a\x19hV[\x90a\x19\xACV[\x90V[a\x1A\x19\x90a\x1A\x0Ba\rtV[Pa\x1A\x14a\x17\x05V[a\x1F\xDBV[\x90V[\x92a\x1A7\x92a\x1A@\x94a\x1A-a\x10%V[P\x92\x90\x91\x92a \xA1V[\x90\x92\x91\x92a!\xCCV[\x90V[\x90\x92\x81a\x1A`a\x1AZa\x1AU_a\x154V[a\x02\xF3V[\x91a\x02\xF3V[\x14a\x1B2W\x83a\x1A\x80a\x1Aza\x1Au_a\x154V[a\x02\xF3V[\x91a\x02\xF3V[\x14a\x1B\x04Wa\x1A\xA4\x83a\x1A\x9Fa\x1A\x98`\x01\x86\x90a\x13\xC4V[\x87\x90a\x0F\xD8V[a\x19\xACV[a\x1A\xAEW[PPPV[\x91\x90\x91a\x1A\xF9a\x1A\xE7a\x1A\xE1\x7F\x8C[\xE1\xE5\xEB\xEC}[\xD1OqB}\x1E\x84\xF3\xDD\x03\x14\xC0\xF7\xB2)\x1E[ \n\xC8\xC7\xC3\xB9%\x93a\x0F\xCCV[\x93a\x0F\xCCV[\x93a\x1A\xF0a\x01\x82V[\x91\x82\x91\x82a\x03\xB8V[\x03\x90\xA3_\x80\x80a\x1A\xA9V[a\x1B.a\x1B\x10_a\x154V[a\x1B\x18a\x01\x82V[\x91\x82\x91cJ\x14\x06\xB1`\xE1\x1B\x83R`\x04\x83\x01a\x15@V[\x03\x90\xFD[a\x1B\\a\x1B>_a\x154V[a\x1BFa\x01\x82V[\x91\x82\x91c\xE6\x02\xDF\x05`\xE0\x1B\x83R`\x04\x83\x01a\x15@V[\x03\x90\xFD[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x1B\x83a\x1B\x89\x91\x93\x92\x93a\x03\"V[\x92a\x03\"V[\x82\x01\x80\x92\x11a\x1B\x94WV[a\x1B`V[\x90a\x1B\xA4\x91\x01a\x03\"V[\x90V[\x91\x90\x91\x80a\x1B\xC5a\x1B\xBFa\x1B\xBA_a\x154V[a\x02\xF3V[\x91a\x02\xF3V[\x14_\x14a\x1C\xA6Wa\x1B\xE9a\x1B\xE2\x83a\x1B\xDD`\x02a\r\"V[a\x1BtV[`\x02a\x19\xACV[[\x82a\x1C\x05a\x1B\xFFa\x1B\xFA_a\x154V[a\x02\xF3V[\x91a\x02\xF3V[\x14_\x14a\x1CzWa\x1C)a\x1C\"\x83a\x1C\x1D`\x02a\r\"V[a\x14wV[`\x02a\x19\xACV[[\x91\x90\x91a\x1Cua\x1Cca\x1C]\x7F\xDD\xF2R\xAD\x1B\xE2\xC8\x9Bi\xC2\xB0h\xFC7\x8D\xAA\x95+\xA7\xF1c\xC4\xA1\x16(\xF5ZM\xF5#\xB3\xEF\x93a\x0F\xCCV[\x93a\x0F\xCCV[\x93a\x1Cla\x01\x82V[\x91\x82\x91\x82a\x03\xB8V[\x03\x90\xA3V[a\x1C\xA1\x82a\x1C\x9Ba\x1C\x8C_\x87\x90a\x0F\xD8V[\x91a\x1C\x96\x83a\r\"V[a\x1B\x99V[\x90a\x19\xACV[a\x1C*V[a\x1C\xB9a\x1C\xB4_\x83\x90a\x0F\xD8V[a\r\"V[\x80a\x1C\xCCa\x1C\xC6\x85a\x03\"V[\x91a\x03\"V[\x10a\x1C\xF4Wa\x1C\xDFa\x1C\xEF\x91\x84\x90a\x14wV[a\x1C\xEA_\x84\x90a\x0F\xD8V[a\x19\xACV[a\x1B\xEAV[\x90a\x1D\x19\x90\x91\x92a\x1D\x03a\x01\x82V[\x93\x84\x93c9\x144\xE3`\xE2\x1B\x85R`\x04\x85\x01a\x14EV[\x03\x90\xFD[\x91` a\x1D>\x92\x94\x93a\x1D7`@\x82\x01\x96_\x83\x01\x90a\x07\x0BV[\x01\x90a\x04\xB6V[V[\x90a\x1DUa\x1DO\x83\x83\x90a\x11~V[\x15a\x01\xDDV[a\x1D]WPPV[a\x1D~a\x1Dha\x01\x82V[\x92\x83\x92c\xE2Q}?`\xE0\x1B\x84R`\x04\x84\x01a\x1D\x1DV[\x03\x90\xFD[\x7F\x8Bs\xC3\xC6\x9B\xB8\xFE=Q.\xCCL\xF7Y\xCCy#\x9F{\x17\x9B\x0F\xFA\xCA\xA9\xA7]R+9@\x0F\x90V[\x90\x95\x94\x92a\x1D\xF1\x94a\x1D\xE0a\x1D\xEA\x92a\x1D\xD6`\x80\x96a\x1D\xCC`\xA0\x88\x01\x9C_\x89\x01\x90a\x04\xB6V[` \x87\x01\x90a\x04\xB6V[`@\x85\x01\x90a\x04\xB6V[``\x83\x01\x90a\x03\xABV[\x01\x90a\x07\x0BV[V[a\x1D\xFBa\rtV[Pa\x1E\x04a\x1D\x82V[a\x1E{\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91a\x1El\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0Fa\x1EW0a\x10.V[\x91a\x1E`a\x01\x82V[\x96\x87\x95` \x87\x01a\x1D\xA6V[` \x82\x01\x81\x03\x82R\x03\x82a\x0CsV[a\x1E\x8Da\x1E\x87\x82a\x12eV[\x91a\x12_V[ \x90V[\x90V[a\x1E\xA8a\x1E\xA3a\x1E\xAD\x92a\x1E\x91V[a\x08\xBEV[a\x04rV[\x90V[a\x1E\xBA`\xFFa\x1E\x94V[\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\x1E\xE0a\x1E\xD9\x83a\x0B\x8AV[\x80\x94a\x0B\xB4V[\x91`\x01\x81\x16\x90\x81_\x14a\x1F7WP`\x01\x14a\x1E\xFBW[PPPV[a\x1F\x08\x91\x92\x93\x94Pa\x1E\xBDV[\x91_\x92[\x81\x84\x10a\x1F\x1FWPP\x01\x90_\x80\x80a\x1E\xF6V[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\x1F\x0CV[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\x1E\xF6V[\x90a\x1F\\\x91a\x1E\xC6V[\x90V[\x90a\x1F\x7Fa\x1Fx\x92a\x1Foa\x01\x82V[\x93\x84\x80\x92a\x1FRV[\x03\x83a\x0CsV[V[a\x1F\x8A\x90a\x1F_V[\x90V[\x90a\x1F\x96a\x0BqV[Pa\x1F\xA0\x82a\rxV[a\x1F\xB9a\x1F\xB3a\x1F\xAEa\x1E\xB0V[a\x04rV[\x91a\x04rV[\x14\x15_\x14a\x1F\xCEWPa\x1F\xCB\x90a#7V[\x90V[a\x1F\xD8\x91Pa\x1F\x81V[\x90V[`B\x91a\x1F\xE6a\rtV[P`@Q\x91\x7F\x19\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83R`\x02\x83\x01R`\"\x82\x01R \x90V[_\x90V[a ,a 1\x91a\r\x06V[a\x19\x8DV[\x90V[\x90V[a Ka Fa P\x92a 4V[a\x0E\x1DV[a\x03\"V[\x90V[a \x88a \x8F\x94a ~``\x94\x98\x97\x95a t`\x80\x86\x01\x9A_\x87\x01\x90a\x04\xB6V[` \x85\x01\x90a\x05yV[`@\x83\x01\x90a\x04\xB6V[\x01\x90a\x04\xB6V[V[a \x99a\x01\x82V[=_\x82>=\x90\xFD[\x93\x92\x93a \xACa\x10%V[Pa \xB5a \x1CV[Pa \xBEa\rtV[Pa \xC8\x85a  V[a \xFAa \xF4\x7F\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF]WnsW\xA4P\x1D\xDF\xE9/Fh\x1B \xA0a 7V[\x91a\x03\"V[\x11a!\x87W\x90a!\x1D` \x94\x95_\x94\x93\x92\x93a!\x14a\x01\x82V[\x94\x85\x94\x85a SV[\x83\x80R\x03\x90`\x01Z\xFA\x15a!\x82Wa!5_Qa\x08\xBEV[\x80a!Pa!Ja!E_a\x154V[a\x02\xF3V[\x91a\x02\xF3V[\x14a!fW_\x91a!`_a\x08\xC3V[\x91\x92\x91\x90V[Pa!p_a\x154V[`\x01\x91a!|_a\x08\xC3V[\x91\x92\x91\x90V[a \x91V[PPPa!\x93_a\x154V[\x90`\x03\x92\x91\x92\x91\x90V[cNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[`\x04\x11\x15a!\xBBWV[a!\x9DV[\x90a!\xCA\x82a!\xB1V[V[\x80a!\xDFa!\xD9_a!\xC0V[\x91a!\xC0V[\x14_\x14a!\xEAWPPV[\x80a!\xFEa!\xF8`\x01a!\xC0V[\x91a!\xC0V[\x14_\x14a\"(Wa\"\ra\x01\x82V[c\xF6E\xEE\xDF`\xE0\x1B\x81R\x80a\"$`\x04\x82\x01a\x05:V[\x03\x90\xFD[\x80a\"<a\"6`\x02a!\xC0V[\x91a!\xC0V[\x14_\x14a\"qWa\"ma\"O\x83a  V[a\"Wa\x01\x82V[\x91\x82\x91c\xFC\xE6\x98\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x03\xB8V[\x03\x90\xFD[a\"\x84a\"~`\x03a!\xC0V[\x91a!\xC0V[\x14a\"\x8CWPV[a\"\xAE\x90a\"\x98a\x01\x82V[\x91\x82\x91c5\xE2\xF3\x83`\xE2\x1B\x83R`\x04\x83\x01a\x04\xC3V[\x03\x90\xFD[\x90V[a\"\xC9a\"\xC4a\"\xCE\x92a\"\xB2V[a\x0E\x1DV[a\x03\"V[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\"\xEFWa\"\xEB` \x91a\x02`V[\x01\x90V[a\x0C_V[\x90a#\x06a#\x01\x83a\"\xD1V[a\x10:V[\x91\x82RV[6\x907V[\x90a#5a#\x1D\x83a\"\xF4V[\x92` \x80a#+\x86\x93a\"\xD1V[\x92\x01\x91\x03\x90a#\x0BV[V[a#?a\x0BqV[Pa#I\x81a#\xA2V[\x90a#\\a#W` a\"\xB5V[a#\x10V[\x91\x82R` \x82\x01R\x90V[a#{a#va#\x80\x92a\x1E\x91V[a\x0E\x1DV[a\x03\"V[\x90V[\x90V[a#\x9Aa#\x95a#\x9F\x92a#\x83V[a\x0E\x1DV[a\x03\"V[\x90V[a#\xB7a#\xBC\x91a#\xB1a\r\x02V[Pa\rxV[a  V[a#\xC6`\xFFa#gV[\x16\x80a#\xDBa#\xD5`\x1Fa#\x86V[\x91a\x03\"V[\x11a#\xE3W\x90V[a#\xEBa\x01\x82V[c,\xD4J\xC3`\xE2\x1B\x81R\x80a$\x02`\x04\x82\x01a\x05:V[\x03\x90\xFD\xFE\xA2dipfsX\"\x12 ?!,`:}\x89\xFA\xC9\xF0\x8B5\x94\xC5\x8EE\xA9\x89\x08\xC1\x9E2S\x89+\x80\xF4:\x9F\x1F>odsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b610b29565b61001d5f3561017c565b806301ffc9a71461017757806306fdde0314610172578063095ea7b31461016d57806318160ddd1461016857806323b872dd14610163578063248a9ca31461015e5780632f2ff15d14610159578063313ce567146101545780633644e5151461014f57806336568abe1461014a57806340c10f191461014557806370a08231146101405780637ecebe001461013b57806384b0196e1461013657806391d148541461013157806395d89b411461012c578063a217fddf14610127578063a9059cbb14610122578063d505accf1461011d578063d539139314610118578063d547741f146101135763dd62ed3e0361000e57610af3565b610a92565b610a5d565b6109f4565b61092b565b6108f6565b610886565b610850565b610814565b6106c0565b61068b565b610639565b610605565b6105d0565b61059b565b61053f565b6104d8565b61043c565b6103cd565b610375565b6102b3565b610204565b60e01c90565b60405190565b5f80fd5b5f80fd5b63ffffffff60e01b1690565b6101a581610190565b036101ac57565b5f80fd5b905035906101bd8261019c565b565b906020828203126101d8576101d5915f016101b0565b90565b61018c565b151590565b6101eb906101dd565b9052565b9190610202905f602085019401906101e2565b565b346102345761023061021f61021a3660046101bf565b610b31565b610227610182565b918291826101ef565b0390f35b610188565b5f91031261024357565b61018c565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b6102896102926020936102979361028081610248565b9384809361024c565b95869101610255565b610260565b0190565b6102b09160208201915f81840391015261026a565b90565b346102e3576102c3366004610239565b6102df6102ce610cca565b6102d6610182565b9182918261029b565b0390f35b610188565b60018060a01b031690565b6102fc906102e8565b90565b610308816102f3565b0361030f57565b5f80fd5b90503590610320826102ff565b565b90565b61032e81610322565b0361033557565b5f80fd5b9050359061034682610325565b565b9190604083820312610370578061036461036d925f8601610313565b93602001610339565b90565b61018c565b346103a6576103a261039161038b366004610348565b90610ce0565b610399610182565b918291826101ef565b0390f35b610188565b6103b490610322565b9052565b91906103cb905f602085019401906103ab565b565b346103fd576103dd366004610239565b6103f96103e8610d2f565b6103f0610182565b918291826103b8565b0390f35b610188565b90916060828403126104375761043461041d845f8501610313565b9361042b8160208601610313565b93604001610339565b90565b61018c565b3461046d57610469610458610452366004610402565b91610d45565b610460610182565b918291826101ef565b0390f35b610188565b90565b61047e81610472565b0361048557565b5f80fd5b9050359061049682610475565b565b906020828203126104b1576104ae915f01610489565b90565b61018c565b6104bf90610472565b9052565b91906104d6905f602085019401906104b6565b565b34610508576105046104f36104ee366004610498565b610dbe565b6104fb610182565b918291826104c3565b0390f35b610188565b91906040838203126105355780610529610532925f8601610489565b93602001610313565b90565b61018c565b5f0190565b3461056e5761055861055236600461050d565b90610e0a565b610560610182565b8061056a8161053a565b0390f35b610188565b60ff1690565b61058290610573565b9052565b9190610599905f60208501940190610579565b565b346105cb576105ab366004610239565b6105c76105b6610e3c565b6105be610182565b91829182610586565b0390f35b610188565b34610600576105e0366004610239565b6105fc6105eb610e52565b6105f3610182565b918291826104c3565b0390f35b610188565b346106345761061e61061836600461050d565b90610e66565b610626610182565b806106308161053a565b0390f35b610188565b346106685761065261064c366004610348565b90610f98565b61065a610182565b806106648161053a565b0390f35b610188565b9060208282031261068657610683915f01610313565b90565b61018c565b346106bb576106b76106a66106a136600461066d565b610fee565b6106ae610182565b918291826103b8565b0390f35b610188565b346106f0576106ec6106db6106d636600461066d565b61100c565b6106e3610182565b918291826103b8565b0390f35b610188565b60ff60f81b1690565b610707906106f5565b9052565b610714906102f3565b9052565b5190565b60209181520190565b60200190565b61073490610322565b9052565b906107458160209361072b565b0190565b60200190565b9061076c61076661075f84610718565b809361071c565b92610725565b905f5b81811061077c5750505090565b90919261079561078f6001928651610738565b94610749565b910191909161076f565b939591946107f06107e5610804956107d76107fa956108119c9a6107ca60e08c01925f8d01906106fe565b8a820360208c015261026a565b9088820360408a015261026a565b9760608701906103ab565b608085019061070b565b60a08301906104b6565b60c081840391015261074f565b90565b3461084b57610824366004610239565b61084761082f6110b7565b9361083e979597939193610182565b9788978861079f565b0390f35b610188565b346108815761087d61086c61086636600461050d565b9061117e565b610874610182565b918291826101ef565b0390f35b610188565b346108b657610896366004610239565b6108b26108a16111a8565b6108a9610182565b9182918261029b565b0390f35b610188565b90565b5f1b90565b6108d76108d26108dc926108bb565b6108be565b610472565b90565b6108e85f6108c3565b90565b6108f36108df565b90565b3461092657610906366004610239565b6109226109116108eb565b610919610182565b918291826104c3565b0390f35b610188565b3461095c57610958610947610941366004610348565b906111be565b61094f610182565b918291826101ef565b0390f35b610188565b61096a81610573565b0361097157565b5f80fd5b9050359061098282610961565b565b60e0818303126109ef5761099a825f8301610313565b926109a88360208401610313565b926109b68160408501610339565b926109c48260608301610339565b926109ec6109d58460808501610975565b936109e38160a08601610489565b9360c001610489565b90565b61018c565b34610a2957610a13610a07366004610984565b9594909493919361128c565b610a1b610182565b80610a258161053a565b0390f35b610188565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a690565b610a5a610a2e565b90565b34610a8d57610a6d366004610239565b610a89610a78610a52565b610a80610182565b918291826104c3565b0390f35b610188565b34610ac157610aab610aa536600461050d565b906113b8565b610ab3610182565b80610abd8161053a565b0390f35b610188565b9190604083820312610aee5780610ae2610aeb925f8601610313565b93602001610313565b90565b61018c565b34610b2457610b20610b0f610b09366004610ac6565b906113da565b610b17610182565b918291826103b8565b0390f35b610188565b5f80fd5b5f90565b610b39610b2d565b5080610b54610b4e637965db0b60e01b610190565b91610190565b14908115610b61575b5090565b610b6b9150611402565b5f610b5d565b606090565b634e487b7160e01b5f52602260045260245ffd5b9060016002830492168015610baa575b6020831014610ba557565b610b76565b91607f1691610b9a565b60209181520190565b5f5260205f2090565b905f9291805490610be0610bd983610b8a565b8094610bb4565b916001811690815f14610c375750600114610bfb575b505050565b610c089192939450610bbd565b915f925b818410610c1f57505001905f8080610bf6565b60018160209295939554848601520191019290610c0c565b92949550505060ff19168252151560200201905f8080610bf6565b90610c5c91610bc6565b90565b634e487b7160e01b5f52604160045260245ffd5b90610c7d90610260565b810190811067ffffffffffffffff821117610c9757604052565b610c5f565b90610cbc610cb592610cac610182565b93848092610c52565b0383610c73565b565b610cc790610c9c565b90565b610cd2610b71565b50610cdd6003610cbe565b90565b610cfd91610cec610b2d565b50610cf5611428565b919091611435565b600190565b5f90565b5f1c90565b90565b610d1a610d1f91610d06565b610d0b565b90565b610d2c9054610d0e565b90565b610d37610d02565b50610d426002610d22565b90565b91610d6f92610d52610b2d565b50610d67610d5e611428565b82908491611485565b919091611555565b600190565b5f90565b610d8190610472565b90565b90610d8e90610d78565b5f5260205260405f2090565b90565b610da9610dae91610d06565b610d9a565b90565b610dbb9054610d9d565b90565b6001610dd7610ddd92610dcf610d74565b506005610d84565b01610db1565b90565b90610dfb91610df6610df182610dbe565b611600565b610dfd565b565b90610e0791611659565b50565b90610e1491610de0565b565b5f90565b90565b90565b610e34610e2f610e3992610e1a565b610e1d565b610573565b90565b610e44610e16565b50610e4f6012610e20565b90565b610e5a610d74565b50610e63611705565b90565b9080610e81610e7b610e76611428565b6102f3565b916102f3565b03610e9257610e8f916117bf565b50565b610e9a610182565b63334bd91960e11b815280610eb16004820161053a565b0390fd5b90610ecf91610eca610ec5610a2e565b611600565b610f6f565b565b610ee5610ee0610eea926108bb565b610e1d565b610322565b90565b5f7f416d6f756e742063616e6e6f74206265207a65726f0000000000000000000000910152565b610f21601560209261024c565b610f2a81610eed565b0190565b610f439060208101905f818303910152610f14565b90565b15610f4d57565b610f55610182565b62461bcd60e51b815280610f6b60048201610f2e565b0390fd5b90610f9691610f9182610f8a610f845f610ed1565b91610322565b1415610f46565b611861565b565b90610fa291610eb5565b565b610fb8610fb3610fbd926102e8565b610e1d565b6102e8565b90565b610fc990610fa4565b90565b610fd590610fc0565b90565b90610fe290610fcc565b5f5260205260405f2090565b61100461100991610ffd610d02565b505f610fd8565b610d22565b90565b61101e90611018610d02565b506118c6565b90565b5f90565b5f90565b606090565b61103790610fc0565b90565b9061104d611046610182565b9283610c73565b565b67ffffffffffffffff81116110675760208091020190565b610c5f565b9061107e6110798361104f565b61103a565b918252565b369037565b906110ad6110958361106c565b926020806110a3869361104f565b9201910390611083565b565b600f60f81b90565b6110bf611021565b506110c8610b71565b506110d1610b71565b506110da610d02565b506110e3611025565b506110ec610d74565b506110f5611029565b506110fe6118e8565b90611107611928565b9046906111133061102e565b9061111d5f6108c3565b9061112f61112a5f610ed1565b611088565b906111386110af565b96959493929190565b9061114b90610fcc565b5f5260205260405f2090565b60ff1690565b61116961116e91610d06565b611157565b90565b61117b905461115d565b90565b6111a5915f61119a6111a093611192610b2d565b506005610d84565b01611141565b611171565b90565b6111b0610b71565b506111bb6004610cbe565b90565b6111db916111ca610b2d565b506111d3611428565b919091611555565b600190565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c990565b919461124c6112569298979561124260a09661123861125d9a61122e60c08a019e5f8b01906104b6565b602089019061070b565b604087019061070b565b60608501906103ab565b60808301906103ab565b01906103ab565b565b60200190565b5190565b91602061128a92949361128360408201965f83019061070b565b019061070b565b565b9695919392949094426112a76112a183610322565b91610322565b1161136857906113106113199493926112f86112c16111e0565b6112e98c80948c916112d38d916119cc565b91926112dd610182565b97889660208801611204565b60208201810382520382610c73565b61130a61130482611265565b9161125f565b206119ff565b92909192611a1c565b8061132c611326876102f3565b916102f3565b03611341575061133f9293919091611435565b565b849061136461134e610182565b9283926325c0072360e11b845260048401611269565b0390fd5b61138a90611374610182565b91829163313c898160e11b8352600483016103b8565b0390fd5b906113a9916113a461139f82610dbe565b611600565b6113ab565b565b906113b5916117bf565b50565b906113c29161138e565b565b906113ce90610fcc565b5f5260205260405f2090565b6113ff916113f56113fa926113ed610d02565b5060016113c4565b610fd8565b610d22565b90565b61140a610b2d565b5061142461141e6301ffc9a760e01b610190565b91610190565b1490565b611430611025565b503390565b916114439291600192611a43565b565b60409061146e611475949695939661146460608401985f85019061070b565b60208301906103ab565b01906103ab565b565b906114829103610322565b90565b9291926114938183906113da565b90816114a86114a25f19610322565b91610322565b106114b5575b5050509050565b816114c86114c287610322565b91610322565b106114ee576114e593946114dd919392611477565b905f92611a43565b805f80806114ae565b50611514849291926114fe610182565b938493637dc7a0d960e11b855260048501611445565b0390fd5b61152c611527611531926108bb565b610e1d565b6102e8565b90565b61153d90611518565b90565b9190611553905f6020850194019061070b565b565b918261157161156b6115665f611534565b6102f3565b916102f3565b146115d2578161159161158b6115865f611534565b6102f3565b916102f3565b146115a4576115a292919091611ba7565b565b6115ce6115b05f611534565b6115b8610182565b91829163ec442f0560e01b835260048301611540565b0390fd5b6115fc6115de5f611534565b6115e6610182565b918291634b637e8f60e11b835260048301611540565b0390fd5b6116129061160c611428565b90611d40565b565b9061162060ff916108be565b9181191691161790565b611633906101dd565b90565b90565b9061164e6116496116559261162a565b611636565b8254611614565b9055565b611661610b2d565b5061167661167082849061117e565b156101dd565b5f146116ff5761169e60016116995f61169160058690610d84565b018590611141565b611639565b906116a7611428565b906116e46116de6116d87f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d95610d78565b92610fcc565b92610fcc565b926116ed610182565b806116f78161053a565b0390a4600190565b50505f90565b61170d610d74565b506117173061102e565b6117496117437f00000000000000000000000000000000000000000000000000000000000000006102f3565b916102f3565b1480611785575b5f1461177a577f000000000000000000000000000000000000000000000000000000000000000090565b611782611df3565b90565b50466117b96117b37f0000000000000000000000000000000000000000000000000000000000000000610322565b91610322565b14611750565b6117c7610b2d565b506117d381839061117e565b5f1461185b576117fa5f6117f55f6117ed60058690610d84565b018590611141565b611639565b90611803611428565b9061184061183a6118347ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b95610d78565b92610fcc565b92610fcc565b92611849610182565b806118538161053a565b0390a4600190565b50505f90565b8061187c6118766118715f611534565b6102f3565b916102f3565b14611898576118969161188e5f611534565b919091611ba7565b565b6118c26118a45f611534565b6118ac610182565b91829163ec442f0560e01b835260048301611540565b0390fd5b6118dd6118e2916118d5610d02565b506008610fd8565b610d22565b90565b90565b6118f0610b71565b506119257f000000000000000000000000000000000000000000000000000000000000000061191f60066118e5565b90611f8d565b90565b611930610b71565b506119657f000000000000000000000000000000000000000000000000000000000000000061195f60076118e5565b90611f8d565b90565b60016119749101610322565b90565b906119835f19916108be565b9181191691161790565b6119a161199c6119a692610322565b610e1d565b610322565b90565b90565b906119c16119bc6119c89261198d565b6119a9565b8254611977565b9055565b6119e0906119d8610d02565b506008610fd8565b6119fc6119ec82610d22565b916119f683611968565b906119ac565b90565b611a1990611a0b610d74565b50611a14611705565b611fdb565b90565b92611a3792611a4094611a2d611025565b50929091926120a1565b909291926121cc565b90565b909281611a60611a5a611a555f611534565b6102f3565b916102f3565b14611b325783611a80611a7a611a755f611534565b6102f3565b916102f3565b14611b0457611aa483611a9f611a98600186906113c4565b8790610fd8565b6119ac565b611aae575b505050565b919091611af9611ae7611ae17f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92593610fcc565b93610fcc565b93611af0610182565b918291826103b8565b0390a35f8080611aa9565b611b2e611b105f611534565b611b18610182565b918291634a1406b160e11b835260048301611540565b0390fd5b611b5c611b3e5f611534565b611b46610182565b91829163e602df0560e01b835260048301611540565b0390fd5b634e487b7160e01b5f52601160045260245ffd5b611b83611b8991939293610322565b92610322565b8201809211611b9457565b611b60565b90611ba49101610322565b90565b91909180611bc5611bbf611bba5f611534565b6102f3565b916102f3565b145f14611ca657611be9611be283611bdd6002610d22565b611b74565b60026119ac565b5b82611c05611bff611bfa5f611534565b6102f3565b916102f3565b145f14611c7a57611c29611c2283611c1d6002610d22565b611477565b60026119ac565b5b919091611c75611c63611c5d7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef93610fcc565b93610fcc565b93611c6c610182565b918291826103b8565b0390a3565b611ca182611c9b611c8c5f8790610fd8565b91611c9683610d22565b611b99565b906119ac565b611c2a565b611cb9611cb45f8390610fd8565b610d22565b80611ccc611cc685610322565b91610322565b10611cf457611cdf611cef918490611477565b611cea5f8490610fd8565b6119ac565b611bea565b90611d19909192611d03610182565b93849363391434e360e21b855260048501611445565b0390fd5b916020611d3e929493611d3760408201965f83019061070b565b01906104b6565b565b90611d55611d4f83839061117e565b156101dd565b611d5d575050565b611d7e611d68610182565b92839263e2517d3f60e01b845260048401611d1d565b0390fd5b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f90565b90959492611df194611de0611dea92611dd6608096611dcc60a088019c5f8901906104b6565b60208701906104b6565b60408501906104b6565b60608301906103ab565b019061070b565b565b611dfb610d74565b50611e04611d82565b611e7b7f000000000000000000000000000000000000000000000000000000000000000091611e6c7f000000000000000000000000000000000000000000000000000000000000000046611e573061102e565b91611e60610182565b96879560208701611da6565b60208201810382520382610c73565b611e8d611e8782611265565b9161125f565b2090565b90565b611ea8611ea3611ead92611e91565b6108be565b610472565b90565b611eba60ff611e94565b90565b5f5260205f2090565b905f9291805490611ee0611ed983610b8a565b8094610bb4565b916001811690815f14611f375750600114611efb575b505050565b611f089192939450611ebd565b915f925b818410611f1f57505001905f8080611ef6565b60018160209295939554848601520191019290611f0c565b92949550505060ff19168252151560200201905f8080611ef6565b90611f5c91611ec6565b90565b90611f7f611f7892611f6f610182565b93848092611f52565b0383610c73565b565b611f8a90611f5f565b90565b90611f96610b71565b50611fa082610d78565b611fb9611fb3611fae611eb0565b610472565b91610472565b14155f14611fce5750611fcb90612337565b90565b611fd89150611f81565b90565b604291611fe6610d74565b50604051917f19010000000000000000000000000000000000000000000000000000000000008352600283015260228201522090565b5f90565b61202c61203191610d06565b61198d565b90565b90565b61204b61204661205092612034565b610e1d565b610322565b90565b61208861208f9461207e606094989795612074608086019a5f8701906104b6565b6020850190610579565b60408301906104b6565b01906104b6565b565b612099610182565b3d5f823e3d90fd5b9392936120ac611025565b506120b561201c565b506120be610d74565b506120c885612020565b6120fa6120f47f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0612037565b91610322565b11612187579061211d602094955f94939293612114610182565b94859485612053565b838052039060015afa15612182576121355f516108be565b8061215061214a6121455f611534565b6102f3565b916102f3565b14612166575f916121605f6108c3565b91929190565b506121705f611534565b60019161217c5f6108c3565b91929190565b612091565b5050506121935f611534565b9060039291929190565b634e487b7160e01b5f52602160045260245ffd5b600411156121bb57565b61219d565b906121ca826121b1565b565b806121df6121d95f6121c0565b916121c0565b145f146121ea575050565b806121fe6121f860016121c0565b916121c0565b145f146122285761220d610182565b63f645eedf60e01b8152806122246004820161053a565b0390fd5b8061223c61223660026121c0565b916121c0565b145f146122715761226d61224f83612020565b612257610182565b91829163fce698f760e01b8352600483016103b8565b0390fd5b61228461227e60036121c0565b916121c0565b1461228c5750565b6122ae90612298610182565b9182916335e2f38360e21b8352600483016104c3565b0390fd5b90565b6122c96122c46122ce926122b2565b610e1d565b610322565b90565b67ffffffffffffffff81116122ef576122eb602091610260565b0190565b610c5f565b90612306612301836122d1565b61103a565b918252565b369037565b9061233561231d836122f4565b9260208061232b86936122d1565b920191039061230b565b565b61233f610b71565b50612349816123a2565b9061235c61235760206122b5565b612310565b918252602082015290565b61237b61237661238092611e91565b610e1d565b610322565b90565b90565b61239a61239561239f92612383565b610e1d565b610322565b90565b6123b76123bc916123b1610d02565b50610d78565b612020565b6123c660ff612367565b16806123db6123d5601f612386565b91610322565b116123e35790565b6123eb610182565b632cd44ac360e21b8152806124026004820161053a565b0390fdfea26469706673582212203f212c603a7d89fac9f08b3594c58e45a98908c19e3253892b80f43a9f1f3e6f64736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x0B)V[a\0\x1D_5a\x01|V[\x80c\x01\xFF\xC9\xA7\x14a\x01wW\x80c\x06\xFD\xDE\x03\x14a\x01rW\x80c\t^\xA7\xB3\x14a\x01mW\x80c\x18\x16\r\xDD\x14a\x01hW\x80c#\xB8r\xDD\x14a\x01cW\x80c$\x8A\x9C\xA3\x14a\x01^W\x80c//\xF1]\x14a\x01YW\x80c1<\xE5g\x14a\x01TW\x80c6D\xE5\x15\x14a\x01OW\x80c6V\x8A\xBE\x14a\x01JW\x80c@\xC1\x0F\x19\x14a\x01EW\x80cp\xA0\x821\x14a\x01@W\x80c~\xCE\xBE\0\x14a\x01;W\x80c\x84\xB0\x19n\x14a\x016W\x80c\x91\xD1HT\x14a\x011W\x80c\x95\xD8\x9BA\x14a\x01,W\x80c\xA2\x17\xFD\xDF\x14a\x01'W\x80c\xA9\x05\x9C\xBB\x14a\x01\"W\x80c\xD5\x05\xAC\xCF\x14a\x01\x1DW\x80c\xD59\x13\x93\x14a\x01\x18W\x80c\xD5Gt\x1F\x14a\x01\x13Wc\xDDb\xED>\x03a\0\x0EWa\n\xF3V[a\n\x92V[a\n]V[a\t\xF4V[a\t+V[a\x08\xF6V[a\x08\x86V[a\x08PV[a\x08\x14V[a\x06\xC0V[a\x06\x8BV[a\x069V[a\x06\x05V[a\x05\xD0V[a\x05\x9BV[a\x05?V[a\x04\xD8V[a\x04<V[a\x03\xCDV[a\x03uV[a\x02\xB3V[a\x02\x04V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[c\xFF\xFF\xFF\xFF`\xE0\x1B\x16\x90V[a\x01\xA5\x81a\x01\x90V[\x03a\x01\xACWV[_\x80\xFD[\x90P5\x90a\x01\xBD\x82a\x01\x9CV[V[\x90` \x82\x82\x03\x12a\x01\xD8Wa\x01\xD5\x91_\x01a\x01\xB0V[\x90V[a\x01\x8CV[\x15\x15\x90V[a\x01\xEB\x90a\x01\xDDV[\x90RV[\x91\x90a\x02\x02\x90_` \x85\x01\x94\x01\x90a\x01\xE2V[V[4a\x024Wa\x020a\x02\x1Fa\x02\x1A6`\x04a\x01\xBFV[a\x0B1V[a\x02'a\x01\x82V[\x91\x82\x91\x82a\x01\xEFV[\x03\x90\xF3[a\x01\x88V[_\x91\x03\x12a\x02CWV[a\x01\x8CV[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x02\x89a\x02\x92` \x93a\x02\x97\x93a\x02\x80\x81a\x02HV[\x93\x84\x80\x93a\x02LV[\x95\x86\x91\x01a\x02UV[a\x02`V[\x01\x90V[a\x02\xB0\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x02jV[\x90V[4a\x02\xE3Wa\x02\xC36`\x04a\x029V[a\x02\xDFa\x02\xCEa\x0C\xCAV[a\x02\xD6a\x01\x82V[\x91\x82\x91\x82a\x02\x9BV[\x03\x90\xF3[a\x01\x88V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02\xFC\x90a\x02\xE8V[\x90V[a\x03\x08\x81a\x02\xF3V[\x03a\x03\x0FWV[_\x80\xFD[\x90P5\x90a\x03 \x82a\x02\xFFV[V[\x90V[a\x03.\x81a\x03\"V[\x03a\x035WV[_\x80\xFD[\x90P5\x90a\x03F\x82a\x03%V[V[\x91\x90`@\x83\x82\x03\x12a\x03pW\x80a\x03da\x03m\x92_\x86\x01a\x03\x13V[\x93` \x01a\x039V[\x90V[a\x01\x8CV[4a\x03\xA6Wa\x03\xA2a\x03\x91a\x03\x8B6`\x04a\x03HV[\x90a\x0C\xE0V[a\x03\x99a\x01\x82V[\x91\x82\x91\x82a\x01\xEFV[\x03\x90\xF3[a\x01\x88V[a\x03\xB4\x90a\x03\"V[\x90RV[\x91\x90a\x03\xCB\x90_` \x85\x01\x94\x01\x90a\x03\xABV[V[4a\x03\xFDWa\x03\xDD6`\x04a\x029V[a\x03\xF9a\x03\xE8a\r/V[a\x03\xF0a\x01\x82V[\x91\x82\x91\x82a\x03\xB8V[\x03\x90\xF3[a\x01\x88V[\x90\x91``\x82\x84\x03\x12a\x047Wa\x044a\x04\x1D\x84_\x85\x01a\x03\x13V[\x93a\x04+\x81` \x86\x01a\x03\x13V[\x93`@\x01a\x039V[\x90V[a\x01\x8CV[4a\x04mWa\x04ia\x04Xa\x04R6`\x04a\x04\x02V[\x91a\rEV[a\x04`a\x01\x82V[\x91\x82\x91\x82a\x01\xEFV[\x03\x90\xF3[a\x01\x88V[\x90V[a\x04~\x81a\x04rV[\x03a\x04\x85WV[_\x80\xFD[\x90P5\x90a\x04\x96\x82a\x04uV[V[\x90` \x82\x82\x03\x12a\x04\xB1Wa\x04\xAE\x91_\x01a\x04\x89V[\x90V[a\x01\x8CV[a\x04\xBF\x90a\x04rV[\x90RV[\x91\x90a\x04\xD6\x90_` \x85\x01\x94\x01\x90a\x04\xB6V[V[4a\x05\x08Wa\x05\x04a\x04\xF3a\x04\xEE6`\x04a\x04\x98V[a\r\xBEV[a\x04\xFBa\x01\x82V[\x91\x82\x91\x82a\x04\xC3V[\x03\x90\xF3[a\x01\x88V[\x91\x90`@\x83\x82\x03\x12a\x055W\x80a\x05)a\x052\x92_\x86\x01a\x04\x89V[\x93` \x01a\x03\x13V[\x90V[a\x01\x8CV[_\x01\x90V[4a\x05nWa\x05Xa\x05R6`\x04a\x05\rV[\x90a\x0E\nV[a\x05`a\x01\x82V[\x80a\x05j\x81a\x05:V[\x03\x90\xF3[a\x01\x88V[`\xFF\x16\x90V[a\x05\x82\x90a\x05sV[\x90RV[\x91\x90a\x05\x99\x90_` \x85\x01\x94\x01\x90a\x05yV[V[4a\x05\xCBWa\x05\xAB6`\x04a\x029V[a\x05\xC7a\x05\xB6a\x0E<V[a\x05\xBEa\x01\x82V[\x91\x82\x91\x82a\x05\x86V[\x03\x90\xF3[a\x01\x88V[4a\x06\0Wa\x05\xE06`\x04a\x029V[a\x05\xFCa\x05\xEBa\x0ERV[a\x05\xF3a\x01\x82V[\x91\x82\x91\x82a\x04\xC3V[\x03\x90\xF3[a\x01\x88V[4a\x064Wa\x06\x1Ea\x06\x186`\x04a\x05\rV[\x90a\x0EfV[a\x06&a\x01\x82V[\x80a\x060\x81a\x05:V[\x03\x90\xF3[a\x01\x88V[4a\x06hWa\x06Ra\x06L6`\x04a\x03HV[\x90a\x0F\x98V[a\x06Za\x01\x82V[\x80a\x06d\x81a\x05:V[\x03\x90\xF3[a\x01\x88V[\x90` \x82\x82\x03\x12a\x06\x86Wa\x06\x83\x91_\x01a\x03\x13V[\x90V[a\x01\x8CV[4a\x06\xBBWa\x06\xB7a\x06\xA6a\x06\xA16`\x04a\x06mV[a\x0F\xEEV[a\x06\xAEa\x01\x82V[\x91\x82\x91\x82a\x03\xB8V[\x03\x90\xF3[a\x01\x88V[4a\x06\xF0Wa\x06\xECa\x06\xDBa\x06\xD66`\x04a\x06mV[a\x10\x0CV[a\x06\xE3a\x01\x82V[\x91\x82\x91\x82a\x03\xB8V[\x03\x90\xF3[a\x01\x88V[`\xFF`\xF8\x1B\x16\x90V[a\x07\x07\x90a\x06\xF5V[\x90RV[a\x07\x14\x90a\x02\xF3V[\x90RV[Q\x90V[` \x91\x81R\x01\x90V[` \x01\x90V[a\x074\x90a\x03\"V[\x90RV[\x90a\x07E\x81` \x93a\x07+V[\x01\x90V[` \x01\x90V[\x90a\x07la\x07fa\x07_\x84a\x07\x18V[\x80\x93a\x07\x1CV[\x92a\x07%V[\x90_[\x81\x81\x10a\x07|WPPP\x90V[\x90\x91\x92a\x07\x95a\x07\x8F`\x01\x92\x86Qa\x078V[\x94a\x07IV[\x91\x01\x91\x90\x91a\x07oV[\x93\x95\x91\x94a\x07\xF0a\x07\xE5a\x08\x04\x95a\x07\xD7a\x07\xFA\x95a\x08\x11\x9C\x9Aa\x07\xCA`\xE0\x8C\x01\x92_\x8D\x01\x90a\x06\xFEV[\x8A\x82\x03` \x8C\x01Ra\x02jV[\x90\x88\x82\x03`@\x8A\x01Ra\x02jV[\x97``\x87\x01\x90a\x03\xABV[`\x80\x85\x01\x90a\x07\x0BV[`\xA0\x83\x01\x90a\x04\xB6V[`\xC0\x81\x84\x03\x91\x01Ra\x07OV[\x90V[4a\x08KWa\x08$6`\x04a\x029V[a\x08Ga\x08/a\x10\xB7V[\x93a\x08>\x97\x95\x97\x93\x91\x93a\x01\x82V[\x97\x88\x97\x88a\x07\x9FV[\x03\x90\xF3[a\x01\x88V[4a\x08\x81Wa\x08}a\x08la\x08f6`\x04a\x05\rV[\x90a\x11~V[a\x08ta\x01\x82V[\x91\x82\x91\x82a\x01\xEFV[\x03\x90\xF3[a\x01\x88V[4a\x08\xB6Wa\x08\x966`\x04a\x029V[a\x08\xB2a\x08\xA1a\x11\xA8V[a\x08\xA9a\x01\x82V[\x91\x82\x91\x82a\x02\x9BV[\x03\x90\xF3[a\x01\x88V[\x90V[_\x1B\x90V[a\x08\xD7a\x08\xD2a\x08\xDC\x92a\x08\xBBV[a\x08\xBEV[a\x04rV[\x90V[a\x08\xE8_a\x08\xC3V[\x90V[a\x08\xF3a\x08\xDFV[\x90V[4a\t&Wa\t\x066`\x04a\x029V[a\t\"a\t\x11a\x08\xEBV[a\t\x19a\x01\x82V[\x91\x82\x91\x82a\x04\xC3V[\x03\x90\xF3[a\x01\x88V[4a\t\\Wa\tXa\tGa\tA6`\x04a\x03HV[\x90a\x11\xBEV[a\tOa\x01\x82V[\x91\x82\x91\x82a\x01\xEFV[\x03\x90\xF3[a\x01\x88V[a\tj\x81a\x05sV[\x03a\tqWV[_\x80\xFD[\x90P5\x90a\t\x82\x82a\taV[V[`\xE0\x81\x83\x03\x12a\t\xEFWa\t\x9A\x82_\x83\x01a\x03\x13V[\x92a\t\xA8\x83` \x84\x01a\x03\x13V[\x92a\t\xB6\x81`@\x85\x01a\x039V[\x92a\t\xC4\x82``\x83\x01a\x039V[\x92a\t\xECa\t\xD5\x84`\x80\x85\x01a\tuV[\x93a\t\xE3\x81`\xA0\x86\x01a\x04\x89V[\x93`\xC0\x01a\x04\x89V[\x90V[a\x01\x8CV[4a\n)Wa\n\x13a\n\x076`\x04a\t\x84V[\x95\x94\x90\x94\x93\x91\x93a\x12\x8CV[a\n\x1Ba\x01\x82V[\x80a\n%\x81a\x05:V[\x03\x90\xF3[a\x01\x88V[\x7F\x9F-\xF0\xFE\xD2\xC7vH\xDEX`\xA4\xCCP\x8C\xD0\x81\x8C\x85\xB8\xB8\xA1\xABL\xEE\xEF\x8D\x98\x1C\x89V\xA6\x90V[a\nZa\n.V[\x90V[4a\n\x8DWa\nm6`\x04a\x029V[a\n\x89a\nxa\nRV[a\n\x80a\x01\x82V[\x91\x82\x91\x82a\x04\xC3V[\x03\x90\xF3[a\x01\x88V[4a\n\xC1Wa\n\xABa\n\xA56`\x04a\x05\rV[\x90a\x13\xB8V[a\n\xB3a\x01\x82V[\x80a\n\xBD\x81a\x05:V[\x03\x90\xF3[a\x01\x88V[\x91\x90`@\x83\x82\x03\x12a\n\xEEW\x80a\n\xE2a\n\xEB\x92_\x86\x01a\x03\x13V[\x93` \x01a\x03\x13V[\x90V[a\x01\x8CV[4a\x0B$Wa\x0B a\x0B\x0Fa\x0B\t6`\x04a\n\xC6V[\x90a\x13\xDAV[a\x0B\x17a\x01\x82V[\x91\x82\x91\x82a\x03\xB8V[\x03\x90\xF3[a\x01\x88V[_\x80\xFD[_\x90V[a\x0B9a\x0B-V[P\x80a\x0BTa\x0BNcye\xDB\x0B`\xE0\x1Ba\x01\x90V[\x91a\x01\x90V[\x14\x90\x81\x15a\x0BaW[P\x90V[a\x0Bk\x91Pa\x14\x02V[_a\x0B]V[``\x90V[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\x0B\xAAW[` \x83\x10\x14a\x0B\xA5WV[a\x0BvV[\x91`\x7F\x16\x91a\x0B\x9AV[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\x0B\xE0a\x0B\xD9\x83a\x0B\x8AV[\x80\x94a\x0B\xB4V[\x91`\x01\x81\x16\x90\x81_\x14a\x0C7WP`\x01\x14a\x0B\xFBW[PPPV[a\x0C\x08\x91\x92\x93\x94Pa\x0B\xBDV[\x91_\x92[\x81\x84\x10a\x0C\x1FWPP\x01\x90_\x80\x80a\x0B\xF6V[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\x0C\x0CV[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\x0B\xF6V[\x90a\x0C\\\x91a\x0B\xC6V[\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x0C}\x90a\x02`V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x0C\x97W`@RV[a\x0C_V[\x90a\x0C\xBCa\x0C\xB5\x92a\x0C\xACa\x01\x82V[\x93\x84\x80\x92a\x0CRV[\x03\x83a\x0CsV[V[a\x0C\xC7\x90a\x0C\x9CV[\x90V[a\x0C\xD2a\x0BqV[Pa\x0C\xDD`\x03a\x0C\xBEV[\x90V[a\x0C\xFD\x91a\x0C\xECa\x0B-V[Pa\x0C\xF5a\x14(V[\x91\x90\x91a\x145V[`\x01\x90V[_\x90V[_\x1C\x90V[\x90V[a\r\x1Aa\r\x1F\x91a\r\x06V[a\r\x0BV[\x90V[a\r,\x90Ta\r\x0EV[\x90V[a\r7a\r\x02V[Pa\rB`\x02a\r\"V[\x90V[\x91a\ro\x92a\rRa\x0B-V[Pa\rga\r^a\x14(V[\x82\x90\x84\x91a\x14\x85V[\x91\x90\x91a\x15UV[`\x01\x90V[_\x90V[a\r\x81\x90a\x04rV[\x90V[\x90a\r\x8E\x90a\rxV[_R` R`@_ \x90V[\x90V[a\r\xA9a\r\xAE\x91a\r\x06V[a\r\x9AV[\x90V[a\r\xBB\x90Ta\r\x9DV[\x90V[`\x01a\r\xD7a\r\xDD\x92a\r\xCFa\rtV[P`\x05a\r\x84V[\x01a\r\xB1V[\x90V[\x90a\r\xFB\x91a\r\xF6a\r\xF1\x82a\r\xBEV[a\x16\0V[a\r\xFDV[V[\x90a\x0E\x07\x91a\x16YV[PV[\x90a\x0E\x14\x91a\r\xE0V[V[_\x90V[\x90V[\x90V[a\x0E4a\x0E/a\x0E9\x92a\x0E\x1AV[a\x0E\x1DV[a\x05sV[\x90V[a\x0EDa\x0E\x16V[Pa\x0EO`\x12a\x0E V[\x90V[a\x0EZa\rtV[Pa\x0Eca\x17\x05V[\x90V[\x90\x80a\x0E\x81a\x0E{a\x0Eva\x14(V[a\x02\xF3V[\x91a\x02\xF3V[\x03a\x0E\x92Wa\x0E\x8F\x91a\x17\xBFV[PV[a\x0E\x9Aa\x01\x82V[c3K\xD9\x19`\xE1\x1B\x81R\x80a\x0E\xB1`\x04\x82\x01a\x05:V[\x03\x90\xFD[\x90a\x0E\xCF\x91a\x0E\xCAa\x0E\xC5a\n.V[a\x16\0V[a\x0FoV[V[a\x0E\xE5a\x0E\xE0a\x0E\xEA\x92a\x08\xBBV[a\x0E\x1DV[a\x03\"V[\x90V[_\x7FAmount cannot be zero\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x0F!`\x15` \x92a\x02LV[a\x0F*\x81a\x0E\xEDV[\x01\x90V[a\x0FC\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x0F\x14V[\x90V[\x15a\x0FMWV[a\x0FUa\x01\x82V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x0Fk`\x04\x82\x01a\x0F.V[\x03\x90\xFD[\x90a\x0F\x96\x91a\x0F\x91\x82a\x0F\x8Aa\x0F\x84_a\x0E\xD1V[\x91a\x03\"V[\x14\x15a\x0FFV[a\x18aV[V[\x90a\x0F\xA2\x91a\x0E\xB5V[V[a\x0F\xB8a\x0F\xB3a\x0F\xBD\x92a\x02\xE8V[a\x0E\x1DV[a\x02\xE8V[\x90V[a\x0F\xC9\x90a\x0F\xA4V[\x90V[a\x0F\xD5\x90a\x0F\xC0V[\x90V[\x90a\x0F\xE2\x90a\x0F\xCCV[_R` R`@_ \x90V[a\x10\x04a\x10\t\x91a\x0F\xFDa\r\x02V[P_a\x0F\xD8V[a\r\"V[\x90V[a\x10\x1E\x90a\x10\x18a\r\x02V[Pa\x18\xC6V[\x90V[_\x90V[_\x90V[``\x90V[a\x107\x90a\x0F\xC0V[\x90V[\x90a\x10Ma\x10Fa\x01\x82V[\x92\x83a\x0CsV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x10gW` \x80\x91\x02\x01\x90V[a\x0C_V[\x90a\x10~a\x10y\x83a\x10OV[a\x10:V[\x91\x82RV[6\x907V[\x90a\x10\xADa\x10\x95\x83a\x10lV[\x92` \x80a\x10\xA3\x86\x93a\x10OV[\x92\x01\x91\x03\x90a\x10\x83V[V[`\x0F`\xF8\x1B\x90V[a\x10\xBFa\x10!V[Pa\x10\xC8a\x0BqV[Pa\x10\xD1a\x0BqV[Pa\x10\xDAa\r\x02V[Pa\x10\xE3a\x10%V[Pa\x10\xECa\rtV[Pa\x10\xF5a\x10)V[Pa\x10\xFEa\x18\xE8V[\x90a\x11\x07a\x19(V[\x90F\x90a\x11\x130a\x10.V[\x90a\x11\x1D_a\x08\xC3V[\x90a\x11/a\x11*_a\x0E\xD1V[a\x10\x88V[\x90a\x118a\x10\xAFV[\x96\x95\x94\x93\x92\x91\x90V[\x90a\x11K\x90a\x0F\xCCV[_R` R`@_ \x90V[`\xFF\x16\x90V[a\x11ia\x11n\x91a\r\x06V[a\x11WV[\x90V[a\x11{\x90Ta\x11]V[\x90V[a\x11\xA5\x91_a\x11\x9Aa\x11\xA0\x93a\x11\x92a\x0B-V[P`\x05a\r\x84V[\x01a\x11AV[a\x11qV[\x90V[a\x11\xB0a\x0BqV[Pa\x11\xBB`\x04a\x0C\xBEV[\x90V[a\x11\xDB\x91a\x11\xCAa\x0B-V[Pa\x11\xD3a\x14(V[\x91\x90\x91a\x15UV[`\x01\x90V[\x7Fnq\xED\xAE\x12\xB1\xB9\x7FM\x1F`7\x0F\xEF\x10\x10_\xA2\xFA\xAE\x01&\x11J\x16\x9Cd\x84]a&\xC9\x90V[\x91\x94a\x12La\x12V\x92\x98\x97\x95a\x12B`\xA0\x96a\x128a\x12]\x9Aa\x12.`\xC0\x8A\x01\x9E_\x8B\x01\x90a\x04\xB6V[` \x89\x01\x90a\x07\x0BV[`@\x87\x01\x90a\x07\x0BV[``\x85\x01\x90a\x03\xABV[`\x80\x83\x01\x90a\x03\xABV[\x01\x90a\x03\xABV[V[` \x01\x90V[Q\x90V[\x91` a\x12\x8A\x92\x94\x93a\x12\x83`@\x82\x01\x96_\x83\x01\x90a\x07\x0BV[\x01\x90a\x07\x0BV[V[\x96\x95\x91\x93\x92\x94\x90\x94Ba\x12\xA7a\x12\xA1\x83a\x03\"V[\x91a\x03\"V[\x11a\x13hW\x90a\x13\x10a\x13\x19\x94\x93\x92a\x12\xF8a\x12\xC1a\x11\xE0V[a\x12\xE9\x8C\x80\x94\x8C\x91a\x12\xD3\x8D\x91a\x19\xCCV[\x91\x92a\x12\xDDa\x01\x82V[\x97\x88\x96` \x88\x01a\x12\x04V[` \x82\x01\x81\x03\x82R\x03\x82a\x0CsV[a\x13\na\x13\x04\x82a\x12eV[\x91a\x12_V[ a\x19\xFFV[\x92\x90\x91\x92a\x1A\x1CV[\x80a\x13,a\x13&\x87a\x02\xF3V[\x91a\x02\xF3V[\x03a\x13AWPa\x13?\x92\x93\x91\x90\x91a\x145V[V[\x84\x90a\x13da\x13Na\x01\x82V[\x92\x83\x92c%\xC0\x07#`\xE1\x1B\x84R`\x04\x84\x01a\x12iV[\x03\x90\xFD[a\x13\x8A\x90a\x13ta\x01\x82V[\x91\x82\x91c1<\x89\x81`\xE1\x1B\x83R`\x04\x83\x01a\x03\xB8V[\x03\x90\xFD[\x90a\x13\xA9\x91a\x13\xA4a\x13\x9F\x82a\r\xBEV[a\x16\0V[a\x13\xABV[V[\x90a\x13\xB5\x91a\x17\xBFV[PV[\x90a\x13\xC2\x91a\x13\x8EV[V[\x90a\x13\xCE\x90a\x0F\xCCV[_R` R`@_ \x90V[a\x13\xFF\x91a\x13\xF5a\x13\xFA\x92a\x13\xEDa\r\x02V[P`\x01a\x13\xC4V[a\x0F\xD8V[a\r\"V[\x90V[a\x14\na\x0B-V[Pa\x14$a\x14\x1Ec\x01\xFF\xC9\xA7`\xE0\x1Ba\x01\x90V[\x91a\x01\x90V[\x14\x90V[a\x140a\x10%V[P3\x90V[\x91a\x14C\x92\x91`\x01\x92a\x1ACV[V[`@\x90a\x14na\x14u\x94\x96\x95\x93\x96a\x14d``\x84\x01\x98_\x85\x01\x90a\x07\x0BV[` \x83\x01\x90a\x03\xABV[\x01\x90a\x03\xABV[V[\x90a\x14\x82\x91\x03a\x03\"V[\x90V[\x92\x91\x92a\x14\x93\x81\x83\x90a\x13\xDAV[\x90\x81a\x14\xA8a\x14\xA2_\x19a\x03\"V[\x91a\x03\"V[\x10a\x14\xB5W[PPP\x90PV[\x81a\x14\xC8a\x14\xC2\x87a\x03\"V[\x91a\x03\"V[\x10a\x14\xEEWa\x14\xE5\x93\x94a\x14\xDD\x91\x93\x92a\x14wV[\x90_\x92a\x1ACV[\x80_\x80\x80a\x14\xAEV[Pa\x15\x14\x84\x92\x91\x92a\x14\xFEa\x01\x82V[\x93\x84\x93c}\xC7\xA0\xD9`\xE1\x1B\x85R`\x04\x85\x01a\x14EV[\x03\x90\xFD[a\x15,a\x15'a\x151\x92a\x08\xBBV[a\x0E\x1DV[a\x02\xE8V[\x90V[a\x15=\x90a\x15\x18V[\x90V[\x91\x90a\x15S\x90_` \x85\x01\x94\x01\x90a\x07\x0BV[V[\x91\x82a\x15qa\x15ka\x15f_a\x154V[a\x02\xF3V[\x91a\x02\xF3V[\x14a\x15\xD2W\x81a\x15\x91a\x15\x8Ba\x15\x86_a\x154V[a\x02\xF3V[\x91a\x02\xF3V[\x14a\x15\xA4Wa\x15\xA2\x92\x91\x90\x91a\x1B\xA7V[V[a\x15\xCEa\x15\xB0_a\x154V[a\x15\xB8a\x01\x82V[\x91\x82\x91c\xECD/\x05`\xE0\x1B\x83R`\x04\x83\x01a\x15@V[\x03\x90\xFD[a\x15\xFCa\x15\xDE_a\x154V[a\x15\xE6a\x01\x82V[\x91\x82\x91cKc~\x8F`\xE1\x1B\x83R`\x04\x83\x01a\x15@V[\x03\x90\xFD[a\x16\x12\x90a\x16\x0Ca\x14(V[\x90a\x1D@V[V[\x90a\x16 `\xFF\x91a\x08\xBEV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x163\x90a\x01\xDDV[\x90V[\x90V[\x90a\x16Na\x16Ia\x16U\x92a\x16*V[a\x166V[\x82Ta\x16\x14V[\x90UV[a\x16aa\x0B-V[Pa\x16va\x16p\x82\x84\x90a\x11~V[\x15a\x01\xDDV[_\x14a\x16\xFFWa\x16\x9E`\x01a\x16\x99_a\x16\x91`\x05\x86\x90a\r\x84V[\x01\x85\x90a\x11AV[a\x169V[\x90a\x16\xA7a\x14(V[\x90a\x16\xE4a\x16\xDEa\x16\xD8\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r\x95a\rxV[\x92a\x0F\xCCV[\x92a\x0F\xCCV[\x92a\x16\xEDa\x01\x82V[\x80a\x16\xF7\x81a\x05:V[\x03\x90\xA4`\x01\x90V[PP_\x90V[a\x17\ra\rtV[Pa\x17\x170a\x10.V[a\x17Ia\x17C\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x02\xF3V[\x91a\x02\xF3V[\x14\x80a\x17\x85W[_\x14a\x17zW\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[a\x17\x82a\x1D\xF3V[\x90V[PFa\x17\xB9a\x17\xB3\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x03\"V[\x91a\x03\"V[\x14a\x17PV[a\x17\xC7a\x0B-V[Pa\x17\xD3\x81\x83\x90a\x11~V[_\x14a\x18[Wa\x17\xFA_a\x17\xF5_a\x17\xED`\x05\x86\x90a\r\x84V[\x01\x85\x90a\x11AV[a\x169V[\x90a\x18\x03a\x14(V[\x90a\x18@a\x18:a\x184\x7F\xF69\x1F\\2\xD9\xC6\x9D*G\xEAg\x0BD)t\xB595\xD1\xED\xC7\xFDd\xEB!\xE0G\xA89\x17\x1B\x95a\rxV[\x92a\x0F\xCCV[\x92a\x0F\xCCV[\x92a\x18Ia\x01\x82V[\x80a\x18S\x81a\x05:V[\x03\x90\xA4`\x01\x90V[PP_\x90V[\x80a\x18|a\x18va\x18q_a\x154V[a\x02\xF3V[\x91a\x02\xF3V[\x14a\x18\x98Wa\x18\x96\x91a\x18\x8E_a\x154V[\x91\x90\x91a\x1B\xA7V[V[a\x18\xC2a\x18\xA4_a\x154V[a\x18\xACa\x01\x82V[\x91\x82\x91c\xECD/\x05`\xE0\x1B\x83R`\x04\x83\x01a\x15@V[\x03\x90\xFD[a\x18\xDDa\x18\xE2\x91a\x18\xD5a\r\x02V[P`\x08a\x0F\xD8V[a\r\"V[\x90V[\x90V[a\x18\xF0a\x0BqV[Pa\x19%\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x19\x1F`\x06a\x18\xE5V[\x90a\x1F\x8DV[\x90V[a\x190a\x0BqV[Pa\x19e\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x19_`\x07a\x18\xE5V[\x90a\x1F\x8DV[\x90V[`\x01a\x19t\x91\x01a\x03\"V[\x90V[\x90a\x19\x83_\x19\x91a\x08\xBEV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x19\xA1a\x19\x9Ca\x19\xA6\x92a\x03\"V[a\x0E\x1DV[a\x03\"V[\x90V[\x90V[\x90a\x19\xC1a\x19\xBCa\x19\xC8\x92a\x19\x8DV[a\x19\xA9V[\x82Ta\x19wV[\x90UV[a\x19\xE0\x90a\x19\xD8a\r\x02V[P`\x08a\x0F\xD8V[a\x19\xFCa\x19\xEC\x82a\r\"V[\x91a\x19\xF6\x83a\x19hV[\x90a\x19\xACV[\x90V[a\x1A\x19\x90a\x1A\x0Ba\rtV[Pa\x1A\x14a\x17\x05V[a\x1F\xDBV[\x90V[\x92a\x1A7\x92a\x1A@\x94a\x1A-a\x10%V[P\x92\x90\x91\x92a \xA1V[\x90\x92\x91\x92a!\xCCV[\x90V[\x90\x92\x81a\x1A`a\x1AZa\x1AU_a\x154V[a\x02\xF3V[\x91a\x02\xF3V[\x14a\x1B2W\x83a\x1A\x80a\x1Aza\x1Au_a\x154V[a\x02\xF3V[\x91a\x02\xF3V[\x14a\x1B\x04Wa\x1A\xA4\x83a\x1A\x9Fa\x1A\x98`\x01\x86\x90a\x13\xC4V[\x87\x90a\x0F\xD8V[a\x19\xACV[a\x1A\xAEW[PPPV[\x91\x90\x91a\x1A\xF9a\x1A\xE7a\x1A\xE1\x7F\x8C[\xE1\xE5\xEB\xEC}[\xD1OqB}\x1E\x84\xF3\xDD\x03\x14\xC0\xF7\xB2)\x1E[ \n\xC8\xC7\xC3\xB9%\x93a\x0F\xCCV[\x93a\x0F\xCCV[\x93a\x1A\xF0a\x01\x82V[\x91\x82\x91\x82a\x03\xB8V[\x03\x90\xA3_\x80\x80a\x1A\xA9V[a\x1B.a\x1B\x10_a\x154V[a\x1B\x18a\x01\x82V[\x91\x82\x91cJ\x14\x06\xB1`\xE1\x1B\x83R`\x04\x83\x01a\x15@V[\x03\x90\xFD[a\x1B\\a\x1B>_a\x154V[a\x1BFa\x01\x82V[\x91\x82\x91c\xE6\x02\xDF\x05`\xE0\x1B\x83R`\x04\x83\x01a\x15@V[\x03\x90\xFD[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x1B\x83a\x1B\x89\x91\x93\x92\x93a\x03\"V[\x92a\x03\"V[\x82\x01\x80\x92\x11a\x1B\x94WV[a\x1B`V[\x90a\x1B\xA4\x91\x01a\x03\"V[\x90V[\x91\x90\x91\x80a\x1B\xC5a\x1B\xBFa\x1B\xBA_a\x154V[a\x02\xF3V[\x91a\x02\xF3V[\x14_\x14a\x1C\xA6Wa\x1B\xE9a\x1B\xE2\x83a\x1B\xDD`\x02a\r\"V[a\x1BtV[`\x02a\x19\xACV[[\x82a\x1C\x05a\x1B\xFFa\x1B\xFA_a\x154V[a\x02\xF3V[\x91a\x02\xF3V[\x14_\x14a\x1CzWa\x1C)a\x1C\"\x83a\x1C\x1D`\x02a\r\"V[a\x14wV[`\x02a\x19\xACV[[\x91\x90\x91a\x1Cua\x1Cca\x1C]\x7F\xDD\xF2R\xAD\x1B\xE2\xC8\x9Bi\xC2\xB0h\xFC7\x8D\xAA\x95+\xA7\xF1c\xC4\xA1\x16(\xF5ZM\xF5#\xB3\xEF\x93a\x0F\xCCV[\x93a\x0F\xCCV[\x93a\x1Cla\x01\x82V[\x91\x82\x91\x82a\x03\xB8V[\x03\x90\xA3V[a\x1C\xA1\x82a\x1C\x9Ba\x1C\x8C_\x87\x90a\x0F\xD8V[\x91a\x1C\x96\x83a\r\"V[a\x1B\x99V[\x90a\x19\xACV[a\x1C*V[a\x1C\xB9a\x1C\xB4_\x83\x90a\x0F\xD8V[a\r\"V[\x80a\x1C\xCCa\x1C\xC6\x85a\x03\"V[\x91a\x03\"V[\x10a\x1C\xF4Wa\x1C\xDFa\x1C\xEF\x91\x84\x90a\x14wV[a\x1C\xEA_\x84\x90a\x0F\xD8V[a\x19\xACV[a\x1B\xEAV[\x90a\x1D\x19\x90\x91\x92a\x1D\x03a\x01\x82V[\x93\x84\x93c9\x144\xE3`\xE2\x1B\x85R`\x04\x85\x01a\x14EV[\x03\x90\xFD[\x91` a\x1D>\x92\x94\x93a\x1D7`@\x82\x01\x96_\x83\x01\x90a\x07\x0BV[\x01\x90a\x04\xB6V[V[\x90a\x1DUa\x1DO\x83\x83\x90a\x11~V[\x15a\x01\xDDV[a\x1D]WPPV[a\x1D~a\x1Dha\x01\x82V[\x92\x83\x92c\xE2Q}?`\xE0\x1B\x84R`\x04\x84\x01a\x1D\x1DV[\x03\x90\xFD[\x7F\x8Bs\xC3\xC6\x9B\xB8\xFE=Q.\xCCL\xF7Y\xCCy#\x9F{\x17\x9B\x0F\xFA\xCA\xA9\xA7]R+9@\x0F\x90V[\x90\x95\x94\x92a\x1D\xF1\x94a\x1D\xE0a\x1D\xEA\x92a\x1D\xD6`\x80\x96a\x1D\xCC`\xA0\x88\x01\x9C_\x89\x01\x90a\x04\xB6V[` \x87\x01\x90a\x04\xB6V[`@\x85\x01\x90a\x04\xB6V[``\x83\x01\x90a\x03\xABV[\x01\x90a\x07\x0BV[V[a\x1D\xFBa\rtV[Pa\x1E\x04a\x1D\x82V[a\x1E{\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91a\x1El\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0Fa\x1EW0a\x10.V[\x91a\x1E`a\x01\x82V[\x96\x87\x95` \x87\x01a\x1D\xA6V[` \x82\x01\x81\x03\x82R\x03\x82a\x0CsV[a\x1E\x8Da\x1E\x87\x82a\x12eV[\x91a\x12_V[ \x90V[\x90V[a\x1E\xA8a\x1E\xA3a\x1E\xAD\x92a\x1E\x91V[a\x08\xBEV[a\x04rV[\x90V[a\x1E\xBA`\xFFa\x1E\x94V[\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\x1E\xE0a\x1E\xD9\x83a\x0B\x8AV[\x80\x94a\x0B\xB4V[\x91`\x01\x81\x16\x90\x81_\x14a\x1F7WP`\x01\x14a\x1E\xFBW[PPPV[a\x1F\x08\x91\x92\x93\x94Pa\x1E\xBDV[\x91_\x92[\x81\x84\x10a\x1F\x1FWPP\x01\x90_\x80\x80a\x1E\xF6V[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\x1F\x0CV[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\x1E\xF6V[\x90a\x1F\\\x91a\x1E\xC6V[\x90V[\x90a\x1F\x7Fa\x1Fx\x92a\x1Foa\x01\x82V[\x93\x84\x80\x92a\x1FRV[\x03\x83a\x0CsV[V[a\x1F\x8A\x90a\x1F_V[\x90V[\x90a\x1F\x96a\x0BqV[Pa\x1F\xA0\x82a\rxV[a\x1F\xB9a\x1F\xB3a\x1F\xAEa\x1E\xB0V[a\x04rV[\x91a\x04rV[\x14\x15_\x14a\x1F\xCEWPa\x1F\xCB\x90a#7V[\x90V[a\x1F\xD8\x91Pa\x1F\x81V[\x90V[`B\x91a\x1F\xE6a\rtV[P`@Q\x91\x7F\x19\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83R`\x02\x83\x01R`\"\x82\x01R \x90V[_\x90V[a ,a 1\x91a\r\x06V[a\x19\x8DV[\x90V[\x90V[a Ka Fa P\x92a 4V[a\x0E\x1DV[a\x03\"V[\x90V[a \x88a \x8F\x94a ~``\x94\x98\x97\x95a t`\x80\x86\x01\x9A_\x87\x01\x90a\x04\xB6V[` \x85\x01\x90a\x05yV[`@\x83\x01\x90a\x04\xB6V[\x01\x90a\x04\xB6V[V[a \x99a\x01\x82V[=_\x82>=\x90\xFD[\x93\x92\x93a \xACa\x10%V[Pa \xB5a \x1CV[Pa \xBEa\rtV[Pa \xC8\x85a  V[a \xFAa \xF4\x7F\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF]WnsW\xA4P\x1D\xDF\xE9/Fh\x1B \xA0a 7V[\x91a\x03\"V[\x11a!\x87W\x90a!\x1D` \x94\x95_\x94\x93\x92\x93a!\x14a\x01\x82V[\x94\x85\x94\x85a SV[\x83\x80R\x03\x90`\x01Z\xFA\x15a!\x82Wa!5_Qa\x08\xBEV[\x80a!Pa!Ja!E_a\x154V[a\x02\xF3V[\x91a\x02\xF3V[\x14a!fW_\x91a!`_a\x08\xC3V[\x91\x92\x91\x90V[Pa!p_a\x154V[`\x01\x91a!|_a\x08\xC3V[\x91\x92\x91\x90V[a \x91V[PPPa!\x93_a\x154V[\x90`\x03\x92\x91\x92\x91\x90V[cNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[`\x04\x11\x15a!\xBBWV[a!\x9DV[\x90a!\xCA\x82a!\xB1V[V[\x80a!\xDFa!\xD9_a!\xC0V[\x91a!\xC0V[\x14_\x14a!\xEAWPPV[\x80a!\xFEa!\xF8`\x01a!\xC0V[\x91a!\xC0V[\x14_\x14a\"(Wa\"\ra\x01\x82V[c\xF6E\xEE\xDF`\xE0\x1B\x81R\x80a\"$`\x04\x82\x01a\x05:V[\x03\x90\xFD[\x80a\"<a\"6`\x02a!\xC0V[\x91a!\xC0V[\x14_\x14a\"qWa\"ma\"O\x83a  V[a\"Wa\x01\x82V[\x91\x82\x91c\xFC\xE6\x98\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x03\xB8V[\x03\x90\xFD[a\"\x84a\"~`\x03a!\xC0V[\x91a!\xC0V[\x14a\"\x8CWPV[a\"\xAE\x90a\"\x98a\x01\x82V[\x91\x82\x91c5\xE2\xF3\x83`\xE2\x1B\x83R`\x04\x83\x01a\x04\xC3V[\x03\x90\xFD[\x90V[a\"\xC9a\"\xC4a\"\xCE\x92a\"\xB2V[a\x0E\x1DV[a\x03\"V[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\"\xEFWa\"\xEB` \x91a\x02`V[\x01\x90V[a\x0C_V[\x90a#\x06a#\x01\x83a\"\xD1V[a\x10:V[\x91\x82RV[6\x907V[\x90a#5a#\x1D\x83a\"\xF4V[\x92` \x80a#+\x86\x93a\"\xD1V[\x92\x01\x91\x03\x90a#\x0BV[V[a#?a\x0BqV[Pa#I\x81a#\xA2V[\x90a#\\a#W` a\"\xB5V[a#\x10V[\x91\x82R` \x82\x01R\x90V[a#{a#va#\x80\x92a\x1E\x91V[a\x0E\x1DV[a\x03\"V[\x90V[\x90V[a#\x9Aa#\x95a#\x9F\x92a#\x83V[a\x0E\x1DV[a\x03\"V[\x90V[a#\xB7a#\xBC\x91a#\xB1a\r\x02V[Pa\rxV[a  V[a#\xC6`\xFFa#gV[\x16\x80a#\xDBa#\xD5`\x1Fa#\x86V[\x91a\x03\"V[\x11a#\xE3W\x90V[a#\xEBa\x01\x82V[c,\xD4J\xC3`\xE2\x1B\x81R\x80a$\x02`\x04\x82\x01a\x05:V[\x03\x90\xFD\xFE\xA2dipfsX\"\x12 ?!,`:}\x89\xFA\xC9\xF0\x8B5\x94\xC5\x8EE\xA9\x89\x08\xC1\x9E2S\x89+\x80\xF4:\x9F\x1F>odsolcC\0\x08\x19\x003",
    );
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `AccessControlBadConfirmation()` and selector `0x6697b232`.
```solidity
error AccessControlBadConfirmation();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AccessControlBadConfirmation {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AccessControlBadConfirmation>
        for UnderlyingRustTuple<'_> {
            fn from(value: AccessControlBadConfirmation) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for AccessControlBadConfirmation {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AccessControlBadConfirmation {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AccessControlBadConfirmation()";
            const SELECTOR: [u8; 4] = [102u8, 151u8, 178u8, 50u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `AccessControlUnauthorizedAccount(address,bytes32)` and selector `0xe2517d3f`.
```solidity
error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AccessControlUnauthorizedAccount {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub neededRole: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AccessControlUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: AccessControlUnauthorizedAccount) -> Self {
                (value.account, value.neededRole)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for AccessControlUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    account: tuple.0,
                    neededRole: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AccessControlUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AccessControlUnauthorizedAccount(address,bytes32)";
            const SELECTOR: [u8; 4] = [226u8, 81u8, 125u8, 63u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.neededRole),
                )
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ECDSAInvalidSignature()` and selector `0xf645eedf`.
```solidity
error ECDSAInvalidSignature();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ECDSAInvalidSignature {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ECDSAInvalidSignature> for UnderlyingRustTuple<'_> {
            fn from(value: ECDSAInvalidSignature) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ECDSAInvalidSignature {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ECDSAInvalidSignature {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ECDSAInvalidSignature()";
            const SELECTOR: [u8; 4] = [246u8, 69u8, 238u8, 223u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ECDSAInvalidSignatureLength(uint256)` and selector `0xfce698f7`.
```solidity
error ECDSAInvalidSignatureLength(uint256 length);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ECDSAInvalidSignatureLength {
        #[allow(missing_docs)]
        pub length: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ECDSAInvalidSignatureLength>
        for UnderlyingRustTuple<'_> {
            fn from(value: ECDSAInvalidSignatureLength) -> Self {
                (value.length,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for ECDSAInvalidSignatureLength {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { length: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ECDSAInvalidSignatureLength {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ECDSAInvalidSignatureLength(uint256)";
            const SELECTOR: [u8; 4] = [252u8, 230u8, 152u8, 247u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.length),
                )
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ECDSAInvalidSignatureS(bytes32)` and selector `0xd78bce0c`.
```solidity
error ECDSAInvalidSignatureS(bytes32 s);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ECDSAInvalidSignatureS {
        #[allow(missing_docs)]
        pub s: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ECDSAInvalidSignatureS> for UnderlyingRustTuple<'_> {
            fn from(value: ECDSAInvalidSignatureS) -> Self {
                (value.s,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ECDSAInvalidSignatureS {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { s: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ECDSAInvalidSignatureS {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ECDSAInvalidSignatureS(bytes32)";
            const SELECTOR: [u8; 4] = [215u8, 139u8, 206u8, 12u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.s),
                )
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ERC20InsufficientAllowance(address,uint256,uint256)` and selector `0xfb8f41b2`.
```solidity
error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC20InsufficientAllowance {
        #[allow(missing_docs)]
        pub spender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub allowance: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub needed: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC20InsufficientAllowance>
        for UnderlyingRustTuple<'_> {
            fn from(value: ERC20InsufficientAllowance) -> Self {
                (value.spender, value.allowance, value.needed)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for ERC20InsufficientAllowance {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    spender: tuple.0,
                    allowance: tuple.1,
                    needed: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC20InsufficientAllowance {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC20InsufficientAllowance(address,uint256,uint256)";
            const SELECTOR: [u8; 4] = [251u8, 143u8, 65u8, 178u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.spender,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.allowance),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.needed),
                )
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ERC20InsufficientBalance(address,uint256,uint256)` and selector `0xe450d38c`.
```solidity
error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC20InsufficientBalance {
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub balance: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub needed: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC20InsufficientBalance>
        for UnderlyingRustTuple<'_> {
            fn from(value: ERC20InsufficientBalance) -> Self {
                (value.sender, value.balance, value.needed)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for ERC20InsufficientBalance {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    sender: tuple.0,
                    balance: tuple.1,
                    needed: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC20InsufficientBalance {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC20InsufficientBalance(address,uint256,uint256)";
            const SELECTOR: [u8; 4] = [228u8, 80u8, 211u8, 140u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.sender,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.balance),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.needed),
                )
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ERC20InvalidApprover(address)` and selector `0xe602df05`.
```solidity
error ERC20InvalidApprover(address approver);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC20InvalidApprover {
        #[allow(missing_docs)]
        pub approver: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC20InvalidApprover> for UnderlyingRustTuple<'_> {
            fn from(value: ERC20InvalidApprover) -> Self {
                (value.approver,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ERC20InvalidApprover {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { approver: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC20InvalidApprover {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC20InvalidApprover(address)";
            const SELECTOR: [u8; 4] = [230u8, 2u8, 223u8, 5u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.approver,
                    ),
                )
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ERC20InvalidReceiver(address)` and selector `0xec442f05`.
```solidity
error ERC20InvalidReceiver(address receiver);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC20InvalidReceiver {
        #[allow(missing_docs)]
        pub receiver: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC20InvalidReceiver> for UnderlyingRustTuple<'_> {
            fn from(value: ERC20InvalidReceiver) -> Self {
                (value.receiver,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ERC20InvalidReceiver {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { receiver: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC20InvalidReceiver {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC20InvalidReceiver(address)";
            const SELECTOR: [u8; 4] = [236u8, 68u8, 47u8, 5u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.receiver,
                    ),
                )
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ERC20InvalidSender(address)` and selector `0x96c6fd1e`.
```solidity
error ERC20InvalidSender(address sender);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC20InvalidSender {
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC20InvalidSender> for UnderlyingRustTuple<'_> {
            fn from(value: ERC20InvalidSender) -> Self {
                (value.sender,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ERC20InvalidSender {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { sender: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC20InvalidSender {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC20InvalidSender(address)";
            const SELECTOR: [u8; 4] = [150u8, 198u8, 253u8, 30u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.sender,
                    ),
                )
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ERC20InvalidSpender(address)` and selector `0x94280d62`.
```solidity
error ERC20InvalidSpender(address spender);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC20InvalidSpender {
        #[allow(missing_docs)]
        pub spender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC20InvalidSpender> for UnderlyingRustTuple<'_> {
            fn from(value: ERC20InvalidSpender) -> Self {
                (value.spender,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ERC20InvalidSpender {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { spender: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC20InvalidSpender {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC20InvalidSpender(address)";
            const SELECTOR: [u8; 4] = [148u8, 40u8, 13u8, 98u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.spender,
                    ),
                )
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ERC2612ExpiredSignature(uint256)` and selector `0x62791302`.
```solidity
error ERC2612ExpiredSignature(uint256 deadline);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC2612ExpiredSignature {
        #[allow(missing_docs)]
        pub deadline: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC2612ExpiredSignature> for UnderlyingRustTuple<'_> {
            fn from(value: ERC2612ExpiredSignature) -> Self {
                (value.deadline,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ERC2612ExpiredSignature {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { deadline: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC2612ExpiredSignature {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC2612ExpiredSignature(uint256)";
            const SELECTOR: [u8; 4] = [98u8, 121u8, 19u8, 2u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.deadline),
                )
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ERC2612InvalidSigner(address,address)` and selector `0x4b800e46`.
```solidity
error ERC2612InvalidSigner(address signer, address owner);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC2612InvalidSigner {
        #[allow(missing_docs)]
        pub signer: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC2612InvalidSigner> for UnderlyingRustTuple<'_> {
            fn from(value: ERC2612InvalidSigner) -> Self {
                (value.signer, value.owner)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ERC2612InvalidSigner {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    signer: tuple.0,
                    owner: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC2612InvalidSigner {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC2612InvalidSigner(address,address)";
            const SELECTOR: [u8; 4] = [75u8, 128u8, 14u8, 70u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.signer,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `InvalidAccountNonce(address,uint256)` and selector `0x752d88c0`.
```solidity
error InvalidAccountNonce(address account, uint256 currentNonce);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidAccountNonce {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub currentNonce: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidAccountNonce> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidAccountNonce) -> Self {
                (value.account, value.currentNonce)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidAccountNonce {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    account: tuple.0,
                    currentNonce: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidAccountNonce {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidAccountNonce(address,uint256)";
            const SELECTOR: [u8; 4] = [117u8, 45u8, 136u8, 192u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.currentNonce),
                )
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `InvalidShortString()` and selector `0xb3512b0c`.
```solidity
error InvalidShortString();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidShortString {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidShortString> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidShortString) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidShortString {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidShortString {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidShortString()";
            const SELECTOR: [u8; 4] = [179u8, 81u8, 43u8, 12u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `StringTooLong(string)` and selector `0x305a27a9`.
```solidity
error StringTooLong(string str);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct StringTooLong {
        #[allow(missing_docs)]
        pub str: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<StringTooLong> for UnderlyingRustTuple<'_> {
            fn from(value: StringTooLong) -> Self {
                (value.str,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for StringTooLong {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { str: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for StringTooLong {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "StringTooLong(string)";
            const SELECTOR: [u8; 4] = [48u8, 90u8, 39u8, 169u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.str,
                    ),
                )
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `Approval(address,address,uint256)` and selector `0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925`.
```solidity
event Approval(address indexed owner, address indexed spender, uint256 value);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Approval {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub spender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub value: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Approval {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "Approval(address,address,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                140u8, 91u8, 225u8, 229u8, 235u8, 236u8, 125u8, 91u8, 209u8, 79u8, 113u8,
                66u8, 125u8, 30u8, 132u8, 243u8, 221u8, 3u8, 20u8, 192u8, 247u8, 178u8,
                41u8, 30u8, 91u8, 32u8, 10u8, 200u8, 199u8, 195u8, 185u8, 37u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    owner: topics.1,
                    spender: topics.2,
                    value: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.owner.clone(), self.spender.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.owner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.spender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Approval {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Approval> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Approval) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `EIP712DomainChanged()` and selector `0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31`.
```solidity
event EIP712DomainChanged();
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct EIP712DomainChanged {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for EIP712DomainChanged {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "EIP712DomainChanged()";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                10u8, 99u8, 135u8, 201u8, 234u8, 54u8, 40u8, 184u8, 138u8, 99u8, 59u8,
                180u8, 243u8, 177u8, 81u8, 119u8, 15u8, 112u8, 8u8, 81u8, 23u8, 161u8,
                95u8, 155u8, 243u8, 120u8, 124u8, 218u8, 83u8, 241u8, 61u8, 49u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {}
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for EIP712DomainChanged {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&EIP712DomainChanged> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &EIP712DomainChanged) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `RoleAdminChanged(bytes32,bytes32,bytes32)` and selector `0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff`.
```solidity
event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleAdminChanged {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub previousAdminRole: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub newAdminRole: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleAdminChanged {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            const SIGNATURE: &'static str = "RoleAdminChanged(bytes32,bytes32,bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                189u8, 121u8, 184u8, 111u8, 254u8, 10u8, 184u8, 232u8, 119u8, 97u8, 81u8,
                81u8, 66u8, 23u8, 205u8, 124u8, 172u8, 213u8, 44u8, 144u8, 159u8, 102u8,
                71u8, 92u8, 58u8, 244u8, 78u8, 18u8, 159u8, 11u8, 0u8, 255u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    previousAdminRole: topics.2,
                    newAdminRole: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.previousAdminRole.clone(),
                    self.newAdminRole.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.previousAdminRole);
                out[3usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.newAdminRole);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleAdminChanged {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleAdminChanged> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleAdminChanged) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `RoleGranted(bytes32,address,address)` and selector `0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d`.
```solidity
event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleGranted {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleGranted {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RoleGranted(bytes32,address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                47u8, 135u8, 136u8, 17u8, 126u8, 126u8, 255u8, 29u8, 130u8, 233u8, 38u8,
                236u8, 121u8, 73u8, 1u8, 209u8, 124u8, 120u8, 2u8, 74u8, 80u8, 39u8, 9u8,
                64u8, 48u8, 69u8, 64u8, 167u8, 51u8, 101u8, 111u8, 13u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    account: topics.2,
                    sender: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.account.clone(),
                    self.sender.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.account,
                );
                out[3usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleGranted {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleGranted> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleGranted) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `RoleRevoked(bytes32,address,address)` and selector `0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b`.
```solidity
event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleRevoked {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleRevoked {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RoleRevoked(bytes32,address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                246u8, 57u8, 31u8, 92u8, 50u8, 217u8, 198u8, 157u8, 42u8, 71u8, 234u8,
                103u8, 11u8, 68u8, 41u8, 116u8, 181u8, 57u8, 53u8, 209u8, 237u8, 199u8,
                253u8, 100u8, 235u8, 33u8, 224u8, 71u8, 168u8, 57u8, 23u8, 27u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    account: topics.2,
                    sender: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.account.clone(),
                    self.sender.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.account,
                );
                out[3usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleRevoked {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleRevoked> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleRevoked) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `Transfer(address,address,uint256)` and selector `0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef`.
```solidity
event Transfer(address indexed from, address indexed to, uint256 value);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Transfer {
        #[allow(missing_docs)]
        pub from: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub to: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub value: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Transfer {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "Transfer(address,address,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                221u8, 242u8, 82u8, 173u8, 27u8, 226u8, 200u8, 155u8, 105u8, 194u8,
                176u8, 104u8, 252u8, 55u8, 141u8, 170u8, 149u8, 43u8, 167u8, 241u8, 99u8,
                196u8, 161u8, 22u8, 40u8, 245u8, 90u8, 77u8, 245u8, 35u8, 179u8, 239u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    from: topics.1,
                    to: topics.2,
                    value: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.from.clone(), self.to.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.from,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.to,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Transfer {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Transfer> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Transfer) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address defaultAdmin, address minter);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub defaultAdmin: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub minter: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value.defaultAdmin, value.minter)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        defaultAdmin: tuple.0,
                        minter: tuple.1,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.defaultAdmin,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.minter,
                    ),
                )
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `DEFAULT_ADMIN_ROLE()` and selector `0xa217fddf`.
```solidity
function DEFAULT_ADMIN_ROLE() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_ADMIN_ROLECall {}
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`DEFAULT_ADMIN_ROLE()`](DEFAULT_ADMIN_ROLECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_ADMIN_ROLEReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_ADMIN_ROLECall>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_ADMIN_ROLECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_ADMIN_ROLECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_ADMIN_ROLEReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_ADMIN_ROLEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_ADMIN_ROLEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for DEFAULT_ADMIN_ROLECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = DEFAULT_ADMIN_ROLEReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "DEFAULT_ADMIN_ROLE()";
            const SELECTOR: [u8; 4] = [162u8, 23u8, 253u8, 223u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `DOMAIN_SEPARATOR()` and selector `0x3644e515`.
```solidity
function DOMAIN_SEPARATOR() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DOMAIN_SEPARATORCall {}
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`DOMAIN_SEPARATOR()`](DOMAIN_SEPARATORCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DOMAIN_SEPARATORReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DOMAIN_SEPARATORCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: DOMAIN_SEPARATORCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DOMAIN_SEPARATORCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DOMAIN_SEPARATORReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: DOMAIN_SEPARATORReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DOMAIN_SEPARATORReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for DOMAIN_SEPARATORCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = DOMAIN_SEPARATORReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "DOMAIN_SEPARATOR()";
            const SELECTOR: [u8; 4] = [54u8, 68u8, 229u8, 21u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `MINTER_ROLE()` and selector `0xd5391393`.
```solidity
function MINTER_ROLE() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MINTER_ROLECall {}
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`MINTER_ROLE()`](MINTER_ROLECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MINTER_ROLEReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<MINTER_ROLECall> for UnderlyingRustTuple<'_> {
                fn from(value: MINTER_ROLECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for MINTER_ROLECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<MINTER_ROLEReturn> for UnderlyingRustTuple<'_> {
                fn from(value: MINTER_ROLEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for MINTER_ROLEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for MINTER_ROLECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = MINTER_ROLEReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "MINTER_ROLE()";
            const SELECTOR: [u8; 4] = [213u8, 57u8, 19u8, 147u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `allowance(address,address)` and selector `0xdd62ed3e`.
```solidity
function allowance(address owner, address spender) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct allowanceCall {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub spender: alloy::sol_types::private::Address,
    }
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`allowance(address,address)`](allowanceCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct allowanceReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<allowanceCall> for UnderlyingRustTuple<'_> {
                fn from(value: allowanceCall) -> Self {
                    (value.owner, value.spender)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for allowanceCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        owner: tuple.0,
                        spender: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<allowanceReturn> for UnderlyingRustTuple<'_> {
                fn from(value: allowanceReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for allowanceReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for allowanceCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = allowanceReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "allowance(address,address)";
            const SELECTOR: [u8; 4] = [221u8, 98u8, 237u8, 62u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.spender,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `approve(address,uint256)` and selector `0x095ea7b3`.
```solidity
function approve(address spender, uint256 value) external returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct approveCall {
        #[allow(missing_docs)]
        pub spender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub value: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`approve(address,uint256)`](approveCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct approveReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<approveCall> for UnderlyingRustTuple<'_> {
                fn from(value: approveCall) -> Self {
                    (value.spender, value.value)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for approveCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        spender: tuple.0,
                        value: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<approveReturn> for UnderlyingRustTuple<'_> {
                fn from(value: approveReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for approveReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for approveCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = approveReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "approve(address,uint256)";
            const SELECTOR: [u8; 4] = [9u8, 94u8, 167u8, 179u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.spender,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `balanceOf(address)` and selector `0x70a08231`.
```solidity
function balanceOf(address account) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct balanceOfCall {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`balanceOf(address)`](balanceOfCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct balanceOfReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<balanceOfCall> for UnderlyingRustTuple<'_> {
                fn from(value: balanceOfCall) -> Self {
                    (value.account,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for balanceOfCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { account: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<balanceOfReturn> for UnderlyingRustTuple<'_> {
                fn from(value: balanceOfReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for balanceOfReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for balanceOfCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = balanceOfReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "balanceOf(address)";
            const SELECTOR: [u8; 4] = [112u8, 160u8, 130u8, 49u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `decimals()` and selector `0x313ce567`.
```solidity
function decimals() external view returns (uint8);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct decimalsCall {}
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`decimals()`](decimalsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct decimalsReturn {
        #[allow(missing_docs)]
        pub _0: u8,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<decimalsCall> for UnderlyingRustTuple<'_> {
                fn from(value: decimalsCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for decimalsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<8>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u8,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<decimalsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: decimalsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for decimalsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for decimalsCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = decimalsReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<8>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "decimals()";
            const SELECTOR: [u8; 4] = [49u8, 60u8, 229u8, 103u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `eip712Domain()` and selector `0x84b0196e`.
```solidity
function eip712Domain() external view returns (bytes1 fields, string memory name, string memory version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] memory extensions);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct eip712DomainCall {}
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`eip712Domain()`](eip712DomainCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct eip712DomainReturn {
        #[allow(missing_docs)]
        pub fields: alloy::sol_types::private::FixedBytes<1>,
        #[allow(missing_docs)]
        pub name: alloy::sol_types::private::String,
        #[allow(missing_docs)]
        pub version: alloy::sol_types::private::String,
        #[allow(missing_docs)]
        pub chainId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub verifyingContract: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub salt: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub extensions: alloy::sol_types::private::Vec<
            alloy::sol_types::private::primitives::aliases::U256,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<eip712DomainCall> for UnderlyingRustTuple<'_> {
                fn from(value: eip712DomainCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for eip712DomainCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<1>,
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<1>,
                alloy::sol_types::private::String,
                alloy::sol_types::private::String,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::primitives::aliases::U256,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<eip712DomainReturn> for UnderlyingRustTuple<'_> {
                fn from(value: eip712DomainReturn) -> Self {
                    (
                        value.fields,
                        value.name,
                        value.version,
                        value.chainId,
                        value.verifyingContract,
                        value.salt,
                        value.extensions,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for eip712DomainReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        fields: tuple.0,
                        name: tuple.1,
                        version: tuple.2,
                        chainId: tuple.3,
                        verifyingContract: tuple.4,
                        salt: tuple.5,
                        extensions: tuple.6,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for eip712DomainCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = eip712DomainReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<1>,
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "eip712Domain()";
            const SELECTOR: [u8; 4] = [132u8, 176u8, 25u8, 110u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getRoleAdmin(bytes32)` and selector `0x248a9ca3`.
```solidity
function getRoleAdmin(bytes32 role) external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRoleAdminCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
    }
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getRoleAdmin(bytes32)`](getRoleAdminCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRoleAdminReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRoleAdminCall> for UnderlyingRustTuple<'_> {
                fn from(value: getRoleAdminCall) -> Self {
                    (value.role,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getRoleAdminCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { role: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRoleAdminReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getRoleAdminReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getRoleAdminReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getRoleAdminCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getRoleAdminReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getRoleAdmin(bytes32)";
            const SELECTOR: [u8; 4] = [36u8, 138u8, 156u8, 163u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `grantRole(bytes32,address)` and selector `0x2f2ff15d`.
```solidity
function grantRole(bytes32 role, address account) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct grantRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`grantRole(bytes32,address)`](grantRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct grantRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<grantRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: grantRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for grantRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<grantRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: grantRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for grantRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for grantRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = grantRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "grantRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [47u8, 47u8, 241u8, 93u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `hasRole(bytes32,address)` and selector `0x91d14854`.
```solidity
function hasRole(bytes32 role, address account) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hasRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`hasRole(bytes32,address)`](hasRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hasRoleReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hasRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: hasRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for hasRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hasRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: hasRoleReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for hasRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for hasRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = hasRoleReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "hasRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [145u8, 209u8, 72u8, 84u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `mint(address,uint256)` and selector `0x40c10f19`.
```solidity
function mint(address to, uint256 amount) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct mintCall {
        #[allow(missing_docs)]
        pub to: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`mint(address,uint256)`](mintCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct mintReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<mintCall> for UnderlyingRustTuple<'_> {
                fn from(value: mintCall) -> Self {
                    (value.to, value.amount)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for mintCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        to: tuple.0,
                        amount: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<mintReturn> for UnderlyingRustTuple<'_> {
                fn from(value: mintReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for mintReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for mintCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = mintReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "mint(address,uint256)";
            const SELECTOR: [u8; 4] = [64u8, 193u8, 15u8, 25u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.to,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `name()` and selector `0x06fdde03`.
```solidity
function name() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct nameCall {}
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`name()`](nameCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct nameReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<nameCall> for UnderlyingRustTuple<'_> {
                fn from(value: nameCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for nameCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<nameReturn> for UnderlyingRustTuple<'_> {
                fn from(value: nameReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for nameReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for nameCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = nameReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "name()";
            const SELECTOR: [u8; 4] = [6u8, 253u8, 222u8, 3u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `nonces(address)` and selector `0x7ecebe00`.
```solidity
function nonces(address owner) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct noncesCall {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
    }
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`nonces(address)`](noncesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct noncesReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<noncesCall> for UnderlyingRustTuple<'_> {
                fn from(value: noncesCall) -> Self {
                    (value.owner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for noncesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { owner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<noncesReturn> for UnderlyingRustTuple<'_> {
                fn from(value: noncesReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for noncesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for noncesCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = noncesReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "nonces(address)";
            const SELECTOR: [u8; 4] = [126u8, 206u8, 190u8, 0u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `permit(address,address,uint256,uint256,uint8,bytes32,bytes32)` and selector `0xd505accf`.
```solidity
function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct permitCall {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub spender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub value: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub deadline: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub v: u8,
        #[allow(missing_docs)]
        pub r: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub s: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`permit(address,address,uint256,uint256,uint8,bytes32,bytes32)`](permitCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct permitReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<8>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                u8,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<permitCall> for UnderlyingRustTuple<'_> {
                fn from(value: permitCall) -> Self {
                    (
                        value.owner,
                        value.spender,
                        value.value,
                        value.deadline,
                        value.v,
                        value.r,
                        value.s,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for permitCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        owner: tuple.0,
                        spender: tuple.1,
                        value: tuple.2,
                        deadline: tuple.3,
                        v: tuple.4,
                        r: tuple.5,
                        s: tuple.6,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<permitReturn> for UnderlyingRustTuple<'_> {
                fn from(value: permitReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for permitReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for permitCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<8>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = permitReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)";
            const SELECTOR: [u8; 4] = [213u8, 5u8, 172u8, 207u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.spender,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.deadline),
                    <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::SolType>::tokenize(&self.v),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.r),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.s),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `renounceRole(bytes32,address)` and selector `0x36568abe`.
```solidity
function renounceRole(bytes32 role, address callerConfirmation) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub callerConfirmation: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`renounceRole(bytes32,address)`](renounceRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: renounceRoleCall) -> Self {
                    (value.role, value.callerConfirmation)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for renounceRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        callerConfirmation: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: renounceRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for renounceRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [54u8, 86u8, 138u8, 190u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.callerConfirmation,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `revokeRole(bytes32,address)` and selector `0xd547741f`.
```solidity
function revokeRole(bytes32 role, address account) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct revokeRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`revokeRole(bytes32,address)`](revokeRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct revokeRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<revokeRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: revokeRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for revokeRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<revokeRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: revokeRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for revokeRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for revokeRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = revokeRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "revokeRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [213u8, 71u8, 116u8, 31u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `supportsInterface(bytes4)` and selector `0x01ffc9a7`.
```solidity
function supportsInterface(bytes4 interfaceId) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct supportsInterfaceCall {
        #[allow(missing_docs)]
        pub interfaceId: alloy::sol_types::private::FixedBytes<4>,
    }
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`supportsInterface(bytes4)`](supportsInterfaceCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct supportsInterfaceReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<4>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<supportsInterfaceCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: supportsInterfaceCall) -> Self {
                    (value.interfaceId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for supportsInterfaceCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { interfaceId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<supportsInterfaceReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: supportsInterfaceReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for supportsInterfaceReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for supportsInterfaceCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = supportsInterfaceReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "supportsInterface(bytes4)";
            const SELECTOR: [u8; 4] = [1u8, 255u8, 201u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        4,
                    > as alloy_sol_types::SolType>::tokenize(&self.interfaceId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `symbol()` and selector `0x95d89b41`.
```solidity
function symbol() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct symbolCall {}
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`symbol()`](symbolCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct symbolReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<symbolCall> for UnderlyingRustTuple<'_> {
                fn from(value: symbolCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for symbolCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<symbolReturn> for UnderlyingRustTuple<'_> {
                fn from(value: symbolReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for symbolReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for symbolCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = symbolReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "symbol()";
            const SELECTOR: [u8; 4] = [149u8, 216u8, 155u8, 65u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `totalSupply()` and selector `0x18160ddd`.
```solidity
function totalSupply() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct totalSupplyCall {}
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`totalSupply()`](totalSupplyCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct totalSupplyReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<totalSupplyCall> for UnderlyingRustTuple<'_> {
                fn from(value: totalSupplyCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for totalSupplyCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<totalSupplyReturn> for UnderlyingRustTuple<'_> {
                fn from(value: totalSupplyReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for totalSupplyReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for totalSupplyCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = totalSupplyReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "totalSupply()";
            const SELECTOR: [u8; 4] = [24u8, 22u8, 13u8, 221u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `transfer(address,uint256)` and selector `0xa9059cbb`.
```solidity
function transfer(address to, uint256 value) external returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferCall {
        #[allow(missing_docs)]
        pub to: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub value: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`transfer(address,uint256)`](transferCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferCall> for UnderlyingRustTuple<'_> {
                fn from(value: transferCall) -> Self {
                    (value.to, value.value)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for transferCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        to: tuple.0,
                        value: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferReturn> for UnderlyingRustTuple<'_> {
                fn from(value: transferReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for transferReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transfer(address,uint256)";
            const SELECTOR: [u8; 4] = [169u8, 5u8, 156u8, 187u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.to,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `transferFrom(address,address,uint256)` and selector `0x23b872dd`.
```solidity
function transferFrom(address from, address to, uint256 value) external returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferFromCall {
        #[allow(missing_docs)]
        pub from: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub to: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub value: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`transferFrom(address,address,uint256)`](transferFromCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferFromReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferFromCall> for UnderlyingRustTuple<'_> {
                fn from(value: transferFromCall) -> Self {
                    (value.from, value.to, value.value)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for transferFromCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        from: tuple.0,
                        to: tuple.1,
                        value: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferFromReturn> for UnderlyingRustTuple<'_> {
                fn from(value: transferFromReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for transferFromReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferFromCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferFromReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferFrom(address,address,uint256)";
            const SELECTOR: [u8; 4] = [35u8, 184u8, 114u8, 221u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.from,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.to,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`SyndicateToken`](self) function calls.
    #[derive()]
    pub enum SyndicateTokenCalls {
        #[allow(missing_docs)]
        DEFAULT_ADMIN_ROLE(DEFAULT_ADMIN_ROLECall),
        #[allow(missing_docs)]
        DOMAIN_SEPARATOR(DOMAIN_SEPARATORCall),
        #[allow(missing_docs)]
        MINTER_ROLE(MINTER_ROLECall),
        #[allow(missing_docs)]
        allowance(allowanceCall),
        #[allow(missing_docs)]
        approve(approveCall),
        #[allow(missing_docs)]
        balanceOf(balanceOfCall),
        #[allow(missing_docs)]
        decimals(decimalsCall),
        #[allow(missing_docs)]
        eip712Domain(eip712DomainCall),
        #[allow(missing_docs)]
        getRoleAdmin(getRoleAdminCall),
        #[allow(missing_docs)]
        grantRole(grantRoleCall),
        #[allow(missing_docs)]
        hasRole(hasRoleCall),
        #[allow(missing_docs)]
        mint(mintCall),
        #[allow(missing_docs)]
        name(nameCall),
        #[allow(missing_docs)]
        nonces(noncesCall),
        #[allow(missing_docs)]
        permit(permitCall),
        #[allow(missing_docs)]
        renounceRole(renounceRoleCall),
        #[allow(missing_docs)]
        revokeRole(revokeRoleCall),
        #[allow(missing_docs)]
        supportsInterface(supportsInterfaceCall),
        #[allow(missing_docs)]
        symbol(symbolCall),
        #[allow(missing_docs)]
        totalSupply(totalSupplyCall),
        #[allow(missing_docs)]
        transfer(transferCall),
        #[allow(missing_docs)]
        transferFrom(transferFromCall),
    }
    #[automatically_derived]
    impl SyndicateTokenCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [1u8, 255u8, 201u8, 167u8],
            [6u8, 253u8, 222u8, 3u8],
            [9u8, 94u8, 167u8, 179u8],
            [24u8, 22u8, 13u8, 221u8],
            [35u8, 184u8, 114u8, 221u8],
            [36u8, 138u8, 156u8, 163u8],
            [47u8, 47u8, 241u8, 93u8],
            [49u8, 60u8, 229u8, 103u8],
            [54u8, 68u8, 229u8, 21u8],
            [54u8, 86u8, 138u8, 190u8],
            [64u8, 193u8, 15u8, 25u8],
            [112u8, 160u8, 130u8, 49u8],
            [126u8, 206u8, 190u8, 0u8],
            [132u8, 176u8, 25u8, 110u8],
            [145u8, 209u8, 72u8, 84u8],
            [149u8, 216u8, 155u8, 65u8],
            [162u8, 23u8, 253u8, 223u8],
            [169u8, 5u8, 156u8, 187u8],
            [213u8, 5u8, 172u8, 207u8],
            [213u8, 57u8, 19u8, 147u8],
            [213u8, 71u8, 116u8, 31u8],
            [221u8, 98u8, 237u8, 62u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for SyndicateTokenCalls {
        const NAME: &'static str = "SyndicateTokenCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 22usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::DEFAULT_ADMIN_ROLE(_) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::DOMAIN_SEPARATOR(_) => {
                    <DOMAIN_SEPARATORCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::MINTER_ROLE(_) => {
                    <MINTER_ROLECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::allowance(_) => {
                    <allowanceCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::approve(_) => <approveCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::balanceOf(_) => {
                    <balanceOfCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::decimals(_) => <decimalsCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::eip712Domain(_) => {
                    <eip712DomainCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getRoleAdmin(_) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::grantRole(_) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::hasRole(_) => <hasRoleCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::mint(_) => <mintCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::name(_) => <nameCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::nonces(_) => <noncesCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::permit(_) => <permitCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::renounceRole(_) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::revokeRole(_) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::supportsInterface(_) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::symbol(_) => <symbolCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::totalSupply(_) => {
                    <totalSupplyCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transfer(_) => <transferCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::transferFrom(_) => {
                    <transferFromCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<SyndicateTokenCalls>] = &[
                {
                    fn supportsInterface(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCalls> {
                        <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCalls::supportsInterface)
                    }
                    supportsInterface
                },
                {
                    fn name(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCalls> {
                        <nameCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCalls::name)
                    }
                    name
                },
                {
                    fn approve(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCalls> {
                        <approveCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCalls::approve)
                    }
                    approve
                },
                {
                    fn totalSupply(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCalls> {
                        <totalSupplyCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCalls::totalSupply)
                    }
                    totalSupply
                },
                {
                    fn transferFrom(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCalls> {
                        <transferFromCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCalls::transferFrom)
                    }
                    transferFrom
                },
                {
                    fn getRoleAdmin(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCalls> {
                        <getRoleAdminCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCalls::getRoleAdmin)
                    }
                    getRoleAdmin
                },
                {
                    fn grantRole(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCalls> {
                        <grantRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCalls::grantRole)
                    }
                    grantRole
                },
                {
                    fn decimals(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCalls> {
                        <decimalsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCalls::decimals)
                    }
                    decimals
                },
                {
                    fn DOMAIN_SEPARATOR(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCalls> {
                        <DOMAIN_SEPARATORCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCalls::DOMAIN_SEPARATOR)
                    }
                    DOMAIN_SEPARATOR
                },
                {
                    fn renounceRole(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCalls> {
                        <renounceRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCalls::renounceRole)
                    }
                    renounceRole
                },
                {
                    fn mint(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCalls> {
                        <mintCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCalls::mint)
                    }
                    mint
                },
                {
                    fn balanceOf(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCalls> {
                        <balanceOfCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCalls::balanceOf)
                    }
                    balanceOf
                },
                {
                    fn nonces(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCalls> {
                        <noncesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCalls::nonces)
                    }
                    nonces
                },
                {
                    fn eip712Domain(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCalls> {
                        <eip712DomainCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCalls::eip712Domain)
                    }
                    eip712Domain
                },
                {
                    fn hasRole(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCalls> {
                        <hasRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCalls::hasRole)
                    }
                    hasRole
                },
                {
                    fn symbol(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCalls> {
                        <symbolCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCalls::symbol)
                    }
                    symbol
                },
                {
                    fn DEFAULT_ADMIN_ROLE(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCalls> {
                        <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCalls::DEFAULT_ADMIN_ROLE)
                    }
                    DEFAULT_ADMIN_ROLE
                },
                {
                    fn transfer(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCalls> {
                        <transferCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCalls::transfer)
                    }
                    transfer
                },
                {
                    fn permit(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCalls> {
                        <permitCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCalls::permit)
                    }
                    permit
                },
                {
                    fn MINTER_ROLE(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCalls> {
                        <MINTER_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCalls::MINTER_ROLE)
                    }
                    MINTER_ROLE
                },
                {
                    fn revokeRole(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCalls> {
                        <revokeRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCalls::revokeRole)
                    }
                    revokeRole
                },
                {
                    fn allowance(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCalls> {
                        <allowanceCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCalls::allowance)
                    }
                    allowance
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::DEFAULT_ADMIN_ROLE(inner) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::DOMAIN_SEPARATOR(inner) => {
                    <DOMAIN_SEPARATORCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::MINTER_ROLE(inner) => {
                    <MINTER_ROLECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::allowance(inner) => {
                    <allowanceCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::approve(inner) => {
                    <approveCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::balanceOf(inner) => {
                    <balanceOfCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::decimals(inner) => {
                    <decimalsCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::eip712Domain(inner) => {
                    <eip712DomainCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getRoleAdmin(inner) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::grantRole(inner) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::hasRole(inner) => {
                    <hasRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::mint(inner) => {
                    <mintCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::name(inner) => {
                    <nameCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::nonces(inner) => {
                    <noncesCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::permit(inner) => {
                    <permitCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::renounceRole(inner) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::revokeRole(inner) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::supportsInterface(inner) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::symbol(inner) => {
                    <symbolCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::totalSupply(inner) => {
                    <totalSupplyCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transfer(inner) => {
                    <transferCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::transferFrom(inner) => {
                    <transferFromCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::DEFAULT_ADMIN_ROLE(inner) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::DOMAIN_SEPARATOR(inner) => {
                    <DOMAIN_SEPARATORCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::MINTER_ROLE(inner) => {
                    <MINTER_ROLECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::allowance(inner) => {
                    <allowanceCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::approve(inner) => {
                    <approveCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::balanceOf(inner) => {
                    <balanceOfCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::decimals(inner) => {
                    <decimalsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::eip712Domain(inner) => {
                    <eip712DomainCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getRoleAdmin(inner) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::grantRole(inner) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::hasRole(inner) => {
                    <hasRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::mint(inner) => {
                    <mintCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::name(inner) => {
                    <nameCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::nonces(inner) => {
                    <noncesCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::permit(inner) => {
                    <permitCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::renounceRole(inner) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::revokeRole(inner) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::supportsInterface(inner) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::symbol(inner) => {
                    <symbolCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::totalSupply(inner) => {
                    <totalSupplyCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transfer(inner) => {
                    <transferCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferFrom(inner) => {
                    <transferFromCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`SyndicateToken`](self) custom errors.
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum SyndicateTokenErrors {
        #[allow(missing_docs)]
        AccessControlBadConfirmation(AccessControlBadConfirmation),
        #[allow(missing_docs)]
        AccessControlUnauthorizedAccount(AccessControlUnauthorizedAccount),
        #[allow(missing_docs)]
        ECDSAInvalidSignature(ECDSAInvalidSignature),
        #[allow(missing_docs)]
        ECDSAInvalidSignatureLength(ECDSAInvalidSignatureLength),
        #[allow(missing_docs)]
        ECDSAInvalidSignatureS(ECDSAInvalidSignatureS),
        #[allow(missing_docs)]
        ERC20InsufficientAllowance(ERC20InsufficientAllowance),
        #[allow(missing_docs)]
        ERC20InsufficientBalance(ERC20InsufficientBalance),
        #[allow(missing_docs)]
        ERC20InvalidApprover(ERC20InvalidApprover),
        #[allow(missing_docs)]
        ERC20InvalidReceiver(ERC20InvalidReceiver),
        #[allow(missing_docs)]
        ERC20InvalidSender(ERC20InvalidSender),
        #[allow(missing_docs)]
        ERC20InvalidSpender(ERC20InvalidSpender),
        #[allow(missing_docs)]
        ERC2612ExpiredSignature(ERC2612ExpiredSignature),
        #[allow(missing_docs)]
        ERC2612InvalidSigner(ERC2612InvalidSigner),
        #[allow(missing_docs)]
        InvalidAccountNonce(InvalidAccountNonce),
        #[allow(missing_docs)]
        InvalidShortString(InvalidShortString),
        #[allow(missing_docs)]
        StringTooLong(StringTooLong),
    }
    #[automatically_derived]
    impl SyndicateTokenErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [48u8, 90u8, 39u8, 169u8],
            [75u8, 128u8, 14u8, 70u8],
            [98u8, 121u8, 19u8, 2u8],
            [102u8, 151u8, 178u8, 50u8],
            [117u8, 45u8, 136u8, 192u8],
            [148u8, 40u8, 13u8, 98u8],
            [150u8, 198u8, 253u8, 30u8],
            [179u8, 81u8, 43u8, 12u8],
            [215u8, 139u8, 206u8, 12u8],
            [226u8, 81u8, 125u8, 63u8],
            [228u8, 80u8, 211u8, 140u8],
            [230u8, 2u8, 223u8, 5u8],
            [236u8, 68u8, 47u8, 5u8],
            [246u8, 69u8, 238u8, 223u8],
            [251u8, 143u8, 65u8, 178u8],
            [252u8, 230u8, 152u8, 247u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for SyndicateTokenErrors {
        const NAME: &'static str = "SyndicateTokenErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 16usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AccessControlBadConfirmation(_) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::SELECTOR
                }
                Self::AccessControlUnauthorizedAccount(_) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ECDSAInvalidSignature(_) => {
                    <ECDSAInvalidSignature as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ECDSAInvalidSignatureLength(_) => {
                    <ECDSAInvalidSignatureLength as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ECDSAInvalidSignatureS(_) => {
                    <ECDSAInvalidSignatureS as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC20InsufficientAllowance(_) => {
                    <ERC20InsufficientAllowance as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC20InsufficientBalance(_) => {
                    <ERC20InsufficientBalance as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC20InvalidApprover(_) => {
                    <ERC20InvalidApprover as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC20InvalidReceiver(_) => {
                    <ERC20InvalidReceiver as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC20InvalidSender(_) => {
                    <ERC20InvalidSender as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC20InvalidSpender(_) => {
                    <ERC20InvalidSpender as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC2612ExpiredSignature(_) => {
                    <ERC2612ExpiredSignature as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC2612InvalidSigner(_) => {
                    <ERC2612InvalidSigner as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidAccountNonce(_) => {
                    <InvalidAccountNonce as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidShortString(_) => {
                    <InvalidShortString as alloy_sol_types::SolError>::SELECTOR
                }
                Self::StringTooLong(_) => {
                    <StringTooLong as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<SyndicateTokenErrors>] = &[
                {
                    fn StringTooLong(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenErrors> {
                        <StringTooLong as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenErrors::StringTooLong)
                    }
                    StringTooLong
                },
                {
                    fn ERC2612InvalidSigner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenErrors> {
                        <ERC2612InvalidSigner as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenErrors::ERC2612InvalidSigner)
                    }
                    ERC2612InvalidSigner
                },
                {
                    fn ERC2612ExpiredSignature(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenErrors> {
                        <ERC2612ExpiredSignature as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenErrors::ERC2612ExpiredSignature)
                    }
                    ERC2612ExpiredSignature
                },
                {
                    fn AccessControlBadConfirmation(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenErrors> {
                        <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenErrors::AccessControlBadConfirmation)
                    }
                    AccessControlBadConfirmation
                },
                {
                    fn InvalidAccountNonce(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenErrors> {
                        <InvalidAccountNonce as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenErrors::InvalidAccountNonce)
                    }
                    InvalidAccountNonce
                },
                {
                    fn ERC20InvalidSpender(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenErrors> {
                        <ERC20InvalidSpender as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenErrors::ERC20InvalidSpender)
                    }
                    ERC20InvalidSpender
                },
                {
                    fn ERC20InvalidSender(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenErrors> {
                        <ERC20InvalidSender as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenErrors::ERC20InvalidSender)
                    }
                    ERC20InvalidSender
                },
                {
                    fn InvalidShortString(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenErrors> {
                        <InvalidShortString as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenErrors::InvalidShortString)
                    }
                    InvalidShortString
                },
                {
                    fn ECDSAInvalidSignatureS(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenErrors> {
                        <ECDSAInvalidSignatureS as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenErrors::ECDSAInvalidSignatureS)
                    }
                    ECDSAInvalidSignatureS
                },
                {
                    fn AccessControlUnauthorizedAccount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenErrors> {
                        <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenErrors::AccessControlUnauthorizedAccount)
                    }
                    AccessControlUnauthorizedAccount
                },
                {
                    fn ERC20InsufficientBalance(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenErrors> {
                        <ERC20InsufficientBalance as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenErrors::ERC20InsufficientBalance)
                    }
                    ERC20InsufficientBalance
                },
                {
                    fn ERC20InvalidApprover(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenErrors> {
                        <ERC20InvalidApprover as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenErrors::ERC20InvalidApprover)
                    }
                    ERC20InvalidApprover
                },
                {
                    fn ERC20InvalidReceiver(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenErrors> {
                        <ERC20InvalidReceiver as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenErrors::ERC20InvalidReceiver)
                    }
                    ERC20InvalidReceiver
                },
                {
                    fn ECDSAInvalidSignature(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenErrors> {
                        <ECDSAInvalidSignature as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenErrors::ECDSAInvalidSignature)
                    }
                    ECDSAInvalidSignature
                },
                {
                    fn ERC20InsufficientAllowance(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenErrors> {
                        <ERC20InsufficientAllowance as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenErrors::ERC20InsufficientAllowance)
                    }
                    ERC20InsufficientAllowance
                },
                {
                    fn ECDSAInvalidSignatureLength(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenErrors> {
                        <ECDSAInvalidSignatureLength as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenErrors::ECDSAInvalidSignatureLength)
                    }
                    ECDSAInvalidSignatureLength
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AccessControlBadConfirmation(inner) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::AccessControlUnauthorizedAccount(inner) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ECDSAInvalidSignature(inner) => {
                    <ECDSAInvalidSignature as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ECDSAInvalidSignatureLength(inner) => {
                    <ECDSAInvalidSignatureLength as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ECDSAInvalidSignatureS(inner) => {
                    <ECDSAInvalidSignatureS as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC20InsufficientAllowance(inner) => {
                    <ERC20InsufficientAllowance as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC20InsufficientBalance(inner) => {
                    <ERC20InsufficientBalance as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC20InvalidApprover(inner) => {
                    <ERC20InvalidApprover as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC20InvalidReceiver(inner) => {
                    <ERC20InvalidReceiver as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC20InvalidSender(inner) => {
                    <ERC20InvalidSender as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC20InvalidSpender(inner) => {
                    <ERC20InvalidSpender as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC2612ExpiredSignature(inner) => {
                    <ERC2612ExpiredSignature as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC2612InvalidSigner(inner) => {
                    <ERC2612InvalidSigner as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidAccountNonce(inner) => {
                    <InvalidAccountNonce as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidShortString(inner) => {
                    <InvalidShortString as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::StringTooLong(inner) => {
                    <StringTooLong as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AccessControlBadConfirmation(inner) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::AccessControlUnauthorizedAccount(inner) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ECDSAInvalidSignature(inner) => {
                    <ECDSAInvalidSignature as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ECDSAInvalidSignatureLength(inner) => {
                    <ECDSAInvalidSignatureLength as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ECDSAInvalidSignatureS(inner) => {
                    <ECDSAInvalidSignatureS as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC20InsufficientAllowance(inner) => {
                    <ERC20InsufficientAllowance as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC20InsufficientBalance(inner) => {
                    <ERC20InsufficientBalance as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC20InvalidApprover(inner) => {
                    <ERC20InvalidApprover as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC20InvalidReceiver(inner) => {
                    <ERC20InvalidReceiver as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC20InvalidSender(inner) => {
                    <ERC20InvalidSender as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC20InvalidSpender(inner) => {
                    <ERC20InvalidSpender as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC2612ExpiredSignature(inner) => {
                    <ERC2612ExpiredSignature as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC2612InvalidSigner(inner) => {
                    <ERC2612InvalidSigner as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidAccountNonce(inner) => {
                    <InvalidAccountNonce as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidShortString(inner) => {
                    <InvalidShortString as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::StringTooLong(inner) => {
                    <StringTooLong as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`SyndicateToken`](self) events.
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum SyndicateTokenEvents {
        #[allow(missing_docs)]
        Approval(Approval),
        #[allow(missing_docs)]
        EIP712DomainChanged(EIP712DomainChanged),
        #[allow(missing_docs)]
        RoleAdminChanged(RoleAdminChanged),
        #[allow(missing_docs)]
        RoleGranted(RoleGranted),
        #[allow(missing_docs)]
        RoleRevoked(RoleRevoked),
        #[allow(missing_docs)]
        Transfer(Transfer),
    }
    #[automatically_derived]
    impl SyndicateTokenEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                10u8, 99u8, 135u8, 201u8, 234u8, 54u8, 40u8, 184u8, 138u8, 99u8, 59u8,
                180u8, 243u8, 177u8, 81u8, 119u8, 15u8, 112u8, 8u8, 81u8, 23u8, 161u8,
                95u8, 155u8, 243u8, 120u8, 124u8, 218u8, 83u8, 241u8, 61u8, 49u8,
            ],
            [
                47u8, 135u8, 136u8, 17u8, 126u8, 126u8, 255u8, 29u8, 130u8, 233u8, 38u8,
                236u8, 121u8, 73u8, 1u8, 209u8, 124u8, 120u8, 2u8, 74u8, 80u8, 39u8, 9u8,
                64u8, 48u8, 69u8, 64u8, 167u8, 51u8, 101u8, 111u8, 13u8,
            ],
            [
                140u8, 91u8, 225u8, 229u8, 235u8, 236u8, 125u8, 91u8, 209u8, 79u8, 113u8,
                66u8, 125u8, 30u8, 132u8, 243u8, 221u8, 3u8, 20u8, 192u8, 247u8, 178u8,
                41u8, 30u8, 91u8, 32u8, 10u8, 200u8, 199u8, 195u8, 185u8, 37u8,
            ],
            [
                189u8, 121u8, 184u8, 111u8, 254u8, 10u8, 184u8, 232u8, 119u8, 97u8, 81u8,
                81u8, 66u8, 23u8, 205u8, 124u8, 172u8, 213u8, 44u8, 144u8, 159u8, 102u8,
                71u8, 92u8, 58u8, 244u8, 78u8, 18u8, 159u8, 11u8, 0u8, 255u8,
            ],
            [
                221u8, 242u8, 82u8, 173u8, 27u8, 226u8, 200u8, 155u8, 105u8, 194u8,
                176u8, 104u8, 252u8, 55u8, 141u8, 170u8, 149u8, 43u8, 167u8, 241u8, 99u8,
                196u8, 161u8, 22u8, 40u8, 245u8, 90u8, 77u8, 245u8, 35u8, 179u8, 239u8,
            ],
            [
                246u8, 57u8, 31u8, 92u8, 50u8, 217u8, 198u8, 157u8, 42u8, 71u8, 234u8,
                103u8, 11u8, 68u8, 41u8, 116u8, 181u8, 57u8, 53u8, 209u8, 237u8, 199u8,
                253u8, 100u8, 235u8, 33u8, 224u8, 71u8, 168u8, 57u8, 23u8, 27u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for SyndicateTokenEvents {
        const NAME: &'static str = "SyndicateTokenEvents";
        const COUNT: usize = 6usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<Approval as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Approval as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::Approval)
                }
                Some(
                    <EIP712DomainChanged as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <EIP712DomainChanged as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::EIP712DomainChanged)
                }
                Some(<RoleAdminChanged as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleAdminChanged as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RoleAdminChanged)
                }
                Some(<RoleGranted as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleGranted as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RoleGranted)
                }
                Some(<RoleRevoked as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleRevoked as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RoleRevoked)
                }
                Some(<Transfer as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Transfer as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::Transfer)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for SyndicateTokenEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::Approval(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::EIP712DomainChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleAdminChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleGranted(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleRevoked(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Transfer(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::Approval(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::EIP712DomainChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleAdminChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleGranted(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleRevoked(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Transfer(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`SyndicateToken`](self) contract instance.

See the [wrapper's documentation](`SyndicateTokenInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> SyndicateTokenInstance<T, P, N> {
        SyndicateTokenInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        defaultAdmin: alloy::sol_types::private::Address,
        minter: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<SyndicateTokenInstance<T, P, N>>,
    > {
        SyndicateTokenInstance::<T, P, N>::deploy(provider, defaultAdmin, minter)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        defaultAdmin: alloy::sol_types::private::Address,
        minter: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        SyndicateTokenInstance::<T, P, N>::deploy_builder(provider, defaultAdmin, minter)
    }
    /**A [`SyndicateToken`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`SyndicateToken`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct SyndicateTokenInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for SyndicateTokenInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("SyndicateTokenInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SyndicateTokenInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`SyndicateToken`](self) contract instance.

See the [wrapper's documentation](`SyndicateTokenInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            defaultAdmin: alloy::sol_types::private::Address,
            minter: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<SyndicateTokenInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, defaultAdmin, minter);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            defaultAdmin: alloy::sol_types::private::Address,
            minter: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall {
                            defaultAdmin,
                            minter,
                        },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> SyndicateTokenInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> SyndicateTokenInstance<T, P, N> {
            SyndicateTokenInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SyndicateTokenInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`DEFAULT_ADMIN_ROLE`] function.
        pub fn DEFAULT_ADMIN_ROLE(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, DEFAULT_ADMIN_ROLECall, N> {
            self.call_builder(&DEFAULT_ADMIN_ROLECall {})
        }
        ///Creates a new call builder for the [`DOMAIN_SEPARATOR`] function.
        pub fn DOMAIN_SEPARATOR(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, DOMAIN_SEPARATORCall, N> {
            self.call_builder(&DOMAIN_SEPARATORCall {})
        }
        ///Creates a new call builder for the [`MINTER_ROLE`] function.
        pub fn MINTER_ROLE(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, MINTER_ROLECall, N> {
            self.call_builder(&MINTER_ROLECall {})
        }
        ///Creates a new call builder for the [`allowance`] function.
        pub fn allowance(
            &self,
            owner: alloy::sol_types::private::Address,
            spender: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, allowanceCall, N> {
            self.call_builder(&allowanceCall { owner, spender })
        }
        ///Creates a new call builder for the [`approve`] function.
        pub fn approve(
            &self,
            spender: alloy::sol_types::private::Address,
            value: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, approveCall, N> {
            self.call_builder(&approveCall { spender, value })
        }
        ///Creates a new call builder for the [`balanceOf`] function.
        pub fn balanceOf(
            &self,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, balanceOfCall, N> {
            self.call_builder(&balanceOfCall { account })
        }
        ///Creates a new call builder for the [`decimals`] function.
        pub fn decimals(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, decimalsCall, N> {
            self.call_builder(&decimalsCall {})
        }
        ///Creates a new call builder for the [`eip712Domain`] function.
        pub fn eip712Domain(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, eip712DomainCall, N> {
            self.call_builder(&eip712DomainCall {})
        }
        ///Creates a new call builder for the [`getRoleAdmin`] function.
        pub fn getRoleAdmin(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, getRoleAdminCall, N> {
            self.call_builder(&getRoleAdminCall { role })
        }
        ///Creates a new call builder for the [`grantRole`] function.
        pub fn grantRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, grantRoleCall, N> {
            self.call_builder(&grantRoleCall { role, account })
        }
        ///Creates a new call builder for the [`hasRole`] function.
        pub fn hasRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, hasRoleCall, N> {
            self.call_builder(&hasRoleCall { role, account })
        }
        ///Creates a new call builder for the [`mint`] function.
        pub fn mint(
            &self,
            to: alloy::sol_types::private::Address,
            amount: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, mintCall, N> {
            self.call_builder(&mintCall { to, amount })
        }
        ///Creates a new call builder for the [`name`] function.
        pub fn name(&self) -> alloy_contract::SolCallBuilder<T, &P, nameCall, N> {
            self.call_builder(&nameCall {})
        }
        ///Creates a new call builder for the [`nonces`] function.
        pub fn nonces(
            &self,
            owner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, noncesCall, N> {
            self.call_builder(&noncesCall { owner })
        }
        ///Creates a new call builder for the [`permit`] function.
        pub fn permit(
            &self,
            owner: alloy::sol_types::private::Address,
            spender: alloy::sol_types::private::Address,
            value: alloy::sol_types::private::primitives::aliases::U256,
            deadline: alloy::sol_types::private::primitives::aliases::U256,
            v: u8,
            r: alloy::sol_types::private::FixedBytes<32>,
            s: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, permitCall, N> {
            self.call_builder(
                &permitCall {
                    owner,
                    spender,
                    value,
                    deadline,
                    v,
                    r,
                    s,
                },
            )
        }
        ///Creates a new call builder for the [`renounceRole`] function.
        pub fn renounceRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            callerConfirmation: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, renounceRoleCall, N> {
            self.call_builder(
                &renounceRoleCall {
                    role,
                    callerConfirmation,
                },
            )
        }
        ///Creates a new call builder for the [`revokeRole`] function.
        pub fn revokeRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, revokeRoleCall, N> {
            self.call_builder(&revokeRoleCall { role, account })
        }
        ///Creates a new call builder for the [`supportsInterface`] function.
        pub fn supportsInterface(
            &self,
            interfaceId: alloy::sol_types::private::FixedBytes<4>,
        ) -> alloy_contract::SolCallBuilder<T, &P, supportsInterfaceCall, N> {
            self.call_builder(
                &supportsInterfaceCall {
                    interfaceId,
                },
            )
        }
        ///Creates a new call builder for the [`symbol`] function.
        pub fn symbol(&self) -> alloy_contract::SolCallBuilder<T, &P, symbolCall, N> {
            self.call_builder(&symbolCall {})
        }
        ///Creates a new call builder for the [`totalSupply`] function.
        pub fn totalSupply(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, totalSupplyCall, N> {
            self.call_builder(&totalSupplyCall {})
        }
        ///Creates a new call builder for the [`transfer`] function.
        pub fn transfer(
            &self,
            to: alloy::sol_types::private::Address,
            value: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferCall, N> {
            self.call_builder(&transferCall { to, value })
        }
        ///Creates a new call builder for the [`transferFrom`] function.
        pub fn transferFrom(
            &self,
            from: alloy::sol_types::private::Address,
            to: alloy::sol_types::private::Address,
            value: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferFromCall, N> {
            self.call_builder(
                &transferFromCall {
                    from,
                    to,
                    value,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SyndicateTokenInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`Approval`] event.
        pub fn Approval_filter(&self) -> alloy_contract::Event<T, &P, Approval, N> {
            self.event_filter::<Approval>()
        }
        ///Creates a new event filter for the [`EIP712DomainChanged`] event.
        pub fn EIP712DomainChanged_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, EIP712DomainChanged, N> {
            self.event_filter::<EIP712DomainChanged>()
        }
        ///Creates a new event filter for the [`RoleAdminChanged`] event.
        pub fn RoleAdminChanged_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RoleAdminChanged, N> {
            self.event_filter::<RoleAdminChanged>()
        }
        ///Creates a new event filter for the [`RoleGranted`] event.
        pub fn RoleGranted_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RoleGranted, N> {
            self.event_filter::<RoleGranted>()
        }
        ///Creates a new event filter for the [`RoleRevoked`] event.
        pub fn RoleRevoked_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RoleRevoked, N> {
            self.event_filter::<RoleRevoked>()
        }
        ///Creates a new event filter for the [`Transfer`] event.
        pub fn Transfer_filter(&self) -> alloy_contract::Event<T, &P, Transfer, N> {
            self.event_filter::<Transfer>()
        }
    }
}
