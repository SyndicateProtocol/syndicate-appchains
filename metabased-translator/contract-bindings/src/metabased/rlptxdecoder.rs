/**

Generated by the following Solidity interface...
```solidity
interface RLPTxDecoder {
    function decodeTx(bytes memory rawTx) external pure returns (address);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "decodeTx",
    "inputs": [
      {
        "name": "rawTx",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "pure"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod RLPTxDecoder {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60808060405234601957610c46908161001e823930815050f35b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c63dae029d314610024575f80fd5b60203660031901126100b25760043567ffffffffffffffff81116100b257366023820112156100b25780600401359061005c8261011c565b61006960405191826100eb565b82815236602484840101116100b2575f6020846100ae95602461009496018386013783010152610465565b6040516001600160a01b0390911681529081906020820190565b0390f35b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b6040810190811067ffffffffffffffff8211176100e657604052565b6100b6565b90601f8019910116810190811067ffffffffffffffff8211176100e657604052565b6040519061011a826100ca565b565b67ffffffffffffffff81116100e657601f01601f191660200190565b1561013f57565b60405162461bcd60e51b815260206004820152600860248201526708adae0e8f240e8f60c31b6044820152606490fd5b634e487b7160e01b5f52603260045260245ffd5b8051156101905760200190565b61016f565b908151811015610190570160200190565b156101ad57565b60405162461bcd60e51b815260206004820152600c60248201526b4e6f74204549502d3135353960a01b6044820152606490fd5b634e487b7160e01b5f52601160045260245ffd5b5f1981019190821161020357565b6101e1565b60bf1981019190821161020357565b607f1981019190821161020357565b602003906020821161020357565b60f61981019190821161020357565b60b61981019190821161020357565b9190820391821161020357565b1561026657565b60405162461bcd60e51b815260206004820152600a602482015269092dcecc2d8d2c840e8f60b31b6044820152606490fd5b8051600110156101905760400190565b8051600210156101905760600190565b8051600310156101905760800190565b8051600410156101905760a00190565b8051600510156101905760c00190565b8051600610156101905760e00190565b805160071015610190576101000190565b805160081015610190576101200190565b805160091015610190576101400190565b8051600a1015610190576101600190565b8051600b1015610190576101800190565b80518210156101905760209160051b010190565b805191908290602001825e015f815290565b5f1981146102035760010190565b9061038b8261011c565b61039860405191826100eb565b82815280926103a9601f199161011c565b0190602036910137565b60f701908160f71161020357565b60c001908160c01161020357565b906001820180921161020357565b9190820180921161020357565b60f89190911b6001600160f81b0319168152610414929161040e9160010190610361565b90610361565b90565b600190610414939260ff60f81b9060f81b1681520190610361565b600160f91b815261041491600190910190610361565b60ff601b9116019060ff821161020357565b6040513d5f823e3d90fd5b908151151561047390610138565b6001600160f81b031991600160f91b8361048c83610183565b516001600160f81b03191616146104a2906101a6565b80516104ad906101f5565b6104b69161077a565b6104bf906107e3565b6104c890610828565b8051600c146104d69061025f565b6104df81610183565b516104e990610912565b926104f382610298565b516104fd90610912565b93610507836102a8565b5161051190610912565b61051a846102b8565b5161052490610912565b61052d856102c8565b5161053790610912565b610540866102d8565b5161054a90610912565b610553876102e8565b5161055d90610912565b91610567886102f8565b5161057190610912565b9361057b89610309565b5161058590610912565b956040519b8c9860208a0161059991610361565b6105a291610361565b6105ab91610361565b6105b491610361565b6105bd91610361565b6105c691610361565b6105cf91610361565b6105d891610361565b6105e191610361565b0390601f199182810186526105f690866100eb565b845160388110156106e1575050905f918461063d61062061061a60209798516103c1565b60ff1690565b610631604051938492898401610417565b038381018352826100eb565b905b61066060405191826106548882019586610432565b039081018352826100eb565b5190206106c961068361067e61061a6106788661031a565b5161093e565b610448565b926106a261069661069c6106968461032b565b51610980565b9261033c565b90604051948594859094939260ff6060936080840197845216602083015260408201520152565b838052039060015afa156106dc575f5190565b61045a565b90945f9582805b61076657506106f687610381565b925f905b888210610733575050509061072d5f94939261063161071e61061a6020999a6103b3565b916040519485938a85016103ea565b9061063f565b600190610748836107438c6101f5565b610252565b61075a858360f81b165f1a9188610195565b5360081c9101906106fa565b9661077090610373565b9660081c806106e8565b61078382610381565b915f5b8181106107935750505090565b6001810190818111610203576001916001600160f81b0319906107b69086610195565b51165f1a6107c48287610195565b5301610786565b604051906107d8826100ca565b5f6020838281520152565b6107eb6107cb565b506020815191604051926107fe846100ca565b835201602082015290565b156100b257565b67ffffffffffffffff81116100e65760051b60200190565b90610832826109f0565b156100b25761084082610a14565b9161084a83610810565b9061085860405192836100eb565b838252601f1961086785610810565b015f5b8181106108fb57505060208082019061088d825161088781610a75565b906103dd565b955f915b8183106108b4575050506104149293946108ac915190610252565b905114610809565b9091966108f2816108c6600193610ad8565b906108cf61010d565b82815281868201526108e18c8b61034d565b526108ec8b8a61034d565b506103dd565b97019190610891565b6020906109066107cb565b8282870101520161086a565b61091c8151610381565b9081511561093a578060206104149201519051908360200190610b67565b5090565b80518015159081610974575b50156100b25761095990610be4565b90519060208110610968575090565b6020036101000a900490565b6021915011155f61094a565b8051156100b2576109936109aa91610be4565b61099f81939293610381565b928360200190610b67565b60208151116109ba576020015190565b60405162461bcd60e51b815260206004820152600e60248201526d092dcecc2d8d2c840d8cadccee8d60931b6044820152606490fd5b805115610a0f57602060c0910151515f1a10610a0b57600190565b5f90565b505f90565b805115610a0f575f9060208101908151610a2d81610a75565b8101809111610203579151905181018091116102035791905b828110610a535750905090565b610a5c81610ad8565b810180911161020357610a6f9091610373565b90610a46565b515f1a6080811015610a8657505f90565b60b881108015610ac2575b15610a9c5750600190565b60c0811015610ab657610ab161041491610243565b6103cf565b610ab161041491610234565b5060c08110158015610a91575060f88110610a91565b80515f1a906080821015610aed575050600190565b60b8821015610b035750610ab161041491610217565b9060c0811015610b275760b51991600160b783602003016101000a91015104010190565b9060f8821015610b3e5750610ab161041491610208565b60010151602082900360f7016101000a90040160f5190190565b601f8111610203576101000a90565b929091928315610bde5792915b602093848410610ba95780518252848101809111610203579381018091116102035791601f1981019081116102035791610b74565b9193509180610bb757505050565b610bcb610bc6610bd092610226565b610b58565b6101f5565b905182518216911916179052565b50915050565b906020820191610bf48351610a75565b925190838201809211610203575192830392831161020357919056fea264697066735822122056d332aaaf3826d374b78e8e8fbc4a7c0c25fd93f973ab00cff75f90eb0bc1ad64736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80\x80`@R4`\x19Wa\x0CF\x90\x81a\0\x1E\x8290\x81PP\xF3[_\x80\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x11W_\x80\xFD[_5`\xE0\x1Cc\xDA\xE0)\xD3\x14a\0$W_\x80\xFD[` 6`\x03\x19\x01\x12a\0\xB2W`\x045g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\0\xB2W6`#\x82\x01\x12\x15a\0\xB2W\x80`\x04\x015\x90a\0\\\x82a\x01\x1CV[a\0i`@Q\x91\x82a\0\xEBV[\x82\x81R6`$\x84\x84\x01\x01\x11a\0\xB2W_` \x84a\0\xAE\x95`$a\0\x94\x96\x01\x83\x86\x017\x83\x01\x01Ra\x04eV[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R\x90\x81\x90` \x82\x01\x90V[\x03\x90\xF3[_\x80\xFD[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\0\xE6W`@RV[a\0\xB6V[\x90`\x1F\x80\x19\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\0\xE6W`@RV[`@Q\x90a\x01\x1A\x82a\0\xCAV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\0\xE6W`\x1F\x01`\x1F\x19\x16` \x01\x90V[\x15a\x01?WV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x08`$\x82\x01Rg\x08\xAD\xAE\x0E\x8F$\x0E\x8F`\xC3\x1B`D\x82\x01R`d\x90\xFD[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[\x80Q\x15a\x01\x90W` \x01\x90V[a\x01oV[\x90\x81Q\x81\x10\x15a\x01\x90W\x01` \x01\x90V[\x15a\x01\xADWV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0C`$\x82\x01RkNot EIP-1559`\xA0\x1B`D\x82\x01R`d\x90\xFD[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[_\x19\x81\x01\x91\x90\x82\x11a\x02\x03WV[a\x01\xE1V[`\xBF\x19\x81\x01\x91\x90\x82\x11a\x02\x03WV[`\x7F\x19\x81\x01\x91\x90\x82\x11a\x02\x03WV[` \x03\x90` \x82\x11a\x02\x03WV[`\xF6\x19\x81\x01\x91\x90\x82\x11a\x02\x03WV[`\xB6\x19\x81\x01\x91\x90\x82\x11a\x02\x03WV[\x91\x90\x82\x03\x91\x82\x11a\x02\x03WV[\x15a\x02fWV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\n`$\x82\x01Ri\t-\xCE\xCC-\x8D,\x84\x0E\x8F`\xB3\x1B`D\x82\x01R`d\x90\xFD[\x80Q`\x01\x10\x15a\x01\x90W`@\x01\x90V[\x80Q`\x02\x10\x15a\x01\x90W``\x01\x90V[\x80Q`\x03\x10\x15a\x01\x90W`\x80\x01\x90V[\x80Q`\x04\x10\x15a\x01\x90W`\xA0\x01\x90V[\x80Q`\x05\x10\x15a\x01\x90W`\xC0\x01\x90V[\x80Q`\x06\x10\x15a\x01\x90W`\xE0\x01\x90V[\x80Q`\x07\x10\x15a\x01\x90Wa\x01\0\x01\x90V[\x80Q`\x08\x10\x15a\x01\x90Wa\x01 \x01\x90V[\x80Q`\t\x10\x15a\x01\x90Wa\x01@\x01\x90V[\x80Q`\n\x10\x15a\x01\x90Wa\x01`\x01\x90V[\x80Q`\x0B\x10\x15a\x01\x90Wa\x01\x80\x01\x90V[\x80Q\x82\x10\x15a\x01\x90W` \x91`\x05\x1B\x01\x01\x90V[\x80Q\x91\x90\x82\x90` \x01\x82^\x01_\x81R\x90V[_\x19\x81\x14a\x02\x03W`\x01\x01\x90V[\x90a\x03\x8B\x82a\x01\x1CV[a\x03\x98`@Q\x91\x82a\0\xEBV[\x82\x81R\x80\x92a\x03\xA9`\x1F\x19\x91a\x01\x1CV[\x01\x90` 6\x91\x017V[`\xF7\x01\x90\x81`\xF7\x11a\x02\x03WV[`\xC0\x01\x90\x81`\xC0\x11a\x02\x03WV[\x90`\x01\x82\x01\x80\x92\x11a\x02\x03WV[\x91\x90\x82\x01\x80\x92\x11a\x02\x03WV[`\xF8\x91\x90\x91\x1B`\x01`\x01`\xF8\x1B\x03\x19\x16\x81Ra\x04\x14\x92\x91a\x04\x0E\x91`\x01\x01\x90a\x03aV[\x90a\x03aV[\x90V[`\x01\x90a\x04\x14\x93\x92`\xFF`\xF8\x1B\x90`\xF8\x1B\x16\x81R\x01\x90a\x03aV[`\x01`\xF9\x1B\x81Ra\x04\x14\x91`\x01\x90\x91\x01\x90a\x03aV[`\xFF`\x1B\x91\x16\x01\x90`\xFF\x82\x11a\x02\x03WV[`@Q=_\x82>=\x90\xFD[\x90\x81Q\x15\x15a\x04s\x90a\x018V[`\x01`\x01`\xF8\x1B\x03\x19\x91`\x01`\xF9\x1B\x83a\x04\x8C\x83a\x01\x83V[Q`\x01`\x01`\xF8\x1B\x03\x19\x16\x16\x14a\x04\xA2\x90a\x01\xA6V[\x80Qa\x04\xAD\x90a\x01\xF5V[a\x04\xB6\x91a\x07zV[a\x04\xBF\x90a\x07\xE3V[a\x04\xC8\x90a\x08(V[\x80Q`\x0C\x14a\x04\xD6\x90a\x02_V[a\x04\xDF\x81a\x01\x83V[Qa\x04\xE9\x90a\t\x12V[\x92a\x04\xF3\x82a\x02\x98V[Qa\x04\xFD\x90a\t\x12V[\x93a\x05\x07\x83a\x02\xA8V[Qa\x05\x11\x90a\t\x12V[a\x05\x1A\x84a\x02\xB8V[Qa\x05$\x90a\t\x12V[a\x05-\x85a\x02\xC8V[Qa\x057\x90a\t\x12V[a\x05@\x86a\x02\xD8V[Qa\x05J\x90a\t\x12V[a\x05S\x87a\x02\xE8V[Qa\x05]\x90a\t\x12V[\x91a\x05g\x88a\x02\xF8V[Qa\x05q\x90a\t\x12V[\x93a\x05{\x89a\x03\tV[Qa\x05\x85\x90a\t\x12V[\x95`@Q\x9B\x8C\x98` \x8A\x01a\x05\x99\x91a\x03aV[a\x05\xA2\x91a\x03aV[a\x05\xAB\x91a\x03aV[a\x05\xB4\x91a\x03aV[a\x05\xBD\x91a\x03aV[a\x05\xC6\x91a\x03aV[a\x05\xCF\x91a\x03aV[a\x05\xD8\x91a\x03aV[a\x05\xE1\x91a\x03aV[\x03\x90`\x1F\x19\x91\x82\x81\x01\x86Ra\x05\xF6\x90\x86a\0\xEBV[\x84Q`8\x81\x10\x15a\x06\xE1WPP\x90_\x91\x84a\x06=a\x06 a\x06\x1A` \x97\x98Qa\x03\xC1V[`\xFF\x16\x90V[a\x061`@Q\x93\x84\x92\x89\x84\x01a\x04\x17V[\x03\x83\x81\x01\x83R\x82a\0\xEBV[\x90[a\x06``@Q\x91\x82a\x06T\x88\x82\x01\x95\x86a\x042V[\x03\x90\x81\x01\x83R\x82a\0\xEBV[Q\x90 a\x06\xC9a\x06\x83a\x06~a\x06\x1Aa\x06x\x86a\x03\x1AV[Qa\t>V[a\x04HV[\x92a\x06\xA2a\x06\x96a\x06\x9Ca\x06\x96\x84a\x03+V[Qa\t\x80V[\x92a\x03<V[\x90`@Q\x94\x85\x94\x85\x90\x94\x93\x92`\xFF``\x93`\x80\x84\x01\x97\x84R\x16` \x83\x01R`@\x82\x01R\x01RV[\x83\x80R\x03\x90`\x01Z\xFA\x15a\x06\xDCW_Q\x90V[a\x04ZV[\x90\x94_\x95\x82\x80[a\x07fWPa\x06\xF6\x87a\x03\x81V[\x92_\x90[\x88\x82\x10a\x073WPPP\x90a\x07-_\x94\x93\x92a\x061a\x07\x1Ea\x06\x1A` \x99\x9Aa\x03\xB3V[\x91`@Q\x94\x85\x93\x8A\x85\x01a\x03\xEAV[\x90a\x06?V[`\x01\x90a\x07H\x83a\x07C\x8Ca\x01\xF5V[a\x02RV[a\x07Z\x85\x83`\xF8\x1B\x16_\x1A\x91\x88a\x01\x95V[S`\x08\x1C\x91\x01\x90a\x06\xFAV[\x96a\x07p\x90a\x03sV[\x96`\x08\x1C\x80a\x06\xE8V[a\x07\x83\x82a\x03\x81V[\x91_[\x81\x81\x10a\x07\x93WPPP\x90V[`\x01\x81\x01\x90\x81\x81\x11a\x02\x03W`\x01\x91`\x01`\x01`\xF8\x1B\x03\x19\x90a\x07\xB6\x90\x86a\x01\x95V[Q\x16_\x1Aa\x07\xC4\x82\x87a\x01\x95V[S\x01a\x07\x86V[`@Q\x90a\x07\xD8\x82a\0\xCAV[_` \x83\x82\x81R\x01RV[a\x07\xEBa\x07\xCBV[P` \x81Q\x91`@Q\x92a\x07\xFE\x84a\0\xCAV[\x83R\x01` \x82\x01R\x90V[\x15a\0\xB2WV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\0\xE6W`\x05\x1B` \x01\x90V[\x90a\x082\x82a\t\xF0V[\x15a\0\xB2Wa\x08@\x82a\n\x14V[\x91a\x08J\x83a\x08\x10V[\x90a\x08X`@Q\x92\x83a\0\xEBV[\x83\x82R`\x1F\x19a\x08g\x85a\x08\x10V[\x01_[\x81\x81\x10a\x08\xFBWPP` \x80\x82\x01\x90a\x08\x8D\x82Qa\x08\x87\x81a\nuV[\x90a\x03\xDDV[\x95_\x91[\x81\x83\x10a\x08\xB4WPPPa\x04\x14\x92\x93\x94a\x08\xAC\x91Q\x90a\x02RV[\x90Q\x14a\x08\tV[\x90\x91\x96a\x08\xF2\x81a\x08\xC6`\x01\x93a\n\xD8V[\x90a\x08\xCFa\x01\rV[\x82\x81R\x81\x86\x82\x01Ra\x08\xE1\x8C\x8Ba\x03MV[Ra\x08\xEC\x8B\x8Aa\x03MV[Pa\x03\xDDV[\x97\x01\x91\x90a\x08\x91V[` \x90a\t\x06a\x07\xCBV[\x82\x82\x87\x01\x01R\x01a\x08jV[a\t\x1C\x81Qa\x03\x81V[\x90\x81Q\x15a\t:W\x80` a\x04\x14\x92\x01Q\x90Q\x90\x83` \x01\x90a\x0BgV[P\x90V[\x80Q\x80\x15\x15\x90\x81a\ttW[P\x15a\0\xB2Wa\tY\x90a\x0B\xE4V[\x90Q\x90` \x81\x10a\thWP\x90V[` \x03a\x01\0\n\x90\x04\x90V[`!\x91P\x11\x15_a\tJV[\x80Q\x15a\0\xB2Wa\t\x93a\t\xAA\x91a\x0B\xE4V[a\t\x9F\x81\x93\x92\x93a\x03\x81V[\x92\x83` \x01\x90a\x0BgV[` \x81Q\x11a\t\xBAW` \x01Q\x90V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0E`$\x82\x01Rm\t-\xCE\xCC-\x8D,\x84\r\x8C\xAD\xCC\xEE\x8D`\x93\x1B`D\x82\x01R`d\x90\xFD[\x80Q\x15a\n\x0FW` `\xC0\x91\x01QQ_\x1A\x10a\n\x0BW`\x01\x90V[_\x90V[P_\x90V[\x80Q\x15a\n\x0FW_\x90` \x81\x01\x90\x81Qa\n-\x81a\nuV[\x81\x01\x80\x91\x11a\x02\x03W\x91Q\x90Q\x81\x01\x80\x91\x11a\x02\x03W\x91\x90[\x82\x81\x10a\nSWP\x90P\x90V[a\n\\\x81a\n\xD8V[\x81\x01\x80\x91\x11a\x02\x03Wa\no\x90\x91a\x03sV[\x90a\nFV[Q_\x1A`\x80\x81\x10\x15a\n\x86WP_\x90V[`\xB8\x81\x10\x80\x15a\n\xC2W[\x15a\n\x9CWP`\x01\x90V[`\xC0\x81\x10\x15a\n\xB6Wa\n\xB1a\x04\x14\x91a\x02CV[a\x03\xCFV[a\n\xB1a\x04\x14\x91a\x024V[P`\xC0\x81\x10\x15\x80\x15a\n\x91WP`\xF8\x81\x10a\n\x91V[\x80Q_\x1A\x90`\x80\x82\x10\x15a\n\xEDWPP`\x01\x90V[`\xB8\x82\x10\x15a\x0B\x03WPa\n\xB1a\x04\x14\x91a\x02\x17V[\x90`\xC0\x81\x10\x15a\x0B'W`\xB5\x19\x91`\x01`\xB7\x83` \x03\x01a\x01\0\n\x91\x01Q\x04\x01\x01\x90V[\x90`\xF8\x82\x10\x15a\x0B>WPa\n\xB1a\x04\x14\x91a\x02\x08V[`\x01\x01Q` \x82\x90\x03`\xF7\x01a\x01\0\n\x90\x04\x01`\xF5\x19\x01\x90V[`\x1F\x81\x11a\x02\x03Wa\x01\0\n\x90V[\x92\x90\x91\x92\x83\x15a\x0B\xDEW\x92\x91[` \x93\x84\x84\x10a\x0B\xA9W\x80Q\x82R\x84\x81\x01\x80\x91\x11a\x02\x03W\x93\x81\x01\x80\x91\x11a\x02\x03W\x91`\x1F\x19\x81\x01\x90\x81\x11a\x02\x03W\x91a\x0BtV[\x91\x93P\x91\x80a\x0B\xB7WPPPV[a\x0B\xCBa\x0B\xC6a\x0B\xD0\x92a\x02&V[a\x0BXV[a\x01\xF5V[\x90Q\x82Q\x82\x16\x91\x19\x16\x17\x90RV[P\x91PPV[\x90` \x82\x01\x91a\x0B\xF4\x83Qa\nuV[\x92Q\x90\x83\x82\x01\x80\x92\x11a\x02\x03WQ\x92\x83\x03\x92\x83\x11a\x02\x03W\x91\x90V\xFE\xA2dipfsX\"\x12 V\xD32\xAA\xAF8&\xD3t\xB7\x8E\x8E\x8F\xBCJ|\x0C%\xFD\x93\xF9s\xAB\0\xCF\xF7_\x90\xEB\x0B\xC1\xADdsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610011575f80fd5b5f3560e01c63dae029d314610024575f80fd5b60203660031901126100b25760043567ffffffffffffffff81116100b257366023820112156100b25780600401359061005c8261011c565b61006960405191826100eb565b82815236602484840101116100b2575f6020846100ae95602461009496018386013783010152610465565b6040516001600160a01b0390911681529081906020820190565b0390f35b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b6040810190811067ffffffffffffffff8211176100e657604052565b6100b6565b90601f8019910116810190811067ffffffffffffffff8211176100e657604052565b6040519061011a826100ca565b565b67ffffffffffffffff81116100e657601f01601f191660200190565b1561013f57565b60405162461bcd60e51b815260206004820152600860248201526708adae0e8f240e8f60c31b6044820152606490fd5b634e487b7160e01b5f52603260045260245ffd5b8051156101905760200190565b61016f565b908151811015610190570160200190565b156101ad57565b60405162461bcd60e51b815260206004820152600c60248201526b4e6f74204549502d3135353960a01b6044820152606490fd5b634e487b7160e01b5f52601160045260245ffd5b5f1981019190821161020357565b6101e1565b60bf1981019190821161020357565b607f1981019190821161020357565b602003906020821161020357565b60f61981019190821161020357565b60b61981019190821161020357565b9190820391821161020357565b1561026657565b60405162461bcd60e51b815260206004820152600a602482015269092dcecc2d8d2c840e8f60b31b6044820152606490fd5b8051600110156101905760400190565b8051600210156101905760600190565b8051600310156101905760800190565b8051600410156101905760a00190565b8051600510156101905760c00190565b8051600610156101905760e00190565b805160071015610190576101000190565b805160081015610190576101200190565b805160091015610190576101400190565b8051600a1015610190576101600190565b8051600b1015610190576101800190565b80518210156101905760209160051b010190565b805191908290602001825e015f815290565b5f1981146102035760010190565b9061038b8261011c565b61039860405191826100eb565b82815280926103a9601f199161011c565b0190602036910137565b60f701908160f71161020357565b60c001908160c01161020357565b906001820180921161020357565b9190820180921161020357565b60f89190911b6001600160f81b0319168152610414929161040e9160010190610361565b90610361565b90565b600190610414939260ff60f81b9060f81b1681520190610361565b600160f91b815261041491600190910190610361565b60ff601b9116019060ff821161020357565b6040513d5f823e3d90fd5b908151151561047390610138565b6001600160f81b031991600160f91b8361048c83610183565b516001600160f81b03191616146104a2906101a6565b80516104ad906101f5565b6104b69161077a565b6104bf906107e3565b6104c890610828565b8051600c146104d69061025f565b6104df81610183565b516104e990610912565b926104f382610298565b516104fd90610912565b93610507836102a8565b5161051190610912565b61051a846102b8565b5161052490610912565b61052d856102c8565b5161053790610912565b610540866102d8565b5161054a90610912565b610553876102e8565b5161055d90610912565b91610567886102f8565b5161057190610912565b9361057b89610309565b5161058590610912565b956040519b8c9860208a0161059991610361565b6105a291610361565b6105ab91610361565b6105b491610361565b6105bd91610361565b6105c691610361565b6105cf91610361565b6105d891610361565b6105e191610361565b0390601f199182810186526105f690866100eb565b845160388110156106e1575050905f918461063d61062061061a60209798516103c1565b60ff1690565b610631604051938492898401610417565b038381018352826100eb565b905b61066060405191826106548882019586610432565b039081018352826100eb565b5190206106c961068361067e61061a6106788661031a565b5161093e565b610448565b926106a261069661069c6106968461032b565b51610980565b9261033c565b90604051948594859094939260ff6060936080840197845216602083015260408201520152565b838052039060015afa156106dc575f5190565b61045a565b90945f9582805b61076657506106f687610381565b925f905b888210610733575050509061072d5f94939261063161071e61061a6020999a6103b3565b916040519485938a85016103ea565b9061063f565b600190610748836107438c6101f5565b610252565b61075a858360f81b165f1a9188610195565b5360081c9101906106fa565b9661077090610373565b9660081c806106e8565b61078382610381565b915f5b8181106107935750505090565b6001810190818111610203576001916001600160f81b0319906107b69086610195565b51165f1a6107c48287610195565b5301610786565b604051906107d8826100ca565b5f6020838281520152565b6107eb6107cb565b506020815191604051926107fe846100ca565b835201602082015290565b156100b257565b67ffffffffffffffff81116100e65760051b60200190565b90610832826109f0565b156100b25761084082610a14565b9161084a83610810565b9061085860405192836100eb565b838252601f1961086785610810565b015f5b8181106108fb57505060208082019061088d825161088781610a75565b906103dd565b955f915b8183106108b4575050506104149293946108ac915190610252565b905114610809565b9091966108f2816108c6600193610ad8565b906108cf61010d565b82815281868201526108e18c8b61034d565b526108ec8b8a61034d565b506103dd565b97019190610891565b6020906109066107cb565b8282870101520161086a565b61091c8151610381565b9081511561093a578060206104149201519051908360200190610b67565b5090565b80518015159081610974575b50156100b25761095990610be4565b90519060208110610968575090565b6020036101000a900490565b6021915011155f61094a565b8051156100b2576109936109aa91610be4565b61099f81939293610381565b928360200190610b67565b60208151116109ba576020015190565b60405162461bcd60e51b815260206004820152600e60248201526d092dcecc2d8d2c840d8cadccee8d60931b6044820152606490fd5b805115610a0f57602060c0910151515f1a10610a0b57600190565b5f90565b505f90565b805115610a0f575f9060208101908151610a2d81610a75565b8101809111610203579151905181018091116102035791905b828110610a535750905090565b610a5c81610ad8565b810180911161020357610a6f9091610373565b90610a46565b515f1a6080811015610a8657505f90565b60b881108015610ac2575b15610a9c5750600190565b60c0811015610ab657610ab161041491610243565b6103cf565b610ab161041491610234565b5060c08110158015610a91575060f88110610a91565b80515f1a906080821015610aed575050600190565b60b8821015610b035750610ab161041491610217565b9060c0811015610b275760b51991600160b783602003016101000a91015104010190565b9060f8821015610b3e5750610ab161041491610208565b60010151602082900360f7016101000a90040160f5190190565b601f8111610203576101000a90565b929091928315610bde5792915b602093848410610ba95780518252848101809111610203579381018091116102035791601f1981019081116102035791610b74565b9193509180610bb757505050565b610bcb610bc6610bd092610226565b610b58565b6101f5565b905182518216911916179052565b50915050565b906020820191610bf48351610a75565b925190838201809211610203575192830392831161020357919056fea264697066735822122056d332aaaf3826d374b78e8e8fbc4a7c0c25fd93f973ab00cff75f90eb0bc1ad64736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x11W_\x80\xFD[_5`\xE0\x1Cc\xDA\xE0)\xD3\x14a\0$W_\x80\xFD[` 6`\x03\x19\x01\x12a\0\xB2W`\x045g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\0\xB2W6`#\x82\x01\x12\x15a\0\xB2W\x80`\x04\x015\x90a\0\\\x82a\x01\x1CV[a\0i`@Q\x91\x82a\0\xEBV[\x82\x81R6`$\x84\x84\x01\x01\x11a\0\xB2W_` \x84a\0\xAE\x95`$a\0\x94\x96\x01\x83\x86\x017\x83\x01\x01Ra\x04eV[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R\x90\x81\x90` \x82\x01\x90V[\x03\x90\xF3[_\x80\xFD[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\0\xE6W`@RV[a\0\xB6V[\x90`\x1F\x80\x19\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\0\xE6W`@RV[`@Q\x90a\x01\x1A\x82a\0\xCAV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\0\xE6W`\x1F\x01`\x1F\x19\x16` \x01\x90V[\x15a\x01?WV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x08`$\x82\x01Rg\x08\xAD\xAE\x0E\x8F$\x0E\x8F`\xC3\x1B`D\x82\x01R`d\x90\xFD[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[\x80Q\x15a\x01\x90W` \x01\x90V[a\x01oV[\x90\x81Q\x81\x10\x15a\x01\x90W\x01` \x01\x90V[\x15a\x01\xADWV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0C`$\x82\x01RkNot EIP-1559`\xA0\x1B`D\x82\x01R`d\x90\xFD[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[_\x19\x81\x01\x91\x90\x82\x11a\x02\x03WV[a\x01\xE1V[`\xBF\x19\x81\x01\x91\x90\x82\x11a\x02\x03WV[`\x7F\x19\x81\x01\x91\x90\x82\x11a\x02\x03WV[` \x03\x90` \x82\x11a\x02\x03WV[`\xF6\x19\x81\x01\x91\x90\x82\x11a\x02\x03WV[`\xB6\x19\x81\x01\x91\x90\x82\x11a\x02\x03WV[\x91\x90\x82\x03\x91\x82\x11a\x02\x03WV[\x15a\x02fWV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\n`$\x82\x01Ri\t-\xCE\xCC-\x8D,\x84\x0E\x8F`\xB3\x1B`D\x82\x01R`d\x90\xFD[\x80Q`\x01\x10\x15a\x01\x90W`@\x01\x90V[\x80Q`\x02\x10\x15a\x01\x90W``\x01\x90V[\x80Q`\x03\x10\x15a\x01\x90W`\x80\x01\x90V[\x80Q`\x04\x10\x15a\x01\x90W`\xA0\x01\x90V[\x80Q`\x05\x10\x15a\x01\x90W`\xC0\x01\x90V[\x80Q`\x06\x10\x15a\x01\x90W`\xE0\x01\x90V[\x80Q`\x07\x10\x15a\x01\x90Wa\x01\0\x01\x90V[\x80Q`\x08\x10\x15a\x01\x90Wa\x01 \x01\x90V[\x80Q`\t\x10\x15a\x01\x90Wa\x01@\x01\x90V[\x80Q`\n\x10\x15a\x01\x90Wa\x01`\x01\x90V[\x80Q`\x0B\x10\x15a\x01\x90Wa\x01\x80\x01\x90V[\x80Q\x82\x10\x15a\x01\x90W` \x91`\x05\x1B\x01\x01\x90V[\x80Q\x91\x90\x82\x90` \x01\x82^\x01_\x81R\x90V[_\x19\x81\x14a\x02\x03W`\x01\x01\x90V[\x90a\x03\x8B\x82a\x01\x1CV[a\x03\x98`@Q\x91\x82a\0\xEBV[\x82\x81R\x80\x92a\x03\xA9`\x1F\x19\x91a\x01\x1CV[\x01\x90` 6\x91\x017V[`\xF7\x01\x90\x81`\xF7\x11a\x02\x03WV[`\xC0\x01\x90\x81`\xC0\x11a\x02\x03WV[\x90`\x01\x82\x01\x80\x92\x11a\x02\x03WV[\x91\x90\x82\x01\x80\x92\x11a\x02\x03WV[`\xF8\x91\x90\x91\x1B`\x01`\x01`\xF8\x1B\x03\x19\x16\x81Ra\x04\x14\x92\x91a\x04\x0E\x91`\x01\x01\x90a\x03aV[\x90a\x03aV[\x90V[`\x01\x90a\x04\x14\x93\x92`\xFF`\xF8\x1B\x90`\xF8\x1B\x16\x81R\x01\x90a\x03aV[`\x01`\xF9\x1B\x81Ra\x04\x14\x91`\x01\x90\x91\x01\x90a\x03aV[`\xFF`\x1B\x91\x16\x01\x90`\xFF\x82\x11a\x02\x03WV[`@Q=_\x82>=\x90\xFD[\x90\x81Q\x15\x15a\x04s\x90a\x018V[`\x01`\x01`\xF8\x1B\x03\x19\x91`\x01`\xF9\x1B\x83a\x04\x8C\x83a\x01\x83V[Q`\x01`\x01`\xF8\x1B\x03\x19\x16\x16\x14a\x04\xA2\x90a\x01\xA6V[\x80Qa\x04\xAD\x90a\x01\xF5V[a\x04\xB6\x91a\x07zV[a\x04\xBF\x90a\x07\xE3V[a\x04\xC8\x90a\x08(V[\x80Q`\x0C\x14a\x04\xD6\x90a\x02_V[a\x04\xDF\x81a\x01\x83V[Qa\x04\xE9\x90a\t\x12V[\x92a\x04\xF3\x82a\x02\x98V[Qa\x04\xFD\x90a\t\x12V[\x93a\x05\x07\x83a\x02\xA8V[Qa\x05\x11\x90a\t\x12V[a\x05\x1A\x84a\x02\xB8V[Qa\x05$\x90a\t\x12V[a\x05-\x85a\x02\xC8V[Qa\x057\x90a\t\x12V[a\x05@\x86a\x02\xD8V[Qa\x05J\x90a\t\x12V[a\x05S\x87a\x02\xE8V[Qa\x05]\x90a\t\x12V[\x91a\x05g\x88a\x02\xF8V[Qa\x05q\x90a\t\x12V[\x93a\x05{\x89a\x03\tV[Qa\x05\x85\x90a\t\x12V[\x95`@Q\x9B\x8C\x98` \x8A\x01a\x05\x99\x91a\x03aV[a\x05\xA2\x91a\x03aV[a\x05\xAB\x91a\x03aV[a\x05\xB4\x91a\x03aV[a\x05\xBD\x91a\x03aV[a\x05\xC6\x91a\x03aV[a\x05\xCF\x91a\x03aV[a\x05\xD8\x91a\x03aV[a\x05\xE1\x91a\x03aV[\x03\x90`\x1F\x19\x91\x82\x81\x01\x86Ra\x05\xF6\x90\x86a\0\xEBV[\x84Q`8\x81\x10\x15a\x06\xE1WPP\x90_\x91\x84a\x06=a\x06 a\x06\x1A` \x97\x98Qa\x03\xC1V[`\xFF\x16\x90V[a\x061`@Q\x93\x84\x92\x89\x84\x01a\x04\x17V[\x03\x83\x81\x01\x83R\x82a\0\xEBV[\x90[a\x06``@Q\x91\x82a\x06T\x88\x82\x01\x95\x86a\x042V[\x03\x90\x81\x01\x83R\x82a\0\xEBV[Q\x90 a\x06\xC9a\x06\x83a\x06~a\x06\x1Aa\x06x\x86a\x03\x1AV[Qa\t>V[a\x04HV[\x92a\x06\xA2a\x06\x96a\x06\x9Ca\x06\x96\x84a\x03+V[Qa\t\x80V[\x92a\x03<V[\x90`@Q\x94\x85\x94\x85\x90\x94\x93\x92`\xFF``\x93`\x80\x84\x01\x97\x84R\x16` \x83\x01R`@\x82\x01R\x01RV[\x83\x80R\x03\x90`\x01Z\xFA\x15a\x06\xDCW_Q\x90V[a\x04ZV[\x90\x94_\x95\x82\x80[a\x07fWPa\x06\xF6\x87a\x03\x81V[\x92_\x90[\x88\x82\x10a\x073WPPP\x90a\x07-_\x94\x93\x92a\x061a\x07\x1Ea\x06\x1A` \x99\x9Aa\x03\xB3V[\x91`@Q\x94\x85\x93\x8A\x85\x01a\x03\xEAV[\x90a\x06?V[`\x01\x90a\x07H\x83a\x07C\x8Ca\x01\xF5V[a\x02RV[a\x07Z\x85\x83`\xF8\x1B\x16_\x1A\x91\x88a\x01\x95V[S`\x08\x1C\x91\x01\x90a\x06\xFAV[\x96a\x07p\x90a\x03sV[\x96`\x08\x1C\x80a\x06\xE8V[a\x07\x83\x82a\x03\x81V[\x91_[\x81\x81\x10a\x07\x93WPPP\x90V[`\x01\x81\x01\x90\x81\x81\x11a\x02\x03W`\x01\x91`\x01`\x01`\xF8\x1B\x03\x19\x90a\x07\xB6\x90\x86a\x01\x95V[Q\x16_\x1Aa\x07\xC4\x82\x87a\x01\x95V[S\x01a\x07\x86V[`@Q\x90a\x07\xD8\x82a\0\xCAV[_` \x83\x82\x81R\x01RV[a\x07\xEBa\x07\xCBV[P` \x81Q\x91`@Q\x92a\x07\xFE\x84a\0\xCAV[\x83R\x01` \x82\x01R\x90V[\x15a\0\xB2WV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\0\xE6W`\x05\x1B` \x01\x90V[\x90a\x082\x82a\t\xF0V[\x15a\0\xB2Wa\x08@\x82a\n\x14V[\x91a\x08J\x83a\x08\x10V[\x90a\x08X`@Q\x92\x83a\0\xEBV[\x83\x82R`\x1F\x19a\x08g\x85a\x08\x10V[\x01_[\x81\x81\x10a\x08\xFBWPP` \x80\x82\x01\x90a\x08\x8D\x82Qa\x08\x87\x81a\nuV[\x90a\x03\xDDV[\x95_\x91[\x81\x83\x10a\x08\xB4WPPPa\x04\x14\x92\x93\x94a\x08\xAC\x91Q\x90a\x02RV[\x90Q\x14a\x08\tV[\x90\x91\x96a\x08\xF2\x81a\x08\xC6`\x01\x93a\n\xD8V[\x90a\x08\xCFa\x01\rV[\x82\x81R\x81\x86\x82\x01Ra\x08\xE1\x8C\x8Ba\x03MV[Ra\x08\xEC\x8B\x8Aa\x03MV[Pa\x03\xDDV[\x97\x01\x91\x90a\x08\x91V[` \x90a\t\x06a\x07\xCBV[\x82\x82\x87\x01\x01R\x01a\x08jV[a\t\x1C\x81Qa\x03\x81V[\x90\x81Q\x15a\t:W\x80` a\x04\x14\x92\x01Q\x90Q\x90\x83` \x01\x90a\x0BgV[P\x90V[\x80Q\x80\x15\x15\x90\x81a\ttW[P\x15a\0\xB2Wa\tY\x90a\x0B\xE4V[\x90Q\x90` \x81\x10a\thWP\x90V[` \x03a\x01\0\n\x90\x04\x90V[`!\x91P\x11\x15_a\tJV[\x80Q\x15a\0\xB2Wa\t\x93a\t\xAA\x91a\x0B\xE4V[a\t\x9F\x81\x93\x92\x93a\x03\x81V[\x92\x83` \x01\x90a\x0BgV[` \x81Q\x11a\t\xBAW` \x01Q\x90V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0E`$\x82\x01Rm\t-\xCE\xCC-\x8D,\x84\r\x8C\xAD\xCC\xEE\x8D`\x93\x1B`D\x82\x01R`d\x90\xFD[\x80Q\x15a\n\x0FW` `\xC0\x91\x01QQ_\x1A\x10a\n\x0BW`\x01\x90V[_\x90V[P_\x90V[\x80Q\x15a\n\x0FW_\x90` \x81\x01\x90\x81Qa\n-\x81a\nuV[\x81\x01\x80\x91\x11a\x02\x03W\x91Q\x90Q\x81\x01\x80\x91\x11a\x02\x03W\x91\x90[\x82\x81\x10a\nSWP\x90P\x90V[a\n\\\x81a\n\xD8V[\x81\x01\x80\x91\x11a\x02\x03Wa\no\x90\x91a\x03sV[\x90a\nFV[Q_\x1A`\x80\x81\x10\x15a\n\x86WP_\x90V[`\xB8\x81\x10\x80\x15a\n\xC2W[\x15a\n\x9CWP`\x01\x90V[`\xC0\x81\x10\x15a\n\xB6Wa\n\xB1a\x04\x14\x91a\x02CV[a\x03\xCFV[a\n\xB1a\x04\x14\x91a\x024V[P`\xC0\x81\x10\x15\x80\x15a\n\x91WP`\xF8\x81\x10a\n\x91V[\x80Q_\x1A\x90`\x80\x82\x10\x15a\n\xEDWPP`\x01\x90V[`\xB8\x82\x10\x15a\x0B\x03WPa\n\xB1a\x04\x14\x91a\x02\x17V[\x90`\xC0\x81\x10\x15a\x0B'W`\xB5\x19\x91`\x01`\xB7\x83` \x03\x01a\x01\0\n\x91\x01Q\x04\x01\x01\x90V[\x90`\xF8\x82\x10\x15a\x0B>WPa\n\xB1a\x04\x14\x91a\x02\x08V[`\x01\x01Q` \x82\x90\x03`\xF7\x01a\x01\0\n\x90\x04\x01`\xF5\x19\x01\x90V[`\x1F\x81\x11a\x02\x03Wa\x01\0\n\x90V[\x92\x90\x91\x92\x83\x15a\x0B\xDEW\x92\x91[` \x93\x84\x84\x10a\x0B\xA9W\x80Q\x82R\x84\x81\x01\x80\x91\x11a\x02\x03W\x93\x81\x01\x80\x91\x11a\x02\x03W\x91`\x1F\x19\x81\x01\x90\x81\x11a\x02\x03W\x91a\x0BtV[\x91\x93P\x91\x80a\x0B\xB7WPPPV[a\x0B\xCBa\x0B\xC6a\x0B\xD0\x92a\x02&V[a\x0BXV[a\x01\xF5V[\x90Q\x82Q\x82\x16\x91\x19\x16\x17\x90RV[P\x91PPV[\x90` \x82\x01\x91a\x0B\xF4\x83Qa\nuV[\x92Q\x90\x83\x82\x01\x80\x92\x11a\x02\x03WQ\x92\x83\x03\x92\x83\x11a\x02\x03W\x91\x90V\xFE\xA2dipfsX\"\x12 V\xD32\xAA\xAF8&\xD3t\xB7\x8E\x8E\x8F\xBCJ|\x0C%\xFD\x93\xF9s\xAB\0\xCF\xF7_\x90\xEB\x0B\xC1\xADdsolcC\0\x08\x19\x003",
    );
    /**Function with signature `decodeTx(bytes)` and selector `0xdae029d3`.
```solidity
function decodeTx(bytes memory rawTx) external pure returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct decodeTxCall {
        pub rawTx: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`decodeTx(bytes)`](decodeTxCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct decodeTxReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<decodeTxCall> for UnderlyingRustTuple<'_> {
                fn from(value: decodeTxCall) -> Self {
                    (value.rawTx,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for decodeTxCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { rawTx: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<decodeTxReturn> for UnderlyingRustTuple<'_> {
                fn from(value: decodeTxReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for decodeTxReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for decodeTxCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = decodeTxReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "decodeTx(bytes)";
            const SELECTOR: [u8; 4] = [218u8, 224u8, 41u8, 211u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.rawTx,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`RLPTxDecoder`](self) function calls.
    pub enum RLPTxDecoderCalls {
        decodeTx(decodeTxCall),
    }
    #[automatically_derived]
    impl RLPTxDecoderCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[[218u8, 224u8, 41u8, 211u8]];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for RLPTxDecoderCalls {
        const NAME: &'static str = "RLPTxDecoderCalls";
        const MIN_DATA_LENGTH: usize = 64usize;
        const COUNT: usize = 1usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::decodeTx(_) => <decodeTxCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<RLPTxDecoderCalls>] = &[
                {
                    fn decodeTx(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RLPTxDecoderCalls> {
                        <decodeTxCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RLPTxDecoderCalls::decodeTx)
                    }
                    decodeTx
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::decodeTx(inner) => {
                    <decodeTxCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::decodeTx(inner) => {
                    <decodeTxCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`RLPTxDecoder`](self) contract instance.

See the [wrapper's documentation](`RLPTxDecoderInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> RLPTxDecoderInstance<T, P, N> {
        RLPTxDecoderInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<RLPTxDecoderInstance<T, P, N>>,
    > {
        RLPTxDecoderInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        RLPTxDecoderInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`RLPTxDecoder`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`RLPTxDecoder`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct RLPTxDecoderInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for RLPTxDecoderInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("RLPTxDecoderInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > RLPTxDecoderInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`RLPTxDecoder`](self) contract instance.

See the [wrapper's documentation](`RLPTxDecoderInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<RLPTxDecoderInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> RLPTxDecoderInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> RLPTxDecoderInstance<T, P, N> {
            RLPTxDecoderInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > RLPTxDecoderInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`decodeTx`] function.
        pub fn decodeTx(
            &self,
            rawTx: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, decodeTxCall, N> {
            self.call_builder(&decodeTxCall { rawTx })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > RLPTxDecoderInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
