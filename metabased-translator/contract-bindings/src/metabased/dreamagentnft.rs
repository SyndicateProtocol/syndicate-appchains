/**

Generated by the following Solidity interface...
```solidity
interface DreamAgentNFT {
    error AccessControlBadConfirmation();
    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);
    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);
    error ERC721InsufficientApproval(address operator, uint256 tokenId);
    error ERC721InvalidApprover(address approver);
    error ERC721InvalidOperator(address operator);
    error ERC721InvalidOwner(address owner);
    error ERC721InvalidReceiver(address receiver);
    error ERC721InvalidSender(address sender);
    error ERC721NonexistentToken(uint256 tokenId);

    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

    constructor(address defaultAdmin, address minter);

    function DEFAULT_ADMIN_ROLE() external view returns (bytes32);
    function MINTER_ROLE() external view returns (bytes32);
    function approve(address to, uint256 tokenId) external;
    function balanceOf(address owner) external view returns (uint256);
    function baseAgentNFTURI() external view returns (string memory);
    function getApproved(uint256 tokenId) external view returns (address);
    function getRoleAdmin(bytes32 role) external view returns (bytes32);
    function grantRole(bytes32 role, address account) external;
    function hasRole(bytes32 role, address account) external view returns (bool);
    function isApprovedForAll(address owner, address operator) external view returns (bool);
    function name() external view returns (string memory);
    function ownerOf(uint256 tokenId) external view returns (address);
    function renounceRole(bytes32 role, address callerConfirmation) external;
    function revokeRole(bytes32 role, address account) external;
    function safeMint(address to) external;
    function safeTransferFrom(address from, address to, uint256 tokenId) external;
    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) external;
    function setApprovalForAll(address operator, bool approved) external;
    function setBaseAgentNFTURI(string memory newBaseAgentNFTURI) external;
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
    function symbol() external view returns (string memory);
    function tokenURI(uint256 tokenId) external view returns (string memory);
    function transferFrom(address from, address to, uint256 tokenId) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "defaultAdmin",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "minter",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "DEFAULT_ADMIN_ROLE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "MINTER_ROLE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "approve",
    "inputs": [
      {
        "name": "to",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "tokenId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "balanceOf",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "baseAgentNFTURI",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getApproved",
    "inputs": [
      {
        "name": "tokenId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getRoleAdmin",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "grantRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "hasRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isApprovedForAll",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "operator",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "name",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "ownerOf",
    "inputs": [
      {
        "name": "tokenId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "renounceRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "callerConfirmation",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "revokeRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "safeMint",
    "inputs": [
      {
        "name": "to",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "safeTransferFrom",
    "inputs": [
      {
        "name": "from",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "to",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "tokenId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "safeTransferFrom",
    "inputs": [
      {
        "name": "from",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "to",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "tokenId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setApprovalForAll",
    "inputs": [
      {
        "name": "operator",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "approved",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setBaseAgentNFTURI",
    "inputs": [
      {
        "name": "newBaseAgentNFTURI",
        "type": "string",
        "internalType": "string"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "supportsInterface",
    "inputs": [
      {
        "name": "interfaceId",
        "type": "bytes4",
        "internalType": "bytes4"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "symbol",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "tokenURI",
    "inputs": [
      {
        "name": "tokenId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "transferFrom",
    "inputs": [
      {
        "name": "from",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "to",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "tokenId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "Approval",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "approved",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "tokenId",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "ApprovalForAll",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "operator",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "approved",
        "type": "bool",
        "indexed": false,
        "internalType": "bool"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleAdminChanged",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "previousAdminRole",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "newAdminRole",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleGranted",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleRevoked",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Transfer",
    "inputs": [
      {
        "name": "from",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "to",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "tokenId",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AccessControlBadConfirmation",
    "inputs": []
  },
  {
    "type": "error",
    "name": "AccessControlUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "neededRole",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC721IncorrectOwner",
    "inputs": [
      {
        "name": "sender",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "tokenId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC721InsufficientApproval",
    "inputs": [
      {
        "name": "operator",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "tokenId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC721InvalidApprover",
    "inputs": [
      {
        "name": "approver",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC721InvalidOperator",
    "inputs": [
      {
        "name": "operator",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC721InvalidOwner",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC721InvalidReceiver",
    "inputs": [
      {
        "name": "receiver",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC721InvalidSender",
    "inputs": [
      {
        "name": "sender",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC721NonexistentToken",
    "inputs": [
      {
        "name": "tokenId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod DreamAgentNFT {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052346100305761001a610014610104565b9061024b565b610022610035565b61280e6106d7823961280e90f35b61003b565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906100679061003f565b810190811060018060401b0382111761007f57604052565b610049565b90610097610090610035565b928361005d565b565b5f80fd5b60018060a01b031690565b6100b19061009d565b90565b6100bd816100a8565b036100c457565b5f80fd5b905051906100d5826100b4565b565b91906040838203126100ff57806100f36100fc925f86016100c8565b936020016100c8565b90565b610099565b610122612ee58038038061011781610084565b9283398101906100d7565b9091565b60018060401b0381116101425761013e60209161003f565b0190565b610049565b9061015961015483610126565b610084565b918252565b5f7f447265616d4167656e744e465400000000000000000000000000000000000000910152565b61018f600d610147565b9061019c6020830161015e565b565b6101a6610185565b90565b5f7f445245414d000000000000000000000000000000000000000000000000000000910152565b6101da6005610147565b906101e7602083016101a9565b565b6101f16101d0565b90565b90565b90565b5f1b90565b61021361020e610218926101f4565b6101fa565b6101f7565b90565b6102245f6101ff565b90565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a690565b906102796102879261026c61025e61019e565b6102666101e9565b9061028a565b61027461021b565b6105c3565b50610282610227565b6105c3565b50565b90610294916104ed565b565b5190565b634e487b7160e01b5f52602260045260245ffd5b90600160028304921680156102ce575b60208310146102c957565b61029a565b91607f16916102be565b5f5260205f2090565b601f602091010490565b1b90565b9190600861030a9102916103045f19846102eb565b926102eb565b9181191691161790565b90565b90565b61032e61032961033392610314565b610317565b610314565b90565b90565b919061034f61034a6103579361031a565b610336565b9083546102ef565b9055565b5f90565b6103719161036b61035b565b91610339565b565b5b81811061037f575050565b8061038c5f60019361035f565b01610374565b9190601f81116103a2575b505050565b6103ae6103d3936102d8565b9060206103ba846102e1565b830193106103db575b6103cc906102e1565b0190610373565b5f808061039d565b91506103cc819290506103c3565b1c90565b906103fd905f19906008026103e9565b191690565b8161040c916103ed565b906002021790565b9061041e81610296565b9060018060401b0382116104dc576104408261043a85546102ae565b85610392565b602090601f831160011461047457918091610463935f92610468575b5050610402565b90555b565b90915001515f8061045c565b601f19831691610483856102d8565b925f5b8181106104c4575091600293918560019694106104aa575b50505002019055610466565b6104ba910151601f8416906103ed565b90555f808061049e565b91936020600181928787015181550195019201610486565b610049565b906104eb91610414565b565b906104fb610502925f6104e1565b60016104e1565b565b5f90565b151590565b610516906101f7565b90565b906105239061050d565b5f5260205260405f2090565b61054361053e6105489261009d565b610317565b61009d565b90565b6105549061052f565b90565b6105609061054b565b90565b9061056d90610557565b5f5260205260405f2090565b9061058560ff916101fa565b9181191691161790565b61059890610508565b90565b90565b906105b36105ae6105ba9261058f565b61059b565b8254610579565b9055565b5f0190565b6105cb610504565b506105e06105da82849061069b565b15610508565b5f146106695761060860016106035f6105fb60068690610519565b018590610563565b61059e565b906106116106c9565b9061064e6106486106427f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9561050d565b92610557565b92610557565b92610657610035565b80610661816105be565b0390a4600190565b50505f90565b5f1c90565b60ff1690565b61068661068b9161066f565b610674565b90565b610698905461067a565b90565b6106c2915f6106b76106bd936106af610504565b506006610519565b01610563565b61068e565b90565b5f90565b6106d16106c5565b50339056fe60806040526004361015610013575b610d4a565b61001d5f3561018c565b806301ffc9a71461018757806306fdde0314610182578063081812fc1461017d578063095ea7b31461017857806323b872dd14610173578063248a9ca31461016e5780632d0e12d4146101695780632f2ff15d1461016457806336568abe1461015f57806340d097c31461015a57806342842e0e146101555780636352211e1461015057806370a082311461014b57806391d148541461014657806395d89b4114610141578063a217fddf1461013c578063a22cb46514610137578063b88d4fde14610132578063c87b56dd1461012d578063d539139314610128578063d547741f14610123578063e985e9c51461011e5763f68472890361000e57610d15565b610b9a565b610b39565b610b04565b610aa0565b610a69565b61095a565b6108d5565b610865565b61082f565b6107fa565b6107a3565b61076f565b61073c565b6106ea565b6106b6565b610656565b61050b565b610471565b610403565b610379565b6102c7565b610218565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b63ffffffff60e01b1690565b6101b9816101a4565b036101c057565b5f80fd5b905035906101d1826101b0565b565b906020828203126101ec576101e9915f016101c4565b90565b61019c565b151590565b6101ff906101f1565b9052565b9190610216905f602085019401906101f6565b565b346102485761024461023361022e3660046101d3565b610d52565b61023b610192565b91829182610203565b0390f35b610198565b5f91031261025757565b61019c565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b61029d6102a66020936102ab936102948161025c565b93848093610260565b95869101610269565b610274565b0190565b6102c49160208201915f81840391015261027e565b90565b346102f7576102d736600461024d565b6102f36102e2610d78565b6102ea610192565b918291826102af565b0390f35b610198565b90565b610308816102fc565b0361030f57565b5f80fd5b90503590610320826102ff565b565b9060208282031261033b57610338915f01610313565b90565b61019c565b60018060a01b031690565b61035490610340565b90565b6103609061034b565b9052565b9190610377905f60208501940190610357565b565b346103a9576103a561039461038f366004610322565b610d91565b61039c610192565b91829182610364565b0390f35b610198565b6103b78161034b565b036103be57565b5f80fd5b905035906103cf826103ae565b565b91906040838203126103f957806103ed6103f6925f86016103c2565b93602001610313565b90565b61019c565b5f0190565b346104325761041c6104163660046103d1565b90610db0565b610424610192565b8061042e816103fe565b0390f35b610198565b909160608284031261046c57610469610452845f85016103c2565b9361046081602086016103c2565b93604001610313565b90565b61019c565b346104a05761048a610484366004610437565b91610e23565b610492610192565b8061049c816103fe565b0390f35b610198565b90565b6104b1816104a5565b036104b857565b5f80fd5b905035906104c9826104a8565b565b906020828203126104e4576104e1915f016104bc565b90565b61019c565b6104f2906104a5565b9052565b9190610509905f602085019401906104e9565b565b3461053b576105376105266105213660046104cb565b610f1b565b61052e610192565b918291826104f6565b0390f35b610198565b5f80fd5b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b9061056690610274565b810190811067ffffffffffffffff82111761058057604052565b610548565b90610598610591610192565b928361055c565b565b67ffffffffffffffff81116105b8576105b4602091610274565b0190565b610548565b90825f939282370152565b909291926105dd6105d88261059a565b610585565b938185526020850190828401116105f9576105f7926105bd565b565b610544565b9080601f8301121561061c57816020610619933591016105c8565b90565b610540565b90602082820312610651575f82013567ffffffffffffffff811161064c5761064992016105fe565b90565b6101a0565b61019c565b346106845761066e610669366004610621565b61116d565b610676610192565b80610680816103fe565b0390f35b610198565b91906040838203126106b157806106a56106ae925f86016104bc565b936020016103c2565b90565b61019c565b346106e5576106cf6106c9366004610689565b906111a2565b6106d7610192565b806106e1816103fe565b0390f35b610198565b34610719576107036106fd366004610689565b906111ae565b61070b610192565b80610715816103fe565b0390f35b610198565b9060208282031261073757610734915f016103c2565b90565b61019c565b3461076a5761075461074f36600461071e565b6112cb565b61075c610192565b80610766816103fe565b0390f35b610198565b3461079e57610788610782366004610437565b91611304565b610790610192565b8061079a816103fe565b0390f35b610198565b346107d3576107cf6107be6107b9366004610322565b61131a565b6107c6610192565b91829182610364565b0390f35b610198565b6107e1906102fc565b9052565b91906107f8905f602085019401906107d8565b565b3461082a5761082661081561081036600461071e565b611379565b61081d610192565b918291826107e5565b0390f35b610198565b346108605761085c61084b610845366004610689565b90611423565b610853610192565b91829182610203565b0390f35b610198565b346108955761087536600461024d565b61089161088061144d565b610888610192565b918291826102af565b0390f35b610198565b90565b5f1b90565b6108b66108b16108bb9261089a565b61089d565b6104a5565b90565b6108c75f6108a2565b90565b6108d26108be565b90565b34610905576108e536600461024d565b6109016108f06108ca565b6108f8610192565b918291826104f6565b0390f35b610198565b610913816101f1565b0361091a57565b5f80fd5b9050359061092b8261090a565b565b91906040838203126109555780610949610952925f86016103c2565b9360200161091e565b90565b61019c565b346109895761097361096d36600461092d565b90611463565b61097b610192565b80610985816103fe565b0390f35b610198565b67ffffffffffffffff81116109ac576109a8602091610274565b0190565b610548565b909291926109c66109c18261098e565b610585565b938185526020850190828401116109e2576109e0926105bd565b565b610544565b9080601f83011215610a0557816020610a02933591016109b1565b90565b610540565b90608082820312610a6457610a21815f84016103c2565b92610a2f82602085016103c2565b92610a3d8360408301610313565b92606082013567ffffffffffffffff8111610a5f57610a5c92016109e7565b90565b6101a0565b61019c565b34610a9b57610a85610a7c366004610a0a565b92919091611479565b610a8d610192565b80610a97816103fe565b0390f35b610198565b34610ad057610acc610abb610ab6366004610322565b61153f565b610ac3610192565b918291826102af565b0390f35b610198565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a690565b610b01610ad5565b90565b34610b3457610b1436600461024d565b610b30610b1f610af9565b610b27610192565b918291826104f6565b0390f35b610198565b34610b6857610b52610b4c366004610689565b906115d5565b610b5a610192565b80610b64816103fe565b0390f35b610198565b9190604083820312610b955780610b89610b92925f86016103c2565b936020016103c2565b90565b61019c565b34610bcb57610bc7610bb6610bb0366004610b6d565b906115f7565b610bbe610192565b91829182610203565b0390f35b610198565b634e487b7160e01b5f525f60045260245ffd5b634e487b7160e01b5f52602260045260245ffd5b9060016002830492168015610c17575b6020831014610c1257565b610be3565b91607f1691610c07565b60209181520190565b5f5260205f2090565b905f9291805490610c4d610c4683610bf7565b8094610c21565b916001811690815f14610ca45750600114610c68575b505050565b610c759192939450610c2a565b915f925b818410610c8c57505001905f8080610c63565b60018160209295939554848601520191019290610c79565b92949550505060ff19168252151560200201905f8080610c63565b90610cc991610c33565b90565b90610cec610ce592610cdc610192565b93848092610cbf565b038361055c565b565b905f10610d0157610cfe90610ccc565b90565b610bd0565b610d1260085f90610cee565b90565b34610d4557610d2536600461024d565b610d41610d30610d06565b610d38610192565b918291826102af565b0390f35b610198565b5f80fd5b5f90565b610d6490610d5e610d4e565b5061161f565b90565b606090565b610d7590610ccc565b90565b610d80610d67565b50610d8a5f610d6c565b90565b5f90565b610dad90610d9d610d8d565b50610da78161165f565b506116fe565b90565b90610dc49190610dbe61171d565b9161172a565b565b90565b610ddd610dd8610de29261089a565b610dc6565b610340565b90565b610dee90610dc9565b90565b604090610e1a610e219496959396610e1060608401985f850190610357565b60208301906107d8565b0190610357565b565b919080610e40610e3a610e355f610de5565b61034b565b9161034b565b14610e9e57610e589082610e5261171d565b916117b3565b9182610e6c610e668361034b565b9161034b565b03610e7657505050565b610e9a909192610e84610192565b9384936364283d7b60e01b855260048501610df1565b0390fd5b610ec8610eaa5f610de5565b610eb2610192565b918291633250574960e11b835260048301610364565b0390fd5b5f90565b610ed9906104a5565b90565b90610ee690610ed0565b5f5260205260405f2090565b5f1c90565b90565b610f06610f0b91610ef2565b610ef7565b90565b610f189054610efa565b90565b6001610f34610f3a92610f2c610ecc565b506006610edc565b01610f0e565b90565b610f5690610f51610f4c6108be565b611934565b611160565b565b601f602091010490565b1b90565b91906008610f81910291610f7b5f1984610f62565b92610f62565b9181191691161790565b610f9f610f9a610fa4926102fc565b610dc6565b6102fc565b90565b90565b9190610fc0610fbb610fc893610f8b565b610fa7565b908354610f66565b9055565b5f90565b610fe291610fdc610fcc565b91610faa565b565b5b818110610ff0575050565b80610ffd5f600193610fd0565b01610fe5565b9190601f8111611013575b505050565b61101f61104493610c2a565b90602061102b84610f58565b8301931061104c575b61103d90610f58565b0190610fe4565b5f808061100e565b915061103d81929050611034565b1c90565b9061106e905f199060080261105a565b191690565b8161107d9161105e565b906002021790565b9061108f8161025c565b9067ffffffffffffffff821161114f576110b3826110ad8554610bf7565b85611003565b602090601f83116001146110e7579180916110d6935f926110db575b5050611073565b90555b565b90915001515f806110cf565b601f198316916110f685610c2a565b925f5b8181106111375750916002939185600196941061111d575b505050020190556110d9565b61112d910151601f84169061105e565b90555f8080611111565b919360206001819287870151815501950192016110f9565b610548565b9061115e91611085565b565b61116b906008611154565b565b61117690610f3d565b565b906111939161118e61118982610f1b565b611934565b611195565b565b9061119f9161198d565b50565b906111ac91611178565b565b90806111c96111c36111be61171d565b61034b565b9161034b565b036111da576111d791611a39565b50565b6111e2610192565b63334bd91960e11b8152806111f9600482016103fe565b0390fd5b6112169061121161120c610ad5565b611934565b6112a2565b565b90565b61122761122c91610ef2565b611218565b90565b611239905461121b565b90565b634e487b7160e01b5f52601160045260245ffd5b611259906102fc565b5f1981146112675760010190565b61123c565b906112785f199161089d565b9181191691161790565b9061129761129261129e92610f8b565b610fa7565b825461126c565b9055565b6112c9906112b0600761122f565b6112c36112bc82611250565b6007611282565b90611adb565b565b6112d4906111fd565b565b906112e86112e38361059a565b610585565b918252565b6112f65f6112d6565b90565b6113016112ed565b90565b9161131892916113126112f9565b92611479565b565b61132c90611326610d8d565b5061165f565b90565b61134361133e61134892610340565b610dc6565b610340565b90565b6113549061132f565b90565b6113609061134b565b90565b9061136d90611357565b5f5260205260405f2090565b611381610fcc565b508061139d6113976113925f610de5565b61034b565b9161034b565b146113b8576113b06113b5916003611363565b61122f565b90565b6113e26113c45f610de5565b6113cc610192565b9182916322718ad960e21b835260048301610364565b0390fd5b906113f090611357565b5f5260205260405f2090565b60ff1690565b61140e61141391610ef2565b6113fc565b90565b6114209054611402565b90565b61144a915f61143f61144593611437610d4e565b506006610edc565b016113e6565b611416565b90565b611455610d67565b506114606001610d6c565b90565b6114779161146f61171d565b919091611af1565b565b9161149d939161148b84828491610e23565b61149361171d565b9390919293611cc2565b565b90565b5190565b6114ba6114b56114bf9261089a565b610dc6565b6102fc565b90565b6114ca6112ed565b90565b905090565b6114f76114ee926020926114e58161025c565b948580936114cd565b93849101610269565b0190565b6115099061150f93926114d2565b906114d2565b90565b611531929161153d91611523610192565b9485926020840192836114fb565b9081038252038361055c565b565b611547610d67565b506115518161165f565b5061155a611e24565b9061156c6115678361149f565b6114a2565b61157e6115785f6114a6565b916102fc565b115f1461159c576115926115989291611eca565b90611512565b5b90565b50506115a66114c2565b611599565b906115c6916115c16115bc82610f1b565b611934565b6115c8565b565b906115d291611a39565b50565b906115df916115ab565b565b906115eb90611357565b5f5260205260405f2090565b61161c916116126116179261160a610d4e565b5060056115e1565b6113e6565b611416565b90565b611627610d4e565b508061164261163c637965db0b60e01b6101a4565b916101a4565b1490811561164f575b5090565b6116599150611f73565b5f61164b565b611667610d8d565b5061167181611fdb565b908161168d6116876116825f610de5565b61034b565b9161034b565b14611696575090565b6116b8906116a2610192565b918291637e27328960e01b8352600483016107e5565b0390fd5b906116c690610f8b565b5f5260205260405f2090565b60018060a01b031690565b6116e96116ee91610ef2565b6116d2565b90565b6116fb90546116dd565b90565b61171561171a9161170d610d8d565b5060046116bc565b6116f1565b90565b611725610d8d565b503390565b916117389291600192611ffa565b565b90565b61175161174c6117569261173a565b610dc6565b6102fc565b90565b9061176491036102fc565b90565b9061177291016102fc565b90565b9061178660018060a01b039161089d565b9181191691161790565b90565b906117a86117a36117af92611357565b611790565b8254611775565b9055565b906117bc610d8d565b506117c681611fdb565b92806117e26117dc6117d75f610de5565b61034b565b9161034b565b03611921575b50826118046117fe6117f95f610de5565b61034b565b9161034b565b036118cd575b8161182561181f61181a5f610de5565b61034b565b9161034b565b03611897575b6118408261183b600284906116bc565b611793565b829161187e6118786118727fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef95611357565b92611357565b92610f8b565b92611887610192565b80611891816103fe565b0390a490565b6118c86118a4600161173d565b6118c26118b360038690611363565b916118bd8361122f565b611767565b90611282565b61182b565b6118eb6118d95f610de5565b826118e35f610de5565b905f92611ffa565b61191c6118f8600161173d565b61191661190760038790611363565b916119118361122f565b611759565b90611282565b61180a565b61192e908490839161216e565b5f6117e8565b6119469061194061171d565b9061221b565b565b9061195460ff9161089d565b9181191691161790565b611967906101f1565b90565b90565b9061198261197d6119899261195e565b61196a565b8254611948565b9055565b611995610d4e565b506119aa6119a4828490611423565b156101f1565b5f14611a33576119d260016119cd5f6119c560068690610edc565b0185906113e6565b61196d565b906119db61171d565b90611a18611a12611a0c7f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d95610ed0565b92611357565b92611357565b92611a21610192565b80611a2b816103fe565b0390a4600190565b50505f90565b611a41610d4e565b50611a4d818390611423565b5f14611ad557611a745f611a6f5f611a6760068690610edc565b0185906113e6565b61196d565b90611a7d61171d565b90611aba611ab4611aae7ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b95610ed0565b92611357565b92611357565b92611ac3610192565b80611acd816103fe565b0390a4600190565b50505f90565b90611aef9190611ae96112f9565b9161225d565b565b91909182611b0f611b09611b045f610de5565b61034b565b9161034b565b14611b8357611b3382611b2e611b27600585906115e1565b86906113e6565b61196d565b919091611b7e611b6c611b667f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3193611357565b93611357565b93611b75610192565b91829182610203565b0390a3565b611ba583611b8f610192565b918291630b61174360e31b835260048301610364565b0390fd5b611bb29061132f565b90565b611bbe90611ba9565b90565b611bca9061134b565b90565b60e01b90565b90505190611be0826101b0565b565b90602082820312611bfb57611bf8915f01611bd3565b90565b61019c565b60209181520190565b611c28611c31602093611c3693611c1f816114a2565b93848093611c00565b95869101610269565b610274565b0190565b9092611c6d90611c63611c7a9694611c5960808601975f870190610357565b6020850190610357565b60408301906107d8565b6060818403910152611c09565b90565b90611c8f611c8a8361098e565b610585565b918252565b606090565b3d5f14611cb457611ca93d611c7d565b903d5f602084013e5b565b611cbc611c94565b90611cb2565b9193843b611cd8611cd25f6114a6565b916102fc565b11611ce5575b5050505050565b611d1d5f602094611d28611d00611cfb8a611bb5565b611bc1565b9463150b7a02929698611d11610192565b998a9889978896611bcd565b865260048601611c3a565b03925af180915f92611df4575b50155f14611daa57506001611d5057505b5f80808080611cde565b611d58611c99565b90611d62826114a2565b611d74611d6e5f6114a6565b916102fc565b145f14611da157611d9d90611d87610192565b918291633250574960e11b835260048301610364565b0390fd5b50805190602001fd5b611dc3611dbd630a85bd0160e11b6101a4565b916101a4565b03611dce5750611d46565b611df090611dda610192565b918291633250574960e11b835260048301610364565b0390fd5b611e1691925060203d8111611e1d575b611e0e818361055c565b810190611be2565b905f611d35565b503d611e04565b611e2c610d67565b50611e376008610d6c565b90565b369037565b90611e64611e4c836112d6565b92602080611e5a869361059a565b9201910390611e3a565b565b6001611e7291036102fc565b90565b90565b611e8c611e87611e9192611e75565b610dc6565b6102fc565b90565b634e487b7160e01b5f52601260045260245ffd5b611eb4611eba916102fc565b916102fc565b908115611ec5570490565b611e94565b611ed2610d67565b50611eef611edf826123ff565b611ee9600161173d565b90611767565b90611ef982611e3f565b91611f02610fcc565b5060200182015b600115611f6c57611f1c611f4891611e66565b916f181899199a1a9b1b9c1cb0b131b232b360811b600a82061a8353611f42600a611e78565b90611ea8565b80611f5b611f555f6114a6565b916102fc565b14611f665790611f09565b50505b90565b5050611f69565b611f7b610d4e565b5080611f96611f906380ac58cd60e01b6101a4565b916101a4565b148015611fba575b908115611faa575b5090565b611fb49150612660565b5f611fa6565b5080611fd5611fcf635b5e139f60e01b6101a4565b916101a4565b14611f9e565b611ff2611ff791611fea610d8d565b5060026116bc565b6116f1565b90565b919092808015612128575b612023575b50509061201c612021929160046116bc565b611793565b565b61202c8461165f565b918061204861204261203d5f610de5565b61034b565b9161034b565b14158061210d575b806120f3575b6120cd57509161201c916120219493612072575b50919261200a565b8184906120b16120ab6120a57f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92595611357565b92611357565b92610f8b565b926120ba610192565b806120c4816103fe565b0390a45f61206a565b6120ef906120d9610192565b91829163a9fbf51f60e01b835260048301610364565b0390fd5b506121086121028483906115f7565b156101f1565b612056565b508261212161211b8361034b565b9161034b565b1415612050565b508161214461213e6121395f610de5565b61034b565b9161034b565b1415612005565b91602061216c92949361216560408201965f830190610357565b01906107d8565b565b61218361217d82848691612686565b156101f1565b61218c57505050565b6121a66121a061219b5f610de5565b61034b565b9161034b565b145f146121d3576121cf826121b9610192565b918291637e27328960e01b8352600483016107e5565b0390fd5b6121f46121de610192565b92839263177e802f60e01b84526004840161214b565b0390fd5b91602061221992949361221260408201965f830190610357565b01906104e9565b565b9061223061222a838390611423565b156101f1565b612238575050565b612259612243610192565b92839263e2517d3f60e01b8452600484016121f8565b0390fd5b90916122899261226e838290612726565b61227661171d565b926122805f610de5565b90919293611cc2565b565b90565b6122a261229d6122a79261228b565b610dc6565b6102fc565b90565b90565b6122c16122bc6122c6926122aa565b610dc6565b6102fc565b90565b90565b6122e06122db6122e5926122c9565b610dc6565b6102fc565b90565b90565b6122ff6122fa612304926122e8565b610dc6565b6102fc565b90565b90565b61231e61231961232392612307565b610dc6565b6102fc565b90565b90565b61233d61233861234292612326565b610dc6565b6102fc565b90565b90565b61235c61235761236192612345565b610dc6565b6102fc565b90565b90565b61237b61237661238092612364565b610dc6565b6102fc565b90565b90565b61239a61239561239f92612383565b610dc6565b6102fc565b90565b90565b6123b96123b46123be926123a2565b610dc6565b6102fc565b90565b90565b6123d86123d36123dd926123c1565b610dc6565b6102fc565b90565b90565b6123f76123f26123fc926123e0565b610dc6565b6102fc565b90565b612407610fcc565b506124115f6114a6565b908061244061243a7a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000061228e565b916102fc565b1015612618575b806124686124626d04ee2d6d415b85acef81000000006122cc565b916102fc565b10156125dd575b80612489612483662386f26fc1000061230a565b916102fc565b10156125a9575b806124a76124a16305f5e100612348565b916102fc565b1015612578575b806124c36124bd612710612386565b916102fc565b1015612549575b806124de6124d860646123c4565b916102fc565b101561251b575b6124f86124f2600a611e78565b916102fc565b1015612502575b90565b61251690612510600161173d565b90611767565b6124ff565b6125326125439161252c60646123c4565b90611ea8565b9161253d60026123e3565b90611767565b906124e5565b6125616125729161255b612710612386565b90611ea8565b9161256c60046123a5565b90611767565b906124ca565b6125926125a39161258c6305f5e100612348565b90611ea8565b9161259d6008612367565b90611767565b906124ae565b6125c66125d7916125c0662386f26fc1000061230a565b90611ea8565b916125d16010612329565b90611767565b90612490565b612601612612916125fb6d04ee2d6d415b85acef81000000006122cc565b90611ea8565b9161260c60206122eb565b90611767565b9061246f565b61264961265a916126437a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000061228e565b90611ea8565b9161265460406122ad565b90611767565b90612447565b612668610d4e565b5061268261267c6301ffc9a760e01b6101a4565b916101a4565b1490565b9190612690610d4e565b50806126ac6126a66126a15f610de5565b61034b565b9161034b565b141592836126bb575b50505090565b80919293506126d26126cc8461034b565b9161034b565b14908115612714575b509182156126ee575b50505f80806126b5565b61270c919250612700612706916116fe565b9261034b565b9161034b565b145f806126e4565b612720915082906115f7565b5f6126db565b908161274261273c6127375f610de5565b61034b565b9161034b565b146127aa5761275b91906127555f610de5565b916117b3565b61277561276f61276a5f610de5565b61034b565b9161034b565b0361277c57565b6127a66127885f610de5565b612790610192565b9182916339e3563760e11b835260048301610364565b0390fd5b6127d46127b65f610de5565b6127be610192565b918291633250574960e11b835260048301610364565b0390fdfea2646970667358221220b4d89c715bce510f7dea798b25460d12892b2b68e7a18ff5eaf2e86c7237d5aa64736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4a\x000Wa\0\x1Aa\0\x14a\x01\x04V[\x90a\x02KV[a\0\"a\x005V[a(\x0Ea\x06\xD7\x829a(\x0E\x90\xF3[a\0;V[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0g\x90a\0?V[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0\x7FW`@RV[a\0IV[\x90a\0\x97a\0\x90a\x005V[\x92\x83a\0]V[V[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xB1\x90a\0\x9DV[\x90V[a\0\xBD\x81a\0\xA8V[\x03a\0\xC4WV[_\x80\xFD[\x90PQ\x90a\0\xD5\x82a\0\xB4V[V[\x91\x90`@\x83\x82\x03\x12a\0\xFFW\x80a\0\xF3a\0\xFC\x92_\x86\x01a\0\xC8V[\x93` \x01a\0\xC8V[\x90V[a\0\x99V[a\x01\"a.\xE5\x808\x03\x80a\x01\x17\x81a\0\x84V[\x92\x839\x81\x01\x90a\0\xD7V[\x90\x91V[`\x01\x80`@\x1B\x03\x81\x11a\x01BWa\x01>` \x91a\0?V[\x01\x90V[a\0IV[\x90a\x01Ya\x01T\x83a\x01&V[a\0\x84V[\x91\x82RV[_\x7FDreamAgentNFT\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x01\x8F`\ra\x01GV[\x90a\x01\x9C` \x83\x01a\x01^V[V[a\x01\xA6a\x01\x85V[\x90V[_\x7FDREAM\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x01\xDA`\x05a\x01GV[\x90a\x01\xE7` \x83\x01a\x01\xA9V[V[a\x01\xF1a\x01\xD0V[\x90V[\x90V[\x90V[_\x1B\x90V[a\x02\x13a\x02\x0Ea\x02\x18\x92a\x01\xF4V[a\x01\xFAV[a\x01\xF7V[\x90V[a\x02$_a\x01\xFFV[\x90V[\x7F\x9F-\xF0\xFE\xD2\xC7vH\xDEX`\xA4\xCCP\x8C\xD0\x81\x8C\x85\xB8\xB8\xA1\xABL\xEE\xEF\x8D\x98\x1C\x89V\xA6\x90V[\x90a\x02ya\x02\x87\x92a\x02la\x02^a\x01\x9EV[a\x02fa\x01\xE9V[\x90a\x02\x8AV[a\x02ta\x02\x1BV[a\x05\xC3V[Pa\x02\x82a\x02'V[a\x05\xC3V[PV[\x90a\x02\x94\x91a\x04\xEDV[V[Q\x90V[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\x02\xCEW[` \x83\x10\x14a\x02\xC9WV[a\x02\x9AV[\x91`\x7F\x16\x91a\x02\xBEV[_R` _ \x90V[`\x1F` \x91\x01\x04\x90V[\x1B\x90V[\x91\x90`\x08a\x03\n\x91\x02\x91a\x03\x04_\x19\x84a\x02\xEBV[\x92a\x02\xEBV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x90V[a\x03.a\x03)a\x033\x92a\x03\x14V[a\x03\x17V[a\x03\x14V[\x90V[\x90V[\x91\x90a\x03Oa\x03Ja\x03W\x93a\x03\x1AV[a\x036V[\x90\x83Ta\x02\xEFV[\x90UV[_\x90V[a\x03q\x91a\x03ka\x03[V[\x91a\x039V[V[[\x81\x81\x10a\x03\x7FWPPV[\x80a\x03\x8C_`\x01\x93a\x03_V[\x01a\x03tV[\x91\x90`\x1F\x81\x11a\x03\xA2W[PPPV[a\x03\xAEa\x03\xD3\x93a\x02\xD8V[\x90` a\x03\xBA\x84a\x02\xE1V[\x83\x01\x93\x10a\x03\xDBW[a\x03\xCC\x90a\x02\xE1V[\x01\x90a\x03sV[_\x80\x80a\x03\x9DV[\x91Pa\x03\xCC\x81\x92\x90Pa\x03\xC3V[\x1C\x90V[\x90a\x03\xFD\x90_\x19\x90`\x08\x02a\x03\xE9V[\x19\x16\x90V[\x81a\x04\x0C\x91a\x03\xEDV[\x90`\x02\x02\x17\x90V[\x90a\x04\x1E\x81a\x02\x96V[\x90`\x01\x80`@\x1B\x03\x82\x11a\x04\xDCWa\x04@\x82a\x04:\x85Ta\x02\xAEV[\x85a\x03\x92V[` \x90`\x1F\x83\x11`\x01\x14a\x04tW\x91\x80\x91a\x04c\x93_\x92a\x04hW[PPa\x04\x02V[\x90U[V[\x90\x91P\x01Q_\x80a\x04\\V[`\x1F\x19\x83\x16\x91a\x04\x83\x85a\x02\xD8V[\x92_[\x81\x81\x10a\x04\xC4WP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x04\xAAW[PPP\x02\x01\x90Ua\x04fV[a\x04\xBA\x91\x01Q`\x1F\x84\x16\x90a\x03\xEDV[\x90U_\x80\x80a\x04\x9EV[\x91\x93` `\x01\x81\x92\x87\x87\x01Q\x81U\x01\x95\x01\x92\x01a\x04\x86V[a\0IV[\x90a\x04\xEB\x91a\x04\x14V[V[\x90a\x04\xFBa\x05\x02\x92_a\x04\xE1V[`\x01a\x04\xE1V[V[_\x90V[\x15\x15\x90V[a\x05\x16\x90a\x01\xF7V[\x90V[\x90a\x05#\x90a\x05\rV[_R` R`@_ \x90V[a\x05Ca\x05>a\x05H\x92a\0\x9DV[a\x03\x17V[a\0\x9DV[\x90V[a\x05T\x90a\x05/V[\x90V[a\x05`\x90a\x05KV[\x90V[\x90a\x05m\x90a\x05WV[_R` R`@_ \x90V[\x90a\x05\x85`\xFF\x91a\x01\xFAV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x05\x98\x90a\x05\x08V[\x90V[\x90V[\x90a\x05\xB3a\x05\xAEa\x05\xBA\x92a\x05\x8FV[a\x05\x9BV[\x82Ta\x05yV[\x90UV[_\x01\x90V[a\x05\xCBa\x05\x04V[Pa\x05\xE0a\x05\xDA\x82\x84\x90a\x06\x9BV[\x15a\x05\x08V[_\x14a\x06iWa\x06\x08`\x01a\x06\x03_a\x05\xFB`\x06\x86\x90a\x05\x19V[\x01\x85\x90a\x05cV[a\x05\x9EV[\x90a\x06\x11a\x06\xC9V[\x90a\x06Na\x06Ha\x06B\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r\x95a\x05\rV[\x92a\x05WV[\x92a\x05WV[\x92a\x06Wa\x005V[\x80a\x06a\x81a\x05\xBEV[\x03\x90\xA4`\x01\x90V[PP_\x90V[_\x1C\x90V[`\xFF\x16\x90V[a\x06\x86a\x06\x8B\x91a\x06oV[a\x06tV[\x90V[a\x06\x98\x90Ta\x06zV[\x90V[a\x06\xC2\x91_a\x06\xB7a\x06\xBD\x93a\x06\xAFa\x05\x04V[P`\x06a\x05\x19V[\x01a\x05cV[a\x06\x8EV[\x90V[_\x90V[a\x06\xD1a\x06\xC5V[P3\x90V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\rJV[a\0\x1D_5a\x01\x8CV[\x80c\x01\xFF\xC9\xA7\x14a\x01\x87W\x80c\x06\xFD\xDE\x03\x14a\x01\x82W\x80c\x08\x18\x12\xFC\x14a\x01}W\x80c\t^\xA7\xB3\x14a\x01xW\x80c#\xB8r\xDD\x14a\x01sW\x80c$\x8A\x9C\xA3\x14a\x01nW\x80c-\x0E\x12\xD4\x14a\x01iW\x80c//\xF1]\x14a\x01dW\x80c6V\x8A\xBE\x14a\x01_W\x80c@\xD0\x97\xC3\x14a\x01ZW\x80cB\x84.\x0E\x14a\x01UW\x80ccR!\x1E\x14a\x01PW\x80cp\xA0\x821\x14a\x01KW\x80c\x91\xD1HT\x14a\x01FW\x80c\x95\xD8\x9BA\x14a\x01AW\x80c\xA2\x17\xFD\xDF\x14a\x01<W\x80c\xA2,\xB4e\x14a\x017W\x80c\xB8\x8DO\xDE\x14a\x012W\x80c\xC8{V\xDD\x14a\x01-W\x80c\xD59\x13\x93\x14a\x01(W\x80c\xD5Gt\x1F\x14a\x01#W\x80c\xE9\x85\xE9\xC5\x14a\x01\x1EWc\xF6\x84r\x89\x03a\0\x0EWa\r\x15V[a\x0B\x9AV[a\x0B9V[a\x0B\x04V[a\n\xA0V[a\niV[a\tZV[a\x08\xD5V[a\x08eV[a\x08/V[a\x07\xFAV[a\x07\xA3V[a\x07oV[a\x07<V[a\x06\xEAV[a\x06\xB6V[a\x06VV[a\x05\x0BV[a\x04qV[a\x04\x03V[a\x03yV[a\x02\xC7V[a\x02\x18V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[c\xFF\xFF\xFF\xFF`\xE0\x1B\x16\x90V[a\x01\xB9\x81a\x01\xA4V[\x03a\x01\xC0WV[_\x80\xFD[\x90P5\x90a\x01\xD1\x82a\x01\xB0V[V[\x90` \x82\x82\x03\x12a\x01\xECWa\x01\xE9\x91_\x01a\x01\xC4V[\x90V[a\x01\x9CV[\x15\x15\x90V[a\x01\xFF\x90a\x01\xF1V[\x90RV[\x91\x90a\x02\x16\x90_` \x85\x01\x94\x01\x90a\x01\xF6V[V[4a\x02HWa\x02Da\x023a\x02.6`\x04a\x01\xD3V[a\rRV[a\x02;a\x01\x92V[\x91\x82\x91\x82a\x02\x03V[\x03\x90\xF3[a\x01\x98V[_\x91\x03\x12a\x02WWV[a\x01\x9CV[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x02\x9Da\x02\xA6` \x93a\x02\xAB\x93a\x02\x94\x81a\x02\\V[\x93\x84\x80\x93a\x02`V[\x95\x86\x91\x01a\x02iV[a\x02tV[\x01\x90V[a\x02\xC4\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x02~V[\x90V[4a\x02\xF7Wa\x02\xD76`\x04a\x02MV[a\x02\xF3a\x02\xE2a\rxV[a\x02\xEAa\x01\x92V[\x91\x82\x91\x82a\x02\xAFV[\x03\x90\xF3[a\x01\x98V[\x90V[a\x03\x08\x81a\x02\xFCV[\x03a\x03\x0FWV[_\x80\xFD[\x90P5\x90a\x03 \x82a\x02\xFFV[V[\x90` \x82\x82\x03\x12a\x03;Wa\x038\x91_\x01a\x03\x13V[\x90V[a\x01\x9CV[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x03T\x90a\x03@V[\x90V[a\x03`\x90a\x03KV[\x90RV[\x91\x90a\x03w\x90_` \x85\x01\x94\x01\x90a\x03WV[V[4a\x03\xA9Wa\x03\xA5a\x03\x94a\x03\x8F6`\x04a\x03\"V[a\r\x91V[a\x03\x9Ca\x01\x92V[\x91\x82\x91\x82a\x03dV[\x03\x90\xF3[a\x01\x98V[a\x03\xB7\x81a\x03KV[\x03a\x03\xBEWV[_\x80\xFD[\x90P5\x90a\x03\xCF\x82a\x03\xAEV[V[\x91\x90`@\x83\x82\x03\x12a\x03\xF9W\x80a\x03\xEDa\x03\xF6\x92_\x86\x01a\x03\xC2V[\x93` \x01a\x03\x13V[\x90V[a\x01\x9CV[_\x01\x90V[4a\x042Wa\x04\x1Ca\x04\x166`\x04a\x03\xD1V[\x90a\r\xB0V[a\x04$a\x01\x92V[\x80a\x04.\x81a\x03\xFEV[\x03\x90\xF3[a\x01\x98V[\x90\x91``\x82\x84\x03\x12a\x04lWa\x04ia\x04R\x84_\x85\x01a\x03\xC2V[\x93a\x04`\x81` \x86\x01a\x03\xC2V[\x93`@\x01a\x03\x13V[\x90V[a\x01\x9CV[4a\x04\xA0Wa\x04\x8Aa\x04\x846`\x04a\x047V[\x91a\x0E#V[a\x04\x92a\x01\x92V[\x80a\x04\x9C\x81a\x03\xFEV[\x03\x90\xF3[a\x01\x98V[\x90V[a\x04\xB1\x81a\x04\xA5V[\x03a\x04\xB8WV[_\x80\xFD[\x90P5\x90a\x04\xC9\x82a\x04\xA8V[V[\x90` \x82\x82\x03\x12a\x04\xE4Wa\x04\xE1\x91_\x01a\x04\xBCV[\x90V[a\x01\x9CV[a\x04\xF2\x90a\x04\xA5V[\x90RV[\x91\x90a\x05\t\x90_` \x85\x01\x94\x01\x90a\x04\xE9V[V[4a\x05;Wa\x057a\x05&a\x05!6`\x04a\x04\xCBV[a\x0F\x1BV[a\x05.a\x01\x92V[\x91\x82\x91\x82a\x04\xF6V[\x03\x90\xF3[a\x01\x98V[_\x80\xFD[_\x80\xFD[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x05f\x90a\x02tV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x05\x80W`@RV[a\x05HV[\x90a\x05\x98a\x05\x91a\x01\x92V[\x92\x83a\x05\\V[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05\xB8Wa\x05\xB4` \x91a\x02tV[\x01\x90V[a\x05HV[\x90\x82_\x93\x92\x827\x01RV[\x90\x92\x91\x92a\x05\xDDa\x05\xD8\x82a\x05\x9AV[a\x05\x85V[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\x05\xF9Wa\x05\xF7\x92a\x05\xBDV[V[a\x05DV[\x90\x80`\x1F\x83\x01\x12\x15a\x06\x1CW\x81` a\x06\x19\x935\x91\x01a\x05\xC8V[\x90V[a\x05@V[\x90` \x82\x82\x03\x12a\x06QW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x06LWa\x06I\x92\x01a\x05\xFEV[\x90V[a\x01\xA0V[a\x01\x9CV[4a\x06\x84Wa\x06na\x06i6`\x04a\x06!V[a\x11mV[a\x06va\x01\x92V[\x80a\x06\x80\x81a\x03\xFEV[\x03\x90\xF3[a\x01\x98V[\x91\x90`@\x83\x82\x03\x12a\x06\xB1W\x80a\x06\xA5a\x06\xAE\x92_\x86\x01a\x04\xBCV[\x93` \x01a\x03\xC2V[\x90V[a\x01\x9CV[4a\x06\xE5Wa\x06\xCFa\x06\xC96`\x04a\x06\x89V[\x90a\x11\xA2V[a\x06\xD7a\x01\x92V[\x80a\x06\xE1\x81a\x03\xFEV[\x03\x90\xF3[a\x01\x98V[4a\x07\x19Wa\x07\x03a\x06\xFD6`\x04a\x06\x89V[\x90a\x11\xAEV[a\x07\x0Ba\x01\x92V[\x80a\x07\x15\x81a\x03\xFEV[\x03\x90\xF3[a\x01\x98V[\x90` \x82\x82\x03\x12a\x077Wa\x074\x91_\x01a\x03\xC2V[\x90V[a\x01\x9CV[4a\x07jWa\x07Ta\x07O6`\x04a\x07\x1EV[a\x12\xCBV[a\x07\\a\x01\x92V[\x80a\x07f\x81a\x03\xFEV[\x03\x90\xF3[a\x01\x98V[4a\x07\x9EWa\x07\x88a\x07\x826`\x04a\x047V[\x91a\x13\x04V[a\x07\x90a\x01\x92V[\x80a\x07\x9A\x81a\x03\xFEV[\x03\x90\xF3[a\x01\x98V[4a\x07\xD3Wa\x07\xCFa\x07\xBEa\x07\xB96`\x04a\x03\"V[a\x13\x1AV[a\x07\xC6a\x01\x92V[\x91\x82\x91\x82a\x03dV[\x03\x90\xF3[a\x01\x98V[a\x07\xE1\x90a\x02\xFCV[\x90RV[\x91\x90a\x07\xF8\x90_` \x85\x01\x94\x01\x90a\x07\xD8V[V[4a\x08*Wa\x08&a\x08\x15a\x08\x106`\x04a\x07\x1EV[a\x13yV[a\x08\x1Da\x01\x92V[\x91\x82\x91\x82a\x07\xE5V[\x03\x90\xF3[a\x01\x98V[4a\x08`Wa\x08\\a\x08Ka\x08E6`\x04a\x06\x89V[\x90a\x14#V[a\x08Sa\x01\x92V[\x91\x82\x91\x82a\x02\x03V[\x03\x90\xF3[a\x01\x98V[4a\x08\x95Wa\x08u6`\x04a\x02MV[a\x08\x91a\x08\x80a\x14MV[a\x08\x88a\x01\x92V[\x91\x82\x91\x82a\x02\xAFV[\x03\x90\xF3[a\x01\x98V[\x90V[_\x1B\x90V[a\x08\xB6a\x08\xB1a\x08\xBB\x92a\x08\x9AV[a\x08\x9DV[a\x04\xA5V[\x90V[a\x08\xC7_a\x08\xA2V[\x90V[a\x08\xD2a\x08\xBEV[\x90V[4a\t\x05Wa\x08\xE56`\x04a\x02MV[a\t\x01a\x08\xF0a\x08\xCAV[a\x08\xF8a\x01\x92V[\x91\x82\x91\x82a\x04\xF6V[\x03\x90\xF3[a\x01\x98V[a\t\x13\x81a\x01\xF1V[\x03a\t\x1AWV[_\x80\xFD[\x90P5\x90a\t+\x82a\t\nV[V[\x91\x90`@\x83\x82\x03\x12a\tUW\x80a\tIa\tR\x92_\x86\x01a\x03\xC2V[\x93` \x01a\t\x1EV[\x90V[a\x01\x9CV[4a\t\x89Wa\tsa\tm6`\x04a\t-V[\x90a\x14cV[a\t{a\x01\x92V[\x80a\t\x85\x81a\x03\xFEV[\x03\x90\xF3[a\x01\x98V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\t\xACWa\t\xA8` \x91a\x02tV[\x01\x90V[a\x05HV[\x90\x92\x91\x92a\t\xC6a\t\xC1\x82a\t\x8EV[a\x05\x85V[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\t\xE2Wa\t\xE0\x92a\x05\xBDV[V[a\x05DV[\x90\x80`\x1F\x83\x01\x12\x15a\n\x05W\x81` a\n\x02\x935\x91\x01a\t\xB1V[\x90V[a\x05@V[\x90`\x80\x82\x82\x03\x12a\ndWa\n!\x81_\x84\x01a\x03\xC2V[\x92a\n/\x82` \x85\x01a\x03\xC2V[\x92a\n=\x83`@\x83\x01a\x03\x13V[\x92``\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\n_Wa\n\\\x92\x01a\t\xE7V[\x90V[a\x01\xA0V[a\x01\x9CV[4a\n\x9BWa\n\x85a\n|6`\x04a\n\nV[\x92\x91\x90\x91a\x14yV[a\n\x8Da\x01\x92V[\x80a\n\x97\x81a\x03\xFEV[\x03\x90\xF3[a\x01\x98V[4a\n\xD0Wa\n\xCCa\n\xBBa\n\xB66`\x04a\x03\"V[a\x15?V[a\n\xC3a\x01\x92V[\x91\x82\x91\x82a\x02\xAFV[\x03\x90\xF3[a\x01\x98V[\x7F\x9F-\xF0\xFE\xD2\xC7vH\xDEX`\xA4\xCCP\x8C\xD0\x81\x8C\x85\xB8\xB8\xA1\xABL\xEE\xEF\x8D\x98\x1C\x89V\xA6\x90V[a\x0B\x01a\n\xD5V[\x90V[4a\x0B4Wa\x0B\x146`\x04a\x02MV[a\x0B0a\x0B\x1Fa\n\xF9V[a\x0B'a\x01\x92V[\x91\x82\x91\x82a\x04\xF6V[\x03\x90\xF3[a\x01\x98V[4a\x0BhWa\x0BRa\x0BL6`\x04a\x06\x89V[\x90a\x15\xD5V[a\x0BZa\x01\x92V[\x80a\x0Bd\x81a\x03\xFEV[\x03\x90\xF3[a\x01\x98V[\x91\x90`@\x83\x82\x03\x12a\x0B\x95W\x80a\x0B\x89a\x0B\x92\x92_\x86\x01a\x03\xC2V[\x93` \x01a\x03\xC2V[\x90V[a\x01\x9CV[4a\x0B\xCBWa\x0B\xC7a\x0B\xB6a\x0B\xB06`\x04a\x0BmV[\x90a\x15\xF7V[a\x0B\xBEa\x01\x92V[\x91\x82\x91\x82a\x02\x03V[\x03\x90\xF3[a\x01\x98V[cNH{q`\xE0\x1B_R_`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\x0C\x17W[` \x83\x10\x14a\x0C\x12WV[a\x0B\xE3V[\x91`\x7F\x16\x91a\x0C\x07V[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\x0CMa\x0CF\x83a\x0B\xF7V[\x80\x94a\x0C!V[\x91`\x01\x81\x16\x90\x81_\x14a\x0C\xA4WP`\x01\x14a\x0ChW[PPPV[a\x0Cu\x91\x92\x93\x94Pa\x0C*V[\x91_\x92[\x81\x84\x10a\x0C\x8CWPP\x01\x90_\x80\x80a\x0CcV[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\x0CyV[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\x0CcV[\x90a\x0C\xC9\x91a\x0C3V[\x90V[\x90a\x0C\xECa\x0C\xE5\x92a\x0C\xDCa\x01\x92V[\x93\x84\x80\x92a\x0C\xBFV[\x03\x83a\x05\\V[V[\x90_\x10a\r\x01Wa\x0C\xFE\x90a\x0C\xCCV[\x90V[a\x0B\xD0V[a\r\x12`\x08_\x90a\x0C\xEEV[\x90V[4a\rEWa\r%6`\x04a\x02MV[a\rAa\r0a\r\x06V[a\r8a\x01\x92V[\x91\x82\x91\x82a\x02\xAFV[\x03\x90\xF3[a\x01\x98V[_\x80\xFD[_\x90V[a\rd\x90a\r^a\rNV[Pa\x16\x1FV[\x90V[``\x90V[a\ru\x90a\x0C\xCCV[\x90V[a\r\x80a\rgV[Pa\r\x8A_a\rlV[\x90V[_\x90V[a\r\xAD\x90a\r\x9Da\r\x8DV[Pa\r\xA7\x81a\x16_V[Pa\x16\xFEV[\x90V[\x90a\r\xC4\x91\x90a\r\xBEa\x17\x1DV[\x91a\x17*V[V[\x90V[a\r\xDDa\r\xD8a\r\xE2\x92a\x08\x9AV[a\r\xC6V[a\x03@V[\x90V[a\r\xEE\x90a\r\xC9V[\x90V[`@\x90a\x0E\x1Aa\x0E!\x94\x96\x95\x93\x96a\x0E\x10``\x84\x01\x98_\x85\x01\x90a\x03WV[` \x83\x01\x90a\x07\xD8V[\x01\x90a\x03WV[V[\x91\x90\x80a\x0E@a\x0E:a\x0E5_a\r\xE5V[a\x03KV[\x91a\x03KV[\x14a\x0E\x9EWa\x0EX\x90\x82a\x0ERa\x17\x1DV[\x91a\x17\xB3V[\x91\x82a\x0Ela\x0Ef\x83a\x03KV[\x91a\x03KV[\x03a\x0EvWPPPV[a\x0E\x9A\x90\x91\x92a\x0E\x84a\x01\x92V[\x93\x84\x93cd(={`\xE0\x1B\x85R`\x04\x85\x01a\r\xF1V[\x03\x90\xFD[a\x0E\xC8a\x0E\xAA_a\r\xE5V[a\x0E\xB2a\x01\x92V[\x91\x82\x91c2PWI`\xE1\x1B\x83R`\x04\x83\x01a\x03dV[\x03\x90\xFD[_\x90V[a\x0E\xD9\x90a\x04\xA5V[\x90V[\x90a\x0E\xE6\x90a\x0E\xD0V[_R` R`@_ \x90V[_\x1C\x90V[\x90V[a\x0F\x06a\x0F\x0B\x91a\x0E\xF2V[a\x0E\xF7V[\x90V[a\x0F\x18\x90Ta\x0E\xFAV[\x90V[`\x01a\x0F4a\x0F:\x92a\x0F,a\x0E\xCCV[P`\x06a\x0E\xDCV[\x01a\x0F\x0EV[\x90V[a\x0FV\x90a\x0FQa\x0FLa\x08\xBEV[a\x194V[a\x11`V[V[`\x1F` \x91\x01\x04\x90V[\x1B\x90V[\x91\x90`\x08a\x0F\x81\x91\x02\x91a\x0F{_\x19\x84a\x0FbV[\x92a\x0FbV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0F\x9Fa\x0F\x9Aa\x0F\xA4\x92a\x02\xFCV[a\r\xC6V[a\x02\xFCV[\x90V[\x90V[\x91\x90a\x0F\xC0a\x0F\xBBa\x0F\xC8\x93a\x0F\x8BV[a\x0F\xA7V[\x90\x83Ta\x0FfV[\x90UV[_\x90V[a\x0F\xE2\x91a\x0F\xDCa\x0F\xCCV[\x91a\x0F\xAAV[V[[\x81\x81\x10a\x0F\xF0WPPV[\x80a\x0F\xFD_`\x01\x93a\x0F\xD0V[\x01a\x0F\xE5V[\x91\x90`\x1F\x81\x11a\x10\x13W[PPPV[a\x10\x1Fa\x10D\x93a\x0C*V[\x90` a\x10+\x84a\x0FXV[\x83\x01\x93\x10a\x10LW[a\x10=\x90a\x0FXV[\x01\x90a\x0F\xE4V[_\x80\x80a\x10\x0EV[\x91Pa\x10=\x81\x92\x90Pa\x104V[\x1C\x90V[\x90a\x10n\x90_\x19\x90`\x08\x02a\x10ZV[\x19\x16\x90V[\x81a\x10}\x91a\x10^V[\x90`\x02\x02\x17\x90V[\x90a\x10\x8F\x81a\x02\\V[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x11OWa\x10\xB3\x82a\x10\xAD\x85Ta\x0B\xF7V[\x85a\x10\x03V[` \x90`\x1F\x83\x11`\x01\x14a\x10\xE7W\x91\x80\x91a\x10\xD6\x93_\x92a\x10\xDBW[PPa\x10sV[\x90U[V[\x90\x91P\x01Q_\x80a\x10\xCFV[`\x1F\x19\x83\x16\x91a\x10\xF6\x85a\x0C*V[\x92_[\x81\x81\x10a\x117WP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x11\x1DW[PPP\x02\x01\x90Ua\x10\xD9V[a\x11-\x91\x01Q`\x1F\x84\x16\x90a\x10^V[\x90U_\x80\x80a\x11\x11V[\x91\x93` `\x01\x81\x92\x87\x87\x01Q\x81U\x01\x95\x01\x92\x01a\x10\xF9V[a\x05HV[\x90a\x11^\x91a\x10\x85V[V[a\x11k\x90`\x08a\x11TV[V[a\x11v\x90a\x0F=V[V[\x90a\x11\x93\x91a\x11\x8Ea\x11\x89\x82a\x0F\x1BV[a\x194V[a\x11\x95V[V[\x90a\x11\x9F\x91a\x19\x8DV[PV[\x90a\x11\xAC\x91a\x11xV[V[\x90\x80a\x11\xC9a\x11\xC3a\x11\xBEa\x17\x1DV[a\x03KV[\x91a\x03KV[\x03a\x11\xDAWa\x11\xD7\x91a\x1A9V[PV[a\x11\xE2a\x01\x92V[c3K\xD9\x19`\xE1\x1B\x81R\x80a\x11\xF9`\x04\x82\x01a\x03\xFEV[\x03\x90\xFD[a\x12\x16\x90a\x12\x11a\x12\x0Ca\n\xD5V[a\x194V[a\x12\xA2V[V[\x90V[a\x12'a\x12,\x91a\x0E\xF2V[a\x12\x18V[\x90V[a\x129\x90Ta\x12\x1BV[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x12Y\x90a\x02\xFCV[_\x19\x81\x14a\x12gW`\x01\x01\x90V[a\x12<V[\x90a\x12x_\x19\x91a\x08\x9DV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x12\x97a\x12\x92a\x12\x9E\x92a\x0F\x8BV[a\x0F\xA7V[\x82Ta\x12lV[\x90UV[a\x12\xC9\x90a\x12\xB0`\x07a\x12/V[a\x12\xC3a\x12\xBC\x82a\x12PV[`\x07a\x12\x82V[\x90a\x1A\xDBV[V[a\x12\xD4\x90a\x11\xFDV[V[\x90a\x12\xE8a\x12\xE3\x83a\x05\x9AV[a\x05\x85V[\x91\x82RV[a\x12\xF6_a\x12\xD6V[\x90V[a\x13\x01a\x12\xEDV[\x90V[\x91a\x13\x18\x92\x91a\x13\x12a\x12\xF9V[\x92a\x14yV[V[a\x13,\x90a\x13&a\r\x8DV[Pa\x16_V[\x90V[a\x13Ca\x13>a\x13H\x92a\x03@V[a\r\xC6V[a\x03@V[\x90V[a\x13T\x90a\x13/V[\x90V[a\x13`\x90a\x13KV[\x90V[\x90a\x13m\x90a\x13WV[_R` R`@_ \x90V[a\x13\x81a\x0F\xCCV[P\x80a\x13\x9Da\x13\x97a\x13\x92_a\r\xE5V[a\x03KV[\x91a\x03KV[\x14a\x13\xB8Wa\x13\xB0a\x13\xB5\x91`\x03a\x13cV[a\x12/V[\x90V[a\x13\xE2a\x13\xC4_a\r\xE5V[a\x13\xCCa\x01\x92V[\x91\x82\x91c\"q\x8A\xD9`\xE2\x1B\x83R`\x04\x83\x01a\x03dV[\x03\x90\xFD[\x90a\x13\xF0\x90a\x13WV[_R` R`@_ \x90V[`\xFF\x16\x90V[a\x14\x0Ea\x14\x13\x91a\x0E\xF2V[a\x13\xFCV[\x90V[a\x14 \x90Ta\x14\x02V[\x90V[a\x14J\x91_a\x14?a\x14E\x93a\x147a\rNV[P`\x06a\x0E\xDCV[\x01a\x13\xE6V[a\x14\x16V[\x90V[a\x14Ua\rgV[Pa\x14``\x01a\rlV[\x90V[a\x14w\x91a\x14oa\x17\x1DV[\x91\x90\x91a\x1A\xF1V[V[\x91a\x14\x9D\x93\x91a\x14\x8B\x84\x82\x84\x91a\x0E#V[a\x14\x93a\x17\x1DV[\x93\x90\x91\x92\x93a\x1C\xC2V[V[\x90V[Q\x90V[a\x14\xBAa\x14\xB5a\x14\xBF\x92a\x08\x9AV[a\r\xC6V[a\x02\xFCV[\x90V[a\x14\xCAa\x12\xEDV[\x90V[\x90P\x90V[a\x14\xF7a\x14\xEE\x92` \x92a\x14\xE5\x81a\x02\\V[\x94\x85\x80\x93a\x14\xCDV[\x93\x84\x91\x01a\x02iV[\x01\x90V[a\x15\t\x90a\x15\x0F\x93\x92a\x14\xD2V[\x90a\x14\xD2V[\x90V[a\x151\x92\x91a\x15=\x91a\x15#a\x01\x92V[\x94\x85\x92` \x84\x01\x92\x83a\x14\xFBV[\x90\x81\x03\x82R\x03\x83a\x05\\V[V[a\x15Ga\rgV[Pa\x15Q\x81a\x16_V[Pa\x15Za\x1E$V[\x90a\x15la\x15g\x83a\x14\x9FV[a\x14\xA2V[a\x15~a\x15x_a\x14\xA6V[\x91a\x02\xFCV[\x11_\x14a\x15\x9CWa\x15\x92a\x15\x98\x92\x91a\x1E\xCAV[\x90a\x15\x12V[[\x90V[PPa\x15\xA6a\x14\xC2V[a\x15\x99V[\x90a\x15\xC6\x91a\x15\xC1a\x15\xBC\x82a\x0F\x1BV[a\x194V[a\x15\xC8V[V[\x90a\x15\xD2\x91a\x1A9V[PV[\x90a\x15\xDF\x91a\x15\xABV[V[\x90a\x15\xEB\x90a\x13WV[_R` R`@_ \x90V[a\x16\x1C\x91a\x16\x12a\x16\x17\x92a\x16\na\rNV[P`\x05a\x15\xE1V[a\x13\xE6V[a\x14\x16V[\x90V[a\x16'a\rNV[P\x80a\x16Ba\x16<cye\xDB\x0B`\xE0\x1Ba\x01\xA4V[\x91a\x01\xA4V[\x14\x90\x81\x15a\x16OW[P\x90V[a\x16Y\x91Pa\x1FsV[_a\x16KV[a\x16ga\r\x8DV[Pa\x16q\x81a\x1F\xDBV[\x90\x81a\x16\x8Da\x16\x87a\x16\x82_a\r\xE5V[a\x03KV[\x91a\x03KV[\x14a\x16\x96WP\x90V[a\x16\xB8\x90a\x16\xA2a\x01\x92V[\x91\x82\x91c~'2\x89`\xE0\x1B\x83R`\x04\x83\x01a\x07\xE5V[\x03\x90\xFD[\x90a\x16\xC6\x90a\x0F\x8BV[_R` R`@_ \x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x16\xE9a\x16\xEE\x91a\x0E\xF2V[a\x16\xD2V[\x90V[a\x16\xFB\x90Ta\x16\xDDV[\x90V[a\x17\x15a\x17\x1A\x91a\x17\ra\r\x8DV[P`\x04a\x16\xBCV[a\x16\xF1V[\x90V[a\x17%a\r\x8DV[P3\x90V[\x91a\x178\x92\x91`\x01\x92a\x1F\xFAV[V[\x90V[a\x17Qa\x17La\x17V\x92a\x17:V[a\r\xC6V[a\x02\xFCV[\x90V[\x90a\x17d\x91\x03a\x02\xFCV[\x90V[\x90a\x17r\x91\x01a\x02\xFCV[\x90V[\x90a\x17\x86`\x01\x80`\xA0\x1B\x03\x91a\x08\x9DV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x90a\x17\xA8a\x17\xA3a\x17\xAF\x92a\x13WV[a\x17\x90V[\x82Ta\x17uV[\x90UV[\x90a\x17\xBCa\r\x8DV[Pa\x17\xC6\x81a\x1F\xDBV[\x92\x80a\x17\xE2a\x17\xDCa\x17\xD7_a\r\xE5V[a\x03KV[\x91a\x03KV[\x03a\x19!W[P\x82a\x18\x04a\x17\xFEa\x17\xF9_a\r\xE5V[a\x03KV[\x91a\x03KV[\x03a\x18\xCDW[\x81a\x18%a\x18\x1Fa\x18\x1A_a\r\xE5V[a\x03KV[\x91a\x03KV[\x03a\x18\x97W[a\x18@\x82a\x18;`\x02\x84\x90a\x16\xBCV[a\x17\x93V[\x82\x91a\x18~a\x18xa\x18r\x7F\xDD\xF2R\xAD\x1B\xE2\xC8\x9Bi\xC2\xB0h\xFC7\x8D\xAA\x95+\xA7\xF1c\xC4\xA1\x16(\xF5ZM\xF5#\xB3\xEF\x95a\x13WV[\x92a\x13WV[\x92a\x0F\x8BV[\x92a\x18\x87a\x01\x92V[\x80a\x18\x91\x81a\x03\xFEV[\x03\x90\xA4\x90V[a\x18\xC8a\x18\xA4`\x01a\x17=V[a\x18\xC2a\x18\xB3`\x03\x86\x90a\x13cV[\x91a\x18\xBD\x83a\x12/V[a\x17gV[\x90a\x12\x82V[a\x18+V[a\x18\xEBa\x18\xD9_a\r\xE5V[\x82a\x18\xE3_a\r\xE5V[\x90_\x92a\x1F\xFAV[a\x19\x1Ca\x18\xF8`\x01a\x17=V[a\x19\x16a\x19\x07`\x03\x87\x90a\x13cV[\x91a\x19\x11\x83a\x12/V[a\x17YV[\x90a\x12\x82V[a\x18\nV[a\x19.\x90\x84\x90\x83\x91a!nV[_a\x17\xE8V[a\x19F\x90a\x19@a\x17\x1DV[\x90a\"\x1BV[V[\x90a\x19T`\xFF\x91a\x08\x9DV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x19g\x90a\x01\xF1V[\x90V[\x90V[\x90a\x19\x82a\x19}a\x19\x89\x92a\x19^V[a\x19jV[\x82Ta\x19HV[\x90UV[a\x19\x95a\rNV[Pa\x19\xAAa\x19\xA4\x82\x84\x90a\x14#V[\x15a\x01\xF1V[_\x14a\x1A3Wa\x19\xD2`\x01a\x19\xCD_a\x19\xC5`\x06\x86\x90a\x0E\xDCV[\x01\x85\x90a\x13\xE6V[a\x19mV[\x90a\x19\xDBa\x17\x1DV[\x90a\x1A\x18a\x1A\x12a\x1A\x0C\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r\x95a\x0E\xD0V[\x92a\x13WV[\x92a\x13WV[\x92a\x1A!a\x01\x92V[\x80a\x1A+\x81a\x03\xFEV[\x03\x90\xA4`\x01\x90V[PP_\x90V[a\x1AAa\rNV[Pa\x1AM\x81\x83\x90a\x14#V[_\x14a\x1A\xD5Wa\x1At_a\x1Ao_a\x1Ag`\x06\x86\x90a\x0E\xDCV[\x01\x85\x90a\x13\xE6V[a\x19mV[\x90a\x1A}a\x17\x1DV[\x90a\x1A\xBAa\x1A\xB4a\x1A\xAE\x7F\xF69\x1F\\2\xD9\xC6\x9D*G\xEAg\x0BD)t\xB595\xD1\xED\xC7\xFDd\xEB!\xE0G\xA89\x17\x1B\x95a\x0E\xD0V[\x92a\x13WV[\x92a\x13WV[\x92a\x1A\xC3a\x01\x92V[\x80a\x1A\xCD\x81a\x03\xFEV[\x03\x90\xA4`\x01\x90V[PP_\x90V[\x90a\x1A\xEF\x91\x90a\x1A\xE9a\x12\xF9V[\x91a\"]V[V[\x91\x90\x91\x82a\x1B\x0Fa\x1B\ta\x1B\x04_a\r\xE5V[a\x03KV[\x91a\x03KV[\x14a\x1B\x83Wa\x1B3\x82a\x1B.a\x1B'`\x05\x85\x90a\x15\xE1V[\x86\x90a\x13\xE6V[a\x19mV[\x91\x90\x91a\x1B~a\x1Bla\x1Bf\x7F\x170~\xAB9\xABa\x07\xE8\x89\x98E\xAD=Y\xBD\x96S\xF2\0\xF2 \x92\x04\x89\xCA+Y7il1\x93a\x13WV[\x93a\x13WV[\x93a\x1Bua\x01\x92V[\x91\x82\x91\x82a\x02\x03V[\x03\x90\xA3V[a\x1B\xA5\x83a\x1B\x8Fa\x01\x92V[\x91\x82\x91c\x0Ba\x17C`\xE3\x1B\x83R`\x04\x83\x01a\x03dV[\x03\x90\xFD[a\x1B\xB2\x90a\x13/V[\x90V[a\x1B\xBE\x90a\x1B\xA9V[\x90V[a\x1B\xCA\x90a\x13KV[\x90V[`\xE0\x1B\x90V[\x90PQ\x90a\x1B\xE0\x82a\x01\xB0V[V[\x90` \x82\x82\x03\x12a\x1B\xFBWa\x1B\xF8\x91_\x01a\x1B\xD3V[\x90V[a\x01\x9CV[` \x91\x81R\x01\x90V[a\x1C(a\x1C1` \x93a\x1C6\x93a\x1C\x1F\x81a\x14\xA2V[\x93\x84\x80\x93a\x1C\0V[\x95\x86\x91\x01a\x02iV[a\x02tV[\x01\x90V[\x90\x92a\x1Cm\x90a\x1Cca\x1Cz\x96\x94a\x1CY`\x80\x86\x01\x97_\x87\x01\x90a\x03WV[` \x85\x01\x90a\x03WV[`@\x83\x01\x90a\x07\xD8V[``\x81\x84\x03\x91\x01Ra\x1C\tV[\x90V[\x90a\x1C\x8Fa\x1C\x8A\x83a\t\x8EV[a\x05\x85V[\x91\x82RV[``\x90V[=_\x14a\x1C\xB4Wa\x1C\xA9=a\x1C}V[\x90=_` \x84\x01>[V[a\x1C\xBCa\x1C\x94V[\x90a\x1C\xB2V[\x91\x93\x84;a\x1C\xD8a\x1C\xD2_a\x14\xA6V[\x91a\x02\xFCV[\x11a\x1C\xE5W[PPPPPV[a\x1D\x1D_` \x94a\x1D(a\x1D\0a\x1C\xFB\x8Aa\x1B\xB5V[a\x1B\xC1V[\x94c\x15\x0Bz\x02\x92\x96\x98a\x1D\x11a\x01\x92V[\x99\x8A\x98\x89\x97\x88\x96a\x1B\xCDV[\x86R`\x04\x86\x01a\x1C:V[\x03\x92Z\xF1\x80\x91_\x92a\x1D\xF4W[P\x15_\x14a\x1D\xAAWP`\x01a\x1DPWP[_\x80\x80\x80\x80a\x1C\xDEV[a\x1DXa\x1C\x99V[\x90a\x1Db\x82a\x14\xA2V[a\x1Dta\x1Dn_a\x14\xA6V[\x91a\x02\xFCV[\x14_\x14a\x1D\xA1Wa\x1D\x9D\x90a\x1D\x87a\x01\x92V[\x91\x82\x91c2PWI`\xE1\x1B\x83R`\x04\x83\x01a\x03dV[\x03\x90\xFD[P\x80Q\x90` \x01\xFD[a\x1D\xC3a\x1D\xBDc\n\x85\xBD\x01`\xE1\x1Ba\x01\xA4V[\x91a\x01\xA4V[\x03a\x1D\xCEWPa\x1DFV[a\x1D\xF0\x90a\x1D\xDAa\x01\x92V[\x91\x82\x91c2PWI`\xE1\x1B\x83R`\x04\x83\x01a\x03dV[\x03\x90\xFD[a\x1E\x16\x91\x92P` =\x81\x11a\x1E\x1DW[a\x1E\x0E\x81\x83a\x05\\V[\x81\x01\x90a\x1B\xE2V[\x90_a\x1D5V[P=a\x1E\x04V[a\x1E,a\rgV[Pa\x1E7`\x08a\rlV[\x90V[6\x907V[\x90a\x1Eda\x1EL\x83a\x12\xD6V[\x92` \x80a\x1EZ\x86\x93a\x05\x9AV[\x92\x01\x91\x03\x90a\x1E:V[V[`\x01a\x1Er\x91\x03a\x02\xFCV[\x90V[\x90V[a\x1E\x8Ca\x1E\x87a\x1E\x91\x92a\x1EuV[a\r\xC6V[a\x02\xFCV[\x90V[cNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[a\x1E\xB4a\x1E\xBA\x91a\x02\xFCV[\x91a\x02\xFCV[\x90\x81\x15a\x1E\xC5W\x04\x90V[a\x1E\x94V[a\x1E\xD2a\rgV[Pa\x1E\xEFa\x1E\xDF\x82a#\xFFV[a\x1E\xE9`\x01a\x17=V[\x90a\x17gV[\x90a\x1E\xF9\x82a\x1E?V[\x91a\x1F\x02a\x0F\xCCV[P` \x01\x82\x01[`\x01\x15a\x1FlWa\x1F\x1Ca\x1FH\x91a\x1EfV[\x91o\x18\x18\x99\x19\x9A\x1A\x9B\x1B\x9C\x1C\xB0\xB11\xB22\xB3`\x81\x1B`\n\x82\x06\x1A\x83Sa\x1FB`\na\x1ExV[\x90a\x1E\xA8V[\x80a\x1F[a\x1FU_a\x14\xA6V[\x91a\x02\xFCV[\x14a\x1FfW\x90a\x1F\tV[PP[\x90V[PPa\x1FiV[a\x1F{a\rNV[P\x80a\x1F\x96a\x1F\x90c\x80\xACX\xCD`\xE0\x1Ba\x01\xA4V[\x91a\x01\xA4V[\x14\x80\x15a\x1F\xBAW[\x90\x81\x15a\x1F\xAAW[P\x90V[a\x1F\xB4\x91Pa&`V[_a\x1F\xA6V[P\x80a\x1F\xD5a\x1F\xCFc[^\x13\x9F`\xE0\x1Ba\x01\xA4V[\x91a\x01\xA4V[\x14a\x1F\x9EV[a\x1F\xF2a\x1F\xF7\x91a\x1F\xEAa\r\x8DV[P`\x02a\x16\xBCV[a\x16\xF1V[\x90V[\x91\x90\x92\x80\x80\x15a!(W[a #W[PP\x90a \x1Ca !\x92\x91`\x04a\x16\xBCV[a\x17\x93V[V[a ,\x84a\x16_V[\x91\x80a Ha Ba =_a\r\xE5V[a\x03KV[\x91a\x03KV[\x14\x15\x80a!\rW[\x80a \xF3W[a \xCDWP\x91a \x1C\x91a !\x94\x93a rW[P\x91\x92a \nV[\x81\x84\x90a \xB1a \xABa \xA5\x7F\x8C[\xE1\xE5\xEB\xEC}[\xD1OqB}\x1E\x84\xF3\xDD\x03\x14\xC0\xF7\xB2)\x1E[ \n\xC8\xC7\xC3\xB9%\x95a\x13WV[\x92a\x13WV[\x92a\x0F\x8BV[\x92a \xBAa\x01\x92V[\x80a \xC4\x81a\x03\xFEV[\x03\x90\xA4_a jV[a \xEF\x90a \xD9a\x01\x92V[\x91\x82\x91c\xA9\xFB\xF5\x1F`\xE0\x1B\x83R`\x04\x83\x01a\x03dV[\x03\x90\xFD[Pa!\x08a!\x02\x84\x83\x90a\x15\xF7V[\x15a\x01\xF1V[a VV[P\x82a!!a!\x1B\x83a\x03KV[\x91a\x03KV[\x14\x15a PV[P\x81a!Da!>a!9_a\r\xE5V[a\x03KV[\x91a\x03KV[\x14\x15a \x05V[\x91` a!l\x92\x94\x93a!e`@\x82\x01\x96_\x83\x01\x90a\x03WV[\x01\x90a\x07\xD8V[V[a!\x83a!}\x82\x84\x86\x91a&\x86V[\x15a\x01\xF1V[a!\x8CWPPPV[a!\xA6a!\xA0a!\x9B_a\r\xE5V[a\x03KV[\x91a\x03KV[\x14_\x14a!\xD3Wa!\xCF\x82a!\xB9a\x01\x92V[\x91\x82\x91c~'2\x89`\xE0\x1B\x83R`\x04\x83\x01a\x07\xE5V[\x03\x90\xFD[a!\xF4a!\xDEa\x01\x92V[\x92\x83\x92c\x17~\x80/`\xE0\x1B\x84R`\x04\x84\x01a!KV[\x03\x90\xFD[\x91` a\"\x19\x92\x94\x93a\"\x12`@\x82\x01\x96_\x83\x01\x90a\x03WV[\x01\x90a\x04\xE9V[V[\x90a\"0a\"*\x83\x83\x90a\x14#V[\x15a\x01\xF1V[a\"8WPPV[a\"Ya\"Ca\x01\x92V[\x92\x83\x92c\xE2Q}?`\xE0\x1B\x84R`\x04\x84\x01a!\xF8V[\x03\x90\xFD[\x90\x91a\"\x89\x92a\"n\x83\x82\x90a'&V[a\"va\x17\x1DV[\x92a\"\x80_a\r\xE5V[\x90\x91\x92\x93a\x1C\xC2V[V[\x90V[a\"\xA2a\"\x9Da\"\xA7\x92a\"\x8BV[a\r\xC6V[a\x02\xFCV[\x90V[\x90V[a\"\xC1a\"\xBCa\"\xC6\x92a\"\xAAV[a\r\xC6V[a\x02\xFCV[\x90V[\x90V[a\"\xE0a\"\xDBa\"\xE5\x92a\"\xC9V[a\r\xC6V[a\x02\xFCV[\x90V[\x90V[a\"\xFFa\"\xFAa#\x04\x92a\"\xE8V[a\r\xC6V[a\x02\xFCV[\x90V[\x90V[a#\x1Ea#\x19a##\x92a#\x07V[a\r\xC6V[a\x02\xFCV[\x90V[\x90V[a#=a#8a#B\x92a#&V[a\r\xC6V[a\x02\xFCV[\x90V[\x90V[a#\\a#Wa#a\x92a#EV[a\r\xC6V[a\x02\xFCV[\x90V[\x90V[a#{a#va#\x80\x92a#dV[a\r\xC6V[a\x02\xFCV[\x90V[\x90V[a#\x9Aa#\x95a#\x9F\x92a#\x83V[a\r\xC6V[a\x02\xFCV[\x90V[\x90V[a#\xB9a#\xB4a#\xBE\x92a#\xA2V[a\r\xC6V[a\x02\xFCV[\x90V[\x90V[a#\xD8a#\xD3a#\xDD\x92a#\xC1V[a\r\xC6V[a\x02\xFCV[\x90V[\x90V[a#\xF7a#\xF2a#\xFC\x92a#\xE0V[a\r\xC6V[a\x02\xFCV[\x90V[a$\x07a\x0F\xCCV[Pa$\x11_a\x14\xA6V[\x90\x80a$@a$:z\x18O\x03\xE9?\xF9\xF4\xDA\xA7\x97\xEDn8\xEDd\xBFj\x1F\x01\0\0\0\0\0\0\0\0a\"\x8EV[\x91a\x02\xFCV[\x10\x15a&\x18W[\x80a$ha$bm\x04\xEE-mA[\x85\xAC\xEF\x81\0\0\0\0a\"\xCCV[\x91a\x02\xFCV[\x10\x15a%\xDDW[\x80a$\x89a$\x83f#\x86\xF2o\xC1\0\0a#\nV[\x91a\x02\xFCV[\x10\x15a%\xA9W[\x80a$\xA7a$\xA1c\x05\xF5\xE1\0a#HV[\x91a\x02\xFCV[\x10\x15a%xW[\x80a$\xC3a$\xBDa'\x10a#\x86V[\x91a\x02\xFCV[\x10\x15a%IW[\x80a$\xDEa$\xD8`da#\xC4V[\x91a\x02\xFCV[\x10\x15a%\x1BW[a$\xF8a$\xF2`\na\x1ExV[\x91a\x02\xFCV[\x10\x15a%\x02W[\x90V[a%\x16\x90a%\x10`\x01a\x17=V[\x90a\x17gV[a$\xFFV[a%2a%C\x91a%,`da#\xC4V[\x90a\x1E\xA8V[\x91a%=`\x02a#\xE3V[\x90a\x17gV[\x90a$\xE5V[a%aa%r\x91a%[a'\x10a#\x86V[\x90a\x1E\xA8V[\x91a%l`\x04a#\xA5V[\x90a\x17gV[\x90a$\xCAV[a%\x92a%\xA3\x91a%\x8Cc\x05\xF5\xE1\0a#HV[\x90a\x1E\xA8V[\x91a%\x9D`\x08a#gV[\x90a\x17gV[\x90a$\xAEV[a%\xC6a%\xD7\x91a%\xC0f#\x86\xF2o\xC1\0\0a#\nV[\x90a\x1E\xA8V[\x91a%\xD1`\x10a#)V[\x90a\x17gV[\x90a$\x90V[a&\x01a&\x12\x91a%\xFBm\x04\xEE-mA[\x85\xAC\xEF\x81\0\0\0\0a\"\xCCV[\x90a\x1E\xA8V[\x91a&\x0C` a\"\xEBV[\x90a\x17gV[\x90a$oV[a&Ia&Z\x91a&Cz\x18O\x03\xE9?\xF9\xF4\xDA\xA7\x97\xEDn8\xEDd\xBFj\x1F\x01\0\0\0\0\0\0\0\0a\"\x8EV[\x90a\x1E\xA8V[\x91a&T`@a\"\xADV[\x90a\x17gV[\x90a$GV[a&ha\rNV[Pa&\x82a&|c\x01\xFF\xC9\xA7`\xE0\x1Ba\x01\xA4V[\x91a\x01\xA4V[\x14\x90V[\x91\x90a&\x90a\rNV[P\x80a&\xACa&\xA6a&\xA1_a\r\xE5V[a\x03KV[\x91a\x03KV[\x14\x15\x92\x83a&\xBBW[PPP\x90V[\x80\x91\x92\x93Pa&\xD2a&\xCC\x84a\x03KV[\x91a\x03KV[\x14\x90\x81\x15a'\x14W[P\x91\x82\x15a&\xEEW[PP_\x80\x80a&\xB5V[a'\x0C\x91\x92Pa'\0a'\x06\x91a\x16\xFEV[\x92a\x03KV[\x91a\x03KV[\x14_\x80a&\xE4V[a' \x91P\x82\x90a\x15\xF7V[_a&\xDBV[\x90\x81a'Ba'<a'7_a\r\xE5V[a\x03KV[\x91a\x03KV[\x14a'\xAAWa'[\x91\x90a'U_a\r\xE5V[\x91a\x17\xB3V[a'ua'oa'j_a\r\xE5V[a\x03KV[\x91a\x03KV[\x03a'|WV[a'\xA6a'\x88_a\r\xE5V[a'\x90a\x01\x92V[\x91\x82\x91c9\xE3V7`\xE1\x1B\x83R`\x04\x83\x01a\x03dV[\x03\x90\xFD[a'\xD4a'\xB6_a\r\xE5V[a'\xBEa\x01\x92V[\x91\x82\x91c2PWI`\xE1\x1B\x83R`\x04\x83\x01a\x03dV[\x03\x90\xFD\xFE\xA2dipfsX\"\x12 \xB4\xD8\x9Cq[\xCEQ\x0F}\xEAy\x8B%F\r\x12\x89++h\xE7\xA1\x8F\xF5\xEA\xF2\xE8lr7\xD5\xAAdsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b610d4a565b61001d5f3561018c565b806301ffc9a71461018757806306fdde0314610182578063081812fc1461017d578063095ea7b31461017857806323b872dd14610173578063248a9ca31461016e5780632d0e12d4146101695780632f2ff15d1461016457806336568abe1461015f57806340d097c31461015a57806342842e0e146101555780636352211e1461015057806370a082311461014b57806391d148541461014657806395d89b4114610141578063a217fddf1461013c578063a22cb46514610137578063b88d4fde14610132578063c87b56dd1461012d578063d539139314610128578063d547741f14610123578063e985e9c51461011e5763f68472890361000e57610d15565b610b9a565b610b39565b610b04565b610aa0565b610a69565b61095a565b6108d5565b610865565b61082f565b6107fa565b6107a3565b61076f565b61073c565b6106ea565b6106b6565b610656565b61050b565b610471565b610403565b610379565b6102c7565b610218565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b63ffffffff60e01b1690565b6101b9816101a4565b036101c057565b5f80fd5b905035906101d1826101b0565b565b906020828203126101ec576101e9915f016101c4565b90565b61019c565b151590565b6101ff906101f1565b9052565b9190610216905f602085019401906101f6565b565b346102485761024461023361022e3660046101d3565b610d52565b61023b610192565b91829182610203565b0390f35b610198565b5f91031261025757565b61019c565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b61029d6102a66020936102ab936102948161025c565b93848093610260565b95869101610269565b610274565b0190565b6102c49160208201915f81840391015261027e565b90565b346102f7576102d736600461024d565b6102f36102e2610d78565b6102ea610192565b918291826102af565b0390f35b610198565b90565b610308816102fc565b0361030f57565b5f80fd5b90503590610320826102ff565b565b9060208282031261033b57610338915f01610313565b90565b61019c565b60018060a01b031690565b61035490610340565b90565b6103609061034b565b9052565b9190610377905f60208501940190610357565b565b346103a9576103a561039461038f366004610322565b610d91565b61039c610192565b91829182610364565b0390f35b610198565b6103b78161034b565b036103be57565b5f80fd5b905035906103cf826103ae565b565b91906040838203126103f957806103ed6103f6925f86016103c2565b93602001610313565b90565b61019c565b5f0190565b346104325761041c6104163660046103d1565b90610db0565b610424610192565b8061042e816103fe565b0390f35b610198565b909160608284031261046c57610469610452845f85016103c2565b9361046081602086016103c2565b93604001610313565b90565b61019c565b346104a05761048a610484366004610437565b91610e23565b610492610192565b8061049c816103fe565b0390f35b610198565b90565b6104b1816104a5565b036104b857565b5f80fd5b905035906104c9826104a8565b565b906020828203126104e4576104e1915f016104bc565b90565b61019c565b6104f2906104a5565b9052565b9190610509905f602085019401906104e9565b565b3461053b576105376105266105213660046104cb565b610f1b565b61052e610192565b918291826104f6565b0390f35b610198565b5f80fd5b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b9061056690610274565b810190811067ffffffffffffffff82111761058057604052565b610548565b90610598610591610192565b928361055c565b565b67ffffffffffffffff81116105b8576105b4602091610274565b0190565b610548565b90825f939282370152565b909291926105dd6105d88261059a565b610585565b938185526020850190828401116105f9576105f7926105bd565b565b610544565b9080601f8301121561061c57816020610619933591016105c8565b90565b610540565b90602082820312610651575f82013567ffffffffffffffff811161064c5761064992016105fe565b90565b6101a0565b61019c565b346106845761066e610669366004610621565b61116d565b610676610192565b80610680816103fe565b0390f35b610198565b91906040838203126106b157806106a56106ae925f86016104bc565b936020016103c2565b90565b61019c565b346106e5576106cf6106c9366004610689565b906111a2565b6106d7610192565b806106e1816103fe565b0390f35b610198565b34610719576107036106fd366004610689565b906111ae565b61070b610192565b80610715816103fe565b0390f35b610198565b9060208282031261073757610734915f016103c2565b90565b61019c565b3461076a5761075461074f36600461071e565b6112cb565b61075c610192565b80610766816103fe565b0390f35b610198565b3461079e57610788610782366004610437565b91611304565b610790610192565b8061079a816103fe565b0390f35b610198565b346107d3576107cf6107be6107b9366004610322565b61131a565b6107c6610192565b91829182610364565b0390f35b610198565b6107e1906102fc565b9052565b91906107f8905f602085019401906107d8565b565b3461082a5761082661081561081036600461071e565b611379565b61081d610192565b918291826107e5565b0390f35b610198565b346108605761085c61084b610845366004610689565b90611423565b610853610192565b91829182610203565b0390f35b610198565b346108955761087536600461024d565b61089161088061144d565b610888610192565b918291826102af565b0390f35b610198565b90565b5f1b90565b6108b66108b16108bb9261089a565b61089d565b6104a5565b90565b6108c75f6108a2565b90565b6108d26108be565b90565b34610905576108e536600461024d565b6109016108f06108ca565b6108f8610192565b918291826104f6565b0390f35b610198565b610913816101f1565b0361091a57565b5f80fd5b9050359061092b8261090a565b565b91906040838203126109555780610949610952925f86016103c2565b9360200161091e565b90565b61019c565b346109895761097361096d36600461092d565b90611463565b61097b610192565b80610985816103fe565b0390f35b610198565b67ffffffffffffffff81116109ac576109a8602091610274565b0190565b610548565b909291926109c66109c18261098e565b610585565b938185526020850190828401116109e2576109e0926105bd565b565b610544565b9080601f83011215610a0557816020610a02933591016109b1565b90565b610540565b90608082820312610a6457610a21815f84016103c2565b92610a2f82602085016103c2565b92610a3d8360408301610313565b92606082013567ffffffffffffffff8111610a5f57610a5c92016109e7565b90565b6101a0565b61019c565b34610a9b57610a85610a7c366004610a0a565b92919091611479565b610a8d610192565b80610a97816103fe565b0390f35b610198565b34610ad057610acc610abb610ab6366004610322565b61153f565b610ac3610192565b918291826102af565b0390f35b610198565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a690565b610b01610ad5565b90565b34610b3457610b1436600461024d565b610b30610b1f610af9565b610b27610192565b918291826104f6565b0390f35b610198565b34610b6857610b52610b4c366004610689565b906115d5565b610b5a610192565b80610b64816103fe565b0390f35b610198565b9190604083820312610b955780610b89610b92925f86016103c2565b936020016103c2565b90565b61019c565b34610bcb57610bc7610bb6610bb0366004610b6d565b906115f7565b610bbe610192565b91829182610203565b0390f35b610198565b634e487b7160e01b5f525f60045260245ffd5b634e487b7160e01b5f52602260045260245ffd5b9060016002830492168015610c17575b6020831014610c1257565b610be3565b91607f1691610c07565b60209181520190565b5f5260205f2090565b905f9291805490610c4d610c4683610bf7565b8094610c21565b916001811690815f14610ca45750600114610c68575b505050565b610c759192939450610c2a565b915f925b818410610c8c57505001905f8080610c63565b60018160209295939554848601520191019290610c79565b92949550505060ff19168252151560200201905f8080610c63565b90610cc991610c33565b90565b90610cec610ce592610cdc610192565b93848092610cbf565b038361055c565b565b905f10610d0157610cfe90610ccc565b90565b610bd0565b610d1260085f90610cee565b90565b34610d4557610d2536600461024d565b610d41610d30610d06565b610d38610192565b918291826102af565b0390f35b610198565b5f80fd5b5f90565b610d6490610d5e610d4e565b5061161f565b90565b606090565b610d7590610ccc565b90565b610d80610d67565b50610d8a5f610d6c565b90565b5f90565b610dad90610d9d610d8d565b50610da78161165f565b506116fe565b90565b90610dc49190610dbe61171d565b9161172a565b565b90565b610ddd610dd8610de29261089a565b610dc6565b610340565b90565b610dee90610dc9565b90565b604090610e1a610e219496959396610e1060608401985f850190610357565b60208301906107d8565b0190610357565b565b919080610e40610e3a610e355f610de5565b61034b565b9161034b565b14610e9e57610e589082610e5261171d565b916117b3565b9182610e6c610e668361034b565b9161034b565b03610e7657505050565b610e9a909192610e84610192565b9384936364283d7b60e01b855260048501610df1565b0390fd5b610ec8610eaa5f610de5565b610eb2610192565b918291633250574960e11b835260048301610364565b0390fd5b5f90565b610ed9906104a5565b90565b90610ee690610ed0565b5f5260205260405f2090565b5f1c90565b90565b610f06610f0b91610ef2565b610ef7565b90565b610f189054610efa565b90565b6001610f34610f3a92610f2c610ecc565b506006610edc565b01610f0e565b90565b610f5690610f51610f4c6108be565b611934565b611160565b565b601f602091010490565b1b90565b91906008610f81910291610f7b5f1984610f62565b92610f62565b9181191691161790565b610f9f610f9a610fa4926102fc565b610dc6565b6102fc565b90565b90565b9190610fc0610fbb610fc893610f8b565b610fa7565b908354610f66565b9055565b5f90565b610fe291610fdc610fcc565b91610faa565b565b5b818110610ff0575050565b80610ffd5f600193610fd0565b01610fe5565b9190601f8111611013575b505050565b61101f61104493610c2a565b90602061102b84610f58565b8301931061104c575b61103d90610f58565b0190610fe4565b5f808061100e565b915061103d81929050611034565b1c90565b9061106e905f199060080261105a565b191690565b8161107d9161105e565b906002021790565b9061108f8161025c565b9067ffffffffffffffff821161114f576110b3826110ad8554610bf7565b85611003565b602090601f83116001146110e7579180916110d6935f926110db575b5050611073565b90555b565b90915001515f806110cf565b601f198316916110f685610c2a565b925f5b8181106111375750916002939185600196941061111d575b505050020190556110d9565b61112d910151601f84169061105e565b90555f8080611111565b919360206001819287870151815501950192016110f9565b610548565b9061115e91611085565b565b61116b906008611154565b565b61117690610f3d565b565b906111939161118e61118982610f1b565b611934565b611195565b565b9061119f9161198d565b50565b906111ac91611178565b565b90806111c96111c36111be61171d565b61034b565b9161034b565b036111da576111d791611a39565b50565b6111e2610192565b63334bd91960e11b8152806111f9600482016103fe565b0390fd5b6112169061121161120c610ad5565b611934565b6112a2565b565b90565b61122761122c91610ef2565b611218565b90565b611239905461121b565b90565b634e487b7160e01b5f52601160045260245ffd5b611259906102fc565b5f1981146112675760010190565b61123c565b906112785f199161089d565b9181191691161790565b9061129761129261129e92610f8b565b610fa7565b825461126c565b9055565b6112c9906112b0600761122f565b6112c36112bc82611250565b6007611282565b90611adb565b565b6112d4906111fd565b565b906112e86112e38361059a565b610585565b918252565b6112f65f6112d6565b90565b6113016112ed565b90565b9161131892916113126112f9565b92611479565b565b61132c90611326610d8d565b5061165f565b90565b61134361133e61134892610340565b610dc6565b610340565b90565b6113549061132f565b90565b6113609061134b565b90565b9061136d90611357565b5f5260205260405f2090565b611381610fcc565b508061139d6113976113925f610de5565b61034b565b9161034b565b146113b8576113b06113b5916003611363565b61122f565b90565b6113e26113c45f610de5565b6113cc610192565b9182916322718ad960e21b835260048301610364565b0390fd5b906113f090611357565b5f5260205260405f2090565b60ff1690565b61140e61141391610ef2565b6113fc565b90565b6114209054611402565b90565b61144a915f61143f61144593611437610d4e565b506006610edc565b016113e6565b611416565b90565b611455610d67565b506114606001610d6c565b90565b6114779161146f61171d565b919091611af1565b565b9161149d939161148b84828491610e23565b61149361171d565b9390919293611cc2565b565b90565b5190565b6114ba6114b56114bf9261089a565b610dc6565b6102fc565b90565b6114ca6112ed565b90565b905090565b6114f76114ee926020926114e58161025c565b948580936114cd565b93849101610269565b0190565b6115099061150f93926114d2565b906114d2565b90565b611531929161153d91611523610192565b9485926020840192836114fb565b9081038252038361055c565b565b611547610d67565b506115518161165f565b5061155a611e24565b9061156c6115678361149f565b6114a2565b61157e6115785f6114a6565b916102fc565b115f1461159c576115926115989291611eca565b90611512565b5b90565b50506115a66114c2565b611599565b906115c6916115c16115bc82610f1b565b611934565b6115c8565b565b906115d291611a39565b50565b906115df916115ab565b565b906115eb90611357565b5f5260205260405f2090565b61161c916116126116179261160a610d4e565b5060056115e1565b6113e6565b611416565b90565b611627610d4e565b508061164261163c637965db0b60e01b6101a4565b916101a4565b1490811561164f575b5090565b6116599150611f73565b5f61164b565b611667610d8d565b5061167181611fdb565b908161168d6116876116825f610de5565b61034b565b9161034b565b14611696575090565b6116b8906116a2610192565b918291637e27328960e01b8352600483016107e5565b0390fd5b906116c690610f8b565b5f5260205260405f2090565b60018060a01b031690565b6116e96116ee91610ef2565b6116d2565b90565b6116fb90546116dd565b90565b61171561171a9161170d610d8d565b5060046116bc565b6116f1565b90565b611725610d8d565b503390565b916117389291600192611ffa565b565b90565b61175161174c6117569261173a565b610dc6565b6102fc565b90565b9061176491036102fc565b90565b9061177291016102fc565b90565b9061178660018060a01b039161089d565b9181191691161790565b90565b906117a86117a36117af92611357565b611790565b8254611775565b9055565b906117bc610d8d565b506117c681611fdb565b92806117e26117dc6117d75f610de5565b61034b565b9161034b565b03611921575b50826118046117fe6117f95f610de5565b61034b565b9161034b565b036118cd575b8161182561181f61181a5f610de5565b61034b565b9161034b565b03611897575b6118408261183b600284906116bc565b611793565b829161187e6118786118727fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef95611357565b92611357565b92610f8b565b92611887610192565b80611891816103fe565b0390a490565b6118c86118a4600161173d565b6118c26118b360038690611363565b916118bd8361122f565b611767565b90611282565b61182b565b6118eb6118d95f610de5565b826118e35f610de5565b905f92611ffa565b61191c6118f8600161173d565b61191661190760038790611363565b916119118361122f565b611759565b90611282565b61180a565b61192e908490839161216e565b5f6117e8565b6119469061194061171d565b9061221b565b565b9061195460ff9161089d565b9181191691161790565b611967906101f1565b90565b90565b9061198261197d6119899261195e565b61196a565b8254611948565b9055565b611995610d4e565b506119aa6119a4828490611423565b156101f1565b5f14611a33576119d260016119cd5f6119c560068690610edc565b0185906113e6565b61196d565b906119db61171d565b90611a18611a12611a0c7f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d95610ed0565b92611357565b92611357565b92611a21610192565b80611a2b816103fe565b0390a4600190565b50505f90565b611a41610d4e565b50611a4d818390611423565b5f14611ad557611a745f611a6f5f611a6760068690610edc565b0185906113e6565b61196d565b90611a7d61171d565b90611aba611ab4611aae7ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b95610ed0565b92611357565b92611357565b92611ac3610192565b80611acd816103fe565b0390a4600190565b50505f90565b90611aef9190611ae96112f9565b9161225d565b565b91909182611b0f611b09611b045f610de5565b61034b565b9161034b565b14611b8357611b3382611b2e611b27600585906115e1565b86906113e6565b61196d565b919091611b7e611b6c611b667f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3193611357565b93611357565b93611b75610192565b91829182610203565b0390a3565b611ba583611b8f610192565b918291630b61174360e31b835260048301610364565b0390fd5b611bb29061132f565b90565b611bbe90611ba9565b90565b611bca9061134b565b90565b60e01b90565b90505190611be0826101b0565b565b90602082820312611bfb57611bf8915f01611bd3565b90565b61019c565b60209181520190565b611c28611c31602093611c3693611c1f816114a2565b93848093611c00565b95869101610269565b610274565b0190565b9092611c6d90611c63611c7a9694611c5960808601975f870190610357565b6020850190610357565b60408301906107d8565b6060818403910152611c09565b90565b90611c8f611c8a8361098e565b610585565b918252565b606090565b3d5f14611cb457611ca93d611c7d565b903d5f602084013e5b565b611cbc611c94565b90611cb2565b9193843b611cd8611cd25f6114a6565b916102fc565b11611ce5575b5050505050565b611d1d5f602094611d28611d00611cfb8a611bb5565b611bc1565b9463150b7a02929698611d11610192565b998a9889978896611bcd565b865260048601611c3a565b03925af180915f92611df4575b50155f14611daa57506001611d5057505b5f80808080611cde565b611d58611c99565b90611d62826114a2565b611d74611d6e5f6114a6565b916102fc565b145f14611da157611d9d90611d87610192565b918291633250574960e11b835260048301610364565b0390fd5b50805190602001fd5b611dc3611dbd630a85bd0160e11b6101a4565b916101a4565b03611dce5750611d46565b611df090611dda610192565b918291633250574960e11b835260048301610364565b0390fd5b611e1691925060203d8111611e1d575b611e0e818361055c565b810190611be2565b905f611d35565b503d611e04565b611e2c610d67565b50611e376008610d6c565b90565b369037565b90611e64611e4c836112d6565b92602080611e5a869361059a565b9201910390611e3a565b565b6001611e7291036102fc565b90565b90565b611e8c611e87611e9192611e75565b610dc6565b6102fc565b90565b634e487b7160e01b5f52601260045260245ffd5b611eb4611eba916102fc565b916102fc565b908115611ec5570490565b611e94565b611ed2610d67565b50611eef611edf826123ff565b611ee9600161173d565b90611767565b90611ef982611e3f565b91611f02610fcc565b5060200182015b600115611f6c57611f1c611f4891611e66565b916f181899199a1a9b1b9c1cb0b131b232b360811b600a82061a8353611f42600a611e78565b90611ea8565b80611f5b611f555f6114a6565b916102fc565b14611f665790611f09565b50505b90565b5050611f69565b611f7b610d4e565b5080611f96611f906380ac58cd60e01b6101a4565b916101a4565b148015611fba575b908115611faa575b5090565b611fb49150612660565b5f611fa6565b5080611fd5611fcf635b5e139f60e01b6101a4565b916101a4565b14611f9e565b611ff2611ff791611fea610d8d565b5060026116bc565b6116f1565b90565b919092808015612128575b612023575b50509061201c612021929160046116bc565b611793565b565b61202c8461165f565b918061204861204261203d5f610de5565b61034b565b9161034b565b14158061210d575b806120f3575b6120cd57509161201c916120219493612072575b50919261200a565b8184906120b16120ab6120a57f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92595611357565b92611357565b92610f8b565b926120ba610192565b806120c4816103fe565b0390a45f61206a565b6120ef906120d9610192565b91829163a9fbf51f60e01b835260048301610364565b0390fd5b506121086121028483906115f7565b156101f1565b612056565b508261212161211b8361034b565b9161034b565b1415612050565b508161214461213e6121395f610de5565b61034b565b9161034b565b1415612005565b91602061216c92949361216560408201965f830190610357565b01906107d8565b565b61218361217d82848691612686565b156101f1565b61218c57505050565b6121a66121a061219b5f610de5565b61034b565b9161034b565b145f146121d3576121cf826121b9610192565b918291637e27328960e01b8352600483016107e5565b0390fd5b6121f46121de610192565b92839263177e802f60e01b84526004840161214b565b0390fd5b91602061221992949361221260408201965f830190610357565b01906104e9565b565b9061223061222a838390611423565b156101f1565b612238575050565b612259612243610192565b92839263e2517d3f60e01b8452600484016121f8565b0390fd5b90916122899261226e838290612726565b61227661171d565b926122805f610de5565b90919293611cc2565b565b90565b6122a261229d6122a79261228b565b610dc6565b6102fc565b90565b90565b6122c16122bc6122c6926122aa565b610dc6565b6102fc565b90565b90565b6122e06122db6122e5926122c9565b610dc6565b6102fc565b90565b90565b6122ff6122fa612304926122e8565b610dc6565b6102fc565b90565b90565b61231e61231961232392612307565b610dc6565b6102fc565b90565b90565b61233d61233861234292612326565b610dc6565b6102fc565b90565b90565b61235c61235761236192612345565b610dc6565b6102fc565b90565b90565b61237b61237661238092612364565b610dc6565b6102fc565b90565b90565b61239a61239561239f92612383565b610dc6565b6102fc565b90565b90565b6123b96123b46123be926123a2565b610dc6565b6102fc565b90565b90565b6123d86123d36123dd926123c1565b610dc6565b6102fc565b90565b90565b6123f76123f26123fc926123e0565b610dc6565b6102fc565b90565b612407610fcc565b506124115f6114a6565b908061244061243a7a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000061228e565b916102fc565b1015612618575b806124686124626d04ee2d6d415b85acef81000000006122cc565b916102fc565b10156125dd575b80612489612483662386f26fc1000061230a565b916102fc565b10156125a9575b806124a76124a16305f5e100612348565b916102fc565b1015612578575b806124c36124bd612710612386565b916102fc565b1015612549575b806124de6124d860646123c4565b916102fc565b101561251b575b6124f86124f2600a611e78565b916102fc565b1015612502575b90565b61251690612510600161173d565b90611767565b6124ff565b6125326125439161252c60646123c4565b90611ea8565b9161253d60026123e3565b90611767565b906124e5565b6125616125729161255b612710612386565b90611ea8565b9161256c60046123a5565b90611767565b906124ca565b6125926125a39161258c6305f5e100612348565b90611ea8565b9161259d6008612367565b90611767565b906124ae565b6125c66125d7916125c0662386f26fc1000061230a565b90611ea8565b916125d16010612329565b90611767565b90612490565b612601612612916125fb6d04ee2d6d415b85acef81000000006122cc565b90611ea8565b9161260c60206122eb565b90611767565b9061246f565b61264961265a916126437a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000061228e565b90611ea8565b9161265460406122ad565b90611767565b90612447565b612668610d4e565b5061268261267c6301ffc9a760e01b6101a4565b916101a4565b1490565b9190612690610d4e565b50806126ac6126a66126a15f610de5565b61034b565b9161034b565b141592836126bb575b50505090565b80919293506126d26126cc8461034b565b9161034b565b14908115612714575b509182156126ee575b50505f80806126b5565b61270c919250612700612706916116fe565b9261034b565b9161034b565b145f806126e4565b612720915082906115f7565b5f6126db565b908161274261273c6127375f610de5565b61034b565b9161034b565b146127aa5761275b91906127555f610de5565b916117b3565b61277561276f61276a5f610de5565b61034b565b9161034b565b0361277c57565b6127a66127885f610de5565b612790610192565b9182916339e3563760e11b835260048301610364565b0390fd5b6127d46127b65f610de5565b6127be610192565b918291633250574960e11b835260048301610364565b0390fdfea2646970667358221220b4d89c715bce510f7dea798b25460d12892b2b68e7a18ff5eaf2e86c7237d5aa64736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\rJV[a\0\x1D_5a\x01\x8CV[\x80c\x01\xFF\xC9\xA7\x14a\x01\x87W\x80c\x06\xFD\xDE\x03\x14a\x01\x82W\x80c\x08\x18\x12\xFC\x14a\x01}W\x80c\t^\xA7\xB3\x14a\x01xW\x80c#\xB8r\xDD\x14a\x01sW\x80c$\x8A\x9C\xA3\x14a\x01nW\x80c-\x0E\x12\xD4\x14a\x01iW\x80c//\xF1]\x14a\x01dW\x80c6V\x8A\xBE\x14a\x01_W\x80c@\xD0\x97\xC3\x14a\x01ZW\x80cB\x84.\x0E\x14a\x01UW\x80ccR!\x1E\x14a\x01PW\x80cp\xA0\x821\x14a\x01KW\x80c\x91\xD1HT\x14a\x01FW\x80c\x95\xD8\x9BA\x14a\x01AW\x80c\xA2\x17\xFD\xDF\x14a\x01<W\x80c\xA2,\xB4e\x14a\x017W\x80c\xB8\x8DO\xDE\x14a\x012W\x80c\xC8{V\xDD\x14a\x01-W\x80c\xD59\x13\x93\x14a\x01(W\x80c\xD5Gt\x1F\x14a\x01#W\x80c\xE9\x85\xE9\xC5\x14a\x01\x1EWc\xF6\x84r\x89\x03a\0\x0EWa\r\x15V[a\x0B\x9AV[a\x0B9V[a\x0B\x04V[a\n\xA0V[a\niV[a\tZV[a\x08\xD5V[a\x08eV[a\x08/V[a\x07\xFAV[a\x07\xA3V[a\x07oV[a\x07<V[a\x06\xEAV[a\x06\xB6V[a\x06VV[a\x05\x0BV[a\x04qV[a\x04\x03V[a\x03yV[a\x02\xC7V[a\x02\x18V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[c\xFF\xFF\xFF\xFF`\xE0\x1B\x16\x90V[a\x01\xB9\x81a\x01\xA4V[\x03a\x01\xC0WV[_\x80\xFD[\x90P5\x90a\x01\xD1\x82a\x01\xB0V[V[\x90` \x82\x82\x03\x12a\x01\xECWa\x01\xE9\x91_\x01a\x01\xC4V[\x90V[a\x01\x9CV[\x15\x15\x90V[a\x01\xFF\x90a\x01\xF1V[\x90RV[\x91\x90a\x02\x16\x90_` \x85\x01\x94\x01\x90a\x01\xF6V[V[4a\x02HWa\x02Da\x023a\x02.6`\x04a\x01\xD3V[a\rRV[a\x02;a\x01\x92V[\x91\x82\x91\x82a\x02\x03V[\x03\x90\xF3[a\x01\x98V[_\x91\x03\x12a\x02WWV[a\x01\x9CV[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x02\x9Da\x02\xA6` \x93a\x02\xAB\x93a\x02\x94\x81a\x02\\V[\x93\x84\x80\x93a\x02`V[\x95\x86\x91\x01a\x02iV[a\x02tV[\x01\x90V[a\x02\xC4\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x02~V[\x90V[4a\x02\xF7Wa\x02\xD76`\x04a\x02MV[a\x02\xF3a\x02\xE2a\rxV[a\x02\xEAa\x01\x92V[\x91\x82\x91\x82a\x02\xAFV[\x03\x90\xF3[a\x01\x98V[\x90V[a\x03\x08\x81a\x02\xFCV[\x03a\x03\x0FWV[_\x80\xFD[\x90P5\x90a\x03 \x82a\x02\xFFV[V[\x90` \x82\x82\x03\x12a\x03;Wa\x038\x91_\x01a\x03\x13V[\x90V[a\x01\x9CV[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x03T\x90a\x03@V[\x90V[a\x03`\x90a\x03KV[\x90RV[\x91\x90a\x03w\x90_` \x85\x01\x94\x01\x90a\x03WV[V[4a\x03\xA9Wa\x03\xA5a\x03\x94a\x03\x8F6`\x04a\x03\"V[a\r\x91V[a\x03\x9Ca\x01\x92V[\x91\x82\x91\x82a\x03dV[\x03\x90\xF3[a\x01\x98V[a\x03\xB7\x81a\x03KV[\x03a\x03\xBEWV[_\x80\xFD[\x90P5\x90a\x03\xCF\x82a\x03\xAEV[V[\x91\x90`@\x83\x82\x03\x12a\x03\xF9W\x80a\x03\xEDa\x03\xF6\x92_\x86\x01a\x03\xC2V[\x93` \x01a\x03\x13V[\x90V[a\x01\x9CV[_\x01\x90V[4a\x042Wa\x04\x1Ca\x04\x166`\x04a\x03\xD1V[\x90a\r\xB0V[a\x04$a\x01\x92V[\x80a\x04.\x81a\x03\xFEV[\x03\x90\xF3[a\x01\x98V[\x90\x91``\x82\x84\x03\x12a\x04lWa\x04ia\x04R\x84_\x85\x01a\x03\xC2V[\x93a\x04`\x81` \x86\x01a\x03\xC2V[\x93`@\x01a\x03\x13V[\x90V[a\x01\x9CV[4a\x04\xA0Wa\x04\x8Aa\x04\x846`\x04a\x047V[\x91a\x0E#V[a\x04\x92a\x01\x92V[\x80a\x04\x9C\x81a\x03\xFEV[\x03\x90\xF3[a\x01\x98V[\x90V[a\x04\xB1\x81a\x04\xA5V[\x03a\x04\xB8WV[_\x80\xFD[\x90P5\x90a\x04\xC9\x82a\x04\xA8V[V[\x90` \x82\x82\x03\x12a\x04\xE4Wa\x04\xE1\x91_\x01a\x04\xBCV[\x90V[a\x01\x9CV[a\x04\xF2\x90a\x04\xA5V[\x90RV[\x91\x90a\x05\t\x90_` \x85\x01\x94\x01\x90a\x04\xE9V[V[4a\x05;Wa\x057a\x05&a\x05!6`\x04a\x04\xCBV[a\x0F\x1BV[a\x05.a\x01\x92V[\x91\x82\x91\x82a\x04\xF6V[\x03\x90\xF3[a\x01\x98V[_\x80\xFD[_\x80\xFD[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x05f\x90a\x02tV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x05\x80W`@RV[a\x05HV[\x90a\x05\x98a\x05\x91a\x01\x92V[\x92\x83a\x05\\V[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05\xB8Wa\x05\xB4` \x91a\x02tV[\x01\x90V[a\x05HV[\x90\x82_\x93\x92\x827\x01RV[\x90\x92\x91\x92a\x05\xDDa\x05\xD8\x82a\x05\x9AV[a\x05\x85V[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\x05\xF9Wa\x05\xF7\x92a\x05\xBDV[V[a\x05DV[\x90\x80`\x1F\x83\x01\x12\x15a\x06\x1CW\x81` a\x06\x19\x935\x91\x01a\x05\xC8V[\x90V[a\x05@V[\x90` \x82\x82\x03\x12a\x06QW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x06LWa\x06I\x92\x01a\x05\xFEV[\x90V[a\x01\xA0V[a\x01\x9CV[4a\x06\x84Wa\x06na\x06i6`\x04a\x06!V[a\x11mV[a\x06va\x01\x92V[\x80a\x06\x80\x81a\x03\xFEV[\x03\x90\xF3[a\x01\x98V[\x91\x90`@\x83\x82\x03\x12a\x06\xB1W\x80a\x06\xA5a\x06\xAE\x92_\x86\x01a\x04\xBCV[\x93` \x01a\x03\xC2V[\x90V[a\x01\x9CV[4a\x06\xE5Wa\x06\xCFa\x06\xC96`\x04a\x06\x89V[\x90a\x11\xA2V[a\x06\xD7a\x01\x92V[\x80a\x06\xE1\x81a\x03\xFEV[\x03\x90\xF3[a\x01\x98V[4a\x07\x19Wa\x07\x03a\x06\xFD6`\x04a\x06\x89V[\x90a\x11\xAEV[a\x07\x0Ba\x01\x92V[\x80a\x07\x15\x81a\x03\xFEV[\x03\x90\xF3[a\x01\x98V[\x90` \x82\x82\x03\x12a\x077Wa\x074\x91_\x01a\x03\xC2V[\x90V[a\x01\x9CV[4a\x07jWa\x07Ta\x07O6`\x04a\x07\x1EV[a\x12\xCBV[a\x07\\a\x01\x92V[\x80a\x07f\x81a\x03\xFEV[\x03\x90\xF3[a\x01\x98V[4a\x07\x9EWa\x07\x88a\x07\x826`\x04a\x047V[\x91a\x13\x04V[a\x07\x90a\x01\x92V[\x80a\x07\x9A\x81a\x03\xFEV[\x03\x90\xF3[a\x01\x98V[4a\x07\xD3Wa\x07\xCFa\x07\xBEa\x07\xB96`\x04a\x03\"V[a\x13\x1AV[a\x07\xC6a\x01\x92V[\x91\x82\x91\x82a\x03dV[\x03\x90\xF3[a\x01\x98V[a\x07\xE1\x90a\x02\xFCV[\x90RV[\x91\x90a\x07\xF8\x90_` \x85\x01\x94\x01\x90a\x07\xD8V[V[4a\x08*Wa\x08&a\x08\x15a\x08\x106`\x04a\x07\x1EV[a\x13yV[a\x08\x1Da\x01\x92V[\x91\x82\x91\x82a\x07\xE5V[\x03\x90\xF3[a\x01\x98V[4a\x08`Wa\x08\\a\x08Ka\x08E6`\x04a\x06\x89V[\x90a\x14#V[a\x08Sa\x01\x92V[\x91\x82\x91\x82a\x02\x03V[\x03\x90\xF3[a\x01\x98V[4a\x08\x95Wa\x08u6`\x04a\x02MV[a\x08\x91a\x08\x80a\x14MV[a\x08\x88a\x01\x92V[\x91\x82\x91\x82a\x02\xAFV[\x03\x90\xF3[a\x01\x98V[\x90V[_\x1B\x90V[a\x08\xB6a\x08\xB1a\x08\xBB\x92a\x08\x9AV[a\x08\x9DV[a\x04\xA5V[\x90V[a\x08\xC7_a\x08\xA2V[\x90V[a\x08\xD2a\x08\xBEV[\x90V[4a\t\x05Wa\x08\xE56`\x04a\x02MV[a\t\x01a\x08\xF0a\x08\xCAV[a\x08\xF8a\x01\x92V[\x91\x82\x91\x82a\x04\xF6V[\x03\x90\xF3[a\x01\x98V[a\t\x13\x81a\x01\xF1V[\x03a\t\x1AWV[_\x80\xFD[\x90P5\x90a\t+\x82a\t\nV[V[\x91\x90`@\x83\x82\x03\x12a\tUW\x80a\tIa\tR\x92_\x86\x01a\x03\xC2V[\x93` \x01a\t\x1EV[\x90V[a\x01\x9CV[4a\t\x89Wa\tsa\tm6`\x04a\t-V[\x90a\x14cV[a\t{a\x01\x92V[\x80a\t\x85\x81a\x03\xFEV[\x03\x90\xF3[a\x01\x98V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\t\xACWa\t\xA8` \x91a\x02tV[\x01\x90V[a\x05HV[\x90\x92\x91\x92a\t\xC6a\t\xC1\x82a\t\x8EV[a\x05\x85V[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\t\xE2Wa\t\xE0\x92a\x05\xBDV[V[a\x05DV[\x90\x80`\x1F\x83\x01\x12\x15a\n\x05W\x81` a\n\x02\x935\x91\x01a\t\xB1V[\x90V[a\x05@V[\x90`\x80\x82\x82\x03\x12a\ndWa\n!\x81_\x84\x01a\x03\xC2V[\x92a\n/\x82` \x85\x01a\x03\xC2V[\x92a\n=\x83`@\x83\x01a\x03\x13V[\x92``\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\n_Wa\n\\\x92\x01a\t\xE7V[\x90V[a\x01\xA0V[a\x01\x9CV[4a\n\x9BWa\n\x85a\n|6`\x04a\n\nV[\x92\x91\x90\x91a\x14yV[a\n\x8Da\x01\x92V[\x80a\n\x97\x81a\x03\xFEV[\x03\x90\xF3[a\x01\x98V[4a\n\xD0Wa\n\xCCa\n\xBBa\n\xB66`\x04a\x03\"V[a\x15?V[a\n\xC3a\x01\x92V[\x91\x82\x91\x82a\x02\xAFV[\x03\x90\xF3[a\x01\x98V[\x7F\x9F-\xF0\xFE\xD2\xC7vH\xDEX`\xA4\xCCP\x8C\xD0\x81\x8C\x85\xB8\xB8\xA1\xABL\xEE\xEF\x8D\x98\x1C\x89V\xA6\x90V[a\x0B\x01a\n\xD5V[\x90V[4a\x0B4Wa\x0B\x146`\x04a\x02MV[a\x0B0a\x0B\x1Fa\n\xF9V[a\x0B'a\x01\x92V[\x91\x82\x91\x82a\x04\xF6V[\x03\x90\xF3[a\x01\x98V[4a\x0BhWa\x0BRa\x0BL6`\x04a\x06\x89V[\x90a\x15\xD5V[a\x0BZa\x01\x92V[\x80a\x0Bd\x81a\x03\xFEV[\x03\x90\xF3[a\x01\x98V[\x91\x90`@\x83\x82\x03\x12a\x0B\x95W\x80a\x0B\x89a\x0B\x92\x92_\x86\x01a\x03\xC2V[\x93` \x01a\x03\xC2V[\x90V[a\x01\x9CV[4a\x0B\xCBWa\x0B\xC7a\x0B\xB6a\x0B\xB06`\x04a\x0BmV[\x90a\x15\xF7V[a\x0B\xBEa\x01\x92V[\x91\x82\x91\x82a\x02\x03V[\x03\x90\xF3[a\x01\x98V[cNH{q`\xE0\x1B_R_`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\x0C\x17W[` \x83\x10\x14a\x0C\x12WV[a\x0B\xE3V[\x91`\x7F\x16\x91a\x0C\x07V[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\x0CMa\x0CF\x83a\x0B\xF7V[\x80\x94a\x0C!V[\x91`\x01\x81\x16\x90\x81_\x14a\x0C\xA4WP`\x01\x14a\x0ChW[PPPV[a\x0Cu\x91\x92\x93\x94Pa\x0C*V[\x91_\x92[\x81\x84\x10a\x0C\x8CWPP\x01\x90_\x80\x80a\x0CcV[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\x0CyV[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\x0CcV[\x90a\x0C\xC9\x91a\x0C3V[\x90V[\x90a\x0C\xECa\x0C\xE5\x92a\x0C\xDCa\x01\x92V[\x93\x84\x80\x92a\x0C\xBFV[\x03\x83a\x05\\V[V[\x90_\x10a\r\x01Wa\x0C\xFE\x90a\x0C\xCCV[\x90V[a\x0B\xD0V[a\r\x12`\x08_\x90a\x0C\xEEV[\x90V[4a\rEWa\r%6`\x04a\x02MV[a\rAa\r0a\r\x06V[a\r8a\x01\x92V[\x91\x82\x91\x82a\x02\xAFV[\x03\x90\xF3[a\x01\x98V[_\x80\xFD[_\x90V[a\rd\x90a\r^a\rNV[Pa\x16\x1FV[\x90V[``\x90V[a\ru\x90a\x0C\xCCV[\x90V[a\r\x80a\rgV[Pa\r\x8A_a\rlV[\x90V[_\x90V[a\r\xAD\x90a\r\x9Da\r\x8DV[Pa\r\xA7\x81a\x16_V[Pa\x16\xFEV[\x90V[\x90a\r\xC4\x91\x90a\r\xBEa\x17\x1DV[\x91a\x17*V[V[\x90V[a\r\xDDa\r\xD8a\r\xE2\x92a\x08\x9AV[a\r\xC6V[a\x03@V[\x90V[a\r\xEE\x90a\r\xC9V[\x90V[`@\x90a\x0E\x1Aa\x0E!\x94\x96\x95\x93\x96a\x0E\x10``\x84\x01\x98_\x85\x01\x90a\x03WV[` \x83\x01\x90a\x07\xD8V[\x01\x90a\x03WV[V[\x91\x90\x80a\x0E@a\x0E:a\x0E5_a\r\xE5V[a\x03KV[\x91a\x03KV[\x14a\x0E\x9EWa\x0EX\x90\x82a\x0ERa\x17\x1DV[\x91a\x17\xB3V[\x91\x82a\x0Ela\x0Ef\x83a\x03KV[\x91a\x03KV[\x03a\x0EvWPPPV[a\x0E\x9A\x90\x91\x92a\x0E\x84a\x01\x92V[\x93\x84\x93cd(={`\xE0\x1B\x85R`\x04\x85\x01a\r\xF1V[\x03\x90\xFD[a\x0E\xC8a\x0E\xAA_a\r\xE5V[a\x0E\xB2a\x01\x92V[\x91\x82\x91c2PWI`\xE1\x1B\x83R`\x04\x83\x01a\x03dV[\x03\x90\xFD[_\x90V[a\x0E\xD9\x90a\x04\xA5V[\x90V[\x90a\x0E\xE6\x90a\x0E\xD0V[_R` R`@_ \x90V[_\x1C\x90V[\x90V[a\x0F\x06a\x0F\x0B\x91a\x0E\xF2V[a\x0E\xF7V[\x90V[a\x0F\x18\x90Ta\x0E\xFAV[\x90V[`\x01a\x0F4a\x0F:\x92a\x0F,a\x0E\xCCV[P`\x06a\x0E\xDCV[\x01a\x0F\x0EV[\x90V[a\x0FV\x90a\x0FQa\x0FLa\x08\xBEV[a\x194V[a\x11`V[V[`\x1F` \x91\x01\x04\x90V[\x1B\x90V[\x91\x90`\x08a\x0F\x81\x91\x02\x91a\x0F{_\x19\x84a\x0FbV[\x92a\x0FbV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0F\x9Fa\x0F\x9Aa\x0F\xA4\x92a\x02\xFCV[a\r\xC6V[a\x02\xFCV[\x90V[\x90V[\x91\x90a\x0F\xC0a\x0F\xBBa\x0F\xC8\x93a\x0F\x8BV[a\x0F\xA7V[\x90\x83Ta\x0FfV[\x90UV[_\x90V[a\x0F\xE2\x91a\x0F\xDCa\x0F\xCCV[\x91a\x0F\xAAV[V[[\x81\x81\x10a\x0F\xF0WPPV[\x80a\x0F\xFD_`\x01\x93a\x0F\xD0V[\x01a\x0F\xE5V[\x91\x90`\x1F\x81\x11a\x10\x13W[PPPV[a\x10\x1Fa\x10D\x93a\x0C*V[\x90` a\x10+\x84a\x0FXV[\x83\x01\x93\x10a\x10LW[a\x10=\x90a\x0FXV[\x01\x90a\x0F\xE4V[_\x80\x80a\x10\x0EV[\x91Pa\x10=\x81\x92\x90Pa\x104V[\x1C\x90V[\x90a\x10n\x90_\x19\x90`\x08\x02a\x10ZV[\x19\x16\x90V[\x81a\x10}\x91a\x10^V[\x90`\x02\x02\x17\x90V[\x90a\x10\x8F\x81a\x02\\V[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x11OWa\x10\xB3\x82a\x10\xAD\x85Ta\x0B\xF7V[\x85a\x10\x03V[` \x90`\x1F\x83\x11`\x01\x14a\x10\xE7W\x91\x80\x91a\x10\xD6\x93_\x92a\x10\xDBW[PPa\x10sV[\x90U[V[\x90\x91P\x01Q_\x80a\x10\xCFV[`\x1F\x19\x83\x16\x91a\x10\xF6\x85a\x0C*V[\x92_[\x81\x81\x10a\x117WP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x11\x1DW[PPP\x02\x01\x90Ua\x10\xD9V[a\x11-\x91\x01Q`\x1F\x84\x16\x90a\x10^V[\x90U_\x80\x80a\x11\x11V[\x91\x93` `\x01\x81\x92\x87\x87\x01Q\x81U\x01\x95\x01\x92\x01a\x10\xF9V[a\x05HV[\x90a\x11^\x91a\x10\x85V[V[a\x11k\x90`\x08a\x11TV[V[a\x11v\x90a\x0F=V[V[\x90a\x11\x93\x91a\x11\x8Ea\x11\x89\x82a\x0F\x1BV[a\x194V[a\x11\x95V[V[\x90a\x11\x9F\x91a\x19\x8DV[PV[\x90a\x11\xAC\x91a\x11xV[V[\x90\x80a\x11\xC9a\x11\xC3a\x11\xBEa\x17\x1DV[a\x03KV[\x91a\x03KV[\x03a\x11\xDAWa\x11\xD7\x91a\x1A9V[PV[a\x11\xE2a\x01\x92V[c3K\xD9\x19`\xE1\x1B\x81R\x80a\x11\xF9`\x04\x82\x01a\x03\xFEV[\x03\x90\xFD[a\x12\x16\x90a\x12\x11a\x12\x0Ca\n\xD5V[a\x194V[a\x12\xA2V[V[\x90V[a\x12'a\x12,\x91a\x0E\xF2V[a\x12\x18V[\x90V[a\x129\x90Ta\x12\x1BV[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x12Y\x90a\x02\xFCV[_\x19\x81\x14a\x12gW`\x01\x01\x90V[a\x12<V[\x90a\x12x_\x19\x91a\x08\x9DV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x12\x97a\x12\x92a\x12\x9E\x92a\x0F\x8BV[a\x0F\xA7V[\x82Ta\x12lV[\x90UV[a\x12\xC9\x90a\x12\xB0`\x07a\x12/V[a\x12\xC3a\x12\xBC\x82a\x12PV[`\x07a\x12\x82V[\x90a\x1A\xDBV[V[a\x12\xD4\x90a\x11\xFDV[V[\x90a\x12\xE8a\x12\xE3\x83a\x05\x9AV[a\x05\x85V[\x91\x82RV[a\x12\xF6_a\x12\xD6V[\x90V[a\x13\x01a\x12\xEDV[\x90V[\x91a\x13\x18\x92\x91a\x13\x12a\x12\xF9V[\x92a\x14yV[V[a\x13,\x90a\x13&a\r\x8DV[Pa\x16_V[\x90V[a\x13Ca\x13>a\x13H\x92a\x03@V[a\r\xC6V[a\x03@V[\x90V[a\x13T\x90a\x13/V[\x90V[a\x13`\x90a\x13KV[\x90V[\x90a\x13m\x90a\x13WV[_R` R`@_ \x90V[a\x13\x81a\x0F\xCCV[P\x80a\x13\x9Da\x13\x97a\x13\x92_a\r\xE5V[a\x03KV[\x91a\x03KV[\x14a\x13\xB8Wa\x13\xB0a\x13\xB5\x91`\x03a\x13cV[a\x12/V[\x90V[a\x13\xE2a\x13\xC4_a\r\xE5V[a\x13\xCCa\x01\x92V[\x91\x82\x91c\"q\x8A\xD9`\xE2\x1B\x83R`\x04\x83\x01a\x03dV[\x03\x90\xFD[\x90a\x13\xF0\x90a\x13WV[_R` R`@_ \x90V[`\xFF\x16\x90V[a\x14\x0Ea\x14\x13\x91a\x0E\xF2V[a\x13\xFCV[\x90V[a\x14 \x90Ta\x14\x02V[\x90V[a\x14J\x91_a\x14?a\x14E\x93a\x147a\rNV[P`\x06a\x0E\xDCV[\x01a\x13\xE6V[a\x14\x16V[\x90V[a\x14Ua\rgV[Pa\x14``\x01a\rlV[\x90V[a\x14w\x91a\x14oa\x17\x1DV[\x91\x90\x91a\x1A\xF1V[V[\x91a\x14\x9D\x93\x91a\x14\x8B\x84\x82\x84\x91a\x0E#V[a\x14\x93a\x17\x1DV[\x93\x90\x91\x92\x93a\x1C\xC2V[V[\x90V[Q\x90V[a\x14\xBAa\x14\xB5a\x14\xBF\x92a\x08\x9AV[a\r\xC6V[a\x02\xFCV[\x90V[a\x14\xCAa\x12\xEDV[\x90V[\x90P\x90V[a\x14\xF7a\x14\xEE\x92` \x92a\x14\xE5\x81a\x02\\V[\x94\x85\x80\x93a\x14\xCDV[\x93\x84\x91\x01a\x02iV[\x01\x90V[a\x15\t\x90a\x15\x0F\x93\x92a\x14\xD2V[\x90a\x14\xD2V[\x90V[a\x151\x92\x91a\x15=\x91a\x15#a\x01\x92V[\x94\x85\x92` \x84\x01\x92\x83a\x14\xFBV[\x90\x81\x03\x82R\x03\x83a\x05\\V[V[a\x15Ga\rgV[Pa\x15Q\x81a\x16_V[Pa\x15Za\x1E$V[\x90a\x15la\x15g\x83a\x14\x9FV[a\x14\xA2V[a\x15~a\x15x_a\x14\xA6V[\x91a\x02\xFCV[\x11_\x14a\x15\x9CWa\x15\x92a\x15\x98\x92\x91a\x1E\xCAV[\x90a\x15\x12V[[\x90V[PPa\x15\xA6a\x14\xC2V[a\x15\x99V[\x90a\x15\xC6\x91a\x15\xC1a\x15\xBC\x82a\x0F\x1BV[a\x194V[a\x15\xC8V[V[\x90a\x15\xD2\x91a\x1A9V[PV[\x90a\x15\xDF\x91a\x15\xABV[V[\x90a\x15\xEB\x90a\x13WV[_R` R`@_ \x90V[a\x16\x1C\x91a\x16\x12a\x16\x17\x92a\x16\na\rNV[P`\x05a\x15\xE1V[a\x13\xE6V[a\x14\x16V[\x90V[a\x16'a\rNV[P\x80a\x16Ba\x16<cye\xDB\x0B`\xE0\x1Ba\x01\xA4V[\x91a\x01\xA4V[\x14\x90\x81\x15a\x16OW[P\x90V[a\x16Y\x91Pa\x1FsV[_a\x16KV[a\x16ga\r\x8DV[Pa\x16q\x81a\x1F\xDBV[\x90\x81a\x16\x8Da\x16\x87a\x16\x82_a\r\xE5V[a\x03KV[\x91a\x03KV[\x14a\x16\x96WP\x90V[a\x16\xB8\x90a\x16\xA2a\x01\x92V[\x91\x82\x91c~'2\x89`\xE0\x1B\x83R`\x04\x83\x01a\x07\xE5V[\x03\x90\xFD[\x90a\x16\xC6\x90a\x0F\x8BV[_R` R`@_ \x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x16\xE9a\x16\xEE\x91a\x0E\xF2V[a\x16\xD2V[\x90V[a\x16\xFB\x90Ta\x16\xDDV[\x90V[a\x17\x15a\x17\x1A\x91a\x17\ra\r\x8DV[P`\x04a\x16\xBCV[a\x16\xF1V[\x90V[a\x17%a\r\x8DV[P3\x90V[\x91a\x178\x92\x91`\x01\x92a\x1F\xFAV[V[\x90V[a\x17Qa\x17La\x17V\x92a\x17:V[a\r\xC6V[a\x02\xFCV[\x90V[\x90a\x17d\x91\x03a\x02\xFCV[\x90V[\x90a\x17r\x91\x01a\x02\xFCV[\x90V[\x90a\x17\x86`\x01\x80`\xA0\x1B\x03\x91a\x08\x9DV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x90a\x17\xA8a\x17\xA3a\x17\xAF\x92a\x13WV[a\x17\x90V[\x82Ta\x17uV[\x90UV[\x90a\x17\xBCa\r\x8DV[Pa\x17\xC6\x81a\x1F\xDBV[\x92\x80a\x17\xE2a\x17\xDCa\x17\xD7_a\r\xE5V[a\x03KV[\x91a\x03KV[\x03a\x19!W[P\x82a\x18\x04a\x17\xFEa\x17\xF9_a\r\xE5V[a\x03KV[\x91a\x03KV[\x03a\x18\xCDW[\x81a\x18%a\x18\x1Fa\x18\x1A_a\r\xE5V[a\x03KV[\x91a\x03KV[\x03a\x18\x97W[a\x18@\x82a\x18;`\x02\x84\x90a\x16\xBCV[a\x17\x93V[\x82\x91a\x18~a\x18xa\x18r\x7F\xDD\xF2R\xAD\x1B\xE2\xC8\x9Bi\xC2\xB0h\xFC7\x8D\xAA\x95+\xA7\xF1c\xC4\xA1\x16(\xF5ZM\xF5#\xB3\xEF\x95a\x13WV[\x92a\x13WV[\x92a\x0F\x8BV[\x92a\x18\x87a\x01\x92V[\x80a\x18\x91\x81a\x03\xFEV[\x03\x90\xA4\x90V[a\x18\xC8a\x18\xA4`\x01a\x17=V[a\x18\xC2a\x18\xB3`\x03\x86\x90a\x13cV[\x91a\x18\xBD\x83a\x12/V[a\x17gV[\x90a\x12\x82V[a\x18+V[a\x18\xEBa\x18\xD9_a\r\xE5V[\x82a\x18\xE3_a\r\xE5V[\x90_\x92a\x1F\xFAV[a\x19\x1Ca\x18\xF8`\x01a\x17=V[a\x19\x16a\x19\x07`\x03\x87\x90a\x13cV[\x91a\x19\x11\x83a\x12/V[a\x17YV[\x90a\x12\x82V[a\x18\nV[a\x19.\x90\x84\x90\x83\x91a!nV[_a\x17\xE8V[a\x19F\x90a\x19@a\x17\x1DV[\x90a\"\x1BV[V[\x90a\x19T`\xFF\x91a\x08\x9DV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x19g\x90a\x01\xF1V[\x90V[\x90V[\x90a\x19\x82a\x19}a\x19\x89\x92a\x19^V[a\x19jV[\x82Ta\x19HV[\x90UV[a\x19\x95a\rNV[Pa\x19\xAAa\x19\xA4\x82\x84\x90a\x14#V[\x15a\x01\xF1V[_\x14a\x1A3Wa\x19\xD2`\x01a\x19\xCD_a\x19\xC5`\x06\x86\x90a\x0E\xDCV[\x01\x85\x90a\x13\xE6V[a\x19mV[\x90a\x19\xDBa\x17\x1DV[\x90a\x1A\x18a\x1A\x12a\x1A\x0C\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r\x95a\x0E\xD0V[\x92a\x13WV[\x92a\x13WV[\x92a\x1A!a\x01\x92V[\x80a\x1A+\x81a\x03\xFEV[\x03\x90\xA4`\x01\x90V[PP_\x90V[a\x1AAa\rNV[Pa\x1AM\x81\x83\x90a\x14#V[_\x14a\x1A\xD5Wa\x1At_a\x1Ao_a\x1Ag`\x06\x86\x90a\x0E\xDCV[\x01\x85\x90a\x13\xE6V[a\x19mV[\x90a\x1A}a\x17\x1DV[\x90a\x1A\xBAa\x1A\xB4a\x1A\xAE\x7F\xF69\x1F\\2\xD9\xC6\x9D*G\xEAg\x0BD)t\xB595\xD1\xED\xC7\xFDd\xEB!\xE0G\xA89\x17\x1B\x95a\x0E\xD0V[\x92a\x13WV[\x92a\x13WV[\x92a\x1A\xC3a\x01\x92V[\x80a\x1A\xCD\x81a\x03\xFEV[\x03\x90\xA4`\x01\x90V[PP_\x90V[\x90a\x1A\xEF\x91\x90a\x1A\xE9a\x12\xF9V[\x91a\"]V[V[\x91\x90\x91\x82a\x1B\x0Fa\x1B\ta\x1B\x04_a\r\xE5V[a\x03KV[\x91a\x03KV[\x14a\x1B\x83Wa\x1B3\x82a\x1B.a\x1B'`\x05\x85\x90a\x15\xE1V[\x86\x90a\x13\xE6V[a\x19mV[\x91\x90\x91a\x1B~a\x1Bla\x1Bf\x7F\x170~\xAB9\xABa\x07\xE8\x89\x98E\xAD=Y\xBD\x96S\xF2\0\xF2 \x92\x04\x89\xCA+Y7il1\x93a\x13WV[\x93a\x13WV[\x93a\x1Bua\x01\x92V[\x91\x82\x91\x82a\x02\x03V[\x03\x90\xA3V[a\x1B\xA5\x83a\x1B\x8Fa\x01\x92V[\x91\x82\x91c\x0Ba\x17C`\xE3\x1B\x83R`\x04\x83\x01a\x03dV[\x03\x90\xFD[a\x1B\xB2\x90a\x13/V[\x90V[a\x1B\xBE\x90a\x1B\xA9V[\x90V[a\x1B\xCA\x90a\x13KV[\x90V[`\xE0\x1B\x90V[\x90PQ\x90a\x1B\xE0\x82a\x01\xB0V[V[\x90` \x82\x82\x03\x12a\x1B\xFBWa\x1B\xF8\x91_\x01a\x1B\xD3V[\x90V[a\x01\x9CV[` \x91\x81R\x01\x90V[a\x1C(a\x1C1` \x93a\x1C6\x93a\x1C\x1F\x81a\x14\xA2V[\x93\x84\x80\x93a\x1C\0V[\x95\x86\x91\x01a\x02iV[a\x02tV[\x01\x90V[\x90\x92a\x1Cm\x90a\x1Cca\x1Cz\x96\x94a\x1CY`\x80\x86\x01\x97_\x87\x01\x90a\x03WV[` \x85\x01\x90a\x03WV[`@\x83\x01\x90a\x07\xD8V[``\x81\x84\x03\x91\x01Ra\x1C\tV[\x90V[\x90a\x1C\x8Fa\x1C\x8A\x83a\t\x8EV[a\x05\x85V[\x91\x82RV[``\x90V[=_\x14a\x1C\xB4Wa\x1C\xA9=a\x1C}V[\x90=_` \x84\x01>[V[a\x1C\xBCa\x1C\x94V[\x90a\x1C\xB2V[\x91\x93\x84;a\x1C\xD8a\x1C\xD2_a\x14\xA6V[\x91a\x02\xFCV[\x11a\x1C\xE5W[PPPPPV[a\x1D\x1D_` \x94a\x1D(a\x1D\0a\x1C\xFB\x8Aa\x1B\xB5V[a\x1B\xC1V[\x94c\x15\x0Bz\x02\x92\x96\x98a\x1D\x11a\x01\x92V[\x99\x8A\x98\x89\x97\x88\x96a\x1B\xCDV[\x86R`\x04\x86\x01a\x1C:V[\x03\x92Z\xF1\x80\x91_\x92a\x1D\xF4W[P\x15_\x14a\x1D\xAAWP`\x01a\x1DPWP[_\x80\x80\x80\x80a\x1C\xDEV[a\x1DXa\x1C\x99V[\x90a\x1Db\x82a\x14\xA2V[a\x1Dta\x1Dn_a\x14\xA6V[\x91a\x02\xFCV[\x14_\x14a\x1D\xA1Wa\x1D\x9D\x90a\x1D\x87a\x01\x92V[\x91\x82\x91c2PWI`\xE1\x1B\x83R`\x04\x83\x01a\x03dV[\x03\x90\xFD[P\x80Q\x90` \x01\xFD[a\x1D\xC3a\x1D\xBDc\n\x85\xBD\x01`\xE1\x1Ba\x01\xA4V[\x91a\x01\xA4V[\x03a\x1D\xCEWPa\x1DFV[a\x1D\xF0\x90a\x1D\xDAa\x01\x92V[\x91\x82\x91c2PWI`\xE1\x1B\x83R`\x04\x83\x01a\x03dV[\x03\x90\xFD[a\x1E\x16\x91\x92P` =\x81\x11a\x1E\x1DW[a\x1E\x0E\x81\x83a\x05\\V[\x81\x01\x90a\x1B\xE2V[\x90_a\x1D5V[P=a\x1E\x04V[a\x1E,a\rgV[Pa\x1E7`\x08a\rlV[\x90V[6\x907V[\x90a\x1Eda\x1EL\x83a\x12\xD6V[\x92` \x80a\x1EZ\x86\x93a\x05\x9AV[\x92\x01\x91\x03\x90a\x1E:V[V[`\x01a\x1Er\x91\x03a\x02\xFCV[\x90V[\x90V[a\x1E\x8Ca\x1E\x87a\x1E\x91\x92a\x1EuV[a\r\xC6V[a\x02\xFCV[\x90V[cNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[a\x1E\xB4a\x1E\xBA\x91a\x02\xFCV[\x91a\x02\xFCV[\x90\x81\x15a\x1E\xC5W\x04\x90V[a\x1E\x94V[a\x1E\xD2a\rgV[Pa\x1E\xEFa\x1E\xDF\x82a#\xFFV[a\x1E\xE9`\x01a\x17=V[\x90a\x17gV[\x90a\x1E\xF9\x82a\x1E?V[\x91a\x1F\x02a\x0F\xCCV[P` \x01\x82\x01[`\x01\x15a\x1FlWa\x1F\x1Ca\x1FH\x91a\x1EfV[\x91o\x18\x18\x99\x19\x9A\x1A\x9B\x1B\x9C\x1C\xB0\xB11\xB22\xB3`\x81\x1B`\n\x82\x06\x1A\x83Sa\x1FB`\na\x1ExV[\x90a\x1E\xA8V[\x80a\x1F[a\x1FU_a\x14\xA6V[\x91a\x02\xFCV[\x14a\x1FfW\x90a\x1F\tV[PP[\x90V[PPa\x1FiV[a\x1F{a\rNV[P\x80a\x1F\x96a\x1F\x90c\x80\xACX\xCD`\xE0\x1Ba\x01\xA4V[\x91a\x01\xA4V[\x14\x80\x15a\x1F\xBAW[\x90\x81\x15a\x1F\xAAW[P\x90V[a\x1F\xB4\x91Pa&`V[_a\x1F\xA6V[P\x80a\x1F\xD5a\x1F\xCFc[^\x13\x9F`\xE0\x1Ba\x01\xA4V[\x91a\x01\xA4V[\x14a\x1F\x9EV[a\x1F\xF2a\x1F\xF7\x91a\x1F\xEAa\r\x8DV[P`\x02a\x16\xBCV[a\x16\xF1V[\x90V[\x91\x90\x92\x80\x80\x15a!(W[a #W[PP\x90a \x1Ca !\x92\x91`\x04a\x16\xBCV[a\x17\x93V[V[a ,\x84a\x16_V[\x91\x80a Ha Ba =_a\r\xE5V[a\x03KV[\x91a\x03KV[\x14\x15\x80a!\rW[\x80a \xF3W[a \xCDWP\x91a \x1C\x91a !\x94\x93a rW[P\x91\x92a \nV[\x81\x84\x90a \xB1a \xABa \xA5\x7F\x8C[\xE1\xE5\xEB\xEC}[\xD1OqB}\x1E\x84\xF3\xDD\x03\x14\xC0\xF7\xB2)\x1E[ \n\xC8\xC7\xC3\xB9%\x95a\x13WV[\x92a\x13WV[\x92a\x0F\x8BV[\x92a \xBAa\x01\x92V[\x80a \xC4\x81a\x03\xFEV[\x03\x90\xA4_a jV[a \xEF\x90a \xD9a\x01\x92V[\x91\x82\x91c\xA9\xFB\xF5\x1F`\xE0\x1B\x83R`\x04\x83\x01a\x03dV[\x03\x90\xFD[Pa!\x08a!\x02\x84\x83\x90a\x15\xF7V[\x15a\x01\xF1V[a VV[P\x82a!!a!\x1B\x83a\x03KV[\x91a\x03KV[\x14\x15a PV[P\x81a!Da!>a!9_a\r\xE5V[a\x03KV[\x91a\x03KV[\x14\x15a \x05V[\x91` a!l\x92\x94\x93a!e`@\x82\x01\x96_\x83\x01\x90a\x03WV[\x01\x90a\x07\xD8V[V[a!\x83a!}\x82\x84\x86\x91a&\x86V[\x15a\x01\xF1V[a!\x8CWPPPV[a!\xA6a!\xA0a!\x9B_a\r\xE5V[a\x03KV[\x91a\x03KV[\x14_\x14a!\xD3Wa!\xCF\x82a!\xB9a\x01\x92V[\x91\x82\x91c~'2\x89`\xE0\x1B\x83R`\x04\x83\x01a\x07\xE5V[\x03\x90\xFD[a!\xF4a!\xDEa\x01\x92V[\x92\x83\x92c\x17~\x80/`\xE0\x1B\x84R`\x04\x84\x01a!KV[\x03\x90\xFD[\x91` a\"\x19\x92\x94\x93a\"\x12`@\x82\x01\x96_\x83\x01\x90a\x03WV[\x01\x90a\x04\xE9V[V[\x90a\"0a\"*\x83\x83\x90a\x14#V[\x15a\x01\xF1V[a\"8WPPV[a\"Ya\"Ca\x01\x92V[\x92\x83\x92c\xE2Q}?`\xE0\x1B\x84R`\x04\x84\x01a!\xF8V[\x03\x90\xFD[\x90\x91a\"\x89\x92a\"n\x83\x82\x90a'&V[a\"va\x17\x1DV[\x92a\"\x80_a\r\xE5V[\x90\x91\x92\x93a\x1C\xC2V[V[\x90V[a\"\xA2a\"\x9Da\"\xA7\x92a\"\x8BV[a\r\xC6V[a\x02\xFCV[\x90V[\x90V[a\"\xC1a\"\xBCa\"\xC6\x92a\"\xAAV[a\r\xC6V[a\x02\xFCV[\x90V[\x90V[a\"\xE0a\"\xDBa\"\xE5\x92a\"\xC9V[a\r\xC6V[a\x02\xFCV[\x90V[\x90V[a\"\xFFa\"\xFAa#\x04\x92a\"\xE8V[a\r\xC6V[a\x02\xFCV[\x90V[\x90V[a#\x1Ea#\x19a##\x92a#\x07V[a\r\xC6V[a\x02\xFCV[\x90V[\x90V[a#=a#8a#B\x92a#&V[a\r\xC6V[a\x02\xFCV[\x90V[\x90V[a#\\a#Wa#a\x92a#EV[a\r\xC6V[a\x02\xFCV[\x90V[\x90V[a#{a#va#\x80\x92a#dV[a\r\xC6V[a\x02\xFCV[\x90V[\x90V[a#\x9Aa#\x95a#\x9F\x92a#\x83V[a\r\xC6V[a\x02\xFCV[\x90V[\x90V[a#\xB9a#\xB4a#\xBE\x92a#\xA2V[a\r\xC6V[a\x02\xFCV[\x90V[\x90V[a#\xD8a#\xD3a#\xDD\x92a#\xC1V[a\r\xC6V[a\x02\xFCV[\x90V[\x90V[a#\xF7a#\xF2a#\xFC\x92a#\xE0V[a\r\xC6V[a\x02\xFCV[\x90V[a$\x07a\x0F\xCCV[Pa$\x11_a\x14\xA6V[\x90\x80a$@a$:z\x18O\x03\xE9?\xF9\xF4\xDA\xA7\x97\xEDn8\xEDd\xBFj\x1F\x01\0\0\0\0\0\0\0\0a\"\x8EV[\x91a\x02\xFCV[\x10\x15a&\x18W[\x80a$ha$bm\x04\xEE-mA[\x85\xAC\xEF\x81\0\0\0\0a\"\xCCV[\x91a\x02\xFCV[\x10\x15a%\xDDW[\x80a$\x89a$\x83f#\x86\xF2o\xC1\0\0a#\nV[\x91a\x02\xFCV[\x10\x15a%\xA9W[\x80a$\xA7a$\xA1c\x05\xF5\xE1\0a#HV[\x91a\x02\xFCV[\x10\x15a%xW[\x80a$\xC3a$\xBDa'\x10a#\x86V[\x91a\x02\xFCV[\x10\x15a%IW[\x80a$\xDEa$\xD8`da#\xC4V[\x91a\x02\xFCV[\x10\x15a%\x1BW[a$\xF8a$\xF2`\na\x1ExV[\x91a\x02\xFCV[\x10\x15a%\x02W[\x90V[a%\x16\x90a%\x10`\x01a\x17=V[\x90a\x17gV[a$\xFFV[a%2a%C\x91a%,`da#\xC4V[\x90a\x1E\xA8V[\x91a%=`\x02a#\xE3V[\x90a\x17gV[\x90a$\xE5V[a%aa%r\x91a%[a'\x10a#\x86V[\x90a\x1E\xA8V[\x91a%l`\x04a#\xA5V[\x90a\x17gV[\x90a$\xCAV[a%\x92a%\xA3\x91a%\x8Cc\x05\xF5\xE1\0a#HV[\x90a\x1E\xA8V[\x91a%\x9D`\x08a#gV[\x90a\x17gV[\x90a$\xAEV[a%\xC6a%\xD7\x91a%\xC0f#\x86\xF2o\xC1\0\0a#\nV[\x90a\x1E\xA8V[\x91a%\xD1`\x10a#)V[\x90a\x17gV[\x90a$\x90V[a&\x01a&\x12\x91a%\xFBm\x04\xEE-mA[\x85\xAC\xEF\x81\0\0\0\0a\"\xCCV[\x90a\x1E\xA8V[\x91a&\x0C` a\"\xEBV[\x90a\x17gV[\x90a$oV[a&Ia&Z\x91a&Cz\x18O\x03\xE9?\xF9\xF4\xDA\xA7\x97\xEDn8\xEDd\xBFj\x1F\x01\0\0\0\0\0\0\0\0a\"\x8EV[\x90a\x1E\xA8V[\x91a&T`@a\"\xADV[\x90a\x17gV[\x90a$GV[a&ha\rNV[Pa&\x82a&|c\x01\xFF\xC9\xA7`\xE0\x1Ba\x01\xA4V[\x91a\x01\xA4V[\x14\x90V[\x91\x90a&\x90a\rNV[P\x80a&\xACa&\xA6a&\xA1_a\r\xE5V[a\x03KV[\x91a\x03KV[\x14\x15\x92\x83a&\xBBW[PPP\x90V[\x80\x91\x92\x93Pa&\xD2a&\xCC\x84a\x03KV[\x91a\x03KV[\x14\x90\x81\x15a'\x14W[P\x91\x82\x15a&\xEEW[PP_\x80\x80a&\xB5V[a'\x0C\x91\x92Pa'\0a'\x06\x91a\x16\xFEV[\x92a\x03KV[\x91a\x03KV[\x14_\x80a&\xE4V[a' \x91P\x82\x90a\x15\xF7V[_a&\xDBV[\x90\x81a'Ba'<a'7_a\r\xE5V[a\x03KV[\x91a\x03KV[\x14a'\xAAWa'[\x91\x90a'U_a\r\xE5V[\x91a\x17\xB3V[a'ua'oa'j_a\r\xE5V[a\x03KV[\x91a\x03KV[\x03a'|WV[a'\xA6a'\x88_a\r\xE5V[a'\x90a\x01\x92V[\x91\x82\x91c9\xE3V7`\xE1\x1B\x83R`\x04\x83\x01a\x03dV[\x03\x90\xFD[a'\xD4a'\xB6_a\r\xE5V[a'\xBEa\x01\x92V[\x91\x82\x91c2PWI`\xE1\x1B\x83R`\x04\x83\x01a\x03dV[\x03\x90\xFD\xFE\xA2dipfsX\"\x12 \xB4\xD8\x9Cq[\xCEQ\x0F}\xEAy\x8B%F\r\x12\x89++h\xE7\xA1\x8F\xF5\xEA\xF2\xE8lr7\xD5\xAAdsolcC\0\x08\x19\x003",
    );
    /**Custom error with signature `AccessControlBadConfirmation()` and selector `0x6697b232`.
```solidity
error AccessControlBadConfirmation();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AccessControlBadConfirmation {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AccessControlBadConfirmation>
        for UnderlyingRustTuple<'_> {
            fn from(value: AccessControlBadConfirmation) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for AccessControlBadConfirmation {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AccessControlBadConfirmation {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AccessControlBadConfirmation()";
            const SELECTOR: [u8; 4] = [102u8, 151u8, 178u8, 50u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `AccessControlUnauthorizedAccount(address,bytes32)` and selector `0xe2517d3f`.
```solidity
error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AccessControlUnauthorizedAccount {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub neededRole: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AccessControlUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: AccessControlUnauthorizedAccount) -> Self {
                (value.account, value.neededRole)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for AccessControlUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    account: tuple.0,
                    neededRole: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AccessControlUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AccessControlUnauthorizedAccount(address,bytes32)";
            const SELECTOR: [u8; 4] = [226u8, 81u8, 125u8, 63u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.neededRole),
                )
            }
        }
    };
    /**Custom error with signature `ERC721IncorrectOwner(address,uint256,address)` and selector `0x64283d7b`.
```solidity
error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC721IncorrectOwner {
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub tokenId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Address,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Address,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC721IncorrectOwner> for UnderlyingRustTuple<'_> {
            fn from(value: ERC721IncorrectOwner) -> Self {
                (value.sender, value.tokenId, value.owner)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ERC721IncorrectOwner {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    sender: tuple.0,
                    tokenId: tuple.1,
                    owner: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC721IncorrectOwner {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC721IncorrectOwner(address,uint256,address)";
            const SELECTOR: [u8; 4] = [100u8, 40u8, 61u8, 123u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.sender,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.tokenId),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `ERC721InsufficientApproval(address,uint256)` and selector `0x177e802f`.
```solidity
error ERC721InsufficientApproval(address operator, uint256 tokenId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC721InsufficientApproval {
        #[allow(missing_docs)]
        pub operator: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub tokenId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC721InsufficientApproval>
        for UnderlyingRustTuple<'_> {
            fn from(value: ERC721InsufficientApproval) -> Self {
                (value.operator, value.tokenId)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for ERC721InsufficientApproval {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    operator: tuple.0,
                    tokenId: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC721InsufficientApproval {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC721InsufficientApproval(address,uint256)";
            const SELECTOR: [u8; 4] = [23u8, 126u8, 128u8, 47u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.operator,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.tokenId),
                )
            }
        }
    };
    /**Custom error with signature `ERC721InvalidApprover(address)` and selector `0xa9fbf51f`.
```solidity
error ERC721InvalidApprover(address approver);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC721InvalidApprover {
        #[allow(missing_docs)]
        pub approver: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC721InvalidApprover> for UnderlyingRustTuple<'_> {
            fn from(value: ERC721InvalidApprover) -> Self {
                (value.approver,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ERC721InvalidApprover {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { approver: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC721InvalidApprover {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC721InvalidApprover(address)";
            const SELECTOR: [u8; 4] = [169u8, 251u8, 245u8, 31u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.approver,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `ERC721InvalidOperator(address)` and selector `0x5b08ba18`.
```solidity
error ERC721InvalidOperator(address operator);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC721InvalidOperator {
        #[allow(missing_docs)]
        pub operator: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC721InvalidOperator> for UnderlyingRustTuple<'_> {
            fn from(value: ERC721InvalidOperator) -> Self {
                (value.operator,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ERC721InvalidOperator {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { operator: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC721InvalidOperator {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC721InvalidOperator(address)";
            const SELECTOR: [u8; 4] = [91u8, 8u8, 186u8, 24u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.operator,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `ERC721InvalidOwner(address)` and selector `0x89c62b64`.
```solidity
error ERC721InvalidOwner(address owner);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC721InvalidOwner {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC721InvalidOwner> for UnderlyingRustTuple<'_> {
            fn from(value: ERC721InvalidOwner) -> Self {
                (value.owner,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ERC721InvalidOwner {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { owner: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC721InvalidOwner {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC721InvalidOwner(address)";
            const SELECTOR: [u8; 4] = [137u8, 198u8, 43u8, 100u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `ERC721InvalidReceiver(address)` and selector `0x64a0ae92`.
```solidity
error ERC721InvalidReceiver(address receiver);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC721InvalidReceiver {
        #[allow(missing_docs)]
        pub receiver: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC721InvalidReceiver> for UnderlyingRustTuple<'_> {
            fn from(value: ERC721InvalidReceiver) -> Self {
                (value.receiver,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ERC721InvalidReceiver {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { receiver: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC721InvalidReceiver {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC721InvalidReceiver(address)";
            const SELECTOR: [u8; 4] = [100u8, 160u8, 174u8, 146u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.receiver,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `ERC721InvalidSender(address)` and selector `0x73c6ac6e`.
```solidity
error ERC721InvalidSender(address sender);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC721InvalidSender {
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC721InvalidSender> for UnderlyingRustTuple<'_> {
            fn from(value: ERC721InvalidSender) -> Self {
                (value.sender,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ERC721InvalidSender {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { sender: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC721InvalidSender {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC721InvalidSender(address)";
            const SELECTOR: [u8; 4] = [115u8, 198u8, 172u8, 110u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.sender,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `ERC721NonexistentToken(uint256)` and selector `0x7e273289`.
```solidity
error ERC721NonexistentToken(uint256 tokenId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC721NonexistentToken {
        #[allow(missing_docs)]
        pub tokenId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC721NonexistentToken> for UnderlyingRustTuple<'_> {
            fn from(value: ERC721NonexistentToken) -> Self {
                (value.tokenId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ERC721NonexistentToken {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { tokenId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC721NonexistentToken {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC721NonexistentToken(uint256)";
            const SELECTOR: [u8; 4] = [126u8, 39u8, 50u8, 137u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.tokenId),
                )
            }
        }
    };
    /**Event with signature `Approval(address,address,uint256)` and selector `0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925`.
```solidity
event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Approval {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub approved: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub tokenId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Approval {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            const SIGNATURE: &'static str = "Approval(address,address,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                140u8,
                91u8,
                225u8,
                229u8,
                235u8,
                236u8,
                125u8,
                91u8,
                209u8,
                79u8,
                113u8,
                66u8,
                125u8,
                30u8,
                132u8,
                243u8,
                221u8,
                3u8,
                20u8,
                192u8,
                247u8,
                178u8,
                41u8,
                30u8,
                91u8,
                32u8,
                10u8,
                200u8,
                199u8,
                195u8,
                185u8,
                37u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    owner: topics.1,
                    approved: topics.2,
                    tokenId: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.owner.clone(),
                    self.approved.clone(),
                    self.tokenId.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.owner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.approved,
                );
                out[3usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.tokenId);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Approval {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Approval> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Approval) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `ApprovalForAll(address,address,bool)` and selector `0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31`.
```solidity
event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct ApprovalForAll {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub operator: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub approved: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for ApprovalForAll {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "ApprovalForAll(address,address,bool)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                23u8,
                48u8,
                126u8,
                171u8,
                57u8,
                171u8,
                97u8,
                7u8,
                232u8,
                137u8,
                152u8,
                69u8,
                173u8,
                61u8,
                89u8,
                189u8,
                150u8,
                83u8,
                242u8,
                0u8,
                242u8,
                32u8,
                146u8,
                4u8,
                137u8,
                202u8,
                43u8,
                89u8,
                55u8,
                105u8,
                108u8,
                49u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    owner: topics.1,
                    operator: topics.2,
                    approved: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.approved,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.owner.clone(), self.operator.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.owner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.operator,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for ApprovalForAll {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&ApprovalForAll> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &ApprovalForAll) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RoleAdminChanged(bytes32,bytes32,bytes32)` and selector `0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff`.
```solidity
event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleAdminChanged {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub previousAdminRole: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub newAdminRole: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleAdminChanged {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            const SIGNATURE: &'static str = "RoleAdminChanged(bytes32,bytes32,bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                189u8,
                121u8,
                184u8,
                111u8,
                254u8,
                10u8,
                184u8,
                232u8,
                119u8,
                97u8,
                81u8,
                81u8,
                66u8,
                23u8,
                205u8,
                124u8,
                172u8,
                213u8,
                44u8,
                144u8,
                159u8,
                102u8,
                71u8,
                92u8,
                58u8,
                244u8,
                78u8,
                18u8,
                159u8,
                11u8,
                0u8,
                255u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    previousAdminRole: topics.2,
                    newAdminRole: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.previousAdminRole.clone(),
                    self.newAdminRole.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.previousAdminRole);
                out[3usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.newAdminRole);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleAdminChanged {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleAdminChanged> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleAdminChanged) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RoleGranted(bytes32,address,address)` and selector `0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d`.
```solidity
event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleGranted {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleGranted {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RoleGranted(bytes32,address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                47u8,
                135u8,
                136u8,
                17u8,
                126u8,
                126u8,
                255u8,
                29u8,
                130u8,
                233u8,
                38u8,
                236u8,
                121u8,
                73u8,
                1u8,
                209u8,
                124u8,
                120u8,
                2u8,
                74u8,
                80u8,
                39u8,
                9u8,
                64u8,
                48u8,
                69u8,
                64u8,
                167u8,
                51u8,
                101u8,
                111u8,
                13u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    account: topics.2,
                    sender: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.account.clone(),
                    self.sender.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.account,
                );
                out[3usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleGranted {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleGranted> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleGranted) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RoleRevoked(bytes32,address,address)` and selector `0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b`.
```solidity
event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleRevoked {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleRevoked {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RoleRevoked(bytes32,address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                246u8,
                57u8,
                31u8,
                92u8,
                50u8,
                217u8,
                198u8,
                157u8,
                42u8,
                71u8,
                234u8,
                103u8,
                11u8,
                68u8,
                41u8,
                116u8,
                181u8,
                57u8,
                53u8,
                209u8,
                237u8,
                199u8,
                253u8,
                100u8,
                235u8,
                33u8,
                224u8,
                71u8,
                168u8,
                57u8,
                23u8,
                27u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    account: topics.2,
                    sender: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.account.clone(),
                    self.sender.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.account,
                );
                out[3usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleRevoked {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleRevoked> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleRevoked) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `Transfer(address,address,uint256)` and selector `0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef`.
```solidity
event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Transfer {
        #[allow(missing_docs)]
        pub from: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub to: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub tokenId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Transfer {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            const SIGNATURE: &'static str = "Transfer(address,address,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                221u8,
                242u8,
                82u8,
                173u8,
                27u8,
                226u8,
                200u8,
                155u8,
                105u8,
                194u8,
                176u8,
                104u8,
                252u8,
                55u8,
                141u8,
                170u8,
                149u8,
                43u8,
                167u8,
                241u8,
                99u8,
                196u8,
                161u8,
                22u8,
                40u8,
                245u8,
                90u8,
                77u8,
                245u8,
                35u8,
                179u8,
                239u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    from: topics.1,
                    to: topics.2,
                    tokenId: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.from.clone(),
                    self.to.clone(),
                    self.tokenId.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.from,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.to,
                );
                out[3usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.tokenId);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Transfer {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Transfer> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Transfer) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address defaultAdmin, address minter);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub defaultAdmin: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub minter: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value.defaultAdmin, value.minter)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        defaultAdmin: tuple.0,
                        minter: tuple.1,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.defaultAdmin,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.minter,
                    ),
                )
            }
        }
    };
    /**Function with signature `DEFAULT_ADMIN_ROLE()` and selector `0xa217fddf`.
```solidity
function DEFAULT_ADMIN_ROLE() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_ADMIN_ROLECall {}
    ///Container type for the return parameters of the [`DEFAULT_ADMIN_ROLE()`](DEFAULT_ADMIN_ROLECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_ADMIN_ROLEReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_ADMIN_ROLECall>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_ADMIN_ROLECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_ADMIN_ROLECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_ADMIN_ROLEReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_ADMIN_ROLEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_ADMIN_ROLEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for DEFAULT_ADMIN_ROLECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = DEFAULT_ADMIN_ROLEReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "DEFAULT_ADMIN_ROLE()";
            const SELECTOR: [u8; 4] = [162u8, 23u8, 253u8, 223u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `MINTER_ROLE()` and selector `0xd5391393`.
```solidity
function MINTER_ROLE() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MINTER_ROLECall {}
    ///Container type for the return parameters of the [`MINTER_ROLE()`](MINTER_ROLECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MINTER_ROLEReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<MINTER_ROLECall> for UnderlyingRustTuple<'_> {
                fn from(value: MINTER_ROLECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for MINTER_ROLECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<MINTER_ROLEReturn> for UnderlyingRustTuple<'_> {
                fn from(value: MINTER_ROLEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for MINTER_ROLEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for MINTER_ROLECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = MINTER_ROLEReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "MINTER_ROLE()";
            const SELECTOR: [u8; 4] = [213u8, 57u8, 19u8, 147u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `approve(address,uint256)` and selector `0x095ea7b3`.
```solidity
function approve(address to, uint256 tokenId) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct approveCall {
        #[allow(missing_docs)]
        pub to: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub tokenId: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`approve(address,uint256)`](approveCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct approveReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<approveCall> for UnderlyingRustTuple<'_> {
                fn from(value: approveCall) -> Self {
                    (value.to, value.tokenId)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for approveCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        to: tuple.0,
                        tokenId: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<approveReturn> for UnderlyingRustTuple<'_> {
                fn from(value: approveReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for approveReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for approveCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = approveReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "approve(address,uint256)";
            const SELECTOR: [u8; 4] = [9u8, 94u8, 167u8, 179u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.to,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.tokenId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `balanceOf(address)` and selector `0x70a08231`.
```solidity
function balanceOf(address owner) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct balanceOfCall {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`balanceOf(address)`](balanceOfCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct balanceOfReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<balanceOfCall> for UnderlyingRustTuple<'_> {
                fn from(value: balanceOfCall) -> Self {
                    (value.owner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for balanceOfCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { owner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<balanceOfReturn> for UnderlyingRustTuple<'_> {
                fn from(value: balanceOfReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for balanceOfReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for balanceOfCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = balanceOfReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "balanceOf(address)";
            const SELECTOR: [u8; 4] = [112u8, 160u8, 130u8, 49u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `baseAgentNFTURI()` and selector `0xf6847289`.
```solidity
function baseAgentNFTURI() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct baseAgentNFTURICall {}
    ///Container type for the return parameters of the [`baseAgentNFTURI()`](baseAgentNFTURICall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct baseAgentNFTURIReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<baseAgentNFTURICall> for UnderlyingRustTuple<'_> {
                fn from(value: baseAgentNFTURICall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for baseAgentNFTURICall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<baseAgentNFTURIReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: baseAgentNFTURIReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for baseAgentNFTURIReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for baseAgentNFTURICall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = baseAgentNFTURIReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "baseAgentNFTURI()";
            const SELECTOR: [u8; 4] = [246u8, 132u8, 114u8, 137u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getApproved(uint256)` and selector `0x081812fc`.
```solidity
function getApproved(uint256 tokenId) external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getApprovedCall {
        #[allow(missing_docs)]
        pub tokenId: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`getApproved(uint256)`](getApprovedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getApprovedReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getApprovedCall> for UnderlyingRustTuple<'_> {
                fn from(value: getApprovedCall) -> Self {
                    (value.tokenId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getApprovedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { tokenId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getApprovedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getApprovedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getApprovedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getApprovedCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getApprovedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getApproved(uint256)";
            const SELECTOR: [u8; 4] = [8u8, 24u8, 18u8, 252u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.tokenId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getRoleAdmin(bytes32)` and selector `0x248a9ca3`.
```solidity
function getRoleAdmin(bytes32 role) external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRoleAdminCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`getRoleAdmin(bytes32)`](getRoleAdminCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRoleAdminReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRoleAdminCall> for UnderlyingRustTuple<'_> {
                fn from(value: getRoleAdminCall) -> Self {
                    (value.role,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getRoleAdminCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { role: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRoleAdminReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getRoleAdminReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getRoleAdminReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getRoleAdminCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getRoleAdminReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getRoleAdmin(bytes32)";
            const SELECTOR: [u8; 4] = [36u8, 138u8, 156u8, 163u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `grantRole(bytes32,address)` and selector `0x2f2ff15d`.
```solidity
function grantRole(bytes32 role, address account) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct grantRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`grantRole(bytes32,address)`](grantRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct grantRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<grantRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: grantRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for grantRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<grantRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: grantRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for grantRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for grantRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = grantRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "grantRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [47u8, 47u8, 241u8, 93u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `hasRole(bytes32,address)` and selector `0x91d14854`.
```solidity
function hasRole(bytes32 role, address account) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hasRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`hasRole(bytes32,address)`](hasRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hasRoleReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hasRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: hasRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for hasRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hasRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: hasRoleReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for hasRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for hasRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = hasRoleReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "hasRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [145u8, 209u8, 72u8, 84u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isApprovedForAll(address,address)` and selector `0xe985e9c5`.
```solidity
function isApprovedForAll(address owner, address operator) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isApprovedForAllCall {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub operator: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`isApprovedForAll(address,address)`](isApprovedForAllCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isApprovedForAllReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isApprovedForAllCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: isApprovedForAllCall) -> Self {
                    (value.owner, value.operator)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isApprovedForAllCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        owner: tuple.0,
                        operator: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isApprovedForAllReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: isApprovedForAllReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isApprovedForAllReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isApprovedForAllCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isApprovedForAllReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isApprovedForAll(address,address)";
            const SELECTOR: [u8; 4] = [233u8, 133u8, 233u8, 197u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.operator,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `name()` and selector `0x06fdde03`.
```solidity
function name() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct nameCall {}
    ///Container type for the return parameters of the [`name()`](nameCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct nameReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<nameCall> for UnderlyingRustTuple<'_> {
                fn from(value: nameCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for nameCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<nameReturn> for UnderlyingRustTuple<'_> {
                fn from(value: nameReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for nameReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for nameCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = nameReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "name()";
            const SELECTOR: [u8; 4] = [6u8, 253u8, 222u8, 3u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `ownerOf(uint256)` and selector `0x6352211e`.
```solidity
function ownerOf(uint256 tokenId) external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerOfCall {
        #[allow(missing_docs)]
        pub tokenId: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`ownerOf(uint256)`](ownerOfCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerOfReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerOfCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerOfCall) -> Self {
                    (value.tokenId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerOfCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { tokenId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerOfReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerOfReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerOfReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerOfCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerOfReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ownerOf(uint256)";
            const SELECTOR: [u8; 4] = [99u8, 82u8, 33u8, 30u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.tokenId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `renounceRole(bytes32,address)` and selector `0x36568abe`.
```solidity
function renounceRole(bytes32 role, address callerConfirmation) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub callerConfirmation: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`renounceRole(bytes32,address)`](renounceRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: renounceRoleCall) -> Self {
                    (value.role, value.callerConfirmation)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for renounceRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        callerConfirmation: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: renounceRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for renounceRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [54u8, 86u8, 138u8, 190u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.callerConfirmation,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `revokeRole(bytes32,address)` and selector `0xd547741f`.
```solidity
function revokeRole(bytes32 role, address account) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct revokeRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`revokeRole(bytes32,address)`](revokeRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct revokeRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<revokeRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: revokeRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for revokeRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<revokeRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: revokeRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for revokeRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for revokeRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = revokeRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "revokeRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [213u8, 71u8, 116u8, 31u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `safeMint(address)` and selector `0x40d097c3`.
```solidity
function safeMint(address to) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct safeMintCall {
        #[allow(missing_docs)]
        pub to: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`safeMint(address)`](safeMintCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct safeMintReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<safeMintCall> for UnderlyingRustTuple<'_> {
                fn from(value: safeMintCall) -> Self {
                    (value.to,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for safeMintCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { to: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<safeMintReturn> for UnderlyingRustTuple<'_> {
                fn from(value: safeMintReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for safeMintReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for safeMintCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = safeMintReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "safeMint(address)";
            const SELECTOR: [u8; 4] = [64u8, 208u8, 151u8, 195u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.to,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `safeTransferFrom(address,address,uint256)` and selector `0x42842e0e`.
```solidity
function safeTransferFrom(address from, address to, uint256 tokenId) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct safeTransferFrom_0Call {
        #[allow(missing_docs)]
        pub from: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub to: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub tokenId: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`safeTransferFrom(address,address,uint256)`](safeTransferFrom_0Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct safeTransferFrom_0Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<safeTransferFrom_0Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: safeTransferFrom_0Call) -> Self {
                    (value.from, value.to, value.tokenId)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for safeTransferFrom_0Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        from: tuple.0,
                        to: tuple.1,
                        tokenId: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<safeTransferFrom_0Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: safeTransferFrom_0Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for safeTransferFrom_0Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for safeTransferFrom_0Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = safeTransferFrom_0Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "safeTransferFrom(address,address,uint256)";
            const SELECTOR: [u8; 4] = [66u8, 132u8, 46u8, 14u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.from,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.to,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.tokenId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `safeTransferFrom(address,address,uint256,bytes)` and selector `0xb88d4fde`.
```solidity
function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct safeTransferFrom_1Call {
        #[allow(missing_docs)]
        pub from: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub to: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub tokenId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`safeTransferFrom(address,address,uint256,bytes)`](safeTransferFrom_1Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct safeTransferFrom_1Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<safeTransferFrom_1Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: safeTransferFrom_1Call) -> Self {
                    (value.from, value.to, value.tokenId, value.data)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for safeTransferFrom_1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        from: tuple.0,
                        to: tuple.1,
                        tokenId: tuple.2,
                        data: tuple.3,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<safeTransferFrom_1Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: safeTransferFrom_1Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for safeTransferFrom_1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for safeTransferFrom_1Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = safeTransferFrom_1Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "safeTransferFrom(address,address,uint256,bytes)";
            const SELECTOR: [u8; 4] = [184u8, 141u8, 79u8, 222u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.from,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.to,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.tokenId),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setApprovalForAll(address,bool)` and selector `0xa22cb465`.
```solidity
function setApprovalForAll(address operator, bool approved) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setApprovalForAllCall {
        #[allow(missing_docs)]
        pub operator: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub approved: bool,
    }
    ///Container type for the return parameters of the [`setApprovalForAll(address,bool)`](setApprovalForAllCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setApprovalForAllReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address, bool);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setApprovalForAllCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setApprovalForAllCall) -> Self {
                    (value.operator, value.approved)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setApprovalForAllCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        operator: tuple.0,
                        approved: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setApprovalForAllReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setApprovalForAllReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setApprovalForAllReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setApprovalForAllCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setApprovalForAllReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setApprovalForAll(address,bool)";
            const SELECTOR: [u8; 4] = [162u8, 44u8, 180u8, 101u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.operator,
                    ),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.approved,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setBaseAgentNFTURI(string)` and selector `0x2d0e12d4`.
```solidity
function setBaseAgentNFTURI(string memory newBaseAgentNFTURI) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setBaseAgentNFTURICall {
        #[allow(missing_docs)]
        pub newBaseAgentNFTURI: alloy::sol_types::private::String,
    }
    ///Container type for the return parameters of the [`setBaseAgentNFTURI(string)`](setBaseAgentNFTURICall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setBaseAgentNFTURIReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setBaseAgentNFTURICall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setBaseAgentNFTURICall) -> Self {
                    (value.newBaseAgentNFTURI,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setBaseAgentNFTURICall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        newBaseAgentNFTURI: tuple.0,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setBaseAgentNFTURIReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setBaseAgentNFTURIReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setBaseAgentNFTURIReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setBaseAgentNFTURICall {
            type Parameters<'a> = (alloy::sol_types::sol_data::String,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setBaseAgentNFTURIReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setBaseAgentNFTURI(string)";
            const SELECTOR: [u8; 4] = [45u8, 14u8, 18u8, 212u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.newBaseAgentNFTURI,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `supportsInterface(bytes4)` and selector `0x01ffc9a7`.
```solidity
function supportsInterface(bytes4 interfaceId) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct supportsInterfaceCall {
        #[allow(missing_docs)]
        pub interfaceId: alloy::sol_types::private::FixedBytes<4>,
    }
    ///Container type for the return parameters of the [`supportsInterface(bytes4)`](supportsInterfaceCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct supportsInterfaceReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<4>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<supportsInterfaceCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: supportsInterfaceCall) -> Self {
                    (value.interfaceId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for supportsInterfaceCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { interfaceId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<supportsInterfaceReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: supportsInterfaceReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for supportsInterfaceReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for supportsInterfaceCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = supportsInterfaceReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "supportsInterface(bytes4)";
            const SELECTOR: [u8; 4] = [1u8, 255u8, 201u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        4,
                    > as alloy_sol_types::SolType>::tokenize(&self.interfaceId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `symbol()` and selector `0x95d89b41`.
```solidity
function symbol() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct symbolCall {}
    ///Container type for the return parameters of the [`symbol()`](symbolCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct symbolReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<symbolCall> for UnderlyingRustTuple<'_> {
                fn from(value: symbolCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for symbolCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<symbolReturn> for UnderlyingRustTuple<'_> {
                fn from(value: symbolReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for symbolReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for symbolCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = symbolReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "symbol()";
            const SELECTOR: [u8; 4] = [149u8, 216u8, 155u8, 65u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `tokenURI(uint256)` and selector `0xc87b56dd`.
```solidity
function tokenURI(uint256 tokenId) external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct tokenURICall {
        #[allow(missing_docs)]
        pub tokenId: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`tokenURI(uint256)`](tokenURICall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct tokenURIReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<tokenURICall> for UnderlyingRustTuple<'_> {
                fn from(value: tokenURICall) -> Self {
                    (value.tokenId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for tokenURICall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { tokenId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<tokenURIReturn> for UnderlyingRustTuple<'_> {
                fn from(value: tokenURIReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for tokenURIReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for tokenURICall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = tokenURIReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "tokenURI(uint256)";
            const SELECTOR: [u8; 4] = [200u8, 123u8, 86u8, 221u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.tokenId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferFrom(address,address,uint256)` and selector `0x23b872dd`.
```solidity
function transferFrom(address from, address to, uint256 tokenId) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferFromCall {
        #[allow(missing_docs)]
        pub from: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub to: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub tokenId: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`transferFrom(address,address,uint256)`](transferFromCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferFromReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferFromCall> for UnderlyingRustTuple<'_> {
                fn from(value: transferFromCall) -> Self {
                    (value.from, value.to, value.tokenId)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for transferFromCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        from: tuple.0,
                        to: tuple.1,
                        tokenId: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferFromReturn> for UnderlyingRustTuple<'_> {
                fn from(value: transferFromReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for transferFromReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferFromCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferFromReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferFrom(address,address,uint256)";
            const SELECTOR: [u8; 4] = [35u8, 184u8, 114u8, 221u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.from,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.to,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.tokenId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`DreamAgentNFT`](self) function calls.
    pub enum DreamAgentNFTCalls {
        #[allow(missing_docs)]
        DEFAULT_ADMIN_ROLE(DEFAULT_ADMIN_ROLECall),
        #[allow(missing_docs)]
        MINTER_ROLE(MINTER_ROLECall),
        #[allow(missing_docs)]
        approve(approveCall),
        #[allow(missing_docs)]
        balanceOf(balanceOfCall),
        #[allow(missing_docs)]
        baseAgentNFTURI(baseAgentNFTURICall),
        #[allow(missing_docs)]
        getApproved(getApprovedCall),
        #[allow(missing_docs)]
        getRoleAdmin(getRoleAdminCall),
        #[allow(missing_docs)]
        grantRole(grantRoleCall),
        #[allow(missing_docs)]
        hasRole(hasRoleCall),
        #[allow(missing_docs)]
        isApprovedForAll(isApprovedForAllCall),
        #[allow(missing_docs)]
        name(nameCall),
        #[allow(missing_docs)]
        ownerOf(ownerOfCall),
        #[allow(missing_docs)]
        renounceRole(renounceRoleCall),
        #[allow(missing_docs)]
        revokeRole(revokeRoleCall),
        #[allow(missing_docs)]
        safeMint(safeMintCall),
        #[allow(missing_docs)]
        safeTransferFrom_0(safeTransferFrom_0Call),
        #[allow(missing_docs)]
        safeTransferFrom_1(safeTransferFrom_1Call),
        #[allow(missing_docs)]
        setApprovalForAll(setApprovalForAllCall),
        #[allow(missing_docs)]
        setBaseAgentNFTURI(setBaseAgentNFTURICall),
        #[allow(missing_docs)]
        supportsInterface(supportsInterfaceCall),
        #[allow(missing_docs)]
        symbol(symbolCall),
        #[allow(missing_docs)]
        tokenURI(tokenURICall),
        #[allow(missing_docs)]
        transferFrom(transferFromCall),
    }
    #[automatically_derived]
    impl DreamAgentNFTCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [1u8, 255u8, 201u8, 167u8],
            [6u8, 253u8, 222u8, 3u8],
            [8u8, 24u8, 18u8, 252u8],
            [9u8, 94u8, 167u8, 179u8],
            [35u8, 184u8, 114u8, 221u8],
            [36u8, 138u8, 156u8, 163u8],
            [45u8, 14u8, 18u8, 212u8],
            [47u8, 47u8, 241u8, 93u8],
            [54u8, 86u8, 138u8, 190u8],
            [64u8, 208u8, 151u8, 195u8],
            [66u8, 132u8, 46u8, 14u8],
            [99u8, 82u8, 33u8, 30u8],
            [112u8, 160u8, 130u8, 49u8],
            [145u8, 209u8, 72u8, 84u8],
            [149u8, 216u8, 155u8, 65u8],
            [162u8, 23u8, 253u8, 223u8],
            [162u8, 44u8, 180u8, 101u8],
            [184u8, 141u8, 79u8, 222u8],
            [200u8, 123u8, 86u8, 221u8],
            [213u8, 57u8, 19u8, 147u8],
            [213u8, 71u8, 116u8, 31u8],
            [233u8, 133u8, 233u8, 197u8],
            [246u8, 132u8, 114u8, 137u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for DreamAgentNFTCalls {
        const NAME: &'static str = "DreamAgentNFTCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 23usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::DEFAULT_ADMIN_ROLE(_) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::MINTER_ROLE(_) => {
                    <MINTER_ROLECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::approve(_) => <approveCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::balanceOf(_) => {
                    <balanceOfCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::baseAgentNFTURI(_) => {
                    <baseAgentNFTURICall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getApproved(_) => {
                    <getApprovedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getRoleAdmin(_) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::grantRole(_) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::hasRole(_) => <hasRoleCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::isApprovedForAll(_) => {
                    <isApprovedForAllCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::name(_) => <nameCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::ownerOf(_) => <ownerOfCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::renounceRole(_) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::revokeRole(_) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::safeMint(_) => <safeMintCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::safeTransferFrom_0(_) => {
                    <safeTransferFrom_0Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::safeTransferFrom_1(_) => {
                    <safeTransferFrom_1Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setApprovalForAll(_) => {
                    <setApprovalForAllCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setBaseAgentNFTURI(_) => {
                    <setBaseAgentNFTURICall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::supportsInterface(_) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::symbol(_) => <symbolCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::tokenURI(_) => <tokenURICall as alloy_sol_types::SolCall>::SELECTOR,
                Self::transferFrom(_) => {
                    <transferFromCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<DreamAgentNFTCalls>] = &[
                {
                    fn supportsInterface(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<DreamAgentNFTCalls> {
                        <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(DreamAgentNFTCalls::supportsInterface)
                    }
                    supportsInterface
                },
                {
                    fn name(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<DreamAgentNFTCalls> {
                        <nameCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(DreamAgentNFTCalls::name)
                    }
                    name
                },
                {
                    fn getApproved(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<DreamAgentNFTCalls> {
                        <getApprovedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(DreamAgentNFTCalls::getApproved)
                    }
                    getApproved
                },
                {
                    fn approve(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<DreamAgentNFTCalls> {
                        <approveCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(DreamAgentNFTCalls::approve)
                    }
                    approve
                },
                {
                    fn transferFrom(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<DreamAgentNFTCalls> {
                        <transferFromCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(DreamAgentNFTCalls::transferFrom)
                    }
                    transferFrom
                },
                {
                    fn getRoleAdmin(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<DreamAgentNFTCalls> {
                        <getRoleAdminCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(DreamAgentNFTCalls::getRoleAdmin)
                    }
                    getRoleAdmin
                },
                {
                    fn setBaseAgentNFTURI(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<DreamAgentNFTCalls> {
                        <setBaseAgentNFTURICall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(DreamAgentNFTCalls::setBaseAgentNFTURI)
                    }
                    setBaseAgentNFTURI
                },
                {
                    fn grantRole(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<DreamAgentNFTCalls> {
                        <grantRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(DreamAgentNFTCalls::grantRole)
                    }
                    grantRole
                },
                {
                    fn renounceRole(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<DreamAgentNFTCalls> {
                        <renounceRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(DreamAgentNFTCalls::renounceRole)
                    }
                    renounceRole
                },
                {
                    fn safeMint(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<DreamAgentNFTCalls> {
                        <safeMintCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(DreamAgentNFTCalls::safeMint)
                    }
                    safeMint
                },
                {
                    fn safeTransferFrom_0(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<DreamAgentNFTCalls> {
                        <safeTransferFrom_0Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(DreamAgentNFTCalls::safeTransferFrom_0)
                    }
                    safeTransferFrom_0
                },
                {
                    fn ownerOf(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<DreamAgentNFTCalls> {
                        <ownerOfCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(DreamAgentNFTCalls::ownerOf)
                    }
                    ownerOf
                },
                {
                    fn balanceOf(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<DreamAgentNFTCalls> {
                        <balanceOfCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(DreamAgentNFTCalls::balanceOf)
                    }
                    balanceOf
                },
                {
                    fn hasRole(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<DreamAgentNFTCalls> {
                        <hasRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(DreamAgentNFTCalls::hasRole)
                    }
                    hasRole
                },
                {
                    fn symbol(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<DreamAgentNFTCalls> {
                        <symbolCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(DreamAgentNFTCalls::symbol)
                    }
                    symbol
                },
                {
                    fn DEFAULT_ADMIN_ROLE(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<DreamAgentNFTCalls> {
                        <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(DreamAgentNFTCalls::DEFAULT_ADMIN_ROLE)
                    }
                    DEFAULT_ADMIN_ROLE
                },
                {
                    fn setApprovalForAll(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<DreamAgentNFTCalls> {
                        <setApprovalForAllCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(DreamAgentNFTCalls::setApprovalForAll)
                    }
                    setApprovalForAll
                },
                {
                    fn safeTransferFrom_1(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<DreamAgentNFTCalls> {
                        <safeTransferFrom_1Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(DreamAgentNFTCalls::safeTransferFrom_1)
                    }
                    safeTransferFrom_1
                },
                {
                    fn tokenURI(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<DreamAgentNFTCalls> {
                        <tokenURICall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(DreamAgentNFTCalls::tokenURI)
                    }
                    tokenURI
                },
                {
                    fn MINTER_ROLE(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<DreamAgentNFTCalls> {
                        <MINTER_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(DreamAgentNFTCalls::MINTER_ROLE)
                    }
                    MINTER_ROLE
                },
                {
                    fn revokeRole(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<DreamAgentNFTCalls> {
                        <revokeRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(DreamAgentNFTCalls::revokeRole)
                    }
                    revokeRole
                },
                {
                    fn isApprovedForAll(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<DreamAgentNFTCalls> {
                        <isApprovedForAllCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(DreamAgentNFTCalls::isApprovedForAll)
                    }
                    isApprovedForAll
                },
                {
                    fn baseAgentNFTURI(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<DreamAgentNFTCalls> {
                        <baseAgentNFTURICall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(DreamAgentNFTCalls::baseAgentNFTURI)
                    }
                    baseAgentNFTURI
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::DEFAULT_ADMIN_ROLE(inner) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::MINTER_ROLE(inner) => {
                    <MINTER_ROLECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::approve(inner) => {
                    <approveCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::balanceOf(inner) => {
                    <balanceOfCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::baseAgentNFTURI(inner) => {
                    <baseAgentNFTURICall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getApproved(inner) => {
                    <getApprovedCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getRoleAdmin(inner) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::grantRole(inner) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::hasRole(inner) => {
                    <hasRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isApprovedForAll(inner) => {
                    <isApprovedForAllCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::name(inner) => {
                    <nameCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::ownerOf(inner) => {
                    <ownerOfCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::renounceRole(inner) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::revokeRole(inner) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::safeMint(inner) => {
                    <safeMintCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::safeTransferFrom_0(inner) => {
                    <safeTransferFrom_0Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::safeTransferFrom_1(inner) => {
                    <safeTransferFrom_1Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setApprovalForAll(inner) => {
                    <setApprovalForAllCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setBaseAgentNFTURI(inner) => {
                    <setBaseAgentNFTURICall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::supportsInterface(inner) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::symbol(inner) => {
                    <symbolCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::tokenURI(inner) => {
                    <tokenURICall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::transferFrom(inner) => {
                    <transferFromCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::DEFAULT_ADMIN_ROLE(inner) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::MINTER_ROLE(inner) => {
                    <MINTER_ROLECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::approve(inner) => {
                    <approveCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::balanceOf(inner) => {
                    <balanceOfCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::baseAgentNFTURI(inner) => {
                    <baseAgentNFTURICall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getApproved(inner) => {
                    <getApprovedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getRoleAdmin(inner) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::grantRole(inner) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::hasRole(inner) => {
                    <hasRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::isApprovedForAll(inner) => {
                    <isApprovedForAllCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::name(inner) => {
                    <nameCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::ownerOf(inner) => {
                    <ownerOfCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::renounceRole(inner) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::revokeRole(inner) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::safeMint(inner) => {
                    <safeMintCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::safeTransferFrom_0(inner) => {
                    <safeTransferFrom_0Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::safeTransferFrom_1(inner) => {
                    <safeTransferFrom_1Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setApprovalForAll(inner) => {
                    <setApprovalForAllCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setBaseAgentNFTURI(inner) => {
                    <setBaseAgentNFTURICall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::supportsInterface(inner) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::symbol(inner) => {
                    <symbolCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::tokenURI(inner) => {
                    <tokenURICall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferFrom(inner) => {
                    <transferFromCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`DreamAgentNFT`](self) custom errors.
    pub enum DreamAgentNFTErrors {
        #[allow(missing_docs)]
        AccessControlBadConfirmation(AccessControlBadConfirmation),
        #[allow(missing_docs)]
        AccessControlUnauthorizedAccount(AccessControlUnauthorizedAccount),
        #[allow(missing_docs)]
        ERC721IncorrectOwner(ERC721IncorrectOwner),
        #[allow(missing_docs)]
        ERC721InsufficientApproval(ERC721InsufficientApproval),
        #[allow(missing_docs)]
        ERC721InvalidApprover(ERC721InvalidApprover),
        #[allow(missing_docs)]
        ERC721InvalidOperator(ERC721InvalidOperator),
        #[allow(missing_docs)]
        ERC721InvalidOwner(ERC721InvalidOwner),
        #[allow(missing_docs)]
        ERC721InvalidReceiver(ERC721InvalidReceiver),
        #[allow(missing_docs)]
        ERC721InvalidSender(ERC721InvalidSender),
        #[allow(missing_docs)]
        ERC721NonexistentToken(ERC721NonexistentToken),
    }
    #[automatically_derived]
    impl DreamAgentNFTErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [23u8, 126u8, 128u8, 47u8],
            [91u8, 8u8, 186u8, 24u8],
            [100u8, 40u8, 61u8, 123u8],
            [100u8, 160u8, 174u8, 146u8],
            [102u8, 151u8, 178u8, 50u8],
            [115u8, 198u8, 172u8, 110u8],
            [126u8, 39u8, 50u8, 137u8],
            [137u8, 198u8, 43u8, 100u8],
            [169u8, 251u8, 245u8, 31u8],
            [226u8, 81u8, 125u8, 63u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for DreamAgentNFTErrors {
        const NAME: &'static str = "DreamAgentNFTErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 10usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AccessControlBadConfirmation(_) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::SELECTOR
                }
                Self::AccessControlUnauthorizedAccount(_) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC721IncorrectOwner(_) => {
                    <ERC721IncorrectOwner as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC721InsufficientApproval(_) => {
                    <ERC721InsufficientApproval as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC721InvalidApprover(_) => {
                    <ERC721InvalidApprover as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC721InvalidOperator(_) => {
                    <ERC721InvalidOperator as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC721InvalidOwner(_) => {
                    <ERC721InvalidOwner as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC721InvalidReceiver(_) => {
                    <ERC721InvalidReceiver as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC721InvalidSender(_) => {
                    <ERC721InvalidSender as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC721NonexistentToken(_) => {
                    <ERC721NonexistentToken as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<DreamAgentNFTErrors>] = &[
                {
                    fn ERC721InsufficientApproval(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<DreamAgentNFTErrors> {
                        <ERC721InsufficientApproval as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(DreamAgentNFTErrors::ERC721InsufficientApproval)
                    }
                    ERC721InsufficientApproval
                },
                {
                    fn ERC721InvalidOperator(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<DreamAgentNFTErrors> {
                        <ERC721InvalidOperator as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(DreamAgentNFTErrors::ERC721InvalidOperator)
                    }
                    ERC721InvalidOperator
                },
                {
                    fn ERC721IncorrectOwner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<DreamAgentNFTErrors> {
                        <ERC721IncorrectOwner as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(DreamAgentNFTErrors::ERC721IncorrectOwner)
                    }
                    ERC721IncorrectOwner
                },
                {
                    fn ERC721InvalidReceiver(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<DreamAgentNFTErrors> {
                        <ERC721InvalidReceiver as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(DreamAgentNFTErrors::ERC721InvalidReceiver)
                    }
                    ERC721InvalidReceiver
                },
                {
                    fn AccessControlBadConfirmation(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<DreamAgentNFTErrors> {
                        <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(DreamAgentNFTErrors::AccessControlBadConfirmation)
                    }
                    AccessControlBadConfirmation
                },
                {
                    fn ERC721InvalidSender(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<DreamAgentNFTErrors> {
                        <ERC721InvalidSender as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(DreamAgentNFTErrors::ERC721InvalidSender)
                    }
                    ERC721InvalidSender
                },
                {
                    fn ERC721NonexistentToken(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<DreamAgentNFTErrors> {
                        <ERC721NonexistentToken as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(DreamAgentNFTErrors::ERC721NonexistentToken)
                    }
                    ERC721NonexistentToken
                },
                {
                    fn ERC721InvalidOwner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<DreamAgentNFTErrors> {
                        <ERC721InvalidOwner as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(DreamAgentNFTErrors::ERC721InvalidOwner)
                    }
                    ERC721InvalidOwner
                },
                {
                    fn ERC721InvalidApprover(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<DreamAgentNFTErrors> {
                        <ERC721InvalidApprover as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(DreamAgentNFTErrors::ERC721InvalidApprover)
                    }
                    ERC721InvalidApprover
                },
                {
                    fn AccessControlUnauthorizedAccount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<DreamAgentNFTErrors> {
                        <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(DreamAgentNFTErrors::AccessControlUnauthorizedAccount)
                    }
                    AccessControlUnauthorizedAccount
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AccessControlBadConfirmation(inner) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::AccessControlUnauthorizedAccount(inner) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC721IncorrectOwner(inner) => {
                    <ERC721IncorrectOwner as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC721InsufficientApproval(inner) => {
                    <ERC721InsufficientApproval as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC721InvalidApprover(inner) => {
                    <ERC721InvalidApprover as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC721InvalidOperator(inner) => {
                    <ERC721InvalidOperator as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC721InvalidOwner(inner) => {
                    <ERC721InvalidOwner as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC721InvalidReceiver(inner) => {
                    <ERC721InvalidReceiver as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC721InvalidSender(inner) => {
                    <ERC721InvalidSender as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC721NonexistentToken(inner) => {
                    <ERC721NonexistentToken as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AccessControlBadConfirmation(inner) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::AccessControlUnauthorizedAccount(inner) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC721IncorrectOwner(inner) => {
                    <ERC721IncorrectOwner as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC721InsufficientApproval(inner) => {
                    <ERC721InsufficientApproval as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC721InvalidApprover(inner) => {
                    <ERC721InvalidApprover as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC721InvalidOperator(inner) => {
                    <ERC721InvalidOperator as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC721InvalidOwner(inner) => {
                    <ERC721InvalidOwner as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC721InvalidReceiver(inner) => {
                    <ERC721InvalidReceiver as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC721InvalidSender(inner) => {
                    <ERC721InvalidSender as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC721NonexistentToken(inner) => {
                    <ERC721NonexistentToken as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`DreamAgentNFT`](self) events.
    pub enum DreamAgentNFTEvents {
        #[allow(missing_docs)]
        Approval(Approval),
        #[allow(missing_docs)]
        ApprovalForAll(ApprovalForAll),
        #[allow(missing_docs)]
        RoleAdminChanged(RoleAdminChanged),
        #[allow(missing_docs)]
        RoleGranted(RoleGranted),
        #[allow(missing_docs)]
        RoleRevoked(RoleRevoked),
        #[allow(missing_docs)]
        Transfer(Transfer),
    }
    #[automatically_derived]
    impl DreamAgentNFTEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                23u8,
                48u8,
                126u8,
                171u8,
                57u8,
                171u8,
                97u8,
                7u8,
                232u8,
                137u8,
                152u8,
                69u8,
                173u8,
                61u8,
                89u8,
                189u8,
                150u8,
                83u8,
                242u8,
                0u8,
                242u8,
                32u8,
                146u8,
                4u8,
                137u8,
                202u8,
                43u8,
                89u8,
                55u8,
                105u8,
                108u8,
                49u8,
            ],
            [
                47u8,
                135u8,
                136u8,
                17u8,
                126u8,
                126u8,
                255u8,
                29u8,
                130u8,
                233u8,
                38u8,
                236u8,
                121u8,
                73u8,
                1u8,
                209u8,
                124u8,
                120u8,
                2u8,
                74u8,
                80u8,
                39u8,
                9u8,
                64u8,
                48u8,
                69u8,
                64u8,
                167u8,
                51u8,
                101u8,
                111u8,
                13u8,
            ],
            [
                140u8,
                91u8,
                225u8,
                229u8,
                235u8,
                236u8,
                125u8,
                91u8,
                209u8,
                79u8,
                113u8,
                66u8,
                125u8,
                30u8,
                132u8,
                243u8,
                221u8,
                3u8,
                20u8,
                192u8,
                247u8,
                178u8,
                41u8,
                30u8,
                91u8,
                32u8,
                10u8,
                200u8,
                199u8,
                195u8,
                185u8,
                37u8,
            ],
            [
                189u8,
                121u8,
                184u8,
                111u8,
                254u8,
                10u8,
                184u8,
                232u8,
                119u8,
                97u8,
                81u8,
                81u8,
                66u8,
                23u8,
                205u8,
                124u8,
                172u8,
                213u8,
                44u8,
                144u8,
                159u8,
                102u8,
                71u8,
                92u8,
                58u8,
                244u8,
                78u8,
                18u8,
                159u8,
                11u8,
                0u8,
                255u8,
            ],
            [
                221u8,
                242u8,
                82u8,
                173u8,
                27u8,
                226u8,
                200u8,
                155u8,
                105u8,
                194u8,
                176u8,
                104u8,
                252u8,
                55u8,
                141u8,
                170u8,
                149u8,
                43u8,
                167u8,
                241u8,
                99u8,
                196u8,
                161u8,
                22u8,
                40u8,
                245u8,
                90u8,
                77u8,
                245u8,
                35u8,
                179u8,
                239u8,
            ],
            [
                246u8,
                57u8,
                31u8,
                92u8,
                50u8,
                217u8,
                198u8,
                157u8,
                42u8,
                71u8,
                234u8,
                103u8,
                11u8,
                68u8,
                41u8,
                116u8,
                181u8,
                57u8,
                53u8,
                209u8,
                237u8,
                199u8,
                253u8,
                100u8,
                235u8,
                33u8,
                224u8,
                71u8,
                168u8,
                57u8,
                23u8,
                27u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for DreamAgentNFTEvents {
        const NAME: &'static str = "DreamAgentNFTEvents";
        const COUNT: usize = 6usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<Approval as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Approval as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::Approval)
                }
                Some(<ApprovalForAll as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <ApprovalForAll as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::ApprovalForAll)
                }
                Some(<RoleAdminChanged as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleAdminChanged as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RoleAdminChanged)
                }
                Some(<RoleGranted as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleGranted as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RoleGranted)
                }
                Some(<RoleRevoked as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleRevoked as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RoleRevoked)
                }
                Some(<Transfer as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Transfer as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::Transfer)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for DreamAgentNFTEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::Approval(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::ApprovalForAll(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleAdminChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleGranted(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleRevoked(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Transfer(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::Approval(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::ApprovalForAll(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleAdminChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleGranted(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleRevoked(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Transfer(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`DreamAgentNFT`](self) contract instance.

See the [wrapper's documentation](`DreamAgentNFTInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> DreamAgentNFTInstance<T, P, N> {
        DreamAgentNFTInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        defaultAdmin: alloy::sol_types::private::Address,
        minter: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<DreamAgentNFTInstance<T, P, N>>,
    > {
        DreamAgentNFTInstance::<T, P, N>::deploy(provider, defaultAdmin, minter)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        defaultAdmin: alloy::sol_types::private::Address,
        minter: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        DreamAgentNFTInstance::<T, P, N>::deploy_builder(provider, defaultAdmin, minter)
    }
    /**A [`DreamAgentNFT`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`DreamAgentNFT`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct DreamAgentNFTInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for DreamAgentNFTInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("DreamAgentNFTInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > DreamAgentNFTInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`DreamAgentNFT`](self) contract instance.

See the [wrapper's documentation](`DreamAgentNFTInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            defaultAdmin: alloy::sol_types::private::Address,
            minter: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<DreamAgentNFTInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, defaultAdmin, minter);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            defaultAdmin: alloy::sol_types::private::Address,
            minter: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall {
                            defaultAdmin,
                            minter,
                        },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> DreamAgentNFTInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> DreamAgentNFTInstance<T, P, N> {
            DreamAgentNFTInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > DreamAgentNFTInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`DEFAULT_ADMIN_ROLE`] function.
        pub fn DEFAULT_ADMIN_ROLE(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, DEFAULT_ADMIN_ROLECall, N> {
            self.call_builder(&DEFAULT_ADMIN_ROLECall {})
        }
        ///Creates a new call builder for the [`MINTER_ROLE`] function.
        pub fn MINTER_ROLE(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, MINTER_ROLECall, N> {
            self.call_builder(&MINTER_ROLECall {})
        }
        ///Creates a new call builder for the [`approve`] function.
        pub fn approve(
            &self,
            to: alloy::sol_types::private::Address,
            tokenId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, approveCall, N> {
            self.call_builder(&approveCall { to, tokenId })
        }
        ///Creates a new call builder for the [`balanceOf`] function.
        pub fn balanceOf(
            &self,
            owner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, balanceOfCall, N> {
            self.call_builder(&balanceOfCall { owner })
        }
        ///Creates a new call builder for the [`baseAgentNFTURI`] function.
        pub fn baseAgentNFTURI(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, baseAgentNFTURICall, N> {
            self.call_builder(&baseAgentNFTURICall {})
        }
        ///Creates a new call builder for the [`getApproved`] function.
        pub fn getApproved(
            &self,
            tokenId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, getApprovedCall, N> {
            self.call_builder(&getApprovedCall { tokenId })
        }
        ///Creates a new call builder for the [`getRoleAdmin`] function.
        pub fn getRoleAdmin(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, getRoleAdminCall, N> {
            self.call_builder(&getRoleAdminCall { role })
        }
        ///Creates a new call builder for the [`grantRole`] function.
        pub fn grantRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, grantRoleCall, N> {
            self.call_builder(&grantRoleCall { role, account })
        }
        ///Creates a new call builder for the [`hasRole`] function.
        pub fn hasRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, hasRoleCall, N> {
            self.call_builder(&hasRoleCall { role, account })
        }
        ///Creates a new call builder for the [`isApprovedForAll`] function.
        pub fn isApprovedForAll(
            &self,
            owner: alloy::sol_types::private::Address,
            operator: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, isApprovedForAllCall, N> {
            self.call_builder(
                &isApprovedForAllCall {
                    owner,
                    operator,
                },
            )
        }
        ///Creates a new call builder for the [`name`] function.
        pub fn name(&self) -> alloy_contract::SolCallBuilder<T, &P, nameCall, N> {
            self.call_builder(&nameCall {})
        }
        ///Creates a new call builder for the [`ownerOf`] function.
        pub fn ownerOf(
            &self,
            tokenId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, ownerOfCall, N> {
            self.call_builder(&ownerOfCall { tokenId })
        }
        ///Creates a new call builder for the [`renounceRole`] function.
        pub fn renounceRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            callerConfirmation: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, renounceRoleCall, N> {
            self.call_builder(
                &renounceRoleCall {
                    role,
                    callerConfirmation,
                },
            )
        }
        ///Creates a new call builder for the [`revokeRole`] function.
        pub fn revokeRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, revokeRoleCall, N> {
            self.call_builder(&revokeRoleCall { role, account })
        }
        ///Creates a new call builder for the [`safeMint`] function.
        pub fn safeMint(
            &self,
            to: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, safeMintCall, N> {
            self.call_builder(&safeMintCall { to })
        }
        ///Creates a new call builder for the [`safeTransferFrom_0`] function.
        pub fn safeTransferFrom_0(
            &self,
            from: alloy::sol_types::private::Address,
            to: alloy::sol_types::private::Address,
            tokenId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, safeTransferFrom_0Call, N> {
            self.call_builder(
                &safeTransferFrom_0Call {
                    from,
                    to,
                    tokenId,
                },
            )
        }
        ///Creates a new call builder for the [`safeTransferFrom_1`] function.
        pub fn safeTransferFrom_1(
            &self,
            from: alloy::sol_types::private::Address,
            to: alloy::sol_types::private::Address,
            tokenId: alloy::sol_types::private::primitives::aliases::U256,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, safeTransferFrom_1Call, N> {
            self.call_builder(
                &safeTransferFrom_1Call {
                    from,
                    to,
                    tokenId,
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`setApprovalForAll`] function.
        pub fn setApprovalForAll(
            &self,
            operator: alloy::sol_types::private::Address,
            approved: bool,
        ) -> alloy_contract::SolCallBuilder<T, &P, setApprovalForAllCall, N> {
            self.call_builder(
                &setApprovalForAllCall {
                    operator,
                    approved,
                },
            )
        }
        ///Creates a new call builder for the [`setBaseAgentNFTURI`] function.
        pub fn setBaseAgentNFTURI(
            &self,
            newBaseAgentNFTURI: alloy::sol_types::private::String,
        ) -> alloy_contract::SolCallBuilder<T, &P, setBaseAgentNFTURICall, N> {
            self.call_builder(
                &setBaseAgentNFTURICall {
                    newBaseAgentNFTURI,
                },
            )
        }
        ///Creates a new call builder for the [`supportsInterface`] function.
        pub fn supportsInterface(
            &self,
            interfaceId: alloy::sol_types::private::FixedBytes<4>,
        ) -> alloy_contract::SolCallBuilder<T, &P, supportsInterfaceCall, N> {
            self.call_builder(
                &supportsInterfaceCall {
                    interfaceId,
                },
            )
        }
        ///Creates a new call builder for the [`symbol`] function.
        pub fn symbol(&self) -> alloy_contract::SolCallBuilder<T, &P, symbolCall, N> {
            self.call_builder(&symbolCall {})
        }
        ///Creates a new call builder for the [`tokenURI`] function.
        pub fn tokenURI(
            &self,
            tokenId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, tokenURICall, N> {
            self.call_builder(&tokenURICall { tokenId })
        }
        ///Creates a new call builder for the [`transferFrom`] function.
        pub fn transferFrom(
            &self,
            from: alloy::sol_types::private::Address,
            to: alloy::sol_types::private::Address,
            tokenId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferFromCall, N> {
            self.call_builder(
                &transferFromCall {
                    from,
                    to,
                    tokenId,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > DreamAgentNFTInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`Approval`] event.
        pub fn Approval_filter(&self) -> alloy_contract::Event<T, &P, Approval, N> {
            self.event_filter::<Approval>()
        }
        ///Creates a new event filter for the [`ApprovalForAll`] event.
        pub fn ApprovalForAll_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, ApprovalForAll, N> {
            self.event_filter::<ApprovalForAll>()
        }
        ///Creates a new event filter for the [`RoleAdminChanged`] event.
        pub fn RoleAdminChanged_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RoleAdminChanged, N> {
            self.event_filter::<RoleAdminChanged>()
        }
        ///Creates a new event filter for the [`RoleGranted`] event.
        pub fn RoleGranted_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RoleGranted, N> {
            self.event_filter::<RoleGranted>()
        }
        ///Creates a new event filter for the [`RoleRevoked`] event.
        pub fn RoleRevoked_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RoleRevoked, N> {
            self.event_filter::<RoleRevoked>()
        }
        ///Creates a new event filter for the [`Transfer`] event.
        pub fn Transfer_filter(&self) -> alloy_contract::Event<T, &P, Transfer, N> {
            self.event_filter::<Transfer>()
        }
    }
}
