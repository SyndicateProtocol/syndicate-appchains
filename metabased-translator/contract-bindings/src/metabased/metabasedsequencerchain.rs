/**

Generated by the following Solidity interface...
```solidity
interface MetabasedSequencerChain {
    error AlreadyInitialized();
    error CalldataNotAllowed();
    error InvalidModuleAddress();
    error NotAllowed(address batchSubmitter);
    error OwnableInvalidOwner(address owner);
    error OwnableUnauthorizedAccount(address account);

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event RequirementModuleUpdated(address indexed newModule);
    event TransactionProcessed(address indexed sender, bytes data);

    constructor(uint256 _l3ChainId);

    function calldataRequirementModule() external view returns (address);
    function initialize(address admin, address _requirementModule) external;
    function isAllowed(address proposer) external view returns (bool);
    function isCalldataAllowed(bytes memory data) external view returns (bool);
    function l3ChainId() external view returns (uint256);
    function owner() external view returns (address);
    function processBulkTransactions(bytes[] memory data) external;
    function processTransaction(bytes memory data) external;
    function processTransactionRaw(bytes memory data) external;
    function proposerRequirementModule() external view returns (address);
    function renounceOwnership() external;
    function transferOwnership(address newOwner) external;
    function updateRequirementModule(address _newModule) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_l3ChainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "calldataRequirementModule",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract CalldataPermissionModule"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "initialize",
    "inputs": [
      {
        "name": "admin",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_requirementModule",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "isAllowed",
    "inputs": [
      {
        "name": "proposer",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isCalldataAllowed",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "l3ChainId",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "processBulkTransactions",
    "inputs": [
      {
        "name": "data",
        "type": "bytes[]",
        "internalType": "bytes[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransaction",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransactionRaw",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "proposerRequirementModule",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract ProposerPermissionModule"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "renounceOwnership",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "transferOwnership",
    "inputs": [
      {
        "name": "newOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "updateRequirementModule",
    "inputs": [
      {
        "name": "_newModule",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "OwnershipTransferred",
    "inputs": [
      {
        "name": "previousOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RequirementModuleUpdated",
    "inputs": [
      {
        "name": "newModule",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "TransactionProcessed",
    "inputs": [
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "indexed": false,
        "internalType": "bytes"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AlreadyInitialized",
    "inputs": []
  },
  {
    "type": "error",
    "name": "CalldataNotAllowed",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidModuleAddress",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NotAllowed",
    "inputs": [
      {
        "name": "batchSubmitter",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "OwnableInvalidOwner",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "OwnableUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ]
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod MetabasedSequencerChain {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60a060405234610038576100196100146100e9565b6101b7565b61002161003d565b6112ba6104ca8239608051816103d701526112ba90f35b610043565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061006f90610047565b810190811060018060401b0382111761008757604052565b610051565b9061009f61009861003d565b9283610065565b565b5f80fd5b90565b6100b1816100a5565b036100b857565b5f80fd5b905051906100c9826100a8565b565b906020828203126100e4576100e1915f016100bc565b90565b6100a1565b6101076118ce803803806100fc8161008c565b9283398101906100cb565b90565b90565b90565b61012461011f6101299261010a565b61010d565b6100a5565b90565b60209181520190565b5f7f4c3320636861696e2049442063616e6e6f742062652030000000000000000000910152565b610169601760209261012c565b61017281610135565b0190565b61018b9060208101905f81830391015261015c565b90565b1561019557565b61019d61003d565b62461bcd60e51b8152806101b360048201610176565b0390fd5b6101bf6102d7565b6101dc816101d56101cf5f610110565b916100a5565b141561018e565b608052565b60a01b90565b906101f660ff60a01b916101e1565b9181191691161790565b151590565b61020e90610200565b90565b90565b9061022961022461023092610205565b610211565b82546101e7565b9055565b5f0190565b61024161003d565b3d5f823e3d90fd5b60018060a01b031690565b61026861026361026d92610249565b61010d565b610249565b90565b61027990610254565b90565b61028590610270565b90565b5f1b90565b9061029e60018060a01b0391610288565b9181191691161790565b6102b190610270565b90565b90565b906102cc6102c76102d3926102a8565b6102b4565b825461028d565b9055565b6102e033610344565b6102eb5f6002610214565b6102f361003d565b61014a810181811060018060401b0382111761033f5761031b829161014a6117848439610234565b03905ff0801561033a576103316103389161027c565b60016102b7565b565b610239565b610051565b61034d906103a5565b565b61036361035e6103689261010a565b61010d565b610249565b90565b6103749061034f565b90565b61038090610249565b90565b61038c90610377565b9052565b91906103a3905f60208501940190610383565b565b806103c06103ba6103b55f61036b565b610377565b91610377565b146103d0576103ce9061046a565b565b6103fa6103dc5f61036b565b6103e461003d565b918291631e4fbdf760e01b835260048301610390565b0390fd5b5f1c90565b60018060a01b031690565b61041a61041f916103fe565b610403565b90565b61042c905461040e565b90565b61043890610254565b90565b6104449061042f565b90565b90565b9061045f61045a6104669261043b565b610447565b825461028d565b9055565b6104735f610422565b61047d825f61044a565b906104b16104ab7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09361043b565b9161043b565b916104ba61003d565b806104c481610234565b0390a356fe60806040526004361015610013575b6106d8565b61001d5f356100ec565b80630b83249d146100e75780633514d37b146100e25780633dfb5ee7146100dd57806346e2cc09146100d8578063485cc955146100d3578063715018a6146100ce57806377bfdd19146100c95780638da5cb5b146100c4578063a830b643146100bf578063aaa60707146100ba578063babcc539146100b5578063d4f0eb4d146100b05763f2fde38b0361000e576106a5565b610672565b61063d565b6105ea565b610547565b610475565b61041e565b6103a2565b61035f565b6102c4565b61028e565b610233565b61018a565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f8301121561014a5781359167ffffffffffffffff831161014557602001926020830284011161014057565b61010c565b610108565b610104565b90602082820312610180575f82013567ffffffffffffffff811161017b576101779201610110565b9091565b610100565b6100fc565b5f0190565b346101b9576101a361019d36600461014f565b9061090e565b6101ab6100f2565b806101b581610185565b0390f35b6100f8565b909182601f830112156101f85781359167ffffffffffffffff83116101f35760200192600183028401116101ee57565b61010c565b610108565b610104565b9060208282031261022e575f82013567ffffffffffffffff81116102295761022592016101be565b9091565b610100565b6100fc565b346102625761024c6102463660046101fd565b90610a0d565b6102546100f2565b8061025e81610185565b0390f35b6100f8565b151590565b61027590610267565b9052565b919061028c905f6020850194019061026c565b565b346102bf576102bb6102aa6102a43660046101fd565b90610ad7565b6102b26100f2565b91829182610279565b0390f35b6100f8565b346102f3576102dd6102d73660046101fd565b90610c21565b6102e56100f2565b806102ef81610185565b0390f35b6100f8565b60018060a01b031690565b61030c906102f8565b90565b61031881610303565b0361031f57565b5f80fd5b905035906103308261030f565b565b919060408382031261035a578061034e610357925f8601610323565b93602001610323565b90565b6100fc565b3461038e57610378610372366004610332565b90610e41565b6103806100f2565b8061038a81610185565b0390f35b6100f8565b5f91031261039d57565b6100fc565b346103d0576103b2366004610393565b6103ba610e72565b6103c26100f2565b806103cc81610185565b0390f35b6100f8565b7f000000000000000000000000000000000000000000000000000000000000000090565b90565b610405906103f9565b9052565b919061041c905f602085019401906103fc565b565b3461044e5761042e366004610393565b61044a6104396103d5565b6104416100f2565b91829182610409565b0390f35b6100f8565b61045c90610303565b9052565b9190610473905f60208501940190610453565b565b346104a557610485366004610393565b6104a1610490610eac565b6104986100f2565b91829182610460565b0390f35b6100f8565b1c90565b60018060a01b031690565b6104c99060086104ce93026104aa565b6104ae565b90565b906104dc91546104b9565b90565b6104eb60015f906104d1565b90565b90565b61050561050061050a926102f8565b6104ee565b6102f8565b90565b610516906104f1565b90565b6105229061050d565b90565b61052e90610519565b9052565b9190610545905f60208501940190610525565b565b3461057757610557366004610393565b6105736105626104df565b61056a6100f2565b91829182610532565b0390f35b6100f8565b60018060a01b031690565b61059790600861059c93026104aa565b61057c565b90565b906105aa9154610587565b90565b6105b960025f9061059f565b90565b6105c59061050d565b90565b6105d1906105bc565b9052565b91906105e8905f602085019401906105c8565b565b3461061a576105fa366004610393565b6106166106056105ad565b61060d6100f2565b918291826105d5565b0390f35b6100f8565b9060208282031261063857610635915f01610323565b90565b6100fc565b3461066d5761066961065861065336600461061f565b610ee2565b6106606100f2565b91829182610279565b0390f35b6100f8565b346106a05761068a61068536600461061f565b61101e565b6106926100f2565b8061069c81610185565b0390f35b6100f8565b346106d3576106bd6106b836600461061f565b611095565b6106c56100f2565b806106cf81610185565b0390f35b6100f8565b5f80fd5b919033926106f26106ec85610ee2565b15610267565b61070357610701929350610859565b565b6107258461070f6100f2565b91829163fa5cd00f60e01b835260048301610460565b0390fd5b5090565b90565b61074461073f6107499261072d565b6104ee565b6103f9565b90565b600161075891016103f9565b90565b634e487b7160e01b5f52603260045260245ffd5b5f80fd5b5f80fd5b5f80fd5b9035906001602003813603038212156107bd570180359067ffffffffffffffff82116107b8576020019160018202360383136107b357565b610777565b610773565b61076f565b908210156107dd5760206107d9920281019061077b565b9091565b61075b565b6107eb9061050d565b90565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b61082f61083860209361083d93610826816107ee565b938480936107f2565b958691016107fb565b610806565b0190565b6108569160208201915f818403910152610810565b90565b919091610867818490610729565b916108715f610730565b5b8061088561087f866103f9565b916103f9565b101561090757610902906108a461089e858884916107c2565b906110a0565b336108ba6108b4868985916107c2565b9061115f565b906108fa6108e87f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f926107e2565b926108f16100f2565b91829182610841565b0390a261074c565b610872565b5092505050565b90610918916106dc565b565b9190339261093061092a85610ee2565b15610267565b6109415761093f929350610967565b565b6109638461094d6100f2565b91829163fa5cd00f60e01b835260048301610460565b0390fd5b9061097c916109778183906110a0565b6109c6565b565b90825f939282370152565b91906109a38161099c816109a8956107f2565b809561097e565b610806565b0190565b90916109c39260208301925f818503910152610989565b90565b3390916109f37f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f926107e2565b92610a086109ff6100f2565b928392836109ac565b0390a2565b90610a179161091a565b565b5f90565b5f1c90565b610a2e610a3391610a1d565b61057c565b90565b610a409054610a22565b90565b634e487b7160e01b5f52604160045260245ffd5b90610a6190610806565b810190811067ffffffffffffffff821117610a7b57604052565b610a43565b60e01b90565b610a8f81610267565b03610a9657565b5f80fd5b90505190610aa782610a86565b565b90602082820312610ac257610abf915f01610a9a565b90565b6100fc565b610acf6100f2565b3d5f823e3d90fd5b90602090610ae3610a19565b50610af6610af16002610a36565b6105bc565b610b18633dfb5ee7949294610b23610b0c6100f2565b96879586948594610a80565b8452600484016109ac565b03915afa908115610b67575f91610b39575b5090565b610b5a915060203d8111610b60575b610b528183610a57565b810190610aa9565b5f610b35565b503d610b48565b610ac7565b91903392610b82610b7c85610ee2565b15610267565b610b9357610b91929350610bb9565b565b610bb584610b9f6100f2565b91829163fa5cd00f60e01b835260048301610460565b0390fd5b90610bce91610bc98183906110a0565b610bd0565b565b90610bdc90339261115f565b90610c1c610c0a7f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f926107e2565b92610c136100f2565b91829182610841565b0390a2565b90610c2b91610b6c565b565b90610c3f91610c3a6111a0565b610d92565b565b60a01c90565b60ff1690565b610c59610c5e91610c41565b610c47565b90565b610c6b9054610c4d565b90565b610c82610c7d610c879261072d565b6104ee565b6102f8565b90565b610c9390610c6e565b90565b60a01b90565b90610cab60ff60a01b91610c96565b9181191691161790565b610cbe90610267565b90565b90565b90610cd9610cd4610ce092610cb5565b610cc1565b8254610c9c565b9055565b610ced906104f1565b90565b610cf990610ce4565b90565b5f1b90565b90610d1260018060a01b0391610cfc565b9181191691161790565b610d2590610ce4565b90565b90565b90610d40610d3b610d4792610d1c565b610d28565b8254610d01565b9055565b610d54906104f1565b90565b610d6090610d4b565b90565b610d6c90610d4b565b90565b90565b90610d87610d82610d8e92610d63565b610d6f565b8254610d01565b9055565b610d9c6002610c61565b610e1f5781610dbb610db5610db05f610c8a565b610303565b91610303565b14610dfc57610df5610dee610dfa93610dd660016002610cc4565b610de9610de282610cf0565b6001610d2b565b610d57565b6002610d72565b611095565b565b610e046100f2565b632e7f3c7f60e11b815280610e1b60048201610185565b0390fd5b610e276100f2565b62dc149f60e41b815280610e3d60048201610185565b0390fd5b90610e4b91610c2d565b565b610e556111a0565b610e5d610e5f565b565b610e70610e6b5f610c8a565b611218565b565b610e7a610e4d565b565b5f90565b60018060a01b031690565b610e97610e9c91610a1d565b610e80565b90565b610ea99054610e8b565b90565b610eb4610e7c565b50610ebe5f610e9f565b90565b610ecd610ed291610a1d565b6104ae565b90565b610edf9054610ec1565b90565b6020610f2a91610ef0610a19565b50610f03610efe6001610ed5565b610519565b610f1f63babcc539610f136100f2565b95869485938493610a80565b835260048301610460565b03915afa908115610f6e575f91610f40575b5090565b610f61915060203d8111610f67575b610f598183610a57565b810190610aa9565b5f610f3c565b503d610f4f565b610ac7565b610f8490610f7f6111a0565b610f86565b565b80610fa1610f9b610f965f610c8a565b610303565b91610303565b14610ffb57610fb9610fb282610cf0565b6001610d2b565b610fe37f253580f806741c11b3d4aa60d9cacc5bef0cebb35748767fe23f11916e2f04b9916107e2565b90610fec6100f2565b80610ff681610185565b0390a2565b6110036100f2565b632e7f3c7f60e11b81528061101a60048201610185565b0390fd5b61102790610f73565b565b61103a906110356111a0565b61103c565b565b8061105761105161104c5f610c8a565b610303565b91610303565b146110675761106590611218565b565b6110916110735f610c8a565b61107b6100f2565b918291631e4fbdf760e01b835260048301610460565b0390fd5b61109e90611029565b565b6110b3916110ad91610ad7565b15610267565b6110b957565b6110c16100f2565b6360c054b160e11b8152806110d860048201610185565b0390fd5b606090565b60ff60f81b1690565b60f81b90565b6111046110ff6111099261072d565b6110ea565b6110e1565b90565b90565b61111b611120916110e1565b61110c565b9052565b905090565b9091826111398161114093611124565b809361097e565b0190565b8061115560019261115c969461110f565b0191611129565b90565b61119d9061116b6110dc565b5061118e6111785f6110f0565b91936111826100f2565b94859360208501611144565b60208201810382520382610a57565b90565b6111a8610eac565b6111c16111bb6111b6611277565b610303565b91610303565b036111c857565b6111f16111d3611277565b6111db6100f2565b91829163118cdaa760e01b835260048301610460565b0390fd5b90565b9061120d611208611214926107e2565b6111f5565b8254610d01565b9055565b6112215f610e9f565b61122b825f6111f8565b9061125f6112597f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0936107e2565b916107e2565b916112686100f2565b8061127281610185565b0390a3565b61127f610e7c565b50339056fea264697066735822122091550a523a28c5b7912977a108111781ed8395785aeeb11313bb05bf145b775964736f6c63430008190033608060405234601c57600e6020565b61011f61002b823961011f90f35b6026565b60405190565b5f80fdfe608060405260043610156011575b60d5565b60195f356026565b63babcc53903600d5760aa565b60e01c90565b60405190565b5f80fd5b5f80fd5b60018060a01b031690565b604c90603a565b90565b6056816045565b03605c57565b5f80fd5b90503590606b82604f565b565b906020828203126083576080915f016060565b90565b6036565b151590565b6093906087565b9052565b919060a8905f60208501940190608c565b565b3460d15760cd60bf60bb366004606d565b60dd565b60c5602c565b918291826097565b0390f35b6032565b5f80fd5b5f90565b5060e460d9565b505f9056fea2646970667358221220f6f89a7cebf3427a97e585e23ee54b80941b5aa1d3a3f8bbf52c99812a22461664736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xA0`@R4a\08Wa\0\x19a\0\x14a\0\xE9V[a\x01\xB7V[a\0!a\0=V[a\x12\xBAa\x04\xCA\x829`\x80Q\x81a\x03\xD7\x01Ra\x12\xBA\x90\xF3[a\0CV[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0o\x90a\0GV[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0\x87W`@RV[a\0QV[\x90a\0\x9Fa\0\x98a\0=V[\x92\x83a\0eV[V[_\x80\xFD[\x90V[a\0\xB1\x81a\0\xA5V[\x03a\0\xB8WV[_\x80\xFD[\x90PQ\x90a\0\xC9\x82a\0\xA8V[V[\x90` \x82\x82\x03\x12a\0\xE4Wa\0\xE1\x91_\x01a\0\xBCV[\x90V[a\0\xA1V[a\x01\x07a\x18\xCE\x808\x03\x80a\0\xFC\x81a\0\x8CV[\x92\x839\x81\x01\x90a\0\xCBV[\x90V[\x90V[\x90V[a\x01$a\x01\x1Fa\x01)\x92a\x01\nV[a\x01\rV[a\0\xA5V[\x90V[` \x91\x81R\x01\x90V[_\x7FL3 chain ID cannot be 0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x01i`\x17` \x92a\x01,V[a\x01r\x81a\x015V[\x01\x90V[a\x01\x8B\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x01\\V[\x90V[\x15a\x01\x95WV[a\x01\x9Da\0=V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x01\xB3`\x04\x82\x01a\x01vV[\x03\x90\xFD[a\x01\xBFa\x02\xD7V[a\x01\xDC\x81a\x01\xD5a\x01\xCF_a\x01\x10V[\x91a\0\xA5V[\x14\x15a\x01\x8EV[`\x80RV[`\xA0\x1B\x90V[\x90a\x01\xF6`\xFF`\xA0\x1B\x91a\x01\xE1V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x15\x15\x90V[a\x02\x0E\x90a\x02\0V[\x90V[\x90V[\x90a\x02)a\x02$a\x020\x92a\x02\x05V[a\x02\x11V[\x82Ta\x01\xE7V[\x90UV[_\x01\x90V[a\x02Aa\0=V[=_\x82>=\x90\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02ha\x02ca\x02m\x92a\x02IV[a\x01\rV[a\x02IV[\x90V[a\x02y\x90a\x02TV[\x90V[a\x02\x85\x90a\x02pV[\x90V[_\x1B\x90V[\x90a\x02\x9E`\x01\x80`\xA0\x1B\x03\x91a\x02\x88V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x02\xB1\x90a\x02pV[\x90V[\x90V[\x90a\x02\xCCa\x02\xC7a\x02\xD3\x92a\x02\xA8V[a\x02\xB4V[\x82Ta\x02\x8DV[\x90UV[a\x02\xE03a\x03DV[a\x02\xEB_`\x02a\x02\x14V[a\x02\xF3a\0=V[a\x01J\x81\x01\x81\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\x03?Wa\x03\x1B\x82\x91a\x01Ja\x17\x84\x849a\x024V[\x03\x90_\xF0\x80\x15a\x03:Wa\x031a\x038\x91a\x02|V[`\x01a\x02\xB7V[V[a\x029V[a\0QV[a\x03M\x90a\x03\xA5V[V[a\x03ca\x03^a\x03h\x92a\x01\nV[a\x01\rV[a\x02IV[\x90V[a\x03t\x90a\x03OV[\x90V[a\x03\x80\x90a\x02IV[\x90V[a\x03\x8C\x90a\x03wV[\x90RV[\x91\x90a\x03\xA3\x90_` \x85\x01\x94\x01\x90a\x03\x83V[V[\x80a\x03\xC0a\x03\xBAa\x03\xB5_a\x03kV[a\x03wV[\x91a\x03wV[\x14a\x03\xD0Wa\x03\xCE\x90a\x04jV[V[a\x03\xFAa\x03\xDC_a\x03kV[a\x03\xE4a\0=V[\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x03\x90V[\x03\x90\xFD[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x04\x1Aa\x04\x1F\x91a\x03\xFEV[a\x04\x03V[\x90V[a\x04,\x90Ta\x04\x0EV[\x90V[a\x048\x90a\x02TV[\x90V[a\x04D\x90a\x04/V[\x90V[\x90V[\x90a\x04_a\x04Za\x04f\x92a\x04;V[a\x04GV[\x82Ta\x02\x8DV[\x90UV[a\x04s_a\x04\"V[a\x04}\x82_a\x04JV[\x90a\x04\xB1a\x04\xAB\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x04;V[\x91a\x04;V[\x91a\x04\xBAa\0=V[\x80a\x04\xC4\x81a\x024V[\x03\x90\xA3V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x06\xD8V[a\0\x1D_5a\0\xECV[\x80c\x0B\x83$\x9D\x14a\0\xE7W\x80c5\x14\xD3{\x14a\0\xE2W\x80c=\xFB^\xE7\x14a\0\xDDW\x80cF\xE2\xCC\t\x14a\0\xD8W\x80cH\\\xC9U\x14a\0\xD3W\x80cqP\x18\xA6\x14a\0\xCEW\x80cw\xBF\xDD\x19\x14a\0\xC9W\x80c\x8D\xA5\xCB[\x14a\0\xC4W\x80c\xA80\xB6C\x14a\0\xBFW\x80c\xAA\xA6\x07\x07\x14a\0\xBAW\x80c\xBA\xBC\xC59\x14a\0\xB5W\x80c\xD4\xF0\xEBM\x14a\0\xB0Wc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\x06\xA5V[a\x06rV[a\x06=V[a\x05\xEAV[a\x05GV[a\x04uV[a\x04\x1EV[a\x03\xA2V[a\x03_V[a\x02\xC4V[a\x02\x8EV[a\x023V[a\x01\x8AV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01JW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01EW` \x01\x92` \x83\x02\x84\x01\x11a\x01@WV[a\x01\x0CV[a\x01\x08V[a\x01\x04V[\x90` \x82\x82\x03\x12a\x01\x80W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01{Wa\x01w\x92\x01a\x01\x10V[\x90\x91V[a\x01\0V[a\0\xFCV[_\x01\x90V[4a\x01\xB9Wa\x01\xA3a\x01\x9D6`\x04a\x01OV[\x90a\t\x0EV[a\x01\xABa\0\xF2V[\x80a\x01\xB5\x81a\x01\x85V[\x03\x90\xF3[a\0\xF8V[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01\xF8W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01\xF3W` \x01\x92`\x01\x83\x02\x84\x01\x11a\x01\xEEWV[a\x01\x0CV[a\x01\x08V[a\x01\x04V[\x90` \x82\x82\x03\x12a\x02.W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02)Wa\x02%\x92\x01a\x01\xBEV[\x90\x91V[a\x01\0V[a\0\xFCV[4a\x02bWa\x02La\x02F6`\x04a\x01\xFDV[\x90a\n\rV[a\x02Ta\0\xF2V[\x80a\x02^\x81a\x01\x85V[\x03\x90\xF3[a\0\xF8V[\x15\x15\x90V[a\x02u\x90a\x02gV[\x90RV[\x91\x90a\x02\x8C\x90_` \x85\x01\x94\x01\x90a\x02lV[V[4a\x02\xBFWa\x02\xBBa\x02\xAAa\x02\xA46`\x04a\x01\xFDV[\x90a\n\xD7V[a\x02\xB2a\0\xF2V[\x91\x82\x91\x82a\x02yV[\x03\x90\xF3[a\0\xF8V[4a\x02\xF3Wa\x02\xDDa\x02\xD76`\x04a\x01\xFDV[\x90a\x0C!V[a\x02\xE5a\0\xF2V[\x80a\x02\xEF\x81a\x01\x85V[\x03\x90\xF3[a\0\xF8V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x03\x0C\x90a\x02\xF8V[\x90V[a\x03\x18\x81a\x03\x03V[\x03a\x03\x1FWV[_\x80\xFD[\x90P5\x90a\x030\x82a\x03\x0FV[V[\x91\x90`@\x83\x82\x03\x12a\x03ZW\x80a\x03Na\x03W\x92_\x86\x01a\x03#V[\x93` \x01a\x03#V[\x90V[a\0\xFCV[4a\x03\x8EWa\x03xa\x03r6`\x04a\x032V[\x90a\x0EAV[a\x03\x80a\0\xF2V[\x80a\x03\x8A\x81a\x01\x85V[\x03\x90\xF3[a\0\xF8V[_\x91\x03\x12a\x03\x9DWV[a\0\xFCV[4a\x03\xD0Wa\x03\xB26`\x04a\x03\x93V[a\x03\xBAa\x0ErV[a\x03\xC2a\0\xF2V[\x80a\x03\xCC\x81a\x01\x85V[\x03\x90\xF3[a\0\xF8V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[\x90V[a\x04\x05\x90a\x03\xF9V[\x90RV[\x91\x90a\x04\x1C\x90_` \x85\x01\x94\x01\x90a\x03\xFCV[V[4a\x04NWa\x04.6`\x04a\x03\x93V[a\x04Ja\x049a\x03\xD5V[a\x04Aa\0\xF2V[\x91\x82\x91\x82a\x04\tV[\x03\x90\xF3[a\0\xF8V[a\x04\\\x90a\x03\x03V[\x90RV[\x91\x90a\x04s\x90_` \x85\x01\x94\x01\x90a\x04SV[V[4a\x04\xA5Wa\x04\x856`\x04a\x03\x93V[a\x04\xA1a\x04\x90a\x0E\xACV[a\x04\x98a\0\xF2V[\x91\x82\x91\x82a\x04`V[\x03\x90\xF3[a\0\xF8V[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x04\xC9\x90`\x08a\x04\xCE\x93\x02a\x04\xAAV[a\x04\xAEV[\x90V[\x90a\x04\xDC\x91Ta\x04\xB9V[\x90V[a\x04\xEB`\x01_\x90a\x04\xD1V[\x90V[\x90V[a\x05\x05a\x05\0a\x05\n\x92a\x02\xF8V[a\x04\xEEV[a\x02\xF8V[\x90V[a\x05\x16\x90a\x04\xF1V[\x90V[a\x05\"\x90a\x05\rV[\x90V[a\x05.\x90a\x05\x19V[\x90RV[\x91\x90a\x05E\x90_` \x85\x01\x94\x01\x90a\x05%V[V[4a\x05wWa\x05W6`\x04a\x03\x93V[a\x05sa\x05ba\x04\xDFV[a\x05ja\0\xF2V[\x91\x82\x91\x82a\x052V[\x03\x90\xF3[a\0\xF8V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x05\x97\x90`\x08a\x05\x9C\x93\x02a\x04\xAAV[a\x05|V[\x90V[\x90a\x05\xAA\x91Ta\x05\x87V[\x90V[a\x05\xB9`\x02_\x90a\x05\x9FV[\x90V[a\x05\xC5\x90a\x05\rV[\x90V[a\x05\xD1\x90a\x05\xBCV[\x90RV[\x91\x90a\x05\xE8\x90_` \x85\x01\x94\x01\x90a\x05\xC8V[V[4a\x06\x1AWa\x05\xFA6`\x04a\x03\x93V[a\x06\x16a\x06\x05a\x05\xADV[a\x06\ra\0\xF2V[\x91\x82\x91\x82a\x05\xD5V[\x03\x90\xF3[a\0\xF8V[\x90` \x82\x82\x03\x12a\x068Wa\x065\x91_\x01a\x03#V[\x90V[a\0\xFCV[4a\x06mWa\x06ia\x06Xa\x06S6`\x04a\x06\x1FV[a\x0E\xE2V[a\x06`a\0\xF2V[\x91\x82\x91\x82a\x02yV[\x03\x90\xF3[a\0\xF8V[4a\x06\xA0Wa\x06\x8Aa\x06\x856`\x04a\x06\x1FV[a\x10\x1EV[a\x06\x92a\0\xF2V[\x80a\x06\x9C\x81a\x01\x85V[\x03\x90\xF3[a\0\xF8V[4a\x06\xD3Wa\x06\xBDa\x06\xB86`\x04a\x06\x1FV[a\x10\x95V[a\x06\xC5a\0\xF2V[\x80a\x06\xCF\x81a\x01\x85V[\x03\x90\xF3[a\0\xF8V[_\x80\xFD[\x91\x903\x92a\x06\xF2a\x06\xEC\x85a\x0E\xE2V[\x15a\x02gV[a\x07\x03Wa\x07\x01\x92\x93Pa\x08YV[V[a\x07%\x84a\x07\x0Fa\0\xF2V[\x91\x82\x91c\xFA\\\xD0\x0F`\xE0\x1B\x83R`\x04\x83\x01a\x04`V[\x03\x90\xFD[P\x90V[\x90V[a\x07Da\x07?a\x07I\x92a\x07-V[a\x04\xEEV[a\x03\xF9V[\x90V[`\x01a\x07X\x91\x01a\x03\xF9V[\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x905\x90`\x01` \x03\x816\x03\x03\x82\x12\x15a\x07\xBDW\x01\x805\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x07\xB8W` \x01\x91`\x01\x82\x026\x03\x83\x13a\x07\xB3WV[a\x07wV[a\x07sV[a\x07oV[\x90\x82\x10\x15a\x07\xDDW` a\x07\xD9\x92\x02\x81\x01\x90a\x07{V[\x90\x91V[a\x07[V[a\x07\xEB\x90a\x05\rV[\x90V[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x08/a\x088` \x93a\x08=\x93a\x08&\x81a\x07\xEEV[\x93\x84\x80\x93a\x07\xF2V[\x95\x86\x91\x01a\x07\xFBV[a\x08\x06V[\x01\x90V[a\x08V\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x08\x10V[\x90V[\x91\x90\x91a\x08g\x81\x84\x90a\x07)V[\x91a\x08q_a\x070V[[\x80a\x08\x85a\x08\x7F\x86a\x03\xF9V[\x91a\x03\xF9V[\x10\x15a\t\x07Wa\t\x02\x90a\x08\xA4a\x08\x9E\x85\x88\x84\x91a\x07\xC2V[\x90a\x10\xA0V[3a\x08\xBAa\x08\xB4\x86\x89\x85\x91a\x07\xC2V[\x90a\x11_V[\x90a\x08\xFAa\x08\xE8\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\x07\xE2V[\x92a\x08\xF1a\0\xF2V[\x91\x82\x91\x82a\x08AV[\x03\x90\xA2a\x07LV[a\x08rV[P\x92PPPV[\x90a\t\x18\x91a\x06\xDCV[V[\x91\x903\x92a\t0a\t*\x85a\x0E\xE2V[\x15a\x02gV[a\tAWa\t?\x92\x93Pa\tgV[V[a\tc\x84a\tMa\0\xF2V[\x91\x82\x91c\xFA\\\xD0\x0F`\xE0\x1B\x83R`\x04\x83\x01a\x04`V[\x03\x90\xFD[\x90a\t|\x91a\tw\x81\x83\x90a\x10\xA0V[a\t\xC6V[V[\x90\x82_\x93\x92\x827\x01RV[\x91\x90a\t\xA3\x81a\t\x9C\x81a\t\xA8\x95a\x07\xF2V[\x80\x95a\t~V[a\x08\x06V[\x01\x90V[\x90\x91a\t\xC3\x92` \x83\x01\x92_\x81\x85\x03\x91\x01Ra\t\x89V[\x90V[3\x90\x91a\t\xF3\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\x07\xE2V[\x92a\n\x08a\t\xFFa\0\xF2V[\x92\x83\x92\x83a\t\xACV[\x03\x90\xA2V[\x90a\n\x17\x91a\t\x1AV[V[_\x90V[_\x1C\x90V[a\n.a\n3\x91a\n\x1DV[a\x05|V[\x90V[a\n@\x90Ta\n\"V[\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\na\x90a\x08\x06V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\n{W`@RV[a\nCV[`\xE0\x1B\x90V[a\n\x8F\x81a\x02gV[\x03a\n\x96WV[_\x80\xFD[\x90PQ\x90a\n\xA7\x82a\n\x86V[V[\x90` \x82\x82\x03\x12a\n\xC2Wa\n\xBF\x91_\x01a\n\x9AV[\x90V[a\0\xFCV[a\n\xCFa\0\xF2V[=_\x82>=\x90\xFD[\x90` \x90a\n\xE3a\n\x19V[Pa\n\xF6a\n\xF1`\x02a\n6V[a\x05\xBCV[a\x0B\x18c=\xFB^\xE7\x94\x92\x94a\x0B#a\x0B\x0Ca\0\xF2V[\x96\x87\x95\x86\x94\x85\x94a\n\x80V[\x84R`\x04\x84\x01a\t\xACV[\x03\x91Z\xFA\x90\x81\x15a\x0BgW_\x91a\x0B9W[P\x90V[a\x0BZ\x91P` =\x81\x11a\x0B`W[a\x0BR\x81\x83a\nWV[\x81\x01\x90a\n\xA9V[_a\x0B5V[P=a\x0BHV[a\n\xC7V[\x91\x903\x92a\x0B\x82a\x0B|\x85a\x0E\xE2V[\x15a\x02gV[a\x0B\x93Wa\x0B\x91\x92\x93Pa\x0B\xB9V[V[a\x0B\xB5\x84a\x0B\x9Fa\0\xF2V[\x91\x82\x91c\xFA\\\xD0\x0F`\xE0\x1B\x83R`\x04\x83\x01a\x04`V[\x03\x90\xFD[\x90a\x0B\xCE\x91a\x0B\xC9\x81\x83\x90a\x10\xA0V[a\x0B\xD0V[V[\x90a\x0B\xDC\x903\x92a\x11_V[\x90a\x0C\x1Ca\x0C\n\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\x07\xE2V[\x92a\x0C\x13a\0\xF2V[\x91\x82\x91\x82a\x08AV[\x03\x90\xA2V[\x90a\x0C+\x91a\x0BlV[V[\x90a\x0C?\x91a\x0C:a\x11\xA0V[a\r\x92V[V[`\xA0\x1C\x90V[`\xFF\x16\x90V[a\x0CYa\x0C^\x91a\x0CAV[a\x0CGV[\x90V[a\x0Ck\x90Ta\x0CMV[\x90V[a\x0C\x82a\x0C}a\x0C\x87\x92a\x07-V[a\x04\xEEV[a\x02\xF8V[\x90V[a\x0C\x93\x90a\x0CnV[\x90V[`\xA0\x1B\x90V[\x90a\x0C\xAB`\xFF`\xA0\x1B\x91a\x0C\x96V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0C\xBE\x90a\x02gV[\x90V[\x90V[\x90a\x0C\xD9a\x0C\xD4a\x0C\xE0\x92a\x0C\xB5V[a\x0C\xC1V[\x82Ta\x0C\x9CV[\x90UV[a\x0C\xED\x90a\x04\xF1V[\x90V[a\x0C\xF9\x90a\x0C\xE4V[\x90V[_\x1B\x90V[\x90a\r\x12`\x01\x80`\xA0\x1B\x03\x91a\x0C\xFCV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\r%\x90a\x0C\xE4V[\x90V[\x90V[\x90a\r@a\r;a\rG\x92a\r\x1CV[a\r(V[\x82Ta\r\x01V[\x90UV[a\rT\x90a\x04\xF1V[\x90V[a\r`\x90a\rKV[\x90V[a\rl\x90a\rKV[\x90V[\x90V[\x90a\r\x87a\r\x82a\r\x8E\x92a\rcV[a\roV[\x82Ta\r\x01V[\x90UV[a\r\x9C`\x02a\x0CaV[a\x0E\x1FW\x81a\r\xBBa\r\xB5a\r\xB0_a\x0C\x8AV[a\x03\x03V[\x91a\x03\x03V[\x14a\r\xFCWa\r\xF5a\r\xEEa\r\xFA\x93a\r\xD6`\x01`\x02a\x0C\xC4V[a\r\xE9a\r\xE2\x82a\x0C\xF0V[`\x01a\r+V[a\rWV[`\x02a\rrV[a\x10\x95V[V[a\x0E\x04a\0\xF2V[c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x0E\x1B`\x04\x82\x01a\x01\x85V[\x03\x90\xFD[a\x0E'a\0\xF2V[b\xDC\x14\x9F`\xE4\x1B\x81R\x80a\x0E=`\x04\x82\x01a\x01\x85V[\x03\x90\xFD[\x90a\x0EK\x91a\x0C-V[V[a\x0EUa\x11\xA0V[a\x0E]a\x0E_V[V[a\x0Epa\x0Ek_a\x0C\x8AV[a\x12\x18V[V[a\x0Eza\x0EMV[V[_\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x0E\x97a\x0E\x9C\x91a\n\x1DV[a\x0E\x80V[\x90V[a\x0E\xA9\x90Ta\x0E\x8BV[\x90V[a\x0E\xB4a\x0E|V[Pa\x0E\xBE_a\x0E\x9FV[\x90V[a\x0E\xCDa\x0E\xD2\x91a\n\x1DV[a\x04\xAEV[\x90V[a\x0E\xDF\x90Ta\x0E\xC1V[\x90V[` a\x0F*\x91a\x0E\xF0a\n\x19V[Pa\x0F\x03a\x0E\xFE`\x01a\x0E\xD5V[a\x05\x19V[a\x0F\x1Fc\xBA\xBC\xC59a\x0F\x13a\0\xF2V[\x95\x86\x94\x85\x93\x84\x93a\n\x80V[\x83R`\x04\x83\x01a\x04`V[\x03\x91Z\xFA\x90\x81\x15a\x0FnW_\x91a\x0F@W[P\x90V[a\x0Fa\x91P` =\x81\x11a\x0FgW[a\x0FY\x81\x83a\nWV[\x81\x01\x90a\n\xA9V[_a\x0F<V[P=a\x0FOV[a\n\xC7V[a\x0F\x84\x90a\x0F\x7Fa\x11\xA0V[a\x0F\x86V[V[\x80a\x0F\xA1a\x0F\x9Ba\x0F\x96_a\x0C\x8AV[a\x03\x03V[\x91a\x03\x03V[\x14a\x0F\xFBWa\x0F\xB9a\x0F\xB2\x82a\x0C\xF0V[`\x01a\r+V[a\x0F\xE3\x7F%5\x80\xF8\x06t\x1C\x11\xB3\xD4\xAA`\xD9\xCA\xCC[\xEF\x0C\xEB\xB3WHv\x7F\xE2?\x11\x91n/\x04\xB9\x91a\x07\xE2V[\x90a\x0F\xECa\0\xF2V[\x80a\x0F\xF6\x81a\x01\x85V[\x03\x90\xA2V[a\x10\x03a\0\xF2V[c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x10\x1A`\x04\x82\x01a\x01\x85V[\x03\x90\xFD[a\x10'\x90a\x0FsV[V[a\x10:\x90a\x105a\x11\xA0V[a\x10<V[V[\x80a\x10Wa\x10Qa\x10L_a\x0C\x8AV[a\x03\x03V[\x91a\x03\x03V[\x14a\x10gWa\x10e\x90a\x12\x18V[V[a\x10\x91a\x10s_a\x0C\x8AV[a\x10{a\0\xF2V[\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x04`V[\x03\x90\xFD[a\x10\x9E\x90a\x10)V[V[a\x10\xB3\x91a\x10\xAD\x91a\n\xD7V[\x15a\x02gV[a\x10\xB9WV[a\x10\xC1a\0\xF2V[c`\xC0T\xB1`\xE1\x1B\x81R\x80a\x10\xD8`\x04\x82\x01a\x01\x85V[\x03\x90\xFD[``\x90V[`\xFF`\xF8\x1B\x16\x90V[`\xF8\x1B\x90V[a\x11\x04a\x10\xFFa\x11\t\x92a\x07-V[a\x10\xEAV[a\x10\xE1V[\x90V[\x90V[a\x11\x1Ba\x11 \x91a\x10\xE1V[a\x11\x0CV[\x90RV[\x90P\x90V[\x90\x91\x82a\x119\x81a\x11@\x93a\x11$V[\x80\x93a\t~V[\x01\x90V[\x80a\x11U`\x01\x92a\x11\\\x96\x94a\x11\x0FV[\x01\x91a\x11)V[\x90V[a\x11\x9D\x90a\x11ka\x10\xDCV[Pa\x11\x8Ea\x11x_a\x10\xF0V[\x91\x93a\x11\x82a\0\xF2V[\x94\x85\x93` \x85\x01a\x11DV[` \x82\x01\x81\x03\x82R\x03\x82a\nWV[\x90V[a\x11\xA8a\x0E\xACV[a\x11\xC1a\x11\xBBa\x11\xB6a\x12wV[a\x03\x03V[\x91a\x03\x03V[\x03a\x11\xC8WV[a\x11\xF1a\x11\xD3a\x12wV[a\x11\xDBa\0\xF2V[\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x04`V[\x03\x90\xFD[\x90V[\x90a\x12\ra\x12\x08a\x12\x14\x92a\x07\xE2V[a\x11\xF5V[\x82Ta\r\x01V[\x90UV[a\x12!_a\x0E\x9FV[a\x12+\x82_a\x11\xF8V[\x90a\x12_a\x12Y\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x07\xE2V[\x91a\x07\xE2V[\x91a\x12ha\0\xF2V[\x80a\x12r\x81a\x01\x85V[\x03\x90\xA3V[a\x12\x7Fa\x0E|V[P3\x90V\xFE\xA2dipfsX\"\x12 \x91U\nR:(\xC5\xB7\x91)w\xA1\x08\x11\x17\x81\xED\x83\x95xZ\xEE\xB1\x13\x13\xBB\x05\xBF\x14[wYdsolcC\0\x08\x19\x003`\x80`@R4`\x1CW`\x0E` V[a\x01\x1Fa\0+\x829a\x01\x1F\x90\xF3[`&V[`@Q\x90V[_\x80\xFD\xFE`\x80`@R`\x046\x10\x15`\x11W[`\xD5V[`\x19_5`&V[c\xBA\xBC\xC59\x03`\rW`\xAAV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[`L\x90`:V[\x90V[`V\x81`EV[\x03`\\WV[_\x80\xFD[\x90P5\x90`k\x82`OV[V[\x90` \x82\x82\x03\x12`\x83W`\x80\x91_\x01``V[\x90V[`6V[\x15\x15\x90V[`\x93\x90`\x87V[\x90RV[\x91\x90`\xA8\x90_` \x85\x01\x94\x01\x90`\x8CV[V[4`\xD1W`\xCD`\xBF`\xBB6`\x04`mV[`\xDDV[`\xC5`,V[\x91\x82\x91\x82`\x97V[\x03\x90\xF3[`2V[_\x80\xFD[_\x90V[P`\xE4`\xD9V[P_\x90V\xFE\xA2dipfsX\"\x12 \xF6\xF8\x9A|\xEB\xF3Bz\x97\xE5\x85\xE2>\xE5K\x80\x94\x1BZ\xA1\xD3\xA3\xF8\xBB\xF5,\x99\x81*\"F\x16dsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b6106d8565b61001d5f356100ec565b80630b83249d146100e75780633514d37b146100e25780633dfb5ee7146100dd57806346e2cc09146100d8578063485cc955146100d3578063715018a6146100ce57806377bfdd19146100c95780638da5cb5b146100c4578063a830b643146100bf578063aaa60707146100ba578063babcc539146100b5578063d4f0eb4d146100b05763f2fde38b0361000e576106a5565b610672565b61063d565b6105ea565b610547565b610475565b61041e565b6103a2565b61035f565b6102c4565b61028e565b610233565b61018a565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f8301121561014a5781359167ffffffffffffffff831161014557602001926020830284011161014057565b61010c565b610108565b610104565b90602082820312610180575f82013567ffffffffffffffff811161017b576101779201610110565b9091565b610100565b6100fc565b5f0190565b346101b9576101a361019d36600461014f565b9061090e565b6101ab6100f2565b806101b581610185565b0390f35b6100f8565b909182601f830112156101f85781359167ffffffffffffffff83116101f35760200192600183028401116101ee57565b61010c565b610108565b610104565b9060208282031261022e575f82013567ffffffffffffffff81116102295761022592016101be565b9091565b610100565b6100fc565b346102625761024c6102463660046101fd565b90610a0d565b6102546100f2565b8061025e81610185565b0390f35b6100f8565b151590565b61027590610267565b9052565b919061028c905f6020850194019061026c565b565b346102bf576102bb6102aa6102a43660046101fd565b90610ad7565b6102b26100f2565b91829182610279565b0390f35b6100f8565b346102f3576102dd6102d73660046101fd565b90610c21565b6102e56100f2565b806102ef81610185565b0390f35b6100f8565b60018060a01b031690565b61030c906102f8565b90565b61031881610303565b0361031f57565b5f80fd5b905035906103308261030f565b565b919060408382031261035a578061034e610357925f8601610323565b93602001610323565b90565b6100fc565b3461038e57610378610372366004610332565b90610e41565b6103806100f2565b8061038a81610185565b0390f35b6100f8565b5f91031261039d57565b6100fc565b346103d0576103b2366004610393565b6103ba610e72565b6103c26100f2565b806103cc81610185565b0390f35b6100f8565b7f000000000000000000000000000000000000000000000000000000000000000090565b90565b610405906103f9565b9052565b919061041c905f602085019401906103fc565b565b3461044e5761042e366004610393565b61044a6104396103d5565b6104416100f2565b91829182610409565b0390f35b6100f8565b61045c90610303565b9052565b9190610473905f60208501940190610453565b565b346104a557610485366004610393565b6104a1610490610eac565b6104986100f2565b91829182610460565b0390f35b6100f8565b1c90565b60018060a01b031690565b6104c99060086104ce93026104aa565b6104ae565b90565b906104dc91546104b9565b90565b6104eb60015f906104d1565b90565b90565b61050561050061050a926102f8565b6104ee565b6102f8565b90565b610516906104f1565b90565b6105229061050d565b90565b61052e90610519565b9052565b9190610545905f60208501940190610525565b565b3461057757610557366004610393565b6105736105626104df565b61056a6100f2565b91829182610532565b0390f35b6100f8565b60018060a01b031690565b61059790600861059c93026104aa565b61057c565b90565b906105aa9154610587565b90565b6105b960025f9061059f565b90565b6105c59061050d565b90565b6105d1906105bc565b9052565b91906105e8905f602085019401906105c8565b565b3461061a576105fa366004610393565b6106166106056105ad565b61060d6100f2565b918291826105d5565b0390f35b6100f8565b9060208282031261063857610635915f01610323565b90565b6100fc565b3461066d5761066961065861065336600461061f565b610ee2565b6106606100f2565b91829182610279565b0390f35b6100f8565b346106a05761068a61068536600461061f565b61101e565b6106926100f2565b8061069c81610185565b0390f35b6100f8565b346106d3576106bd6106b836600461061f565b611095565b6106c56100f2565b806106cf81610185565b0390f35b6100f8565b5f80fd5b919033926106f26106ec85610ee2565b15610267565b61070357610701929350610859565b565b6107258461070f6100f2565b91829163fa5cd00f60e01b835260048301610460565b0390fd5b5090565b90565b61074461073f6107499261072d565b6104ee565b6103f9565b90565b600161075891016103f9565b90565b634e487b7160e01b5f52603260045260245ffd5b5f80fd5b5f80fd5b5f80fd5b9035906001602003813603038212156107bd570180359067ffffffffffffffff82116107b8576020019160018202360383136107b357565b610777565b610773565b61076f565b908210156107dd5760206107d9920281019061077b565b9091565b61075b565b6107eb9061050d565b90565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b61082f61083860209361083d93610826816107ee565b938480936107f2565b958691016107fb565b610806565b0190565b6108569160208201915f818403910152610810565b90565b919091610867818490610729565b916108715f610730565b5b8061088561087f866103f9565b916103f9565b101561090757610902906108a461089e858884916107c2565b906110a0565b336108ba6108b4868985916107c2565b9061115f565b906108fa6108e87f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f926107e2565b926108f16100f2565b91829182610841565b0390a261074c565b610872565b5092505050565b90610918916106dc565b565b9190339261093061092a85610ee2565b15610267565b6109415761093f929350610967565b565b6109638461094d6100f2565b91829163fa5cd00f60e01b835260048301610460565b0390fd5b9061097c916109778183906110a0565b6109c6565b565b90825f939282370152565b91906109a38161099c816109a8956107f2565b809561097e565b610806565b0190565b90916109c39260208301925f818503910152610989565b90565b3390916109f37f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f926107e2565b92610a086109ff6100f2565b928392836109ac565b0390a2565b90610a179161091a565b565b5f90565b5f1c90565b610a2e610a3391610a1d565b61057c565b90565b610a409054610a22565b90565b634e487b7160e01b5f52604160045260245ffd5b90610a6190610806565b810190811067ffffffffffffffff821117610a7b57604052565b610a43565b60e01b90565b610a8f81610267565b03610a9657565b5f80fd5b90505190610aa782610a86565b565b90602082820312610ac257610abf915f01610a9a565b90565b6100fc565b610acf6100f2565b3d5f823e3d90fd5b90602090610ae3610a19565b50610af6610af16002610a36565b6105bc565b610b18633dfb5ee7949294610b23610b0c6100f2565b96879586948594610a80565b8452600484016109ac565b03915afa908115610b67575f91610b39575b5090565b610b5a915060203d8111610b60575b610b528183610a57565b810190610aa9565b5f610b35565b503d610b48565b610ac7565b91903392610b82610b7c85610ee2565b15610267565b610b9357610b91929350610bb9565b565b610bb584610b9f6100f2565b91829163fa5cd00f60e01b835260048301610460565b0390fd5b90610bce91610bc98183906110a0565b610bd0565b565b90610bdc90339261115f565b90610c1c610c0a7f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f926107e2565b92610c136100f2565b91829182610841565b0390a2565b90610c2b91610b6c565b565b90610c3f91610c3a6111a0565b610d92565b565b60a01c90565b60ff1690565b610c59610c5e91610c41565b610c47565b90565b610c6b9054610c4d565b90565b610c82610c7d610c879261072d565b6104ee565b6102f8565b90565b610c9390610c6e565b90565b60a01b90565b90610cab60ff60a01b91610c96565b9181191691161790565b610cbe90610267565b90565b90565b90610cd9610cd4610ce092610cb5565b610cc1565b8254610c9c565b9055565b610ced906104f1565b90565b610cf990610ce4565b90565b5f1b90565b90610d1260018060a01b0391610cfc565b9181191691161790565b610d2590610ce4565b90565b90565b90610d40610d3b610d4792610d1c565b610d28565b8254610d01565b9055565b610d54906104f1565b90565b610d6090610d4b565b90565b610d6c90610d4b565b90565b90565b90610d87610d82610d8e92610d63565b610d6f565b8254610d01565b9055565b610d9c6002610c61565b610e1f5781610dbb610db5610db05f610c8a565b610303565b91610303565b14610dfc57610df5610dee610dfa93610dd660016002610cc4565b610de9610de282610cf0565b6001610d2b565b610d57565b6002610d72565b611095565b565b610e046100f2565b632e7f3c7f60e11b815280610e1b60048201610185565b0390fd5b610e276100f2565b62dc149f60e41b815280610e3d60048201610185565b0390fd5b90610e4b91610c2d565b565b610e556111a0565b610e5d610e5f565b565b610e70610e6b5f610c8a565b611218565b565b610e7a610e4d565b565b5f90565b60018060a01b031690565b610e97610e9c91610a1d565b610e80565b90565b610ea99054610e8b565b90565b610eb4610e7c565b50610ebe5f610e9f565b90565b610ecd610ed291610a1d565b6104ae565b90565b610edf9054610ec1565b90565b6020610f2a91610ef0610a19565b50610f03610efe6001610ed5565b610519565b610f1f63babcc539610f136100f2565b95869485938493610a80565b835260048301610460565b03915afa908115610f6e575f91610f40575b5090565b610f61915060203d8111610f67575b610f598183610a57565b810190610aa9565b5f610f3c565b503d610f4f565b610ac7565b610f8490610f7f6111a0565b610f86565b565b80610fa1610f9b610f965f610c8a565b610303565b91610303565b14610ffb57610fb9610fb282610cf0565b6001610d2b565b610fe37f253580f806741c11b3d4aa60d9cacc5bef0cebb35748767fe23f11916e2f04b9916107e2565b90610fec6100f2565b80610ff681610185565b0390a2565b6110036100f2565b632e7f3c7f60e11b81528061101a60048201610185565b0390fd5b61102790610f73565b565b61103a906110356111a0565b61103c565b565b8061105761105161104c5f610c8a565b610303565b91610303565b146110675761106590611218565b565b6110916110735f610c8a565b61107b6100f2565b918291631e4fbdf760e01b835260048301610460565b0390fd5b61109e90611029565b565b6110b3916110ad91610ad7565b15610267565b6110b957565b6110c16100f2565b6360c054b160e11b8152806110d860048201610185565b0390fd5b606090565b60ff60f81b1690565b60f81b90565b6111046110ff6111099261072d565b6110ea565b6110e1565b90565b90565b61111b611120916110e1565b61110c565b9052565b905090565b9091826111398161114093611124565b809361097e565b0190565b8061115560019261115c969461110f565b0191611129565b90565b61119d9061116b6110dc565b5061118e6111785f6110f0565b91936111826100f2565b94859360208501611144565b60208201810382520382610a57565b90565b6111a8610eac565b6111c16111bb6111b6611277565b610303565b91610303565b036111c857565b6111f16111d3611277565b6111db6100f2565b91829163118cdaa760e01b835260048301610460565b0390fd5b90565b9061120d611208611214926107e2565b6111f5565b8254610d01565b9055565b6112215f610e9f565b61122b825f6111f8565b9061125f6112597f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0936107e2565b916107e2565b916112686100f2565b8061127281610185565b0390a3565b61127f610e7c565b50339056fea264697066735822122091550a523a28c5b7912977a108111781ed8395785aeeb11313bb05bf145b775964736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x06\xD8V[a\0\x1D_5a\0\xECV[\x80c\x0B\x83$\x9D\x14a\0\xE7W\x80c5\x14\xD3{\x14a\0\xE2W\x80c=\xFB^\xE7\x14a\0\xDDW\x80cF\xE2\xCC\t\x14a\0\xD8W\x80cH\\\xC9U\x14a\0\xD3W\x80cqP\x18\xA6\x14a\0\xCEW\x80cw\xBF\xDD\x19\x14a\0\xC9W\x80c\x8D\xA5\xCB[\x14a\0\xC4W\x80c\xA80\xB6C\x14a\0\xBFW\x80c\xAA\xA6\x07\x07\x14a\0\xBAW\x80c\xBA\xBC\xC59\x14a\0\xB5W\x80c\xD4\xF0\xEBM\x14a\0\xB0Wc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\x06\xA5V[a\x06rV[a\x06=V[a\x05\xEAV[a\x05GV[a\x04uV[a\x04\x1EV[a\x03\xA2V[a\x03_V[a\x02\xC4V[a\x02\x8EV[a\x023V[a\x01\x8AV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01JW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01EW` \x01\x92` \x83\x02\x84\x01\x11a\x01@WV[a\x01\x0CV[a\x01\x08V[a\x01\x04V[\x90` \x82\x82\x03\x12a\x01\x80W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01{Wa\x01w\x92\x01a\x01\x10V[\x90\x91V[a\x01\0V[a\0\xFCV[_\x01\x90V[4a\x01\xB9Wa\x01\xA3a\x01\x9D6`\x04a\x01OV[\x90a\t\x0EV[a\x01\xABa\0\xF2V[\x80a\x01\xB5\x81a\x01\x85V[\x03\x90\xF3[a\0\xF8V[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01\xF8W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01\xF3W` \x01\x92`\x01\x83\x02\x84\x01\x11a\x01\xEEWV[a\x01\x0CV[a\x01\x08V[a\x01\x04V[\x90` \x82\x82\x03\x12a\x02.W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02)Wa\x02%\x92\x01a\x01\xBEV[\x90\x91V[a\x01\0V[a\0\xFCV[4a\x02bWa\x02La\x02F6`\x04a\x01\xFDV[\x90a\n\rV[a\x02Ta\0\xF2V[\x80a\x02^\x81a\x01\x85V[\x03\x90\xF3[a\0\xF8V[\x15\x15\x90V[a\x02u\x90a\x02gV[\x90RV[\x91\x90a\x02\x8C\x90_` \x85\x01\x94\x01\x90a\x02lV[V[4a\x02\xBFWa\x02\xBBa\x02\xAAa\x02\xA46`\x04a\x01\xFDV[\x90a\n\xD7V[a\x02\xB2a\0\xF2V[\x91\x82\x91\x82a\x02yV[\x03\x90\xF3[a\0\xF8V[4a\x02\xF3Wa\x02\xDDa\x02\xD76`\x04a\x01\xFDV[\x90a\x0C!V[a\x02\xE5a\0\xF2V[\x80a\x02\xEF\x81a\x01\x85V[\x03\x90\xF3[a\0\xF8V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x03\x0C\x90a\x02\xF8V[\x90V[a\x03\x18\x81a\x03\x03V[\x03a\x03\x1FWV[_\x80\xFD[\x90P5\x90a\x030\x82a\x03\x0FV[V[\x91\x90`@\x83\x82\x03\x12a\x03ZW\x80a\x03Na\x03W\x92_\x86\x01a\x03#V[\x93` \x01a\x03#V[\x90V[a\0\xFCV[4a\x03\x8EWa\x03xa\x03r6`\x04a\x032V[\x90a\x0EAV[a\x03\x80a\0\xF2V[\x80a\x03\x8A\x81a\x01\x85V[\x03\x90\xF3[a\0\xF8V[_\x91\x03\x12a\x03\x9DWV[a\0\xFCV[4a\x03\xD0Wa\x03\xB26`\x04a\x03\x93V[a\x03\xBAa\x0ErV[a\x03\xC2a\0\xF2V[\x80a\x03\xCC\x81a\x01\x85V[\x03\x90\xF3[a\0\xF8V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[\x90V[a\x04\x05\x90a\x03\xF9V[\x90RV[\x91\x90a\x04\x1C\x90_` \x85\x01\x94\x01\x90a\x03\xFCV[V[4a\x04NWa\x04.6`\x04a\x03\x93V[a\x04Ja\x049a\x03\xD5V[a\x04Aa\0\xF2V[\x91\x82\x91\x82a\x04\tV[\x03\x90\xF3[a\0\xF8V[a\x04\\\x90a\x03\x03V[\x90RV[\x91\x90a\x04s\x90_` \x85\x01\x94\x01\x90a\x04SV[V[4a\x04\xA5Wa\x04\x856`\x04a\x03\x93V[a\x04\xA1a\x04\x90a\x0E\xACV[a\x04\x98a\0\xF2V[\x91\x82\x91\x82a\x04`V[\x03\x90\xF3[a\0\xF8V[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x04\xC9\x90`\x08a\x04\xCE\x93\x02a\x04\xAAV[a\x04\xAEV[\x90V[\x90a\x04\xDC\x91Ta\x04\xB9V[\x90V[a\x04\xEB`\x01_\x90a\x04\xD1V[\x90V[\x90V[a\x05\x05a\x05\0a\x05\n\x92a\x02\xF8V[a\x04\xEEV[a\x02\xF8V[\x90V[a\x05\x16\x90a\x04\xF1V[\x90V[a\x05\"\x90a\x05\rV[\x90V[a\x05.\x90a\x05\x19V[\x90RV[\x91\x90a\x05E\x90_` \x85\x01\x94\x01\x90a\x05%V[V[4a\x05wWa\x05W6`\x04a\x03\x93V[a\x05sa\x05ba\x04\xDFV[a\x05ja\0\xF2V[\x91\x82\x91\x82a\x052V[\x03\x90\xF3[a\0\xF8V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x05\x97\x90`\x08a\x05\x9C\x93\x02a\x04\xAAV[a\x05|V[\x90V[\x90a\x05\xAA\x91Ta\x05\x87V[\x90V[a\x05\xB9`\x02_\x90a\x05\x9FV[\x90V[a\x05\xC5\x90a\x05\rV[\x90V[a\x05\xD1\x90a\x05\xBCV[\x90RV[\x91\x90a\x05\xE8\x90_` \x85\x01\x94\x01\x90a\x05\xC8V[V[4a\x06\x1AWa\x05\xFA6`\x04a\x03\x93V[a\x06\x16a\x06\x05a\x05\xADV[a\x06\ra\0\xF2V[\x91\x82\x91\x82a\x05\xD5V[\x03\x90\xF3[a\0\xF8V[\x90` \x82\x82\x03\x12a\x068Wa\x065\x91_\x01a\x03#V[\x90V[a\0\xFCV[4a\x06mWa\x06ia\x06Xa\x06S6`\x04a\x06\x1FV[a\x0E\xE2V[a\x06`a\0\xF2V[\x91\x82\x91\x82a\x02yV[\x03\x90\xF3[a\0\xF8V[4a\x06\xA0Wa\x06\x8Aa\x06\x856`\x04a\x06\x1FV[a\x10\x1EV[a\x06\x92a\0\xF2V[\x80a\x06\x9C\x81a\x01\x85V[\x03\x90\xF3[a\0\xF8V[4a\x06\xD3Wa\x06\xBDa\x06\xB86`\x04a\x06\x1FV[a\x10\x95V[a\x06\xC5a\0\xF2V[\x80a\x06\xCF\x81a\x01\x85V[\x03\x90\xF3[a\0\xF8V[_\x80\xFD[\x91\x903\x92a\x06\xF2a\x06\xEC\x85a\x0E\xE2V[\x15a\x02gV[a\x07\x03Wa\x07\x01\x92\x93Pa\x08YV[V[a\x07%\x84a\x07\x0Fa\0\xF2V[\x91\x82\x91c\xFA\\\xD0\x0F`\xE0\x1B\x83R`\x04\x83\x01a\x04`V[\x03\x90\xFD[P\x90V[\x90V[a\x07Da\x07?a\x07I\x92a\x07-V[a\x04\xEEV[a\x03\xF9V[\x90V[`\x01a\x07X\x91\x01a\x03\xF9V[\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x905\x90`\x01` \x03\x816\x03\x03\x82\x12\x15a\x07\xBDW\x01\x805\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x07\xB8W` \x01\x91`\x01\x82\x026\x03\x83\x13a\x07\xB3WV[a\x07wV[a\x07sV[a\x07oV[\x90\x82\x10\x15a\x07\xDDW` a\x07\xD9\x92\x02\x81\x01\x90a\x07{V[\x90\x91V[a\x07[V[a\x07\xEB\x90a\x05\rV[\x90V[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x08/a\x088` \x93a\x08=\x93a\x08&\x81a\x07\xEEV[\x93\x84\x80\x93a\x07\xF2V[\x95\x86\x91\x01a\x07\xFBV[a\x08\x06V[\x01\x90V[a\x08V\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x08\x10V[\x90V[\x91\x90\x91a\x08g\x81\x84\x90a\x07)V[\x91a\x08q_a\x070V[[\x80a\x08\x85a\x08\x7F\x86a\x03\xF9V[\x91a\x03\xF9V[\x10\x15a\t\x07Wa\t\x02\x90a\x08\xA4a\x08\x9E\x85\x88\x84\x91a\x07\xC2V[\x90a\x10\xA0V[3a\x08\xBAa\x08\xB4\x86\x89\x85\x91a\x07\xC2V[\x90a\x11_V[\x90a\x08\xFAa\x08\xE8\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\x07\xE2V[\x92a\x08\xF1a\0\xF2V[\x91\x82\x91\x82a\x08AV[\x03\x90\xA2a\x07LV[a\x08rV[P\x92PPPV[\x90a\t\x18\x91a\x06\xDCV[V[\x91\x903\x92a\t0a\t*\x85a\x0E\xE2V[\x15a\x02gV[a\tAWa\t?\x92\x93Pa\tgV[V[a\tc\x84a\tMa\0\xF2V[\x91\x82\x91c\xFA\\\xD0\x0F`\xE0\x1B\x83R`\x04\x83\x01a\x04`V[\x03\x90\xFD[\x90a\t|\x91a\tw\x81\x83\x90a\x10\xA0V[a\t\xC6V[V[\x90\x82_\x93\x92\x827\x01RV[\x91\x90a\t\xA3\x81a\t\x9C\x81a\t\xA8\x95a\x07\xF2V[\x80\x95a\t~V[a\x08\x06V[\x01\x90V[\x90\x91a\t\xC3\x92` \x83\x01\x92_\x81\x85\x03\x91\x01Ra\t\x89V[\x90V[3\x90\x91a\t\xF3\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\x07\xE2V[\x92a\n\x08a\t\xFFa\0\xF2V[\x92\x83\x92\x83a\t\xACV[\x03\x90\xA2V[\x90a\n\x17\x91a\t\x1AV[V[_\x90V[_\x1C\x90V[a\n.a\n3\x91a\n\x1DV[a\x05|V[\x90V[a\n@\x90Ta\n\"V[\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\na\x90a\x08\x06V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\n{W`@RV[a\nCV[`\xE0\x1B\x90V[a\n\x8F\x81a\x02gV[\x03a\n\x96WV[_\x80\xFD[\x90PQ\x90a\n\xA7\x82a\n\x86V[V[\x90` \x82\x82\x03\x12a\n\xC2Wa\n\xBF\x91_\x01a\n\x9AV[\x90V[a\0\xFCV[a\n\xCFa\0\xF2V[=_\x82>=\x90\xFD[\x90` \x90a\n\xE3a\n\x19V[Pa\n\xF6a\n\xF1`\x02a\n6V[a\x05\xBCV[a\x0B\x18c=\xFB^\xE7\x94\x92\x94a\x0B#a\x0B\x0Ca\0\xF2V[\x96\x87\x95\x86\x94\x85\x94a\n\x80V[\x84R`\x04\x84\x01a\t\xACV[\x03\x91Z\xFA\x90\x81\x15a\x0BgW_\x91a\x0B9W[P\x90V[a\x0BZ\x91P` =\x81\x11a\x0B`W[a\x0BR\x81\x83a\nWV[\x81\x01\x90a\n\xA9V[_a\x0B5V[P=a\x0BHV[a\n\xC7V[\x91\x903\x92a\x0B\x82a\x0B|\x85a\x0E\xE2V[\x15a\x02gV[a\x0B\x93Wa\x0B\x91\x92\x93Pa\x0B\xB9V[V[a\x0B\xB5\x84a\x0B\x9Fa\0\xF2V[\x91\x82\x91c\xFA\\\xD0\x0F`\xE0\x1B\x83R`\x04\x83\x01a\x04`V[\x03\x90\xFD[\x90a\x0B\xCE\x91a\x0B\xC9\x81\x83\x90a\x10\xA0V[a\x0B\xD0V[V[\x90a\x0B\xDC\x903\x92a\x11_V[\x90a\x0C\x1Ca\x0C\n\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\x07\xE2V[\x92a\x0C\x13a\0\xF2V[\x91\x82\x91\x82a\x08AV[\x03\x90\xA2V[\x90a\x0C+\x91a\x0BlV[V[\x90a\x0C?\x91a\x0C:a\x11\xA0V[a\r\x92V[V[`\xA0\x1C\x90V[`\xFF\x16\x90V[a\x0CYa\x0C^\x91a\x0CAV[a\x0CGV[\x90V[a\x0Ck\x90Ta\x0CMV[\x90V[a\x0C\x82a\x0C}a\x0C\x87\x92a\x07-V[a\x04\xEEV[a\x02\xF8V[\x90V[a\x0C\x93\x90a\x0CnV[\x90V[`\xA0\x1B\x90V[\x90a\x0C\xAB`\xFF`\xA0\x1B\x91a\x0C\x96V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0C\xBE\x90a\x02gV[\x90V[\x90V[\x90a\x0C\xD9a\x0C\xD4a\x0C\xE0\x92a\x0C\xB5V[a\x0C\xC1V[\x82Ta\x0C\x9CV[\x90UV[a\x0C\xED\x90a\x04\xF1V[\x90V[a\x0C\xF9\x90a\x0C\xE4V[\x90V[_\x1B\x90V[\x90a\r\x12`\x01\x80`\xA0\x1B\x03\x91a\x0C\xFCV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\r%\x90a\x0C\xE4V[\x90V[\x90V[\x90a\r@a\r;a\rG\x92a\r\x1CV[a\r(V[\x82Ta\r\x01V[\x90UV[a\rT\x90a\x04\xF1V[\x90V[a\r`\x90a\rKV[\x90V[a\rl\x90a\rKV[\x90V[\x90V[\x90a\r\x87a\r\x82a\r\x8E\x92a\rcV[a\roV[\x82Ta\r\x01V[\x90UV[a\r\x9C`\x02a\x0CaV[a\x0E\x1FW\x81a\r\xBBa\r\xB5a\r\xB0_a\x0C\x8AV[a\x03\x03V[\x91a\x03\x03V[\x14a\r\xFCWa\r\xF5a\r\xEEa\r\xFA\x93a\r\xD6`\x01`\x02a\x0C\xC4V[a\r\xE9a\r\xE2\x82a\x0C\xF0V[`\x01a\r+V[a\rWV[`\x02a\rrV[a\x10\x95V[V[a\x0E\x04a\0\xF2V[c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x0E\x1B`\x04\x82\x01a\x01\x85V[\x03\x90\xFD[a\x0E'a\0\xF2V[b\xDC\x14\x9F`\xE4\x1B\x81R\x80a\x0E=`\x04\x82\x01a\x01\x85V[\x03\x90\xFD[\x90a\x0EK\x91a\x0C-V[V[a\x0EUa\x11\xA0V[a\x0E]a\x0E_V[V[a\x0Epa\x0Ek_a\x0C\x8AV[a\x12\x18V[V[a\x0Eza\x0EMV[V[_\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x0E\x97a\x0E\x9C\x91a\n\x1DV[a\x0E\x80V[\x90V[a\x0E\xA9\x90Ta\x0E\x8BV[\x90V[a\x0E\xB4a\x0E|V[Pa\x0E\xBE_a\x0E\x9FV[\x90V[a\x0E\xCDa\x0E\xD2\x91a\n\x1DV[a\x04\xAEV[\x90V[a\x0E\xDF\x90Ta\x0E\xC1V[\x90V[` a\x0F*\x91a\x0E\xF0a\n\x19V[Pa\x0F\x03a\x0E\xFE`\x01a\x0E\xD5V[a\x05\x19V[a\x0F\x1Fc\xBA\xBC\xC59a\x0F\x13a\0\xF2V[\x95\x86\x94\x85\x93\x84\x93a\n\x80V[\x83R`\x04\x83\x01a\x04`V[\x03\x91Z\xFA\x90\x81\x15a\x0FnW_\x91a\x0F@W[P\x90V[a\x0Fa\x91P` =\x81\x11a\x0FgW[a\x0FY\x81\x83a\nWV[\x81\x01\x90a\n\xA9V[_a\x0F<V[P=a\x0FOV[a\n\xC7V[a\x0F\x84\x90a\x0F\x7Fa\x11\xA0V[a\x0F\x86V[V[\x80a\x0F\xA1a\x0F\x9Ba\x0F\x96_a\x0C\x8AV[a\x03\x03V[\x91a\x03\x03V[\x14a\x0F\xFBWa\x0F\xB9a\x0F\xB2\x82a\x0C\xF0V[`\x01a\r+V[a\x0F\xE3\x7F%5\x80\xF8\x06t\x1C\x11\xB3\xD4\xAA`\xD9\xCA\xCC[\xEF\x0C\xEB\xB3WHv\x7F\xE2?\x11\x91n/\x04\xB9\x91a\x07\xE2V[\x90a\x0F\xECa\0\xF2V[\x80a\x0F\xF6\x81a\x01\x85V[\x03\x90\xA2V[a\x10\x03a\0\xF2V[c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x10\x1A`\x04\x82\x01a\x01\x85V[\x03\x90\xFD[a\x10'\x90a\x0FsV[V[a\x10:\x90a\x105a\x11\xA0V[a\x10<V[V[\x80a\x10Wa\x10Qa\x10L_a\x0C\x8AV[a\x03\x03V[\x91a\x03\x03V[\x14a\x10gWa\x10e\x90a\x12\x18V[V[a\x10\x91a\x10s_a\x0C\x8AV[a\x10{a\0\xF2V[\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x04`V[\x03\x90\xFD[a\x10\x9E\x90a\x10)V[V[a\x10\xB3\x91a\x10\xAD\x91a\n\xD7V[\x15a\x02gV[a\x10\xB9WV[a\x10\xC1a\0\xF2V[c`\xC0T\xB1`\xE1\x1B\x81R\x80a\x10\xD8`\x04\x82\x01a\x01\x85V[\x03\x90\xFD[``\x90V[`\xFF`\xF8\x1B\x16\x90V[`\xF8\x1B\x90V[a\x11\x04a\x10\xFFa\x11\t\x92a\x07-V[a\x10\xEAV[a\x10\xE1V[\x90V[\x90V[a\x11\x1Ba\x11 \x91a\x10\xE1V[a\x11\x0CV[\x90RV[\x90P\x90V[\x90\x91\x82a\x119\x81a\x11@\x93a\x11$V[\x80\x93a\t~V[\x01\x90V[\x80a\x11U`\x01\x92a\x11\\\x96\x94a\x11\x0FV[\x01\x91a\x11)V[\x90V[a\x11\x9D\x90a\x11ka\x10\xDCV[Pa\x11\x8Ea\x11x_a\x10\xF0V[\x91\x93a\x11\x82a\0\xF2V[\x94\x85\x93` \x85\x01a\x11DV[` \x82\x01\x81\x03\x82R\x03\x82a\nWV[\x90V[a\x11\xA8a\x0E\xACV[a\x11\xC1a\x11\xBBa\x11\xB6a\x12wV[a\x03\x03V[\x91a\x03\x03V[\x03a\x11\xC8WV[a\x11\xF1a\x11\xD3a\x12wV[a\x11\xDBa\0\xF2V[\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x04`V[\x03\x90\xFD[\x90V[\x90a\x12\ra\x12\x08a\x12\x14\x92a\x07\xE2V[a\x11\xF5V[\x82Ta\r\x01V[\x90UV[a\x12!_a\x0E\x9FV[a\x12+\x82_a\x11\xF8V[\x90a\x12_a\x12Y\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x07\xE2V[\x91a\x07\xE2V[\x91a\x12ha\0\xF2V[\x80a\x12r\x81a\x01\x85V[\x03\x90\xA3V[a\x12\x7Fa\x0E|V[P3\x90V\xFE\xA2dipfsX\"\x12 \x91U\nR:(\xC5\xB7\x91)w\xA1\x08\x11\x17\x81\xED\x83\x95xZ\xEE\xB1\x13\x13\xBB\x05\xBF\x14[wYdsolcC\0\x08\x19\x003",
    );
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `AlreadyInitialized()` and selector `0x0dc149f0`.
```solidity
error AlreadyInitialized();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AlreadyInitialized {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AlreadyInitialized> for UnderlyingRustTuple<'_> {
            fn from(value: AlreadyInitialized) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AlreadyInitialized {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AlreadyInitialized {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AlreadyInitialized()";
            const SELECTOR: [u8; 4] = [13u8, 193u8, 73u8, 240u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `CalldataNotAllowed()` and selector `0xc180a962`.
```solidity
error CalldataNotAllowed();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CalldataNotAllowed {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<CalldataNotAllowed> for UnderlyingRustTuple<'_> {
            fn from(value: CalldataNotAllowed) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for CalldataNotAllowed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for CalldataNotAllowed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "CalldataNotAllowed()";
            const SELECTOR: [u8; 4] = [193u8, 128u8, 169u8, 98u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `InvalidModuleAddress()` and selector `0x5cfe78fe`.
```solidity
error InvalidModuleAddress();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidModuleAddress {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidModuleAddress> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidModuleAddress) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidModuleAddress {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidModuleAddress {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidModuleAddress()";
            const SELECTOR: [u8; 4] = [92u8, 254u8, 120u8, 254u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NotAllowed(address)` and selector `0xfa5cd00f`.
```solidity
error NotAllowed(address batchSubmitter);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotAllowed {
        #[allow(missing_docs)]
        pub batchSubmitter: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotAllowed> for UnderlyingRustTuple<'_> {
            fn from(value: NotAllowed) -> Self {
                (value.batchSubmitter,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotAllowed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { batchSubmitter: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotAllowed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotAllowed(address)";
            const SELECTOR: [u8; 4] = [250u8, 92u8, 208u8, 15u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.batchSubmitter,
                    ),
                )
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `OwnableInvalidOwner(address)` and selector `0x1e4fbdf7`.
```solidity
error OwnableInvalidOwner(address owner);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableInvalidOwner {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableInvalidOwner> for UnderlyingRustTuple<'_> {
            fn from(value: OwnableInvalidOwner) -> Self {
                (value.owner,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for OwnableInvalidOwner {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { owner: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableInvalidOwner {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableInvalidOwner(address)";
            const SELECTOR: [u8; 4] = [30u8, 79u8, 189u8, 247u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `OwnableUnauthorizedAccount(address)` and selector `0x118cdaa7`.
```solidity
error OwnableUnauthorizedAccount(address account);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableUnauthorizedAccount {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: OwnableUnauthorizedAccount) -> Self {
                (value.account,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for OwnableUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { account: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableUnauthorizedAccount(address)";
            const SELECTOR: [u8; 4] = [17u8, 140u8, 218u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `OwnershipTransferred(address,address)` and selector `0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0`.
```solidity
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct OwnershipTransferred {
        #[allow(missing_docs)]
        pub previousOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OwnershipTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OwnershipTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                139u8, 224u8, 7u8, 156u8, 83u8, 22u8, 89u8, 20u8, 19u8, 68u8, 205u8,
                31u8, 208u8, 164u8, 242u8, 132u8, 25u8, 73u8, 127u8, 151u8, 34u8, 163u8,
                218u8, 175u8, 227u8, 180u8, 24u8, 111u8, 107u8, 100u8, 87u8, 224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousOwner: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousOwner.clone(),
                    self.newOwner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousOwner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OwnershipTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OwnershipTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &OwnershipTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `RequirementModuleUpdated(address)` and selector `0x253580f806741c11b3d4aa60d9cacc5bef0cebb35748767fe23f11916e2f04b9`.
```solidity
event RequirementModuleUpdated(address indexed newModule);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RequirementModuleUpdated {
        #[allow(missing_docs)]
        pub newModule: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RequirementModuleUpdated {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RequirementModuleUpdated(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                37u8, 53u8, 128u8, 248u8, 6u8, 116u8, 28u8, 17u8, 179u8, 212u8, 170u8,
                96u8, 217u8, 202u8, 204u8, 91u8, 239u8, 12u8, 235u8, 179u8, 87u8, 72u8,
                118u8, 127u8, 226u8, 63u8, 17u8, 145u8, 110u8, 47u8, 4u8, 185u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { newModule: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.newModule.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newModule,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RequirementModuleUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RequirementModuleUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &RequirementModuleUpdated,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `TransactionProcessed(address,bytes)` and selector `0x83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f`.
```solidity
event TransactionProcessed(address indexed sender, bytes data);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct TransactionProcessed {
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for TransactionProcessed {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "TransactionProcessed(address,bytes)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                131u8, 54u8, 59u8, 120u8, 189u8, 251u8, 178u8, 62u8, 42u8, 97u8, 219u8,
                122u8, 204u8, 195u8, 192u8, 31u8, 218u8, 41u8, 197u8, 197u8, 236u8,
                129u8, 136u8, 128u8, 3u8, 203u8, 150u8, 41u8, 18u8, 97u8, 138u8, 127u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    sender: topics.1,
                    data: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.sender.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for TransactionProcessed {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&TransactionProcessed> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &TransactionProcessed) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(uint256 _l3ChainId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub _l3ChainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value._l3ChainId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _l3ChainId: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._l3ChainId),
                )
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `calldataRequirementModule()` and selector `0xaaa60707`.
```solidity
function calldataRequirementModule() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct calldataRequirementModuleCall {}
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`calldataRequirementModule()`](calldataRequirementModuleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct calldataRequirementModuleReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<calldataRequirementModuleCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: calldataRequirementModuleCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for calldataRequirementModuleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<calldataRequirementModuleReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: calldataRequirementModuleReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for calldataRequirementModuleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for calldataRequirementModuleCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = calldataRequirementModuleReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "calldataRequirementModule()";
            const SELECTOR: [u8; 4] = [170u8, 166u8, 7u8, 7u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `initialize(address,address)` and selector `0x485cc955`.
```solidity
function initialize(address admin, address _requirementModule) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeCall {
        #[allow(missing_docs)]
        pub admin: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _requirementModule: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`initialize(address,address)`](initializeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeCall> for UnderlyingRustTuple<'_> {
                fn from(value: initializeCall) -> Self {
                    (value.admin, value._requirementModule)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        admin: tuple.0,
                        _requirementModule: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: initializeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for initializeCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = initializeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "initialize(address,address)";
            const SELECTOR: [u8; 4] = [72u8, 92u8, 201u8, 85u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._requirementModule,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `isAllowed(address)` and selector `0xbabcc539`.
```solidity
function isAllowed(address proposer) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedCall {
        #[allow(missing_docs)]
        pub proposer: alloy::sol_types::private::Address,
    }
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`isAllowed(address)`](isAllowedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedCall> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedCall) -> Self {
                    (value.proposer,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { proposer: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isAllowedCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isAllowedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isAllowed(address)";
            const SELECTOR: [u8; 4] = [186u8, 188u8, 197u8, 57u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.proposer,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `isCalldataAllowed(bytes)` and selector `0x3dfb5ee7`.
```solidity
function isCalldataAllowed(bytes memory data) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isCalldataAllowedCall {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`isCalldataAllowed(bytes)`](isCalldataAllowedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isCalldataAllowedReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isCalldataAllowedCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: isCalldataAllowedCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isCalldataAllowedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isCalldataAllowedReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: isCalldataAllowedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isCalldataAllowedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isCalldataAllowedCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isCalldataAllowedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isCalldataAllowed(bytes)";
            const SELECTOR: [u8; 4] = [61u8, 251u8, 94u8, 231u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `l3ChainId()` and selector `0x77bfdd19`.
```solidity
function l3ChainId() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct l3ChainIdCall {}
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`l3ChainId()`](l3ChainIdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct l3ChainIdReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<l3ChainIdCall> for UnderlyingRustTuple<'_> {
                fn from(value: l3ChainIdCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for l3ChainIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<l3ChainIdReturn> for UnderlyingRustTuple<'_> {
                fn from(value: l3ChainIdReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for l3ChainIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for l3ChainIdCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = l3ChainIdReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "l3ChainId()";
            const SELECTOR: [u8; 4] = [119u8, 191u8, 221u8, 25u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `owner()` and selector `0x8da5cb5b`.
```solidity
function owner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerCall {}
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`owner()`](ownerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "owner()";
            const SELECTOR: [u8; 4] = [141u8, 165u8, 203u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `processBulkTransactions(bytes[])` and selector `0x0b83249d`.
```solidity
function processBulkTransactions(bytes[] memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processBulkTransactionsCall {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
    }
    ///Container type for the return parameters of the [`processBulkTransactions(bytes[])`](processBulkTransactionsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processBulkTransactionsReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processBulkTransactionsCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: processBulkTransactionsCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processBulkTransactionsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processBulkTransactionsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: processBulkTransactionsReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processBulkTransactionsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processBulkTransactionsCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processBulkTransactionsReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processBulkTransactions(bytes[])";
            const SELECTOR: [u8; 4] = [11u8, 131u8, 36u8, 157u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bytes,
                    > as alloy_sol_types::SolType>::tokenize(&self.data),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `processTransaction(bytes)` and selector `0x46e2cc09`.
```solidity
function processTransaction(bytes memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionCall {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`processTransaction(bytes)`](processTransactionCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransaction(bytes)";
            const SELECTOR: [u8; 4] = [70u8, 226u8, 204u8, 9u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `processTransactionRaw(bytes)` and selector `0x3514d37b`.
```solidity
function processTransactionRaw(bytes memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionRawCall {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`processTransactionRaw(bytes)`](processTransactionRawCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionRawReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionRawCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionRawCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionRawCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionRawReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionRawReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionRawReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionRawCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionRawReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransactionRaw(bytes)";
            const SELECTOR: [u8; 4] = [53u8, 20u8, 211u8, 123u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `proposerRequirementModule()` and selector `0xa830b643`.
```solidity
function proposerRequirementModule() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct proposerRequirementModuleCall {}
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`proposerRequirementModule()`](proposerRequirementModuleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct proposerRequirementModuleReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<proposerRequirementModuleCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: proposerRequirementModuleCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for proposerRequirementModuleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<proposerRequirementModuleReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: proposerRequirementModuleReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for proposerRequirementModuleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for proposerRequirementModuleCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = proposerRequirementModuleReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "proposerRequirementModule()";
            const SELECTOR: [u8; 4] = [168u8, 48u8, 182u8, 67u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `renounceOwnership()` and selector `0x715018a6`.
```solidity
function renounceOwnership() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipCall {}
    ///Container type for the return parameters of the [`renounceOwnership()`](renounceOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceOwnershipCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceOwnership()";
            const SELECTOR: [u8; 4] = [113u8, 80u8, 24u8, 166u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `transferOwnership(address)` and selector `0xf2fde38b`.
```solidity
function transferOwnership(address newOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipCall {
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferOwnership(address)`](transferOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipCall) -> Self {
                    (value.newOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferOwnershipCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferOwnership(address)";
            const SELECTOR: [u8; 4] = [242u8, 253u8, 227u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newOwner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `updateRequirementModule(address)` and selector `0xd4f0eb4d`.
```solidity
function updateRequirementModule(address _newModule) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateRequirementModuleCall {
        #[allow(missing_docs)]
        pub _newModule: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`updateRequirementModule(address)`](updateRequirementModuleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateRequirementModuleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateRequirementModuleCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateRequirementModuleCall) -> Self {
                    (value._newModule,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateRequirementModuleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _newModule: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateRequirementModuleReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateRequirementModuleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateRequirementModuleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for updateRequirementModuleCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = updateRequirementModuleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "updateRequirementModule(address)";
            const SELECTOR: [u8; 4] = [212u8, 240u8, 235u8, 77u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._newModule,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`MetabasedSequencerChain`](self) function calls.
    #[derive()]
    pub enum MetabasedSequencerChainCalls {
        #[allow(missing_docs)]
        calldataRequirementModule(calldataRequirementModuleCall),
        #[allow(missing_docs)]
        initialize(initializeCall),
        #[allow(missing_docs)]
        isAllowed(isAllowedCall),
        #[allow(missing_docs)]
        isCalldataAllowed(isCalldataAllowedCall),
        #[allow(missing_docs)]
        l3ChainId(l3ChainIdCall),
        #[allow(missing_docs)]
        owner(ownerCall),
        #[allow(missing_docs)]
        processBulkTransactions(processBulkTransactionsCall),
        #[allow(missing_docs)]
        processTransaction(processTransactionCall),
        #[allow(missing_docs)]
        processTransactionRaw(processTransactionRawCall),
        #[allow(missing_docs)]
        proposerRequirementModule(proposerRequirementModuleCall),
        #[allow(missing_docs)]
        renounceOwnership(renounceOwnershipCall),
        #[allow(missing_docs)]
        transferOwnership(transferOwnershipCall),
        #[allow(missing_docs)]
        updateRequirementModule(updateRequirementModuleCall),
    }
    #[automatically_derived]
    impl MetabasedSequencerChainCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [11u8, 131u8, 36u8, 157u8],
            [53u8, 20u8, 211u8, 123u8],
            [61u8, 251u8, 94u8, 231u8],
            [70u8, 226u8, 204u8, 9u8],
            [72u8, 92u8, 201u8, 85u8],
            [113u8, 80u8, 24u8, 166u8],
            [119u8, 191u8, 221u8, 25u8],
            [141u8, 165u8, 203u8, 91u8],
            [168u8, 48u8, 182u8, 67u8],
            [170u8, 166u8, 7u8, 7u8],
            [186u8, 188u8, 197u8, 57u8],
            [212u8, 240u8, 235u8, 77u8],
            [242u8, 253u8, 227u8, 139u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for MetabasedSequencerChainCalls {
        const NAME: &'static str = "MetabasedSequencerChainCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 13usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::calldataRequirementModule(_) => {
                    <calldataRequirementModuleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::initialize(_) => {
                    <initializeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isAllowed(_) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isCalldataAllowed(_) => {
                    <isCalldataAllowedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::l3ChainId(_) => {
                    <l3ChainIdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::owner(_) => <ownerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::processBulkTransactions(_) => {
                    <processBulkTransactionsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransaction(_) => {
                    <processTransactionCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransactionRaw(_) => {
                    <processTransactionRawCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::proposerRequirementModule(_) => {
                    <proposerRequirementModuleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::renounceOwnership(_) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferOwnership(_) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::updateRequirementModule(_) => {
                    <updateRequirementModuleCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<MetabasedSequencerChainCalls>] = &[
                {
                    fn processBulkTransactions(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MetabasedSequencerChainCalls> {
                        <processBulkTransactionsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MetabasedSequencerChainCalls::processBulkTransactions)
                    }
                    processBulkTransactions
                },
                {
                    fn processTransactionRaw(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MetabasedSequencerChainCalls> {
                        <processTransactionRawCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MetabasedSequencerChainCalls::processTransactionRaw)
                    }
                    processTransactionRaw
                },
                {
                    fn isCalldataAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MetabasedSequencerChainCalls> {
                        <isCalldataAllowedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MetabasedSequencerChainCalls::isCalldataAllowed)
                    }
                    isCalldataAllowed
                },
                {
                    fn processTransaction(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MetabasedSequencerChainCalls> {
                        <processTransactionCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MetabasedSequencerChainCalls::processTransaction)
                    }
                    processTransaction
                },
                {
                    fn initialize(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MetabasedSequencerChainCalls> {
                        <initializeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MetabasedSequencerChainCalls::initialize)
                    }
                    initialize
                },
                {
                    fn renounceOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MetabasedSequencerChainCalls> {
                        <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MetabasedSequencerChainCalls::renounceOwnership)
                    }
                    renounceOwnership
                },
                {
                    fn l3ChainId(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MetabasedSequencerChainCalls> {
                        <l3ChainIdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MetabasedSequencerChainCalls::l3ChainId)
                    }
                    l3ChainId
                },
                {
                    fn owner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MetabasedSequencerChainCalls> {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MetabasedSequencerChainCalls::owner)
                    }
                    owner
                },
                {
                    fn proposerRequirementModule(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MetabasedSequencerChainCalls> {
                        <proposerRequirementModuleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MetabasedSequencerChainCalls::proposerRequirementModule)
                    }
                    proposerRequirementModule
                },
                {
                    fn calldataRequirementModule(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MetabasedSequencerChainCalls> {
                        <calldataRequirementModuleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MetabasedSequencerChainCalls::calldataRequirementModule)
                    }
                    calldataRequirementModule
                },
                {
                    fn isAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MetabasedSequencerChainCalls> {
                        <isAllowedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MetabasedSequencerChainCalls::isAllowed)
                    }
                    isAllowed
                },
                {
                    fn updateRequirementModule(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MetabasedSequencerChainCalls> {
                        <updateRequirementModuleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MetabasedSequencerChainCalls::updateRequirementModule)
                    }
                    updateRequirementModule
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MetabasedSequencerChainCalls> {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MetabasedSequencerChainCalls::transferOwnership)
                    }
                    transferOwnership
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::calldataRequirementModule(inner) => {
                    <calldataRequirementModuleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isCalldataAllowed(inner) => {
                    <isCalldataAllowedCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::l3ChainId(inner) => {
                    <l3ChainIdCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::processBulkTransactions(inner) => {
                    <processBulkTransactionsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransaction(inner) => {
                    <processTransactionCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransactionRaw(inner) => {
                    <processTransactionRawCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::proposerRequirementModule(inner) => {
                    <proposerRequirementModuleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::updateRequirementModule(inner) => {
                    <updateRequirementModuleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::calldataRequirementModule(inner) => {
                    <calldataRequirementModuleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isCalldataAllowed(inner) => {
                    <isCalldataAllowedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::l3ChainId(inner) => {
                    <l3ChainIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::processBulkTransactions(inner) => {
                    <processBulkTransactionsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransaction(inner) => {
                    <processTransactionCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransactionRaw(inner) => {
                    <processTransactionRawCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::proposerRequirementModule(inner) => {
                    <proposerRequirementModuleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::updateRequirementModule(inner) => {
                    <updateRequirementModuleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`MetabasedSequencerChain`](self) custom errors.
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum MetabasedSequencerChainErrors {
        #[allow(missing_docs)]
        AlreadyInitialized(AlreadyInitialized),
        #[allow(missing_docs)]
        CalldataNotAllowed(CalldataNotAllowed),
        #[allow(missing_docs)]
        InvalidModuleAddress(InvalidModuleAddress),
        #[allow(missing_docs)]
        NotAllowed(NotAllowed),
        #[allow(missing_docs)]
        OwnableInvalidOwner(OwnableInvalidOwner),
        #[allow(missing_docs)]
        OwnableUnauthorizedAccount(OwnableUnauthorizedAccount),
    }
    #[automatically_derived]
    impl MetabasedSequencerChainErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [13u8, 193u8, 73u8, 240u8],
            [17u8, 140u8, 218u8, 167u8],
            [30u8, 79u8, 189u8, 247u8],
            [92u8, 254u8, 120u8, 254u8],
            [193u8, 128u8, 169u8, 98u8],
            [250u8, 92u8, 208u8, 15u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for MetabasedSequencerChainErrors {
        const NAME: &'static str = "MetabasedSequencerChainErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 6usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AlreadyInitialized(_) => {
                    <AlreadyInitialized as alloy_sol_types::SolError>::SELECTOR
                }
                Self::CalldataNotAllowed(_) => {
                    <CalldataNotAllowed as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidModuleAddress(_) => {
                    <InvalidModuleAddress as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotAllowed(_) => {
                    <NotAllowed as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableInvalidOwner(_) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableUnauthorizedAccount(_) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<MetabasedSequencerChainErrors>] = &[
                {
                    fn AlreadyInitialized(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MetabasedSequencerChainErrors> {
                        <AlreadyInitialized as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MetabasedSequencerChainErrors::AlreadyInitialized)
                    }
                    AlreadyInitialized
                },
                {
                    fn OwnableUnauthorizedAccount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MetabasedSequencerChainErrors> {
                        <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                MetabasedSequencerChainErrors::OwnableUnauthorizedAccount,
                            )
                    }
                    OwnableUnauthorizedAccount
                },
                {
                    fn OwnableInvalidOwner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MetabasedSequencerChainErrors> {
                        <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MetabasedSequencerChainErrors::OwnableInvalidOwner)
                    }
                    OwnableInvalidOwner
                },
                {
                    fn InvalidModuleAddress(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MetabasedSequencerChainErrors> {
                        <InvalidModuleAddress as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MetabasedSequencerChainErrors::InvalidModuleAddress)
                    }
                    InvalidModuleAddress
                },
                {
                    fn CalldataNotAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MetabasedSequencerChainErrors> {
                        <CalldataNotAllowed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MetabasedSequencerChainErrors::CalldataNotAllowed)
                    }
                    CalldataNotAllowed
                },
                {
                    fn NotAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MetabasedSequencerChainErrors> {
                        <NotAllowed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MetabasedSequencerChainErrors::NotAllowed)
                    }
                    NotAllowed
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AlreadyInitialized(inner) => {
                    <AlreadyInitialized as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::CalldataNotAllowed(inner) => {
                    <CalldataNotAllowed as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidModuleAddress(inner) => {
                    <InvalidModuleAddress as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotAllowed(inner) => {
                    <NotAllowed as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AlreadyInitialized(inner) => {
                    <AlreadyInitialized as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::CalldataNotAllowed(inner) => {
                    <CalldataNotAllowed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidModuleAddress(inner) => {
                    <InvalidModuleAddress as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotAllowed(inner) => {
                    <NotAllowed as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`MetabasedSequencerChain`](self) events.
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum MetabasedSequencerChainEvents {
        #[allow(missing_docs)]
        OwnershipTransferred(OwnershipTransferred),
        #[allow(missing_docs)]
        RequirementModuleUpdated(RequirementModuleUpdated),
        #[allow(missing_docs)]
        TransactionProcessed(TransactionProcessed),
    }
    #[automatically_derived]
    impl MetabasedSequencerChainEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                37u8, 53u8, 128u8, 248u8, 6u8, 116u8, 28u8, 17u8, 179u8, 212u8, 170u8,
                96u8, 217u8, 202u8, 204u8, 91u8, 239u8, 12u8, 235u8, 179u8, 87u8, 72u8,
                118u8, 127u8, 226u8, 63u8, 17u8, 145u8, 110u8, 47u8, 4u8, 185u8,
            ],
            [
                131u8, 54u8, 59u8, 120u8, 189u8, 251u8, 178u8, 62u8, 42u8, 97u8, 219u8,
                122u8, 204u8, 195u8, 192u8, 31u8, 218u8, 41u8, 197u8, 197u8, 236u8,
                129u8, 136u8, 128u8, 3u8, 203u8, 150u8, 41u8, 18u8, 97u8, 138u8, 127u8,
            ],
            [
                139u8, 224u8, 7u8, 156u8, 83u8, 22u8, 89u8, 20u8, 19u8, 68u8, 205u8,
                31u8, 208u8, 164u8, 242u8, 132u8, 25u8, 73u8, 127u8, 151u8, 34u8, 163u8,
                218u8, 175u8, 227u8, 180u8, 24u8, 111u8, 107u8, 100u8, 87u8, 224u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for MetabasedSequencerChainEvents {
        const NAME: &'static str = "MetabasedSequencerChainEvents";
        const COUNT: usize = 3usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::OwnershipTransferred)
                }
                Some(
                    <RequirementModuleUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <RequirementModuleUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RequirementModuleUpdated)
                }
                Some(
                    <TransactionProcessed as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <TransactionProcessed as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::TransactionProcessed)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for MetabasedSequencerChainEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RequirementModuleUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::TransactionProcessed(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RequirementModuleUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::TransactionProcessed(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`MetabasedSequencerChain`](self) contract instance.

See the [wrapper's documentation](`MetabasedSequencerChainInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> MetabasedSequencerChainInstance<T, P, N> {
        MetabasedSequencerChainInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _l3ChainId: alloy::sol_types::private::primitives::aliases::U256,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<MetabasedSequencerChainInstance<T, P, N>>,
    > {
        MetabasedSequencerChainInstance::<T, P, N>::deploy(provider, _l3ChainId)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _l3ChainId: alloy::sol_types::private::primitives::aliases::U256,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        MetabasedSequencerChainInstance::<T, P, N>::deploy_builder(provider, _l3ChainId)
    }
    /**A [`MetabasedSequencerChain`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`MetabasedSequencerChain`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct MetabasedSequencerChainInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for MetabasedSequencerChainInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("MetabasedSequencerChainInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MetabasedSequencerChainInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`MetabasedSequencerChain`](self) contract instance.

See the [wrapper's documentation](`MetabasedSequencerChainInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _l3ChainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::Result<MetabasedSequencerChainInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, _l3ChainId);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _l3ChainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { _l3ChainId },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> MetabasedSequencerChainInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> MetabasedSequencerChainInstance<T, P, N> {
            MetabasedSequencerChainInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MetabasedSequencerChainInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`calldataRequirementModule`] function.
        pub fn calldataRequirementModule(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, calldataRequirementModuleCall, N> {
            self.call_builder(&calldataRequirementModuleCall {})
        }
        ///Creates a new call builder for the [`initialize`] function.
        pub fn initialize(
            &self,
            admin: alloy::sol_types::private::Address,
            _requirementModule: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, initializeCall, N> {
            self.call_builder(
                &initializeCall {
                    admin,
                    _requirementModule,
                },
            )
        }
        ///Creates a new call builder for the [`isAllowed`] function.
        pub fn isAllowed(
            &self,
            proposer: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, isAllowedCall, N> {
            self.call_builder(&isAllowedCall { proposer })
        }
        ///Creates a new call builder for the [`isCalldataAllowed`] function.
        pub fn isCalldataAllowed(
            &self,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, isCalldataAllowedCall, N> {
            self.call_builder(&isCalldataAllowedCall { data })
        }
        ///Creates a new call builder for the [`l3ChainId`] function.
        pub fn l3ChainId(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, l3ChainIdCall, N> {
            self.call_builder(&l3ChainIdCall {})
        }
        ///Creates a new call builder for the [`owner`] function.
        pub fn owner(&self) -> alloy_contract::SolCallBuilder<T, &P, ownerCall, N> {
            self.call_builder(&ownerCall {})
        }
        ///Creates a new call builder for the [`processBulkTransactions`] function.
        pub fn processBulkTransactions(
            &self,
            data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
        ) -> alloy_contract::SolCallBuilder<T, &P, processBulkTransactionsCall, N> {
            self.call_builder(
                &processBulkTransactionsCall {
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`processTransaction`] function.
        pub fn processTransaction(
            &self,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, processTransactionCall, N> {
            self.call_builder(&processTransactionCall { data })
        }
        ///Creates a new call builder for the [`processTransactionRaw`] function.
        pub fn processTransactionRaw(
            &self,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, processTransactionRawCall, N> {
            self.call_builder(&processTransactionRawCall { data })
        }
        ///Creates a new call builder for the [`proposerRequirementModule`] function.
        pub fn proposerRequirementModule(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, proposerRequirementModuleCall, N> {
            self.call_builder(&proposerRequirementModuleCall {})
        }
        ///Creates a new call builder for the [`renounceOwnership`] function.
        pub fn renounceOwnership(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, renounceOwnershipCall, N> {
            self.call_builder(&renounceOwnershipCall {})
        }
        ///Creates a new call builder for the [`transferOwnership`] function.
        pub fn transferOwnership(
            &self,
            newOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferOwnershipCall, N> {
            self.call_builder(&transferOwnershipCall { newOwner })
        }
        ///Creates a new call builder for the [`updateRequirementModule`] function.
        pub fn updateRequirementModule(
            &self,
            _newModule: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, updateRequirementModuleCall, N> {
            self.call_builder(
                &updateRequirementModuleCall {
                    _newModule,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MetabasedSequencerChainInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`OwnershipTransferred`] event.
        pub fn OwnershipTransferred_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, OwnershipTransferred, N> {
            self.event_filter::<OwnershipTransferred>()
        }
        ///Creates a new event filter for the [`RequirementModuleUpdated`] event.
        pub fn RequirementModuleUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RequirementModuleUpdated, N> {
            self.event_filter::<RequirementModuleUpdated>()
        }
        ///Creates a new event filter for the [`TransactionProcessed`] event.
        pub fn TransactionProcessed_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, TransactionProcessed, N> {
            self.event_filter::<TransactionProcessed>()
        }
    }
}
