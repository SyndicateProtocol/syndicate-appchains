/**

Generated by the following Solidity interface...
```solidity
interface MetabasedSequencerChain {
    error AlreadyInitialized();
    error InvalidModuleAddress();
    error NotAllowed(address batchSubmitter);
    error OwnableInvalidOwner(address owner);
    error OwnableUnauthorizedAccount(address account);

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event RequirementModuleUpdated(address indexed newModule);
    event TransactionProcessed(address indexed sender, bytes data);

    constructor(uint256 _l3ChainId);

    function initialize(address admin, address _requirementModule) external;
    function isAllowed(address proposer) external view returns (bool);
    function l3ChainId() external view returns (uint256);
    function owner() external view returns (address);
    function processBulkTransactions(bytes[] memory data) external;
    function processTransaction(bytes memory data) external;
    function processTransactionRaw(bytes memory data) external;
    function renounceOwnership() external;
    function requirementModule() external view returns (address);
    function transferOwnership(address newOwner) external;
    function updateRequirementModule(address _newModule) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_l3ChainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "initialize",
    "inputs": [
      {
        "name": "admin",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_requirementModule",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "isAllowed",
    "inputs": [
      {
        "name": "proposer",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "l3ChainId",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "processBulkTransactions",
    "inputs": [
      {
        "name": "data",
        "type": "bytes[]",
        "internalType": "bytes[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransaction",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransactionRaw",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "renounceOwnership",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "requirementModule",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract PermissionModule"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "transferOwnership",
    "inputs": [
      {
        "name": "newOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "updateRequirementModule",
    "inputs": [
      {
        "name": "_newModule",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "OwnershipTransferred",
    "inputs": [
      {
        "name": "previousOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RequirementModuleUpdated",
    "inputs": [
      {
        "name": "newModule",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "TransactionProcessed",
    "inputs": [
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "indexed": false,
        "internalType": "bytes"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AlreadyInitialized",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidModuleAddress",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NotAllowed",
    "inputs": [
      {
        "name": "batchSubmitter",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "OwnableInvalidOwner",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "OwnableUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ]
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod MetabasedSequencerChain {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60a060405234610038576100196100146100e9565b6101b7565b61002161003d565b6110316104ca82396080518161042c015261103190f35b610043565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061006f90610047565b810190811060018060401b0382111761008757604052565b610051565b9061009f61009861003d565b9283610065565b565b5f80fd5b90565b6100b1816100a5565b036100b857565b5f80fd5b905051906100c9826100a8565b565b906020828203126100e4576100e1915f016100bc565b90565b6100a1565b610107611645803803806100fc8161008c565b9283398101906100cb565b90565b90565b90565b61012461011f6101299261010a565b61010d565b6100a5565b90565b60209181520190565b5f7f4c3320636861696e2049442063616e6e6f742062652030000000000000000000910152565b610169601760209261012c565b61017281610135565b0190565b61018b9060208101905f81830391015261015c565b90565b1561019557565b61019d61003d565b62461bcd60e51b8152806101b360048201610176565b0390fd5b6101bf6102d7565b6101dc816101d56101cf5f610110565b916100a5565b141561018e565b608052565b60a01b90565b906101f660ff60a01b916101e1565b9181191691161790565b151590565b61020e90610200565b90565b90565b9061022961022461023092610205565b610211565b82546101e7565b9055565b5f0190565b61024161003d565b3d5f823e3d90fd5b60018060a01b031690565b61026861026361026d92610249565b61010d565b610249565b90565b61027990610254565b90565b61028590610270565b90565b5f1b90565b9061029e60018060a01b0391610288565b9181191691161790565b6102b190610270565b90565b90565b906102cc6102c76102d3926102a8565b6102b4565b825461028d565b9055565b6102e033610344565b6102eb5f6001610214565b6102f361003d565b61014a810181811060018060401b0382111761033f5761031b829161014a6114fb8439610234565b03905ff0801561033a576103316103389161027c565b60016102b7565b565b610239565b610051565b61034d906103a5565b565b61036361035e6103689261010a565b61010d565b610249565b90565b6103749061034f565b90565b61038090610249565b90565b61038c90610377565b9052565b91906103a3905f60208501940190610383565b565b806103c06103ba6103b55f61036b565b610377565b91610377565b146103d0576103ce9061046a565b565b6103fa6103dc5f61036b565b6103e461003d565b918291631e4fbdf760e01b835260048301610390565b0390fd5b5f1c90565b60018060a01b031690565b61041a61041f916103fe565b610403565b90565b61042c905461040e565b90565b61043890610254565b90565b6104449061042f565b90565b90565b9061045f61045a6104669261043b565b610447565b825461028d565b9055565b6104735f610422565b61047d825f61044a565b906104b16104ab7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09361043b565b9161043b565b916104ba61003d565b806104c481610234565b0390a356fe60806040526004361015610013575b6105df565b61001d5f356100cc565b80630b83249d146100c75780633514d37b146100c25780633bb83a64146100bd57806346e2cc09146100b8578063485cc955146100b3578063715018a6146100ae57806377bfdd19146100a95780638da5cb5b146100a4578063babcc5391461009f578063d4f0eb4d1461009a5763f2fde38b0361000e576105ac565b610579565b610544565b6104ca565b610473565b6103f7565b6103c3565b610333565b6102fe565b610213565b61016a565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f8301121561012a5781359167ffffffffffffffff831161012557602001926020830284011161012057565b6100ec565b6100e8565b6100e4565b90602082820312610160575f82013567ffffffffffffffff811161015b5761015792016100f0565b9091565b6100e0565b6100dc565b5f0190565b346101995761018361017d36600461012f565b90610800565b61018b6100d2565b8061019581610165565b0390f35b6100d8565b909182601f830112156101d85781359167ffffffffffffffff83116101d35760200192600183028401116101ce57565b6100ec565b6100e8565b6100e4565b9060208282031261020e575f82013567ffffffffffffffff811161020957610205920161019e565b9091565b6100e0565b6100dc565b346102425761022c6102263660046101dd565b906108e8565b6102346100d2565b8061023e81610165565b0390f35b6100d8565b5f91031261025157565b6100dc565b1c90565b60018060a01b031690565b61027590600861027a9302610256565b61025a565b90565b906102889154610265565b90565b61029760015f9061027d565b90565b60018060a01b031690565b90565b6102bc6102b76102c19261029a565b6102a5565b61029a565b90565b6102cd906102a8565b90565b6102d9906102c4565b90565b6102e5906102d0565b9052565b91906102fc905f602085019401906102dc565b565b3461032e5761030e366004610247565b61032a61031961028b565b6103216100d2565b918291826102e9565b0390f35b6100d8565b346103625761034c6103463660046101dd565b90610992565b6103546100d2565b8061035e81610165565b0390f35b6100d8565b6103709061029a565b90565b61037c81610367565b0361038357565b5f80fd5b9050359061039482610373565b565b91906040838203126103be57806103b26103bb925f8601610387565b93602001610387565b90565b6100dc565b346103f2576103dc6103d6366004610396565b90610b57565b6103e46100d2565b806103ee81610165565b0390f35b6100d8565b3461042557610407366004610247565b61040f610b88565b6104176100d2565b8061042181610165565b0390f35b6100d8565b7f000000000000000000000000000000000000000000000000000000000000000090565b90565b61045a9061044e565b9052565b9190610471905f60208501940190610451565b565b346104a357610483366004610247565b61049f61048e61042a565b6104966100d2565b9182918261045e565b0390f35b6100d8565b6104b190610367565b9052565b91906104c8905f602085019401906104a8565b565b346104fa576104da366004610247565b6104f66104e5610bc7565b6104ed6100d2565b918291826104b5565b0390f35b6100d8565b9060208282031261051857610515915f01610387565b90565b6100dc565b151590565b61052b9061051d565b9052565b9190610542905f60208501940190610522565b565b346105745761057061055f61055a3660046104ff565b610c95565b6105676100d2565b9182918261052f565b0390f35b6100d8565b346105a75761059161058c3660046104ff565b610dd1565b6105996100d2565b806105a381610165565b0390f35b6100d8565b346105da576105c46105bf3660046104ff565b610e48565b6105cc6100d2565b806105d681610165565b0390f35b6100d8565b5f80fd5b919033926105f96105f385610c95565b1561051d565b61060a57610608929350610760565b565b61062c846106166100d2565b91829163fa5cd00f60e01b8352600483016104b5565b0390fd5b5090565b90565b61064b61064661065092610634565b6102a5565b61044e565b90565b600161065f910161044e565b90565b634e487b7160e01b5f52603260045260245ffd5b5f80fd5b5f80fd5b5f80fd5b9035906001602003813603038212156106c4570180359067ffffffffffffffff82116106bf576020019160018202360383136106ba57565b61067e565b61067a565b610676565b908210156106e45760206106e09202810190610682565b9091565b610662565b6106f2906102c4565b90565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b61073661073f6020936107449361072d816106f5565b938480936106f9565b95869101610702565b61070d565b0190565b61075d9160208201915f818403910152610717565b90565b91909161076e818490610630565b916107785f610637565b5b8061078c6107868661044e565b9161044e565b10156107f9576107f490336107ac6107a6868985916106c9565b90610ed6565b906107ec6107da7f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f926106e9565b926107e36100d2565b91829182610748565b0390a2610653565b610779565b5092505050565b9061080a916105e3565b565b9190339261082261081c85610c95565b1561051d565b610833576108319293506108a1565b565b6108558461083f6100d2565b91829163fa5cd00f60e01b8352600483016104b5565b0390fd5b90825f939282370152565b919061087e8161087781610883956106f9565b8095610859565b61070d565b0190565b909161089e9260208301925f818503910152610864565b90565b3390916108ce7f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f926106e9565b926108e36108da6100d2565b92839283610887565b0390a2565b906108f29161080c565b565b9190339261090a61090485610c95565b1561051d565b61091b57610919929350610941565b565b61093d846109276100d2565b91829163fa5cd00f60e01b8352600483016104b5565b0390fd5b9061094d903392610ed6565b9061098d61097b7f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f926106e9565b926109846100d2565b91829182610748565b0390a2565b9061099c916108f4565b565b906109b0916109ab610f17565b610abc565b565b60a01c90565b60ff1690565b6109ca6109cf916109b2565b6109b8565b90565b6109dc90546109be565b90565b6109f36109ee6109f892610634565b6102a5565b61029a565b90565b610a04906109df565b90565b60a01b90565b90610a1c60ff60a01b91610a07565b9181191691161790565b610a2f9061051d565b90565b90565b90610a4a610a45610a5192610a26565b610a32565b8254610a0d565b9055565b610a5e906102a8565b90565b610a6a90610a55565b90565b5f1b90565b90610a8360018060a01b0391610a6d565b9181191691161790565b610a9690610a55565b90565b90565b90610ab1610aac610ab892610a8d565b610a99565b8254610a72565b9055565b610ac660016109d2565b610b355781610ae5610adf610ada5f6109fb565b610367565b91610367565b14610b1257610b0b610b04610b1093610aff600180610a35565b610a61565b6001610a9c565b610e48565b565b610b1a6100d2565b632e7f3c7f60e11b815280610b3160048201610165565b0390fd5b610b3d6100d2565b62dc149f60e41b815280610b5360048201610165565b0390fd5b90610b619161099e565b565b610b6b610f17565b610b73610b75565b565b610b86610b815f6109fb565b610f8f565b565b610b90610b63565b565b5f90565b5f1c90565b60018060a01b031690565b610bb2610bb791610b96565b610b9b565b90565b610bc49054610ba6565b90565b610bcf610b92565b50610bd95f610bba565b90565b5f90565b610bec610bf191610b96565b61025a565b90565b610bfe9054610be0565b90565b634e487b7160e01b5f52604160045260245ffd5b90610c1f9061070d565b810190811067ffffffffffffffff821117610c3957604052565b610c01565b60e01b90565b610c4d8161051d565b03610c5457565b5f80fd5b90505190610c6582610c44565b565b90602082820312610c8057610c7d915f01610c58565b90565b6100dc565b610c8d6100d2565b3d5f823e3d90fd5b6020610cdd91610ca3610bdc565b50610cb6610cb16001610bf4565b6102d0565b610cd263babcc539610cc66100d2565b95869485938493610c3e565b8352600483016104b5565b03915afa908115610d21575f91610cf3575b5090565b610d14915060203d8111610d1a575b610d0c8183610c15565b810190610c67565b5f610cef565b503d610d02565b610c85565b610d3790610d32610f17565b610d39565b565b80610d54610d4e610d495f6109fb565b610367565b91610367565b14610dae57610d6c610d6582610a61565b6001610a9c565b610d967f253580f806741c11b3d4aa60d9cacc5bef0cebb35748767fe23f11916e2f04b9916106e9565b90610d9f6100d2565b80610da981610165565b0390a2565b610db66100d2565b632e7f3c7f60e11b815280610dcd60048201610165565b0390fd5b610dda90610d26565b565b610ded90610de8610f17565b610def565b565b80610e0a610e04610dff5f6109fb565b610367565b91610367565b14610e1a57610e1890610f8f565b565b610e44610e265f6109fb565b610e2e6100d2565b918291631e4fbdf760e01b8352600483016104b5565b0390fd5b610e5190610ddc565b565b606090565b60ff60f81b1690565b60f81b90565b610e7b610e76610e8092610634565b610e61565b610e58565b90565b90565b610e92610e9791610e58565b610e83565b9052565b905090565b909182610eb081610eb793610e9b565b8093610859565b0190565b80610ecc600192610ed39694610e86565b0191610ea0565b90565b610f1490610ee2610e53565b50610f05610eef5f610e67565b9193610ef96100d2565b94859360208501610ebb565b60208201810382520382610c15565b90565b610f1f610bc7565b610f38610f32610f2d610fee565b610367565b91610367565b03610f3f57565b610f68610f4a610fee565b610f526100d2565b91829163118cdaa760e01b8352600483016104b5565b0390fd5b90565b90610f84610f7f610f8b926106e9565b610f6c565b8254610a72565b9055565b610f985f610bba565b610fa2825f610f6f565b90610fd6610fd07f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0936106e9565b916106e9565b91610fdf6100d2565b80610fe981610165565b0390a3565b610ff6610b92565b50339056fea26469706673582212201533c65be733677ed993521a7d090de9ed2bd41592477a840ee5df9aeff2f95764736f6c63430008190033608060405234601c57600e6020565b61011f61002b823961011f90f35b6026565b60405190565b5f80fdfe608060405260043610156011575b60d5565b60195f356026565b63babcc53903600d5760aa565b60e01c90565b60405190565b5f80fd5b5f80fd5b60018060a01b031690565b604c90603a565b90565b6056816045565b03605c57565b5f80fd5b90503590606b82604f565b565b906020828203126083576080915f016060565b90565b6036565b151590565b6093906087565b9052565b919060a8905f60208501940190608c565b565b3460d15760cd60bf60bb366004606d565b60dd565b60c5602c565b918291826097565b0390f35b6032565b5f80fd5b5f90565b5060e460d9565b505f9056fea2646970667358221220485545276f0c8e71749e033f9fbb886d3fdba625d961913edbe8efb8436ff1e164736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xA0`@R4a\08Wa\0\x19a\0\x14a\0\xE9V[a\x01\xB7V[a\0!a\0=V[a\x101a\x04\xCA\x829`\x80Q\x81a\x04,\x01Ra\x101\x90\xF3[a\0CV[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0o\x90a\0GV[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0\x87W`@RV[a\0QV[\x90a\0\x9Fa\0\x98a\0=V[\x92\x83a\0eV[V[_\x80\xFD[\x90V[a\0\xB1\x81a\0\xA5V[\x03a\0\xB8WV[_\x80\xFD[\x90PQ\x90a\0\xC9\x82a\0\xA8V[V[\x90` \x82\x82\x03\x12a\0\xE4Wa\0\xE1\x91_\x01a\0\xBCV[\x90V[a\0\xA1V[a\x01\x07a\x16E\x808\x03\x80a\0\xFC\x81a\0\x8CV[\x92\x839\x81\x01\x90a\0\xCBV[\x90V[\x90V[\x90V[a\x01$a\x01\x1Fa\x01)\x92a\x01\nV[a\x01\rV[a\0\xA5V[\x90V[` \x91\x81R\x01\x90V[_\x7FL3 chain ID cannot be 0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x01i`\x17` \x92a\x01,V[a\x01r\x81a\x015V[\x01\x90V[a\x01\x8B\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x01\\V[\x90V[\x15a\x01\x95WV[a\x01\x9Da\0=V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x01\xB3`\x04\x82\x01a\x01vV[\x03\x90\xFD[a\x01\xBFa\x02\xD7V[a\x01\xDC\x81a\x01\xD5a\x01\xCF_a\x01\x10V[\x91a\0\xA5V[\x14\x15a\x01\x8EV[`\x80RV[`\xA0\x1B\x90V[\x90a\x01\xF6`\xFF`\xA0\x1B\x91a\x01\xE1V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x15\x15\x90V[a\x02\x0E\x90a\x02\0V[\x90V[\x90V[\x90a\x02)a\x02$a\x020\x92a\x02\x05V[a\x02\x11V[\x82Ta\x01\xE7V[\x90UV[_\x01\x90V[a\x02Aa\0=V[=_\x82>=\x90\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02ha\x02ca\x02m\x92a\x02IV[a\x01\rV[a\x02IV[\x90V[a\x02y\x90a\x02TV[\x90V[a\x02\x85\x90a\x02pV[\x90V[_\x1B\x90V[\x90a\x02\x9E`\x01\x80`\xA0\x1B\x03\x91a\x02\x88V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x02\xB1\x90a\x02pV[\x90V[\x90V[\x90a\x02\xCCa\x02\xC7a\x02\xD3\x92a\x02\xA8V[a\x02\xB4V[\x82Ta\x02\x8DV[\x90UV[a\x02\xE03a\x03DV[a\x02\xEB_`\x01a\x02\x14V[a\x02\xF3a\0=V[a\x01J\x81\x01\x81\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\x03?Wa\x03\x1B\x82\x91a\x01Ja\x14\xFB\x849a\x024V[\x03\x90_\xF0\x80\x15a\x03:Wa\x031a\x038\x91a\x02|V[`\x01a\x02\xB7V[V[a\x029V[a\0QV[a\x03M\x90a\x03\xA5V[V[a\x03ca\x03^a\x03h\x92a\x01\nV[a\x01\rV[a\x02IV[\x90V[a\x03t\x90a\x03OV[\x90V[a\x03\x80\x90a\x02IV[\x90V[a\x03\x8C\x90a\x03wV[\x90RV[\x91\x90a\x03\xA3\x90_` \x85\x01\x94\x01\x90a\x03\x83V[V[\x80a\x03\xC0a\x03\xBAa\x03\xB5_a\x03kV[a\x03wV[\x91a\x03wV[\x14a\x03\xD0Wa\x03\xCE\x90a\x04jV[V[a\x03\xFAa\x03\xDC_a\x03kV[a\x03\xE4a\0=V[\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x03\x90V[\x03\x90\xFD[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x04\x1Aa\x04\x1F\x91a\x03\xFEV[a\x04\x03V[\x90V[a\x04,\x90Ta\x04\x0EV[\x90V[a\x048\x90a\x02TV[\x90V[a\x04D\x90a\x04/V[\x90V[\x90V[\x90a\x04_a\x04Za\x04f\x92a\x04;V[a\x04GV[\x82Ta\x02\x8DV[\x90UV[a\x04s_a\x04\"V[a\x04}\x82_a\x04JV[\x90a\x04\xB1a\x04\xAB\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x04;V[\x91a\x04;V[\x91a\x04\xBAa\0=V[\x80a\x04\xC4\x81a\x024V[\x03\x90\xA3V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x05\xDFV[a\0\x1D_5a\0\xCCV[\x80c\x0B\x83$\x9D\x14a\0\xC7W\x80c5\x14\xD3{\x14a\0\xC2W\x80c;\xB8:d\x14a\0\xBDW\x80cF\xE2\xCC\t\x14a\0\xB8W\x80cH\\\xC9U\x14a\0\xB3W\x80cqP\x18\xA6\x14a\0\xAEW\x80cw\xBF\xDD\x19\x14a\0\xA9W\x80c\x8D\xA5\xCB[\x14a\0\xA4W\x80c\xBA\xBC\xC59\x14a\0\x9FW\x80c\xD4\xF0\xEBM\x14a\0\x9AWc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\x05\xACV[a\x05yV[a\x05DV[a\x04\xCAV[a\x04sV[a\x03\xF7V[a\x03\xC3V[a\x033V[a\x02\xFEV[a\x02\x13V[a\x01jV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01*W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01%W` \x01\x92` \x83\x02\x84\x01\x11a\x01 WV[a\0\xECV[a\0\xE8V[a\0\xE4V[\x90` \x82\x82\x03\x12a\x01`W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01[Wa\x01W\x92\x01a\0\xF0V[\x90\x91V[a\0\xE0V[a\0\xDCV[_\x01\x90V[4a\x01\x99Wa\x01\x83a\x01}6`\x04a\x01/V[\x90a\x08\0V[a\x01\x8Ba\0\xD2V[\x80a\x01\x95\x81a\x01eV[\x03\x90\xF3[a\0\xD8V[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01\xD8W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01\xD3W` \x01\x92`\x01\x83\x02\x84\x01\x11a\x01\xCEWV[a\0\xECV[a\0\xE8V[a\0\xE4V[\x90` \x82\x82\x03\x12a\x02\x0EW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\tWa\x02\x05\x92\x01a\x01\x9EV[\x90\x91V[a\0\xE0V[a\0\xDCV[4a\x02BWa\x02,a\x02&6`\x04a\x01\xDDV[\x90a\x08\xE8V[a\x024a\0\xD2V[\x80a\x02>\x81a\x01eV[\x03\x90\xF3[a\0\xD8V[_\x91\x03\x12a\x02QWV[a\0\xDCV[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02u\x90`\x08a\x02z\x93\x02a\x02VV[a\x02ZV[\x90V[\x90a\x02\x88\x91Ta\x02eV[\x90V[a\x02\x97`\x01_\x90a\x02}V[\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[\x90V[a\x02\xBCa\x02\xB7a\x02\xC1\x92a\x02\x9AV[a\x02\xA5V[a\x02\x9AV[\x90V[a\x02\xCD\x90a\x02\xA8V[\x90V[a\x02\xD9\x90a\x02\xC4V[\x90V[a\x02\xE5\x90a\x02\xD0V[\x90RV[\x91\x90a\x02\xFC\x90_` \x85\x01\x94\x01\x90a\x02\xDCV[V[4a\x03.Wa\x03\x0E6`\x04a\x02GV[a\x03*a\x03\x19a\x02\x8BV[a\x03!a\0\xD2V[\x91\x82\x91\x82a\x02\xE9V[\x03\x90\xF3[a\0\xD8V[4a\x03bWa\x03La\x03F6`\x04a\x01\xDDV[\x90a\t\x92V[a\x03Ta\0\xD2V[\x80a\x03^\x81a\x01eV[\x03\x90\xF3[a\0\xD8V[a\x03p\x90a\x02\x9AV[\x90V[a\x03|\x81a\x03gV[\x03a\x03\x83WV[_\x80\xFD[\x90P5\x90a\x03\x94\x82a\x03sV[V[\x91\x90`@\x83\x82\x03\x12a\x03\xBEW\x80a\x03\xB2a\x03\xBB\x92_\x86\x01a\x03\x87V[\x93` \x01a\x03\x87V[\x90V[a\0\xDCV[4a\x03\xF2Wa\x03\xDCa\x03\xD66`\x04a\x03\x96V[\x90a\x0BWV[a\x03\xE4a\0\xD2V[\x80a\x03\xEE\x81a\x01eV[\x03\x90\xF3[a\0\xD8V[4a\x04%Wa\x04\x076`\x04a\x02GV[a\x04\x0Fa\x0B\x88V[a\x04\x17a\0\xD2V[\x80a\x04!\x81a\x01eV[\x03\x90\xF3[a\0\xD8V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[\x90V[a\x04Z\x90a\x04NV[\x90RV[\x91\x90a\x04q\x90_` \x85\x01\x94\x01\x90a\x04QV[V[4a\x04\xA3Wa\x04\x836`\x04a\x02GV[a\x04\x9Fa\x04\x8Ea\x04*V[a\x04\x96a\0\xD2V[\x91\x82\x91\x82a\x04^V[\x03\x90\xF3[a\0\xD8V[a\x04\xB1\x90a\x03gV[\x90RV[\x91\x90a\x04\xC8\x90_` \x85\x01\x94\x01\x90a\x04\xA8V[V[4a\x04\xFAWa\x04\xDA6`\x04a\x02GV[a\x04\xF6a\x04\xE5a\x0B\xC7V[a\x04\xEDa\0\xD2V[\x91\x82\x91\x82a\x04\xB5V[\x03\x90\xF3[a\0\xD8V[\x90` \x82\x82\x03\x12a\x05\x18Wa\x05\x15\x91_\x01a\x03\x87V[\x90V[a\0\xDCV[\x15\x15\x90V[a\x05+\x90a\x05\x1DV[\x90RV[\x91\x90a\x05B\x90_` \x85\x01\x94\x01\x90a\x05\"V[V[4a\x05tWa\x05pa\x05_a\x05Z6`\x04a\x04\xFFV[a\x0C\x95V[a\x05ga\0\xD2V[\x91\x82\x91\x82a\x05/V[\x03\x90\xF3[a\0\xD8V[4a\x05\xA7Wa\x05\x91a\x05\x8C6`\x04a\x04\xFFV[a\r\xD1V[a\x05\x99a\0\xD2V[\x80a\x05\xA3\x81a\x01eV[\x03\x90\xF3[a\0\xD8V[4a\x05\xDAWa\x05\xC4a\x05\xBF6`\x04a\x04\xFFV[a\x0EHV[a\x05\xCCa\0\xD2V[\x80a\x05\xD6\x81a\x01eV[\x03\x90\xF3[a\0\xD8V[_\x80\xFD[\x91\x903\x92a\x05\xF9a\x05\xF3\x85a\x0C\x95V[\x15a\x05\x1DV[a\x06\nWa\x06\x08\x92\x93Pa\x07`V[V[a\x06,\x84a\x06\x16a\0\xD2V[\x91\x82\x91c\xFA\\\xD0\x0F`\xE0\x1B\x83R`\x04\x83\x01a\x04\xB5V[\x03\x90\xFD[P\x90V[\x90V[a\x06Ka\x06Fa\x06P\x92a\x064V[a\x02\xA5V[a\x04NV[\x90V[`\x01a\x06_\x91\x01a\x04NV[\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x905\x90`\x01` \x03\x816\x03\x03\x82\x12\x15a\x06\xC4W\x01\x805\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x06\xBFW` \x01\x91`\x01\x82\x026\x03\x83\x13a\x06\xBAWV[a\x06~V[a\x06zV[a\x06vV[\x90\x82\x10\x15a\x06\xE4W` a\x06\xE0\x92\x02\x81\x01\x90a\x06\x82V[\x90\x91V[a\x06bV[a\x06\xF2\x90a\x02\xC4V[\x90V[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x076a\x07?` \x93a\x07D\x93a\x07-\x81a\x06\xF5V[\x93\x84\x80\x93a\x06\xF9V[\x95\x86\x91\x01a\x07\x02V[a\x07\rV[\x01\x90V[a\x07]\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x07\x17V[\x90V[\x91\x90\x91a\x07n\x81\x84\x90a\x060V[\x91a\x07x_a\x067V[[\x80a\x07\x8Ca\x07\x86\x86a\x04NV[\x91a\x04NV[\x10\x15a\x07\xF9Wa\x07\xF4\x903a\x07\xACa\x07\xA6\x86\x89\x85\x91a\x06\xC9V[\x90a\x0E\xD6V[\x90a\x07\xECa\x07\xDA\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\x06\xE9V[\x92a\x07\xE3a\0\xD2V[\x91\x82\x91\x82a\x07HV[\x03\x90\xA2a\x06SV[a\x07yV[P\x92PPPV[\x90a\x08\n\x91a\x05\xE3V[V[\x91\x903\x92a\x08\"a\x08\x1C\x85a\x0C\x95V[\x15a\x05\x1DV[a\x083Wa\x081\x92\x93Pa\x08\xA1V[V[a\x08U\x84a\x08?a\0\xD2V[\x91\x82\x91c\xFA\\\xD0\x0F`\xE0\x1B\x83R`\x04\x83\x01a\x04\xB5V[\x03\x90\xFD[\x90\x82_\x93\x92\x827\x01RV[\x91\x90a\x08~\x81a\x08w\x81a\x08\x83\x95a\x06\xF9V[\x80\x95a\x08YV[a\x07\rV[\x01\x90V[\x90\x91a\x08\x9E\x92` \x83\x01\x92_\x81\x85\x03\x91\x01Ra\x08dV[\x90V[3\x90\x91a\x08\xCE\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\x06\xE9V[\x92a\x08\xE3a\x08\xDAa\0\xD2V[\x92\x83\x92\x83a\x08\x87V[\x03\x90\xA2V[\x90a\x08\xF2\x91a\x08\x0CV[V[\x91\x903\x92a\t\na\t\x04\x85a\x0C\x95V[\x15a\x05\x1DV[a\t\x1BWa\t\x19\x92\x93Pa\tAV[V[a\t=\x84a\t'a\0\xD2V[\x91\x82\x91c\xFA\\\xD0\x0F`\xE0\x1B\x83R`\x04\x83\x01a\x04\xB5V[\x03\x90\xFD[\x90a\tM\x903\x92a\x0E\xD6V[\x90a\t\x8Da\t{\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\x06\xE9V[\x92a\t\x84a\0\xD2V[\x91\x82\x91\x82a\x07HV[\x03\x90\xA2V[\x90a\t\x9C\x91a\x08\xF4V[V[\x90a\t\xB0\x91a\t\xABa\x0F\x17V[a\n\xBCV[V[`\xA0\x1C\x90V[`\xFF\x16\x90V[a\t\xCAa\t\xCF\x91a\t\xB2V[a\t\xB8V[\x90V[a\t\xDC\x90Ta\t\xBEV[\x90V[a\t\xF3a\t\xEEa\t\xF8\x92a\x064V[a\x02\xA5V[a\x02\x9AV[\x90V[a\n\x04\x90a\t\xDFV[\x90V[`\xA0\x1B\x90V[\x90a\n\x1C`\xFF`\xA0\x1B\x91a\n\x07V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\n/\x90a\x05\x1DV[\x90V[\x90V[\x90a\nJa\nEa\nQ\x92a\n&V[a\n2V[\x82Ta\n\rV[\x90UV[a\n^\x90a\x02\xA8V[\x90V[a\nj\x90a\nUV[\x90V[_\x1B\x90V[\x90a\n\x83`\x01\x80`\xA0\x1B\x03\x91a\nmV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\n\x96\x90a\nUV[\x90V[\x90V[\x90a\n\xB1a\n\xACa\n\xB8\x92a\n\x8DV[a\n\x99V[\x82Ta\nrV[\x90UV[a\n\xC6`\x01a\t\xD2V[a\x0B5W\x81a\n\xE5a\n\xDFa\n\xDA_a\t\xFBV[a\x03gV[\x91a\x03gV[\x14a\x0B\x12Wa\x0B\x0Ba\x0B\x04a\x0B\x10\x93a\n\xFF`\x01\x80a\n5V[a\naV[`\x01a\n\x9CV[a\x0EHV[V[a\x0B\x1Aa\0\xD2V[c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x0B1`\x04\x82\x01a\x01eV[\x03\x90\xFD[a\x0B=a\0\xD2V[b\xDC\x14\x9F`\xE4\x1B\x81R\x80a\x0BS`\x04\x82\x01a\x01eV[\x03\x90\xFD[\x90a\x0Ba\x91a\t\x9EV[V[a\x0Bka\x0F\x17V[a\x0Bsa\x0BuV[V[a\x0B\x86a\x0B\x81_a\t\xFBV[a\x0F\x8FV[V[a\x0B\x90a\x0BcV[V[_\x90V[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x0B\xB2a\x0B\xB7\x91a\x0B\x96V[a\x0B\x9BV[\x90V[a\x0B\xC4\x90Ta\x0B\xA6V[\x90V[a\x0B\xCFa\x0B\x92V[Pa\x0B\xD9_a\x0B\xBAV[\x90V[_\x90V[a\x0B\xECa\x0B\xF1\x91a\x0B\x96V[a\x02ZV[\x90V[a\x0B\xFE\x90Ta\x0B\xE0V[\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x0C\x1F\x90a\x07\rV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x0C9W`@RV[a\x0C\x01V[`\xE0\x1B\x90V[a\x0CM\x81a\x05\x1DV[\x03a\x0CTWV[_\x80\xFD[\x90PQ\x90a\x0Ce\x82a\x0CDV[V[\x90` \x82\x82\x03\x12a\x0C\x80Wa\x0C}\x91_\x01a\x0CXV[\x90V[a\0\xDCV[a\x0C\x8Da\0\xD2V[=_\x82>=\x90\xFD[` a\x0C\xDD\x91a\x0C\xA3a\x0B\xDCV[Pa\x0C\xB6a\x0C\xB1`\x01a\x0B\xF4V[a\x02\xD0V[a\x0C\xD2c\xBA\xBC\xC59a\x0C\xC6a\0\xD2V[\x95\x86\x94\x85\x93\x84\x93a\x0C>V[\x83R`\x04\x83\x01a\x04\xB5V[\x03\x91Z\xFA\x90\x81\x15a\r!W_\x91a\x0C\xF3W[P\x90V[a\r\x14\x91P` =\x81\x11a\r\x1AW[a\r\x0C\x81\x83a\x0C\x15V[\x81\x01\x90a\x0CgV[_a\x0C\xEFV[P=a\r\x02V[a\x0C\x85V[a\r7\x90a\r2a\x0F\x17V[a\r9V[V[\x80a\rTa\rNa\rI_a\t\xFBV[a\x03gV[\x91a\x03gV[\x14a\r\xAEWa\rla\re\x82a\naV[`\x01a\n\x9CV[a\r\x96\x7F%5\x80\xF8\x06t\x1C\x11\xB3\xD4\xAA`\xD9\xCA\xCC[\xEF\x0C\xEB\xB3WHv\x7F\xE2?\x11\x91n/\x04\xB9\x91a\x06\xE9V[\x90a\r\x9Fa\0\xD2V[\x80a\r\xA9\x81a\x01eV[\x03\x90\xA2V[a\r\xB6a\0\xD2V[c.\x7F<\x7F`\xE1\x1B\x81R\x80a\r\xCD`\x04\x82\x01a\x01eV[\x03\x90\xFD[a\r\xDA\x90a\r&V[V[a\r\xED\x90a\r\xE8a\x0F\x17V[a\r\xEFV[V[\x80a\x0E\na\x0E\x04a\r\xFF_a\t\xFBV[a\x03gV[\x91a\x03gV[\x14a\x0E\x1AWa\x0E\x18\x90a\x0F\x8FV[V[a\x0EDa\x0E&_a\t\xFBV[a\x0E.a\0\xD2V[\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x04\xB5V[\x03\x90\xFD[a\x0EQ\x90a\r\xDCV[V[``\x90V[`\xFF`\xF8\x1B\x16\x90V[`\xF8\x1B\x90V[a\x0E{a\x0Eva\x0E\x80\x92a\x064V[a\x0EaV[a\x0EXV[\x90V[\x90V[a\x0E\x92a\x0E\x97\x91a\x0EXV[a\x0E\x83V[\x90RV[\x90P\x90V[\x90\x91\x82a\x0E\xB0\x81a\x0E\xB7\x93a\x0E\x9BV[\x80\x93a\x08YV[\x01\x90V[\x80a\x0E\xCC`\x01\x92a\x0E\xD3\x96\x94a\x0E\x86V[\x01\x91a\x0E\xA0V[\x90V[a\x0F\x14\x90a\x0E\xE2a\x0ESV[Pa\x0F\x05a\x0E\xEF_a\x0EgV[\x91\x93a\x0E\xF9a\0\xD2V[\x94\x85\x93` \x85\x01a\x0E\xBBV[` \x82\x01\x81\x03\x82R\x03\x82a\x0C\x15V[\x90V[a\x0F\x1Fa\x0B\xC7V[a\x0F8a\x0F2a\x0F-a\x0F\xEEV[a\x03gV[\x91a\x03gV[\x03a\x0F?WV[a\x0Fha\x0FJa\x0F\xEEV[a\x0FRa\0\xD2V[\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x04\xB5V[\x03\x90\xFD[\x90V[\x90a\x0F\x84a\x0F\x7Fa\x0F\x8B\x92a\x06\xE9V[a\x0FlV[\x82Ta\nrV[\x90UV[a\x0F\x98_a\x0B\xBAV[a\x0F\xA2\x82_a\x0FoV[\x90a\x0F\xD6a\x0F\xD0\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x06\xE9V[\x91a\x06\xE9V[\x91a\x0F\xDFa\0\xD2V[\x80a\x0F\xE9\x81a\x01eV[\x03\x90\xA3V[a\x0F\xF6a\x0B\x92V[P3\x90V\xFE\xA2dipfsX\"\x12 \x153\xC6[\xE73g~\xD9\x93R\x1A}\t\r\xE9\xED+\xD4\x15\x92Gz\x84\x0E\xE5\xDF\x9A\xEF\xF2\xF9WdsolcC\0\x08\x19\x003`\x80`@R4`\x1CW`\x0E` V[a\x01\x1Fa\0+\x829a\x01\x1F\x90\xF3[`&V[`@Q\x90V[_\x80\xFD\xFE`\x80`@R`\x046\x10\x15`\x11W[`\xD5V[`\x19_5`&V[c\xBA\xBC\xC59\x03`\rW`\xAAV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[`L\x90`:V[\x90V[`V\x81`EV[\x03`\\WV[_\x80\xFD[\x90P5\x90`k\x82`OV[V[\x90` \x82\x82\x03\x12`\x83W`\x80\x91_\x01``V[\x90V[`6V[\x15\x15\x90V[`\x93\x90`\x87V[\x90RV[\x91\x90`\xA8\x90_` \x85\x01\x94\x01\x90`\x8CV[V[4`\xD1W`\xCD`\xBF`\xBB6`\x04`mV[`\xDDV[`\xC5`,V[\x91\x82\x91\x82`\x97V[\x03\x90\xF3[`2V[_\x80\xFD[_\x90V[P`\xE4`\xD9V[P_\x90V\xFE\xA2dipfsX\"\x12 HUE'o\x0C\x8Eqt\x9E\x03?\x9F\xBB\x88m?\xDB\xA6%\xD9a\x91>\xDB\xE8\xEF\xB8Co\xF1\xE1dsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b6105df565b61001d5f356100cc565b80630b83249d146100c75780633514d37b146100c25780633bb83a64146100bd57806346e2cc09146100b8578063485cc955146100b3578063715018a6146100ae57806377bfdd19146100a95780638da5cb5b146100a4578063babcc5391461009f578063d4f0eb4d1461009a5763f2fde38b0361000e576105ac565b610579565b610544565b6104ca565b610473565b6103f7565b6103c3565b610333565b6102fe565b610213565b61016a565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f8301121561012a5781359167ffffffffffffffff831161012557602001926020830284011161012057565b6100ec565b6100e8565b6100e4565b90602082820312610160575f82013567ffffffffffffffff811161015b5761015792016100f0565b9091565b6100e0565b6100dc565b5f0190565b346101995761018361017d36600461012f565b90610800565b61018b6100d2565b8061019581610165565b0390f35b6100d8565b909182601f830112156101d85781359167ffffffffffffffff83116101d35760200192600183028401116101ce57565b6100ec565b6100e8565b6100e4565b9060208282031261020e575f82013567ffffffffffffffff811161020957610205920161019e565b9091565b6100e0565b6100dc565b346102425761022c6102263660046101dd565b906108e8565b6102346100d2565b8061023e81610165565b0390f35b6100d8565b5f91031261025157565b6100dc565b1c90565b60018060a01b031690565b61027590600861027a9302610256565b61025a565b90565b906102889154610265565b90565b61029760015f9061027d565b90565b60018060a01b031690565b90565b6102bc6102b76102c19261029a565b6102a5565b61029a565b90565b6102cd906102a8565b90565b6102d9906102c4565b90565b6102e5906102d0565b9052565b91906102fc905f602085019401906102dc565b565b3461032e5761030e366004610247565b61032a61031961028b565b6103216100d2565b918291826102e9565b0390f35b6100d8565b346103625761034c6103463660046101dd565b90610992565b6103546100d2565b8061035e81610165565b0390f35b6100d8565b6103709061029a565b90565b61037c81610367565b0361038357565b5f80fd5b9050359061039482610373565b565b91906040838203126103be57806103b26103bb925f8601610387565b93602001610387565b90565b6100dc565b346103f2576103dc6103d6366004610396565b90610b57565b6103e46100d2565b806103ee81610165565b0390f35b6100d8565b3461042557610407366004610247565b61040f610b88565b6104176100d2565b8061042181610165565b0390f35b6100d8565b7f000000000000000000000000000000000000000000000000000000000000000090565b90565b61045a9061044e565b9052565b9190610471905f60208501940190610451565b565b346104a357610483366004610247565b61049f61048e61042a565b6104966100d2565b9182918261045e565b0390f35b6100d8565b6104b190610367565b9052565b91906104c8905f602085019401906104a8565b565b346104fa576104da366004610247565b6104f66104e5610bc7565b6104ed6100d2565b918291826104b5565b0390f35b6100d8565b9060208282031261051857610515915f01610387565b90565b6100dc565b151590565b61052b9061051d565b9052565b9190610542905f60208501940190610522565b565b346105745761057061055f61055a3660046104ff565b610c95565b6105676100d2565b9182918261052f565b0390f35b6100d8565b346105a75761059161058c3660046104ff565b610dd1565b6105996100d2565b806105a381610165565b0390f35b6100d8565b346105da576105c46105bf3660046104ff565b610e48565b6105cc6100d2565b806105d681610165565b0390f35b6100d8565b5f80fd5b919033926105f96105f385610c95565b1561051d565b61060a57610608929350610760565b565b61062c846106166100d2565b91829163fa5cd00f60e01b8352600483016104b5565b0390fd5b5090565b90565b61064b61064661065092610634565b6102a5565b61044e565b90565b600161065f910161044e565b90565b634e487b7160e01b5f52603260045260245ffd5b5f80fd5b5f80fd5b5f80fd5b9035906001602003813603038212156106c4570180359067ffffffffffffffff82116106bf576020019160018202360383136106ba57565b61067e565b61067a565b610676565b908210156106e45760206106e09202810190610682565b9091565b610662565b6106f2906102c4565b90565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b61073661073f6020936107449361072d816106f5565b938480936106f9565b95869101610702565b61070d565b0190565b61075d9160208201915f818403910152610717565b90565b91909161076e818490610630565b916107785f610637565b5b8061078c6107868661044e565b9161044e565b10156107f9576107f490336107ac6107a6868985916106c9565b90610ed6565b906107ec6107da7f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f926106e9565b926107e36100d2565b91829182610748565b0390a2610653565b610779565b5092505050565b9061080a916105e3565b565b9190339261082261081c85610c95565b1561051d565b610833576108319293506108a1565b565b6108558461083f6100d2565b91829163fa5cd00f60e01b8352600483016104b5565b0390fd5b90825f939282370152565b919061087e8161087781610883956106f9565b8095610859565b61070d565b0190565b909161089e9260208301925f818503910152610864565b90565b3390916108ce7f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f926106e9565b926108e36108da6100d2565b92839283610887565b0390a2565b906108f29161080c565b565b9190339261090a61090485610c95565b1561051d565b61091b57610919929350610941565b565b61093d846109276100d2565b91829163fa5cd00f60e01b8352600483016104b5565b0390fd5b9061094d903392610ed6565b9061098d61097b7f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f926106e9565b926109846100d2565b91829182610748565b0390a2565b9061099c916108f4565b565b906109b0916109ab610f17565b610abc565b565b60a01c90565b60ff1690565b6109ca6109cf916109b2565b6109b8565b90565b6109dc90546109be565b90565b6109f36109ee6109f892610634565b6102a5565b61029a565b90565b610a04906109df565b90565b60a01b90565b90610a1c60ff60a01b91610a07565b9181191691161790565b610a2f9061051d565b90565b90565b90610a4a610a45610a5192610a26565b610a32565b8254610a0d565b9055565b610a5e906102a8565b90565b610a6a90610a55565b90565b5f1b90565b90610a8360018060a01b0391610a6d565b9181191691161790565b610a9690610a55565b90565b90565b90610ab1610aac610ab892610a8d565b610a99565b8254610a72565b9055565b610ac660016109d2565b610b355781610ae5610adf610ada5f6109fb565b610367565b91610367565b14610b1257610b0b610b04610b1093610aff600180610a35565b610a61565b6001610a9c565b610e48565b565b610b1a6100d2565b632e7f3c7f60e11b815280610b3160048201610165565b0390fd5b610b3d6100d2565b62dc149f60e41b815280610b5360048201610165565b0390fd5b90610b619161099e565b565b610b6b610f17565b610b73610b75565b565b610b86610b815f6109fb565b610f8f565b565b610b90610b63565b565b5f90565b5f1c90565b60018060a01b031690565b610bb2610bb791610b96565b610b9b565b90565b610bc49054610ba6565b90565b610bcf610b92565b50610bd95f610bba565b90565b5f90565b610bec610bf191610b96565b61025a565b90565b610bfe9054610be0565b90565b634e487b7160e01b5f52604160045260245ffd5b90610c1f9061070d565b810190811067ffffffffffffffff821117610c3957604052565b610c01565b60e01b90565b610c4d8161051d565b03610c5457565b5f80fd5b90505190610c6582610c44565b565b90602082820312610c8057610c7d915f01610c58565b90565b6100dc565b610c8d6100d2565b3d5f823e3d90fd5b6020610cdd91610ca3610bdc565b50610cb6610cb16001610bf4565b6102d0565b610cd263babcc539610cc66100d2565b95869485938493610c3e565b8352600483016104b5565b03915afa908115610d21575f91610cf3575b5090565b610d14915060203d8111610d1a575b610d0c8183610c15565b810190610c67565b5f610cef565b503d610d02565b610c85565b610d3790610d32610f17565b610d39565b565b80610d54610d4e610d495f6109fb565b610367565b91610367565b14610dae57610d6c610d6582610a61565b6001610a9c565b610d967f253580f806741c11b3d4aa60d9cacc5bef0cebb35748767fe23f11916e2f04b9916106e9565b90610d9f6100d2565b80610da981610165565b0390a2565b610db66100d2565b632e7f3c7f60e11b815280610dcd60048201610165565b0390fd5b610dda90610d26565b565b610ded90610de8610f17565b610def565b565b80610e0a610e04610dff5f6109fb565b610367565b91610367565b14610e1a57610e1890610f8f565b565b610e44610e265f6109fb565b610e2e6100d2565b918291631e4fbdf760e01b8352600483016104b5565b0390fd5b610e5190610ddc565b565b606090565b60ff60f81b1690565b60f81b90565b610e7b610e76610e8092610634565b610e61565b610e58565b90565b90565b610e92610e9791610e58565b610e83565b9052565b905090565b909182610eb081610eb793610e9b565b8093610859565b0190565b80610ecc600192610ed39694610e86565b0191610ea0565b90565b610f1490610ee2610e53565b50610f05610eef5f610e67565b9193610ef96100d2565b94859360208501610ebb565b60208201810382520382610c15565b90565b610f1f610bc7565b610f38610f32610f2d610fee565b610367565b91610367565b03610f3f57565b610f68610f4a610fee565b610f526100d2565b91829163118cdaa760e01b8352600483016104b5565b0390fd5b90565b90610f84610f7f610f8b926106e9565b610f6c565b8254610a72565b9055565b610f985f610bba565b610fa2825f610f6f565b90610fd6610fd07f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0936106e9565b916106e9565b91610fdf6100d2565b80610fe981610165565b0390a3565b610ff6610b92565b50339056fea26469706673582212201533c65be733677ed993521a7d090de9ed2bd41592477a840ee5df9aeff2f95764736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x05\xDFV[a\0\x1D_5a\0\xCCV[\x80c\x0B\x83$\x9D\x14a\0\xC7W\x80c5\x14\xD3{\x14a\0\xC2W\x80c;\xB8:d\x14a\0\xBDW\x80cF\xE2\xCC\t\x14a\0\xB8W\x80cH\\\xC9U\x14a\0\xB3W\x80cqP\x18\xA6\x14a\0\xAEW\x80cw\xBF\xDD\x19\x14a\0\xA9W\x80c\x8D\xA5\xCB[\x14a\0\xA4W\x80c\xBA\xBC\xC59\x14a\0\x9FW\x80c\xD4\xF0\xEBM\x14a\0\x9AWc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\x05\xACV[a\x05yV[a\x05DV[a\x04\xCAV[a\x04sV[a\x03\xF7V[a\x03\xC3V[a\x033V[a\x02\xFEV[a\x02\x13V[a\x01jV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01*W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01%W` \x01\x92` \x83\x02\x84\x01\x11a\x01 WV[a\0\xECV[a\0\xE8V[a\0\xE4V[\x90` \x82\x82\x03\x12a\x01`W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01[Wa\x01W\x92\x01a\0\xF0V[\x90\x91V[a\0\xE0V[a\0\xDCV[_\x01\x90V[4a\x01\x99Wa\x01\x83a\x01}6`\x04a\x01/V[\x90a\x08\0V[a\x01\x8Ba\0\xD2V[\x80a\x01\x95\x81a\x01eV[\x03\x90\xF3[a\0\xD8V[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01\xD8W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01\xD3W` \x01\x92`\x01\x83\x02\x84\x01\x11a\x01\xCEWV[a\0\xECV[a\0\xE8V[a\0\xE4V[\x90` \x82\x82\x03\x12a\x02\x0EW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\tWa\x02\x05\x92\x01a\x01\x9EV[\x90\x91V[a\0\xE0V[a\0\xDCV[4a\x02BWa\x02,a\x02&6`\x04a\x01\xDDV[\x90a\x08\xE8V[a\x024a\0\xD2V[\x80a\x02>\x81a\x01eV[\x03\x90\xF3[a\0\xD8V[_\x91\x03\x12a\x02QWV[a\0\xDCV[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02u\x90`\x08a\x02z\x93\x02a\x02VV[a\x02ZV[\x90V[\x90a\x02\x88\x91Ta\x02eV[\x90V[a\x02\x97`\x01_\x90a\x02}V[\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[\x90V[a\x02\xBCa\x02\xB7a\x02\xC1\x92a\x02\x9AV[a\x02\xA5V[a\x02\x9AV[\x90V[a\x02\xCD\x90a\x02\xA8V[\x90V[a\x02\xD9\x90a\x02\xC4V[\x90V[a\x02\xE5\x90a\x02\xD0V[\x90RV[\x91\x90a\x02\xFC\x90_` \x85\x01\x94\x01\x90a\x02\xDCV[V[4a\x03.Wa\x03\x0E6`\x04a\x02GV[a\x03*a\x03\x19a\x02\x8BV[a\x03!a\0\xD2V[\x91\x82\x91\x82a\x02\xE9V[\x03\x90\xF3[a\0\xD8V[4a\x03bWa\x03La\x03F6`\x04a\x01\xDDV[\x90a\t\x92V[a\x03Ta\0\xD2V[\x80a\x03^\x81a\x01eV[\x03\x90\xF3[a\0\xD8V[a\x03p\x90a\x02\x9AV[\x90V[a\x03|\x81a\x03gV[\x03a\x03\x83WV[_\x80\xFD[\x90P5\x90a\x03\x94\x82a\x03sV[V[\x91\x90`@\x83\x82\x03\x12a\x03\xBEW\x80a\x03\xB2a\x03\xBB\x92_\x86\x01a\x03\x87V[\x93` \x01a\x03\x87V[\x90V[a\0\xDCV[4a\x03\xF2Wa\x03\xDCa\x03\xD66`\x04a\x03\x96V[\x90a\x0BWV[a\x03\xE4a\0\xD2V[\x80a\x03\xEE\x81a\x01eV[\x03\x90\xF3[a\0\xD8V[4a\x04%Wa\x04\x076`\x04a\x02GV[a\x04\x0Fa\x0B\x88V[a\x04\x17a\0\xD2V[\x80a\x04!\x81a\x01eV[\x03\x90\xF3[a\0\xD8V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[\x90V[a\x04Z\x90a\x04NV[\x90RV[\x91\x90a\x04q\x90_` \x85\x01\x94\x01\x90a\x04QV[V[4a\x04\xA3Wa\x04\x836`\x04a\x02GV[a\x04\x9Fa\x04\x8Ea\x04*V[a\x04\x96a\0\xD2V[\x91\x82\x91\x82a\x04^V[\x03\x90\xF3[a\0\xD8V[a\x04\xB1\x90a\x03gV[\x90RV[\x91\x90a\x04\xC8\x90_` \x85\x01\x94\x01\x90a\x04\xA8V[V[4a\x04\xFAWa\x04\xDA6`\x04a\x02GV[a\x04\xF6a\x04\xE5a\x0B\xC7V[a\x04\xEDa\0\xD2V[\x91\x82\x91\x82a\x04\xB5V[\x03\x90\xF3[a\0\xD8V[\x90` \x82\x82\x03\x12a\x05\x18Wa\x05\x15\x91_\x01a\x03\x87V[\x90V[a\0\xDCV[\x15\x15\x90V[a\x05+\x90a\x05\x1DV[\x90RV[\x91\x90a\x05B\x90_` \x85\x01\x94\x01\x90a\x05\"V[V[4a\x05tWa\x05pa\x05_a\x05Z6`\x04a\x04\xFFV[a\x0C\x95V[a\x05ga\0\xD2V[\x91\x82\x91\x82a\x05/V[\x03\x90\xF3[a\0\xD8V[4a\x05\xA7Wa\x05\x91a\x05\x8C6`\x04a\x04\xFFV[a\r\xD1V[a\x05\x99a\0\xD2V[\x80a\x05\xA3\x81a\x01eV[\x03\x90\xF3[a\0\xD8V[4a\x05\xDAWa\x05\xC4a\x05\xBF6`\x04a\x04\xFFV[a\x0EHV[a\x05\xCCa\0\xD2V[\x80a\x05\xD6\x81a\x01eV[\x03\x90\xF3[a\0\xD8V[_\x80\xFD[\x91\x903\x92a\x05\xF9a\x05\xF3\x85a\x0C\x95V[\x15a\x05\x1DV[a\x06\nWa\x06\x08\x92\x93Pa\x07`V[V[a\x06,\x84a\x06\x16a\0\xD2V[\x91\x82\x91c\xFA\\\xD0\x0F`\xE0\x1B\x83R`\x04\x83\x01a\x04\xB5V[\x03\x90\xFD[P\x90V[\x90V[a\x06Ka\x06Fa\x06P\x92a\x064V[a\x02\xA5V[a\x04NV[\x90V[`\x01a\x06_\x91\x01a\x04NV[\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x905\x90`\x01` \x03\x816\x03\x03\x82\x12\x15a\x06\xC4W\x01\x805\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x06\xBFW` \x01\x91`\x01\x82\x026\x03\x83\x13a\x06\xBAWV[a\x06~V[a\x06zV[a\x06vV[\x90\x82\x10\x15a\x06\xE4W` a\x06\xE0\x92\x02\x81\x01\x90a\x06\x82V[\x90\x91V[a\x06bV[a\x06\xF2\x90a\x02\xC4V[\x90V[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x076a\x07?` \x93a\x07D\x93a\x07-\x81a\x06\xF5V[\x93\x84\x80\x93a\x06\xF9V[\x95\x86\x91\x01a\x07\x02V[a\x07\rV[\x01\x90V[a\x07]\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x07\x17V[\x90V[\x91\x90\x91a\x07n\x81\x84\x90a\x060V[\x91a\x07x_a\x067V[[\x80a\x07\x8Ca\x07\x86\x86a\x04NV[\x91a\x04NV[\x10\x15a\x07\xF9Wa\x07\xF4\x903a\x07\xACa\x07\xA6\x86\x89\x85\x91a\x06\xC9V[\x90a\x0E\xD6V[\x90a\x07\xECa\x07\xDA\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\x06\xE9V[\x92a\x07\xE3a\0\xD2V[\x91\x82\x91\x82a\x07HV[\x03\x90\xA2a\x06SV[a\x07yV[P\x92PPPV[\x90a\x08\n\x91a\x05\xE3V[V[\x91\x903\x92a\x08\"a\x08\x1C\x85a\x0C\x95V[\x15a\x05\x1DV[a\x083Wa\x081\x92\x93Pa\x08\xA1V[V[a\x08U\x84a\x08?a\0\xD2V[\x91\x82\x91c\xFA\\\xD0\x0F`\xE0\x1B\x83R`\x04\x83\x01a\x04\xB5V[\x03\x90\xFD[\x90\x82_\x93\x92\x827\x01RV[\x91\x90a\x08~\x81a\x08w\x81a\x08\x83\x95a\x06\xF9V[\x80\x95a\x08YV[a\x07\rV[\x01\x90V[\x90\x91a\x08\x9E\x92` \x83\x01\x92_\x81\x85\x03\x91\x01Ra\x08dV[\x90V[3\x90\x91a\x08\xCE\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\x06\xE9V[\x92a\x08\xE3a\x08\xDAa\0\xD2V[\x92\x83\x92\x83a\x08\x87V[\x03\x90\xA2V[\x90a\x08\xF2\x91a\x08\x0CV[V[\x91\x903\x92a\t\na\t\x04\x85a\x0C\x95V[\x15a\x05\x1DV[a\t\x1BWa\t\x19\x92\x93Pa\tAV[V[a\t=\x84a\t'a\0\xD2V[\x91\x82\x91c\xFA\\\xD0\x0F`\xE0\x1B\x83R`\x04\x83\x01a\x04\xB5V[\x03\x90\xFD[\x90a\tM\x903\x92a\x0E\xD6V[\x90a\t\x8Da\t{\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\x06\xE9V[\x92a\t\x84a\0\xD2V[\x91\x82\x91\x82a\x07HV[\x03\x90\xA2V[\x90a\t\x9C\x91a\x08\xF4V[V[\x90a\t\xB0\x91a\t\xABa\x0F\x17V[a\n\xBCV[V[`\xA0\x1C\x90V[`\xFF\x16\x90V[a\t\xCAa\t\xCF\x91a\t\xB2V[a\t\xB8V[\x90V[a\t\xDC\x90Ta\t\xBEV[\x90V[a\t\xF3a\t\xEEa\t\xF8\x92a\x064V[a\x02\xA5V[a\x02\x9AV[\x90V[a\n\x04\x90a\t\xDFV[\x90V[`\xA0\x1B\x90V[\x90a\n\x1C`\xFF`\xA0\x1B\x91a\n\x07V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\n/\x90a\x05\x1DV[\x90V[\x90V[\x90a\nJa\nEa\nQ\x92a\n&V[a\n2V[\x82Ta\n\rV[\x90UV[a\n^\x90a\x02\xA8V[\x90V[a\nj\x90a\nUV[\x90V[_\x1B\x90V[\x90a\n\x83`\x01\x80`\xA0\x1B\x03\x91a\nmV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\n\x96\x90a\nUV[\x90V[\x90V[\x90a\n\xB1a\n\xACa\n\xB8\x92a\n\x8DV[a\n\x99V[\x82Ta\nrV[\x90UV[a\n\xC6`\x01a\t\xD2V[a\x0B5W\x81a\n\xE5a\n\xDFa\n\xDA_a\t\xFBV[a\x03gV[\x91a\x03gV[\x14a\x0B\x12Wa\x0B\x0Ba\x0B\x04a\x0B\x10\x93a\n\xFF`\x01\x80a\n5V[a\naV[`\x01a\n\x9CV[a\x0EHV[V[a\x0B\x1Aa\0\xD2V[c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x0B1`\x04\x82\x01a\x01eV[\x03\x90\xFD[a\x0B=a\0\xD2V[b\xDC\x14\x9F`\xE4\x1B\x81R\x80a\x0BS`\x04\x82\x01a\x01eV[\x03\x90\xFD[\x90a\x0Ba\x91a\t\x9EV[V[a\x0Bka\x0F\x17V[a\x0Bsa\x0BuV[V[a\x0B\x86a\x0B\x81_a\t\xFBV[a\x0F\x8FV[V[a\x0B\x90a\x0BcV[V[_\x90V[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x0B\xB2a\x0B\xB7\x91a\x0B\x96V[a\x0B\x9BV[\x90V[a\x0B\xC4\x90Ta\x0B\xA6V[\x90V[a\x0B\xCFa\x0B\x92V[Pa\x0B\xD9_a\x0B\xBAV[\x90V[_\x90V[a\x0B\xECa\x0B\xF1\x91a\x0B\x96V[a\x02ZV[\x90V[a\x0B\xFE\x90Ta\x0B\xE0V[\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x0C\x1F\x90a\x07\rV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x0C9W`@RV[a\x0C\x01V[`\xE0\x1B\x90V[a\x0CM\x81a\x05\x1DV[\x03a\x0CTWV[_\x80\xFD[\x90PQ\x90a\x0Ce\x82a\x0CDV[V[\x90` \x82\x82\x03\x12a\x0C\x80Wa\x0C}\x91_\x01a\x0CXV[\x90V[a\0\xDCV[a\x0C\x8Da\0\xD2V[=_\x82>=\x90\xFD[` a\x0C\xDD\x91a\x0C\xA3a\x0B\xDCV[Pa\x0C\xB6a\x0C\xB1`\x01a\x0B\xF4V[a\x02\xD0V[a\x0C\xD2c\xBA\xBC\xC59a\x0C\xC6a\0\xD2V[\x95\x86\x94\x85\x93\x84\x93a\x0C>V[\x83R`\x04\x83\x01a\x04\xB5V[\x03\x91Z\xFA\x90\x81\x15a\r!W_\x91a\x0C\xF3W[P\x90V[a\r\x14\x91P` =\x81\x11a\r\x1AW[a\r\x0C\x81\x83a\x0C\x15V[\x81\x01\x90a\x0CgV[_a\x0C\xEFV[P=a\r\x02V[a\x0C\x85V[a\r7\x90a\r2a\x0F\x17V[a\r9V[V[\x80a\rTa\rNa\rI_a\t\xFBV[a\x03gV[\x91a\x03gV[\x14a\r\xAEWa\rla\re\x82a\naV[`\x01a\n\x9CV[a\r\x96\x7F%5\x80\xF8\x06t\x1C\x11\xB3\xD4\xAA`\xD9\xCA\xCC[\xEF\x0C\xEB\xB3WHv\x7F\xE2?\x11\x91n/\x04\xB9\x91a\x06\xE9V[\x90a\r\x9Fa\0\xD2V[\x80a\r\xA9\x81a\x01eV[\x03\x90\xA2V[a\r\xB6a\0\xD2V[c.\x7F<\x7F`\xE1\x1B\x81R\x80a\r\xCD`\x04\x82\x01a\x01eV[\x03\x90\xFD[a\r\xDA\x90a\r&V[V[a\r\xED\x90a\r\xE8a\x0F\x17V[a\r\xEFV[V[\x80a\x0E\na\x0E\x04a\r\xFF_a\t\xFBV[a\x03gV[\x91a\x03gV[\x14a\x0E\x1AWa\x0E\x18\x90a\x0F\x8FV[V[a\x0EDa\x0E&_a\t\xFBV[a\x0E.a\0\xD2V[\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x04\xB5V[\x03\x90\xFD[a\x0EQ\x90a\r\xDCV[V[``\x90V[`\xFF`\xF8\x1B\x16\x90V[`\xF8\x1B\x90V[a\x0E{a\x0Eva\x0E\x80\x92a\x064V[a\x0EaV[a\x0EXV[\x90V[\x90V[a\x0E\x92a\x0E\x97\x91a\x0EXV[a\x0E\x83V[\x90RV[\x90P\x90V[\x90\x91\x82a\x0E\xB0\x81a\x0E\xB7\x93a\x0E\x9BV[\x80\x93a\x08YV[\x01\x90V[\x80a\x0E\xCC`\x01\x92a\x0E\xD3\x96\x94a\x0E\x86V[\x01\x91a\x0E\xA0V[\x90V[a\x0F\x14\x90a\x0E\xE2a\x0ESV[Pa\x0F\x05a\x0E\xEF_a\x0EgV[\x91\x93a\x0E\xF9a\0\xD2V[\x94\x85\x93` \x85\x01a\x0E\xBBV[` \x82\x01\x81\x03\x82R\x03\x82a\x0C\x15V[\x90V[a\x0F\x1Fa\x0B\xC7V[a\x0F8a\x0F2a\x0F-a\x0F\xEEV[a\x03gV[\x91a\x03gV[\x03a\x0F?WV[a\x0Fha\x0FJa\x0F\xEEV[a\x0FRa\0\xD2V[\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x04\xB5V[\x03\x90\xFD[\x90V[\x90a\x0F\x84a\x0F\x7Fa\x0F\x8B\x92a\x06\xE9V[a\x0FlV[\x82Ta\nrV[\x90UV[a\x0F\x98_a\x0B\xBAV[a\x0F\xA2\x82_a\x0FoV[\x90a\x0F\xD6a\x0F\xD0\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x06\xE9V[\x91a\x06\xE9V[\x91a\x0F\xDFa\0\xD2V[\x80a\x0F\xE9\x81a\x01eV[\x03\x90\xA3V[a\x0F\xF6a\x0B\x92V[P3\x90V\xFE\xA2dipfsX\"\x12 \x153\xC6[\xE73g~\xD9\x93R\x1A}\t\r\xE9\xED+\xD4\x15\x92Gz\x84\x0E\xE5\xDF\x9A\xEF\xF2\xF9WdsolcC\0\x08\x19\x003",
    );
    /**Custom error with signature `AlreadyInitialized()` and selector `0x0dc149f0`.
```solidity
error AlreadyInitialized();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AlreadyInitialized {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AlreadyInitialized> for UnderlyingRustTuple<'_> {
            fn from(value: AlreadyInitialized) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AlreadyInitialized {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AlreadyInitialized {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AlreadyInitialized()";
            const SELECTOR: [u8; 4] = [13u8, 193u8, 73u8, 240u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `InvalidModuleAddress()` and selector `0x5cfe78fe`.
```solidity
error InvalidModuleAddress();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidModuleAddress {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidModuleAddress> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidModuleAddress) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidModuleAddress {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidModuleAddress {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidModuleAddress()";
            const SELECTOR: [u8; 4] = [92u8, 254u8, 120u8, 254u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `NotAllowed(address)` and selector `0xfa5cd00f`.
```solidity
error NotAllowed(address batchSubmitter);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotAllowed {
        #[allow(missing_docs)]
        pub batchSubmitter: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotAllowed> for UnderlyingRustTuple<'_> {
            fn from(value: NotAllowed) -> Self {
                (value.batchSubmitter,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotAllowed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { batchSubmitter: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotAllowed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotAllowed(address)";
            const SELECTOR: [u8; 4] = [250u8, 92u8, 208u8, 15u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.batchSubmitter,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `OwnableInvalidOwner(address)` and selector `0x1e4fbdf7`.
```solidity
error OwnableInvalidOwner(address owner);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableInvalidOwner {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableInvalidOwner> for UnderlyingRustTuple<'_> {
            fn from(value: OwnableInvalidOwner) -> Self {
                (value.owner,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for OwnableInvalidOwner {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { owner: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableInvalidOwner {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableInvalidOwner(address)";
            const SELECTOR: [u8; 4] = [30u8, 79u8, 189u8, 247u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `OwnableUnauthorizedAccount(address)` and selector `0x118cdaa7`.
```solidity
error OwnableUnauthorizedAccount(address account);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableUnauthorizedAccount {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: OwnableUnauthorizedAccount) -> Self {
                (value.account,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for OwnableUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { account: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableUnauthorizedAccount(address)";
            const SELECTOR: [u8; 4] = [17u8, 140u8, 218u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
        }
    };
    /**Event with signature `OwnershipTransferred(address,address)` and selector `0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0`.
```solidity
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct OwnershipTransferred {
        #[allow(missing_docs)]
        pub previousOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OwnershipTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OwnershipTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousOwner: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousOwner.clone(),
                    self.newOwner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousOwner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OwnershipTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OwnershipTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &OwnershipTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RequirementModuleUpdated(address)` and selector `0x253580f806741c11b3d4aa60d9cacc5bef0cebb35748767fe23f11916e2f04b9`.
```solidity
event RequirementModuleUpdated(address indexed newModule);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RequirementModuleUpdated {
        #[allow(missing_docs)]
        pub newModule: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RequirementModuleUpdated {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RequirementModuleUpdated(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                37u8,
                53u8,
                128u8,
                248u8,
                6u8,
                116u8,
                28u8,
                17u8,
                179u8,
                212u8,
                170u8,
                96u8,
                217u8,
                202u8,
                204u8,
                91u8,
                239u8,
                12u8,
                235u8,
                179u8,
                87u8,
                72u8,
                118u8,
                127u8,
                226u8,
                63u8,
                17u8,
                145u8,
                110u8,
                47u8,
                4u8,
                185u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { newModule: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.newModule.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newModule,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RequirementModuleUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RequirementModuleUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &RequirementModuleUpdated,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `TransactionProcessed(address,bytes)` and selector `0x83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f`.
```solidity
event TransactionProcessed(address indexed sender, bytes data);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct TransactionProcessed {
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for TransactionProcessed {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "TransactionProcessed(address,bytes)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                131u8,
                54u8,
                59u8,
                120u8,
                189u8,
                251u8,
                178u8,
                62u8,
                42u8,
                97u8,
                219u8,
                122u8,
                204u8,
                195u8,
                192u8,
                31u8,
                218u8,
                41u8,
                197u8,
                197u8,
                236u8,
                129u8,
                136u8,
                128u8,
                3u8,
                203u8,
                150u8,
                41u8,
                18u8,
                97u8,
                138u8,
                127u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    sender: topics.1,
                    data: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.sender.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for TransactionProcessed {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&TransactionProcessed> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &TransactionProcessed) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(uint256 _l3ChainId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub _l3ChainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value._l3ChainId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _l3ChainId: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._l3ChainId),
                )
            }
        }
    };
    /**Function with signature `initialize(address,address)` and selector `0x485cc955`.
```solidity
function initialize(address admin, address _requirementModule) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeCall {
        #[allow(missing_docs)]
        pub admin: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _requirementModule: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`initialize(address,address)`](initializeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeCall> for UnderlyingRustTuple<'_> {
                fn from(value: initializeCall) -> Self {
                    (value.admin, value._requirementModule)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        admin: tuple.0,
                        _requirementModule: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: initializeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for initializeCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = initializeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "initialize(address,address)";
            const SELECTOR: [u8; 4] = [72u8, 92u8, 201u8, 85u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._requirementModule,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isAllowed(address)` and selector `0xbabcc539`.
```solidity
function isAllowed(address proposer) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedCall {
        #[allow(missing_docs)]
        pub proposer: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`isAllowed(address)`](isAllowedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedCall> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedCall) -> Self {
                    (value.proposer,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { proposer: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isAllowedCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isAllowedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isAllowed(address)";
            const SELECTOR: [u8; 4] = [186u8, 188u8, 197u8, 57u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.proposer,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `l3ChainId()` and selector `0x77bfdd19`.
```solidity
function l3ChainId() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct l3ChainIdCall {}
    ///Container type for the return parameters of the [`l3ChainId()`](l3ChainIdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct l3ChainIdReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<l3ChainIdCall> for UnderlyingRustTuple<'_> {
                fn from(value: l3ChainIdCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for l3ChainIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<l3ChainIdReturn> for UnderlyingRustTuple<'_> {
                fn from(value: l3ChainIdReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for l3ChainIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for l3ChainIdCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = l3ChainIdReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "l3ChainId()";
            const SELECTOR: [u8; 4] = [119u8, 191u8, 221u8, 25u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `owner()` and selector `0x8da5cb5b`.
```solidity
function owner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerCall {}
    ///Container type for the return parameters of the [`owner()`](ownerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "owner()";
            const SELECTOR: [u8; 4] = [141u8, 165u8, 203u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processBulkTransactions(bytes[])` and selector `0x0b83249d`.
```solidity
function processBulkTransactions(bytes[] memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processBulkTransactionsCall {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
    }
    ///Container type for the return parameters of the [`processBulkTransactions(bytes[])`](processBulkTransactionsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processBulkTransactionsReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processBulkTransactionsCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: processBulkTransactionsCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processBulkTransactionsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processBulkTransactionsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: processBulkTransactionsReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processBulkTransactionsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processBulkTransactionsCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processBulkTransactionsReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processBulkTransactions(bytes[])";
            const SELECTOR: [u8; 4] = [11u8, 131u8, 36u8, 157u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bytes,
                    > as alloy_sol_types::SolType>::tokenize(&self.data),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransaction(bytes)` and selector `0x46e2cc09`.
```solidity
function processTransaction(bytes memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionCall {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`processTransaction(bytes)`](processTransactionCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransaction(bytes)";
            const SELECTOR: [u8; 4] = [70u8, 226u8, 204u8, 9u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransactionRaw(bytes)` and selector `0x3514d37b`.
```solidity
function processTransactionRaw(bytes memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionRawCall {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`processTransactionRaw(bytes)`](processTransactionRawCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionRawReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionRawCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionRawCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionRawCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionRawReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionRawReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionRawReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionRawCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionRawReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransactionRaw(bytes)";
            const SELECTOR: [u8; 4] = [53u8, 20u8, 211u8, 123u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `renounceOwnership()` and selector `0x715018a6`.
```solidity
function renounceOwnership() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipCall {}
    ///Container type for the return parameters of the [`renounceOwnership()`](renounceOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceOwnershipCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceOwnership()";
            const SELECTOR: [u8; 4] = [113u8, 80u8, 24u8, 166u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `requirementModule()` and selector `0x3bb83a64`.
```solidity
function requirementModule() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct requirementModuleCall {}
    ///Container type for the return parameters of the [`requirementModule()`](requirementModuleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct requirementModuleReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<requirementModuleCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: requirementModuleCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for requirementModuleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<requirementModuleReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: requirementModuleReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for requirementModuleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for requirementModuleCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = requirementModuleReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "requirementModule()";
            const SELECTOR: [u8; 4] = [59u8, 184u8, 58u8, 100u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferOwnership(address)` and selector `0xf2fde38b`.
```solidity
function transferOwnership(address newOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipCall {
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferOwnership(address)`](transferOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipCall) -> Self {
                    (value.newOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferOwnershipCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferOwnership(address)";
            const SELECTOR: [u8; 4] = [242u8, 253u8, 227u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newOwner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `updateRequirementModule(address)` and selector `0xd4f0eb4d`.
```solidity
function updateRequirementModule(address _newModule) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateRequirementModuleCall {
        #[allow(missing_docs)]
        pub _newModule: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`updateRequirementModule(address)`](updateRequirementModuleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateRequirementModuleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateRequirementModuleCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateRequirementModuleCall) -> Self {
                    (value._newModule,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateRequirementModuleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _newModule: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateRequirementModuleReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateRequirementModuleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateRequirementModuleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for updateRequirementModuleCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = updateRequirementModuleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "updateRequirementModule(address)";
            const SELECTOR: [u8; 4] = [212u8, 240u8, 235u8, 77u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._newModule,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`MetabasedSequencerChain`](self) function calls.
    pub enum MetabasedSequencerChainCalls {
        #[allow(missing_docs)]
        initialize(initializeCall),
        #[allow(missing_docs)]
        isAllowed(isAllowedCall),
        #[allow(missing_docs)]
        l3ChainId(l3ChainIdCall),
        #[allow(missing_docs)]
        owner(ownerCall),
        #[allow(missing_docs)]
        processBulkTransactions(processBulkTransactionsCall),
        #[allow(missing_docs)]
        processTransaction(processTransactionCall),
        #[allow(missing_docs)]
        processTransactionRaw(processTransactionRawCall),
        #[allow(missing_docs)]
        renounceOwnership(renounceOwnershipCall),
        #[allow(missing_docs)]
        requirementModule(requirementModuleCall),
        #[allow(missing_docs)]
        transferOwnership(transferOwnershipCall),
        #[allow(missing_docs)]
        updateRequirementModule(updateRequirementModuleCall),
    }
    #[automatically_derived]
    impl MetabasedSequencerChainCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [11u8, 131u8, 36u8, 157u8],
            [53u8, 20u8, 211u8, 123u8],
            [59u8, 184u8, 58u8, 100u8],
            [70u8, 226u8, 204u8, 9u8],
            [72u8, 92u8, 201u8, 85u8],
            [113u8, 80u8, 24u8, 166u8],
            [119u8, 191u8, 221u8, 25u8],
            [141u8, 165u8, 203u8, 91u8],
            [186u8, 188u8, 197u8, 57u8],
            [212u8, 240u8, 235u8, 77u8],
            [242u8, 253u8, 227u8, 139u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for MetabasedSequencerChainCalls {
        const NAME: &'static str = "MetabasedSequencerChainCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 11usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::initialize(_) => {
                    <initializeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isAllowed(_) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::l3ChainId(_) => {
                    <l3ChainIdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::owner(_) => <ownerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::processBulkTransactions(_) => {
                    <processBulkTransactionsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransaction(_) => {
                    <processTransactionCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransactionRaw(_) => {
                    <processTransactionRawCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::renounceOwnership(_) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::requirementModule(_) => {
                    <requirementModuleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferOwnership(_) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::updateRequirementModule(_) => {
                    <updateRequirementModuleCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<MetabasedSequencerChainCalls>] = &[
                {
                    fn processBulkTransactions(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MetabasedSequencerChainCalls> {
                        <processBulkTransactionsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MetabasedSequencerChainCalls::processBulkTransactions)
                    }
                    processBulkTransactions
                },
                {
                    fn processTransactionRaw(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MetabasedSequencerChainCalls> {
                        <processTransactionRawCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MetabasedSequencerChainCalls::processTransactionRaw)
                    }
                    processTransactionRaw
                },
                {
                    fn requirementModule(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MetabasedSequencerChainCalls> {
                        <requirementModuleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MetabasedSequencerChainCalls::requirementModule)
                    }
                    requirementModule
                },
                {
                    fn processTransaction(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MetabasedSequencerChainCalls> {
                        <processTransactionCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MetabasedSequencerChainCalls::processTransaction)
                    }
                    processTransaction
                },
                {
                    fn initialize(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MetabasedSequencerChainCalls> {
                        <initializeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MetabasedSequencerChainCalls::initialize)
                    }
                    initialize
                },
                {
                    fn renounceOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MetabasedSequencerChainCalls> {
                        <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MetabasedSequencerChainCalls::renounceOwnership)
                    }
                    renounceOwnership
                },
                {
                    fn l3ChainId(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MetabasedSequencerChainCalls> {
                        <l3ChainIdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MetabasedSequencerChainCalls::l3ChainId)
                    }
                    l3ChainId
                },
                {
                    fn owner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MetabasedSequencerChainCalls> {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MetabasedSequencerChainCalls::owner)
                    }
                    owner
                },
                {
                    fn isAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MetabasedSequencerChainCalls> {
                        <isAllowedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MetabasedSequencerChainCalls::isAllowed)
                    }
                    isAllowed
                },
                {
                    fn updateRequirementModule(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MetabasedSequencerChainCalls> {
                        <updateRequirementModuleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MetabasedSequencerChainCalls::updateRequirementModule)
                    }
                    updateRequirementModule
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MetabasedSequencerChainCalls> {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MetabasedSequencerChainCalls::transferOwnership)
                    }
                    transferOwnership
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::l3ChainId(inner) => {
                    <l3ChainIdCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::processBulkTransactions(inner) => {
                    <processBulkTransactionsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransaction(inner) => {
                    <processTransactionCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransactionRaw(inner) => {
                    <processTransactionRawCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::requirementModule(inner) => {
                    <requirementModuleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::updateRequirementModule(inner) => {
                    <updateRequirementModuleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::l3ChainId(inner) => {
                    <l3ChainIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::processBulkTransactions(inner) => {
                    <processBulkTransactionsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransaction(inner) => {
                    <processTransactionCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransactionRaw(inner) => {
                    <processTransactionRawCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::requirementModule(inner) => {
                    <requirementModuleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::updateRequirementModule(inner) => {
                    <updateRequirementModuleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`MetabasedSequencerChain`](self) custom errors.
    pub enum MetabasedSequencerChainErrors {
        #[allow(missing_docs)]
        AlreadyInitialized(AlreadyInitialized),
        #[allow(missing_docs)]
        InvalidModuleAddress(InvalidModuleAddress),
        #[allow(missing_docs)]
        NotAllowed(NotAllowed),
        #[allow(missing_docs)]
        OwnableInvalidOwner(OwnableInvalidOwner),
        #[allow(missing_docs)]
        OwnableUnauthorizedAccount(OwnableUnauthorizedAccount),
    }
    #[automatically_derived]
    impl MetabasedSequencerChainErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [13u8, 193u8, 73u8, 240u8],
            [17u8, 140u8, 218u8, 167u8],
            [30u8, 79u8, 189u8, 247u8],
            [92u8, 254u8, 120u8, 254u8],
            [250u8, 92u8, 208u8, 15u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for MetabasedSequencerChainErrors {
        const NAME: &'static str = "MetabasedSequencerChainErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 5usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AlreadyInitialized(_) => {
                    <AlreadyInitialized as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidModuleAddress(_) => {
                    <InvalidModuleAddress as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotAllowed(_) => {
                    <NotAllowed as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableInvalidOwner(_) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableUnauthorizedAccount(_) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<MetabasedSequencerChainErrors>] = &[
                {
                    fn AlreadyInitialized(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MetabasedSequencerChainErrors> {
                        <AlreadyInitialized as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MetabasedSequencerChainErrors::AlreadyInitialized)
                    }
                    AlreadyInitialized
                },
                {
                    fn OwnableUnauthorizedAccount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MetabasedSequencerChainErrors> {
                        <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                MetabasedSequencerChainErrors::OwnableUnauthorizedAccount,
                            )
                    }
                    OwnableUnauthorizedAccount
                },
                {
                    fn OwnableInvalidOwner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MetabasedSequencerChainErrors> {
                        <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MetabasedSequencerChainErrors::OwnableInvalidOwner)
                    }
                    OwnableInvalidOwner
                },
                {
                    fn InvalidModuleAddress(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MetabasedSequencerChainErrors> {
                        <InvalidModuleAddress as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MetabasedSequencerChainErrors::InvalidModuleAddress)
                    }
                    InvalidModuleAddress
                },
                {
                    fn NotAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MetabasedSequencerChainErrors> {
                        <NotAllowed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MetabasedSequencerChainErrors::NotAllowed)
                    }
                    NotAllowed
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AlreadyInitialized(inner) => {
                    <AlreadyInitialized as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidModuleAddress(inner) => {
                    <InvalidModuleAddress as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotAllowed(inner) => {
                    <NotAllowed as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AlreadyInitialized(inner) => {
                    <AlreadyInitialized as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidModuleAddress(inner) => {
                    <InvalidModuleAddress as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotAllowed(inner) => {
                    <NotAllowed as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`MetabasedSequencerChain`](self) events.
    pub enum MetabasedSequencerChainEvents {
        #[allow(missing_docs)]
        OwnershipTransferred(OwnershipTransferred),
        #[allow(missing_docs)]
        RequirementModuleUpdated(RequirementModuleUpdated),
        #[allow(missing_docs)]
        TransactionProcessed(TransactionProcessed),
    }
    #[automatically_derived]
    impl MetabasedSequencerChainEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                37u8,
                53u8,
                128u8,
                248u8,
                6u8,
                116u8,
                28u8,
                17u8,
                179u8,
                212u8,
                170u8,
                96u8,
                217u8,
                202u8,
                204u8,
                91u8,
                239u8,
                12u8,
                235u8,
                179u8,
                87u8,
                72u8,
                118u8,
                127u8,
                226u8,
                63u8,
                17u8,
                145u8,
                110u8,
                47u8,
                4u8,
                185u8,
            ],
            [
                131u8,
                54u8,
                59u8,
                120u8,
                189u8,
                251u8,
                178u8,
                62u8,
                42u8,
                97u8,
                219u8,
                122u8,
                204u8,
                195u8,
                192u8,
                31u8,
                218u8,
                41u8,
                197u8,
                197u8,
                236u8,
                129u8,
                136u8,
                128u8,
                3u8,
                203u8,
                150u8,
                41u8,
                18u8,
                97u8,
                138u8,
                127u8,
            ],
            [
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for MetabasedSequencerChainEvents {
        const NAME: &'static str = "MetabasedSequencerChainEvents";
        const COUNT: usize = 3usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::OwnershipTransferred)
                }
                Some(
                    <RequirementModuleUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <RequirementModuleUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RequirementModuleUpdated)
                }
                Some(
                    <TransactionProcessed as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <TransactionProcessed as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::TransactionProcessed)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for MetabasedSequencerChainEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RequirementModuleUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::TransactionProcessed(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RequirementModuleUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::TransactionProcessed(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`MetabasedSequencerChain`](self) contract instance.

See the [wrapper's documentation](`MetabasedSequencerChainInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> MetabasedSequencerChainInstance<T, P, N> {
        MetabasedSequencerChainInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _l3ChainId: alloy::sol_types::private::primitives::aliases::U256,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<MetabasedSequencerChainInstance<T, P, N>>,
    > {
        MetabasedSequencerChainInstance::<T, P, N>::deploy(provider, _l3ChainId)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _l3ChainId: alloy::sol_types::private::primitives::aliases::U256,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        MetabasedSequencerChainInstance::<T, P, N>::deploy_builder(provider, _l3ChainId)
    }
    /**A [`MetabasedSequencerChain`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`MetabasedSequencerChain`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct MetabasedSequencerChainInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for MetabasedSequencerChainInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("MetabasedSequencerChainInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MetabasedSequencerChainInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`MetabasedSequencerChain`](self) contract instance.

See the [wrapper's documentation](`MetabasedSequencerChainInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _l3ChainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::Result<MetabasedSequencerChainInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, _l3ChainId);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _l3ChainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { _l3ChainId },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> MetabasedSequencerChainInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> MetabasedSequencerChainInstance<T, P, N> {
            MetabasedSequencerChainInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MetabasedSequencerChainInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`initialize`] function.
        pub fn initialize(
            &self,
            admin: alloy::sol_types::private::Address,
            _requirementModule: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, initializeCall, N> {
            self.call_builder(
                &initializeCall {
                    admin,
                    _requirementModule,
                },
            )
        }
        ///Creates a new call builder for the [`isAllowed`] function.
        pub fn isAllowed(
            &self,
            proposer: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, isAllowedCall, N> {
            self.call_builder(&isAllowedCall { proposer })
        }
        ///Creates a new call builder for the [`l3ChainId`] function.
        pub fn l3ChainId(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, l3ChainIdCall, N> {
            self.call_builder(&l3ChainIdCall {})
        }
        ///Creates a new call builder for the [`owner`] function.
        pub fn owner(&self) -> alloy_contract::SolCallBuilder<T, &P, ownerCall, N> {
            self.call_builder(&ownerCall {})
        }
        ///Creates a new call builder for the [`processBulkTransactions`] function.
        pub fn processBulkTransactions(
            &self,
            data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
        ) -> alloy_contract::SolCallBuilder<T, &P, processBulkTransactionsCall, N> {
            self.call_builder(
                &processBulkTransactionsCall {
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`processTransaction`] function.
        pub fn processTransaction(
            &self,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, processTransactionCall, N> {
            self.call_builder(&processTransactionCall { data })
        }
        ///Creates a new call builder for the [`processTransactionRaw`] function.
        pub fn processTransactionRaw(
            &self,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, processTransactionRawCall, N> {
            self.call_builder(&processTransactionRawCall { data })
        }
        ///Creates a new call builder for the [`renounceOwnership`] function.
        pub fn renounceOwnership(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, renounceOwnershipCall, N> {
            self.call_builder(&renounceOwnershipCall {})
        }
        ///Creates a new call builder for the [`requirementModule`] function.
        pub fn requirementModule(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, requirementModuleCall, N> {
            self.call_builder(&requirementModuleCall {})
        }
        ///Creates a new call builder for the [`transferOwnership`] function.
        pub fn transferOwnership(
            &self,
            newOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferOwnershipCall, N> {
            self.call_builder(&transferOwnershipCall { newOwner })
        }
        ///Creates a new call builder for the [`updateRequirementModule`] function.
        pub fn updateRequirementModule(
            &self,
            _newModule: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, updateRequirementModuleCall, N> {
            self.call_builder(
                &updateRequirementModuleCall {
                    _newModule,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MetabasedSequencerChainInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`OwnershipTransferred`] event.
        pub fn OwnershipTransferred_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, OwnershipTransferred, N> {
            self.event_filter::<OwnershipTransferred>()
        }
        ///Creates a new event filter for the [`RequirementModuleUpdated`] event.
        pub fn RequirementModuleUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RequirementModuleUpdated, N> {
            self.event_filter::<RequirementModuleUpdated>()
        }
        ///Creates a new event filter for the [`TransactionProcessed`] event.
        pub fn TransactionProcessed_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, TransactionProcessed, N> {
            self.event_filter::<TransactionProcessed>()
        }
    }
}
