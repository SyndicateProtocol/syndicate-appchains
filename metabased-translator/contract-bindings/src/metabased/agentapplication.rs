/**

Generated by the following Solidity interface...
```solidity
interface AgentApplication {
    type ApplicationStatus is uint8;

    error AgentAlreadyApplied();
    error ApplicantNotFound();
    error InvalidAddress();
    error OwnableInvalidOwner(address owner);
    error OwnableUnauthorizedAccount(address account);

    event AgentClaimNFTAddressUpdated(address indexed oldAddress, address indexed newAddress);
    event AgentClaimNFTOwnerUpdated(address indexed oldOwner, address indexed newOwner);
    event ApplicantAdded(uint256 indexed applicantId, address indexed agentAddress, bytes additionalData, ApplicationStatus status);
    event ApplicantStatusUpdated(uint256 indexed applicantId, ApplicationStatus status);
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor(address admin, address _sequencerChain, address _agentClaimNFTOwner, address _agentClaimNFTAddress);

    function agentClaimNFTAddress() external view returns (address);
    function agentClaimNFTOwner() external view returns (address);
    function agentToApplicantId(address) external view returns (uint256);
    function applicantCount() external view returns (uint256);
    function applicants(uint256) external view returns (address agentAddress, ApplicationStatus status, bool isValid, bytes memory additionalData);
    function approveApplicant(address agentAddress, bytes memory additionalData) external returns (uint256 applicantId);
    function denyApplicant(uint256 applicantId) external;
    function getApplicant(uint256 applicantId) external view returns (address agentAddress, ApplicationStatus status, bytes memory additionalData);
    function isPermittedByAddress(address agentAddress) external view returns (bool);
    function isPermittedById(uint256 applicantId) external view returns (bool);
    function owner() external view returns (address);
    function renounceOwnership() external;
    function sequencerChain() external view returns (address);
    function setAgentClaimNFTAddress(address newAddress) external;
    function setAgentClaimNFTOwner(address newOwner) external;
    function transferOwnership(address newOwner) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "admin",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_sequencerChain",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_agentClaimNFTOwner",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_agentClaimNFTAddress",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "agentClaimNFTAddress",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "agentClaimNFTOwner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "agentToApplicantId",
    "inputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "applicantCount",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "applicants",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "agentAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "status",
        "type": "uint8",
        "internalType": "enum AgentApplication.ApplicationStatus"
      },
      {
        "name": "isValid",
        "type": "bool",
        "internalType": "bool"
      },
      {
        "name": "additionalData",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "approveApplicant",
    "inputs": [
      {
        "name": "agentAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "additionalData",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "applicantId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "denyApplicant",
    "inputs": [
      {
        "name": "applicantId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "getApplicant",
    "inputs": [
      {
        "name": "applicantId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "agentAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "status",
        "type": "uint8",
        "internalType": "enum AgentApplication.ApplicationStatus"
      },
      {
        "name": "additionalData",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isPermittedByAddress",
    "inputs": [
      {
        "name": "agentAddress",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isPermittedById",
    "inputs": [
      {
        "name": "applicantId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "renounceOwnership",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "sequencerChain",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract IMetabasedSequencerChain"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "setAgentClaimNFTAddress",
    "inputs": [
      {
        "name": "newAddress",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setAgentClaimNFTOwner",
    "inputs": [
      {
        "name": "newOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "transferOwnership",
    "inputs": [
      {
        "name": "newOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "AgentClaimNFTAddressUpdated",
    "inputs": [
      {
        "name": "oldAddress",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newAddress",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "AgentClaimNFTOwnerUpdated",
    "inputs": [
      {
        "name": "oldOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "ApplicantAdded",
    "inputs": [
      {
        "name": "applicantId",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      },
      {
        "name": "agentAddress",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "additionalData",
        "type": "bytes",
        "indexed": false,
        "internalType": "bytes"
      },
      {
        "name": "status",
        "type": "uint8",
        "indexed": false,
        "internalType": "enum AgentApplication.ApplicationStatus"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "ApplicantStatusUpdated",
    "inputs": [
      {
        "name": "applicantId",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      },
      {
        "name": "status",
        "type": "uint8",
        "indexed": false,
        "internalType": "enum AgentApplication.ApplicationStatus"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "OwnershipTransferred",
    "inputs": [
      {
        "name": "previousOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AgentAlreadyApplied",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ApplicantNotFound",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidAddress",
    "inputs": []
  },
  {
    "type": "error",
    "name": "OwnableInvalidOwner",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "OwnableUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ]
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod AgentApplication {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60a060405234801561000f575f80fd5b5060405161104438038061104483398101604081905261002e91610154565b836001600160a01b03811661005c57604051631e4fbdf760e01b81525f600482015260240160405180910390fd5b610065816100ea565b506001600160a01b038316158061008357506001600160a01b038216155b8061009557506001600160a01b038116155b156100b35760405163e6c4247b60e01b815260040160405180910390fd5b6001600160a01b03928316608052600480549284166001600160a01b031993841617905560058054919093169116179055506101a5565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b038116811461014f575f80fd5b919050565b5f805f8060808587031215610167575f80fd5b61017085610139565b935061017e60208601610139565b925061018c60408601610139565b915061019a60608601610139565b905092959194509250565b608051610e806101c45f395f818161023801526104be0152610e805ff3fe608060405234801561000f575f80fd5b50600436106100fb575f3560e01c8063715018a611610093578063dc48e31111610063578063dc48e31114610220578063dd01c0eb14610233578063eea3f82d1461025a578063f2fde38b1461027c575f80fd5b8063715018a6146101ce5780638da5cb5b146101d65780638eb360c6146101fa5780639e5495151461020d575f80fd5b80635cd34134116100ce5780635cd34134146101705780635de2b07b1461018557806363de5323146101985780636bf5164c146101bb575f80fd5b806304f622fd146100ff57806305db37201461012557806318f53993146101445780633e141b031461014d575b5f80fd5b61011261010d366004610a9f565b61028f565b6040519081526020015b60405180910390f35b610112610133366004610b1b565b60026020525f908152604090205481565b61011260035481565b61016061015b366004610b34565b610529565b604051901515815260200161011c565b61018361017e366004610b1b565b610571565b005b610183610193366004610b1b565b6105f1565b6101ab6101a6366004610b34565b610671565b60405161011c9493929190610bad565b6101836101c9366004610b34565b610735565b6101836107c3565b5f546001600160a01b03165b6040516001600160a01b03909116815260200161011c565b6005546101e2906001600160a01b031681565b61016061021b366004610b1b565b6107d6565b6004546101e2906001600160a01b031681565b6101e27f000000000000000000000000000000000000000000000000000000000000000081565b61026d610268366004610b34565b61084e565b60405161011c93929190610bed565b61018361028a366004610b1b565b61093f565b5f610298610981565b6001600160a01b0384166102bf5760405163e6c4247b60e01b815260040160405180910390fd5b6001600160a01b0384165f908152600260205260409020548015158061031957505f805260016020527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49546001600160a01b038681169116145b156103375760405163fc753e5d60e01b815260040160405180910390fd5b60038054905f61034683610c24565b9091555060408051608081019091526001600160a01b0387168152909250602081016001815260200160011515815260200185858080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920182905250939094525050848152600160209081526040909120835181546001600160a01b039091166001600160a01b031982168117835592850151919350909183916001600160a81b03191617600160a01b83600281111561040957610409610b4b565b021790555060408201518154901515600160a81b0260ff60a81b199091161781556060820151600182019061043e9082610ce0565b5050506001600160a01b0385165f81815260026020526040908190208490555183907fae9fc2eaaecf404f3186e1350f438d792bbdccb8db862321d1d9bf605fee9b6b906104929088908890600190610da0565b60405180910390a35f6104a4866109ad565b6040516346e2cc0960e01b81529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906346e2cc09906104f3908490600401610dd6565b5f604051808303815f87803b15801561050a575f80fd5b505af115801561051c573d5f803e3d5ffd5b5050505050509392505050565b5f8181526001602052604081208054600160a81b900460ff16801561056a575060018154600160a01b900460ff16600281111561056857610568610b4b565b145b9392505050565b610579610981565b6001600160a01b0381166105a05760405163e6c4247b60e01b815260040160405180910390fd5b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f4a5b936ea227490546fabb10a05d570461ed79990d4b018a878658cf2a1a577a905f90a35050565b6105f9610981565b6001600160a01b0381166106205760405163e6c4247b60e01b815260040160405180910390fd5b600480546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f96bbc370b606dc0d01b0c9f1fcae2984d5cf45508cdc5078fe19715ece2ced5b905f90a35050565b600160208190525f9182526040909120805491810180546001600160a01b0384169360ff600160a01b8204811694600160a81b909204169290916106b490610c5c565b80601f01602080910402602001604051908101604052809291908181526020018280546106e090610c5c565b801561072b5780601f106107025761010080835404028352916020019161072b565b820191905f5260205f20905b81548152906001019060200180831161070e57829003601f168201915b5050505050905084565b61073d610981565b5f8181526001602052604090208054600160a81b900460ff1661077357604051633d560c9160e11b815260040160405180910390fd5b805460ff60a01b1916600160a11b17815560405182907fc3f8265654a25915479f105bb8f31bd2ed7f77dfbbdffe534048f9287192cb41906107b790600290610de8565b60405180910390a25050565b6107cb610981565b6107d45f610a35565b565b5f6001600160a01b0382166107ec57505f919050565b6001600160a01b0382165f9081526002602090815260408083205480845260019092529091208054600160a81b900460ff168015610846575060018154600160a01b900460ff16600281111561084457610844610b4b565b145b949350505050565b5f81815260016020526040812080548291606091600160a81b900460ff1661088957604051633d560c9160e11b815260040160405180910390fd5b80546001820180546001600160a01b03831692600160a01b900460ff16919081906108b390610c5c565b80601f01602080910402602001604051908101604052809291908181526020018280546108df90610c5c565b801561092a5780601f106109015761010080835404028352916020019161092a565b820191905f5260205f20905b81548152906001019060200180831161090d57829003601f168201915b50505050509050935093509350509193909250565b610947610981565b6001600160a01b03811661097557604051631e4fbdf760e01b81525f60048201526024015b60405180910390fd5b61097e81610a35565b50565b5f546001600160a01b031633146107d45760405163118cdaa760e01b815233600482015260240161096c565b6040516001600160a01b03821660248201526060905f9060440160408051601f19818403018152918152602080830180516001600160e01b0316635765105560e01b17905260045460055484519351949550610a1e946001600160a01b039283169491909216925f92879101610dfc565b604051602081830303815290604052915050919050565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b0381168114610a9a575f80fd5b919050565b5f805f60408486031215610ab1575f80fd5b610aba84610a84565b9250602084013567ffffffffffffffff80821115610ad6575f80fd5b818601915086601f830112610ae9575f80fd5b813581811115610af7575f80fd5b876020828501011115610b08575f80fd5b6020830194508093505050509250925092565b5f60208284031215610b2b575f80fd5b61056a82610a84565b5f60208284031215610b44575f80fd5b5035919050565b634e487b7160e01b5f52602160045260245ffd5b60038110610b7b57634e487b7160e01b5f52602160045260245ffd5b9052565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b6001600160a01b0385168152610bc66020820185610b5f565b8215156040820152608060608201525f610be36080830184610b7f565b9695505050505050565b6001600160a01b0384168152610c066020820184610b5f565b606060408201525f610c1b6060830184610b7f565b95945050505050565b5f60018201610c4157634e487b7160e01b5f52601160045260245ffd5b5060010190565b634e487b7160e01b5f52604160045260245ffd5b600181811c90821680610c7057607f821691505b602082108103610c8e57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f821115610cdb57805f5260205f20601f840160051c81016020851015610cb95750805b601f840160051c820191505b81811015610cd8575f8155600101610cc5565b50505b505050565b815167ffffffffffffffff811115610cfa57610cfa610c48565b610d0e81610d088454610c5c565b84610c94565b602080601f831160018114610d41575f8415610d2a5750858301515b5f19600386901b1c1916600185901b178555610d98565b5f85815260208120601f198616915b82811015610d6f57888601518255948401946001909101908401610d50565b5085821015610d8c57878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b60408152826040820152828460608301375f606084830101525f6060601f19601f86011683010190506108466020830184610b5f565b602081525f61056a6020830184610b7f565b60208101610df68284610b5f565b92915050565b5f6bffffffffffffffffffffffff19808860601b168352808760601b1660148401525084602883015283604883015282518060208501606885015e5f9201606801918252509594505050505056fea26469706673582212207b79b4db6f58e3b8eb698227c8a0f6d111ad9a5982beced74e1190ac2135cd8164736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xA0`@R4\x80\x15a\0\x0FW_\x80\xFD[P`@Qa\x10D8\x03\x80a\x10D\x839\x81\x01`@\x81\x90Ra\0.\x91a\x01TV[\x83`\x01`\x01`\xA0\x1B\x03\x81\x16a\0\\W`@Qc\x1EO\xBD\xF7`\xE0\x1B\x81R_`\x04\x82\x01R`$\x01`@Q\x80\x91\x03\x90\xFD[a\0e\x81a\0\xEAV[P`\x01`\x01`\xA0\x1B\x03\x83\x16\x15\x80a\0\x83WP`\x01`\x01`\xA0\x1B\x03\x82\x16\x15[\x80a\0\x95WP`\x01`\x01`\xA0\x1B\x03\x81\x16\x15[\x15a\0\xB3W`@Qc\xE6\xC4${`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x01`\x01`\xA0\x1B\x03\x92\x83\x16`\x80R`\x04\x80T\x92\x84\x16`\x01`\x01`\xA0\x1B\x03\x19\x93\x84\x16\x17\x90U`\x05\x80T\x91\x90\x93\x16\x91\x16\x17\x90UPa\x01\xA5V[_\x80T`\x01`\x01`\xA0\x1B\x03\x83\x81\x16`\x01`\x01`\xA0\x1B\x03\x19\x83\x16\x81\x17\x84U`@Q\x91\x90\x92\x16\x92\x83\x91\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x91\x90\xA3PPV[\x80Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x01OW_\x80\xFD[\x91\x90PV[_\x80_\x80`\x80\x85\x87\x03\x12\x15a\x01gW_\x80\xFD[a\x01p\x85a\x019V[\x93Pa\x01~` \x86\x01a\x019V[\x92Pa\x01\x8C`@\x86\x01a\x019V[\x91Pa\x01\x9A``\x86\x01a\x019V[\x90P\x92\x95\x91\x94P\x92PV[`\x80Qa\x0E\x80a\x01\xC4_9_\x81\x81a\x028\x01Ra\x04\xBE\x01Ra\x0E\x80_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\0\xFBW_5`\xE0\x1C\x80cqP\x18\xA6\x11a\0\x93W\x80c\xDCH\xE3\x11\x11a\0cW\x80c\xDCH\xE3\x11\x14a\x02 W\x80c\xDD\x01\xC0\xEB\x14a\x023W\x80c\xEE\xA3\xF8-\x14a\x02ZW\x80c\xF2\xFD\xE3\x8B\x14a\x02|W_\x80\xFD[\x80cqP\x18\xA6\x14a\x01\xCEW\x80c\x8D\xA5\xCB[\x14a\x01\xD6W\x80c\x8E\xB3`\xC6\x14a\x01\xFAW\x80c\x9ET\x95\x15\x14a\x02\rW_\x80\xFD[\x80c\\\xD3A4\x11a\0\xCEW\x80c\\\xD3A4\x14a\x01pW\x80c]\xE2\xB0{\x14a\x01\x85W\x80cc\xDES#\x14a\x01\x98W\x80ck\xF5\x16L\x14a\x01\xBBW_\x80\xFD[\x80c\x04\xF6\"\xFD\x14a\0\xFFW\x80c\x05\xDB7 \x14a\x01%W\x80c\x18\xF59\x93\x14a\x01DW\x80c>\x14\x1B\x03\x14a\x01MW[_\x80\xFD[a\x01\x12a\x01\r6`\x04a\n\x9FV[a\x02\x8FV[`@Q\x90\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\x01\x12a\x0136`\x04a\x0B\x1BV[`\x02` R_\x90\x81R`@\x90 T\x81V[a\x01\x12`\x03T\x81V[a\x01`a\x01[6`\x04a\x0B4V[a\x05)V[`@Q\x90\x15\x15\x81R` \x01a\x01\x1CV[a\x01\x83a\x01~6`\x04a\x0B\x1BV[a\x05qV[\0[a\x01\x83a\x01\x936`\x04a\x0B\x1BV[a\x05\xF1V[a\x01\xABa\x01\xA66`\x04a\x0B4V[a\x06qV[`@Qa\x01\x1C\x94\x93\x92\x91\x90a\x0B\xADV[a\x01\x83a\x01\xC96`\x04a\x0B4V[a\x075V[a\x01\x83a\x07\xC3V[_T`\x01`\x01`\xA0\x1B\x03\x16[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01a\x01\x1CV[`\x05Ta\x01\xE2\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[a\x01`a\x02\x1B6`\x04a\x0B\x1BV[a\x07\xD6V[`\x04Ta\x01\xE2\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[a\x01\xE2\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81V[a\x02ma\x02h6`\x04a\x0B4V[a\x08NV[`@Qa\x01\x1C\x93\x92\x91\x90a\x0B\xEDV[a\x01\x83a\x02\x8A6`\x04a\x0B\x1BV[a\t?V[_a\x02\x98a\t\x81V[`\x01`\x01`\xA0\x1B\x03\x84\x16a\x02\xBFW`@Qc\xE6\xC4${`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x01`\x01`\xA0\x1B\x03\x84\x16_\x90\x81R`\x02` R`@\x90 T\x80\x15\x15\x80a\x03\x19WP_\x80R`\x01` R\x7F\xA6\xEE\xF7\xE3Z\xBEp&r\x96A\x14\x7Fy\x15W<~\x97\xB4~\xFATo_n20&;\xCBIT`\x01`\x01`\xA0\x1B\x03\x86\x81\x16\x91\x16\x14[\x15a\x037W`@Qc\xFCu>]`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x03\x80T\x90_a\x03F\x83a\x0C$V[\x90\x91UP`@\x80Q`\x80\x81\x01\x90\x91R`\x01`\x01`\xA0\x1B\x03\x87\x16\x81R\x90\x92P` \x81\x01`\x01\x81R` \x01`\x01\x15\x15\x81R` \x01\x85\x85\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x82\x90RP\x93\x90\x94RPP\x84\x81R`\x01` \x90\x81R`@\x90\x91 \x83Q\x81T`\x01`\x01`\xA0\x1B\x03\x90\x91\x16`\x01`\x01`\xA0\x1B\x03\x19\x82\x16\x81\x17\x83U\x92\x85\x01Q\x91\x93P\x90\x91\x83\x91`\x01`\x01`\xA8\x1B\x03\x19\x16\x17`\x01`\xA0\x1B\x83`\x02\x81\x11\x15a\x04\tWa\x04\ta\x0BKV[\x02\x17\x90UP`@\x82\x01Q\x81T\x90\x15\x15`\x01`\xA8\x1B\x02`\xFF`\xA8\x1B\x19\x90\x91\x16\x17\x81U``\x82\x01Q`\x01\x82\x01\x90a\x04>\x90\x82a\x0C\xE0V[PPP`\x01`\x01`\xA0\x1B\x03\x85\x16_\x81\x81R`\x02` R`@\x90\x81\x90 \x84\x90UQ\x83\x90\x7F\xAE\x9F\xC2\xEA\xAE\xCF@O1\x86\xE15\x0FC\x8Dy+\xBD\xCC\xB8\xDB\x86#!\xD1\xD9\xBF`_\xEE\x9Bk\x90a\x04\x92\x90\x88\x90\x88\x90`\x01\x90a\r\xA0V[`@Q\x80\x91\x03\x90\xA3_a\x04\xA4\x86a\t\xADV[`@QcF\xE2\xCC\t`\xE0\x1B\x81R\x90\x91P`\x01`\x01`\xA0\x1B\x03\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x90cF\xE2\xCC\t\x90a\x04\xF3\x90\x84\x90`\x04\x01a\r\xD6V[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x05\nW_\x80\xFD[PZ\xF1\x15\x80\x15a\x05\x1CW=_\x80>=_\xFD[PPPPPP\x93\x92PPPV[_\x81\x81R`\x01` R`@\x81 \x80T`\x01`\xA8\x1B\x90\x04`\xFF\x16\x80\x15a\x05jWP`\x01\x81T`\x01`\xA0\x1B\x90\x04`\xFF\x16`\x02\x81\x11\x15a\x05hWa\x05ha\x0BKV[\x14[\x93\x92PPPV[a\x05ya\t\x81V[`\x01`\x01`\xA0\x1B\x03\x81\x16a\x05\xA0W`@Qc\xE6\xC4${`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x05\x80T`\x01`\x01`\xA0\x1B\x03\x83\x81\x16`\x01`\x01`\xA0\x1B\x03\x19\x83\x16\x81\x17\x90\x93U`@Q\x91\x16\x91\x90\x82\x90\x7FJ[\x93n\xA2'I\x05F\xFA\xBB\x10\xA0]W\x04a\xEDy\x99\rK\x01\x8A\x87\x86X\xCF*\x1AWz\x90_\x90\xA3PPV[a\x05\xF9a\t\x81V[`\x01`\x01`\xA0\x1B\x03\x81\x16a\x06 W`@Qc\xE6\xC4${`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x04\x80T`\x01`\x01`\xA0\x1B\x03\x83\x81\x16`\x01`\x01`\xA0\x1B\x03\x19\x83\x16\x81\x17\x90\x93U`@Q\x91\x16\x91\x90\x82\x90\x7F\x96\xBB\xC3p\xB6\x06\xDC\r\x01\xB0\xC9\xF1\xFC\xAE)\x84\xD5\xCFEP\x8C\xDCPx\xFE\x19q^\xCE,\xED[\x90_\x90\xA3PPV[`\x01` \x81\x90R_\x91\x82R`@\x90\x91 \x80T\x91\x81\x01\x80T`\x01`\x01`\xA0\x1B\x03\x84\x16\x93`\xFF`\x01`\xA0\x1B\x82\x04\x81\x16\x94`\x01`\xA8\x1B\x90\x92\x04\x16\x92\x90\x91a\x06\xB4\x90a\x0C\\V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x06\xE0\x90a\x0C\\V[\x80\x15a\x07+W\x80`\x1F\x10a\x07\x02Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x07+V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x07\x0EW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x90P\x84V[a\x07=a\t\x81V[_\x81\x81R`\x01` R`@\x90 \x80T`\x01`\xA8\x1B\x90\x04`\xFF\x16a\x07sW`@Qc=V\x0C\x91`\xE1\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x80T`\xFF`\xA0\x1B\x19\x16`\x01`\xA1\x1B\x17\x81U`@Q\x82\x90\x7F\xC3\xF8&VT\xA2Y\x15G\x9F\x10[\xB8\xF3\x1B\xD2\xED\x7Fw\xDF\xBB\xDF\xFES@H\xF9(q\x92\xCBA\x90a\x07\xB7\x90`\x02\x90a\r\xE8V[`@Q\x80\x91\x03\x90\xA2PPV[a\x07\xCBa\t\x81V[a\x07\xD4_a\n5V[V[_`\x01`\x01`\xA0\x1B\x03\x82\x16a\x07\xECWP_\x91\x90PV[`\x01`\x01`\xA0\x1B\x03\x82\x16_\x90\x81R`\x02` \x90\x81R`@\x80\x83 T\x80\x84R`\x01\x90\x92R\x90\x91 \x80T`\x01`\xA8\x1B\x90\x04`\xFF\x16\x80\x15a\x08FWP`\x01\x81T`\x01`\xA0\x1B\x90\x04`\xFF\x16`\x02\x81\x11\x15a\x08DWa\x08Da\x0BKV[\x14[\x94\x93PPPPV[_\x81\x81R`\x01` R`@\x81 \x80T\x82\x91``\x91`\x01`\xA8\x1B\x90\x04`\xFF\x16a\x08\x89W`@Qc=V\x0C\x91`\xE1\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x80T`\x01\x82\x01\x80T`\x01`\x01`\xA0\x1B\x03\x83\x16\x92`\x01`\xA0\x1B\x90\x04`\xFF\x16\x91\x90\x81\x90a\x08\xB3\x90a\x0C\\V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x08\xDF\x90a\x0C\\V[\x80\x15a\t*W\x80`\x1F\x10a\t\x01Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\t*V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\t\rW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x90P\x93P\x93P\x93PP\x91\x93\x90\x92PV[a\tGa\t\x81V[`\x01`\x01`\xA0\x1B\x03\x81\x16a\tuW`@Qc\x1EO\xBD\xF7`\xE0\x1B\x81R_`\x04\x82\x01R`$\x01[`@Q\x80\x91\x03\x90\xFD[a\t~\x81a\n5V[PV[_T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x07\xD4W`@Qc\x11\x8C\xDA\xA7`\xE0\x1B\x81R3`\x04\x82\x01R`$\x01a\tlV[`@Q`\x01`\x01`\xA0\x1B\x03\x82\x16`$\x82\x01R``\x90_\x90`D\x01`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x81R` \x80\x83\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16cWe\x10U`\xE0\x1B\x17\x90R`\x04T`\x05T\x84Q\x93Q\x94\x95Pa\n\x1E\x94`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x94\x91\x90\x92\x16\x92_\x92\x87\x91\x01a\r\xFCV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x91PP\x91\x90PV[_\x80T`\x01`\x01`\xA0\x1B\x03\x83\x81\x16`\x01`\x01`\xA0\x1B\x03\x19\x83\x16\x81\x17\x84U`@Q\x91\x90\x92\x16\x92\x83\x91\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x91\x90\xA3PPV[\x805`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\n\x9AW_\x80\xFD[\x91\x90PV[_\x80_`@\x84\x86\x03\x12\x15a\n\xB1W_\x80\xFD[a\n\xBA\x84a\n\x84V[\x92P` \x84\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\n\xD6W_\x80\xFD[\x81\x86\x01\x91P\x86`\x1F\x83\x01\x12a\n\xE9W_\x80\xFD[\x815\x81\x81\x11\x15a\n\xF7W_\x80\xFD[\x87` \x82\x85\x01\x01\x11\x15a\x0B\x08W_\x80\xFD[` \x83\x01\x94P\x80\x93PPPP\x92P\x92P\x92V[_` \x82\x84\x03\x12\x15a\x0B+W_\x80\xFD[a\x05j\x82a\n\x84V[_` \x82\x84\x03\x12\x15a\x0BDW_\x80\xFD[P5\x91\x90PV[cNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[`\x03\x81\x10a\x0B{WcNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[\x90RV[_\x81Q\x80\x84R\x80` \x84\x01` \x86\x01^_` \x82\x86\x01\x01R` `\x1F\x19`\x1F\x83\x01\x16\x85\x01\x01\x91PP\x92\x91PPV[`\x01`\x01`\xA0\x1B\x03\x85\x16\x81Ra\x0B\xC6` \x82\x01\x85a\x0B_V[\x82\x15\x15`@\x82\x01R`\x80``\x82\x01R_a\x0B\xE3`\x80\x83\x01\x84a\x0B\x7FV[\x96\x95PPPPPPV[`\x01`\x01`\xA0\x1B\x03\x84\x16\x81Ra\x0C\x06` \x82\x01\x84a\x0B_V[```@\x82\x01R_a\x0C\x1B``\x83\x01\x84a\x0B\x7FV[\x95\x94PPPPPV[_`\x01\x82\x01a\x0CAWcNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[P`\x01\x01\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`\x01\x81\x81\x1C\x90\x82\x16\x80a\x0CpW`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a\x0C\x8EWcNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[P\x91\x90PV[`\x1F\x82\x11\x15a\x0C\xDBW\x80_R` _ `\x1F\x84\x01`\x05\x1C\x81\x01` \x85\x10\x15a\x0C\xB9WP\x80[`\x1F\x84\x01`\x05\x1C\x82\x01\x91P[\x81\x81\x10\x15a\x0C\xD8W_\x81U`\x01\x01a\x0C\xC5V[PP[PPPV[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0C\xFAWa\x0C\xFAa\x0CHV[a\r\x0E\x81a\r\x08\x84Ta\x0C\\V[\x84a\x0C\x94V[` \x80`\x1F\x83\x11`\x01\x81\x14a\rAW_\x84\x15a\r*WP\x85\x83\x01Q[_\x19`\x03\x86\x90\x1B\x1C\x19\x16`\x01\x85\x90\x1B\x17\x85Ua\r\x98V[_\x85\x81R` \x81 `\x1F\x19\x86\x16\x91[\x82\x81\x10\x15a\roW\x88\x86\x01Q\x82U\x94\x84\x01\x94`\x01\x90\x91\x01\x90\x84\x01a\rPV[P\x85\x82\x10\x15a\r\x8CW\x87\x85\x01Q_\x19`\x03\x88\x90\x1B`\xF8\x16\x1C\x19\x16\x81U[PP`\x01\x84`\x01\x1B\x01\x85U[PPPPPPV[`@\x81R\x82`@\x82\x01R\x82\x84``\x83\x017_``\x84\x83\x01\x01R_```\x1F\x19`\x1F\x86\x01\x16\x83\x01\x01\x90Pa\x08F` \x83\x01\x84a\x0B_V[` \x81R_a\x05j` \x83\x01\x84a\x0B\x7FV[` \x81\x01a\r\xF6\x82\x84a\x0B_V[\x92\x91PPV[_k\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x80\x88``\x1B\x16\x83R\x80\x87``\x1B\x16`\x14\x84\x01RP\x84`(\x83\x01R\x83`H\x83\x01R\x82Q\x80` \x85\x01`h\x85\x01^_\x92\x01`h\x01\x91\x82RP\x95\x94PPPPPV\xFE\xA2dipfsX\"\x12 {y\xB4\xDBoX\xE3\xB8\xEBi\x82'\xC8\xA0\xF6\xD1\x11\xAD\x9AY\x82\xBE\xCE\xD7N\x11\x90\xAC!5\xCD\x81dsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f80fd5b50600436106100fb575f3560e01c8063715018a611610093578063dc48e31111610063578063dc48e31114610220578063dd01c0eb14610233578063eea3f82d1461025a578063f2fde38b1461027c575f80fd5b8063715018a6146101ce5780638da5cb5b146101d65780638eb360c6146101fa5780639e5495151461020d575f80fd5b80635cd34134116100ce5780635cd34134146101705780635de2b07b1461018557806363de5323146101985780636bf5164c146101bb575f80fd5b806304f622fd146100ff57806305db37201461012557806318f53993146101445780633e141b031461014d575b5f80fd5b61011261010d366004610a9f565b61028f565b6040519081526020015b60405180910390f35b610112610133366004610b1b565b60026020525f908152604090205481565b61011260035481565b61016061015b366004610b34565b610529565b604051901515815260200161011c565b61018361017e366004610b1b565b610571565b005b610183610193366004610b1b565b6105f1565b6101ab6101a6366004610b34565b610671565b60405161011c9493929190610bad565b6101836101c9366004610b34565b610735565b6101836107c3565b5f546001600160a01b03165b6040516001600160a01b03909116815260200161011c565b6005546101e2906001600160a01b031681565b61016061021b366004610b1b565b6107d6565b6004546101e2906001600160a01b031681565b6101e27f000000000000000000000000000000000000000000000000000000000000000081565b61026d610268366004610b34565b61084e565b60405161011c93929190610bed565b61018361028a366004610b1b565b61093f565b5f610298610981565b6001600160a01b0384166102bf5760405163e6c4247b60e01b815260040160405180910390fd5b6001600160a01b0384165f908152600260205260409020548015158061031957505f805260016020527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49546001600160a01b038681169116145b156103375760405163fc753e5d60e01b815260040160405180910390fd5b60038054905f61034683610c24565b9091555060408051608081019091526001600160a01b0387168152909250602081016001815260200160011515815260200185858080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920182905250939094525050848152600160209081526040909120835181546001600160a01b039091166001600160a01b031982168117835592850151919350909183916001600160a81b03191617600160a01b83600281111561040957610409610b4b565b021790555060408201518154901515600160a81b0260ff60a81b199091161781556060820151600182019061043e9082610ce0565b5050506001600160a01b0385165f81815260026020526040908190208490555183907fae9fc2eaaecf404f3186e1350f438d792bbdccb8db862321d1d9bf605fee9b6b906104929088908890600190610da0565b60405180910390a35f6104a4866109ad565b6040516346e2cc0960e01b81529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906346e2cc09906104f3908490600401610dd6565b5f604051808303815f87803b15801561050a575f80fd5b505af115801561051c573d5f803e3d5ffd5b5050505050509392505050565b5f8181526001602052604081208054600160a81b900460ff16801561056a575060018154600160a01b900460ff16600281111561056857610568610b4b565b145b9392505050565b610579610981565b6001600160a01b0381166105a05760405163e6c4247b60e01b815260040160405180910390fd5b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f4a5b936ea227490546fabb10a05d570461ed79990d4b018a878658cf2a1a577a905f90a35050565b6105f9610981565b6001600160a01b0381166106205760405163e6c4247b60e01b815260040160405180910390fd5b600480546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f96bbc370b606dc0d01b0c9f1fcae2984d5cf45508cdc5078fe19715ece2ced5b905f90a35050565b600160208190525f9182526040909120805491810180546001600160a01b0384169360ff600160a01b8204811694600160a81b909204169290916106b490610c5c565b80601f01602080910402602001604051908101604052809291908181526020018280546106e090610c5c565b801561072b5780601f106107025761010080835404028352916020019161072b565b820191905f5260205f20905b81548152906001019060200180831161070e57829003601f168201915b5050505050905084565b61073d610981565b5f8181526001602052604090208054600160a81b900460ff1661077357604051633d560c9160e11b815260040160405180910390fd5b805460ff60a01b1916600160a11b17815560405182907fc3f8265654a25915479f105bb8f31bd2ed7f77dfbbdffe534048f9287192cb41906107b790600290610de8565b60405180910390a25050565b6107cb610981565b6107d45f610a35565b565b5f6001600160a01b0382166107ec57505f919050565b6001600160a01b0382165f9081526002602090815260408083205480845260019092529091208054600160a81b900460ff168015610846575060018154600160a01b900460ff16600281111561084457610844610b4b565b145b949350505050565b5f81815260016020526040812080548291606091600160a81b900460ff1661088957604051633d560c9160e11b815260040160405180910390fd5b80546001820180546001600160a01b03831692600160a01b900460ff16919081906108b390610c5c565b80601f01602080910402602001604051908101604052809291908181526020018280546108df90610c5c565b801561092a5780601f106109015761010080835404028352916020019161092a565b820191905f5260205f20905b81548152906001019060200180831161090d57829003601f168201915b50505050509050935093509350509193909250565b610947610981565b6001600160a01b03811661097557604051631e4fbdf760e01b81525f60048201526024015b60405180910390fd5b61097e81610a35565b50565b5f546001600160a01b031633146107d45760405163118cdaa760e01b815233600482015260240161096c565b6040516001600160a01b03821660248201526060905f9060440160408051601f19818403018152918152602080830180516001600160e01b0316635765105560e01b17905260045460055484519351949550610a1e946001600160a01b039283169491909216925f92879101610dfc565b604051602081830303815290604052915050919050565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b0381168114610a9a575f80fd5b919050565b5f805f60408486031215610ab1575f80fd5b610aba84610a84565b9250602084013567ffffffffffffffff80821115610ad6575f80fd5b818601915086601f830112610ae9575f80fd5b813581811115610af7575f80fd5b876020828501011115610b08575f80fd5b6020830194508093505050509250925092565b5f60208284031215610b2b575f80fd5b61056a82610a84565b5f60208284031215610b44575f80fd5b5035919050565b634e487b7160e01b5f52602160045260245ffd5b60038110610b7b57634e487b7160e01b5f52602160045260245ffd5b9052565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b6001600160a01b0385168152610bc66020820185610b5f565b8215156040820152608060608201525f610be36080830184610b7f565b9695505050505050565b6001600160a01b0384168152610c066020820184610b5f565b606060408201525f610c1b6060830184610b7f565b95945050505050565b5f60018201610c4157634e487b7160e01b5f52601160045260245ffd5b5060010190565b634e487b7160e01b5f52604160045260245ffd5b600181811c90821680610c7057607f821691505b602082108103610c8e57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f821115610cdb57805f5260205f20601f840160051c81016020851015610cb95750805b601f840160051c820191505b81811015610cd8575f8155600101610cc5565b50505b505050565b815167ffffffffffffffff811115610cfa57610cfa610c48565b610d0e81610d088454610c5c565b84610c94565b602080601f831160018114610d41575f8415610d2a5750858301515b5f19600386901b1c1916600185901b178555610d98565b5f85815260208120601f198616915b82811015610d6f57888601518255948401946001909101908401610d50565b5085821015610d8c57878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b60408152826040820152828460608301375f606084830101525f6060601f19601f86011683010190506108466020830184610b5f565b602081525f61056a6020830184610b7f565b60208101610df68284610b5f565b92915050565b5f6bffffffffffffffffffffffff19808860601b168352808760601b1660148401525084602883015283604883015282518060208501606885015e5f9201606801918252509594505050505056fea26469706673582212207b79b4db6f58e3b8eb698227c8a0f6d111ad9a5982beced74e1190ac2135cd8164736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\0\xFBW_5`\xE0\x1C\x80cqP\x18\xA6\x11a\0\x93W\x80c\xDCH\xE3\x11\x11a\0cW\x80c\xDCH\xE3\x11\x14a\x02 W\x80c\xDD\x01\xC0\xEB\x14a\x023W\x80c\xEE\xA3\xF8-\x14a\x02ZW\x80c\xF2\xFD\xE3\x8B\x14a\x02|W_\x80\xFD[\x80cqP\x18\xA6\x14a\x01\xCEW\x80c\x8D\xA5\xCB[\x14a\x01\xD6W\x80c\x8E\xB3`\xC6\x14a\x01\xFAW\x80c\x9ET\x95\x15\x14a\x02\rW_\x80\xFD[\x80c\\\xD3A4\x11a\0\xCEW\x80c\\\xD3A4\x14a\x01pW\x80c]\xE2\xB0{\x14a\x01\x85W\x80cc\xDES#\x14a\x01\x98W\x80ck\xF5\x16L\x14a\x01\xBBW_\x80\xFD[\x80c\x04\xF6\"\xFD\x14a\0\xFFW\x80c\x05\xDB7 \x14a\x01%W\x80c\x18\xF59\x93\x14a\x01DW\x80c>\x14\x1B\x03\x14a\x01MW[_\x80\xFD[a\x01\x12a\x01\r6`\x04a\n\x9FV[a\x02\x8FV[`@Q\x90\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\x01\x12a\x0136`\x04a\x0B\x1BV[`\x02` R_\x90\x81R`@\x90 T\x81V[a\x01\x12`\x03T\x81V[a\x01`a\x01[6`\x04a\x0B4V[a\x05)V[`@Q\x90\x15\x15\x81R` \x01a\x01\x1CV[a\x01\x83a\x01~6`\x04a\x0B\x1BV[a\x05qV[\0[a\x01\x83a\x01\x936`\x04a\x0B\x1BV[a\x05\xF1V[a\x01\xABa\x01\xA66`\x04a\x0B4V[a\x06qV[`@Qa\x01\x1C\x94\x93\x92\x91\x90a\x0B\xADV[a\x01\x83a\x01\xC96`\x04a\x0B4V[a\x075V[a\x01\x83a\x07\xC3V[_T`\x01`\x01`\xA0\x1B\x03\x16[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01a\x01\x1CV[`\x05Ta\x01\xE2\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[a\x01`a\x02\x1B6`\x04a\x0B\x1BV[a\x07\xD6V[`\x04Ta\x01\xE2\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[a\x01\xE2\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81V[a\x02ma\x02h6`\x04a\x0B4V[a\x08NV[`@Qa\x01\x1C\x93\x92\x91\x90a\x0B\xEDV[a\x01\x83a\x02\x8A6`\x04a\x0B\x1BV[a\t?V[_a\x02\x98a\t\x81V[`\x01`\x01`\xA0\x1B\x03\x84\x16a\x02\xBFW`@Qc\xE6\xC4${`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x01`\x01`\xA0\x1B\x03\x84\x16_\x90\x81R`\x02` R`@\x90 T\x80\x15\x15\x80a\x03\x19WP_\x80R`\x01` R\x7F\xA6\xEE\xF7\xE3Z\xBEp&r\x96A\x14\x7Fy\x15W<~\x97\xB4~\xFATo_n20&;\xCBIT`\x01`\x01`\xA0\x1B\x03\x86\x81\x16\x91\x16\x14[\x15a\x037W`@Qc\xFCu>]`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x03\x80T\x90_a\x03F\x83a\x0C$V[\x90\x91UP`@\x80Q`\x80\x81\x01\x90\x91R`\x01`\x01`\xA0\x1B\x03\x87\x16\x81R\x90\x92P` \x81\x01`\x01\x81R` \x01`\x01\x15\x15\x81R` \x01\x85\x85\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x82\x90RP\x93\x90\x94RPP\x84\x81R`\x01` \x90\x81R`@\x90\x91 \x83Q\x81T`\x01`\x01`\xA0\x1B\x03\x90\x91\x16`\x01`\x01`\xA0\x1B\x03\x19\x82\x16\x81\x17\x83U\x92\x85\x01Q\x91\x93P\x90\x91\x83\x91`\x01`\x01`\xA8\x1B\x03\x19\x16\x17`\x01`\xA0\x1B\x83`\x02\x81\x11\x15a\x04\tWa\x04\ta\x0BKV[\x02\x17\x90UP`@\x82\x01Q\x81T\x90\x15\x15`\x01`\xA8\x1B\x02`\xFF`\xA8\x1B\x19\x90\x91\x16\x17\x81U``\x82\x01Q`\x01\x82\x01\x90a\x04>\x90\x82a\x0C\xE0V[PPP`\x01`\x01`\xA0\x1B\x03\x85\x16_\x81\x81R`\x02` R`@\x90\x81\x90 \x84\x90UQ\x83\x90\x7F\xAE\x9F\xC2\xEA\xAE\xCF@O1\x86\xE15\x0FC\x8Dy+\xBD\xCC\xB8\xDB\x86#!\xD1\xD9\xBF`_\xEE\x9Bk\x90a\x04\x92\x90\x88\x90\x88\x90`\x01\x90a\r\xA0V[`@Q\x80\x91\x03\x90\xA3_a\x04\xA4\x86a\t\xADV[`@QcF\xE2\xCC\t`\xE0\x1B\x81R\x90\x91P`\x01`\x01`\xA0\x1B\x03\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x90cF\xE2\xCC\t\x90a\x04\xF3\x90\x84\x90`\x04\x01a\r\xD6V[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x05\nW_\x80\xFD[PZ\xF1\x15\x80\x15a\x05\x1CW=_\x80>=_\xFD[PPPPPP\x93\x92PPPV[_\x81\x81R`\x01` R`@\x81 \x80T`\x01`\xA8\x1B\x90\x04`\xFF\x16\x80\x15a\x05jWP`\x01\x81T`\x01`\xA0\x1B\x90\x04`\xFF\x16`\x02\x81\x11\x15a\x05hWa\x05ha\x0BKV[\x14[\x93\x92PPPV[a\x05ya\t\x81V[`\x01`\x01`\xA0\x1B\x03\x81\x16a\x05\xA0W`@Qc\xE6\xC4${`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x05\x80T`\x01`\x01`\xA0\x1B\x03\x83\x81\x16`\x01`\x01`\xA0\x1B\x03\x19\x83\x16\x81\x17\x90\x93U`@Q\x91\x16\x91\x90\x82\x90\x7FJ[\x93n\xA2'I\x05F\xFA\xBB\x10\xA0]W\x04a\xEDy\x99\rK\x01\x8A\x87\x86X\xCF*\x1AWz\x90_\x90\xA3PPV[a\x05\xF9a\t\x81V[`\x01`\x01`\xA0\x1B\x03\x81\x16a\x06 W`@Qc\xE6\xC4${`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x04\x80T`\x01`\x01`\xA0\x1B\x03\x83\x81\x16`\x01`\x01`\xA0\x1B\x03\x19\x83\x16\x81\x17\x90\x93U`@Q\x91\x16\x91\x90\x82\x90\x7F\x96\xBB\xC3p\xB6\x06\xDC\r\x01\xB0\xC9\xF1\xFC\xAE)\x84\xD5\xCFEP\x8C\xDCPx\xFE\x19q^\xCE,\xED[\x90_\x90\xA3PPV[`\x01` \x81\x90R_\x91\x82R`@\x90\x91 \x80T\x91\x81\x01\x80T`\x01`\x01`\xA0\x1B\x03\x84\x16\x93`\xFF`\x01`\xA0\x1B\x82\x04\x81\x16\x94`\x01`\xA8\x1B\x90\x92\x04\x16\x92\x90\x91a\x06\xB4\x90a\x0C\\V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x06\xE0\x90a\x0C\\V[\x80\x15a\x07+W\x80`\x1F\x10a\x07\x02Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x07+V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x07\x0EW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x90P\x84V[a\x07=a\t\x81V[_\x81\x81R`\x01` R`@\x90 \x80T`\x01`\xA8\x1B\x90\x04`\xFF\x16a\x07sW`@Qc=V\x0C\x91`\xE1\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x80T`\xFF`\xA0\x1B\x19\x16`\x01`\xA1\x1B\x17\x81U`@Q\x82\x90\x7F\xC3\xF8&VT\xA2Y\x15G\x9F\x10[\xB8\xF3\x1B\xD2\xED\x7Fw\xDF\xBB\xDF\xFES@H\xF9(q\x92\xCBA\x90a\x07\xB7\x90`\x02\x90a\r\xE8V[`@Q\x80\x91\x03\x90\xA2PPV[a\x07\xCBa\t\x81V[a\x07\xD4_a\n5V[V[_`\x01`\x01`\xA0\x1B\x03\x82\x16a\x07\xECWP_\x91\x90PV[`\x01`\x01`\xA0\x1B\x03\x82\x16_\x90\x81R`\x02` \x90\x81R`@\x80\x83 T\x80\x84R`\x01\x90\x92R\x90\x91 \x80T`\x01`\xA8\x1B\x90\x04`\xFF\x16\x80\x15a\x08FWP`\x01\x81T`\x01`\xA0\x1B\x90\x04`\xFF\x16`\x02\x81\x11\x15a\x08DWa\x08Da\x0BKV[\x14[\x94\x93PPPPV[_\x81\x81R`\x01` R`@\x81 \x80T\x82\x91``\x91`\x01`\xA8\x1B\x90\x04`\xFF\x16a\x08\x89W`@Qc=V\x0C\x91`\xE1\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x80T`\x01\x82\x01\x80T`\x01`\x01`\xA0\x1B\x03\x83\x16\x92`\x01`\xA0\x1B\x90\x04`\xFF\x16\x91\x90\x81\x90a\x08\xB3\x90a\x0C\\V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x08\xDF\x90a\x0C\\V[\x80\x15a\t*W\x80`\x1F\x10a\t\x01Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\t*V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\t\rW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x90P\x93P\x93P\x93PP\x91\x93\x90\x92PV[a\tGa\t\x81V[`\x01`\x01`\xA0\x1B\x03\x81\x16a\tuW`@Qc\x1EO\xBD\xF7`\xE0\x1B\x81R_`\x04\x82\x01R`$\x01[`@Q\x80\x91\x03\x90\xFD[a\t~\x81a\n5V[PV[_T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x07\xD4W`@Qc\x11\x8C\xDA\xA7`\xE0\x1B\x81R3`\x04\x82\x01R`$\x01a\tlV[`@Q`\x01`\x01`\xA0\x1B\x03\x82\x16`$\x82\x01R``\x90_\x90`D\x01`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x81R` \x80\x83\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16cWe\x10U`\xE0\x1B\x17\x90R`\x04T`\x05T\x84Q\x93Q\x94\x95Pa\n\x1E\x94`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x94\x91\x90\x92\x16\x92_\x92\x87\x91\x01a\r\xFCV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x91PP\x91\x90PV[_\x80T`\x01`\x01`\xA0\x1B\x03\x83\x81\x16`\x01`\x01`\xA0\x1B\x03\x19\x83\x16\x81\x17\x84U`@Q\x91\x90\x92\x16\x92\x83\x91\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x91\x90\xA3PPV[\x805`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\n\x9AW_\x80\xFD[\x91\x90PV[_\x80_`@\x84\x86\x03\x12\x15a\n\xB1W_\x80\xFD[a\n\xBA\x84a\n\x84V[\x92P` \x84\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\n\xD6W_\x80\xFD[\x81\x86\x01\x91P\x86`\x1F\x83\x01\x12a\n\xE9W_\x80\xFD[\x815\x81\x81\x11\x15a\n\xF7W_\x80\xFD[\x87` \x82\x85\x01\x01\x11\x15a\x0B\x08W_\x80\xFD[` \x83\x01\x94P\x80\x93PPPP\x92P\x92P\x92V[_` \x82\x84\x03\x12\x15a\x0B+W_\x80\xFD[a\x05j\x82a\n\x84V[_` \x82\x84\x03\x12\x15a\x0BDW_\x80\xFD[P5\x91\x90PV[cNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[`\x03\x81\x10a\x0B{WcNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[\x90RV[_\x81Q\x80\x84R\x80` \x84\x01` \x86\x01^_` \x82\x86\x01\x01R` `\x1F\x19`\x1F\x83\x01\x16\x85\x01\x01\x91PP\x92\x91PPV[`\x01`\x01`\xA0\x1B\x03\x85\x16\x81Ra\x0B\xC6` \x82\x01\x85a\x0B_V[\x82\x15\x15`@\x82\x01R`\x80``\x82\x01R_a\x0B\xE3`\x80\x83\x01\x84a\x0B\x7FV[\x96\x95PPPPPPV[`\x01`\x01`\xA0\x1B\x03\x84\x16\x81Ra\x0C\x06` \x82\x01\x84a\x0B_V[```@\x82\x01R_a\x0C\x1B``\x83\x01\x84a\x0B\x7FV[\x95\x94PPPPPV[_`\x01\x82\x01a\x0CAWcNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[P`\x01\x01\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`\x01\x81\x81\x1C\x90\x82\x16\x80a\x0CpW`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a\x0C\x8EWcNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[P\x91\x90PV[`\x1F\x82\x11\x15a\x0C\xDBW\x80_R` _ `\x1F\x84\x01`\x05\x1C\x81\x01` \x85\x10\x15a\x0C\xB9WP\x80[`\x1F\x84\x01`\x05\x1C\x82\x01\x91P[\x81\x81\x10\x15a\x0C\xD8W_\x81U`\x01\x01a\x0C\xC5V[PP[PPPV[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0C\xFAWa\x0C\xFAa\x0CHV[a\r\x0E\x81a\r\x08\x84Ta\x0C\\V[\x84a\x0C\x94V[` \x80`\x1F\x83\x11`\x01\x81\x14a\rAW_\x84\x15a\r*WP\x85\x83\x01Q[_\x19`\x03\x86\x90\x1B\x1C\x19\x16`\x01\x85\x90\x1B\x17\x85Ua\r\x98V[_\x85\x81R` \x81 `\x1F\x19\x86\x16\x91[\x82\x81\x10\x15a\roW\x88\x86\x01Q\x82U\x94\x84\x01\x94`\x01\x90\x91\x01\x90\x84\x01a\rPV[P\x85\x82\x10\x15a\r\x8CW\x87\x85\x01Q_\x19`\x03\x88\x90\x1B`\xF8\x16\x1C\x19\x16\x81U[PP`\x01\x84`\x01\x1B\x01\x85U[PPPPPPV[`@\x81R\x82`@\x82\x01R\x82\x84``\x83\x017_``\x84\x83\x01\x01R_```\x1F\x19`\x1F\x86\x01\x16\x83\x01\x01\x90Pa\x08F` \x83\x01\x84a\x0B_V[` \x81R_a\x05j` \x83\x01\x84a\x0B\x7FV[` \x81\x01a\r\xF6\x82\x84a\x0B_V[\x92\x91PPV[_k\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x80\x88``\x1B\x16\x83R\x80\x87``\x1B\x16`\x14\x84\x01RP\x84`(\x83\x01R\x83`H\x83\x01R\x82Q\x80` \x85\x01`h\x85\x01^_\x92\x01`h\x01\x91\x82RP\x95\x94PPPPPV\xFE\xA2dipfsX\"\x12 {y\xB4\xDBoX\xE3\xB8\xEBi\x82'\xC8\xA0\xF6\xD1\x11\xAD\x9AY\x82\xBE\xCE\xD7N\x11\x90\xAC!5\xCD\x81dsolcC\0\x08\x19\x003",
    );
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ApplicationStatus(u8);
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<ApplicationStatus> for u8 {
            #[inline]
            fn stv_to_tokens(
                &self,
            ) -> <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'_> {
                alloy_sol_types::private::SolTypeValue::<
                    alloy::sol_types::sol_data::Uint<8>,
                >::stv_to_tokens(self)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::tokenize(self)
                    .0
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(self, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encoded_size(self)
            }
        }
        #[automatically_derived]
        impl ApplicationStatus {
            /// The Solidity type name.
            pub const NAME: &'static str = stringify!(@ name);
            /// Convert from the underlying value type.
            #[inline]
            pub const fn from(value: u8) -> Self {
                Self(value)
            }
            /// Return the underlying value.
            #[inline]
            pub const fn into(self) -> u8 {
                self.0
            }
            /// Return the single encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode(&self.0)
            }
            /// Return the packed encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode_packed(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode_packed(&self.0)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ApplicationStatus {
            type RustType = u8;
            type Token<'a> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = Self::NAME;
            const ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                Self::type_check(token).is_ok()
            }
            #[inline]
            fn type_check(token: &Self::Token<'_>) -> alloy_sol_types::Result<()> {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::type_check(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::detokenize(token)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ApplicationStatus {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::topic_preimage_length(rust)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(rust, out)
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic(rust)
            }
        }
    };
    /**Custom error with signature `AgentAlreadyApplied()` and selector `0xfc753e5d`.
```solidity
error AgentAlreadyApplied();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AgentAlreadyApplied {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AgentAlreadyApplied> for UnderlyingRustTuple<'_> {
            fn from(value: AgentAlreadyApplied) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AgentAlreadyApplied {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AgentAlreadyApplied {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AgentAlreadyApplied()";
            const SELECTOR: [u8; 4] = [252u8, 117u8, 62u8, 93u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `ApplicantNotFound()` and selector `0x7aac1922`.
```solidity
error ApplicantNotFound();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ApplicantNotFound {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ApplicantNotFound> for UnderlyingRustTuple<'_> {
            fn from(value: ApplicantNotFound) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ApplicantNotFound {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ApplicantNotFound {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ApplicantNotFound()";
            const SELECTOR: [u8; 4] = [122u8, 172u8, 25u8, 34u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `InvalidAddress()` and selector `0xe6c4247b`.
```solidity
error InvalidAddress();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidAddress {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidAddress> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidAddress) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidAddress {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidAddress {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidAddress()";
            const SELECTOR: [u8; 4] = [230u8, 196u8, 36u8, 123u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `OwnableInvalidOwner(address)` and selector `0x1e4fbdf7`.
```solidity
error OwnableInvalidOwner(address owner);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableInvalidOwner {
        pub owner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableInvalidOwner> for UnderlyingRustTuple<'_> {
            fn from(value: OwnableInvalidOwner) -> Self {
                (value.owner,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for OwnableInvalidOwner {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { owner: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableInvalidOwner {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableInvalidOwner(address)";
            const SELECTOR: [u8; 4] = [30u8, 79u8, 189u8, 247u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `OwnableUnauthorizedAccount(address)` and selector `0x118cdaa7`.
```solidity
error OwnableUnauthorizedAccount(address account);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableUnauthorizedAccount {
        pub account: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: OwnableUnauthorizedAccount) -> Self {
                (value.account,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for OwnableUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { account: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableUnauthorizedAccount(address)";
            const SELECTOR: [u8; 4] = [17u8, 140u8, 218u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
        }
    };
    /**Event with signature `AgentClaimNFTAddressUpdated(address,address)` and selector `0x4a5b936ea227490546fabb10a05d570461ed79990d4b018a878658cf2a1a577a`.
```solidity
event AgentClaimNFTAddressUpdated(address indexed oldAddress, address indexed newAddress);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct AgentClaimNFTAddressUpdated {
        #[allow(missing_docs)]
        pub oldAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newAddress: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for AgentClaimNFTAddressUpdated {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "AgentClaimNFTAddressUpdated(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                74u8,
                91u8,
                147u8,
                110u8,
                162u8,
                39u8,
                73u8,
                5u8,
                70u8,
                250u8,
                187u8,
                16u8,
                160u8,
                93u8,
                87u8,
                4u8,
                97u8,
                237u8,
                121u8,
                153u8,
                13u8,
                75u8,
                1u8,
                138u8,
                135u8,
                134u8,
                88u8,
                207u8,
                42u8,
                26u8,
                87u8,
                122u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    oldAddress: topics.1,
                    newAddress: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.oldAddress.clone(),
                    self.newAddress.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.oldAddress,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newAddress,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for AgentClaimNFTAddressUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&AgentClaimNFTAddressUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &AgentClaimNFTAddressUpdated,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `AgentClaimNFTOwnerUpdated(address,address)` and selector `0x96bbc370b606dc0d01b0c9f1fcae2984d5cf45508cdc5078fe19715ece2ced5b`.
```solidity
event AgentClaimNFTOwnerUpdated(address indexed oldOwner, address indexed newOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct AgentClaimNFTOwnerUpdated {
        #[allow(missing_docs)]
        pub oldOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for AgentClaimNFTOwnerUpdated {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "AgentClaimNFTOwnerUpdated(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                150u8,
                187u8,
                195u8,
                112u8,
                182u8,
                6u8,
                220u8,
                13u8,
                1u8,
                176u8,
                201u8,
                241u8,
                252u8,
                174u8,
                41u8,
                132u8,
                213u8,
                207u8,
                69u8,
                80u8,
                140u8,
                220u8,
                80u8,
                120u8,
                254u8,
                25u8,
                113u8,
                94u8,
                206u8,
                44u8,
                237u8,
                91u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    oldOwner: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.oldOwner.clone(),
                    self.newOwner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.oldOwner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for AgentClaimNFTOwnerUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&AgentClaimNFTOwnerUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &AgentClaimNFTOwnerUpdated,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `ApplicantAdded(uint256,address,bytes,uint8)` and selector `0xae9fc2eaaecf404f3186e1350f438d792bbdccb8db862321d1d9bf605fee9b6b`.
```solidity
event ApplicantAdded(uint256 indexed applicantId, address indexed agentAddress, bytes additionalData, ApplicationStatus status);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct ApplicantAdded {
        #[allow(missing_docs)]
        pub applicantId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub agentAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub additionalData: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub status: <ApplicationStatus as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for ApplicantAdded {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Bytes, ApplicationStatus);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "ApplicantAdded(uint256,address,bytes,uint8)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                174u8,
                159u8,
                194u8,
                234u8,
                174u8,
                207u8,
                64u8,
                79u8,
                49u8,
                134u8,
                225u8,
                53u8,
                15u8,
                67u8,
                141u8,
                121u8,
                43u8,
                189u8,
                204u8,
                184u8,
                219u8,
                134u8,
                35u8,
                33u8,
                209u8,
                217u8,
                191u8,
                96u8,
                95u8,
                238u8,
                155u8,
                107u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    applicantId: topics.1,
                    agentAddress: topics.2,
                    additionalData: data.0,
                    status: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.additionalData,
                    ),
                    <ApplicationStatus as alloy_sol_types::SolType>::tokenize(
                        &self.status,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.applicantId.clone(),
                    self.agentAddress.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.applicantId);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.agentAddress,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for ApplicantAdded {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&ApplicantAdded> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &ApplicantAdded) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `ApplicantStatusUpdated(uint256,uint8)` and selector `0xc3f8265654a25915479f105bb8f31bd2ed7f77dfbbdffe534048f9287192cb41`.
```solidity
event ApplicantStatusUpdated(uint256 indexed applicantId, ApplicationStatus status);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct ApplicantStatusUpdated {
        #[allow(missing_docs)]
        pub applicantId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub status: <ApplicationStatus as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for ApplicantStatusUpdated {
            type DataTuple<'a> = (ApplicationStatus,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            const SIGNATURE: &'static str = "ApplicantStatusUpdated(uint256,uint8)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                195u8,
                248u8,
                38u8,
                86u8,
                84u8,
                162u8,
                89u8,
                21u8,
                71u8,
                159u8,
                16u8,
                91u8,
                184u8,
                243u8,
                27u8,
                210u8,
                237u8,
                127u8,
                119u8,
                223u8,
                187u8,
                223u8,
                254u8,
                83u8,
                64u8,
                72u8,
                249u8,
                40u8,
                113u8,
                146u8,
                203u8,
                65u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    applicantId: topics.1,
                    status: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <ApplicationStatus as alloy_sol_types::SolType>::tokenize(
                        &self.status,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.applicantId.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.applicantId);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for ApplicantStatusUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&ApplicantStatusUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &ApplicantStatusUpdated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `OwnershipTransferred(address,address)` and selector `0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0`.
```solidity
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct OwnershipTransferred {
        #[allow(missing_docs)]
        pub previousOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OwnershipTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OwnershipTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousOwner: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousOwner.clone(),
                    self.newOwner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousOwner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OwnershipTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OwnershipTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &OwnershipTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address admin, address _sequencerChain, address _agentClaimNFTOwner, address _agentClaimNFTAddress);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        pub admin: alloy::sol_types::private::Address,
        pub _sequencerChain: alloy::sol_types::private::Address,
        pub _agentClaimNFTOwner: alloy::sol_types::private::Address,
        pub _agentClaimNFTAddress: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (
                        value.admin,
                        value._sequencerChain,
                        value._agentClaimNFTOwner,
                        value._agentClaimNFTAddress,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        admin: tuple.0,
                        _sequencerChain: tuple.1,
                        _agentClaimNFTOwner: tuple.2,
                        _agentClaimNFTAddress: tuple.3,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._sequencerChain,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._agentClaimNFTOwner,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._agentClaimNFTAddress,
                    ),
                )
            }
        }
    };
    /**Function with signature `agentClaimNFTAddress()` and selector `0x8eb360c6`.
```solidity
function agentClaimNFTAddress() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct agentClaimNFTAddressCall {}
    ///Container type for the return parameters of the [`agentClaimNFTAddress()`](agentClaimNFTAddressCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct agentClaimNFTAddressReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<agentClaimNFTAddressCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: agentClaimNFTAddressCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for agentClaimNFTAddressCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<agentClaimNFTAddressReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: agentClaimNFTAddressReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for agentClaimNFTAddressReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for agentClaimNFTAddressCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = agentClaimNFTAddressReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "agentClaimNFTAddress()";
            const SELECTOR: [u8; 4] = [142u8, 179u8, 96u8, 198u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `agentClaimNFTOwner()` and selector `0xdc48e311`.
```solidity
function agentClaimNFTOwner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct agentClaimNFTOwnerCall {}
    ///Container type for the return parameters of the [`agentClaimNFTOwner()`](agentClaimNFTOwnerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct agentClaimNFTOwnerReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<agentClaimNFTOwnerCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: agentClaimNFTOwnerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for agentClaimNFTOwnerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<agentClaimNFTOwnerReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: agentClaimNFTOwnerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for agentClaimNFTOwnerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for agentClaimNFTOwnerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = agentClaimNFTOwnerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "agentClaimNFTOwner()";
            const SELECTOR: [u8; 4] = [220u8, 72u8, 227u8, 17u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `agentToApplicantId(address)` and selector `0x05db3720`.
```solidity
function agentToApplicantId(address) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct agentToApplicantIdCall {
        pub _0: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`agentToApplicantId(address)`](agentToApplicantIdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct agentToApplicantIdReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<agentToApplicantIdCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: agentToApplicantIdCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for agentToApplicantIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<agentToApplicantIdReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: agentToApplicantIdReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for agentToApplicantIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for agentToApplicantIdCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = agentToApplicantIdReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "agentToApplicantId(address)";
            const SELECTOR: [u8; 4] = [5u8, 219u8, 55u8, 32u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `applicantCount()` and selector `0x18f53993`.
```solidity
function applicantCount() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct applicantCountCall {}
    ///Container type for the return parameters of the [`applicantCount()`](applicantCountCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct applicantCountReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<applicantCountCall> for UnderlyingRustTuple<'_> {
                fn from(value: applicantCountCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for applicantCountCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<applicantCountReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: applicantCountReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for applicantCountReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for applicantCountCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = applicantCountReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "applicantCount()";
            const SELECTOR: [u8; 4] = [24u8, 245u8, 57u8, 147u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `applicants(uint256)` and selector `0x63de5323`.
```solidity
function applicants(uint256) external view returns (address agentAddress, ApplicationStatus status, bool isValid, bytes memory additionalData);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct applicantsCall {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`applicants(uint256)`](applicantsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct applicantsReturn {
        pub agentAddress: alloy::sol_types::private::Address,
        pub status: <ApplicationStatus as alloy::sol_types::SolType>::RustType,
        pub isValid: bool,
        pub additionalData: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<applicantsCall> for UnderlyingRustTuple<'_> {
                fn from(value: applicantsCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for applicantsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                ApplicationStatus,
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                <ApplicationStatus as alloy::sol_types::SolType>::RustType,
                bool,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<applicantsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: applicantsReturn) -> Self {
                    (
                        value.agentAddress,
                        value.status,
                        value.isValid,
                        value.additionalData,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for applicantsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        agentAddress: tuple.0,
                        status: tuple.1,
                        isValid: tuple.2,
                        additionalData: tuple.3,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for applicantsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = applicantsReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                ApplicationStatus,
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Bytes,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "applicants(uint256)";
            const SELECTOR: [u8; 4] = [99u8, 222u8, 83u8, 35u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._0),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `approveApplicant(address,bytes)` and selector `0x04f622fd`.
```solidity
function approveApplicant(address agentAddress, bytes memory additionalData) external returns (uint256 applicantId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct approveApplicantCall {
        pub agentAddress: alloy::sol_types::private::Address,
        pub additionalData: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`approveApplicant(address,bytes)`](approveApplicantCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct approveApplicantReturn {
        pub applicantId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<approveApplicantCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: approveApplicantCall) -> Self {
                    (value.agentAddress, value.additionalData)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for approveApplicantCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        agentAddress: tuple.0,
                        additionalData: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<approveApplicantReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: approveApplicantReturn) -> Self {
                    (value.applicantId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for approveApplicantReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { applicantId: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for approveApplicantCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = approveApplicantReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "approveApplicant(address,bytes)";
            const SELECTOR: [u8; 4] = [4u8, 246u8, 34u8, 253u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.agentAddress,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.additionalData,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `denyApplicant(uint256)` and selector `0x6bf5164c`.
```solidity
function denyApplicant(uint256 applicantId) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct denyApplicantCall {
        pub applicantId: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`denyApplicant(uint256)`](denyApplicantCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct denyApplicantReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<denyApplicantCall> for UnderlyingRustTuple<'_> {
                fn from(value: denyApplicantCall) -> Self {
                    (value.applicantId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for denyApplicantCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { applicantId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<denyApplicantReturn> for UnderlyingRustTuple<'_> {
                fn from(value: denyApplicantReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for denyApplicantReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for denyApplicantCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = denyApplicantReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "denyApplicant(uint256)";
            const SELECTOR: [u8; 4] = [107u8, 245u8, 22u8, 76u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.applicantId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getApplicant(uint256)` and selector `0xeea3f82d`.
```solidity
function getApplicant(uint256 applicantId) external view returns (address agentAddress, ApplicationStatus status, bytes memory additionalData);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getApplicantCall {
        pub applicantId: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`getApplicant(uint256)`](getApplicantCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getApplicantReturn {
        pub agentAddress: alloy::sol_types::private::Address,
        pub status: <ApplicationStatus as alloy::sol_types::SolType>::RustType,
        pub additionalData: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getApplicantCall> for UnderlyingRustTuple<'_> {
                fn from(value: getApplicantCall) -> Self {
                    (value.applicantId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getApplicantCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { applicantId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                ApplicationStatus,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                <ApplicationStatus as alloy::sol_types::SolType>::RustType,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getApplicantReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getApplicantReturn) -> Self {
                    (value.agentAddress, value.status, value.additionalData)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getApplicantReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        agentAddress: tuple.0,
                        status: tuple.1,
                        additionalData: tuple.2,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getApplicantCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getApplicantReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                ApplicationStatus,
                alloy::sol_types::sol_data::Bytes,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getApplicant(uint256)";
            const SELECTOR: [u8; 4] = [238u8, 163u8, 248u8, 45u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.applicantId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isPermittedByAddress(address)` and selector `0x9e549515`.
```solidity
function isPermittedByAddress(address agentAddress) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isPermittedByAddressCall {
        pub agentAddress: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`isPermittedByAddress(address)`](isPermittedByAddressCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isPermittedByAddressReturn {
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isPermittedByAddressCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: isPermittedByAddressCall) -> Self {
                    (value.agentAddress,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isPermittedByAddressCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { agentAddress: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isPermittedByAddressReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: isPermittedByAddressReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isPermittedByAddressReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isPermittedByAddressCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isPermittedByAddressReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isPermittedByAddress(address)";
            const SELECTOR: [u8; 4] = [158u8, 84u8, 149u8, 21u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.agentAddress,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isPermittedById(uint256)` and selector `0x3e141b03`.
```solidity
function isPermittedById(uint256 applicantId) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isPermittedByIdCall {
        pub applicantId: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`isPermittedById(uint256)`](isPermittedByIdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isPermittedByIdReturn {
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isPermittedByIdCall> for UnderlyingRustTuple<'_> {
                fn from(value: isPermittedByIdCall) -> Self {
                    (value.applicantId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isPermittedByIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { applicantId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isPermittedByIdReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: isPermittedByIdReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isPermittedByIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isPermittedByIdCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isPermittedByIdReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isPermittedById(uint256)";
            const SELECTOR: [u8; 4] = [62u8, 20u8, 27u8, 3u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.applicantId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `owner()` and selector `0x8da5cb5b`.
```solidity
function owner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerCall {}
    ///Container type for the return parameters of the [`owner()`](ownerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "owner()";
            const SELECTOR: [u8; 4] = [141u8, 165u8, 203u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `renounceOwnership()` and selector `0x715018a6`.
```solidity
function renounceOwnership() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipCall {}
    ///Container type for the return parameters of the [`renounceOwnership()`](renounceOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceOwnershipCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceOwnership()";
            const SELECTOR: [u8; 4] = [113u8, 80u8, 24u8, 166u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `sequencerChain()` and selector `0xdd01c0eb`.
```solidity
function sequencerChain() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct sequencerChainCall {}
    ///Container type for the return parameters of the [`sequencerChain()`](sequencerChainCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct sequencerChainReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<sequencerChainCall> for UnderlyingRustTuple<'_> {
                fn from(value: sequencerChainCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for sequencerChainCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<sequencerChainReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: sequencerChainReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for sequencerChainReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for sequencerChainCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = sequencerChainReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "sequencerChain()";
            const SELECTOR: [u8; 4] = [221u8, 1u8, 192u8, 235u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setAgentClaimNFTAddress(address)` and selector `0x5cd34134`.
```solidity
function setAgentClaimNFTAddress(address newAddress) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setAgentClaimNFTAddressCall {
        pub newAddress: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`setAgentClaimNFTAddress(address)`](setAgentClaimNFTAddressCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setAgentClaimNFTAddressReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setAgentClaimNFTAddressCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setAgentClaimNFTAddressCall) -> Self {
                    (value.newAddress,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setAgentClaimNFTAddressCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newAddress: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setAgentClaimNFTAddressReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setAgentClaimNFTAddressReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setAgentClaimNFTAddressReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setAgentClaimNFTAddressCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setAgentClaimNFTAddressReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setAgentClaimNFTAddress(address)";
            const SELECTOR: [u8; 4] = [92u8, 211u8, 65u8, 52u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newAddress,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setAgentClaimNFTOwner(address)` and selector `0x5de2b07b`.
```solidity
function setAgentClaimNFTOwner(address newOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setAgentClaimNFTOwnerCall {
        pub newOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`setAgentClaimNFTOwner(address)`](setAgentClaimNFTOwnerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setAgentClaimNFTOwnerReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setAgentClaimNFTOwnerCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setAgentClaimNFTOwnerCall) -> Self {
                    (value.newOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setAgentClaimNFTOwnerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setAgentClaimNFTOwnerReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setAgentClaimNFTOwnerReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setAgentClaimNFTOwnerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setAgentClaimNFTOwnerCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setAgentClaimNFTOwnerReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setAgentClaimNFTOwner(address)";
            const SELECTOR: [u8; 4] = [93u8, 226u8, 176u8, 123u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newOwner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferOwnership(address)` and selector `0xf2fde38b`.
```solidity
function transferOwnership(address newOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipCall {
        pub newOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferOwnership(address)`](transferOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipCall) -> Self {
                    (value.newOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferOwnershipCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferOwnership(address)";
            const SELECTOR: [u8; 4] = [242u8, 253u8, 227u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newOwner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`AgentApplication`](self) function calls.
    pub enum AgentApplicationCalls {
        agentClaimNFTAddress(agentClaimNFTAddressCall),
        agentClaimNFTOwner(agentClaimNFTOwnerCall),
        agentToApplicantId(agentToApplicantIdCall),
        applicantCount(applicantCountCall),
        applicants(applicantsCall),
        approveApplicant(approveApplicantCall),
        denyApplicant(denyApplicantCall),
        getApplicant(getApplicantCall),
        isPermittedByAddress(isPermittedByAddressCall),
        isPermittedById(isPermittedByIdCall),
        owner(ownerCall),
        renounceOwnership(renounceOwnershipCall),
        sequencerChain(sequencerChainCall),
        setAgentClaimNFTAddress(setAgentClaimNFTAddressCall),
        setAgentClaimNFTOwner(setAgentClaimNFTOwnerCall),
        transferOwnership(transferOwnershipCall),
    }
    #[automatically_derived]
    impl AgentApplicationCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [4u8, 246u8, 34u8, 253u8],
            [5u8, 219u8, 55u8, 32u8],
            [24u8, 245u8, 57u8, 147u8],
            [62u8, 20u8, 27u8, 3u8],
            [92u8, 211u8, 65u8, 52u8],
            [93u8, 226u8, 176u8, 123u8],
            [99u8, 222u8, 83u8, 35u8],
            [107u8, 245u8, 22u8, 76u8],
            [113u8, 80u8, 24u8, 166u8],
            [141u8, 165u8, 203u8, 91u8],
            [142u8, 179u8, 96u8, 198u8],
            [158u8, 84u8, 149u8, 21u8],
            [220u8, 72u8, 227u8, 17u8],
            [221u8, 1u8, 192u8, 235u8],
            [238u8, 163u8, 248u8, 45u8],
            [242u8, 253u8, 227u8, 139u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for AgentApplicationCalls {
        const NAME: &'static str = "AgentApplicationCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 16usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::agentClaimNFTAddress(_) => {
                    <agentClaimNFTAddressCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::agentClaimNFTOwner(_) => {
                    <agentClaimNFTOwnerCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::agentToApplicantId(_) => {
                    <agentToApplicantIdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::applicantCount(_) => {
                    <applicantCountCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::applicants(_) => {
                    <applicantsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::approveApplicant(_) => {
                    <approveApplicantCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::denyApplicant(_) => {
                    <denyApplicantCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getApplicant(_) => {
                    <getApplicantCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isPermittedByAddress(_) => {
                    <isPermittedByAddressCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isPermittedById(_) => {
                    <isPermittedByIdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::owner(_) => <ownerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::renounceOwnership(_) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::sequencerChain(_) => {
                    <sequencerChainCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setAgentClaimNFTAddress(_) => {
                    <setAgentClaimNFTAddressCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setAgentClaimNFTOwner(_) => {
                    <setAgentClaimNFTOwnerCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferOwnership(_) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<AgentApplicationCalls>] = &[
                {
                    fn approveApplicant(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationCalls> {
                        <approveApplicantCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationCalls::approveApplicant)
                    }
                    approveApplicant
                },
                {
                    fn agentToApplicantId(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationCalls> {
                        <agentToApplicantIdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationCalls::agentToApplicantId)
                    }
                    agentToApplicantId
                },
                {
                    fn applicantCount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationCalls> {
                        <applicantCountCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationCalls::applicantCount)
                    }
                    applicantCount
                },
                {
                    fn isPermittedById(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationCalls> {
                        <isPermittedByIdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationCalls::isPermittedById)
                    }
                    isPermittedById
                },
                {
                    fn setAgentClaimNFTAddress(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationCalls> {
                        <setAgentClaimNFTAddressCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationCalls::setAgentClaimNFTAddress)
                    }
                    setAgentClaimNFTAddress
                },
                {
                    fn setAgentClaimNFTOwner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationCalls> {
                        <setAgentClaimNFTOwnerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationCalls::setAgentClaimNFTOwner)
                    }
                    setAgentClaimNFTOwner
                },
                {
                    fn applicants(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationCalls> {
                        <applicantsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationCalls::applicants)
                    }
                    applicants
                },
                {
                    fn denyApplicant(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationCalls> {
                        <denyApplicantCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationCalls::denyApplicant)
                    }
                    denyApplicant
                },
                {
                    fn renounceOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationCalls> {
                        <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationCalls::renounceOwnership)
                    }
                    renounceOwnership
                },
                {
                    fn owner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationCalls> {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationCalls::owner)
                    }
                    owner
                },
                {
                    fn agentClaimNFTAddress(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationCalls> {
                        <agentClaimNFTAddressCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationCalls::agentClaimNFTAddress)
                    }
                    agentClaimNFTAddress
                },
                {
                    fn isPermittedByAddress(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationCalls> {
                        <isPermittedByAddressCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationCalls::isPermittedByAddress)
                    }
                    isPermittedByAddress
                },
                {
                    fn agentClaimNFTOwner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationCalls> {
                        <agentClaimNFTOwnerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationCalls::agentClaimNFTOwner)
                    }
                    agentClaimNFTOwner
                },
                {
                    fn sequencerChain(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationCalls> {
                        <sequencerChainCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationCalls::sequencerChain)
                    }
                    sequencerChain
                },
                {
                    fn getApplicant(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationCalls> {
                        <getApplicantCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationCalls::getApplicant)
                    }
                    getApplicant
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationCalls> {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationCalls::transferOwnership)
                    }
                    transferOwnership
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::agentClaimNFTAddress(inner) => {
                    <agentClaimNFTAddressCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::agentClaimNFTOwner(inner) => {
                    <agentClaimNFTOwnerCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::agentToApplicantId(inner) => {
                    <agentToApplicantIdCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::applicantCount(inner) => {
                    <applicantCountCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::applicants(inner) => {
                    <applicantsCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::approveApplicant(inner) => {
                    <approveApplicantCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::denyApplicant(inner) => {
                    <denyApplicantCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getApplicant(inner) => {
                    <getApplicantCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::isPermittedByAddress(inner) => {
                    <isPermittedByAddressCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::isPermittedById(inner) => {
                    <isPermittedByIdCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::sequencerChain(inner) => {
                    <sequencerChainCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setAgentClaimNFTAddress(inner) => {
                    <setAgentClaimNFTAddressCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setAgentClaimNFTOwner(inner) => {
                    <setAgentClaimNFTOwnerCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::agentClaimNFTAddress(inner) => {
                    <agentClaimNFTAddressCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::agentClaimNFTOwner(inner) => {
                    <agentClaimNFTOwnerCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::agentToApplicantId(inner) => {
                    <agentToApplicantIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::applicantCount(inner) => {
                    <applicantCountCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::applicants(inner) => {
                    <applicantsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::approveApplicant(inner) => {
                    <approveApplicantCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::denyApplicant(inner) => {
                    <denyApplicantCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getApplicant(inner) => {
                    <getApplicantCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isPermittedByAddress(inner) => {
                    <isPermittedByAddressCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isPermittedById(inner) => {
                    <isPermittedByIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::sequencerChain(inner) => {
                    <sequencerChainCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setAgentClaimNFTAddress(inner) => {
                    <setAgentClaimNFTAddressCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setAgentClaimNFTOwner(inner) => {
                    <setAgentClaimNFTOwnerCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`AgentApplication`](self) custom errors.
    pub enum AgentApplicationErrors {
        AgentAlreadyApplied(AgentAlreadyApplied),
        ApplicantNotFound(ApplicantNotFound),
        InvalidAddress(InvalidAddress),
        OwnableInvalidOwner(OwnableInvalidOwner),
        OwnableUnauthorizedAccount(OwnableUnauthorizedAccount),
    }
    #[automatically_derived]
    impl AgentApplicationErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [17u8, 140u8, 218u8, 167u8],
            [30u8, 79u8, 189u8, 247u8],
            [122u8, 172u8, 25u8, 34u8],
            [230u8, 196u8, 36u8, 123u8],
            [252u8, 117u8, 62u8, 93u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for AgentApplicationErrors {
        const NAME: &'static str = "AgentApplicationErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 5usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AgentAlreadyApplied(_) => {
                    <AgentAlreadyApplied as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ApplicantNotFound(_) => {
                    <ApplicantNotFound as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidAddress(_) => {
                    <InvalidAddress as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableInvalidOwner(_) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableUnauthorizedAccount(_) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<AgentApplicationErrors>] = &[
                {
                    fn OwnableUnauthorizedAccount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationErrors> {
                        <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationErrors::OwnableUnauthorizedAccount)
                    }
                    OwnableUnauthorizedAccount
                },
                {
                    fn OwnableInvalidOwner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationErrors> {
                        <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationErrors::OwnableInvalidOwner)
                    }
                    OwnableInvalidOwner
                },
                {
                    fn ApplicantNotFound(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationErrors> {
                        <ApplicantNotFound as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationErrors::ApplicantNotFound)
                    }
                    ApplicantNotFound
                },
                {
                    fn InvalidAddress(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationErrors> {
                        <InvalidAddress as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationErrors::InvalidAddress)
                    }
                    InvalidAddress
                },
                {
                    fn AgentAlreadyApplied(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationErrors> {
                        <AgentAlreadyApplied as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationErrors::AgentAlreadyApplied)
                    }
                    AgentAlreadyApplied
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AgentAlreadyApplied(inner) => {
                    <AgentAlreadyApplied as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ApplicantNotFound(inner) => {
                    <ApplicantNotFound as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidAddress(inner) => {
                    <InvalidAddress as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AgentAlreadyApplied(inner) => {
                    <AgentAlreadyApplied as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ApplicantNotFound(inner) => {
                    <ApplicantNotFound as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidAddress(inner) => {
                    <InvalidAddress as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`AgentApplication`](self) events.
    pub enum AgentApplicationEvents {
        AgentClaimNFTAddressUpdated(AgentClaimNFTAddressUpdated),
        AgentClaimNFTOwnerUpdated(AgentClaimNFTOwnerUpdated),
        ApplicantAdded(ApplicantAdded),
        ApplicantStatusUpdated(ApplicantStatusUpdated),
        OwnershipTransferred(OwnershipTransferred),
    }
    #[automatically_derived]
    impl AgentApplicationEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                74u8,
                91u8,
                147u8,
                110u8,
                162u8,
                39u8,
                73u8,
                5u8,
                70u8,
                250u8,
                187u8,
                16u8,
                160u8,
                93u8,
                87u8,
                4u8,
                97u8,
                237u8,
                121u8,
                153u8,
                13u8,
                75u8,
                1u8,
                138u8,
                135u8,
                134u8,
                88u8,
                207u8,
                42u8,
                26u8,
                87u8,
                122u8,
            ],
            [
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ],
            [
                150u8,
                187u8,
                195u8,
                112u8,
                182u8,
                6u8,
                220u8,
                13u8,
                1u8,
                176u8,
                201u8,
                241u8,
                252u8,
                174u8,
                41u8,
                132u8,
                213u8,
                207u8,
                69u8,
                80u8,
                140u8,
                220u8,
                80u8,
                120u8,
                254u8,
                25u8,
                113u8,
                94u8,
                206u8,
                44u8,
                237u8,
                91u8,
            ],
            [
                174u8,
                159u8,
                194u8,
                234u8,
                174u8,
                207u8,
                64u8,
                79u8,
                49u8,
                134u8,
                225u8,
                53u8,
                15u8,
                67u8,
                141u8,
                121u8,
                43u8,
                189u8,
                204u8,
                184u8,
                219u8,
                134u8,
                35u8,
                33u8,
                209u8,
                217u8,
                191u8,
                96u8,
                95u8,
                238u8,
                155u8,
                107u8,
            ],
            [
                195u8,
                248u8,
                38u8,
                86u8,
                84u8,
                162u8,
                89u8,
                21u8,
                71u8,
                159u8,
                16u8,
                91u8,
                184u8,
                243u8,
                27u8,
                210u8,
                237u8,
                127u8,
                119u8,
                223u8,
                187u8,
                223u8,
                254u8,
                83u8,
                64u8,
                72u8,
                249u8,
                40u8,
                113u8,
                146u8,
                203u8,
                65u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for AgentApplicationEvents {
        const NAME: &'static str = "AgentApplicationEvents";
        const COUNT: usize = 5usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <AgentClaimNFTAddressUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <AgentClaimNFTAddressUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::AgentClaimNFTAddressUpdated)
                }
                Some(
                    <AgentClaimNFTOwnerUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <AgentClaimNFTOwnerUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::AgentClaimNFTOwnerUpdated)
                }
                Some(<ApplicantAdded as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <ApplicantAdded as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::ApplicantAdded)
                }
                Some(
                    <ApplicantStatusUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <ApplicantStatusUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::ApplicantStatusUpdated)
                }
                Some(
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::OwnershipTransferred)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for AgentApplicationEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::AgentClaimNFTAddressUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::AgentClaimNFTOwnerUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::ApplicantAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::ApplicantStatusUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::AgentClaimNFTAddressUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::AgentClaimNFTOwnerUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::ApplicantAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::ApplicantStatusUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`AgentApplication`](self) contract instance.

See the [wrapper's documentation](`AgentApplicationInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> AgentApplicationInstance<T, P, N> {
        AgentApplicationInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        admin: alloy::sol_types::private::Address,
        _sequencerChain: alloy::sol_types::private::Address,
        _agentClaimNFTOwner: alloy::sol_types::private::Address,
        _agentClaimNFTAddress: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<AgentApplicationInstance<T, P, N>>,
    > {
        AgentApplicationInstance::<
            T,
            P,
            N,
        >::deploy(
            provider,
            admin,
            _sequencerChain,
            _agentClaimNFTOwner,
            _agentClaimNFTAddress,
        )
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        admin: alloy::sol_types::private::Address,
        _sequencerChain: alloy::sol_types::private::Address,
        _agentClaimNFTOwner: alloy::sol_types::private::Address,
        _agentClaimNFTAddress: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        AgentApplicationInstance::<
            T,
            P,
            N,
        >::deploy_builder(
            provider,
            admin,
            _sequencerChain,
            _agentClaimNFTOwner,
            _agentClaimNFTAddress,
        )
    }
    /**A [`AgentApplication`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`AgentApplication`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct AgentApplicationInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for AgentApplicationInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("AgentApplicationInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AgentApplicationInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`AgentApplication`](self) contract instance.

See the [wrapper's documentation](`AgentApplicationInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            admin: alloy::sol_types::private::Address,
            _sequencerChain: alloy::sol_types::private::Address,
            _agentClaimNFTOwner: alloy::sol_types::private::Address,
            _agentClaimNFTAddress: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<AgentApplicationInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(
                provider,
                admin,
                _sequencerChain,
                _agentClaimNFTOwner,
                _agentClaimNFTAddress,
            );
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            admin: alloy::sol_types::private::Address,
            _sequencerChain: alloy::sol_types::private::Address,
            _agentClaimNFTOwner: alloy::sol_types::private::Address,
            _agentClaimNFTAddress: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall {
                            admin,
                            _sequencerChain,
                            _agentClaimNFTOwner,
                            _agentClaimNFTAddress,
                        },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> AgentApplicationInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> AgentApplicationInstance<T, P, N> {
            AgentApplicationInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AgentApplicationInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`agentClaimNFTAddress`] function.
        pub fn agentClaimNFTAddress(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, agentClaimNFTAddressCall, N> {
            self.call_builder(&agentClaimNFTAddressCall {})
        }
        ///Creates a new call builder for the [`agentClaimNFTOwner`] function.
        pub fn agentClaimNFTOwner(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, agentClaimNFTOwnerCall, N> {
            self.call_builder(&agentClaimNFTOwnerCall {})
        }
        ///Creates a new call builder for the [`agentToApplicantId`] function.
        pub fn agentToApplicantId(
            &self,
            _0: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, agentToApplicantIdCall, N> {
            self.call_builder(&agentToApplicantIdCall { _0 })
        }
        ///Creates a new call builder for the [`applicantCount`] function.
        pub fn applicantCount(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, applicantCountCall, N> {
            self.call_builder(&applicantCountCall {})
        }
        ///Creates a new call builder for the [`applicants`] function.
        pub fn applicants(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, applicantsCall, N> {
            self.call_builder(&applicantsCall { _0 })
        }
        ///Creates a new call builder for the [`approveApplicant`] function.
        pub fn approveApplicant(
            &self,
            agentAddress: alloy::sol_types::private::Address,
            additionalData: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, approveApplicantCall, N> {
            self.call_builder(
                &approveApplicantCall {
                    agentAddress,
                    additionalData,
                },
            )
        }
        ///Creates a new call builder for the [`denyApplicant`] function.
        pub fn denyApplicant(
            &self,
            applicantId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, denyApplicantCall, N> {
            self.call_builder(&denyApplicantCall { applicantId })
        }
        ///Creates a new call builder for the [`getApplicant`] function.
        pub fn getApplicant(
            &self,
            applicantId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, getApplicantCall, N> {
            self.call_builder(&getApplicantCall { applicantId })
        }
        ///Creates a new call builder for the [`isPermittedByAddress`] function.
        pub fn isPermittedByAddress(
            &self,
            agentAddress: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, isPermittedByAddressCall, N> {
            self.call_builder(
                &isPermittedByAddressCall {
                    agentAddress,
                },
            )
        }
        ///Creates a new call builder for the [`isPermittedById`] function.
        pub fn isPermittedById(
            &self,
            applicantId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, isPermittedByIdCall, N> {
            self.call_builder(&isPermittedByIdCall { applicantId })
        }
        ///Creates a new call builder for the [`owner`] function.
        pub fn owner(&self) -> alloy_contract::SolCallBuilder<T, &P, ownerCall, N> {
            self.call_builder(&ownerCall {})
        }
        ///Creates a new call builder for the [`renounceOwnership`] function.
        pub fn renounceOwnership(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, renounceOwnershipCall, N> {
            self.call_builder(&renounceOwnershipCall {})
        }
        ///Creates a new call builder for the [`sequencerChain`] function.
        pub fn sequencerChain(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, sequencerChainCall, N> {
            self.call_builder(&sequencerChainCall {})
        }
        ///Creates a new call builder for the [`setAgentClaimNFTAddress`] function.
        pub fn setAgentClaimNFTAddress(
            &self,
            newAddress: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, setAgentClaimNFTAddressCall, N> {
            self.call_builder(
                &setAgentClaimNFTAddressCall {
                    newAddress,
                },
            )
        }
        ///Creates a new call builder for the [`setAgentClaimNFTOwner`] function.
        pub fn setAgentClaimNFTOwner(
            &self,
            newOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, setAgentClaimNFTOwnerCall, N> {
            self.call_builder(
                &setAgentClaimNFTOwnerCall {
                    newOwner,
                },
            )
        }
        ///Creates a new call builder for the [`transferOwnership`] function.
        pub fn transferOwnership(
            &self,
            newOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferOwnershipCall, N> {
            self.call_builder(&transferOwnershipCall { newOwner })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AgentApplicationInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`AgentClaimNFTAddressUpdated`] event.
        pub fn AgentClaimNFTAddressUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, AgentClaimNFTAddressUpdated, N> {
            self.event_filter::<AgentClaimNFTAddressUpdated>()
        }
        ///Creates a new event filter for the [`AgentClaimNFTOwnerUpdated`] event.
        pub fn AgentClaimNFTOwnerUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, AgentClaimNFTOwnerUpdated, N> {
            self.event_filter::<AgentClaimNFTOwnerUpdated>()
        }
        ///Creates a new event filter for the [`ApplicantAdded`] event.
        pub fn ApplicantAdded_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, ApplicantAdded, N> {
            self.event_filter::<ApplicantAdded>()
        }
        ///Creates a new event filter for the [`ApplicantStatusUpdated`] event.
        pub fn ApplicantStatusUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, ApplicantStatusUpdated, N> {
            self.event_filter::<ApplicantStatusUpdated>()
        }
        ///Creates a new event filter for the [`OwnershipTransferred`] event.
        pub fn OwnershipTransferred_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, OwnershipTransferred, N> {
            self.event_filter::<OwnershipTransferred>()
        }
    }
}
