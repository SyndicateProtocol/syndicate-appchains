/**

Generated by the following Solidity interface...
```solidity
interface AgentApplication {
    type ApplicationStatus is uint8;

    error AccessControlBadConfirmation();
    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);
    error AgentAlreadyApplied();
    error ApplicantNotFound();
    error InvalidAddress();

    event ApplicantAdded(uint256 indexed applicantId, address indexed agentAddress, bytes additionalData, ApplicationStatus status);
    event ApplicantStatusUpdated(uint256 indexed applicantId, ApplicationStatus status);
    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);

    constructor(address admin);

    function ADMIN_ROLE() external view returns (bytes32);
    function DEFAULT_ADMIN_ROLE() external view returns (bytes32);
    function addApplicant(address agentAddress, bytes memory additionalData) external returns (uint256 applicantId);
    function agentToApplicantId(address) external view returns (uint256);
    function applicantCount() external view returns (uint256);
    function applicants(uint256) external view returns (address agentAddress, ApplicationStatus status, bool isValid, bytes memory additionalData);
    function approveApplicant(address agentAddress) external returns (uint256 applicantId);
    function denyApplicant(address agentAddress) external returns (uint256 applicantId);
    function getApplicantByAddress(address agentAddress) external view returns (uint256 applicantId, address, ApplicationStatus status, bytes memory additionalData);
    function getApplicantById(uint256 applicantId) external view returns (uint256, address agentAddress, ApplicationStatus status, bytes memory additionalData);
    function getRoleAdmin(bytes32 role) external view returns (bytes32);
    function grantRole(bytes32 role, address account) external;
    function hasRole(bytes32 role, address account) external view returns (bool);
    function isPermittedByAddress(address agentAddress) external view returns (bool);
    function isPermittedById(uint256 applicantId) external view returns (bool);
    function renounceRole(bytes32 role, address callerConfirmation) external;
    function revokeRole(bytes32 role, address account) external;
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "admin",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "ADMIN_ROLE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "DEFAULT_ADMIN_ROLE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "addApplicant",
    "inputs": [
      {
        "name": "agentAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "additionalData",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "applicantId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "agentToApplicantId",
    "inputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "applicantCount",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "applicants",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "agentAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "status",
        "type": "uint8",
        "internalType": "enum AgentApplication.ApplicationStatus"
      },
      {
        "name": "isValid",
        "type": "bool",
        "internalType": "bool"
      },
      {
        "name": "additionalData",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "approveApplicant",
    "inputs": [
      {
        "name": "agentAddress",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "applicantId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "denyApplicant",
    "inputs": [
      {
        "name": "agentAddress",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "applicantId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "getApplicantByAddress",
    "inputs": [
      {
        "name": "agentAddress",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "applicantId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "status",
        "type": "uint8",
        "internalType": "enum AgentApplication.ApplicationStatus"
      },
      {
        "name": "additionalData",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getApplicantById",
    "inputs": [
      {
        "name": "applicantId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "agentAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "status",
        "type": "uint8",
        "internalType": "enum AgentApplication.ApplicationStatus"
      },
      {
        "name": "additionalData",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getRoleAdmin",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "grantRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "hasRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isPermittedByAddress",
    "inputs": [
      {
        "name": "agentAddress",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isPermittedById",
    "inputs": [
      {
        "name": "applicantId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "renounceRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "callerConfirmation",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "revokeRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "supportsInterface",
    "inputs": [
      {
        "name": "interfaceId",
        "type": "bytes4",
        "internalType": "bytes4"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "event",
    "name": "ApplicantAdded",
    "inputs": [
      {
        "name": "applicantId",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      },
      {
        "name": "agentAddress",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "additionalData",
        "type": "bytes",
        "indexed": false,
        "internalType": "bytes"
      },
      {
        "name": "status",
        "type": "uint8",
        "indexed": false,
        "internalType": "enum AgentApplication.ApplicationStatus"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "ApplicantStatusUpdated",
    "inputs": [
      {
        "name": "applicantId",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      },
      {
        "name": "status",
        "type": "uint8",
        "indexed": false,
        "internalType": "enum AgentApplication.ApplicationStatus"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleAdminChanged",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "previousAdminRole",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "newAdminRole",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleGranted",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleRevoked",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AccessControlBadConfirmation",
    "inputs": []
  },
  {
    "type": "error",
    "name": "AccessControlUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "neededRole",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ]
  },
  {
    "type": "error",
    "name": "AgentAlreadyApplied",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ApplicantNotFound",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidAddress",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod AgentApplication {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60806040523461002f576100196100146100f4565b61019c565b610021610034565b611c896103d28239611c8990f35b61003a565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906100669061003e565b810190811060018060401b0382111761007e57604052565b610048565b9061009661008f610034565b928361005c565b565b5f80fd5b60018060a01b031690565b6100b09061009c565b90565b6100bc816100a7565b036100c357565b5f80fd5b905051906100d4826100b3565b565b906020828203126100ef576100ec915f016100c7565b90565b610098565b61011261205b8038038061010781610083565b9283398101906100d6565b90565b90565b90565b61012f61012a61013492610115565b610118565b61009c565b90565b6101409061011b565b90565b5f0190565b90565b5f1b90565b61016461015f61016992610115565b61014b565b610148565b90565b6101755f610150565b90565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177590565b806101b76101b16101ac5f610137565b6100a7565b916100a7565b146101e3576101e0906101d26101cb61016c565b82906102c0565b506101db610178565b6102c0565b50565b6101eb610034565b63e6c4247b60e01b81528061020260048201610143565b0390fd5b5f90565b151590565b61021890610148565b90565b906102259061020f565b5f5260205260405f2090565b61024561024061024a9261009c565b610118565b61009c565b90565b61025690610231565b90565b6102629061024d565b90565b9061026f90610259565b5f5260205260405f2090565b9061028760ff9161014b565b9181191691161790565b61029a9061020a565b90565b90565b906102b56102b06102bc92610291565b61029d565b825461027b565b9055565b6102c8610206565b506102dd6102d7828490610397565b1561020a565b5f146103655761030460016102ff5f6102f781869061021b565b018590610265565b6102a0565b9061030d6103c4565b9061034a61034461033e7f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9561020f565b92610259565b92610259565b92610353610034565b8061035d81610143565b0390a4600190565b50505f90565b5f1c90565b60ff1690565b6103826103879161036b565b610370565b90565b6103949054610376565b90565b6103bd915f6103b26103b8936103ab610206565b508261021b565b01610265565b61038a565b90565b5f90565b6103cc6103c0565b50339056fe60806040526004361015610013575b610c00565b61001d5f3561013c565b806301ffc9a714610137578063026ff3df1461013257806305db37201461012d5780630f3bcabd146101285780631292a2821461012357806318f539931461011e578063248a9ca3146101195780632f2ff15d1461011457806336568abe1461010f5780633e141b031461010a57806363de53231461010557806375b238fc146101005780637cc24b07146100fb57806391d14854146100f65780639e549515146100f1578063a217fddf146100ec578063ad47878a146100e75763d547741f0361000e57610bcc565b610b96565b610ad0565b610a60565b610a2a565b6109f5565b6109c0565b610958565b61069d565b610669565b610635565b6105ce565b610533565b6104e0565b6104a7565b610431565b610350565b6101c8565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b63ffffffff60e01b1690565b61016981610154565b0361017057565b5f80fd5b9050359061018182610160565b565b9060208282031261019c57610199915f01610174565b90565b61014c565b151590565b6101af906101a1565b9052565b91906101c6905f602085019401906101a6565b565b346101f8576101f46101e36101de366004610183565b610c08565b6101eb610142565b918291826101b3565b0390f35b610148565b60018060a01b031690565b610211906101fd565b90565b61021d81610208565b0361022457565b5f80fd5b9050359061023582610214565b565b906020828203126102505761024d915f01610228565b90565b61014c565b90565b61026190610255565b9052565b61026e90610208565b9052565b634e487b7160e01b5f52602160045260245ffd5b6003111561029057565b610272565b9061029f82610286565b565b6102aa90610295565b90565b6102b6906102a1565b9052565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b6102fb610304602093610309936102f2816102ba565b938480936102be565b958691016102c7565b6102d2565b0190565b90926103409061033661034d969461032c60808601975f870190610258565b6020850190610265565b60408301906102ad565b60608184039101526102dc565b90565b346103845761038061036b610366366004610237565b610cb1565b90610377949294610142565b9485948561030d565b0390f35b610148565b90565b6103a061039b6103a5926101fd565b610389565b6101fd565b90565b6103b19061038c565b90565b6103bd906103a8565b90565b906103ca906103b4565b5f5260205260405f2090565b1c90565b90565b6103ed9060086103f293026103d6565b6103da565b90565b9061040091546103dd565b90565b610419906104146002915f926103c0565b6103f5565b90565b919061042f905f60208501940190610258565b565b346104615761045d61044c610447366004610237565b610403565b610454610142565b9182918261041c565b0390f35b610148565b61046f81610255565b0361047657565b5f80fd5b9050359061048782610466565b565b906020828203126104a25761049f915f0161047a565b90565b61014c565b346104db576104d76104c26104bd366004610489565b610d9d565b906104ce949294610142565b9485948561030d565b0390f35b610148565b346105105761050c6104fb6104f6366004610237565b610ff6565b610503610142565b9182918261041c565b0390f35b610148565b5f91031261051f57565b61014c565b61053060035f906103f5565b90565b3461056357610543366004610515565b61055f61054e610524565b610556610142565b9182918261041c565b0390f35b610148565b90565b61057481610568565b0361057b57565b5f80fd5b9050359061058c8261056b565b565b906020828203126105a7576105a4915f0161057f565b90565b61014c565b6105b590610568565b9052565b91906105cc905f602085019401906105ac565b565b346105fe576105fa6105e96105e436600461058e565b611054565b6105f1610142565b918291826105b9565b0390f35b610148565b919060408382031261062b578061061f610628925f860161057f565b93602001610228565b90565b61014c565b5f0190565b346106645761064e610648366004610603565b9061109f565b610656610142565b8061066081610630565b0390f35b610148565b346106985761068261067c366004610603565b906110ab565b61068a610142565b8061069481610630565b0390f35b610148565b346106cd576106c96106b86106b3366004610489565b6110fa565b6106c0610142565b918291826101b3565b0390f35b610148565b6106e66106e16106eb92610255565b610389565b610255565b90565b906106f8906106d2565b5f5260205260405f2090565b5f1c90565b60018060a01b031690565b61072061072591610704565b610709565b90565b6107329054610714565b90565b60a01c90565b60ff1690565b61074d61075291610735565b61073b565b90565b61075f9054610741565b90565b60a81c90565b60ff1690565b61077a61077f91610762565b610768565b90565b61078c905461076e565b90565b634e487b7160e01b5f52602260045260245ffd5b90600160028304921680156107c3575b60208310146107be57565b61078f565b91607f16916107b3565b60209181520190565b5f5260205f2090565b905f92918054906107f96107f2836107a3565b80946107cd565b916001811690815f146108505750600114610814575b505050565b61082191929394506107d6565b915f925b81841061083857505001905f808061080f565b60018160209295939554848601520191019290610825565b92949550505060ff19168252151560200201905f808061080f565b90610875916107df565b90565b634e487b7160e01b5f52604160045260245ffd5b90610896906102d2565b810190811067ffffffffffffffff8211176108b057604052565b610878565b906108d56108ce926108c5610142565b9384809261086b565b038361088c565b565b6108e29060016106ee565b906108ee5f8301610728565b916108fa5f8201610755565b91610912600161090b5f8501610782565b93016108b5565b90565b90926109489061093e610955969461093460808601975f870190610265565b60208501906102ad565b60408301906101a6565b60608184039101526102dc565b90565b3461098c5761098861097361096e366004610489565b6108d7565b9061097f949294610142565b94859485610915565b0390f35b610148565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177590565b6109bd610991565b90565b346109f0576109d0366004610515565b6109ec6109db6109b5565b6109e3610142565b918291826105b9565b0390f35b610148565b34610a2557610a21610a10610a0b366004610237565b61128e565b610a18610142565b9182918261041c565b0390f35b610148565b34610a5b57610a57610a46610a40366004610603565b906112d9565b610a4e610142565b918291826101b3565b0390f35b610148565b34610a9057610a8c610a7b610a76366004610237565b611302565b610a83610142565b918291826101b3565b0390f35b610148565b90565b5f1b90565b610ab1610aac610ab692610a95565b610a98565b610568565b90565b610ac25f610a9d565b90565b610acd610ab9565b90565b34610b0057610ae0366004610515565b610afc610aeb610ac5565b610af3610142565b918291826105b9565b0390f35b610148565b5f80fd5b5f80fd5b5f80fd5b909182601f83011215610b4b5781359167ffffffffffffffff8311610b46576020019260018302840111610b4157565b610b0d565b610b09565b610b05565b919091604081840312610b9157610b69835f8301610228565b92602082013567ffffffffffffffff8111610b8c57610b889201610b11565b9091565b610150565b61014c565b34610bc757610bc3610bb2610bac366004610b50565b916119d9565b610bba610142565b9182918261041c565b0390f35b610148565b34610bfb57610be5610bdf366004610603565b90611a19565b610bed610142565b80610bf781610630565b0390f35b610148565b5f80fd5b5f90565b610c10610c04565b5080610c2b610c25637965db0b60e01b610154565b91610154565b14908115610c38575b5090565b610c429150611a25565b5f610c34565b5f90565b5f90565b5f90565b606090565b610c6d610c68610c7292610a95565b610389565b6101fd565b90565b610c7e90610c59565b90565b610c8d610c9291610704565b6103da565b90565b610c9f9054610c81565b90565b90565b610cae906108b5565b90565b610cb9610c48565b50610cc2610c4c565b50610ccb610c50565b50610cd4610c54565b5080610cf0610cea610ce55f610c75565b610208565b91610208565b14610d7a57610d09610d04600283906103c0565b610c95565b90610d1e610d19600184906106ee565b610ca2565b91610d33610d2d5f8501610782565b156101a1565b610d57579092610d546001610d495f8601610755565b940192949392610ca5565b90565b610d5f610142565b633d560c9160e11b815280610d7660048201610630565b0390fd5b610d82610142565b63e6c4247b60e01b815280610d9960048201610630565b0390fd5b610da5610c48565b50610dae610c4c565b50610db7610c50565b50610dc0610c54565b50610dd5610dd0600183906106ee565b610ca2565b90610dea610de45f8401610782565b156101a1565b610e1857610df95f8301610728565b92610e156001610e0a5f8601610755565b940192949392610ca5565b90565b610e20610142565b633d560c9160e11b815280610e3760048201610630565b0390fd5b90610e5591610e50610e4b610991565b611a4b565b610ed7565b90565b610e6c610e67610e7192610a95565b610389565b610255565b90565b60a01b90565b90610e8960ff60a01b91610e74565b9181191691161790565b610e9c90610295565b90565b90565b90610eb7610eb2610ebe92610e93565b610e9f565b8254610e7a565b9055565b9190610ed5905f602085019401906102ad565b565b5080610ef3610eed610ee85f610c75565b610208565b91610208565b14610fd357610f06610f0b9160026103c0565b610c95565b9081610f1f610f195f610e58565b91610255565b148015610fae575b610f8b57610f4360015f610f3d600186906106ee565b01610ea2565b81600190610f86610f747fc3f8265654a25915479f105bb8f31bd2ed7f77dfbbdffe534048f9287192cb41926106d2565b92610f7d610142565b91829182610ec2565b0390a2565b610f93610142565b633d560c9160e11b815280610faa60048201610630565b0390fd5b50610fce610fc85f610fc2600186906106ee565b01610782565b156101a1565b610f27565b610fdb610142565b63e6c4247b60e01b815280610ff260048201610630565b0390fd5b61100790611002610c48565b610e3b565b90565b5f90565b61101790610568565b90565b906110249061100e565b5f5260205260405f2090565b90565b61103f61104491610704565b611030565b90565b6110519054611033565b90565b600161106c6110729261106561100a565b505f61101a565b01611047565b90565b906110909161108b61108682611054565b611a4b565b611092565b565b9061109c91611a95565b50565b906110a991611075565b565b90806110c66110c06110bb611b40565b610208565b91610208565b036110d7576110d491611b4d565b50565b6110df610142565b63334bd91960e11b8152806110f660048201610630565b0390fd5b61111161111691611109610c04565b5060016106ee565b610ca2565b6111215f8201610782565b908161112c575b5090565b61113891505f01610755565b61114b6111456001610295565b91610295565b145f611128565b9061116c91611167611162610991565b611a4b565b61116f565b90565b508061118b6111856111805f610c75565b610208565b91610208565b1461126b5761119e6111a39160026103c0565b610c95565b90816111b76111b15f610e58565b91610255565b148015611246575b611223576111db60025f6111d5600186906106ee565b01610ea2565b8160029061121e61120c7fc3f8265654a25915479f105bb8f31bd2ed7f77dfbbdffe534048f9287192cb41926106d2565b92611215610142565b91829182610ec2565b0390a2565b61122b610142565b633d560c9160e11b81528061124260048201610630565b0390fd5b506112666112605f61125a600186906106ee565b01610782565b156101a1565b6111bf565b611273610142565b63e6c4247b60e01b81528061128a60048201610630565b0390fd5b61129f9061129a610c48565b611152565b90565b906112ac906103b4565b5f5260205260405f2090565b6112c46112c991610704565b610768565b90565b6112d690546112b8565b90565b6112ff915f6112f46112fa936112ed610c04565b508261101a565b016112a2565b6112cc565b90565b61130a610c04565b508061132661132061131b5f610c75565b610208565b91610208565b1461138c5761134b61134461133f6113509360026103c0565b610c95565b60016106ee565b610ca2565b61135b5f8201610782565b9081611366575b5090565b61137291505f01610755565b61138561137f6001610295565b91610295565b145f611362565b505f90565b906113ad9392916113a86113a3610991565b611a4b565b611830565b90565b634e487b7160e01b5f52601160045260245ffd5b6113cd90610255565b5f1981146113db5760010190565b6113b0565b906113ec5f1991610a98565b9181191691161790565b90565b9061140e611409611415926106d2565b6113f6565b82546113e0565b9055565b9061142c611425610142565b928361088c565b565b6114386080611419565b90565b9061144590610208565b9052565b9061145390610295565b9052565b90611461906101a1565b9052565b5f80fd5b67ffffffffffffffff8111611487576114836020916102d2565b0190565b610878565b90825f939282370152565b909291926114ac6114a782611469565b611419565b938185526020850190828401116114c8576114c69261148c565b565b611465565b6114d8913691611497565b90565b52565b6114e89051610208565b90565b906114fc60018060a01b0391610a98565b9181191691161790565b90565b9061151e611519611525926103b4565b611506565b82546114eb565b9055565b6115339051610295565b90565b61154090516101a1565b90565b60a81b90565b9061155860ff60a81b91611543565b9181191691161790565b61156b906101a1565b90565b90565b9061158661158161158d92611562565b61156e565b8254611549565b9055565b5190565b601f602091010490565b1b90565b919060086115be9102916115b85f198461159f565b9261159f565b9181191691161790565b91906115de6115d96115e6936106d2565b6113f6565b9083546115a3565b9055565b6115fc916115f6610c48565b916115c8565b565b5b81811061160a575050565b806116175f6001936115ea565b016115ff565b9190601f811161162d575b505050565b61163961165e936107d6565b90602061164584611595565b83019310611666575b61165790611595565b01906115fe565b5f8080611628565b91506116578192905061164e565b90611684905f19906008026103d6565b191690565b8161169391611674565b906002021790565b906116a5816102ba565b9067ffffffffffffffff8211611765576116c9826116c385546107a3565b8561161d565b602090601f83116001146116fd579180916116ec935f926116f1575b5050611689565b90555b565b90915001515f806116e5565b601f1983169161170c856107d6565b925f5b81811061174d57509160029391856001969410611733575b505050020190556116ef565b611743910151601f841690611674565b90555f8080611727565b9193602060018192878701518155019501920161170f565b610878565b906117749161169b565b565b906117d1606060016117d7946117995f82016117935f88016114de565b90611509565b6117b15f82016117ab60208801611529565b90610ea2565b6117c95f82016117c360408801611536565b90611571565b019201611591565b9061176a565b565b906117e391611776565b565b91906117ff816117f881611804956102be565b809561148c565b6102d2565b0190565b93929061182660209161182e9460408801918883035f8a01526117e5565b9401906102ad565b565b9392919093508361185161184b6118465f610c75565b610208565b91610208565b146119b65761186a611865600286906103c0565b610c95565b8061187d6118775f610e58565b91610255565b14159081611999575b50611976576118a76118a061189b6003610c95565b6113c4565b60036113f9565b6118b16003610c95565b9361190e816118fd6118f45f60016118ef88916118e68b946118dd6118d461142e565b995f8b0161143b565b60208901611449565b60408701611457565b6114cd565b606083016114db565b611909600188906106ee565b6117d9565b6119238561191e600284906103c0565b6113f9565b849091925f9361197161195f6119597fae9fc2eaaecf404f3186e1350f438d792bbdccb8db862321d1d9bf605fee9b6b956106d2565b956103b4565b95611968610142565b93849384611808565b0390a3565b61197e610142565b63fc753e5d60e01b81528061199560048201610630565b0390fd5b6119b091506119aa5f9160016106ee565b01610782565b5f611886565b6119be610142565b63e6c4247b60e01b8152806119d560048201610630565b0390fd5b906119ec92916119e7610c48565b611391565b90565b90611a0a91611a05611a0082611054565b611a4b565b611a0c565b565b90611a1691611b4d565b50565b90611a23916119ef565b565b611a2d610c04565b50611a47611a416301ffc9a760e01b610154565b91610154565b1490565b611a5d90611a57611b40565b90611c11565b565b90611a6b60ff91610a98565b9181191691161790565b90611a8a611a85611a9192611562565b61156e565b8254611a5f565b9055565b611a9d610c04565b50611ab2611aac8284906112d9565b156101a1565b5f14611b3a57611ad96001611ad45f611acc81869061101a565b0185906112a2565b611a75565b90611ae2611b40565b90611b1f611b19611b137f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9561100e565b926103b4565b926103b4565b92611b28610142565b80611b3281610630565b0390a4600190565b50505f90565b611b48610c4c565b503390565b611b55610c04565b50611b618183906112d9565b5f14611be857611b875f611b825f611b7a81869061101a565b0185906112a2565b611a75565b90611b90611b40565b90611bcd611bc7611bc17ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9561100e565b926103b4565b926103b4565b92611bd6610142565b80611be081610630565b0390a4600190565b50505f90565b916020611c0f929493611c0860408201965f830190610265565b01906105ac565b565b90611c26611c208383906112d9565b156101a1565b611c2e575050565b611c4f611c39610142565b92839263e2517d3f60e01b845260048401611bee565b0390fdfea264697066735822122054bb230f76dbed8f42ee506ad5b158389506fb58e20e547c4426d6c9d1106f5664736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4a\0/Wa\0\x19a\0\x14a\0\xF4V[a\x01\x9CV[a\0!a\x004V[a\x1C\x89a\x03\xD2\x829a\x1C\x89\x90\xF3[a\0:V[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0f\x90a\0>V[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0~W`@RV[a\0HV[\x90a\0\x96a\0\x8Fa\x004V[\x92\x83a\0\\V[V[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xB0\x90a\0\x9CV[\x90V[a\0\xBC\x81a\0\xA7V[\x03a\0\xC3WV[_\x80\xFD[\x90PQ\x90a\0\xD4\x82a\0\xB3V[V[\x90` \x82\x82\x03\x12a\0\xEFWa\0\xEC\x91_\x01a\0\xC7V[\x90V[a\0\x98V[a\x01\x12a [\x808\x03\x80a\x01\x07\x81a\0\x83V[\x92\x839\x81\x01\x90a\0\xD6V[\x90V[\x90V[\x90V[a\x01/a\x01*a\x014\x92a\x01\x15V[a\x01\x18V[a\0\x9CV[\x90V[a\x01@\x90a\x01\x1BV[\x90V[_\x01\x90V[\x90V[_\x1B\x90V[a\x01da\x01_a\x01i\x92a\x01\x15V[a\x01KV[a\x01HV[\x90V[a\x01u_a\x01PV[\x90V[\x7F\xA4\x98\x07 \\\xE4\xD3U\t.\xF5\xA8\xA1\x8FV\xE8\x91<\xF4\xA2\x01\xFB\xE2\x87\x82[\tV\x93\xC2\x17u\x90V[\x80a\x01\xB7a\x01\xB1a\x01\xAC_a\x017V[a\0\xA7V[\x91a\0\xA7V[\x14a\x01\xE3Wa\x01\xE0\x90a\x01\xD2a\x01\xCBa\x01lV[\x82\x90a\x02\xC0V[Pa\x01\xDBa\x01xV[a\x02\xC0V[PV[a\x01\xEBa\x004V[c\xE6\xC4${`\xE0\x1B\x81R\x80a\x02\x02`\x04\x82\x01a\x01CV[\x03\x90\xFD[_\x90V[\x15\x15\x90V[a\x02\x18\x90a\x01HV[\x90V[\x90a\x02%\x90a\x02\x0FV[_R` R`@_ \x90V[a\x02Ea\x02@a\x02J\x92a\0\x9CV[a\x01\x18V[a\0\x9CV[\x90V[a\x02V\x90a\x021V[\x90V[a\x02b\x90a\x02MV[\x90V[\x90a\x02o\x90a\x02YV[_R` R`@_ \x90V[\x90a\x02\x87`\xFF\x91a\x01KV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x02\x9A\x90a\x02\nV[\x90V[\x90V[\x90a\x02\xB5a\x02\xB0a\x02\xBC\x92a\x02\x91V[a\x02\x9DV[\x82Ta\x02{V[\x90UV[a\x02\xC8a\x02\x06V[Pa\x02\xDDa\x02\xD7\x82\x84\x90a\x03\x97V[\x15a\x02\nV[_\x14a\x03eWa\x03\x04`\x01a\x02\xFF_a\x02\xF7\x81\x86\x90a\x02\x1BV[\x01\x85\x90a\x02eV[a\x02\xA0V[\x90a\x03\ra\x03\xC4V[\x90a\x03Ja\x03Da\x03>\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r\x95a\x02\x0FV[\x92a\x02YV[\x92a\x02YV[\x92a\x03Sa\x004V[\x80a\x03]\x81a\x01CV[\x03\x90\xA4`\x01\x90V[PP_\x90V[_\x1C\x90V[`\xFF\x16\x90V[a\x03\x82a\x03\x87\x91a\x03kV[a\x03pV[\x90V[a\x03\x94\x90Ta\x03vV[\x90V[a\x03\xBD\x91_a\x03\xB2a\x03\xB8\x93a\x03\xABa\x02\x06V[P\x82a\x02\x1BV[\x01a\x02eV[a\x03\x8AV[\x90V[_\x90V[a\x03\xCCa\x03\xC0V[P3\x90V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x0C\0V[a\0\x1D_5a\x01<V[\x80c\x01\xFF\xC9\xA7\x14a\x017W\x80c\x02o\xF3\xDF\x14a\x012W\x80c\x05\xDB7 \x14a\x01-W\x80c\x0F;\xCA\xBD\x14a\x01(W\x80c\x12\x92\xA2\x82\x14a\x01#W\x80c\x18\xF59\x93\x14a\x01\x1EW\x80c$\x8A\x9C\xA3\x14a\x01\x19W\x80c//\xF1]\x14a\x01\x14W\x80c6V\x8A\xBE\x14a\x01\x0FW\x80c>\x14\x1B\x03\x14a\x01\nW\x80cc\xDES#\x14a\x01\x05W\x80cu\xB28\xFC\x14a\x01\0W\x80c|\xC2K\x07\x14a\0\xFBW\x80c\x91\xD1HT\x14a\0\xF6W\x80c\x9ET\x95\x15\x14a\0\xF1W\x80c\xA2\x17\xFD\xDF\x14a\0\xECW\x80c\xADG\x87\x8A\x14a\0\xE7Wc\xD5Gt\x1F\x03a\0\x0EWa\x0B\xCCV[a\x0B\x96V[a\n\xD0V[a\n`V[a\n*V[a\t\xF5V[a\t\xC0V[a\tXV[a\x06\x9DV[a\x06iV[a\x065V[a\x05\xCEV[a\x053V[a\x04\xE0V[a\x04\xA7V[a\x041V[a\x03PV[a\x01\xC8V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[c\xFF\xFF\xFF\xFF`\xE0\x1B\x16\x90V[a\x01i\x81a\x01TV[\x03a\x01pWV[_\x80\xFD[\x90P5\x90a\x01\x81\x82a\x01`V[V[\x90` \x82\x82\x03\x12a\x01\x9CWa\x01\x99\x91_\x01a\x01tV[\x90V[a\x01LV[\x15\x15\x90V[a\x01\xAF\x90a\x01\xA1V[\x90RV[\x91\x90a\x01\xC6\x90_` \x85\x01\x94\x01\x90a\x01\xA6V[V[4a\x01\xF8Wa\x01\xF4a\x01\xE3a\x01\xDE6`\x04a\x01\x83V[a\x0C\x08V[a\x01\xEBa\x01BV[\x91\x82\x91\x82a\x01\xB3V[\x03\x90\xF3[a\x01HV[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02\x11\x90a\x01\xFDV[\x90V[a\x02\x1D\x81a\x02\x08V[\x03a\x02$WV[_\x80\xFD[\x90P5\x90a\x025\x82a\x02\x14V[V[\x90` \x82\x82\x03\x12a\x02PWa\x02M\x91_\x01a\x02(V[\x90V[a\x01LV[\x90V[a\x02a\x90a\x02UV[\x90RV[a\x02n\x90a\x02\x08V[\x90RV[cNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[`\x03\x11\x15a\x02\x90WV[a\x02rV[\x90a\x02\x9F\x82a\x02\x86V[V[a\x02\xAA\x90a\x02\x95V[\x90V[a\x02\xB6\x90a\x02\xA1V[\x90RV[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x02\xFBa\x03\x04` \x93a\x03\t\x93a\x02\xF2\x81a\x02\xBAV[\x93\x84\x80\x93a\x02\xBEV[\x95\x86\x91\x01a\x02\xC7V[a\x02\xD2V[\x01\x90V[\x90\x92a\x03@\x90a\x036a\x03M\x96\x94a\x03,`\x80\x86\x01\x97_\x87\x01\x90a\x02XV[` \x85\x01\x90a\x02eV[`@\x83\x01\x90a\x02\xADV[``\x81\x84\x03\x91\x01Ra\x02\xDCV[\x90V[4a\x03\x84Wa\x03\x80a\x03ka\x03f6`\x04a\x027V[a\x0C\xB1V[\x90a\x03w\x94\x92\x94a\x01BV[\x94\x85\x94\x85a\x03\rV[\x03\x90\xF3[a\x01HV[\x90V[a\x03\xA0a\x03\x9Ba\x03\xA5\x92a\x01\xFDV[a\x03\x89V[a\x01\xFDV[\x90V[a\x03\xB1\x90a\x03\x8CV[\x90V[a\x03\xBD\x90a\x03\xA8V[\x90V[\x90a\x03\xCA\x90a\x03\xB4V[_R` R`@_ \x90V[\x1C\x90V[\x90V[a\x03\xED\x90`\x08a\x03\xF2\x93\x02a\x03\xD6V[a\x03\xDAV[\x90V[\x90a\x04\0\x91Ta\x03\xDDV[\x90V[a\x04\x19\x90a\x04\x14`\x02\x91_\x92a\x03\xC0V[a\x03\xF5V[\x90V[\x91\x90a\x04/\x90_` \x85\x01\x94\x01\x90a\x02XV[V[4a\x04aWa\x04]a\x04La\x04G6`\x04a\x027V[a\x04\x03V[a\x04Ta\x01BV[\x91\x82\x91\x82a\x04\x1CV[\x03\x90\xF3[a\x01HV[a\x04o\x81a\x02UV[\x03a\x04vWV[_\x80\xFD[\x90P5\x90a\x04\x87\x82a\x04fV[V[\x90` \x82\x82\x03\x12a\x04\xA2Wa\x04\x9F\x91_\x01a\x04zV[\x90V[a\x01LV[4a\x04\xDBWa\x04\xD7a\x04\xC2a\x04\xBD6`\x04a\x04\x89V[a\r\x9DV[\x90a\x04\xCE\x94\x92\x94a\x01BV[\x94\x85\x94\x85a\x03\rV[\x03\x90\xF3[a\x01HV[4a\x05\x10Wa\x05\x0Ca\x04\xFBa\x04\xF66`\x04a\x027V[a\x0F\xF6V[a\x05\x03a\x01BV[\x91\x82\x91\x82a\x04\x1CV[\x03\x90\xF3[a\x01HV[_\x91\x03\x12a\x05\x1FWV[a\x01LV[a\x050`\x03_\x90a\x03\xF5V[\x90V[4a\x05cWa\x05C6`\x04a\x05\x15V[a\x05_a\x05Na\x05$V[a\x05Va\x01BV[\x91\x82\x91\x82a\x04\x1CV[\x03\x90\xF3[a\x01HV[\x90V[a\x05t\x81a\x05hV[\x03a\x05{WV[_\x80\xFD[\x90P5\x90a\x05\x8C\x82a\x05kV[V[\x90` \x82\x82\x03\x12a\x05\xA7Wa\x05\xA4\x91_\x01a\x05\x7FV[\x90V[a\x01LV[a\x05\xB5\x90a\x05hV[\x90RV[\x91\x90a\x05\xCC\x90_` \x85\x01\x94\x01\x90a\x05\xACV[V[4a\x05\xFEWa\x05\xFAa\x05\xE9a\x05\xE46`\x04a\x05\x8EV[a\x10TV[a\x05\xF1a\x01BV[\x91\x82\x91\x82a\x05\xB9V[\x03\x90\xF3[a\x01HV[\x91\x90`@\x83\x82\x03\x12a\x06+W\x80a\x06\x1Fa\x06(\x92_\x86\x01a\x05\x7FV[\x93` \x01a\x02(V[\x90V[a\x01LV[_\x01\x90V[4a\x06dWa\x06Na\x06H6`\x04a\x06\x03V[\x90a\x10\x9FV[a\x06Va\x01BV[\x80a\x06`\x81a\x060V[\x03\x90\xF3[a\x01HV[4a\x06\x98Wa\x06\x82a\x06|6`\x04a\x06\x03V[\x90a\x10\xABV[a\x06\x8Aa\x01BV[\x80a\x06\x94\x81a\x060V[\x03\x90\xF3[a\x01HV[4a\x06\xCDWa\x06\xC9a\x06\xB8a\x06\xB36`\x04a\x04\x89V[a\x10\xFAV[a\x06\xC0a\x01BV[\x91\x82\x91\x82a\x01\xB3V[\x03\x90\xF3[a\x01HV[a\x06\xE6a\x06\xE1a\x06\xEB\x92a\x02UV[a\x03\x89V[a\x02UV[\x90V[\x90a\x06\xF8\x90a\x06\xD2V[_R` R`@_ \x90V[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x07 a\x07%\x91a\x07\x04V[a\x07\tV[\x90V[a\x072\x90Ta\x07\x14V[\x90V[`\xA0\x1C\x90V[`\xFF\x16\x90V[a\x07Ma\x07R\x91a\x075V[a\x07;V[\x90V[a\x07_\x90Ta\x07AV[\x90V[`\xA8\x1C\x90V[`\xFF\x16\x90V[a\x07za\x07\x7F\x91a\x07bV[a\x07hV[\x90V[a\x07\x8C\x90Ta\x07nV[\x90V[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\x07\xC3W[` \x83\x10\x14a\x07\xBEWV[a\x07\x8FV[\x91`\x7F\x16\x91a\x07\xB3V[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\x07\xF9a\x07\xF2\x83a\x07\xA3V[\x80\x94a\x07\xCDV[\x91`\x01\x81\x16\x90\x81_\x14a\x08PWP`\x01\x14a\x08\x14W[PPPV[a\x08!\x91\x92\x93\x94Pa\x07\xD6V[\x91_\x92[\x81\x84\x10a\x088WPP\x01\x90_\x80\x80a\x08\x0FV[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\x08%V[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\x08\x0FV[\x90a\x08u\x91a\x07\xDFV[\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x08\x96\x90a\x02\xD2V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x08\xB0W`@RV[a\x08xV[\x90a\x08\xD5a\x08\xCE\x92a\x08\xC5a\x01BV[\x93\x84\x80\x92a\x08kV[\x03\x83a\x08\x8CV[V[a\x08\xE2\x90`\x01a\x06\xEEV[\x90a\x08\xEE_\x83\x01a\x07(V[\x91a\x08\xFA_\x82\x01a\x07UV[\x91a\t\x12`\x01a\t\x0B_\x85\x01a\x07\x82V[\x93\x01a\x08\xB5V[\x90V[\x90\x92a\tH\x90a\t>a\tU\x96\x94a\t4`\x80\x86\x01\x97_\x87\x01\x90a\x02eV[` \x85\x01\x90a\x02\xADV[`@\x83\x01\x90a\x01\xA6V[``\x81\x84\x03\x91\x01Ra\x02\xDCV[\x90V[4a\t\x8CWa\t\x88a\tsa\tn6`\x04a\x04\x89V[a\x08\xD7V[\x90a\t\x7F\x94\x92\x94a\x01BV[\x94\x85\x94\x85a\t\x15V[\x03\x90\xF3[a\x01HV[\x7F\xA4\x98\x07 \\\xE4\xD3U\t.\xF5\xA8\xA1\x8FV\xE8\x91<\xF4\xA2\x01\xFB\xE2\x87\x82[\tV\x93\xC2\x17u\x90V[a\t\xBDa\t\x91V[\x90V[4a\t\xF0Wa\t\xD06`\x04a\x05\x15V[a\t\xECa\t\xDBa\t\xB5V[a\t\xE3a\x01BV[\x91\x82\x91\x82a\x05\xB9V[\x03\x90\xF3[a\x01HV[4a\n%Wa\n!a\n\x10a\n\x0B6`\x04a\x027V[a\x12\x8EV[a\n\x18a\x01BV[\x91\x82\x91\x82a\x04\x1CV[\x03\x90\xF3[a\x01HV[4a\n[Wa\nWa\nFa\n@6`\x04a\x06\x03V[\x90a\x12\xD9V[a\nNa\x01BV[\x91\x82\x91\x82a\x01\xB3V[\x03\x90\xF3[a\x01HV[4a\n\x90Wa\n\x8Ca\n{a\nv6`\x04a\x027V[a\x13\x02V[a\n\x83a\x01BV[\x91\x82\x91\x82a\x01\xB3V[\x03\x90\xF3[a\x01HV[\x90V[_\x1B\x90V[a\n\xB1a\n\xACa\n\xB6\x92a\n\x95V[a\n\x98V[a\x05hV[\x90V[a\n\xC2_a\n\x9DV[\x90V[a\n\xCDa\n\xB9V[\x90V[4a\x0B\0Wa\n\xE06`\x04a\x05\x15V[a\n\xFCa\n\xEBa\n\xC5V[a\n\xF3a\x01BV[\x91\x82\x91\x82a\x05\xB9V[\x03\x90\xF3[a\x01HV[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x0BKW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x0BFW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x0BAWV[a\x0B\rV[a\x0B\tV[a\x0B\x05V[\x91\x90\x91`@\x81\x84\x03\x12a\x0B\x91Wa\x0Bi\x83_\x83\x01a\x02(V[\x92` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x0B\x8CWa\x0B\x88\x92\x01a\x0B\x11V[\x90\x91V[a\x01PV[a\x01LV[4a\x0B\xC7Wa\x0B\xC3a\x0B\xB2a\x0B\xAC6`\x04a\x0BPV[\x91a\x19\xD9V[a\x0B\xBAa\x01BV[\x91\x82\x91\x82a\x04\x1CV[\x03\x90\xF3[a\x01HV[4a\x0B\xFBWa\x0B\xE5a\x0B\xDF6`\x04a\x06\x03V[\x90a\x1A\x19V[a\x0B\xEDa\x01BV[\x80a\x0B\xF7\x81a\x060V[\x03\x90\xF3[a\x01HV[_\x80\xFD[_\x90V[a\x0C\x10a\x0C\x04V[P\x80a\x0C+a\x0C%cye\xDB\x0B`\xE0\x1Ba\x01TV[\x91a\x01TV[\x14\x90\x81\x15a\x0C8W[P\x90V[a\x0CB\x91Pa\x1A%V[_a\x0C4V[_\x90V[_\x90V[_\x90V[``\x90V[a\x0Cma\x0Cha\x0Cr\x92a\n\x95V[a\x03\x89V[a\x01\xFDV[\x90V[a\x0C~\x90a\x0CYV[\x90V[a\x0C\x8Da\x0C\x92\x91a\x07\x04V[a\x03\xDAV[\x90V[a\x0C\x9F\x90Ta\x0C\x81V[\x90V[\x90V[a\x0C\xAE\x90a\x08\xB5V[\x90V[a\x0C\xB9a\x0CHV[Pa\x0C\xC2a\x0CLV[Pa\x0C\xCBa\x0CPV[Pa\x0C\xD4a\x0CTV[P\x80a\x0C\xF0a\x0C\xEAa\x0C\xE5_a\x0CuV[a\x02\x08V[\x91a\x02\x08V[\x14a\rzWa\r\ta\r\x04`\x02\x83\x90a\x03\xC0V[a\x0C\x95V[\x90a\r\x1Ea\r\x19`\x01\x84\x90a\x06\xEEV[a\x0C\xA2V[\x91a\r3a\r-_\x85\x01a\x07\x82V[\x15a\x01\xA1V[a\rWW\x90\x92a\rT`\x01a\rI_\x86\x01a\x07UV[\x94\x01\x92\x94\x93\x92a\x0C\xA5V[\x90V[a\r_a\x01BV[c=V\x0C\x91`\xE1\x1B\x81R\x80a\rv`\x04\x82\x01a\x060V[\x03\x90\xFD[a\r\x82a\x01BV[c\xE6\xC4${`\xE0\x1B\x81R\x80a\r\x99`\x04\x82\x01a\x060V[\x03\x90\xFD[a\r\xA5a\x0CHV[Pa\r\xAEa\x0CLV[Pa\r\xB7a\x0CPV[Pa\r\xC0a\x0CTV[Pa\r\xD5a\r\xD0`\x01\x83\x90a\x06\xEEV[a\x0C\xA2V[\x90a\r\xEAa\r\xE4_\x84\x01a\x07\x82V[\x15a\x01\xA1V[a\x0E\x18Wa\r\xF9_\x83\x01a\x07(V[\x92a\x0E\x15`\x01a\x0E\n_\x86\x01a\x07UV[\x94\x01\x92\x94\x93\x92a\x0C\xA5V[\x90V[a\x0E a\x01BV[c=V\x0C\x91`\xE1\x1B\x81R\x80a\x0E7`\x04\x82\x01a\x060V[\x03\x90\xFD[\x90a\x0EU\x91a\x0EPa\x0EKa\t\x91V[a\x1AKV[a\x0E\xD7V[\x90V[a\x0Ela\x0Ega\x0Eq\x92a\n\x95V[a\x03\x89V[a\x02UV[\x90V[`\xA0\x1B\x90V[\x90a\x0E\x89`\xFF`\xA0\x1B\x91a\x0EtV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0E\x9C\x90a\x02\x95V[\x90V[\x90V[\x90a\x0E\xB7a\x0E\xB2a\x0E\xBE\x92a\x0E\x93V[a\x0E\x9FV[\x82Ta\x0EzV[\x90UV[\x91\x90a\x0E\xD5\x90_` \x85\x01\x94\x01\x90a\x02\xADV[V[P\x80a\x0E\xF3a\x0E\xEDa\x0E\xE8_a\x0CuV[a\x02\x08V[\x91a\x02\x08V[\x14a\x0F\xD3Wa\x0F\x06a\x0F\x0B\x91`\x02a\x03\xC0V[a\x0C\x95V[\x90\x81a\x0F\x1Fa\x0F\x19_a\x0EXV[\x91a\x02UV[\x14\x80\x15a\x0F\xAEW[a\x0F\x8BWa\x0FC`\x01_a\x0F=`\x01\x86\x90a\x06\xEEV[\x01a\x0E\xA2V[\x81`\x01\x90a\x0F\x86a\x0Ft\x7F\xC3\xF8&VT\xA2Y\x15G\x9F\x10[\xB8\xF3\x1B\xD2\xED\x7Fw\xDF\xBB\xDF\xFES@H\xF9(q\x92\xCBA\x92a\x06\xD2V[\x92a\x0F}a\x01BV[\x91\x82\x91\x82a\x0E\xC2V[\x03\x90\xA2V[a\x0F\x93a\x01BV[c=V\x0C\x91`\xE1\x1B\x81R\x80a\x0F\xAA`\x04\x82\x01a\x060V[\x03\x90\xFD[Pa\x0F\xCEa\x0F\xC8_a\x0F\xC2`\x01\x86\x90a\x06\xEEV[\x01a\x07\x82V[\x15a\x01\xA1V[a\x0F'V[a\x0F\xDBa\x01BV[c\xE6\xC4${`\xE0\x1B\x81R\x80a\x0F\xF2`\x04\x82\x01a\x060V[\x03\x90\xFD[a\x10\x07\x90a\x10\x02a\x0CHV[a\x0E;V[\x90V[_\x90V[a\x10\x17\x90a\x05hV[\x90V[\x90a\x10$\x90a\x10\x0EV[_R` R`@_ \x90V[\x90V[a\x10?a\x10D\x91a\x07\x04V[a\x100V[\x90V[a\x10Q\x90Ta\x103V[\x90V[`\x01a\x10la\x10r\x92a\x10ea\x10\nV[P_a\x10\x1AV[\x01a\x10GV[\x90V[\x90a\x10\x90\x91a\x10\x8Ba\x10\x86\x82a\x10TV[a\x1AKV[a\x10\x92V[V[\x90a\x10\x9C\x91a\x1A\x95V[PV[\x90a\x10\xA9\x91a\x10uV[V[\x90\x80a\x10\xC6a\x10\xC0a\x10\xBBa\x1B@V[a\x02\x08V[\x91a\x02\x08V[\x03a\x10\xD7Wa\x10\xD4\x91a\x1BMV[PV[a\x10\xDFa\x01BV[c3K\xD9\x19`\xE1\x1B\x81R\x80a\x10\xF6`\x04\x82\x01a\x060V[\x03\x90\xFD[a\x11\x11a\x11\x16\x91a\x11\ta\x0C\x04V[P`\x01a\x06\xEEV[a\x0C\xA2V[a\x11!_\x82\x01a\x07\x82V[\x90\x81a\x11,W[P\x90V[a\x118\x91P_\x01a\x07UV[a\x11Ka\x11E`\x01a\x02\x95V[\x91a\x02\x95V[\x14_a\x11(V[\x90a\x11l\x91a\x11ga\x11ba\t\x91V[a\x1AKV[a\x11oV[\x90V[P\x80a\x11\x8Ba\x11\x85a\x11\x80_a\x0CuV[a\x02\x08V[\x91a\x02\x08V[\x14a\x12kWa\x11\x9Ea\x11\xA3\x91`\x02a\x03\xC0V[a\x0C\x95V[\x90\x81a\x11\xB7a\x11\xB1_a\x0EXV[\x91a\x02UV[\x14\x80\x15a\x12FW[a\x12#Wa\x11\xDB`\x02_a\x11\xD5`\x01\x86\x90a\x06\xEEV[\x01a\x0E\xA2V[\x81`\x02\x90a\x12\x1Ea\x12\x0C\x7F\xC3\xF8&VT\xA2Y\x15G\x9F\x10[\xB8\xF3\x1B\xD2\xED\x7Fw\xDF\xBB\xDF\xFES@H\xF9(q\x92\xCBA\x92a\x06\xD2V[\x92a\x12\x15a\x01BV[\x91\x82\x91\x82a\x0E\xC2V[\x03\x90\xA2V[a\x12+a\x01BV[c=V\x0C\x91`\xE1\x1B\x81R\x80a\x12B`\x04\x82\x01a\x060V[\x03\x90\xFD[Pa\x12fa\x12`_a\x12Z`\x01\x86\x90a\x06\xEEV[\x01a\x07\x82V[\x15a\x01\xA1V[a\x11\xBFV[a\x12sa\x01BV[c\xE6\xC4${`\xE0\x1B\x81R\x80a\x12\x8A`\x04\x82\x01a\x060V[\x03\x90\xFD[a\x12\x9F\x90a\x12\x9Aa\x0CHV[a\x11RV[\x90V[\x90a\x12\xAC\x90a\x03\xB4V[_R` R`@_ \x90V[a\x12\xC4a\x12\xC9\x91a\x07\x04V[a\x07hV[\x90V[a\x12\xD6\x90Ta\x12\xB8V[\x90V[a\x12\xFF\x91_a\x12\xF4a\x12\xFA\x93a\x12\xEDa\x0C\x04V[P\x82a\x10\x1AV[\x01a\x12\xA2V[a\x12\xCCV[\x90V[a\x13\na\x0C\x04V[P\x80a\x13&a\x13 a\x13\x1B_a\x0CuV[a\x02\x08V[\x91a\x02\x08V[\x14a\x13\x8CWa\x13Ka\x13Da\x13?a\x13P\x93`\x02a\x03\xC0V[a\x0C\x95V[`\x01a\x06\xEEV[a\x0C\xA2V[a\x13[_\x82\x01a\x07\x82V[\x90\x81a\x13fW[P\x90V[a\x13r\x91P_\x01a\x07UV[a\x13\x85a\x13\x7F`\x01a\x02\x95V[\x91a\x02\x95V[\x14_a\x13bV[P_\x90V[\x90a\x13\xAD\x93\x92\x91a\x13\xA8a\x13\xA3a\t\x91V[a\x1AKV[a\x180V[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x13\xCD\x90a\x02UV[_\x19\x81\x14a\x13\xDBW`\x01\x01\x90V[a\x13\xB0V[\x90a\x13\xEC_\x19\x91a\n\x98V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x90a\x14\x0Ea\x14\ta\x14\x15\x92a\x06\xD2V[a\x13\xF6V[\x82Ta\x13\xE0V[\x90UV[\x90a\x14,a\x14%a\x01BV[\x92\x83a\x08\x8CV[V[a\x148`\x80a\x14\x19V[\x90V[\x90a\x14E\x90a\x02\x08V[\x90RV[\x90a\x14S\x90a\x02\x95V[\x90RV[\x90a\x14a\x90a\x01\xA1V[\x90RV[_\x80\xFD[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x14\x87Wa\x14\x83` \x91a\x02\xD2V[\x01\x90V[a\x08xV[\x90\x82_\x93\x92\x827\x01RV[\x90\x92\x91\x92a\x14\xACa\x14\xA7\x82a\x14iV[a\x14\x19V[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\x14\xC8Wa\x14\xC6\x92a\x14\x8CV[V[a\x14eV[a\x14\xD8\x916\x91a\x14\x97V[\x90V[RV[a\x14\xE8\x90Qa\x02\x08V[\x90V[\x90a\x14\xFC`\x01\x80`\xA0\x1B\x03\x91a\n\x98V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x90a\x15\x1Ea\x15\x19a\x15%\x92a\x03\xB4V[a\x15\x06V[\x82Ta\x14\xEBV[\x90UV[a\x153\x90Qa\x02\x95V[\x90V[a\x15@\x90Qa\x01\xA1V[\x90V[`\xA8\x1B\x90V[\x90a\x15X`\xFF`\xA8\x1B\x91a\x15CV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x15k\x90a\x01\xA1V[\x90V[\x90V[\x90a\x15\x86a\x15\x81a\x15\x8D\x92a\x15bV[a\x15nV[\x82Ta\x15IV[\x90UV[Q\x90V[`\x1F` \x91\x01\x04\x90V[\x1B\x90V[\x91\x90`\x08a\x15\xBE\x91\x02\x91a\x15\xB8_\x19\x84a\x15\x9FV[\x92a\x15\x9FV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x91\x90a\x15\xDEa\x15\xD9a\x15\xE6\x93a\x06\xD2V[a\x13\xF6V[\x90\x83Ta\x15\xA3V[\x90UV[a\x15\xFC\x91a\x15\xF6a\x0CHV[\x91a\x15\xC8V[V[[\x81\x81\x10a\x16\nWPPV[\x80a\x16\x17_`\x01\x93a\x15\xEAV[\x01a\x15\xFFV[\x91\x90`\x1F\x81\x11a\x16-W[PPPV[a\x169a\x16^\x93a\x07\xD6V[\x90` a\x16E\x84a\x15\x95V[\x83\x01\x93\x10a\x16fW[a\x16W\x90a\x15\x95V[\x01\x90a\x15\xFEV[_\x80\x80a\x16(V[\x91Pa\x16W\x81\x92\x90Pa\x16NV[\x90a\x16\x84\x90_\x19\x90`\x08\x02a\x03\xD6V[\x19\x16\x90V[\x81a\x16\x93\x91a\x16tV[\x90`\x02\x02\x17\x90V[\x90a\x16\xA5\x81a\x02\xBAV[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x17eWa\x16\xC9\x82a\x16\xC3\x85Ta\x07\xA3V[\x85a\x16\x1DV[` \x90`\x1F\x83\x11`\x01\x14a\x16\xFDW\x91\x80\x91a\x16\xEC\x93_\x92a\x16\xF1W[PPa\x16\x89V[\x90U[V[\x90\x91P\x01Q_\x80a\x16\xE5V[`\x1F\x19\x83\x16\x91a\x17\x0C\x85a\x07\xD6V[\x92_[\x81\x81\x10a\x17MWP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x173W[PPP\x02\x01\x90Ua\x16\xEFV[a\x17C\x91\x01Q`\x1F\x84\x16\x90a\x16tV[\x90U_\x80\x80a\x17'V[\x91\x93` `\x01\x81\x92\x87\x87\x01Q\x81U\x01\x95\x01\x92\x01a\x17\x0FV[a\x08xV[\x90a\x17t\x91a\x16\x9BV[V[\x90a\x17\xD1```\x01a\x17\xD7\x94a\x17\x99_\x82\x01a\x17\x93_\x88\x01a\x14\xDEV[\x90a\x15\tV[a\x17\xB1_\x82\x01a\x17\xAB` \x88\x01a\x15)V[\x90a\x0E\xA2V[a\x17\xC9_\x82\x01a\x17\xC3`@\x88\x01a\x156V[\x90a\x15qV[\x01\x92\x01a\x15\x91V[\x90a\x17jV[V[\x90a\x17\xE3\x91a\x17vV[V[\x91\x90a\x17\xFF\x81a\x17\xF8\x81a\x18\x04\x95a\x02\xBEV[\x80\x95a\x14\x8CV[a\x02\xD2V[\x01\x90V[\x93\x92\x90a\x18&` \x91a\x18.\x94`@\x88\x01\x91\x88\x83\x03_\x8A\x01Ra\x17\xE5V[\x94\x01\x90a\x02\xADV[V[\x93\x92\x91\x90\x93P\x83a\x18Qa\x18Ka\x18F_a\x0CuV[a\x02\x08V[\x91a\x02\x08V[\x14a\x19\xB6Wa\x18ja\x18e`\x02\x86\x90a\x03\xC0V[a\x0C\x95V[\x80a\x18}a\x18w_a\x0EXV[\x91a\x02UV[\x14\x15\x90\x81a\x19\x99W[Pa\x19vWa\x18\xA7a\x18\xA0a\x18\x9B`\x03a\x0C\x95V[a\x13\xC4V[`\x03a\x13\xF9V[a\x18\xB1`\x03a\x0C\x95V[\x93a\x19\x0E\x81a\x18\xFDa\x18\xF4_`\x01a\x18\xEF\x88\x91a\x18\xE6\x8B\x94a\x18\xDDa\x18\xD4a\x14.V[\x99_\x8B\x01a\x14;V[` \x89\x01a\x14IV[`@\x87\x01a\x14WV[a\x14\xCDV[``\x83\x01a\x14\xDBV[a\x19\t`\x01\x88\x90a\x06\xEEV[a\x17\xD9V[a\x19#\x85a\x19\x1E`\x02\x84\x90a\x03\xC0V[a\x13\xF9V[\x84\x90\x91\x92_\x93a\x19qa\x19_a\x19Y\x7F\xAE\x9F\xC2\xEA\xAE\xCF@O1\x86\xE15\x0FC\x8Dy+\xBD\xCC\xB8\xDB\x86#!\xD1\xD9\xBF`_\xEE\x9Bk\x95a\x06\xD2V[\x95a\x03\xB4V[\x95a\x19ha\x01BV[\x93\x84\x93\x84a\x18\x08V[\x03\x90\xA3V[a\x19~a\x01BV[c\xFCu>]`\xE0\x1B\x81R\x80a\x19\x95`\x04\x82\x01a\x060V[\x03\x90\xFD[a\x19\xB0\x91Pa\x19\xAA_\x91`\x01a\x06\xEEV[\x01a\x07\x82V[_a\x18\x86V[a\x19\xBEa\x01BV[c\xE6\xC4${`\xE0\x1B\x81R\x80a\x19\xD5`\x04\x82\x01a\x060V[\x03\x90\xFD[\x90a\x19\xEC\x92\x91a\x19\xE7a\x0CHV[a\x13\x91V[\x90V[\x90a\x1A\n\x91a\x1A\x05a\x1A\0\x82a\x10TV[a\x1AKV[a\x1A\x0CV[V[\x90a\x1A\x16\x91a\x1BMV[PV[\x90a\x1A#\x91a\x19\xEFV[V[a\x1A-a\x0C\x04V[Pa\x1AGa\x1AAc\x01\xFF\xC9\xA7`\xE0\x1Ba\x01TV[\x91a\x01TV[\x14\x90V[a\x1A]\x90a\x1AWa\x1B@V[\x90a\x1C\x11V[V[\x90a\x1Ak`\xFF\x91a\n\x98V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x1A\x8Aa\x1A\x85a\x1A\x91\x92a\x15bV[a\x15nV[\x82Ta\x1A_V[\x90UV[a\x1A\x9Da\x0C\x04V[Pa\x1A\xB2a\x1A\xAC\x82\x84\x90a\x12\xD9V[\x15a\x01\xA1V[_\x14a\x1B:Wa\x1A\xD9`\x01a\x1A\xD4_a\x1A\xCC\x81\x86\x90a\x10\x1AV[\x01\x85\x90a\x12\xA2V[a\x1AuV[\x90a\x1A\xE2a\x1B@V[\x90a\x1B\x1Fa\x1B\x19a\x1B\x13\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r\x95a\x10\x0EV[\x92a\x03\xB4V[\x92a\x03\xB4V[\x92a\x1B(a\x01BV[\x80a\x1B2\x81a\x060V[\x03\x90\xA4`\x01\x90V[PP_\x90V[a\x1BHa\x0CLV[P3\x90V[a\x1BUa\x0C\x04V[Pa\x1Ba\x81\x83\x90a\x12\xD9V[_\x14a\x1B\xE8Wa\x1B\x87_a\x1B\x82_a\x1Bz\x81\x86\x90a\x10\x1AV[\x01\x85\x90a\x12\xA2V[a\x1AuV[\x90a\x1B\x90a\x1B@V[\x90a\x1B\xCDa\x1B\xC7a\x1B\xC1\x7F\xF69\x1F\\2\xD9\xC6\x9D*G\xEAg\x0BD)t\xB595\xD1\xED\xC7\xFDd\xEB!\xE0G\xA89\x17\x1B\x95a\x10\x0EV[\x92a\x03\xB4V[\x92a\x03\xB4V[\x92a\x1B\xD6a\x01BV[\x80a\x1B\xE0\x81a\x060V[\x03\x90\xA4`\x01\x90V[PP_\x90V[\x91` a\x1C\x0F\x92\x94\x93a\x1C\x08`@\x82\x01\x96_\x83\x01\x90a\x02eV[\x01\x90a\x05\xACV[V[\x90a\x1C&a\x1C \x83\x83\x90a\x12\xD9V[\x15a\x01\xA1V[a\x1C.WPPV[a\x1COa\x1C9a\x01BV[\x92\x83\x92c\xE2Q}?`\xE0\x1B\x84R`\x04\x84\x01a\x1B\xEEV[\x03\x90\xFD\xFE\xA2dipfsX\"\x12 T\xBB#\x0Fv\xDB\xED\x8FB\xEEPj\xD5\xB1X8\x95\x06\xFBX\xE2\x0ET|D&\xD6\xC9\xD1\x10oVdsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b610c00565b61001d5f3561013c565b806301ffc9a714610137578063026ff3df1461013257806305db37201461012d5780630f3bcabd146101285780631292a2821461012357806318f539931461011e578063248a9ca3146101195780632f2ff15d1461011457806336568abe1461010f5780633e141b031461010a57806363de53231461010557806375b238fc146101005780637cc24b07146100fb57806391d14854146100f65780639e549515146100f1578063a217fddf146100ec578063ad47878a146100e75763d547741f0361000e57610bcc565b610b96565b610ad0565b610a60565b610a2a565b6109f5565b6109c0565b610958565b61069d565b610669565b610635565b6105ce565b610533565b6104e0565b6104a7565b610431565b610350565b6101c8565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b63ffffffff60e01b1690565b61016981610154565b0361017057565b5f80fd5b9050359061018182610160565b565b9060208282031261019c57610199915f01610174565b90565b61014c565b151590565b6101af906101a1565b9052565b91906101c6905f602085019401906101a6565b565b346101f8576101f46101e36101de366004610183565b610c08565b6101eb610142565b918291826101b3565b0390f35b610148565b60018060a01b031690565b610211906101fd565b90565b61021d81610208565b0361022457565b5f80fd5b9050359061023582610214565b565b906020828203126102505761024d915f01610228565b90565b61014c565b90565b61026190610255565b9052565b61026e90610208565b9052565b634e487b7160e01b5f52602160045260245ffd5b6003111561029057565b610272565b9061029f82610286565b565b6102aa90610295565b90565b6102b6906102a1565b9052565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b6102fb610304602093610309936102f2816102ba565b938480936102be565b958691016102c7565b6102d2565b0190565b90926103409061033661034d969461032c60808601975f870190610258565b6020850190610265565b60408301906102ad565b60608184039101526102dc565b90565b346103845761038061036b610366366004610237565b610cb1565b90610377949294610142565b9485948561030d565b0390f35b610148565b90565b6103a061039b6103a5926101fd565b610389565b6101fd565b90565b6103b19061038c565b90565b6103bd906103a8565b90565b906103ca906103b4565b5f5260205260405f2090565b1c90565b90565b6103ed9060086103f293026103d6565b6103da565b90565b9061040091546103dd565b90565b610419906104146002915f926103c0565b6103f5565b90565b919061042f905f60208501940190610258565b565b346104615761045d61044c610447366004610237565b610403565b610454610142565b9182918261041c565b0390f35b610148565b61046f81610255565b0361047657565b5f80fd5b9050359061048782610466565b565b906020828203126104a25761049f915f0161047a565b90565b61014c565b346104db576104d76104c26104bd366004610489565b610d9d565b906104ce949294610142565b9485948561030d565b0390f35b610148565b346105105761050c6104fb6104f6366004610237565b610ff6565b610503610142565b9182918261041c565b0390f35b610148565b5f91031261051f57565b61014c565b61053060035f906103f5565b90565b3461056357610543366004610515565b61055f61054e610524565b610556610142565b9182918261041c565b0390f35b610148565b90565b61057481610568565b0361057b57565b5f80fd5b9050359061058c8261056b565b565b906020828203126105a7576105a4915f0161057f565b90565b61014c565b6105b590610568565b9052565b91906105cc905f602085019401906105ac565b565b346105fe576105fa6105e96105e436600461058e565b611054565b6105f1610142565b918291826105b9565b0390f35b610148565b919060408382031261062b578061061f610628925f860161057f565b93602001610228565b90565b61014c565b5f0190565b346106645761064e610648366004610603565b9061109f565b610656610142565b8061066081610630565b0390f35b610148565b346106985761068261067c366004610603565b906110ab565b61068a610142565b8061069481610630565b0390f35b610148565b346106cd576106c96106b86106b3366004610489565b6110fa565b6106c0610142565b918291826101b3565b0390f35b610148565b6106e66106e16106eb92610255565b610389565b610255565b90565b906106f8906106d2565b5f5260205260405f2090565b5f1c90565b60018060a01b031690565b61072061072591610704565b610709565b90565b6107329054610714565b90565b60a01c90565b60ff1690565b61074d61075291610735565b61073b565b90565b61075f9054610741565b90565b60a81c90565b60ff1690565b61077a61077f91610762565b610768565b90565b61078c905461076e565b90565b634e487b7160e01b5f52602260045260245ffd5b90600160028304921680156107c3575b60208310146107be57565b61078f565b91607f16916107b3565b60209181520190565b5f5260205f2090565b905f92918054906107f96107f2836107a3565b80946107cd565b916001811690815f146108505750600114610814575b505050565b61082191929394506107d6565b915f925b81841061083857505001905f808061080f565b60018160209295939554848601520191019290610825565b92949550505060ff19168252151560200201905f808061080f565b90610875916107df565b90565b634e487b7160e01b5f52604160045260245ffd5b90610896906102d2565b810190811067ffffffffffffffff8211176108b057604052565b610878565b906108d56108ce926108c5610142565b9384809261086b565b038361088c565b565b6108e29060016106ee565b906108ee5f8301610728565b916108fa5f8201610755565b91610912600161090b5f8501610782565b93016108b5565b90565b90926109489061093e610955969461093460808601975f870190610265565b60208501906102ad565b60408301906101a6565b60608184039101526102dc565b90565b3461098c5761098861097361096e366004610489565b6108d7565b9061097f949294610142565b94859485610915565b0390f35b610148565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177590565b6109bd610991565b90565b346109f0576109d0366004610515565b6109ec6109db6109b5565b6109e3610142565b918291826105b9565b0390f35b610148565b34610a2557610a21610a10610a0b366004610237565b61128e565b610a18610142565b9182918261041c565b0390f35b610148565b34610a5b57610a57610a46610a40366004610603565b906112d9565b610a4e610142565b918291826101b3565b0390f35b610148565b34610a9057610a8c610a7b610a76366004610237565b611302565b610a83610142565b918291826101b3565b0390f35b610148565b90565b5f1b90565b610ab1610aac610ab692610a95565b610a98565b610568565b90565b610ac25f610a9d565b90565b610acd610ab9565b90565b34610b0057610ae0366004610515565b610afc610aeb610ac5565b610af3610142565b918291826105b9565b0390f35b610148565b5f80fd5b5f80fd5b5f80fd5b909182601f83011215610b4b5781359167ffffffffffffffff8311610b46576020019260018302840111610b4157565b610b0d565b610b09565b610b05565b919091604081840312610b9157610b69835f8301610228565b92602082013567ffffffffffffffff8111610b8c57610b889201610b11565b9091565b610150565b61014c565b34610bc757610bc3610bb2610bac366004610b50565b916119d9565b610bba610142565b9182918261041c565b0390f35b610148565b34610bfb57610be5610bdf366004610603565b90611a19565b610bed610142565b80610bf781610630565b0390f35b610148565b5f80fd5b5f90565b610c10610c04565b5080610c2b610c25637965db0b60e01b610154565b91610154565b14908115610c38575b5090565b610c429150611a25565b5f610c34565b5f90565b5f90565b5f90565b606090565b610c6d610c68610c7292610a95565b610389565b6101fd565b90565b610c7e90610c59565b90565b610c8d610c9291610704565b6103da565b90565b610c9f9054610c81565b90565b90565b610cae906108b5565b90565b610cb9610c48565b50610cc2610c4c565b50610ccb610c50565b50610cd4610c54565b5080610cf0610cea610ce55f610c75565b610208565b91610208565b14610d7a57610d09610d04600283906103c0565b610c95565b90610d1e610d19600184906106ee565b610ca2565b91610d33610d2d5f8501610782565b156101a1565b610d57579092610d546001610d495f8601610755565b940192949392610ca5565b90565b610d5f610142565b633d560c9160e11b815280610d7660048201610630565b0390fd5b610d82610142565b63e6c4247b60e01b815280610d9960048201610630565b0390fd5b610da5610c48565b50610dae610c4c565b50610db7610c50565b50610dc0610c54565b50610dd5610dd0600183906106ee565b610ca2565b90610dea610de45f8401610782565b156101a1565b610e1857610df95f8301610728565b92610e156001610e0a5f8601610755565b940192949392610ca5565b90565b610e20610142565b633d560c9160e11b815280610e3760048201610630565b0390fd5b90610e5591610e50610e4b610991565b611a4b565b610ed7565b90565b610e6c610e67610e7192610a95565b610389565b610255565b90565b60a01b90565b90610e8960ff60a01b91610e74565b9181191691161790565b610e9c90610295565b90565b90565b90610eb7610eb2610ebe92610e93565b610e9f565b8254610e7a565b9055565b9190610ed5905f602085019401906102ad565b565b5080610ef3610eed610ee85f610c75565b610208565b91610208565b14610fd357610f06610f0b9160026103c0565b610c95565b9081610f1f610f195f610e58565b91610255565b148015610fae575b610f8b57610f4360015f610f3d600186906106ee565b01610ea2565b81600190610f86610f747fc3f8265654a25915479f105bb8f31bd2ed7f77dfbbdffe534048f9287192cb41926106d2565b92610f7d610142565b91829182610ec2565b0390a2565b610f93610142565b633d560c9160e11b815280610faa60048201610630565b0390fd5b50610fce610fc85f610fc2600186906106ee565b01610782565b156101a1565b610f27565b610fdb610142565b63e6c4247b60e01b815280610ff260048201610630565b0390fd5b61100790611002610c48565b610e3b565b90565b5f90565b61101790610568565b90565b906110249061100e565b5f5260205260405f2090565b90565b61103f61104491610704565b611030565b90565b6110519054611033565b90565b600161106c6110729261106561100a565b505f61101a565b01611047565b90565b906110909161108b61108682611054565b611a4b565b611092565b565b9061109c91611a95565b50565b906110a991611075565b565b90806110c66110c06110bb611b40565b610208565b91610208565b036110d7576110d491611b4d565b50565b6110df610142565b63334bd91960e11b8152806110f660048201610630565b0390fd5b61111161111691611109610c04565b5060016106ee565b610ca2565b6111215f8201610782565b908161112c575b5090565b61113891505f01610755565b61114b6111456001610295565b91610295565b145f611128565b9061116c91611167611162610991565b611a4b565b61116f565b90565b508061118b6111856111805f610c75565b610208565b91610208565b1461126b5761119e6111a39160026103c0565b610c95565b90816111b76111b15f610e58565b91610255565b148015611246575b611223576111db60025f6111d5600186906106ee565b01610ea2565b8160029061121e61120c7fc3f8265654a25915479f105bb8f31bd2ed7f77dfbbdffe534048f9287192cb41926106d2565b92611215610142565b91829182610ec2565b0390a2565b61122b610142565b633d560c9160e11b81528061124260048201610630565b0390fd5b506112666112605f61125a600186906106ee565b01610782565b156101a1565b6111bf565b611273610142565b63e6c4247b60e01b81528061128a60048201610630565b0390fd5b61129f9061129a610c48565b611152565b90565b906112ac906103b4565b5f5260205260405f2090565b6112c46112c991610704565b610768565b90565b6112d690546112b8565b90565b6112ff915f6112f46112fa936112ed610c04565b508261101a565b016112a2565b6112cc565b90565b61130a610c04565b508061132661132061131b5f610c75565b610208565b91610208565b1461138c5761134b61134461133f6113509360026103c0565b610c95565b60016106ee565b610ca2565b61135b5f8201610782565b9081611366575b5090565b61137291505f01610755565b61138561137f6001610295565b91610295565b145f611362565b505f90565b906113ad9392916113a86113a3610991565b611a4b565b611830565b90565b634e487b7160e01b5f52601160045260245ffd5b6113cd90610255565b5f1981146113db5760010190565b6113b0565b906113ec5f1991610a98565b9181191691161790565b90565b9061140e611409611415926106d2565b6113f6565b82546113e0565b9055565b9061142c611425610142565b928361088c565b565b6114386080611419565b90565b9061144590610208565b9052565b9061145390610295565b9052565b90611461906101a1565b9052565b5f80fd5b67ffffffffffffffff8111611487576114836020916102d2565b0190565b610878565b90825f939282370152565b909291926114ac6114a782611469565b611419565b938185526020850190828401116114c8576114c69261148c565b565b611465565b6114d8913691611497565b90565b52565b6114e89051610208565b90565b906114fc60018060a01b0391610a98565b9181191691161790565b90565b9061151e611519611525926103b4565b611506565b82546114eb565b9055565b6115339051610295565b90565b61154090516101a1565b90565b60a81b90565b9061155860ff60a81b91611543565b9181191691161790565b61156b906101a1565b90565b90565b9061158661158161158d92611562565b61156e565b8254611549565b9055565b5190565b601f602091010490565b1b90565b919060086115be9102916115b85f198461159f565b9261159f565b9181191691161790565b91906115de6115d96115e6936106d2565b6113f6565b9083546115a3565b9055565b6115fc916115f6610c48565b916115c8565b565b5b81811061160a575050565b806116175f6001936115ea565b016115ff565b9190601f811161162d575b505050565b61163961165e936107d6565b90602061164584611595565b83019310611666575b61165790611595565b01906115fe565b5f8080611628565b91506116578192905061164e565b90611684905f19906008026103d6565b191690565b8161169391611674565b906002021790565b906116a5816102ba565b9067ffffffffffffffff8211611765576116c9826116c385546107a3565b8561161d565b602090601f83116001146116fd579180916116ec935f926116f1575b5050611689565b90555b565b90915001515f806116e5565b601f1983169161170c856107d6565b925f5b81811061174d57509160029391856001969410611733575b505050020190556116ef565b611743910151601f841690611674565b90555f8080611727565b9193602060018192878701518155019501920161170f565b610878565b906117749161169b565b565b906117d1606060016117d7946117995f82016117935f88016114de565b90611509565b6117b15f82016117ab60208801611529565b90610ea2565b6117c95f82016117c360408801611536565b90611571565b019201611591565b9061176a565b565b906117e391611776565b565b91906117ff816117f881611804956102be565b809561148c565b6102d2565b0190565b93929061182660209161182e9460408801918883035f8a01526117e5565b9401906102ad565b565b9392919093508361185161184b6118465f610c75565b610208565b91610208565b146119b65761186a611865600286906103c0565b610c95565b8061187d6118775f610e58565b91610255565b14159081611999575b50611976576118a76118a061189b6003610c95565b6113c4565b60036113f9565b6118b16003610c95565b9361190e816118fd6118f45f60016118ef88916118e68b946118dd6118d461142e565b995f8b0161143b565b60208901611449565b60408701611457565b6114cd565b606083016114db565b611909600188906106ee565b6117d9565b6119238561191e600284906103c0565b6113f9565b849091925f9361197161195f6119597fae9fc2eaaecf404f3186e1350f438d792bbdccb8db862321d1d9bf605fee9b6b956106d2565b956103b4565b95611968610142565b93849384611808565b0390a3565b61197e610142565b63fc753e5d60e01b81528061199560048201610630565b0390fd5b6119b091506119aa5f9160016106ee565b01610782565b5f611886565b6119be610142565b63e6c4247b60e01b8152806119d560048201610630565b0390fd5b906119ec92916119e7610c48565b611391565b90565b90611a0a91611a05611a0082611054565b611a4b565b611a0c565b565b90611a1691611b4d565b50565b90611a23916119ef565b565b611a2d610c04565b50611a47611a416301ffc9a760e01b610154565b91610154565b1490565b611a5d90611a57611b40565b90611c11565b565b90611a6b60ff91610a98565b9181191691161790565b90611a8a611a85611a9192611562565b61156e565b8254611a5f565b9055565b611a9d610c04565b50611ab2611aac8284906112d9565b156101a1565b5f14611b3a57611ad96001611ad45f611acc81869061101a565b0185906112a2565b611a75565b90611ae2611b40565b90611b1f611b19611b137f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9561100e565b926103b4565b926103b4565b92611b28610142565b80611b3281610630565b0390a4600190565b50505f90565b611b48610c4c565b503390565b611b55610c04565b50611b618183906112d9565b5f14611be857611b875f611b825f611b7a81869061101a565b0185906112a2565b611a75565b90611b90611b40565b90611bcd611bc7611bc17ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9561100e565b926103b4565b926103b4565b92611bd6610142565b80611be081610630565b0390a4600190565b50505f90565b916020611c0f929493611c0860408201965f830190610265565b01906105ac565b565b90611c26611c208383906112d9565b156101a1565b611c2e575050565b611c4f611c39610142565b92839263e2517d3f60e01b845260048401611bee565b0390fdfea264697066735822122054bb230f76dbed8f42ee506ad5b158389506fb58e20e547c4426d6c9d1106f5664736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x0C\0V[a\0\x1D_5a\x01<V[\x80c\x01\xFF\xC9\xA7\x14a\x017W\x80c\x02o\xF3\xDF\x14a\x012W\x80c\x05\xDB7 \x14a\x01-W\x80c\x0F;\xCA\xBD\x14a\x01(W\x80c\x12\x92\xA2\x82\x14a\x01#W\x80c\x18\xF59\x93\x14a\x01\x1EW\x80c$\x8A\x9C\xA3\x14a\x01\x19W\x80c//\xF1]\x14a\x01\x14W\x80c6V\x8A\xBE\x14a\x01\x0FW\x80c>\x14\x1B\x03\x14a\x01\nW\x80cc\xDES#\x14a\x01\x05W\x80cu\xB28\xFC\x14a\x01\0W\x80c|\xC2K\x07\x14a\0\xFBW\x80c\x91\xD1HT\x14a\0\xF6W\x80c\x9ET\x95\x15\x14a\0\xF1W\x80c\xA2\x17\xFD\xDF\x14a\0\xECW\x80c\xADG\x87\x8A\x14a\0\xE7Wc\xD5Gt\x1F\x03a\0\x0EWa\x0B\xCCV[a\x0B\x96V[a\n\xD0V[a\n`V[a\n*V[a\t\xF5V[a\t\xC0V[a\tXV[a\x06\x9DV[a\x06iV[a\x065V[a\x05\xCEV[a\x053V[a\x04\xE0V[a\x04\xA7V[a\x041V[a\x03PV[a\x01\xC8V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[c\xFF\xFF\xFF\xFF`\xE0\x1B\x16\x90V[a\x01i\x81a\x01TV[\x03a\x01pWV[_\x80\xFD[\x90P5\x90a\x01\x81\x82a\x01`V[V[\x90` \x82\x82\x03\x12a\x01\x9CWa\x01\x99\x91_\x01a\x01tV[\x90V[a\x01LV[\x15\x15\x90V[a\x01\xAF\x90a\x01\xA1V[\x90RV[\x91\x90a\x01\xC6\x90_` \x85\x01\x94\x01\x90a\x01\xA6V[V[4a\x01\xF8Wa\x01\xF4a\x01\xE3a\x01\xDE6`\x04a\x01\x83V[a\x0C\x08V[a\x01\xEBa\x01BV[\x91\x82\x91\x82a\x01\xB3V[\x03\x90\xF3[a\x01HV[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02\x11\x90a\x01\xFDV[\x90V[a\x02\x1D\x81a\x02\x08V[\x03a\x02$WV[_\x80\xFD[\x90P5\x90a\x025\x82a\x02\x14V[V[\x90` \x82\x82\x03\x12a\x02PWa\x02M\x91_\x01a\x02(V[\x90V[a\x01LV[\x90V[a\x02a\x90a\x02UV[\x90RV[a\x02n\x90a\x02\x08V[\x90RV[cNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[`\x03\x11\x15a\x02\x90WV[a\x02rV[\x90a\x02\x9F\x82a\x02\x86V[V[a\x02\xAA\x90a\x02\x95V[\x90V[a\x02\xB6\x90a\x02\xA1V[\x90RV[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x02\xFBa\x03\x04` \x93a\x03\t\x93a\x02\xF2\x81a\x02\xBAV[\x93\x84\x80\x93a\x02\xBEV[\x95\x86\x91\x01a\x02\xC7V[a\x02\xD2V[\x01\x90V[\x90\x92a\x03@\x90a\x036a\x03M\x96\x94a\x03,`\x80\x86\x01\x97_\x87\x01\x90a\x02XV[` \x85\x01\x90a\x02eV[`@\x83\x01\x90a\x02\xADV[``\x81\x84\x03\x91\x01Ra\x02\xDCV[\x90V[4a\x03\x84Wa\x03\x80a\x03ka\x03f6`\x04a\x027V[a\x0C\xB1V[\x90a\x03w\x94\x92\x94a\x01BV[\x94\x85\x94\x85a\x03\rV[\x03\x90\xF3[a\x01HV[\x90V[a\x03\xA0a\x03\x9Ba\x03\xA5\x92a\x01\xFDV[a\x03\x89V[a\x01\xFDV[\x90V[a\x03\xB1\x90a\x03\x8CV[\x90V[a\x03\xBD\x90a\x03\xA8V[\x90V[\x90a\x03\xCA\x90a\x03\xB4V[_R` R`@_ \x90V[\x1C\x90V[\x90V[a\x03\xED\x90`\x08a\x03\xF2\x93\x02a\x03\xD6V[a\x03\xDAV[\x90V[\x90a\x04\0\x91Ta\x03\xDDV[\x90V[a\x04\x19\x90a\x04\x14`\x02\x91_\x92a\x03\xC0V[a\x03\xF5V[\x90V[\x91\x90a\x04/\x90_` \x85\x01\x94\x01\x90a\x02XV[V[4a\x04aWa\x04]a\x04La\x04G6`\x04a\x027V[a\x04\x03V[a\x04Ta\x01BV[\x91\x82\x91\x82a\x04\x1CV[\x03\x90\xF3[a\x01HV[a\x04o\x81a\x02UV[\x03a\x04vWV[_\x80\xFD[\x90P5\x90a\x04\x87\x82a\x04fV[V[\x90` \x82\x82\x03\x12a\x04\xA2Wa\x04\x9F\x91_\x01a\x04zV[\x90V[a\x01LV[4a\x04\xDBWa\x04\xD7a\x04\xC2a\x04\xBD6`\x04a\x04\x89V[a\r\x9DV[\x90a\x04\xCE\x94\x92\x94a\x01BV[\x94\x85\x94\x85a\x03\rV[\x03\x90\xF3[a\x01HV[4a\x05\x10Wa\x05\x0Ca\x04\xFBa\x04\xF66`\x04a\x027V[a\x0F\xF6V[a\x05\x03a\x01BV[\x91\x82\x91\x82a\x04\x1CV[\x03\x90\xF3[a\x01HV[_\x91\x03\x12a\x05\x1FWV[a\x01LV[a\x050`\x03_\x90a\x03\xF5V[\x90V[4a\x05cWa\x05C6`\x04a\x05\x15V[a\x05_a\x05Na\x05$V[a\x05Va\x01BV[\x91\x82\x91\x82a\x04\x1CV[\x03\x90\xF3[a\x01HV[\x90V[a\x05t\x81a\x05hV[\x03a\x05{WV[_\x80\xFD[\x90P5\x90a\x05\x8C\x82a\x05kV[V[\x90` \x82\x82\x03\x12a\x05\xA7Wa\x05\xA4\x91_\x01a\x05\x7FV[\x90V[a\x01LV[a\x05\xB5\x90a\x05hV[\x90RV[\x91\x90a\x05\xCC\x90_` \x85\x01\x94\x01\x90a\x05\xACV[V[4a\x05\xFEWa\x05\xFAa\x05\xE9a\x05\xE46`\x04a\x05\x8EV[a\x10TV[a\x05\xF1a\x01BV[\x91\x82\x91\x82a\x05\xB9V[\x03\x90\xF3[a\x01HV[\x91\x90`@\x83\x82\x03\x12a\x06+W\x80a\x06\x1Fa\x06(\x92_\x86\x01a\x05\x7FV[\x93` \x01a\x02(V[\x90V[a\x01LV[_\x01\x90V[4a\x06dWa\x06Na\x06H6`\x04a\x06\x03V[\x90a\x10\x9FV[a\x06Va\x01BV[\x80a\x06`\x81a\x060V[\x03\x90\xF3[a\x01HV[4a\x06\x98Wa\x06\x82a\x06|6`\x04a\x06\x03V[\x90a\x10\xABV[a\x06\x8Aa\x01BV[\x80a\x06\x94\x81a\x060V[\x03\x90\xF3[a\x01HV[4a\x06\xCDWa\x06\xC9a\x06\xB8a\x06\xB36`\x04a\x04\x89V[a\x10\xFAV[a\x06\xC0a\x01BV[\x91\x82\x91\x82a\x01\xB3V[\x03\x90\xF3[a\x01HV[a\x06\xE6a\x06\xE1a\x06\xEB\x92a\x02UV[a\x03\x89V[a\x02UV[\x90V[\x90a\x06\xF8\x90a\x06\xD2V[_R` R`@_ \x90V[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x07 a\x07%\x91a\x07\x04V[a\x07\tV[\x90V[a\x072\x90Ta\x07\x14V[\x90V[`\xA0\x1C\x90V[`\xFF\x16\x90V[a\x07Ma\x07R\x91a\x075V[a\x07;V[\x90V[a\x07_\x90Ta\x07AV[\x90V[`\xA8\x1C\x90V[`\xFF\x16\x90V[a\x07za\x07\x7F\x91a\x07bV[a\x07hV[\x90V[a\x07\x8C\x90Ta\x07nV[\x90V[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\x07\xC3W[` \x83\x10\x14a\x07\xBEWV[a\x07\x8FV[\x91`\x7F\x16\x91a\x07\xB3V[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\x07\xF9a\x07\xF2\x83a\x07\xA3V[\x80\x94a\x07\xCDV[\x91`\x01\x81\x16\x90\x81_\x14a\x08PWP`\x01\x14a\x08\x14W[PPPV[a\x08!\x91\x92\x93\x94Pa\x07\xD6V[\x91_\x92[\x81\x84\x10a\x088WPP\x01\x90_\x80\x80a\x08\x0FV[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\x08%V[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\x08\x0FV[\x90a\x08u\x91a\x07\xDFV[\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x08\x96\x90a\x02\xD2V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x08\xB0W`@RV[a\x08xV[\x90a\x08\xD5a\x08\xCE\x92a\x08\xC5a\x01BV[\x93\x84\x80\x92a\x08kV[\x03\x83a\x08\x8CV[V[a\x08\xE2\x90`\x01a\x06\xEEV[\x90a\x08\xEE_\x83\x01a\x07(V[\x91a\x08\xFA_\x82\x01a\x07UV[\x91a\t\x12`\x01a\t\x0B_\x85\x01a\x07\x82V[\x93\x01a\x08\xB5V[\x90V[\x90\x92a\tH\x90a\t>a\tU\x96\x94a\t4`\x80\x86\x01\x97_\x87\x01\x90a\x02eV[` \x85\x01\x90a\x02\xADV[`@\x83\x01\x90a\x01\xA6V[``\x81\x84\x03\x91\x01Ra\x02\xDCV[\x90V[4a\t\x8CWa\t\x88a\tsa\tn6`\x04a\x04\x89V[a\x08\xD7V[\x90a\t\x7F\x94\x92\x94a\x01BV[\x94\x85\x94\x85a\t\x15V[\x03\x90\xF3[a\x01HV[\x7F\xA4\x98\x07 \\\xE4\xD3U\t.\xF5\xA8\xA1\x8FV\xE8\x91<\xF4\xA2\x01\xFB\xE2\x87\x82[\tV\x93\xC2\x17u\x90V[a\t\xBDa\t\x91V[\x90V[4a\t\xF0Wa\t\xD06`\x04a\x05\x15V[a\t\xECa\t\xDBa\t\xB5V[a\t\xE3a\x01BV[\x91\x82\x91\x82a\x05\xB9V[\x03\x90\xF3[a\x01HV[4a\n%Wa\n!a\n\x10a\n\x0B6`\x04a\x027V[a\x12\x8EV[a\n\x18a\x01BV[\x91\x82\x91\x82a\x04\x1CV[\x03\x90\xF3[a\x01HV[4a\n[Wa\nWa\nFa\n@6`\x04a\x06\x03V[\x90a\x12\xD9V[a\nNa\x01BV[\x91\x82\x91\x82a\x01\xB3V[\x03\x90\xF3[a\x01HV[4a\n\x90Wa\n\x8Ca\n{a\nv6`\x04a\x027V[a\x13\x02V[a\n\x83a\x01BV[\x91\x82\x91\x82a\x01\xB3V[\x03\x90\xF3[a\x01HV[\x90V[_\x1B\x90V[a\n\xB1a\n\xACa\n\xB6\x92a\n\x95V[a\n\x98V[a\x05hV[\x90V[a\n\xC2_a\n\x9DV[\x90V[a\n\xCDa\n\xB9V[\x90V[4a\x0B\0Wa\n\xE06`\x04a\x05\x15V[a\n\xFCa\n\xEBa\n\xC5V[a\n\xF3a\x01BV[\x91\x82\x91\x82a\x05\xB9V[\x03\x90\xF3[a\x01HV[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x0BKW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x0BFW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x0BAWV[a\x0B\rV[a\x0B\tV[a\x0B\x05V[\x91\x90\x91`@\x81\x84\x03\x12a\x0B\x91Wa\x0Bi\x83_\x83\x01a\x02(V[\x92` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x0B\x8CWa\x0B\x88\x92\x01a\x0B\x11V[\x90\x91V[a\x01PV[a\x01LV[4a\x0B\xC7Wa\x0B\xC3a\x0B\xB2a\x0B\xAC6`\x04a\x0BPV[\x91a\x19\xD9V[a\x0B\xBAa\x01BV[\x91\x82\x91\x82a\x04\x1CV[\x03\x90\xF3[a\x01HV[4a\x0B\xFBWa\x0B\xE5a\x0B\xDF6`\x04a\x06\x03V[\x90a\x1A\x19V[a\x0B\xEDa\x01BV[\x80a\x0B\xF7\x81a\x060V[\x03\x90\xF3[a\x01HV[_\x80\xFD[_\x90V[a\x0C\x10a\x0C\x04V[P\x80a\x0C+a\x0C%cye\xDB\x0B`\xE0\x1Ba\x01TV[\x91a\x01TV[\x14\x90\x81\x15a\x0C8W[P\x90V[a\x0CB\x91Pa\x1A%V[_a\x0C4V[_\x90V[_\x90V[_\x90V[``\x90V[a\x0Cma\x0Cha\x0Cr\x92a\n\x95V[a\x03\x89V[a\x01\xFDV[\x90V[a\x0C~\x90a\x0CYV[\x90V[a\x0C\x8Da\x0C\x92\x91a\x07\x04V[a\x03\xDAV[\x90V[a\x0C\x9F\x90Ta\x0C\x81V[\x90V[\x90V[a\x0C\xAE\x90a\x08\xB5V[\x90V[a\x0C\xB9a\x0CHV[Pa\x0C\xC2a\x0CLV[Pa\x0C\xCBa\x0CPV[Pa\x0C\xD4a\x0CTV[P\x80a\x0C\xF0a\x0C\xEAa\x0C\xE5_a\x0CuV[a\x02\x08V[\x91a\x02\x08V[\x14a\rzWa\r\ta\r\x04`\x02\x83\x90a\x03\xC0V[a\x0C\x95V[\x90a\r\x1Ea\r\x19`\x01\x84\x90a\x06\xEEV[a\x0C\xA2V[\x91a\r3a\r-_\x85\x01a\x07\x82V[\x15a\x01\xA1V[a\rWW\x90\x92a\rT`\x01a\rI_\x86\x01a\x07UV[\x94\x01\x92\x94\x93\x92a\x0C\xA5V[\x90V[a\r_a\x01BV[c=V\x0C\x91`\xE1\x1B\x81R\x80a\rv`\x04\x82\x01a\x060V[\x03\x90\xFD[a\r\x82a\x01BV[c\xE6\xC4${`\xE0\x1B\x81R\x80a\r\x99`\x04\x82\x01a\x060V[\x03\x90\xFD[a\r\xA5a\x0CHV[Pa\r\xAEa\x0CLV[Pa\r\xB7a\x0CPV[Pa\r\xC0a\x0CTV[Pa\r\xD5a\r\xD0`\x01\x83\x90a\x06\xEEV[a\x0C\xA2V[\x90a\r\xEAa\r\xE4_\x84\x01a\x07\x82V[\x15a\x01\xA1V[a\x0E\x18Wa\r\xF9_\x83\x01a\x07(V[\x92a\x0E\x15`\x01a\x0E\n_\x86\x01a\x07UV[\x94\x01\x92\x94\x93\x92a\x0C\xA5V[\x90V[a\x0E a\x01BV[c=V\x0C\x91`\xE1\x1B\x81R\x80a\x0E7`\x04\x82\x01a\x060V[\x03\x90\xFD[\x90a\x0EU\x91a\x0EPa\x0EKa\t\x91V[a\x1AKV[a\x0E\xD7V[\x90V[a\x0Ela\x0Ega\x0Eq\x92a\n\x95V[a\x03\x89V[a\x02UV[\x90V[`\xA0\x1B\x90V[\x90a\x0E\x89`\xFF`\xA0\x1B\x91a\x0EtV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0E\x9C\x90a\x02\x95V[\x90V[\x90V[\x90a\x0E\xB7a\x0E\xB2a\x0E\xBE\x92a\x0E\x93V[a\x0E\x9FV[\x82Ta\x0EzV[\x90UV[\x91\x90a\x0E\xD5\x90_` \x85\x01\x94\x01\x90a\x02\xADV[V[P\x80a\x0E\xF3a\x0E\xEDa\x0E\xE8_a\x0CuV[a\x02\x08V[\x91a\x02\x08V[\x14a\x0F\xD3Wa\x0F\x06a\x0F\x0B\x91`\x02a\x03\xC0V[a\x0C\x95V[\x90\x81a\x0F\x1Fa\x0F\x19_a\x0EXV[\x91a\x02UV[\x14\x80\x15a\x0F\xAEW[a\x0F\x8BWa\x0FC`\x01_a\x0F=`\x01\x86\x90a\x06\xEEV[\x01a\x0E\xA2V[\x81`\x01\x90a\x0F\x86a\x0Ft\x7F\xC3\xF8&VT\xA2Y\x15G\x9F\x10[\xB8\xF3\x1B\xD2\xED\x7Fw\xDF\xBB\xDF\xFES@H\xF9(q\x92\xCBA\x92a\x06\xD2V[\x92a\x0F}a\x01BV[\x91\x82\x91\x82a\x0E\xC2V[\x03\x90\xA2V[a\x0F\x93a\x01BV[c=V\x0C\x91`\xE1\x1B\x81R\x80a\x0F\xAA`\x04\x82\x01a\x060V[\x03\x90\xFD[Pa\x0F\xCEa\x0F\xC8_a\x0F\xC2`\x01\x86\x90a\x06\xEEV[\x01a\x07\x82V[\x15a\x01\xA1V[a\x0F'V[a\x0F\xDBa\x01BV[c\xE6\xC4${`\xE0\x1B\x81R\x80a\x0F\xF2`\x04\x82\x01a\x060V[\x03\x90\xFD[a\x10\x07\x90a\x10\x02a\x0CHV[a\x0E;V[\x90V[_\x90V[a\x10\x17\x90a\x05hV[\x90V[\x90a\x10$\x90a\x10\x0EV[_R` R`@_ \x90V[\x90V[a\x10?a\x10D\x91a\x07\x04V[a\x100V[\x90V[a\x10Q\x90Ta\x103V[\x90V[`\x01a\x10la\x10r\x92a\x10ea\x10\nV[P_a\x10\x1AV[\x01a\x10GV[\x90V[\x90a\x10\x90\x91a\x10\x8Ba\x10\x86\x82a\x10TV[a\x1AKV[a\x10\x92V[V[\x90a\x10\x9C\x91a\x1A\x95V[PV[\x90a\x10\xA9\x91a\x10uV[V[\x90\x80a\x10\xC6a\x10\xC0a\x10\xBBa\x1B@V[a\x02\x08V[\x91a\x02\x08V[\x03a\x10\xD7Wa\x10\xD4\x91a\x1BMV[PV[a\x10\xDFa\x01BV[c3K\xD9\x19`\xE1\x1B\x81R\x80a\x10\xF6`\x04\x82\x01a\x060V[\x03\x90\xFD[a\x11\x11a\x11\x16\x91a\x11\ta\x0C\x04V[P`\x01a\x06\xEEV[a\x0C\xA2V[a\x11!_\x82\x01a\x07\x82V[\x90\x81a\x11,W[P\x90V[a\x118\x91P_\x01a\x07UV[a\x11Ka\x11E`\x01a\x02\x95V[\x91a\x02\x95V[\x14_a\x11(V[\x90a\x11l\x91a\x11ga\x11ba\t\x91V[a\x1AKV[a\x11oV[\x90V[P\x80a\x11\x8Ba\x11\x85a\x11\x80_a\x0CuV[a\x02\x08V[\x91a\x02\x08V[\x14a\x12kWa\x11\x9Ea\x11\xA3\x91`\x02a\x03\xC0V[a\x0C\x95V[\x90\x81a\x11\xB7a\x11\xB1_a\x0EXV[\x91a\x02UV[\x14\x80\x15a\x12FW[a\x12#Wa\x11\xDB`\x02_a\x11\xD5`\x01\x86\x90a\x06\xEEV[\x01a\x0E\xA2V[\x81`\x02\x90a\x12\x1Ea\x12\x0C\x7F\xC3\xF8&VT\xA2Y\x15G\x9F\x10[\xB8\xF3\x1B\xD2\xED\x7Fw\xDF\xBB\xDF\xFES@H\xF9(q\x92\xCBA\x92a\x06\xD2V[\x92a\x12\x15a\x01BV[\x91\x82\x91\x82a\x0E\xC2V[\x03\x90\xA2V[a\x12+a\x01BV[c=V\x0C\x91`\xE1\x1B\x81R\x80a\x12B`\x04\x82\x01a\x060V[\x03\x90\xFD[Pa\x12fa\x12`_a\x12Z`\x01\x86\x90a\x06\xEEV[\x01a\x07\x82V[\x15a\x01\xA1V[a\x11\xBFV[a\x12sa\x01BV[c\xE6\xC4${`\xE0\x1B\x81R\x80a\x12\x8A`\x04\x82\x01a\x060V[\x03\x90\xFD[a\x12\x9F\x90a\x12\x9Aa\x0CHV[a\x11RV[\x90V[\x90a\x12\xAC\x90a\x03\xB4V[_R` R`@_ \x90V[a\x12\xC4a\x12\xC9\x91a\x07\x04V[a\x07hV[\x90V[a\x12\xD6\x90Ta\x12\xB8V[\x90V[a\x12\xFF\x91_a\x12\xF4a\x12\xFA\x93a\x12\xEDa\x0C\x04V[P\x82a\x10\x1AV[\x01a\x12\xA2V[a\x12\xCCV[\x90V[a\x13\na\x0C\x04V[P\x80a\x13&a\x13 a\x13\x1B_a\x0CuV[a\x02\x08V[\x91a\x02\x08V[\x14a\x13\x8CWa\x13Ka\x13Da\x13?a\x13P\x93`\x02a\x03\xC0V[a\x0C\x95V[`\x01a\x06\xEEV[a\x0C\xA2V[a\x13[_\x82\x01a\x07\x82V[\x90\x81a\x13fW[P\x90V[a\x13r\x91P_\x01a\x07UV[a\x13\x85a\x13\x7F`\x01a\x02\x95V[\x91a\x02\x95V[\x14_a\x13bV[P_\x90V[\x90a\x13\xAD\x93\x92\x91a\x13\xA8a\x13\xA3a\t\x91V[a\x1AKV[a\x180V[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x13\xCD\x90a\x02UV[_\x19\x81\x14a\x13\xDBW`\x01\x01\x90V[a\x13\xB0V[\x90a\x13\xEC_\x19\x91a\n\x98V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x90a\x14\x0Ea\x14\ta\x14\x15\x92a\x06\xD2V[a\x13\xF6V[\x82Ta\x13\xE0V[\x90UV[\x90a\x14,a\x14%a\x01BV[\x92\x83a\x08\x8CV[V[a\x148`\x80a\x14\x19V[\x90V[\x90a\x14E\x90a\x02\x08V[\x90RV[\x90a\x14S\x90a\x02\x95V[\x90RV[\x90a\x14a\x90a\x01\xA1V[\x90RV[_\x80\xFD[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x14\x87Wa\x14\x83` \x91a\x02\xD2V[\x01\x90V[a\x08xV[\x90\x82_\x93\x92\x827\x01RV[\x90\x92\x91\x92a\x14\xACa\x14\xA7\x82a\x14iV[a\x14\x19V[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\x14\xC8Wa\x14\xC6\x92a\x14\x8CV[V[a\x14eV[a\x14\xD8\x916\x91a\x14\x97V[\x90V[RV[a\x14\xE8\x90Qa\x02\x08V[\x90V[\x90a\x14\xFC`\x01\x80`\xA0\x1B\x03\x91a\n\x98V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x90a\x15\x1Ea\x15\x19a\x15%\x92a\x03\xB4V[a\x15\x06V[\x82Ta\x14\xEBV[\x90UV[a\x153\x90Qa\x02\x95V[\x90V[a\x15@\x90Qa\x01\xA1V[\x90V[`\xA8\x1B\x90V[\x90a\x15X`\xFF`\xA8\x1B\x91a\x15CV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x15k\x90a\x01\xA1V[\x90V[\x90V[\x90a\x15\x86a\x15\x81a\x15\x8D\x92a\x15bV[a\x15nV[\x82Ta\x15IV[\x90UV[Q\x90V[`\x1F` \x91\x01\x04\x90V[\x1B\x90V[\x91\x90`\x08a\x15\xBE\x91\x02\x91a\x15\xB8_\x19\x84a\x15\x9FV[\x92a\x15\x9FV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x91\x90a\x15\xDEa\x15\xD9a\x15\xE6\x93a\x06\xD2V[a\x13\xF6V[\x90\x83Ta\x15\xA3V[\x90UV[a\x15\xFC\x91a\x15\xF6a\x0CHV[\x91a\x15\xC8V[V[[\x81\x81\x10a\x16\nWPPV[\x80a\x16\x17_`\x01\x93a\x15\xEAV[\x01a\x15\xFFV[\x91\x90`\x1F\x81\x11a\x16-W[PPPV[a\x169a\x16^\x93a\x07\xD6V[\x90` a\x16E\x84a\x15\x95V[\x83\x01\x93\x10a\x16fW[a\x16W\x90a\x15\x95V[\x01\x90a\x15\xFEV[_\x80\x80a\x16(V[\x91Pa\x16W\x81\x92\x90Pa\x16NV[\x90a\x16\x84\x90_\x19\x90`\x08\x02a\x03\xD6V[\x19\x16\x90V[\x81a\x16\x93\x91a\x16tV[\x90`\x02\x02\x17\x90V[\x90a\x16\xA5\x81a\x02\xBAV[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x17eWa\x16\xC9\x82a\x16\xC3\x85Ta\x07\xA3V[\x85a\x16\x1DV[` \x90`\x1F\x83\x11`\x01\x14a\x16\xFDW\x91\x80\x91a\x16\xEC\x93_\x92a\x16\xF1W[PPa\x16\x89V[\x90U[V[\x90\x91P\x01Q_\x80a\x16\xE5V[`\x1F\x19\x83\x16\x91a\x17\x0C\x85a\x07\xD6V[\x92_[\x81\x81\x10a\x17MWP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x173W[PPP\x02\x01\x90Ua\x16\xEFV[a\x17C\x91\x01Q`\x1F\x84\x16\x90a\x16tV[\x90U_\x80\x80a\x17'V[\x91\x93` `\x01\x81\x92\x87\x87\x01Q\x81U\x01\x95\x01\x92\x01a\x17\x0FV[a\x08xV[\x90a\x17t\x91a\x16\x9BV[V[\x90a\x17\xD1```\x01a\x17\xD7\x94a\x17\x99_\x82\x01a\x17\x93_\x88\x01a\x14\xDEV[\x90a\x15\tV[a\x17\xB1_\x82\x01a\x17\xAB` \x88\x01a\x15)V[\x90a\x0E\xA2V[a\x17\xC9_\x82\x01a\x17\xC3`@\x88\x01a\x156V[\x90a\x15qV[\x01\x92\x01a\x15\x91V[\x90a\x17jV[V[\x90a\x17\xE3\x91a\x17vV[V[\x91\x90a\x17\xFF\x81a\x17\xF8\x81a\x18\x04\x95a\x02\xBEV[\x80\x95a\x14\x8CV[a\x02\xD2V[\x01\x90V[\x93\x92\x90a\x18&` \x91a\x18.\x94`@\x88\x01\x91\x88\x83\x03_\x8A\x01Ra\x17\xE5V[\x94\x01\x90a\x02\xADV[V[\x93\x92\x91\x90\x93P\x83a\x18Qa\x18Ka\x18F_a\x0CuV[a\x02\x08V[\x91a\x02\x08V[\x14a\x19\xB6Wa\x18ja\x18e`\x02\x86\x90a\x03\xC0V[a\x0C\x95V[\x80a\x18}a\x18w_a\x0EXV[\x91a\x02UV[\x14\x15\x90\x81a\x19\x99W[Pa\x19vWa\x18\xA7a\x18\xA0a\x18\x9B`\x03a\x0C\x95V[a\x13\xC4V[`\x03a\x13\xF9V[a\x18\xB1`\x03a\x0C\x95V[\x93a\x19\x0E\x81a\x18\xFDa\x18\xF4_`\x01a\x18\xEF\x88\x91a\x18\xE6\x8B\x94a\x18\xDDa\x18\xD4a\x14.V[\x99_\x8B\x01a\x14;V[` \x89\x01a\x14IV[`@\x87\x01a\x14WV[a\x14\xCDV[``\x83\x01a\x14\xDBV[a\x19\t`\x01\x88\x90a\x06\xEEV[a\x17\xD9V[a\x19#\x85a\x19\x1E`\x02\x84\x90a\x03\xC0V[a\x13\xF9V[\x84\x90\x91\x92_\x93a\x19qa\x19_a\x19Y\x7F\xAE\x9F\xC2\xEA\xAE\xCF@O1\x86\xE15\x0FC\x8Dy+\xBD\xCC\xB8\xDB\x86#!\xD1\xD9\xBF`_\xEE\x9Bk\x95a\x06\xD2V[\x95a\x03\xB4V[\x95a\x19ha\x01BV[\x93\x84\x93\x84a\x18\x08V[\x03\x90\xA3V[a\x19~a\x01BV[c\xFCu>]`\xE0\x1B\x81R\x80a\x19\x95`\x04\x82\x01a\x060V[\x03\x90\xFD[a\x19\xB0\x91Pa\x19\xAA_\x91`\x01a\x06\xEEV[\x01a\x07\x82V[_a\x18\x86V[a\x19\xBEa\x01BV[c\xE6\xC4${`\xE0\x1B\x81R\x80a\x19\xD5`\x04\x82\x01a\x060V[\x03\x90\xFD[\x90a\x19\xEC\x92\x91a\x19\xE7a\x0CHV[a\x13\x91V[\x90V[\x90a\x1A\n\x91a\x1A\x05a\x1A\0\x82a\x10TV[a\x1AKV[a\x1A\x0CV[V[\x90a\x1A\x16\x91a\x1BMV[PV[\x90a\x1A#\x91a\x19\xEFV[V[a\x1A-a\x0C\x04V[Pa\x1AGa\x1AAc\x01\xFF\xC9\xA7`\xE0\x1Ba\x01TV[\x91a\x01TV[\x14\x90V[a\x1A]\x90a\x1AWa\x1B@V[\x90a\x1C\x11V[V[\x90a\x1Ak`\xFF\x91a\n\x98V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x1A\x8Aa\x1A\x85a\x1A\x91\x92a\x15bV[a\x15nV[\x82Ta\x1A_V[\x90UV[a\x1A\x9Da\x0C\x04V[Pa\x1A\xB2a\x1A\xAC\x82\x84\x90a\x12\xD9V[\x15a\x01\xA1V[_\x14a\x1B:Wa\x1A\xD9`\x01a\x1A\xD4_a\x1A\xCC\x81\x86\x90a\x10\x1AV[\x01\x85\x90a\x12\xA2V[a\x1AuV[\x90a\x1A\xE2a\x1B@V[\x90a\x1B\x1Fa\x1B\x19a\x1B\x13\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r\x95a\x10\x0EV[\x92a\x03\xB4V[\x92a\x03\xB4V[\x92a\x1B(a\x01BV[\x80a\x1B2\x81a\x060V[\x03\x90\xA4`\x01\x90V[PP_\x90V[a\x1BHa\x0CLV[P3\x90V[a\x1BUa\x0C\x04V[Pa\x1Ba\x81\x83\x90a\x12\xD9V[_\x14a\x1B\xE8Wa\x1B\x87_a\x1B\x82_a\x1Bz\x81\x86\x90a\x10\x1AV[\x01\x85\x90a\x12\xA2V[a\x1AuV[\x90a\x1B\x90a\x1B@V[\x90a\x1B\xCDa\x1B\xC7a\x1B\xC1\x7F\xF69\x1F\\2\xD9\xC6\x9D*G\xEAg\x0BD)t\xB595\xD1\xED\xC7\xFDd\xEB!\xE0G\xA89\x17\x1B\x95a\x10\x0EV[\x92a\x03\xB4V[\x92a\x03\xB4V[\x92a\x1B\xD6a\x01BV[\x80a\x1B\xE0\x81a\x060V[\x03\x90\xA4`\x01\x90V[PP_\x90V[\x91` a\x1C\x0F\x92\x94\x93a\x1C\x08`@\x82\x01\x96_\x83\x01\x90a\x02eV[\x01\x90a\x05\xACV[V[\x90a\x1C&a\x1C \x83\x83\x90a\x12\xD9V[\x15a\x01\xA1V[a\x1C.WPPV[a\x1COa\x1C9a\x01BV[\x92\x83\x92c\xE2Q}?`\xE0\x1B\x84R`\x04\x84\x01a\x1B\xEEV[\x03\x90\xFD\xFE\xA2dipfsX\"\x12 T\xBB#\x0Fv\xDB\xED\x8FB\xEEPj\xD5\xB1X8\x95\x06\xFBX\xE2\x0ET|D&\xD6\xC9\xD1\x10oVdsolcC\0\x08\x19\x003",
    );
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ApplicationStatus(u8);
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<ApplicationStatus> for u8 {
            #[inline]
            fn stv_to_tokens(
                &self,
            ) -> <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'_> {
                alloy_sol_types::private::SolTypeValue::<
                    alloy::sol_types::sol_data::Uint<8>,
                >::stv_to_tokens(self)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::tokenize(self)
                    .0
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(self, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encoded_size(self)
            }
        }
        #[automatically_derived]
        impl ApplicationStatus {
            /// The Solidity type name.
            pub const NAME: &'static str = stringify!(@ name);
            /// Convert from the underlying value type.
            #[inline]
            pub const fn from(value: u8) -> Self {
                Self(value)
            }
            /// Return the underlying value.
            #[inline]
            pub const fn into(self) -> u8 {
                self.0
            }
            /// Return the single encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode(&self.0)
            }
            /// Return the packed encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode_packed(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode_packed(&self.0)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ApplicationStatus {
            type RustType = u8;
            type Token<'a> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = Self::NAME;
            const ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                Self::type_check(token).is_ok()
            }
            #[inline]
            fn type_check(token: &Self::Token<'_>) -> alloy_sol_types::Result<()> {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::type_check(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::detokenize(token)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ApplicationStatus {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::topic_preimage_length(rust)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(rust, out)
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic(rust)
            }
        }
    };
    /**Custom error with signature `AccessControlBadConfirmation()` and selector `0x6697b232`.
```solidity
error AccessControlBadConfirmation();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AccessControlBadConfirmation {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AccessControlBadConfirmation>
        for UnderlyingRustTuple<'_> {
            fn from(value: AccessControlBadConfirmation) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for AccessControlBadConfirmation {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AccessControlBadConfirmation {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AccessControlBadConfirmation()";
            const SELECTOR: [u8; 4] = [102u8, 151u8, 178u8, 50u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `AccessControlUnauthorizedAccount(address,bytes32)` and selector `0xe2517d3f`.
```solidity
error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AccessControlUnauthorizedAccount {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub neededRole: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AccessControlUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: AccessControlUnauthorizedAccount) -> Self {
                (value.account, value.neededRole)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for AccessControlUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    account: tuple.0,
                    neededRole: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AccessControlUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AccessControlUnauthorizedAccount(address,bytes32)";
            const SELECTOR: [u8; 4] = [226u8, 81u8, 125u8, 63u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.neededRole),
                )
            }
        }
    };
    /**Custom error with signature `AgentAlreadyApplied()` and selector `0xfc753e5d`.
```solidity
error AgentAlreadyApplied();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AgentAlreadyApplied {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AgentAlreadyApplied> for UnderlyingRustTuple<'_> {
            fn from(value: AgentAlreadyApplied) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AgentAlreadyApplied {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AgentAlreadyApplied {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AgentAlreadyApplied()";
            const SELECTOR: [u8; 4] = [252u8, 117u8, 62u8, 93u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `ApplicantNotFound()` and selector `0x7aac1922`.
```solidity
error ApplicantNotFound();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ApplicantNotFound {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ApplicantNotFound> for UnderlyingRustTuple<'_> {
            fn from(value: ApplicantNotFound) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ApplicantNotFound {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ApplicantNotFound {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ApplicantNotFound()";
            const SELECTOR: [u8; 4] = [122u8, 172u8, 25u8, 34u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `InvalidAddress()` and selector `0xe6c4247b`.
```solidity
error InvalidAddress();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidAddress {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidAddress> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidAddress) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidAddress {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidAddress {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidAddress()";
            const SELECTOR: [u8; 4] = [230u8, 196u8, 36u8, 123u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Event with signature `ApplicantAdded(uint256,address,bytes,uint8)` and selector `0xae9fc2eaaecf404f3186e1350f438d792bbdccb8db862321d1d9bf605fee9b6b`.
```solidity
event ApplicantAdded(uint256 indexed applicantId, address indexed agentAddress, bytes additionalData, ApplicationStatus status);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct ApplicantAdded {
        #[allow(missing_docs)]
        pub applicantId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub agentAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub additionalData: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub status: <ApplicationStatus as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for ApplicantAdded {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Bytes, ApplicationStatus);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "ApplicantAdded(uint256,address,bytes,uint8)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                174u8,
                159u8,
                194u8,
                234u8,
                174u8,
                207u8,
                64u8,
                79u8,
                49u8,
                134u8,
                225u8,
                53u8,
                15u8,
                67u8,
                141u8,
                121u8,
                43u8,
                189u8,
                204u8,
                184u8,
                219u8,
                134u8,
                35u8,
                33u8,
                209u8,
                217u8,
                191u8,
                96u8,
                95u8,
                238u8,
                155u8,
                107u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    applicantId: topics.1,
                    agentAddress: topics.2,
                    additionalData: data.0,
                    status: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.additionalData,
                    ),
                    <ApplicationStatus as alloy_sol_types::SolType>::tokenize(
                        &self.status,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.applicantId.clone(),
                    self.agentAddress.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.applicantId);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.agentAddress,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for ApplicantAdded {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&ApplicantAdded> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &ApplicantAdded) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `ApplicantStatusUpdated(uint256,uint8)` and selector `0xc3f8265654a25915479f105bb8f31bd2ed7f77dfbbdffe534048f9287192cb41`.
```solidity
event ApplicantStatusUpdated(uint256 indexed applicantId, ApplicationStatus status);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct ApplicantStatusUpdated {
        #[allow(missing_docs)]
        pub applicantId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub status: <ApplicationStatus as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for ApplicantStatusUpdated {
            type DataTuple<'a> = (ApplicationStatus,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            const SIGNATURE: &'static str = "ApplicantStatusUpdated(uint256,uint8)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                195u8,
                248u8,
                38u8,
                86u8,
                84u8,
                162u8,
                89u8,
                21u8,
                71u8,
                159u8,
                16u8,
                91u8,
                184u8,
                243u8,
                27u8,
                210u8,
                237u8,
                127u8,
                119u8,
                223u8,
                187u8,
                223u8,
                254u8,
                83u8,
                64u8,
                72u8,
                249u8,
                40u8,
                113u8,
                146u8,
                203u8,
                65u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    applicantId: topics.1,
                    status: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <ApplicationStatus as alloy_sol_types::SolType>::tokenize(
                        &self.status,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.applicantId.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.applicantId);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for ApplicantStatusUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&ApplicantStatusUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &ApplicantStatusUpdated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RoleAdminChanged(bytes32,bytes32,bytes32)` and selector `0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff`.
```solidity
event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleAdminChanged {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub previousAdminRole: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub newAdminRole: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleAdminChanged {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            const SIGNATURE: &'static str = "RoleAdminChanged(bytes32,bytes32,bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                189u8,
                121u8,
                184u8,
                111u8,
                254u8,
                10u8,
                184u8,
                232u8,
                119u8,
                97u8,
                81u8,
                81u8,
                66u8,
                23u8,
                205u8,
                124u8,
                172u8,
                213u8,
                44u8,
                144u8,
                159u8,
                102u8,
                71u8,
                92u8,
                58u8,
                244u8,
                78u8,
                18u8,
                159u8,
                11u8,
                0u8,
                255u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    previousAdminRole: topics.2,
                    newAdminRole: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.previousAdminRole.clone(),
                    self.newAdminRole.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.previousAdminRole);
                out[3usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.newAdminRole);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleAdminChanged {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleAdminChanged> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleAdminChanged) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RoleGranted(bytes32,address,address)` and selector `0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d`.
```solidity
event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleGranted {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleGranted {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RoleGranted(bytes32,address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                47u8,
                135u8,
                136u8,
                17u8,
                126u8,
                126u8,
                255u8,
                29u8,
                130u8,
                233u8,
                38u8,
                236u8,
                121u8,
                73u8,
                1u8,
                209u8,
                124u8,
                120u8,
                2u8,
                74u8,
                80u8,
                39u8,
                9u8,
                64u8,
                48u8,
                69u8,
                64u8,
                167u8,
                51u8,
                101u8,
                111u8,
                13u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    account: topics.2,
                    sender: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.account.clone(),
                    self.sender.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.account,
                );
                out[3usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleGranted {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleGranted> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleGranted) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RoleRevoked(bytes32,address,address)` and selector `0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b`.
```solidity
event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleRevoked {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleRevoked {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RoleRevoked(bytes32,address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                246u8,
                57u8,
                31u8,
                92u8,
                50u8,
                217u8,
                198u8,
                157u8,
                42u8,
                71u8,
                234u8,
                103u8,
                11u8,
                68u8,
                41u8,
                116u8,
                181u8,
                57u8,
                53u8,
                209u8,
                237u8,
                199u8,
                253u8,
                100u8,
                235u8,
                33u8,
                224u8,
                71u8,
                168u8,
                57u8,
                23u8,
                27u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    account: topics.2,
                    sender: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.account.clone(),
                    self.sender.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.account,
                );
                out[3usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleRevoked {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleRevoked> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleRevoked) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address admin);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub admin: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value.admin,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { admin: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin,
                    ),
                )
            }
        }
    };
    /**Function with signature `ADMIN_ROLE()` and selector `0x75b238fc`.
```solidity
function ADMIN_ROLE() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ADMIN_ROLECall {}
    ///Container type for the return parameters of the [`ADMIN_ROLE()`](ADMIN_ROLECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ADMIN_ROLEReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ADMIN_ROLECall> for UnderlyingRustTuple<'_> {
                fn from(value: ADMIN_ROLECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ADMIN_ROLECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ADMIN_ROLEReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ADMIN_ROLEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ADMIN_ROLEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ADMIN_ROLECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ADMIN_ROLEReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ADMIN_ROLE()";
            const SELECTOR: [u8; 4] = [117u8, 178u8, 56u8, 252u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `DEFAULT_ADMIN_ROLE()` and selector `0xa217fddf`.
```solidity
function DEFAULT_ADMIN_ROLE() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_ADMIN_ROLECall {}
    ///Container type for the return parameters of the [`DEFAULT_ADMIN_ROLE()`](DEFAULT_ADMIN_ROLECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_ADMIN_ROLEReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_ADMIN_ROLECall>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_ADMIN_ROLECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_ADMIN_ROLECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_ADMIN_ROLEReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_ADMIN_ROLEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_ADMIN_ROLEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for DEFAULT_ADMIN_ROLECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = DEFAULT_ADMIN_ROLEReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "DEFAULT_ADMIN_ROLE()";
            const SELECTOR: [u8; 4] = [162u8, 23u8, 253u8, 223u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `addApplicant(address,bytes)` and selector `0xad47878a`.
```solidity
function addApplicant(address agentAddress, bytes memory additionalData) external returns (uint256 applicantId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addApplicantCall {
        #[allow(missing_docs)]
        pub agentAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub additionalData: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`addApplicant(address,bytes)`](addApplicantCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addApplicantReturn {
        #[allow(missing_docs)]
        pub applicantId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addApplicantCall> for UnderlyingRustTuple<'_> {
                fn from(value: addApplicantCall) -> Self {
                    (value.agentAddress, value.additionalData)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for addApplicantCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        agentAddress: tuple.0,
                        additionalData: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addApplicantReturn> for UnderlyingRustTuple<'_> {
                fn from(value: addApplicantReturn) -> Self {
                    (value.applicantId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for addApplicantReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { applicantId: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for addApplicantCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = addApplicantReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "addApplicant(address,bytes)";
            const SELECTOR: [u8; 4] = [173u8, 71u8, 135u8, 138u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.agentAddress,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.additionalData,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `agentToApplicantId(address)` and selector `0x05db3720`.
```solidity
function agentToApplicantId(address) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct agentToApplicantIdCall {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`agentToApplicantId(address)`](agentToApplicantIdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct agentToApplicantIdReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<agentToApplicantIdCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: agentToApplicantIdCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for agentToApplicantIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<agentToApplicantIdReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: agentToApplicantIdReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for agentToApplicantIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for agentToApplicantIdCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = agentToApplicantIdReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "agentToApplicantId(address)";
            const SELECTOR: [u8; 4] = [5u8, 219u8, 55u8, 32u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `applicantCount()` and selector `0x18f53993`.
```solidity
function applicantCount() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct applicantCountCall {}
    ///Container type for the return parameters of the [`applicantCount()`](applicantCountCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct applicantCountReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<applicantCountCall> for UnderlyingRustTuple<'_> {
                fn from(value: applicantCountCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for applicantCountCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<applicantCountReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: applicantCountReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for applicantCountReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for applicantCountCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = applicantCountReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "applicantCount()";
            const SELECTOR: [u8; 4] = [24u8, 245u8, 57u8, 147u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `applicants(uint256)` and selector `0x63de5323`.
```solidity
function applicants(uint256) external view returns (address agentAddress, ApplicationStatus status, bool isValid, bytes memory additionalData);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct applicantsCall {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`applicants(uint256)`](applicantsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct applicantsReturn {
        #[allow(missing_docs)]
        pub agentAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub status: <ApplicationStatus as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub isValid: bool,
        #[allow(missing_docs)]
        pub additionalData: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<applicantsCall> for UnderlyingRustTuple<'_> {
                fn from(value: applicantsCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for applicantsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                ApplicationStatus,
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                <ApplicationStatus as alloy::sol_types::SolType>::RustType,
                bool,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<applicantsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: applicantsReturn) -> Self {
                    (
                        value.agentAddress,
                        value.status,
                        value.isValid,
                        value.additionalData,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for applicantsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        agentAddress: tuple.0,
                        status: tuple.1,
                        isValid: tuple.2,
                        additionalData: tuple.3,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for applicantsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = applicantsReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                ApplicationStatus,
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Bytes,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "applicants(uint256)";
            const SELECTOR: [u8; 4] = [99u8, 222u8, 83u8, 35u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._0),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `approveApplicant(address)` and selector `0x1292a282`.
```solidity
function approveApplicant(address agentAddress) external returns (uint256 applicantId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct approveApplicantCall {
        #[allow(missing_docs)]
        pub agentAddress: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`approveApplicant(address)`](approveApplicantCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct approveApplicantReturn {
        #[allow(missing_docs)]
        pub applicantId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<approveApplicantCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: approveApplicantCall) -> Self {
                    (value.agentAddress,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for approveApplicantCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { agentAddress: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<approveApplicantReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: approveApplicantReturn) -> Self {
                    (value.applicantId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for approveApplicantReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { applicantId: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for approveApplicantCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = approveApplicantReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "approveApplicant(address)";
            const SELECTOR: [u8; 4] = [18u8, 146u8, 162u8, 130u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.agentAddress,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `denyApplicant(address)` and selector `0x7cc24b07`.
```solidity
function denyApplicant(address agentAddress) external returns (uint256 applicantId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct denyApplicantCall {
        #[allow(missing_docs)]
        pub agentAddress: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`denyApplicant(address)`](denyApplicantCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct denyApplicantReturn {
        #[allow(missing_docs)]
        pub applicantId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<denyApplicantCall> for UnderlyingRustTuple<'_> {
                fn from(value: denyApplicantCall) -> Self {
                    (value.agentAddress,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for denyApplicantCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { agentAddress: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<denyApplicantReturn> for UnderlyingRustTuple<'_> {
                fn from(value: denyApplicantReturn) -> Self {
                    (value.applicantId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for denyApplicantReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { applicantId: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for denyApplicantCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = denyApplicantReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "denyApplicant(address)";
            const SELECTOR: [u8; 4] = [124u8, 194u8, 75u8, 7u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.agentAddress,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getApplicantByAddress(address)` and selector `0x026ff3df`.
```solidity
function getApplicantByAddress(address agentAddress) external view returns (uint256 applicantId, address, ApplicationStatus status, bytes memory additionalData);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getApplicantByAddressCall {
        #[allow(missing_docs)]
        pub agentAddress: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`getApplicantByAddress(address)`](getApplicantByAddressCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getApplicantByAddressReturn {
        #[allow(missing_docs)]
        pub applicantId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub _1: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub status: <ApplicationStatus as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub additionalData: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getApplicantByAddressCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getApplicantByAddressCall) -> Self {
                    (value.agentAddress,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getApplicantByAddressCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { agentAddress: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                ApplicationStatus,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                <ApplicationStatus as alloy::sol_types::SolType>::RustType,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getApplicantByAddressReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getApplicantByAddressReturn) -> Self {
                    (value.applicantId, value._1, value.status, value.additionalData)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getApplicantByAddressReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        applicantId: tuple.0,
                        _1: tuple.1,
                        status: tuple.2,
                        additionalData: tuple.3,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getApplicantByAddressCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getApplicantByAddressReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                ApplicationStatus,
                alloy::sol_types::sol_data::Bytes,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getApplicantByAddress(address)";
            const SELECTOR: [u8; 4] = [2u8, 111u8, 243u8, 223u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.agentAddress,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getApplicantById(uint256)` and selector `0x0f3bcabd`.
```solidity
function getApplicantById(uint256 applicantId) external view returns (uint256, address agentAddress, ApplicationStatus status, bytes memory additionalData);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getApplicantByIdCall {
        #[allow(missing_docs)]
        pub applicantId: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`getApplicantById(uint256)`](getApplicantByIdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getApplicantByIdReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub agentAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub status: <ApplicationStatus as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub additionalData: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getApplicantByIdCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getApplicantByIdCall) -> Self {
                    (value.applicantId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getApplicantByIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { applicantId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                ApplicationStatus,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                <ApplicationStatus as alloy::sol_types::SolType>::RustType,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getApplicantByIdReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getApplicantByIdReturn) -> Self {
                    (value._0, value.agentAddress, value.status, value.additionalData)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getApplicantByIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _0: tuple.0,
                        agentAddress: tuple.1,
                        status: tuple.2,
                        additionalData: tuple.3,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getApplicantByIdCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getApplicantByIdReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                ApplicationStatus,
                alloy::sol_types::sol_data::Bytes,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getApplicantById(uint256)";
            const SELECTOR: [u8; 4] = [15u8, 59u8, 202u8, 189u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.applicantId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getRoleAdmin(bytes32)` and selector `0x248a9ca3`.
```solidity
function getRoleAdmin(bytes32 role) external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRoleAdminCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`getRoleAdmin(bytes32)`](getRoleAdminCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRoleAdminReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRoleAdminCall> for UnderlyingRustTuple<'_> {
                fn from(value: getRoleAdminCall) -> Self {
                    (value.role,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getRoleAdminCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { role: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRoleAdminReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getRoleAdminReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getRoleAdminReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getRoleAdminCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getRoleAdminReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getRoleAdmin(bytes32)";
            const SELECTOR: [u8; 4] = [36u8, 138u8, 156u8, 163u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `grantRole(bytes32,address)` and selector `0x2f2ff15d`.
```solidity
function grantRole(bytes32 role, address account) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct grantRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`grantRole(bytes32,address)`](grantRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct grantRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<grantRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: grantRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for grantRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<grantRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: grantRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for grantRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for grantRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = grantRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "grantRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [47u8, 47u8, 241u8, 93u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `hasRole(bytes32,address)` and selector `0x91d14854`.
```solidity
function hasRole(bytes32 role, address account) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hasRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`hasRole(bytes32,address)`](hasRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hasRoleReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hasRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: hasRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for hasRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hasRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: hasRoleReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for hasRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for hasRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = hasRoleReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "hasRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [145u8, 209u8, 72u8, 84u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isPermittedByAddress(address)` and selector `0x9e549515`.
```solidity
function isPermittedByAddress(address agentAddress) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isPermittedByAddressCall {
        #[allow(missing_docs)]
        pub agentAddress: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`isPermittedByAddress(address)`](isPermittedByAddressCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isPermittedByAddressReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isPermittedByAddressCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: isPermittedByAddressCall) -> Self {
                    (value.agentAddress,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isPermittedByAddressCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { agentAddress: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isPermittedByAddressReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: isPermittedByAddressReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isPermittedByAddressReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isPermittedByAddressCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isPermittedByAddressReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isPermittedByAddress(address)";
            const SELECTOR: [u8; 4] = [158u8, 84u8, 149u8, 21u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.agentAddress,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isPermittedById(uint256)` and selector `0x3e141b03`.
```solidity
function isPermittedById(uint256 applicantId) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isPermittedByIdCall {
        #[allow(missing_docs)]
        pub applicantId: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`isPermittedById(uint256)`](isPermittedByIdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isPermittedByIdReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isPermittedByIdCall> for UnderlyingRustTuple<'_> {
                fn from(value: isPermittedByIdCall) -> Self {
                    (value.applicantId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isPermittedByIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { applicantId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isPermittedByIdReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: isPermittedByIdReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isPermittedByIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isPermittedByIdCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isPermittedByIdReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isPermittedById(uint256)";
            const SELECTOR: [u8; 4] = [62u8, 20u8, 27u8, 3u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.applicantId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `renounceRole(bytes32,address)` and selector `0x36568abe`.
```solidity
function renounceRole(bytes32 role, address callerConfirmation) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub callerConfirmation: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`renounceRole(bytes32,address)`](renounceRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: renounceRoleCall) -> Self {
                    (value.role, value.callerConfirmation)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for renounceRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        callerConfirmation: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: renounceRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for renounceRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [54u8, 86u8, 138u8, 190u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.callerConfirmation,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `revokeRole(bytes32,address)` and selector `0xd547741f`.
```solidity
function revokeRole(bytes32 role, address account) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct revokeRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`revokeRole(bytes32,address)`](revokeRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct revokeRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<revokeRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: revokeRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for revokeRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<revokeRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: revokeRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for revokeRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for revokeRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = revokeRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "revokeRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [213u8, 71u8, 116u8, 31u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `supportsInterface(bytes4)` and selector `0x01ffc9a7`.
```solidity
function supportsInterface(bytes4 interfaceId) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct supportsInterfaceCall {
        #[allow(missing_docs)]
        pub interfaceId: alloy::sol_types::private::FixedBytes<4>,
    }
    ///Container type for the return parameters of the [`supportsInterface(bytes4)`](supportsInterfaceCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct supportsInterfaceReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<4>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<supportsInterfaceCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: supportsInterfaceCall) -> Self {
                    (value.interfaceId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for supportsInterfaceCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { interfaceId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<supportsInterfaceReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: supportsInterfaceReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for supportsInterfaceReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for supportsInterfaceCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = supportsInterfaceReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "supportsInterface(bytes4)";
            const SELECTOR: [u8; 4] = [1u8, 255u8, 201u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        4,
                    > as alloy_sol_types::SolType>::tokenize(&self.interfaceId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`AgentApplication`](self) function calls.
    pub enum AgentApplicationCalls {
        #[allow(missing_docs)]
        ADMIN_ROLE(ADMIN_ROLECall),
        #[allow(missing_docs)]
        DEFAULT_ADMIN_ROLE(DEFAULT_ADMIN_ROLECall),
        #[allow(missing_docs)]
        addApplicant(addApplicantCall),
        #[allow(missing_docs)]
        agentToApplicantId(agentToApplicantIdCall),
        #[allow(missing_docs)]
        applicantCount(applicantCountCall),
        #[allow(missing_docs)]
        applicants(applicantsCall),
        #[allow(missing_docs)]
        approveApplicant(approveApplicantCall),
        #[allow(missing_docs)]
        denyApplicant(denyApplicantCall),
        #[allow(missing_docs)]
        getApplicantByAddress(getApplicantByAddressCall),
        #[allow(missing_docs)]
        getApplicantById(getApplicantByIdCall),
        #[allow(missing_docs)]
        getRoleAdmin(getRoleAdminCall),
        #[allow(missing_docs)]
        grantRole(grantRoleCall),
        #[allow(missing_docs)]
        hasRole(hasRoleCall),
        #[allow(missing_docs)]
        isPermittedByAddress(isPermittedByAddressCall),
        #[allow(missing_docs)]
        isPermittedById(isPermittedByIdCall),
        #[allow(missing_docs)]
        renounceRole(renounceRoleCall),
        #[allow(missing_docs)]
        revokeRole(revokeRoleCall),
        #[allow(missing_docs)]
        supportsInterface(supportsInterfaceCall),
    }
    #[automatically_derived]
    impl AgentApplicationCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [1u8, 255u8, 201u8, 167u8],
            [2u8, 111u8, 243u8, 223u8],
            [5u8, 219u8, 55u8, 32u8],
            [15u8, 59u8, 202u8, 189u8],
            [18u8, 146u8, 162u8, 130u8],
            [24u8, 245u8, 57u8, 147u8],
            [36u8, 138u8, 156u8, 163u8],
            [47u8, 47u8, 241u8, 93u8],
            [54u8, 86u8, 138u8, 190u8],
            [62u8, 20u8, 27u8, 3u8],
            [99u8, 222u8, 83u8, 35u8],
            [117u8, 178u8, 56u8, 252u8],
            [124u8, 194u8, 75u8, 7u8],
            [145u8, 209u8, 72u8, 84u8],
            [158u8, 84u8, 149u8, 21u8],
            [162u8, 23u8, 253u8, 223u8],
            [173u8, 71u8, 135u8, 138u8],
            [213u8, 71u8, 116u8, 31u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for AgentApplicationCalls {
        const NAME: &'static str = "AgentApplicationCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 18usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::ADMIN_ROLE(_) => {
                    <ADMIN_ROLECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::DEFAULT_ADMIN_ROLE(_) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::addApplicant(_) => {
                    <addApplicantCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::agentToApplicantId(_) => {
                    <agentToApplicantIdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::applicantCount(_) => {
                    <applicantCountCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::applicants(_) => {
                    <applicantsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::approveApplicant(_) => {
                    <approveApplicantCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::denyApplicant(_) => {
                    <denyApplicantCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getApplicantByAddress(_) => {
                    <getApplicantByAddressCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getApplicantById(_) => {
                    <getApplicantByIdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getRoleAdmin(_) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::grantRole(_) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::hasRole(_) => <hasRoleCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::isPermittedByAddress(_) => {
                    <isPermittedByAddressCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isPermittedById(_) => {
                    <isPermittedByIdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::renounceRole(_) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::revokeRole(_) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::supportsInterface(_) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<AgentApplicationCalls>] = &[
                {
                    fn supportsInterface(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationCalls> {
                        <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationCalls::supportsInterface)
                    }
                    supportsInterface
                },
                {
                    fn getApplicantByAddress(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationCalls> {
                        <getApplicantByAddressCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationCalls::getApplicantByAddress)
                    }
                    getApplicantByAddress
                },
                {
                    fn agentToApplicantId(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationCalls> {
                        <agentToApplicantIdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationCalls::agentToApplicantId)
                    }
                    agentToApplicantId
                },
                {
                    fn getApplicantById(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationCalls> {
                        <getApplicantByIdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationCalls::getApplicantById)
                    }
                    getApplicantById
                },
                {
                    fn approveApplicant(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationCalls> {
                        <approveApplicantCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationCalls::approveApplicant)
                    }
                    approveApplicant
                },
                {
                    fn applicantCount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationCalls> {
                        <applicantCountCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationCalls::applicantCount)
                    }
                    applicantCount
                },
                {
                    fn getRoleAdmin(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationCalls> {
                        <getRoleAdminCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationCalls::getRoleAdmin)
                    }
                    getRoleAdmin
                },
                {
                    fn grantRole(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationCalls> {
                        <grantRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationCalls::grantRole)
                    }
                    grantRole
                },
                {
                    fn renounceRole(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationCalls> {
                        <renounceRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationCalls::renounceRole)
                    }
                    renounceRole
                },
                {
                    fn isPermittedById(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationCalls> {
                        <isPermittedByIdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationCalls::isPermittedById)
                    }
                    isPermittedById
                },
                {
                    fn applicants(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationCalls> {
                        <applicantsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationCalls::applicants)
                    }
                    applicants
                },
                {
                    fn ADMIN_ROLE(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationCalls> {
                        <ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationCalls::ADMIN_ROLE)
                    }
                    ADMIN_ROLE
                },
                {
                    fn denyApplicant(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationCalls> {
                        <denyApplicantCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationCalls::denyApplicant)
                    }
                    denyApplicant
                },
                {
                    fn hasRole(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationCalls> {
                        <hasRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationCalls::hasRole)
                    }
                    hasRole
                },
                {
                    fn isPermittedByAddress(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationCalls> {
                        <isPermittedByAddressCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationCalls::isPermittedByAddress)
                    }
                    isPermittedByAddress
                },
                {
                    fn DEFAULT_ADMIN_ROLE(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationCalls> {
                        <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationCalls::DEFAULT_ADMIN_ROLE)
                    }
                    DEFAULT_ADMIN_ROLE
                },
                {
                    fn addApplicant(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationCalls> {
                        <addApplicantCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationCalls::addApplicant)
                    }
                    addApplicant
                },
                {
                    fn revokeRole(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationCalls> {
                        <revokeRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationCalls::revokeRole)
                    }
                    revokeRole
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::ADMIN_ROLE(inner) => {
                    <ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::DEFAULT_ADMIN_ROLE(inner) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::addApplicant(inner) => {
                    <addApplicantCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::agentToApplicantId(inner) => {
                    <agentToApplicantIdCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::applicantCount(inner) => {
                    <applicantCountCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::applicants(inner) => {
                    <applicantsCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::approveApplicant(inner) => {
                    <approveApplicantCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::denyApplicant(inner) => {
                    <denyApplicantCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getApplicantByAddress(inner) => {
                    <getApplicantByAddressCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getApplicantById(inner) => {
                    <getApplicantByIdCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getRoleAdmin(inner) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::grantRole(inner) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::hasRole(inner) => {
                    <hasRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isPermittedByAddress(inner) => {
                    <isPermittedByAddressCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::isPermittedById(inner) => {
                    <isPermittedByIdCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::renounceRole(inner) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::revokeRole(inner) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::supportsInterface(inner) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::ADMIN_ROLE(inner) => {
                    <ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::DEFAULT_ADMIN_ROLE(inner) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::addApplicant(inner) => {
                    <addApplicantCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::agentToApplicantId(inner) => {
                    <agentToApplicantIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::applicantCount(inner) => {
                    <applicantCountCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::applicants(inner) => {
                    <applicantsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::approveApplicant(inner) => {
                    <approveApplicantCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::denyApplicant(inner) => {
                    <denyApplicantCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getApplicantByAddress(inner) => {
                    <getApplicantByAddressCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getApplicantById(inner) => {
                    <getApplicantByIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getRoleAdmin(inner) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::grantRole(inner) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::hasRole(inner) => {
                    <hasRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::isPermittedByAddress(inner) => {
                    <isPermittedByAddressCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isPermittedById(inner) => {
                    <isPermittedByIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::renounceRole(inner) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::revokeRole(inner) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::supportsInterface(inner) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`AgentApplication`](self) custom errors.
    pub enum AgentApplicationErrors {
        #[allow(missing_docs)]
        AccessControlBadConfirmation(AccessControlBadConfirmation),
        #[allow(missing_docs)]
        AccessControlUnauthorizedAccount(AccessControlUnauthorizedAccount),
        #[allow(missing_docs)]
        AgentAlreadyApplied(AgentAlreadyApplied),
        #[allow(missing_docs)]
        ApplicantNotFound(ApplicantNotFound),
        #[allow(missing_docs)]
        InvalidAddress(InvalidAddress),
    }
    #[automatically_derived]
    impl AgentApplicationErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [102u8, 151u8, 178u8, 50u8],
            [122u8, 172u8, 25u8, 34u8],
            [226u8, 81u8, 125u8, 63u8],
            [230u8, 196u8, 36u8, 123u8],
            [252u8, 117u8, 62u8, 93u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for AgentApplicationErrors {
        const NAME: &'static str = "AgentApplicationErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 5usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AccessControlBadConfirmation(_) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::SELECTOR
                }
                Self::AccessControlUnauthorizedAccount(_) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
                Self::AgentAlreadyApplied(_) => {
                    <AgentAlreadyApplied as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ApplicantNotFound(_) => {
                    <ApplicantNotFound as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidAddress(_) => {
                    <InvalidAddress as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<AgentApplicationErrors>] = &[
                {
                    fn AccessControlBadConfirmation(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationErrors> {
                        <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationErrors::AccessControlBadConfirmation)
                    }
                    AccessControlBadConfirmation
                },
                {
                    fn ApplicantNotFound(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationErrors> {
                        <ApplicantNotFound as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationErrors::ApplicantNotFound)
                    }
                    ApplicantNotFound
                },
                {
                    fn AccessControlUnauthorizedAccount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationErrors> {
                        <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                AgentApplicationErrors::AccessControlUnauthorizedAccount,
                            )
                    }
                    AccessControlUnauthorizedAccount
                },
                {
                    fn InvalidAddress(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationErrors> {
                        <InvalidAddress as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationErrors::InvalidAddress)
                    }
                    InvalidAddress
                },
                {
                    fn AgentAlreadyApplied(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationErrors> {
                        <AgentAlreadyApplied as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationErrors::AgentAlreadyApplied)
                    }
                    AgentAlreadyApplied
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AccessControlBadConfirmation(inner) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::AccessControlUnauthorizedAccount(inner) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::AgentAlreadyApplied(inner) => {
                    <AgentAlreadyApplied as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ApplicantNotFound(inner) => {
                    <ApplicantNotFound as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidAddress(inner) => {
                    <InvalidAddress as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AccessControlBadConfirmation(inner) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::AccessControlUnauthorizedAccount(inner) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::AgentAlreadyApplied(inner) => {
                    <AgentAlreadyApplied as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ApplicantNotFound(inner) => {
                    <ApplicantNotFound as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidAddress(inner) => {
                    <InvalidAddress as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`AgentApplication`](self) events.
    pub enum AgentApplicationEvents {
        #[allow(missing_docs)]
        ApplicantAdded(ApplicantAdded),
        #[allow(missing_docs)]
        ApplicantStatusUpdated(ApplicantStatusUpdated),
        #[allow(missing_docs)]
        RoleAdminChanged(RoleAdminChanged),
        #[allow(missing_docs)]
        RoleGranted(RoleGranted),
        #[allow(missing_docs)]
        RoleRevoked(RoleRevoked),
    }
    #[automatically_derived]
    impl AgentApplicationEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                47u8,
                135u8,
                136u8,
                17u8,
                126u8,
                126u8,
                255u8,
                29u8,
                130u8,
                233u8,
                38u8,
                236u8,
                121u8,
                73u8,
                1u8,
                209u8,
                124u8,
                120u8,
                2u8,
                74u8,
                80u8,
                39u8,
                9u8,
                64u8,
                48u8,
                69u8,
                64u8,
                167u8,
                51u8,
                101u8,
                111u8,
                13u8,
            ],
            [
                174u8,
                159u8,
                194u8,
                234u8,
                174u8,
                207u8,
                64u8,
                79u8,
                49u8,
                134u8,
                225u8,
                53u8,
                15u8,
                67u8,
                141u8,
                121u8,
                43u8,
                189u8,
                204u8,
                184u8,
                219u8,
                134u8,
                35u8,
                33u8,
                209u8,
                217u8,
                191u8,
                96u8,
                95u8,
                238u8,
                155u8,
                107u8,
            ],
            [
                189u8,
                121u8,
                184u8,
                111u8,
                254u8,
                10u8,
                184u8,
                232u8,
                119u8,
                97u8,
                81u8,
                81u8,
                66u8,
                23u8,
                205u8,
                124u8,
                172u8,
                213u8,
                44u8,
                144u8,
                159u8,
                102u8,
                71u8,
                92u8,
                58u8,
                244u8,
                78u8,
                18u8,
                159u8,
                11u8,
                0u8,
                255u8,
            ],
            [
                195u8,
                248u8,
                38u8,
                86u8,
                84u8,
                162u8,
                89u8,
                21u8,
                71u8,
                159u8,
                16u8,
                91u8,
                184u8,
                243u8,
                27u8,
                210u8,
                237u8,
                127u8,
                119u8,
                223u8,
                187u8,
                223u8,
                254u8,
                83u8,
                64u8,
                72u8,
                249u8,
                40u8,
                113u8,
                146u8,
                203u8,
                65u8,
            ],
            [
                246u8,
                57u8,
                31u8,
                92u8,
                50u8,
                217u8,
                198u8,
                157u8,
                42u8,
                71u8,
                234u8,
                103u8,
                11u8,
                68u8,
                41u8,
                116u8,
                181u8,
                57u8,
                53u8,
                209u8,
                237u8,
                199u8,
                253u8,
                100u8,
                235u8,
                33u8,
                224u8,
                71u8,
                168u8,
                57u8,
                23u8,
                27u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for AgentApplicationEvents {
        const NAME: &'static str = "AgentApplicationEvents";
        const COUNT: usize = 5usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<ApplicantAdded as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <ApplicantAdded as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::ApplicantAdded)
                }
                Some(
                    <ApplicantStatusUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <ApplicantStatusUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::ApplicantStatusUpdated)
                }
                Some(<RoleAdminChanged as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleAdminChanged as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RoleAdminChanged)
                }
                Some(<RoleGranted as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleGranted as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RoleGranted)
                }
                Some(<RoleRevoked as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleRevoked as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RoleRevoked)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for AgentApplicationEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::ApplicantAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::ApplicantStatusUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleAdminChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleGranted(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleRevoked(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::ApplicantAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::ApplicantStatusUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleAdminChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleGranted(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleRevoked(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`AgentApplication`](self) contract instance.

See the [wrapper's documentation](`AgentApplicationInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> AgentApplicationInstance<T, P, N> {
        AgentApplicationInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        admin: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<AgentApplicationInstance<T, P, N>>,
    > {
        AgentApplicationInstance::<T, P, N>::deploy(provider, admin)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        admin: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        AgentApplicationInstance::<T, P, N>::deploy_builder(provider, admin)
    }
    /**A [`AgentApplication`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`AgentApplication`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct AgentApplicationInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for AgentApplicationInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("AgentApplicationInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AgentApplicationInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`AgentApplication`](self) contract instance.

See the [wrapper's documentation](`AgentApplicationInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            admin: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<AgentApplicationInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, admin);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            admin: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { admin },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> AgentApplicationInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> AgentApplicationInstance<T, P, N> {
            AgentApplicationInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AgentApplicationInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`ADMIN_ROLE`] function.
        pub fn ADMIN_ROLE(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, ADMIN_ROLECall, N> {
            self.call_builder(&ADMIN_ROLECall {})
        }
        ///Creates a new call builder for the [`DEFAULT_ADMIN_ROLE`] function.
        pub fn DEFAULT_ADMIN_ROLE(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, DEFAULT_ADMIN_ROLECall, N> {
            self.call_builder(&DEFAULT_ADMIN_ROLECall {})
        }
        ///Creates a new call builder for the [`addApplicant`] function.
        pub fn addApplicant(
            &self,
            agentAddress: alloy::sol_types::private::Address,
            additionalData: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, addApplicantCall, N> {
            self.call_builder(
                &addApplicantCall {
                    agentAddress,
                    additionalData,
                },
            )
        }
        ///Creates a new call builder for the [`agentToApplicantId`] function.
        pub fn agentToApplicantId(
            &self,
            _0: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, agentToApplicantIdCall, N> {
            self.call_builder(&agentToApplicantIdCall { _0 })
        }
        ///Creates a new call builder for the [`applicantCount`] function.
        pub fn applicantCount(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, applicantCountCall, N> {
            self.call_builder(&applicantCountCall {})
        }
        ///Creates a new call builder for the [`applicants`] function.
        pub fn applicants(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, applicantsCall, N> {
            self.call_builder(&applicantsCall { _0 })
        }
        ///Creates a new call builder for the [`approveApplicant`] function.
        pub fn approveApplicant(
            &self,
            agentAddress: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, approveApplicantCall, N> {
            self.call_builder(
                &approveApplicantCall {
                    agentAddress,
                },
            )
        }
        ///Creates a new call builder for the [`denyApplicant`] function.
        pub fn denyApplicant(
            &self,
            agentAddress: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, denyApplicantCall, N> {
            self.call_builder(&denyApplicantCall { agentAddress })
        }
        ///Creates a new call builder for the [`getApplicantByAddress`] function.
        pub fn getApplicantByAddress(
            &self,
            agentAddress: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, getApplicantByAddressCall, N> {
            self.call_builder(
                &getApplicantByAddressCall {
                    agentAddress,
                },
            )
        }
        ///Creates a new call builder for the [`getApplicantById`] function.
        pub fn getApplicantById(
            &self,
            applicantId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, getApplicantByIdCall, N> {
            self.call_builder(
                &getApplicantByIdCall {
                    applicantId,
                },
            )
        }
        ///Creates a new call builder for the [`getRoleAdmin`] function.
        pub fn getRoleAdmin(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, getRoleAdminCall, N> {
            self.call_builder(&getRoleAdminCall { role })
        }
        ///Creates a new call builder for the [`grantRole`] function.
        pub fn grantRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, grantRoleCall, N> {
            self.call_builder(&grantRoleCall { role, account })
        }
        ///Creates a new call builder for the [`hasRole`] function.
        pub fn hasRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, hasRoleCall, N> {
            self.call_builder(&hasRoleCall { role, account })
        }
        ///Creates a new call builder for the [`isPermittedByAddress`] function.
        pub fn isPermittedByAddress(
            &self,
            agentAddress: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, isPermittedByAddressCall, N> {
            self.call_builder(
                &isPermittedByAddressCall {
                    agentAddress,
                },
            )
        }
        ///Creates a new call builder for the [`isPermittedById`] function.
        pub fn isPermittedById(
            &self,
            applicantId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, isPermittedByIdCall, N> {
            self.call_builder(&isPermittedByIdCall { applicantId })
        }
        ///Creates a new call builder for the [`renounceRole`] function.
        pub fn renounceRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            callerConfirmation: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, renounceRoleCall, N> {
            self.call_builder(
                &renounceRoleCall {
                    role,
                    callerConfirmation,
                },
            )
        }
        ///Creates a new call builder for the [`revokeRole`] function.
        pub fn revokeRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, revokeRoleCall, N> {
            self.call_builder(&revokeRoleCall { role, account })
        }
        ///Creates a new call builder for the [`supportsInterface`] function.
        pub fn supportsInterface(
            &self,
            interfaceId: alloy::sol_types::private::FixedBytes<4>,
        ) -> alloy_contract::SolCallBuilder<T, &P, supportsInterfaceCall, N> {
            self.call_builder(
                &supportsInterfaceCall {
                    interfaceId,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AgentApplicationInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`ApplicantAdded`] event.
        pub fn ApplicantAdded_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, ApplicantAdded, N> {
            self.event_filter::<ApplicantAdded>()
        }
        ///Creates a new event filter for the [`ApplicantStatusUpdated`] event.
        pub fn ApplicantStatusUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, ApplicantStatusUpdated, N> {
            self.event_filter::<ApplicantStatusUpdated>()
        }
        ///Creates a new event filter for the [`RoleAdminChanged`] event.
        pub fn RoleAdminChanged_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RoleAdminChanged, N> {
            self.event_filter::<RoleAdminChanged>()
        }
        ///Creates a new event filter for the [`RoleGranted`] event.
        pub fn RoleGranted_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RoleGranted, N> {
            self.event_filter::<RoleGranted>()
        }
        ///Creates a new event filter for the [`RoleRevoked`] event.
        pub fn RoleRevoked_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RoleRevoked, N> {
            self.event_filter::<RoleRevoked>()
        }
    }
}
