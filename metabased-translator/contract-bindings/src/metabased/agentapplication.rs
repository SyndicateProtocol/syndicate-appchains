/**

Generated by the following Solidity interface...
```solidity
interface AgentApplication {
    type ApplicationStatus is uint8;

    error AgentAlreadyApplied();
    error ApplicantNotFound();
    error DreamSequencerNotSet();
    error InvalidAddress();
    error OwnableInvalidOwner(address owner);
    error OwnableUnauthorizedAccount(address account);

    event ApplicantAdded(uint256 indexed applicantId, string name, address indexed agentAddress, bytes additionalData, ApplicationStatus status);
    event ApplicantStatusUpdated(uint256 indexed applicantId, ApplicationStatus status);
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor(address admin);

    function addApplicant(string memory name, address agentAddress, bytes memory additionalData) external returns (uint256 applicantId);
    function agentToApplicantId(address) external view returns (uint256);
    function applicantCount() external view returns (uint256);
    function applicants(uint256) external view returns (address agentAddress, ApplicationStatus status, bool isValid, string memory name, bytes memory additionalData);
    function approveApplicant(uint256 applicantId) external;
    function denyApplicant(uint256 applicantId) external;
    function dreamSequencer() external view returns (address);
    function getApplicant(uint256 applicantId) external view returns (address agentAddress, ApplicationStatus status, string memory name, bytes memory additionalData);
    function isPermittedByAddress(address agentAddress) external view returns (bool);
    function isPermittedById(uint256 applicantId) external view returns (bool);
    function owner() external view returns (address);
    function renounceOwnership() external;
    function setDreamSequencer(address _dreamSequencer) external;
    function transferOwnership(address newOwner) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "admin",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "addApplicant",
    "inputs": [
      {
        "name": "name",
        "type": "string",
        "internalType": "string"
      },
      {
        "name": "agentAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "additionalData",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "applicantId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "agentToApplicantId",
    "inputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "applicantCount",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "applicants",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "agentAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "status",
        "type": "uint8",
        "internalType": "enum AgentApplication.ApplicationStatus"
      },
      {
        "name": "isValid",
        "type": "bool",
        "internalType": "bool"
      },
      {
        "name": "name",
        "type": "string",
        "internalType": "string"
      },
      {
        "name": "additionalData",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "approveApplicant",
    "inputs": [
      {
        "name": "applicantId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "denyApplicant",
    "inputs": [
      {
        "name": "applicantId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "dreamSequencer",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract IDreamSequencer"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getApplicant",
    "inputs": [
      {
        "name": "applicantId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "agentAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "status",
        "type": "uint8",
        "internalType": "enum AgentApplication.ApplicationStatus"
      },
      {
        "name": "name",
        "type": "string",
        "internalType": "string"
      },
      {
        "name": "additionalData",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isPermittedByAddress",
    "inputs": [
      {
        "name": "agentAddress",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isPermittedById",
    "inputs": [
      {
        "name": "applicantId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "renounceOwnership",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setDreamSequencer",
    "inputs": [
      {
        "name": "_dreamSequencer",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "transferOwnership",
    "inputs": [
      {
        "name": "newOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "ApplicantAdded",
    "inputs": [
      {
        "name": "applicantId",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      },
      {
        "name": "name",
        "type": "string",
        "indexed": false,
        "internalType": "string"
      },
      {
        "name": "agentAddress",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "additionalData",
        "type": "bytes",
        "indexed": false,
        "internalType": "bytes"
      },
      {
        "name": "status",
        "type": "uint8",
        "indexed": false,
        "internalType": "enum AgentApplication.ApplicationStatus"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "ApplicantStatusUpdated",
    "inputs": [
      {
        "name": "applicantId",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      },
      {
        "name": "status",
        "type": "uint8",
        "indexed": false,
        "internalType": "enum AgentApplication.ApplicationStatus"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "OwnershipTransferred",
    "inputs": [
      {
        "name": "previousOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AgentAlreadyApplied",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ApplicantNotFound",
    "inputs": []
  },
  {
    "type": "error",
    "name": "DreamSequencerNotSet",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidAddress",
    "inputs": []
  },
  {
    "type": "error",
    "name": "OwnableInvalidOwner",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "OwnableUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ]
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod AgentApplication {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`@Qa\x10+8\x03\x80a\x10+\x839\x81\x01`@\x81\x90Ra\0.\x91a\0\xBBV[\x80`\x01`\x01`\xA0\x1B\x03\x81\x16a\0\\W`@Qc\x1EO\xBD\xF7`\xE0\x1B\x81R_`\x04\x82\x01R`$\x01`@Q\x80\x91\x03\x90\xFD[a\0e\x81a\0lV[PPa\0\xE8V[_\x80T`\x01`\x01`\xA0\x1B\x03\x83\x81\x16`\x01`\x01`\xA0\x1B\x03\x19\x83\x16\x81\x17\x84U`@Q\x91\x90\x92\x16\x92\x83\x91\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x91\x90\xA3PPV[_` \x82\x84\x03\x12\x15a\0\xCBW_\x80\xFD[\x81Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\0\xE1W_\x80\xFD[\x93\x92PPPV[a\x0F6\x80a\0\xF5_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\0\xE5W_5`\xE0\x1C\x80cqP\x18\xA6\x11a\0\x88W\x80c\xE7fWa\x11a\0cW\x80c\xE7fWa\x14a\x01\xE5W\x80c\xE9\xC5\xAE\xEC\x14a\x01\xF8W\x80c\xEE\xA3\xF8-\x14a\x02\x0BW\x80c\xF2\xFD\xE3\x8B\x14a\x02.W_\x80\xFD[\x80cqP\x18\xA6\x14a\x01\xA6W\x80c\x8D\xA5\xCB[\x14a\x01\xAEW\x80c\x9ET\x95\x15\x14a\x01\xD2W_\x80\xFD[\x80c\x1B\xB10\xB9\x11a\0\xC3W\x80c\x1B\xB10\xB9\x14a\x019W\x80c>\x14\x1B\x03\x14a\x01LW\x80cc\xDES#\x14a\x01oW\x80ck\xF5\x16L\x14a\x01\x93W_\x80\xFD[\x80c\x05\xDB7 \x14a\0\xE9W\x80c\x0C\xFD\xDC\x12\x14a\x01\x1BW\x80c\x18\xF59\x93\x14a\x010W[_\x80\xFD[a\x01\x08a\0\xF76`\x04a\x0B\x18V[`\x02` R_\x90\x81R`@\x90 T\x81V[`@Q\x90\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\x01.a\x01)6`\x04a\x0B1V[a\x02AV[\0[a\x01\x08`\x03T\x81V[a\x01.a\x01G6`\x04a\x0B\x18V[a\x03UV[a\x01_a\x01Z6`\x04a\x0B1V[a\x03\xA6V[`@Q\x90\x15\x15\x81R` \x01a\x01\x12V[a\x01\x82a\x01}6`\x04a\x0B1V[a\x03\xEEV[`@Qa\x01\x12\x95\x94\x93\x92\x91\x90a\x0B\xAAV[a\x01.a\x01\xA16`\x04a\x0B1V[a\x05>V[a\x01.a\x05\xCCV[_T`\x01`\x01`\xA0\x1B\x03\x16[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01a\x01\x12V[a\x01_a\x01\xE06`\x04a\x0B\x18V[a\x05\xDFV[a\x01\x08a\x01\xF36`\x04a\x0CCV[a\x06WV[`\x04Ta\x01\xBA\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[a\x02\x1Ea\x02\x196`\x04a\x0B1V[a\x08\xBBV[`@Qa\x01\x12\x94\x93\x92\x91\x90a\x0C\xC1V[a\x01.a\x02<6`\x04a\x0B\x18V[a\n@V[a\x02Ia\n\x82V[_\x81\x81R`\x01` R`@\x90 \x80T`\x01`\xA8\x1B\x90\x04`\xFF\x16a\x02\x7FW`@Qc=V\x0C\x91`\xE1\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x04T`\x01`\x01`\xA0\x1B\x03\x16a\x02\xA8W`@QcRB\xB6\xC5`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x80T`\xFF`\xA0\x1B\x19\x16`\x01`\xA0\x1B\x17\x81U`@Q\x82\x90\x7F\xC3\xF8&VT\xA2Y\x15G\x9F\x10[\xB8\xF3\x1B\xD2\xED\x7Fw\xDF\xBB\xDF\xFES@H\xF9(q\x92\xCBA\x90a\x02\xEC\x90`\x01\x90a\r\x0CV[`@Q\x80\x91\x03\x90\xA2`\x04\x80T\x82T`@QcH\x86\x03\xDF`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16\x93\x81\x01\x93\x90\x93R\x16\x90cH\x86\x03\xDF\x90`$\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x03;W_\x80\xFD[PZ\xF1\x15\x80\x15a\x03MW=_\x80>=_\xFD[PPPPPPV[a\x03]a\n\x82V[`\x01`\x01`\xA0\x1B\x03\x81\x16a\x03\x84W`@Qc\xE6\xC4${`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x04\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90UV[_\x81\x81R`\x01` R`@\x81 \x80T`\x01`\xA8\x1B\x90\x04`\xFF\x16\x80\x15a\x03\xE7WP`\x01\x81T`\x01`\xA0\x1B\x90\x04`\xFF\x16`\x02\x81\x11\x15a\x03\xE5Wa\x03\xE5a\x0BHV[\x14[\x93\x92PPPV[`\x01` \x81\x90R_\x91\x82R`@\x90\x91 \x80T\x91\x81\x01\x80T`\x01`\x01`\xA0\x1B\x03\x84\x16\x93`\xFF`\x01`\xA0\x1B\x82\x04\x81\x16\x94`\x01`\xA8\x1B\x90\x92\x04\x16\x92\x90\x91a\x041\x90a\r V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x04]\x90a\r V[\x80\x15a\x04\xA8W\x80`\x1F\x10a\x04\x7FWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x04\xA8V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x04\x8BW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x90\x80`\x02\x01\x80Ta\x04\xBD\x90a\r V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x04\xE9\x90a\r V[\x80\x15a\x054W\x80`\x1F\x10a\x05\x0BWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x054V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x05\x17W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x90P\x85V[a\x05Fa\n\x82V[_\x81\x81R`\x01` R`@\x90 \x80T`\x01`\xA8\x1B\x90\x04`\xFF\x16a\x05|W`@Qc=V\x0C\x91`\xE1\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x80T`\xFF`\xA0\x1B\x19\x16`\x01`\xA1\x1B\x17\x81U`@Q\x82\x90\x7F\xC3\xF8&VT\xA2Y\x15G\x9F\x10[\xB8\xF3\x1B\xD2\xED\x7Fw\xDF\xBB\xDF\xFES@H\xF9(q\x92\xCBA\x90a\x05\xC0\x90`\x02\x90a\r\x0CV[`@Q\x80\x91\x03\x90\xA2PPV[a\x05\xD4a\n\x82V[a\x05\xDD_a\n\xAEV[V[_`\x01`\x01`\xA0\x1B\x03\x82\x16a\x05\xF5WP_\x91\x90PV[`\x01`\x01`\xA0\x1B\x03\x82\x16_\x90\x81R`\x02` \x90\x81R`@\x80\x83 T\x80\x84R`\x01\x90\x92R\x90\x91 \x80T`\x01`\xA8\x1B\x90\x04`\xFF\x16\x80\x15a\x06OWP`\x01\x81T`\x01`\xA0\x1B\x90\x04`\xFF\x16`\x02\x81\x11\x15a\x06MWa\x06Ma\x0BHV[\x14[\x94\x93PPPPV[_a\x06`a\n\x82V[`\x01`\x01`\xA0\x1B\x03\x84\x16a\x06\x87W`@Qc\xE6\xC4${`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x01`\x01`\xA0\x1B\x03\x84\x16_\x90\x81R`\x02` R`@\x90 T\x80\x15\x15\x80a\x06\xE1WP_\x80R`\x01` R\x7F\xA6\xEE\xF7\xE3Z\xBEp&r\x96A\x14\x7Fy\x15W<~\x97\xB4~\xFATo_n20&;\xCBIT`\x01`\x01`\xA0\x1B\x03\x86\x81\x16\x91\x16\x14[\x15a\x06\xFFW`@Qc\xFCu>]`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x03\x80T\x90_a\x07\x0E\x83a\rXV[\x90\x91UP`@\x80Q`\xA0\x81\x01\x90\x91R`\x01`\x01`\xA0\x1B\x03\x87\x16\x81R\x90\x92P` \x81\x01_\x81R` \x01`\x01\x15\x15\x81R` \x01\x88\x88\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPPP\x90\x82RP`@\x80Q` `\x1F\x88\x01\x81\x90\x04\x81\x02\x82\x01\x81\x01\x90\x92R\x86\x81R\x91\x81\x01\x91\x90\x87\x90\x87\x90\x81\x90\x84\x01\x83\x82\x80\x82\x847_\x92\x01\x82\x90RP\x93\x90\x94RPP\x84\x81R`\x01` \x90\x81R`@\x90\x91 \x83Q\x81T`\x01`\x01`\xA0\x1B\x03\x90\x91\x16`\x01`\x01`\xA0\x1B\x03\x19\x82\x16\x81\x17\x83U\x92\x85\x01Q\x91\x93P\x90\x91\x83\x91`\x01`\x01`\xA8\x1B\x03\x19\x16\x17`\x01`\xA0\x1B\x83`\x02\x81\x11\x15a\x08\nWa\x08\na\x0BHV[\x02\x17\x90UP`@\x82\x01Q\x81T\x90\x15\x15`\x01`\xA8\x1B\x02`\xFF`\xA8\x1B\x19\x90\x91\x16\x17\x81U``\x82\x01Q`\x01\x82\x01\x90a\x08?\x90\x82a\r\xDCV[P`\x80\x82\x01Q`\x02\x82\x01\x90a\x08T\x90\x82a\r\xDCV[PPP`\x01`\x01`\xA0\x1B\x03\x85\x16_\x81\x81R`\x02` R`@\x80\x82 \x85\x90UQ\x84\x91\x7F\x9E\x85\xADF\xDE\xBE5\x948G\xEBU\xA0|\xFB\xFEV\xEDy\x020\x80\xD0\x82FQ\xCAg\xF2\xF9\xAF\xCC\x91a\x08\xA9\x91\x8C\x91\x8C\x91\x8B\x91\x8B\x91\x90a\x0E\xC0V[`@Q\x80\x91\x03\x90\xA3P\x95\x94PPPPPV[_\x81\x81R`\x01` R`@\x81 \x80T\x82\x91``\x91\x82\x91\x90`\x01`\xA8\x1B\x90\x04`\xFF\x16a\x08\xF9W`@Qc=V\x0C\x91`\xE1\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x80T`\x01\x82\x01\x80T`\x01`\x01`\xA0\x1B\x03\x83\x16\x92`\x01`\xA0\x1B\x90\x04`\xFF\x16\x91\x90`\x02\x85\x01\x90\x82\x90a\t(\x90a\r V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\tT\x90a\r V[\x80\x15a\t\x9FW\x80`\x1F\x10a\tvWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\t\x9FV[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\t\x82W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x91P\x80\x80Ta\t\xB2\x90a\r V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\t\xDE\x90a\r V[\x80\x15a\n)W\x80`\x1F\x10a\n\0Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\n)V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\n\x0CW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x90P\x94P\x94P\x94P\x94PP\x91\x93P\x91\x93V[a\nHa\n\x82V[`\x01`\x01`\xA0\x1B\x03\x81\x16a\nvW`@Qc\x1EO\xBD\xF7`\xE0\x1B\x81R_`\x04\x82\x01R`$\x01[`@Q\x80\x91\x03\x90\xFD[a\n\x7F\x81a\n\xAEV[PV[_T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x05\xDDW`@Qc\x11\x8C\xDA\xA7`\xE0\x1B\x81R3`\x04\x82\x01R`$\x01a\nmV[_\x80T`\x01`\x01`\xA0\x1B\x03\x83\x81\x16`\x01`\x01`\xA0\x1B\x03\x19\x83\x16\x81\x17\x84U`@Q\x91\x90\x92\x16\x92\x83\x91\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x91\x90\xA3PPV[\x805`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x0B\x13W_\x80\xFD[\x91\x90PV[_` \x82\x84\x03\x12\x15a\x0B(W_\x80\xFD[a\x03\xE7\x82a\n\xFDV[_` \x82\x84\x03\x12\x15a\x0BAW_\x80\xFD[P5\x91\x90PV[cNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[`\x03\x81\x10a\x0BxWcNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[\x90RV[_\x81Q\x80\x84R\x80` \x84\x01` \x86\x01^_` \x82\x86\x01\x01R` `\x1F\x19`\x1F\x83\x01\x16\x85\x01\x01\x91PP\x92\x91PPV[`\x01`\x01`\xA0\x1B\x03\x86\x16\x81Ra\x0B\xC3` \x82\x01\x86a\x0B\\V[\x83\x15\x15`@\x82\x01R`\xA0``\x82\x01R_a\x0B\xE0`\xA0\x83\x01\x85a\x0B|V[\x82\x81\x03`\x80\x84\x01Ra\x0B\xF2\x81\x85a\x0B|V[\x98\x97PPPPPPPPV[_\x80\x83`\x1F\x84\x01\x12a\x0C\x0EW_\x80\xFD[P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0C%W_\x80\xFD[` \x83\x01\x91P\x83` \x82\x85\x01\x01\x11\x15a\x0C<W_\x80\xFD[\x92P\x92\x90PV[_\x80_\x80_``\x86\x88\x03\x12\x15a\x0CWW_\x80\xFD[\x855g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x0CnW_\x80\xFD[a\x0Cz\x89\x83\x8A\x01a\x0B\xFEV[\x90\x97P\x95P\x85\x91Pa\x0C\x8E` \x89\x01a\n\xFDV[\x94P`@\x88\x015\x91P\x80\x82\x11\x15a\x0C\xA3W_\x80\xFD[Pa\x0C\xB0\x88\x82\x89\x01a\x0B\xFEV[\x96\x99\x95\x98P\x93\x96P\x92\x94\x93\x92PPPV[`\x01`\x01`\xA0\x1B\x03\x85\x16\x81Ra\x0C\xDA` \x82\x01\x85a\x0B\\V[`\x80`@\x82\x01R_a\x0C\xEF`\x80\x83\x01\x85a\x0B|V[\x82\x81\x03``\x84\x01Ra\r\x01\x81\x85a\x0B|V[\x97\x96PPPPPPPV[` \x81\x01a\r\x1A\x82\x84a\x0B\\V[\x92\x91PPV[`\x01\x81\x81\x1C\x90\x82\x16\x80a\r4W`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a\rRWcNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[P\x91\x90PV[_`\x01\x82\x01a\ruWcNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[P`\x01\x01\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`\x1F\x82\x11\x15a\r\xD7W\x80_R` _ `\x1F\x84\x01`\x05\x1C\x81\x01` \x85\x10\x15a\r\xB5WP\x80[`\x1F\x84\x01`\x05\x1C\x82\x01\x91P[\x81\x81\x10\x15a\r\xD4W_\x81U`\x01\x01a\r\xC1V[PP[PPPV[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\r\xF6Wa\r\xF6a\r|V[a\x0E\n\x81a\x0E\x04\x84Ta\r V[\x84a\r\x90V[` \x80`\x1F\x83\x11`\x01\x81\x14a\x0E=W_\x84\x15a\x0E&WP\x85\x83\x01Q[_\x19`\x03\x86\x90\x1B\x1C\x19\x16`\x01\x85\x90\x1B\x17\x85Ua\x03MV[_\x85\x81R` \x81 `\x1F\x19\x86\x16\x91[\x82\x81\x10\x15a\x0EkW\x88\x86\x01Q\x82U\x94\x84\x01\x94`\x01\x90\x91\x01\x90\x84\x01a\x0ELV[P\x85\x82\x10\x15a\x0E\x88W\x87\x85\x01Q_\x19`\x03\x88\x90\x1B`\xF8\x16\x1C\x19\x16\x81U[PPPPP`\x01\x90\x81\x1B\x01\x90UPV[\x81\x83R\x81\x81` \x85\x017P_\x82\x82\x01` \x90\x81\x01\x91\x90\x91R`\x1F\x90\x91\x01`\x1F\x19\x16\x90\x91\x01\x01\x90V[``\x81R_a\x0E\xD3``\x83\x01\x87\x89a\x0E\x98V[\x82\x81\x03` \x84\x01Ra\x0E\xE6\x81\x86\x88a\x0E\x98V[\x91PPa\x0E\xF6`@\x83\x01\x84a\x0B\\V[\x96\x95PPPPPPV\xFE\xA2dipfsX\"\x12 w\xDE+\x18\x151\x18[S*\xAB\xA1CA/U\xB83\xEF_3\x9EC\xBA\xE6Q0<Yo\nkdsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f80fd5b50600436106100e5575f3560e01c8063715018a611610088578063e766576111610063578063e7665761146101e5578063e9c5aeec146101f8578063eea3f82d1461020b578063f2fde38b1461022e575f80fd5b8063715018a6146101a65780638da5cb5b146101ae5780639e549515146101d2575f80fd5b80631bb130b9116100c35780631bb130b9146101395780633e141b031461014c57806363de53231461016f5780636bf5164c14610193575f80fd5b806305db3720146100e95780630cfddc121461011b57806318f5399314610130575b5f80fd5b6101086100f7366004610b18565b60026020525f908152604090205481565b6040519081526020015b60405180910390f35b61012e610129366004610b31565b610241565b005b61010860035481565b61012e610147366004610b18565b610355565b61015f61015a366004610b31565b6103a6565b6040519015158152602001610112565b61018261017d366004610b31565b6103ee565b604051610112959493929190610baa565b61012e6101a1366004610b31565b61053e565b61012e6105cc565b5f546001600160a01b03165b6040516001600160a01b039091168152602001610112565b61015f6101e0366004610b18565b6105df565b6101086101f3366004610c43565b610657565b6004546101ba906001600160a01b031681565b61021e610219366004610b31565b6108bb565b6040516101129493929190610cc1565b61012e61023c366004610b18565b610a40565b610249610a82565b5f8181526001602052604090208054600160a81b900460ff1661027f57604051633d560c9160e11b815260040160405180910390fd5b6004546001600160a01b03166102a857604051635242b6c560e01b815260040160405180910390fd5b805460ff60a01b1916600160a01b17815560405182907fc3f8265654a25915479f105bb8f31bd2ed7f77dfbbdffe534048f9287192cb41906102ec90600190610d0c565b60405180910390a260048054825460405163488603df60e01b81526001600160a01b0391821693810193909352169063488603df906024015f604051808303815f87803b15801561033b575f80fd5b505af115801561034d573d5f803e3d5ffd5b505050505050565b61035d610a82565b6001600160a01b0381166103845760405163e6c4247b60e01b815260040160405180910390fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b5f8181526001602052604081208054600160a81b900460ff1680156103e7575060018154600160a01b900460ff1660028111156103e5576103e5610b48565b145b9392505050565b600160208190525f9182526040909120805491810180546001600160a01b0384169360ff600160a01b8204811694600160a81b9092041692909161043190610d20565b80601f016020809104026020016040519081016040528092919081815260200182805461045d90610d20565b80156104a85780601f1061047f576101008083540402835291602001916104a8565b820191905f5260205f20905b81548152906001019060200180831161048b57829003601f168201915b5050505050908060020180546104bd90610d20565b80601f01602080910402602001604051908101604052809291908181526020018280546104e990610d20565b80156105345780601f1061050b57610100808354040283529160200191610534565b820191905f5260205f20905b81548152906001019060200180831161051757829003601f168201915b5050505050905085565b610546610a82565b5f8181526001602052604090208054600160a81b900460ff1661057c57604051633d560c9160e11b815260040160405180910390fd5b805460ff60a01b1916600160a11b17815560405182907fc3f8265654a25915479f105bb8f31bd2ed7f77dfbbdffe534048f9287192cb41906105c090600290610d0c565b60405180910390a25050565b6105d4610a82565b6105dd5f610aae565b565b5f6001600160a01b0382166105f557505f919050565b6001600160a01b0382165f9081526002602090815260408083205480845260019092529091208054600160a81b900460ff16801561064f575060018154600160a01b900460ff16600281111561064d5761064d610b48565b145b949350505050565b5f610660610a82565b6001600160a01b0384166106875760405163e6c4247b60e01b815260040160405180910390fd5b6001600160a01b0384165f90815260026020526040902054801515806106e157505f805260016020527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49546001600160a01b038681169116145b156106ff5760405163fc753e5d60e01b815260040160405180910390fd5b60038054905f61070e83610d58565b909155506040805160a081019091526001600160a01b0387168152909250602081015f815260200160011515815260200188888080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250505090825250604080516020601f8801819004810282018101909252868152918101919087908790819084018382808284375f920182905250939094525050848152600160209081526040909120835181546001600160a01b039091166001600160a01b031982168117835592850151919350909183916001600160a81b03191617600160a01b83600281111561080a5761080a610b48565b021790555060408201518154901515600160a81b0260ff60a81b199091161781556060820151600182019061083f9082610ddc565b50608082015160028201906108549082610ddc565b5050506001600160a01b0385165f818152600260205260408082208590555184917f9e85ad46debe35943847eb55a07cfbfe56ed79023080d0824651ca67f2f9afcc916108a9918c918c918b918b9190610ec0565b60405180910390a35095945050505050565b5f81815260016020526040812080548291606091829190600160a81b900460ff166108f957604051633d560c9160e11b815260040160405180910390fd5b80546001820180546001600160a01b03831692600160a01b900460ff1691906002850190829061092890610d20565b80601f016020809104026020016040519081016040528092919081815260200182805461095490610d20565b801561099f5780601f106109765761010080835404028352916020019161099f565b820191905f5260205f20905b81548152906001019060200180831161098257829003601f168201915b505050505091508080546109b290610d20565b80601f01602080910402602001604051908101604052809291908181526020018280546109de90610d20565b8015610a295780601f10610a0057610100808354040283529160200191610a29565b820191905f5260205f20905b815481529060010190602001808311610a0c57829003601f168201915b505050505090509450945094509450509193509193565b610a48610a82565b6001600160a01b038116610a7657604051631e4fbdf760e01b81525f60048201526024015b60405180910390fd5b610a7f81610aae565b50565b5f546001600160a01b031633146105dd5760405163118cdaa760e01b8152336004820152602401610a6d565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b0381168114610b13575f80fd5b919050565b5f60208284031215610b28575f80fd5b6103e782610afd565b5f60208284031215610b41575f80fd5b5035919050565b634e487b7160e01b5f52602160045260245ffd5b60038110610b7857634e487b7160e01b5f52602160045260245ffd5b9052565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b6001600160a01b0386168152610bc36020820186610b5c565b831515604082015260a060608201525f610be060a0830185610b7c565b8281036080840152610bf28185610b7c565b98975050505050505050565b5f8083601f840112610c0e575f80fd5b50813567ffffffffffffffff811115610c25575f80fd5b602083019150836020828501011115610c3c575f80fd5b9250929050565b5f805f805f60608688031215610c57575f80fd5b853567ffffffffffffffff80821115610c6e575f80fd5b610c7a89838a01610bfe565b9097509550859150610c8e60208901610afd565b94506040880135915080821115610ca3575f80fd5b50610cb088828901610bfe565b969995985093965092949392505050565b6001600160a01b0385168152610cda6020820185610b5c565b608060408201525f610cef6080830185610b7c565b8281036060840152610d018185610b7c565b979650505050505050565b60208101610d1a8284610b5c565b92915050565b600181811c90821680610d3457607f821691505b602082108103610d5257634e487b7160e01b5f52602260045260245ffd5b50919050565b5f60018201610d7557634e487b7160e01b5f52601160045260245ffd5b5060010190565b634e487b7160e01b5f52604160045260245ffd5b601f821115610dd757805f5260205f20601f840160051c81016020851015610db55750805b601f840160051c820191505b81811015610dd4575f8155600101610dc1565b50505b505050565b815167ffffffffffffffff811115610df657610df6610d7c565b610e0a81610e048454610d20565b84610d90565b602080601f831160018114610e3d575f8415610e265750858301515b5f19600386901b1c1916600185901b17855561034d565b5f85815260208120601f198616915b82811015610e6b57888601518255948401946001909101908401610e4c565b5085821015610e8857878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b606081525f610ed3606083018789610e98565b8281036020840152610ee6818688610e98565b915050610ef66040830184610b5c565b969550505050505056fea264697066735822122077de2b181531185b532aaba143412f55b833ef5f339e43bae651303c596f0a6b64736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\0\xE5W_5`\xE0\x1C\x80cqP\x18\xA6\x11a\0\x88W\x80c\xE7fWa\x11a\0cW\x80c\xE7fWa\x14a\x01\xE5W\x80c\xE9\xC5\xAE\xEC\x14a\x01\xF8W\x80c\xEE\xA3\xF8-\x14a\x02\x0BW\x80c\xF2\xFD\xE3\x8B\x14a\x02.W_\x80\xFD[\x80cqP\x18\xA6\x14a\x01\xA6W\x80c\x8D\xA5\xCB[\x14a\x01\xAEW\x80c\x9ET\x95\x15\x14a\x01\xD2W_\x80\xFD[\x80c\x1B\xB10\xB9\x11a\0\xC3W\x80c\x1B\xB10\xB9\x14a\x019W\x80c>\x14\x1B\x03\x14a\x01LW\x80cc\xDES#\x14a\x01oW\x80ck\xF5\x16L\x14a\x01\x93W_\x80\xFD[\x80c\x05\xDB7 \x14a\0\xE9W\x80c\x0C\xFD\xDC\x12\x14a\x01\x1BW\x80c\x18\xF59\x93\x14a\x010W[_\x80\xFD[a\x01\x08a\0\xF76`\x04a\x0B\x18V[`\x02` R_\x90\x81R`@\x90 T\x81V[`@Q\x90\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\x01.a\x01)6`\x04a\x0B1V[a\x02AV[\0[a\x01\x08`\x03T\x81V[a\x01.a\x01G6`\x04a\x0B\x18V[a\x03UV[a\x01_a\x01Z6`\x04a\x0B1V[a\x03\xA6V[`@Q\x90\x15\x15\x81R` \x01a\x01\x12V[a\x01\x82a\x01}6`\x04a\x0B1V[a\x03\xEEV[`@Qa\x01\x12\x95\x94\x93\x92\x91\x90a\x0B\xAAV[a\x01.a\x01\xA16`\x04a\x0B1V[a\x05>V[a\x01.a\x05\xCCV[_T`\x01`\x01`\xA0\x1B\x03\x16[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01a\x01\x12V[a\x01_a\x01\xE06`\x04a\x0B\x18V[a\x05\xDFV[a\x01\x08a\x01\xF36`\x04a\x0CCV[a\x06WV[`\x04Ta\x01\xBA\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[a\x02\x1Ea\x02\x196`\x04a\x0B1V[a\x08\xBBV[`@Qa\x01\x12\x94\x93\x92\x91\x90a\x0C\xC1V[a\x01.a\x02<6`\x04a\x0B\x18V[a\n@V[a\x02Ia\n\x82V[_\x81\x81R`\x01` R`@\x90 \x80T`\x01`\xA8\x1B\x90\x04`\xFF\x16a\x02\x7FW`@Qc=V\x0C\x91`\xE1\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x04T`\x01`\x01`\xA0\x1B\x03\x16a\x02\xA8W`@QcRB\xB6\xC5`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x80T`\xFF`\xA0\x1B\x19\x16`\x01`\xA0\x1B\x17\x81U`@Q\x82\x90\x7F\xC3\xF8&VT\xA2Y\x15G\x9F\x10[\xB8\xF3\x1B\xD2\xED\x7Fw\xDF\xBB\xDF\xFES@H\xF9(q\x92\xCBA\x90a\x02\xEC\x90`\x01\x90a\r\x0CV[`@Q\x80\x91\x03\x90\xA2`\x04\x80T\x82T`@QcH\x86\x03\xDF`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16\x93\x81\x01\x93\x90\x93R\x16\x90cH\x86\x03\xDF\x90`$\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x03;W_\x80\xFD[PZ\xF1\x15\x80\x15a\x03MW=_\x80>=_\xFD[PPPPPPV[a\x03]a\n\x82V[`\x01`\x01`\xA0\x1B\x03\x81\x16a\x03\x84W`@Qc\xE6\xC4${`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x04\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90UV[_\x81\x81R`\x01` R`@\x81 \x80T`\x01`\xA8\x1B\x90\x04`\xFF\x16\x80\x15a\x03\xE7WP`\x01\x81T`\x01`\xA0\x1B\x90\x04`\xFF\x16`\x02\x81\x11\x15a\x03\xE5Wa\x03\xE5a\x0BHV[\x14[\x93\x92PPPV[`\x01` \x81\x90R_\x91\x82R`@\x90\x91 \x80T\x91\x81\x01\x80T`\x01`\x01`\xA0\x1B\x03\x84\x16\x93`\xFF`\x01`\xA0\x1B\x82\x04\x81\x16\x94`\x01`\xA8\x1B\x90\x92\x04\x16\x92\x90\x91a\x041\x90a\r V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x04]\x90a\r V[\x80\x15a\x04\xA8W\x80`\x1F\x10a\x04\x7FWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x04\xA8V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x04\x8BW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x90\x80`\x02\x01\x80Ta\x04\xBD\x90a\r V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x04\xE9\x90a\r V[\x80\x15a\x054W\x80`\x1F\x10a\x05\x0BWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x054V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x05\x17W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x90P\x85V[a\x05Fa\n\x82V[_\x81\x81R`\x01` R`@\x90 \x80T`\x01`\xA8\x1B\x90\x04`\xFF\x16a\x05|W`@Qc=V\x0C\x91`\xE1\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x80T`\xFF`\xA0\x1B\x19\x16`\x01`\xA1\x1B\x17\x81U`@Q\x82\x90\x7F\xC3\xF8&VT\xA2Y\x15G\x9F\x10[\xB8\xF3\x1B\xD2\xED\x7Fw\xDF\xBB\xDF\xFES@H\xF9(q\x92\xCBA\x90a\x05\xC0\x90`\x02\x90a\r\x0CV[`@Q\x80\x91\x03\x90\xA2PPV[a\x05\xD4a\n\x82V[a\x05\xDD_a\n\xAEV[V[_`\x01`\x01`\xA0\x1B\x03\x82\x16a\x05\xF5WP_\x91\x90PV[`\x01`\x01`\xA0\x1B\x03\x82\x16_\x90\x81R`\x02` \x90\x81R`@\x80\x83 T\x80\x84R`\x01\x90\x92R\x90\x91 \x80T`\x01`\xA8\x1B\x90\x04`\xFF\x16\x80\x15a\x06OWP`\x01\x81T`\x01`\xA0\x1B\x90\x04`\xFF\x16`\x02\x81\x11\x15a\x06MWa\x06Ma\x0BHV[\x14[\x94\x93PPPPV[_a\x06`a\n\x82V[`\x01`\x01`\xA0\x1B\x03\x84\x16a\x06\x87W`@Qc\xE6\xC4${`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x01`\x01`\xA0\x1B\x03\x84\x16_\x90\x81R`\x02` R`@\x90 T\x80\x15\x15\x80a\x06\xE1WP_\x80R`\x01` R\x7F\xA6\xEE\xF7\xE3Z\xBEp&r\x96A\x14\x7Fy\x15W<~\x97\xB4~\xFATo_n20&;\xCBIT`\x01`\x01`\xA0\x1B\x03\x86\x81\x16\x91\x16\x14[\x15a\x06\xFFW`@Qc\xFCu>]`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x03\x80T\x90_a\x07\x0E\x83a\rXV[\x90\x91UP`@\x80Q`\xA0\x81\x01\x90\x91R`\x01`\x01`\xA0\x1B\x03\x87\x16\x81R\x90\x92P` \x81\x01_\x81R` \x01`\x01\x15\x15\x81R` \x01\x88\x88\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPPP\x90\x82RP`@\x80Q` `\x1F\x88\x01\x81\x90\x04\x81\x02\x82\x01\x81\x01\x90\x92R\x86\x81R\x91\x81\x01\x91\x90\x87\x90\x87\x90\x81\x90\x84\x01\x83\x82\x80\x82\x847_\x92\x01\x82\x90RP\x93\x90\x94RPP\x84\x81R`\x01` \x90\x81R`@\x90\x91 \x83Q\x81T`\x01`\x01`\xA0\x1B\x03\x90\x91\x16`\x01`\x01`\xA0\x1B\x03\x19\x82\x16\x81\x17\x83U\x92\x85\x01Q\x91\x93P\x90\x91\x83\x91`\x01`\x01`\xA8\x1B\x03\x19\x16\x17`\x01`\xA0\x1B\x83`\x02\x81\x11\x15a\x08\nWa\x08\na\x0BHV[\x02\x17\x90UP`@\x82\x01Q\x81T\x90\x15\x15`\x01`\xA8\x1B\x02`\xFF`\xA8\x1B\x19\x90\x91\x16\x17\x81U``\x82\x01Q`\x01\x82\x01\x90a\x08?\x90\x82a\r\xDCV[P`\x80\x82\x01Q`\x02\x82\x01\x90a\x08T\x90\x82a\r\xDCV[PPP`\x01`\x01`\xA0\x1B\x03\x85\x16_\x81\x81R`\x02` R`@\x80\x82 \x85\x90UQ\x84\x91\x7F\x9E\x85\xADF\xDE\xBE5\x948G\xEBU\xA0|\xFB\xFEV\xEDy\x020\x80\xD0\x82FQ\xCAg\xF2\xF9\xAF\xCC\x91a\x08\xA9\x91\x8C\x91\x8C\x91\x8B\x91\x8B\x91\x90a\x0E\xC0V[`@Q\x80\x91\x03\x90\xA3P\x95\x94PPPPPV[_\x81\x81R`\x01` R`@\x81 \x80T\x82\x91``\x91\x82\x91\x90`\x01`\xA8\x1B\x90\x04`\xFF\x16a\x08\xF9W`@Qc=V\x0C\x91`\xE1\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x80T`\x01\x82\x01\x80T`\x01`\x01`\xA0\x1B\x03\x83\x16\x92`\x01`\xA0\x1B\x90\x04`\xFF\x16\x91\x90`\x02\x85\x01\x90\x82\x90a\t(\x90a\r V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\tT\x90a\r V[\x80\x15a\t\x9FW\x80`\x1F\x10a\tvWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\t\x9FV[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\t\x82W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x91P\x80\x80Ta\t\xB2\x90a\r V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\t\xDE\x90a\r V[\x80\x15a\n)W\x80`\x1F\x10a\n\0Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\n)V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\n\x0CW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x90P\x94P\x94P\x94P\x94PP\x91\x93P\x91\x93V[a\nHa\n\x82V[`\x01`\x01`\xA0\x1B\x03\x81\x16a\nvW`@Qc\x1EO\xBD\xF7`\xE0\x1B\x81R_`\x04\x82\x01R`$\x01[`@Q\x80\x91\x03\x90\xFD[a\n\x7F\x81a\n\xAEV[PV[_T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x05\xDDW`@Qc\x11\x8C\xDA\xA7`\xE0\x1B\x81R3`\x04\x82\x01R`$\x01a\nmV[_\x80T`\x01`\x01`\xA0\x1B\x03\x83\x81\x16`\x01`\x01`\xA0\x1B\x03\x19\x83\x16\x81\x17\x84U`@Q\x91\x90\x92\x16\x92\x83\x91\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x91\x90\xA3PPV[\x805`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x0B\x13W_\x80\xFD[\x91\x90PV[_` \x82\x84\x03\x12\x15a\x0B(W_\x80\xFD[a\x03\xE7\x82a\n\xFDV[_` \x82\x84\x03\x12\x15a\x0BAW_\x80\xFD[P5\x91\x90PV[cNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[`\x03\x81\x10a\x0BxWcNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[\x90RV[_\x81Q\x80\x84R\x80` \x84\x01` \x86\x01^_` \x82\x86\x01\x01R` `\x1F\x19`\x1F\x83\x01\x16\x85\x01\x01\x91PP\x92\x91PPV[`\x01`\x01`\xA0\x1B\x03\x86\x16\x81Ra\x0B\xC3` \x82\x01\x86a\x0B\\V[\x83\x15\x15`@\x82\x01R`\xA0``\x82\x01R_a\x0B\xE0`\xA0\x83\x01\x85a\x0B|V[\x82\x81\x03`\x80\x84\x01Ra\x0B\xF2\x81\x85a\x0B|V[\x98\x97PPPPPPPPV[_\x80\x83`\x1F\x84\x01\x12a\x0C\x0EW_\x80\xFD[P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0C%W_\x80\xFD[` \x83\x01\x91P\x83` \x82\x85\x01\x01\x11\x15a\x0C<W_\x80\xFD[\x92P\x92\x90PV[_\x80_\x80_``\x86\x88\x03\x12\x15a\x0CWW_\x80\xFD[\x855g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x0CnW_\x80\xFD[a\x0Cz\x89\x83\x8A\x01a\x0B\xFEV[\x90\x97P\x95P\x85\x91Pa\x0C\x8E` \x89\x01a\n\xFDV[\x94P`@\x88\x015\x91P\x80\x82\x11\x15a\x0C\xA3W_\x80\xFD[Pa\x0C\xB0\x88\x82\x89\x01a\x0B\xFEV[\x96\x99\x95\x98P\x93\x96P\x92\x94\x93\x92PPPV[`\x01`\x01`\xA0\x1B\x03\x85\x16\x81Ra\x0C\xDA` \x82\x01\x85a\x0B\\V[`\x80`@\x82\x01R_a\x0C\xEF`\x80\x83\x01\x85a\x0B|V[\x82\x81\x03``\x84\x01Ra\r\x01\x81\x85a\x0B|V[\x97\x96PPPPPPPV[` \x81\x01a\r\x1A\x82\x84a\x0B\\V[\x92\x91PPV[`\x01\x81\x81\x1C\x90\x82\x16\x80a\r4W`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a\rRWcNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[P\x91\x90PV[_`\x01\x82\x01a\ruWcNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[P`\x01\x01\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`\x1F\x82\x11\x15a\r\xD7W\x80_R` _ `\x1F\x84\x01`\x05\x1C\x81\x01` \x85\x10\x15a\r\xB5WP\x80[`\x1F\x84\x01`\x05\x1C\x82\x01\x91P[\x81\x81\x10\x15a\r\xD4W_\x81U`\x01\x01a\r\xC1V[PP[PPPV[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\r\xF6Wa\r\xF6a\r|V[a\x0E\n\x81a\x0E\x04\x84Ta\r V[\x84a\r\x90V[` \x80`\x1F\x83\x11`\x01\x81\x14a\x0E=W_\x84\x15a\x0E&WP\x85\x83\x01Q[_\x19`\x03\x86\x90\x1B\x1C\x19\x16`\x01\x85\x90\x1B\x17\x85Ua\x03MV[_\x85\x81R` \x81 `\x1F\x19\x86\x16\x91[\x82\x81\x10\x15a\x0EkW\x88\x86\x01Q\x82U\x94\x84\x01\x94`\x01\x90\x91\x01\x90\x84\x01a\x0ELV[P\x85\x82\x10\x15a\x0E\x88W\x87\x85\x01Q_\x19`\x03\x88\x90\x1B`\xF8\x16\x1C\x19\x16\x81U[PPPPP`\x01\x90\x81\x1B\x01\x90UPV[\x81\x83R\x81\x81` \x85\x017P_\x82\x82\x01` \x90\x81\x01\x91\x90\x91R`\x1F\x90\x91\x01`\x1F\x19\x16\x90\x91\x01\x01\x90V[``\x81R_a\x0E\xD3``\x83\x01\x87\x89a\x0E\x98V[\x82\x81\x03` \x84\x01Ra\x0E\xE6\x81\x86\x88a\x0E\x98V[\x91PPa\x0E\xF6`@\x83\x01\x84a\x0B\\V[\x96\x95PPPPPPV\xFE\xA2dipfsX\"\x12 w\xDE+\x18\x151\x18[S*\xAB\xA1CA/U\xB83\xEF_3\x9EC\xBA\xE6Q0<Yo\nkdsolcC\0\x08\x19\x003",
    );
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ApplicationStatus(u8);
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<ApplicationStatus> for u8 {
            #[inline]
            fn stv_to_tokens(
                &self,
            ) -> <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'_> {
                alloy_sol_types::private::SolTypeValue::<
                    alloy::sol_types::sol_data::Uint<8>,
                >::stv_to_tokens(self)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::tokenize(self)
                    .0
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(self, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encoded_size(self)
            }
        }
        #[automatically_derived]
        impl ApplicationStatus {
            /// The Solidity type name.
            pub const NAME: &'static str = stringify!(@ name);
            /// Convert from the underlying value type.
            #[inline]
            pub const fn from(value: u8) -> Self {
                Self(value)
            }
            /// Return the underlying value.
            #[inline]
            pub const fn into(self) -> u8 {
                self.0
            }
            /// Return the single encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode(&self.0)
            }
            /// Return the packed encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode_packed(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode_packed(&self.0)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ApplicationStatus {
            type RustType = u8;
            type Token<'a> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = Self::NAME;
            const ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                Self::type_check(token).is_ok()
            }
            #[inline]
            fn type_check(token: &Self::Token<'_>) -> alloy_sol_types::Result<()> {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::type_check(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::detokenize(token)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ApplicationStatus {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::topic_preimage_length(rust)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(rust, out)
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic(rust)
            }
        }
    };
    /**Custom error with signature `AgentAlreadyApplied()` and selector `0xfc753e5d`.
```solidity
error AgentAlreadyApplied();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AgentAlreadyApplied {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AgentAlreadyApplied> for UnderlyingRustTuple<'_> {
            fn from(value: AgentAlreadyApplied) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AgentAlreadyApplied {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AgentAlreadyApplied {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AgentAlreadyApplied()";
            const SELECTOR: [u8; 4] = [252u8, 117u8, 62u8, 93u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `ApplicantNotFound()` and selector `0x7aac1922`.
```solidity
error ApplicantNotFound();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ApplicantNotFound {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ApplicantNotFound> for UnderlyingRustTuple<'_> {
            fn from(value: ApplicantNotFound) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ApplicantNotFound {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ApplicantNotFound {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ApplicantNotFound()";
            const SELECTOR: [u8; 4] = [122u8, 172u8, 25u8, 34u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `DreamSequencerNotSet()` and selector `0x5242b6c5`.
```solidity
error DreamSequencerNotSet();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DreamSequencerNotSet {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<DreamSequencerNotSet> for UnderlyingRustTuple<'_> {
            fn from(value: DreamSequencerNotSet) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for DreamSequencerNotSet {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for DreamSequencerNotSet {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "DreamSequencerNotSet()";
            const SELECTOR: [u8; 4] = [82u8, 66u8, 182u8, 197u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `InvalidAddress()` and selector `0xe6c4247b`.
```solidity
error InvalidAddress();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidAddress {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidAddress> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidAddress) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidAddress {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidAddress {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidAddress()";
            const SELECTOR: [u8; 4] = [230u8, 196u8, 36u8, 123u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `OwnableInvalidOwner(address)` and selector `0x1e4fbdf7`.
```solidity
error OwnableInvalidOwner(address owner);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableInvalidOwner {
        pub owner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableInvalidOwner> for UnderlyingRustTuple<'_> {
            fn from(value: OwnableInvalidOwner) -> Self {
                (value.owner,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for OwnableInvalidOwner {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { owner: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableInvalidOwner {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableInvalidOwner(address)";
            const SELECTOR: [u8; 4] = [30u8, 79u8, 189u8, 247u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `OwnableUnauthorizedAccount(address)` and selector `0x118cdaa7`.
```solidity
error OwnableUnauthorizedAccount(address account);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableUnauthorizedAccount {
        pub account: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: OwnableUnauthorizedAccount) -> Self {
                (value.account,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for OwnableUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { account: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableUnauthorizedAccount(address)";
            const SELECTOR: [u8; 4] = [17u8, 140u8, 218u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
        }
    };
    /**Event with signature `ApplicantAdded(uint256,string,address,bytes,uint8)` and selector `0x9e85ad46debe35943847eb55a07cfbfe56ed79023080d0824651ca67f2f9afcc`.
```solidity
event ApplicantAdded(uint256 indexed applicantId, string name, address indexed agentAddress, bytes additionalData, ApplicationStatus status);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct ApplicantAdded {
        #[allow(missing_docs)]
        pub applicantId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub name: alloy::sol_types::private::String,
        #[allow(missing_docs)]
        pub agentAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub additionalData: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub status: <ApplicationStatus as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for ApplicantAdded {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Bytes,
                ApplicationStatus,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "ApplicantAdded(uint256,string,address,bytes,uint8)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                158u8,
                133u8,
                173u8,
                70u8,
                222u8,
                190u8,
                53u8,
                148u8,
                56u8,
                71u8,
                235u8,
                85u8,
                160u8,
                124u8,
                251u8,
                254u8,
                86u8,
                237u8,
                121u8,
                2u8,
                48u8,
                128u8,
                208u8,
                130u8,
                70u8,
                81u8,
                202u8,
                103u8,
                242u8,
                249u8,
                175u8,
                204u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    applicantId: topics.1,
                    name: data.0,
                    agentAddress: topics.2,
                    additionalData: data.1,
                    status: data.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.name,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.additionalData,
                    ),
                    <ApplicationStatus as alloy_sol_types::SolType>::tokenize(
                        &self.status,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.applicantId.clone(),
                    self.agentAddress.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.applicantId);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.agentAddress,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for ApplicantAdded {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&ApplicantAdded> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &ApplicantAdded) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `ApplicantStatusUpdated(uint256,uint8)` and selector `0xc3f8265654a25915479f105bb8f31bd2ed7f77dfbbdffe534048f9287192cb41`.
```solidity
event ApplicantStatusUpdated(uint256 indexed applicantId, ApplicationStatus status);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct ApplicantStatusUpdated {
        #[allow(missing_docs)]
        pub applicantId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub status: <ApplicationStatus as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for ApplicantStatusUpdated {
            type DataTuple<'a> = (ApplicationStatus,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            const SIGNATURE: &'static str = "ApplicantStatusUpdated(uint256,uint8)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                195u8,
                248u8,
                38u8,
                86u8,
                84u8,
                162u8,
                89u8,
                21u8,
                71u8,
                159u8,
                16u8,
                91u8,
                184u8,
                243u8,
                27u8,
                210u8,
                237u8,
                127u8,
                119u8,
                223u8,
                187u8,
                223u8,
                254u8,
                83u8,
                64u8,
                72u8,
                249u8,
                40u8,
                113u8,
                146u8,
                203u8,
                65u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    applicantId: topics.1,
                    status: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <ApplicationStatus as alloy_sol_types::SolType>::tokenize(
                        &self.status,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.applicantId.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.applicantId);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for ApplicantStatusUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&ApplicantStatusUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &ApplicantStatusUpdated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `OwnershipTransferred(address,address)` and selector `0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0`.
```solidity
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct OwnershipTransferred {
        #[allow(missing_docs)]
        pub previousOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OwnershipTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OwnershipTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousOwner: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousOwner.clone(),
                    self.newOwner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousOwner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OwnershipTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OwnershipTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &OwnershipTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address admin);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        pub admin: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value.admin,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { admin: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin,
                    ),
                )
            }
        }
    };
    /**Function with signature `addApplicant(string,address,bytes)` and selector `0xe7665761`.
```solidity
function addApplicant(string memory name, address agentAddress, bytes memory additionalData) external returns (uint256 applicantId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addApplicantCall {
        pub name: alloy::sol_types::private::String,
        pub agentAddress: alloy::sol_types::private::Address,
        pub additionalData: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`addApplicant(string,address,bytes)`](addApplicantCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addApplicantReturn {
        pub applicantId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::String,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addApplicantCall> for UnderlyingRustTuple<'_> {
                fn from(value: addApplicantCall) -> Self {
                    (value.name, value.agentAddress, value.additionalData)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for addApplicantCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        name: tuple.0,
                        agentAddress: tuple.1,
                        additionalData: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addApplicantReturn> for UnderlyingRustTuple<'_> {
                fn from(value: addApplicantReturn) -> Self {
                    (value.applicantId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for addApplicantReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { applicantId: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for addApplicantCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = addApplicantReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "addApplicant(string,address,bytes)";
            const SELECTOR: [u8; 4] = [231u8, 102u8, 87u8, 97u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.name,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.agentAddress,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.additionalData,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `agentToApplicantId(address)` and selector `0x05db3720`.
```solidity
function agentToApplicantId(address) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct agentToApplicantIdCall {
        pub _0: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`agentToApplicantId(address)`](agentToApplicantIdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct agentToApplicantIdReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<agentToApplicantIdCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: agentToApplicantIdCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for agentToApplicantIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<agentToApplicantIdReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: agentToApplicantIdReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for agentToApplicantIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for agentToApplicantIdCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = agentToApplicantIdReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "agentToApplicantId(address)";
            const SELECTOR: [u8; 4] = [5u8, 219u8, 55u8, 32u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `applicantCount()` and selector `0x18f53993`.
```solidity
function applicantCount() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct applicantCountCall {}
    ///Container type for the return parameters of the [`applicantCount()`](applicantCountCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct applicantCountReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<applicantCountCall> for UnderlyingRustTuple<'_> {
                fn from(value: applicantCountCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for applicantCountCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<applicantCountReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: applicantCountReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for applicantCountReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for applicantCountCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = applicantCountReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "applicantCount()";
            const SELECTOR: [u8; 4] = [24u8, 245u8, 57u8, 147u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `applicants(uint256)` and selector `0x63de5323`.
```solidity
function applicants(uint256) external view returns (address agentAddress, ApplicationStatus status, bool isValid, string memory name, bytes memory additionalData);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct applicantsCall {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`applicants(uint256)`](applicantsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct applicantsReturn {
        pub agentAddress: alloy::sol_types::private::Address,
        pub status: <ApplicationStatus as alloy::sol_types::SolType>::RustType,
        pub isValid: bool,
        pub name: alloy::sol_types::private::String,
        pub additionalData: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<applicantsCall> for UnderlyingRustTuple<'_> {
                fn from(value: applicantsCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for applicantsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                ApplicationStatus,
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                <ApplicationStatus as alloy::sol_types::SolType>::RustType,
                bool,
                alloy::sol_types::private::String,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<applicantsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: applicantsReturn) -> Self {
                    (
                        value.agentAddress,
                        value.status,
                        value.isValid,
                        value.name,
                        value.additionalData,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for applicantsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        agentAddress: tuple.0,
                        status: tuple.1,
                        isValid: tuple.2,
                        name: tuple.3,
                        additionalData: tuple.4,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for applicantsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = applicantsReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                ApplicationStatus,
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Bytes,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "applicants(uint256)";
            const SELECTOR: [u8; 4] = [99u8, 222u8, 83u8, 35u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._0),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `approveApplicant(uint256)` and selector `0x0cfddc12`.
```solidity
function approveApplicant(uint256 applicantId) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct approveApplicantCall {
        pub applicantId: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`approveApplicant(uint256)`](approveApplicantCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct approveApplicantReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<approveApplicantCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: approveApplicantCall) -> Self {
                    (value.applicantId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for approveApplicantCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { applicantId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<approveApplicantReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: approveApplicantReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for approveApplicantReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for approveApplicantCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = approveApplicantReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "approveApplicant(uint256)";
            const SELECTOR: [u8; 4] = [12u8, 253u8, 220u8, 18u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.applicantId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `denyApplicant(uint256)` and selector `0x6bf5164c`.
```solidity
function denyApplicant(uint256 applicantId) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct denyApplicantCall {
        pub applicantId: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`denyApplicant(uint256)`](denyApplicantCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct denyApplicantReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<denyApplicantCall> for UnderlyingRustTuple<'_> {
                fn from(value: denyApplicantCall) -> Self {
                    (value.applicantId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for denyApplicantCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { applicantId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<denyApplicantReturn> for UnderlyingRustTuple<'_> {
                fn from(value: denyApplicantReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for denyApplicantReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for denyApplicantCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = denyApplicantReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "denyApplicant(uint256)";
            const SELECTOR: [u8; 4] = [107u8, 245u8, 22u8, 76u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.applicantId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `dreamSequencer()` and selector `0xe9c5aeec`.
```solidity
function dreamSequencer() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct dreamSequencerCall {}
    ///Container type for the return parameters of the [`dreamSequencer()`](dreamSequencerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct dreamSequencerReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<dreamSequencerCall> for UnderlyingRustTuple<'_> {
                fn from(value: dreamSequencerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for dreamSequencerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<dreamSequencerReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: dreamSequencerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for dreamSequencerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for dreamSequencerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = dreamSequencerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "dreamSequencer()";
            const SELECTOR: [u8; 4] = [233u8, 197u8, 174u8, 236u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getApplicant(uint256)` and selector `0xeea3f82d`.
```solidity
function getApplicant(uint256 applicantId) external view returns (address agentAddress, ApplicationStatus status, string memory name, bytes memory additionalData);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getApplicantCall {
        pub applicantId: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`getApplicant(uint256)`](getApplicantCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getApplicantReturn {
        pub agentAddress: alloy::sol_types::private::Address,
        pub status: <ApplicationStatus as alloy::sol_types::SolType>::RustType,
        pub name: alloy::sol_types::private::String,
        pub additionalData: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getApplicantCall> for UnderlyingRustTuple<'_> {
                fn from(value: getApplicantCall) -> Self {
                    (value.applicantId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getApplicantCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { applicantId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                ApplicationStatus,
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                <ApplicationStatus as alloy::sol_types::SolType>::RustType,
                alloy::sol_types::private::String,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getApplicantReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getApplicantReturn) -> Self {
                    (value.agentAddress, value.status, value.name, value.additionalData)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getApplicantReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        agentAddress: tuple.0,
                        status: tuple.1,
                        name: tuple.2,
                        additionalData: tuple.3,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getApplicantCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getApplicantReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                ApplicationStatus,
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Bytes,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getApplicant(uint256)";
            const SELECTOR: [u8; 4] = [238u8, 163u8, 248u8, 45u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.applicantId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isPermittedByAddress(address)` and selector `0x9e549515`.
```solidity
function isPermittedByAddress(address agentAddress) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isPermittedByAddressCall {
        pub agentAddress: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`isPermittedByAddress(address)`](isPermittedByAddressCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isPermittedByAddressReturn {
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isPermittedByAddressCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: isPermittedByAddressCall) -> Self {
                    (value.agentAddress,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isPermittedByAddressCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { agentAddress: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isPermittedByAddressReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: isPermittedByAddressReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isPermittedByAddressReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isPermittedByAddressCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isPermittedByAddressReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isPermittedByAddress(address)";
            const SELECTOR: [u8; 4] = [158u8, 84u8, 149u8, 21u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.agentAddress,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isPermittedById(uint256)` and selector `0x3e141b03`.
```solidity
function isPermittedById(uint256 applicantId) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isPermittedByIdCall {
        pub applicantId: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`isPermittedById(uint256)`](isPermittedByIdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isPermittedByIdReturn {
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isPermittedByIdCall> for UnderlyingRustTuple<'_> {
                fn from(value: isPermittedByIdCall) -> Self {
                    (value.applicantId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isPermittedByIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { applicantId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isPermittedByIdReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: isPermittedByIdReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isPermittedByIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isPermittedByIdCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isPermittedByIdReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isPermittedById(uint256)";
            const SELECTOR: [u8; 4] = [62u8, 20u8, 27u8, 3u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.applicantId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `owner()` and selector `0x8da5cb5b`.
```solidity
function owner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerCall {}
    ///Container type for the return parameters of the [`owner()`](ownerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "owner()";
            const SELECTOR: [u8; 4] = [141u8, 165u8, 203u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `renounceOwnership()` and selector `0x715018a6`.
```solidity
function renounceOwnership() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipCall {}
    ///Container type for the return parameters of the [`renounceOwnership()`](renounceOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceOwnershipCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceOwnership()";
            const SELECTOR: [u8; 4] = [113u8, 80u8, 24u8, 166u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setDreamSequencer(address)` and selector `0x1bb130b9`.
```solidity
function setDreamSequencer(address _dreamSequencer) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setDreamSequencerCall {
        pub _dreamSequencer: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`setDreamSequencer(address)`](setDreamSequencerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setDreamSequencerReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setDreamSequencerCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setDreamSequencerCall) -> Self {
                    (value._dreamSequencer,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setDreamSequencerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _dreamSequencer: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setDreamSequencerReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setDreamSequencerReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setDreamSequencerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setDreamSequencerCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setDreamSequencerReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setDreamSequencer(address)";
            const SELECTOR: [u8; 4] = [27u8, 177u8, 48u8, 185u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._dreamSequencer,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferOwnership(address)` and selector `0xf2fde38b`.
```solidity
function transferOwnership(address newOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipCall {
        pub newOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferOwnership(address)`](transferOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipCall) -> Self {
                    (value.newOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferOwnershipCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferOwnership(address)";
            const SELECTOR: [u8; 4] = [242u8, 253u8, 227u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newOwner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`AgentApplication`](self) function calls.
    pub enum AgentApplicationCalls {
        addApplicant(addApplicantCall),
        agentToApplicantId(agentToApplicantIdCall),
        applicantCount(applicantCountCall),
        applicants(applicantsCall),
        approveApplicant(approveApplicantCall),
        denyApplicant(denyApplicantCall),
        dreamSequencer(dreamSequencerCall),
        getApplicant(getApplicantCall),
        isPermittedByAddress(isPermittedByAddressCall),
        isPermittedById(isPermittedByIdCall),
        owner(ownerCall),
        renounceOwnership(renounceOwnershipCall),
        setDreamSequencer(setDreamSequencerCall),
        transferOwnership(transferOwnershipCall),
    }
    #[automatically_derived]
    impl AgentApplicationCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [5u8, 219u8, 55u8, 32u8],
            [12u8, 253u8, 220u8, 18u8],
            [24u8, 245u8, 57u8, 147u8],
            [27u8, 177u8, 48u8, 185u8],
            [62u8, 20u8, 27u8, 3u8],
            [99u8, 222u8, 83u8, 35u8],
            [107u8, 245u8, 22u8, 76u8],
            [113u8, 80u8, 24u8, 166u8],
            [141u8, 165u8, 203u8, 91u8],
            [158u8, 84u8, 149u8, 21u8],
            [231u8, 102u8, 87u8, 97u8],
            [233u8, 197u8, 174u8, 236u8],
            [238u8, 163u8, 248u8, 45u8],
            [242u8, 253u8, 227u8, 139u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for AgentApplicationCalls {
        const NAME: &'static str = "AgentApplicationCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 14usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::addApplicant(_) => {
                    <addApplicantCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::agentToApplicantId(_) => {
                    <agentToApplicantIdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::applicantCount(_) => {
                    <applicantCountCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::applicants(_) => {
                    <applicantsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::approveApplicant(_) => {
                    <approveApplicantCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::denyApplicant(_) => {
                    <denyApplicantCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::dreamSequencer(_) => {
                    <dreamSequencerCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getApplicant(_) => {
                    <getApplicantCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isPermittedByAddress(_) => {
                    <isPermittedByAddressCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isPermittedById(_) => {
                    <isPermittedByIdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::owner(_) => <ownerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::renounceOwnership(_) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setDreamSequencer(_) => {
                    <setDreamSequencerCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferOwnership(_) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<AgentApplicationCalls>] = &[
                {
                    fn agentToApplicantId(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationCalls> {
                        <agentToApplicantIdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationCalls::agentToApplicantId)
                    }
                    agentToApplicantId
                },
                {
                    fn approveApplicant(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationCalls> {
                        <approveApplicantCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationCalls::approveApplicant)
                    }
                    approveApplicant
                },
                {
                    fn applicantCount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationCalls> {
                        <applicantCountCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationCalls::applicantCount)
                    }
                    applicantCount
                },
                {
                    fn setDreamSequencer(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationCalls> {
                        <setDreamSequencerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationCalls::setDreamSequencer)
                    }
                    setDreamSequencer
                },
                {
                    fn isPermittedById(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationCalls> {
                        <isPermittedByIdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationCalls::isPermittedById)
                    }
                    isPermittedById
                },
                {
                    fn applicants(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationCalls> {
                        <applicantsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationCalls::applicants)
                    }
                    applicants
                },
                {
                    fn denyApplicant(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationCalls> {
                        <denyApplicantCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationCalls::denyApplicant)
                    }
                    denyApplicant
                },
                {
                    fn renounceOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationCalls> {
                        <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationCalls::renounceOwnership)
                    }
                    renounceOwnership
                },
                {
                    fn owner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationCalls> {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationCalls::owner)
                    }
                    owner
                },
                {
                    fn isPermittedByAddress(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationCalls> {
                        <isPermittedByAddressCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationCalls::isPermittedByAddress)
                    }
                    isPermittedByAddress
                },
                {
                    fn addApplicant(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationCalls> {
                        <addApplicantCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationCalls::addApplicant)
                    }
                    addApplicant
                },
                {
                    fn dreamSequencer(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationCalls> {
                        <dreamSequencerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationCalls::dreamSequencer)
                    }
                    dreamSequencer
                },
                {
                    fn getApplicant(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationCalls> {
                        <getApplicantCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationCalls::getApplicant)
                    }
                    getApplicant
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationCalls> {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationCalls::transferOwnership)
                    }
                    transferOwnership
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::addApplicant(inner) => {
                    <addApplicantCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::agentToApplicantId(inner) => {
                    <agentToApplicantIdCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::applicantCount(inner) => {
                    <applicantCountCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::applicants(inner) => {
                    <applicantsCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::approveApplicant(inner) => {
                    <approveApplicantCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::denyApplicant(inner) => {
                    <denyApplicantCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::dreamSequencer(inner) => {
                    <dreamSequencerCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getApplicant(inner) => {
                    <getApplicantCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::isPermittedByAddress(inner) => {
                    <isPermittedByAddressCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::isPermittedById(inner) => {
                    <isPermittedByIdCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setDreamSequencer(inner) => {
                    <setDreamSequencerCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::addApplicant(inner) => {
                    <addApplicantCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::agentToApplicantId(inner) => {
                    <agentToApplicantIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::applicantCount(inner) => {
                    <applicantCountCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::applicants(inner) => {
                    <applicantsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::approveApplicant(inner) => {
                    <approveApplicantCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::denyApplicant(inner) => {
                    <denyApplicantCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::dreamSequencer(inner) => {
                    <dreamSequencerCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getApplicant(inner) => {
                    <getApplicantCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isPermittedByAddress(inner) => {
                    <isPermittedByAddressCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isPermittedById(inner) => {
                    <isPermittedByIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setDreamSequencer(inner) => {
                    <setDreamSequencerCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`AgentApplication`](self) custom errors.
    pub enum AgentApplicationErrors {
        AgentAlreadyApplied(AgentAlreadyApplied),
        ApplicantNotFound(ApplicantNotFound),
        DreamSequencerNotSet(DreamSequencerNotSet),
        InvalidAddress(InvalidAddress),
        OwnableInvalidOwner(OwnableInvalidOwner),
        OwnableUnauthorizedAccount(OwnableUnauthorizedAccount),
    }
    #[automatically_derived]
    impl AgentApplicationErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [17u8, 140u8, 218u8, 167u8],
            [30u8, 79u8, 189u8, 247u8],
            [82u8, 66u8, 182u8, 197u8],
            [122u8, 172u8, 25u8, 34u8],
            [230u8, 196u8, 36u8, 123u8],
            [252u8, 117u8, 62u8, 93u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for AgentApplicationErrors {
        const NAME: &'static str = "AgentApplicationErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 6usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AgentAlreadyApplied(_) => {
                    <AgentAlreadyApplied as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ApplicantNotFound(_) => {
                    <ApplicantNotFound as alloy_sol_types::SolError>::SELECTOR
                }
                Self::DreamSequencerNotSet(_) => {
                    <DreamSequencerNotSet as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidAddress(_) => {
                    <InvalidAddress as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableInvalidOwner(_) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableUnauthorizedAccount(_) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<AgentApplicationErrors>] = &[
                {
                    fn OwnableUnauthorizedAccount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationErrors> {
                        <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationErrors::OwnableUnauthorizedAccount)
                    }
                    OwnableUnauthorizedAccount
                },
                {
                    fn OwnableInvalidOwner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationErrors> {
                        <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationErrors::OwnableInvalidOwner)
                    }
                    OwnableInvalidOwner
                },
                {
                    fn DreamSequencerNotSet(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationErrors> {
                        <DreamSequencerNotSet as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationErrors::DreamSequencerNotSet)
                    }
                    DreamSequencerNotSet
                },
                {
                    fn ApplicantNotFound(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationErrors> {
                        <ApplicantNotFound as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationErrors::ApplicantNotFound)
                    }
                    ApplicantNotFound
                },
                {
                    fn InvalidAddress(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationErrors> {
                        <InvalidAddress as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationErrors::InvalidAddress)
                    }
                    InvalidAddress
                },
                {
                    fn AgentAlreadyApplied(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AgentApplicationErrors> {
                        <AgentAlreadyApplied as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AgentApplicationErrors::AgentAlreadyApplied)
                    }
                    AgentAlreadyApplied
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AgentAlreadyApplied(inner) => {
                    <AgentAlreadyApplied as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ApplicantNotFound(inner) => {
                    <ApplicantNotFound as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::DreamSequencerNotSet(inner) => {
                    <DreamSequencerNotSet as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidAddress(inner) => {
                    <InvalidAddress as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AgentAlreadyApplied(inner) => {
                    <AgentAlreadyApplied as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ApplicantNotFound(inner) => {
                    <ApplicantNotFound as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::DreamSequencerNotSet(inner) => {
                    <DreamSequencerNotSet as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidAddress(inner) => {
                    <InvalidAddress as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`AgentApplication`](self) events.
    pub enum AgentApplicationEvents {
        ApplicantAdded(ApplicantAdded),
        ApplicantStatusUpdated(ApplicantStatusUpdated),
        OwnershipTransferred(OwnershipTransferred),
    }
    #[automatically_derived]
    impl AgentApplicationEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ],
            [
                158u8,
                133u8,
                173u8,
                70u8,
                222u8,
                190u8,
                53u8,
                148u8,
                56u8,
                71u8,
                235u8,
                85u8,
                160u8,
                124u8,
                251u8,
                254u8,
                86u8,
                237u8,
                121u8,
                2u8,
                48u8,
                128u8,
                208u8,
                130u8,
                70u8,
                81u8,
                202u8,
                103u8,
                242u8,
                249u8,
                175u8,
                204u8,
            ],
            [
                195u8,
                248u8,
                38u8,
                86u8,
                84u8,
                162u8,
                89u8,
                21u8,
                71u8,
                159u8,
                16u8,
                91u8,
                184u8,
                243u8,
                27u8,
                210u8,
                237u8,
                127u8,
                119u8,
                223u8,
                187u8,
                223u8,
                254u8,
                83u8,
                64u8,
                72u8,
                249u8,
                40u8,
                113u8,
                146u8,
                203u8,
                65u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for AgentApplicationEvents {
        const NAME: &'static str = "AgentApplicationEvents";
        const COUNT: usize = 3usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<ApplicantAdded as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <ApplicantAdded as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::ApplicantAdded)
                }
                Some(
                    <ApplicantStatusUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <ApplicantStatusUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::ApplicantStatusUpdated)
                }
                Some(
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::OwnershipTransferred)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for AgentApplicationEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::ApplicantAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::ApplicantStatusUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::ApplicantAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::ApplicantStatusUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`AgentApplication`](self) contract instance.

See the [wrapper's documentation](`AgentApplicationInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> AgentApplicationInstance<T, P, N> {
        AgentApplicationInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        admin: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<AgentApplicationInstance<T, P, N>>,
    > {
        AgentApplicationInstance::<T, P, N>::deploy(provider, admin)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        admin: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        AgentApplicationInstance::<T, P, N>::deploy_builder(provider, admin)
    }
    /**A [`AgentApplication`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`AgentApplication`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct AgentApplicationInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for AgentApplicationInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("AgentApplicationInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AgentApplicationInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`AgentApplication`](self) contract instance.

See the [wrapper's documentation](`AgentApplicationInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            admin: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<AgentApplicationInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, admin);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            admin: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { admin },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> AgentApplicationInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> AgentApplicationInstance<T, P, N> {
            AgentApplicationInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AgentApplicationInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`addApplicant`] function.
        pub fn addApplicant(
            &self,
            name: alloy::sol_types::private::String,
            agentAddress: alloy::sol_types::private::Address,
            additionalData: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, addApplicantCall, N> {
            self.call_builder(
                &addApplicantCall {
                    name,
                    agentAddress,
                    additionalData,
                },
            )
        }
        ///Creates a new call builder for the [`agentToApplicantId`] function.
        pub fn agentToApplicantId(
            &self,
            _0: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, agentToApplicantIdCall, N> {
            self.call_builder(&agentToApplicantIdCall { _0 })
        }
        ///Creates a new call builder for the [`applicantCount`] function.
        pub fn applicantCount(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, applicantCountCall, N> {
            self.call_builder(&applicantCountCall {})
        }
        ///Creates a new call builder for the [`applicants`] function.
        pub fn applicants(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, applicantsCall, N> {
            self.call_builder(&applicantsCall { _0 })
        }
        ///Creates a new call builder for the [`approveApplicant`] function.
        pub fn approveApplicant(
            &self,
            applicantId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, approveApplicantCall, N> {
            self.call_builder(
                &approveApplicantCall {
                    applicantId,
                },
            )
        }
        ///Creates a new call builder for the [`denyApplicant`] function.
        pub fn denyApplicant(
            &self,
            applicantId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, denyApplicantCall, N> {
            self.call_builder(&denyApplicantCall { applicantId })
        }
        ///Creates a new call builder for the [`dreamSequencer`] function.
        pub fn dreamSequencer(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, dreamSequencerCall, N> {
            self.call_builder(&dreamSequencerCall {})
        }
        ///Creates a new call builder for the [`getApplicant`] function.
        pub fn getApplicant(
            &self,
            applicantId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, getApplicantCall, N> {
            self.call_builder(&getApplicantCall { applicantId })
        }
        ///Creates a new call builder for the [`isPermittedByAddress`] function.
        pub fn isPermittedByAddress(
            &self,
            agentAddress: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, isPermittedByAddressCall, N> {
            self.call_builder(
                &isPermittedByAddressCall {
                    agentAddress,
                },
            )
        }
        ///Creates a new call builder for the [`isPermittedById`] function.
        pub fn isPermittedById(
            &self,
            applicantId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, isPermittedByIdCall, N> {
            self.call_builder(&isPermittedByIdCall { applicantId })
        }
        ///Creates a new call builder for the [`owner`] function.
        pub fn owner(&self) -> alloy_contract::SolCallBuilder<T, &P, ownerCall, N> {
            self.call_builder(&ownerCall {})
        }
        ///Creates a new call builder for the [`renounceOwnership`] function.
        pub fn renounceOwnership(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, renounceOwnershipCall, N> {
            self.call_builder(&renounceOwnershipCall {})
        }
        ///Creates a new call builder for the [`setDreamSequencer`] function.
        pub fn setDreamSequencer(
            &self,
            _dreamSequencer: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, setDreamSequencerCall, N> {
            self.call_builder(
                &setDreamSequencerCall {
                    _dreamSequencer,
                },
            )
        }
        ///Creates a new call builder for the [`transferOwnership`] function.
        pub fn transferOwnership(
            &self,
            newOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferOwnershipCall, N> {
            self.call_builder(&transferOwnershipCall { newOwner })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AgentApplicationInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`ApplicantAdded`] event.
        pub fn ApplicantAdded_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, ApplicantAdded, N> {
            self.event_filter::<ApplicantAdded>()
        }
        ///Creates a new event filter for the [`ApplicantStatusUpdated`] event.
        pub fn ApplicantStatusUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, ApplicantStatusUpdated, N> {
            self.event_filter::<ApplicantStatusUpdated>()
        }
        ///Creates a new event filter for the [`OwnershipTransferred`] event.
        pub fn OwnershipTransferred_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, OwnershipTransferred, N> {
            self.event_filter::<OwnershipTransferred>()
        }
    }
}
