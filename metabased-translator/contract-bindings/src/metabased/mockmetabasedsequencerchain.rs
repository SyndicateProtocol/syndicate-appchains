/**

Generated by the following Solidity interface...
```solidity
interface MockMetabasedSequencerChain {
    function lastProcessedData() external view returns (bytes memory);
    function processTransaction(bytes memory data) external;
    function setRevertFlag(bool _shouldRevert) external;
    function shouldRevert() external view returns (bool);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "lastProcessedData",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "processTransaction",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setRevertFlag",
    "inputs": [
      {
        "name": "_shouldRevert",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "shouldRevert",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod MockMetabasedSequencerChain {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608080604052346015576103e8908161001a8239f35b5f80fdfe6080604081815260049182361015610015575f80fd5b5f3560e01c908163381ba1401461034b57816346e2cc091461018757508063d3072d82146101645763f352cd721461004b575f80fd5b34610160575f3660031901126101605780515f8054908261006b8361037a565b9182825260209283830194600190856001821691825f146101465750506001146100ef575b5050601f801995869203011681019581871067ffffffffffffffff8811176100dc575091601f9186949385875281865251918280928701528686015e5f85828601015201168101030190f35b604190634e487b7160e01b5f525260245ffd5b5f80805285935091907f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b82841061012e575050508201015f80610090565b8054848a01860152889550869490930192810161011a565b925093505060ff19168552151560051b8201015f80610090565b5f80fd5b5034610160575f3660031901126101605760209060ff6001541690519015158152f35b8390346101605760208060031936011261016057823567ffffffffffffffff92838211610160573660238301121561016057818501359384116101605760249036602486850101116101605760019560ff8754166103185750506101eb5f5461037a565b601f81116102b6575b505f92601f85116001146102335750509282939183925f94610225575b50501b915f199060031b1c1916175f555f80f35b016024013592508480610211565b7f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56393918591601f198316915f91905b8984841061029a57505050501061027e575b505050811b015f55005b01602401355f19600384901b60f8161c19169055828080610274565b8787018201358955909701969481019488945091810191610262565b7f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563601f860160051c8101916020871061030e575b601f0160051c019086905b8281106103035750506101f4565b5f81550186906102f5565b90915081906102ea565b62461bcd60e51b8252602090820152600f60248201526e29b2b8bab2b731b2b91032b93937b960891b6044820152606490fd5b833461016057602036600319011261016057358015158091036101605760ff8019600154169116176001555f80f35b90600182811c921680156103a8575b602083101461039457565b634e487b7160e01b5f52602260045260245ffd5b91607f169161038956fea264697066735822122017e7527373bd32adc30ce4750e6c7a129bd90c00508ce5bee029fefe1f35e9e764736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80\x80`@R4`\x15Wa\x03\xE8\x90\x81a\0\x1A\x829\xF3[_\x80\xFD\xFE`\x80`@\x81\x81R`\x04\x91\x826\x10\x15a\0\x15W_\x80\xFD[_5`\xE0\x1C\x90\x81c8\x1B\xA1@\x14a\x03KW\x81cF\xE2\xCC\t\x14a\x01\x87WP\x80c\xD3\x07-\x82\x14a\x01dWc\xF3R\xCDr\x14a\0KW_\x80\xFD[4a\x01`W_6`\x03\x19\x01\x12a\x01`W\x80Q_\x80T\x90\x82a\0k\x83a\x03zV[\x91\x82\x82R` \x92\x83\x83\x01\x94`\x01\x90\x85`\x01\x82\x16\x91\x82_\x14a\x01FWPP`\x01\x14a\0\xEFW[PP`\x1F\x80\x19\x95\x86\x92\x03\x01\x16\x81\x01\x95\x81\x87\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x88\x11\x17a\0\xDCWP\x91`\x1F\x91\x86\x94\x93\x85\x87R\x81\x86RQ\x91\x82\x80\x92\x87\x01R\x86\x86\x01^_\x85\x82\x86\x01\x01R\x01\x16\x81\x01\x03\x01\x90\xF3[`A\x90cNH{q`\xE0\x1B_RR`$_\xFD[_\x80\x80R\x85\x93P\x91\x90\x7F)\r\xEC\xD9T\x8Bb\xA8\xD6\x03E\xA9\x888o\xC8K\xA6\xBC\x95H@\x08\xF66/\x93\x16\x0E\xF3\xE5c[\x82\x84\x10a\x01.WPPP\x82\x01\x01_\x80a\0\x90V[\x80T\x84\x8A\x01\x86\x01R\x88\x95P\x86\x94\x90\x93\x01\x92\x81\x01a\x01\x1AV[\x92P\x93PP`\xFF\x19\x16\x85R\x15\x15`\x05\x1B\x82\x01\x01_\x80a\0\x90V[_\x80\xFD[P4a\x01`W_6`\x03\x19\x01\x12a\x01`W` \x90`\xFF`\x01T\x16\x90Q\x90\x15\x15\x81R\xF3[\x83\x904a\x01`W` \x80`\x03\x196\x01\x12a\x01`W\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x92\x83\x82\x11a\x01`W6`#\x83\x01\x12\x15a\x01`W\x81\x85\x015\x93\x84\x11a\x01`W`$\x906`$\x86\x85\x01\x01\x11a\x01`W`\x01\x95`\xFF\x87T\x16a\x03\x18WPPa\x01\xEB_Ta\x03zV[`\x1F\x81\x11a\x02\xB6W[P_\x92`\x1F\x85\x11`\x01\x14a\x023WPP\x92\x82\x93\x91\x83\x92_\x94a\x02%W[PP\x1B\x91_\x19\x90`\x03\x1B\x1C\x19\x16\x17_U_\x80\xF3[\x01`$\x015\x92P\x84\x80a\x02\x11V[\x7F)\r\xEC\xD9T\x8Bb\xA8\xD6\x03E\xA9\x888o\xC8K\xA6\xBC\x95H@\x08\xF66/\x93\x16\x0E\xF3\xE5c\x93\x91\x85\x91`\x1F\x19\x83\x16\x91_\x91\x90[\x89\x84\x84\x10a\x02\x9AWPPPP\x10a\x02~W[PPP\x81\x1B\x01_U\0[\x01`$\x015_\x19`\x03\x84\x90\x1B`\xF8\x16\x1C\x19\x16\x90U\x82\x80\x80a\x02tV[\x87\x87\x01\x82\x015\x89U\x90\x97\x01\x96\x94\x81\x01\x94\x88\x94P\x91\x81\x01\x91a\x02bV[\x7F)\r\xEC\xD9T\x8Bb\xA8\xD6\x03E\xA9\x888o\xC8K\xA6\xBC\x95H@\x08\xF66/\x93\x16\x0E\xF3\xE5c`\x1F\x86\x01`\x05\x1C\x81\x01\x91` \x87\x10a\x03\x0EW[`\x1F\x01`\x05\x1C\x01\x90\x86\x90[\x82\x81\x10a\x03\x03WPPa\x01\xF4V[_\x81U\x01\x86\x90a\x02\xF5V[\x90\x91P\x81\x90a\x02\xEAV[bF\x1B\xCD`\xE5\x1B\x82R` \x90\x82\x01R`\x0F`$\x82\x01Rn)\xB2\xB8\xBA\xB2\xB71\xB2\xB9\x102\xB997\xB9`\x89\x1B`D\x82\x01R`d\x90\xFD[\x834a\x01`W` 6`\x03\x19\x01\x12a\x01`W5\x80\x15\x15\x80\x91\x03a\x01`W`\xFF\x80\x19`\x01T\x16\x91\x16\x17`\x01U_\x80\xF3[\x90`\x01\x82\x81\x1C\x92\x16\x80\x15a\x03\xA8W[` \x83\x10\x14a\x03\x94WV[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x91`\x7F\x16\x91a\x03\x89V\xFE\xA2dipfsX\"\x12 \x17\xE7Rss\xBD2\xAD\xC3\x0C\xE4u\x0Elz\x12\x9B\xD9\x0C\0P\x8C\xE5\xBE\xE0)\xFE\xFE\x1F5\xE9\xE7dsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x6080604081815260049182361015610015575f80fd5b5f3560e01c908163381ba1401461034b57816346e2cc091461018757508063d3072d82146101645763f352cd721461004b575f80fd5b34610160575f3660031901126101605780515f8054908261006b8361037a565b9182825260209283830194600190856001821691825f146101465750506001146100ef575b5050601f801995869203011681019581871067ffffffffffffffff8811176100dc575091601f9186949385875281865251918280928701528686015e5f85828601015201168101030190f35b604190634e487b7160e01b5f525260245ffd5b5f80805285935091907f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b82841061012e575050508201015f80610090565b8054848a01860152889550869490930192810161011a565b925093505060ff19168552151560051b8201015f80610090565b5f80fd5b5034610160575f3660031901126101605760209060ff6001541690519015158152f35b8390346101605760208060031936011261016057823567ffffffffffffffff92838211610160573660238301121561016057818501359384116101605760249036602486850101116101605760019560ff8754166103185750506101eb5f5461037a565b601f81116102b6575b505f92601f85116001146102335750509282939183925f94610225575b50501b915f199060031b1c1916175f555f80f35b016024013592508480610211565b7f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56393918591601f198316915f91905b8984841061029a57505050501061027e575b505050811b015f55005b01602401355f19600384901b60f8161c19169055828080610274565b8787018201358955909701969481019488945091810191610262565b7f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563601f860160051c8101916020871061030e575b601f0160051c019086905b8281106103035750506101f4565b5f81550186906102f5565b90915081906102ea565b62461bcd60e51b8252602090820152600f60248201526e29b2b8bab2b731b2b91032b93937b960891b6044820152606490fd5b833461016057602036600319011261016057358015158091036101605760ff8019600154169116176001555f80f35b90600182811c921680156103a8575b602083101461039457565b634e487b7160e01b5f52602260045260245ffd5b91607f169161038956fea264697066735822122017e7527373bd32adc30ce4750e6c7a129bd90c00508ce5bee029fefe1f35e9e764736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@\x81\x81R`\x04\x91\x826\x10\x15a\0\x15W_\x80\xFD[_5`\xE0\x1C\x90\x81c8\x1B\xA1@\x14a\x03KW\x81cF\xE2\xCC\t\x14a\x01\x87WP\x80c\xD3\x07-\x82\x14a\x01dWc\xF3R\xCDr\x14a\0KW_\x80\xFD[4a\x01`W_6`\x03\x19\x01\x12a\x01`W\x80Q_\x80T\x90\x82a\0k\x83a\x03zV[\x91\x82\x82R` \x92\x83\x83\x01\x94`\x01\x90\x85`\x01\x82\x16\x91\x82_\x14a\x01FWPP`\x01\x14a\0\xEFW[PP`\x1F\x80\x19\x95\x86\x92\x03\x01\x16\x81\x01\x95\x81\x87\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x88\x11\x17a\0\xDCWP\x91`\x1F\x91\x86\x94\x93\x85\x87R\x81\x86RQ\x91\x82\x80\x92\x87\x01R\x86\x86\x01^_\x85\x82\x86\x01\x01R\x01\x16\x81\x01\x03\x01\x90\xF3[`A\x90cNH{q`\xE0\x1B_RR`$_\xFD[_\x80\x80R\x85\x93P\x91\x90\x7F)\r\xEC\xD9T\x8Bb\xA8\xD6\x03E\xA9\x888o\xC8K\xA6\xBC\x95H@\x08\xF66/\x93\x16\x0E\xF3\xE5c[\x82\x84\x10a\x01.WPPP\x82\x01\x01_\x80a\0\x90V[\x80T\x84\x8A\x01\x86\x01R\x88\x95P\x86\x94\x90\x93\x01\x92\x81\x01a\x01\x1AV[\x92P\x93PP`\xFF\x19\x16\x85R\x15\x15`\x05\x1B\x82\x01\x01_\x80a\0\x90V[_\x80\xFD[P4a\x01`W_6`\x03\x19\x01\x12a\x01`W` \x90`\xFF`\x01T\x16\x90Q\x90\x15\x15\x81R\xF3[\x83\x904a\x01`W` \x80`\x03\x196\x01\x12a\x01`W\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x92\x83\x82\x11a\x01`W6`#\x83\x01\x12\x15a\x01`W\x81\x85\x015\x93\x84\x11a\x01`W`$\x906`$\x86\x85\x01\x01\x11a\x01`W`\x01\x95`\xFF\x87T\x16a\x03\x18WPPa\x01\xEB_Ta\x03zV[`\x1F\x81\x11a\x02\xB6W[P_\x92`\x1F\x85\x11`\x01\x14a\x023WPP\x92\x82\x93\x91\x83\x92_\x94a\x02%W[PP\x1B\x91_\x19\x90`\x03\x1B\x1C\x19\x16\x17_U_\x80\xF3[\x01`$\x015\x92P\x84\x80a\x02\x11V[\x7F)\r\xEC\xD9T\x8Bb\xA8\xD6\x03E\xA9\x888o\xC8K\xA6\xBC\x95H@\x08\xF66/\x93\x16\x0E\xF3\xE5c\x93\x91\x85\x91`\x1F\x19\x83\x16\x91_\x91\x90[\x89\x84\x84\x10a\x02\x9AWPPPP\x10a\x02~W[PPP\x81\x1B\x01_U\0[\x01`$\x015_\x19`\x03\x84\x90\x1B`\xF8\x16\x1C\x19\x16\x90U\x82\x80\x80a\x02tV[\x87\x87\x01\x82\x015\x89U\x90\x97\x01\x96\x94\x81\x01\x94\x88\x94P\x91\x81\x01\x91a\x02bV[\x7F)\r\xEC\xD9T\x8Bb\xA8\xD6\x03E\xA9\x888o\xC8K\xA6\xBC\x95H@\x08\xF66/\x93\x16\x0E\xF3\xE5c`\x1F\x86\x01`\x05\x1C\x81\x01\x91` \x87\x10a\x03\x0EW[`\x1F\x01`\x05\x1C\x01\x90\x86\x90[\x82\x81\x10a\x03\x03WPPa\x01\xF4V[_\x81U\x01\x86\x90a\x02\xF5V[\x90\x91P\x81\x90a\x02\xEAV[bF\x1B\xCD`\xE5\x1B\x82R` \x90\x82\x01R`\x0F`$\x82\x01Rn)\xB2\xB8\xBA\xB2\xB71\xB2\xB9\x102\xB997\xB9`\x89\x1B`D\x82\x01R`d\x90\xFD[\x834a\x01`W` 6`\x03\x19\x01\x12a\x01`W5\x80\x15\x15\x80\x91\x03a\x01`W`\xFF\x80\x19`\x01T\x16\x91\x16\x17`\x01U_\x80\xF3[\x90`\x01\x82\x81\x1C\x92\x16\x80\x15a\x03\xA8W[` \x83\x10\x14a\x03\x94WV[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x91`\x7F\x16\x91a\x03\x89V\xFE\xA2dipfsX\"\x12 \x17\xE7Rss\xBD2\xAD\xC3\x0C\xE4u\x0Elz\x12\x9B\xD9\x0C\0P\x8C\xE5\xBE\xE0)\xFE\xFE\x1F5\xE9\xE7dsolcC\0\x08\x19\x003",
    );
    /**Function with signature `lastProcessedData()` and selector `0xf352cd72`.
```solidity
function lastProcessedData() external view returns (bytes memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct lastProcessedDataCall {}
    ///Container type for the return parameters of the [`lastProcessedData()`](lastProcessedDataCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct lastProcessedDataReturn {
        pub _0: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<lastProcessedDataCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: lastProcessedDataCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for lastProcessedDataCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<lastProcessedDataReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: lastProcessedDataReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for lastProcessedDataReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for lastProcessedDataCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = lastProcessedDataReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "lastProcessedData()";
            const SELECTOR: [u8; 4] = [243u8, 82u8, 205u8, 114u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransaction(bytes)` and selector `0x46e2cc09`.
```solidity
function processTransaction(bytes memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionCall {
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`processTransaction(bytes)`](processTransactionCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransaction(bytes)";
            const SELECTOR: [u8; 4] = [70u8, 226u8, 204u8, 9u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setRevertFlag(bool)` and selector `0x381ba140`.
```solidity
function setRevertFlag(bool _shouldRevert) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setRevertFlagCall {
        pub _shouldRevert: bool,
    }
    ///Container type for the return parameters of the [`setRevertFlag(bool)`](setRevertFlagCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setRevertFlagReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setRevertFlagCall> for UnderlyingRustTuple<'_> {
                fn from(value: setRevertFlagCall) -> Self {
                    (value._shouldRevert,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setRevertFlagCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _shouldRevert: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setRevertFlagReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setRevertFlagReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setRevertFlagReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setRevertFlagCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bool,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setRevertFlagReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setRevertFlag(bool)";
            const SELECTOR: [u8; 4] = [56u8, 27u8, 161u8, 64u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self._shouldRevert,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `shouldRevert()` and selector `0xd3072d82`.
```solidity
function shouldRevert() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct shouldRevertCall {}
    ///Container type for the return parameters of the [`shouldRevert()`](shouldRevertCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct shouldRevertReturn {
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<shouldRevertCall> for UnderlyingRustTuple<'_> {
                fn from(value: shouldRevertCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for shouldRevertCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<shouldRevertReturn> for UnderlyingRustTuple<'_> {
                fn from(value: shouldRevertReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for shouldRevertReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for shouldRevertCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = shouldRevertReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "shouldRevert()";
            const SELECTOR: [u8; 4] = [211u8, 7u8, 45u8, 130u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`MockMetabasedSequencerChain`](self) function calls.
    pub enum MockMetabasedSequencerChainCalls {
        lastProcessedData(lastProcessedDataCall),
        processTransaction(processTransactionCall),
        setRevertFlag(setRevertFlagCall),
        shouldRevert(shouldRevertCall),
    }
    #[automatically_derived]
    impl MockMetabasedSequencerChainCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [56u8, 27u8, 161u8, 64u8],
            [70u8, 226u8, 204u8, 9u8],
            [211u8, 7u8, 45u8, 130u8],
            [243u8, 82u8, 205u8, 114u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for MockMetabasedSequencerChainCalls {
        const NAME: &'static str = "MockMetabasedSequencerChainCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 4usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::lastProcessedData(_) => {
                    <lastProcessedDataCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransaction(_) => {
                    <processTransactionCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setRevertFlag(_) => {
                    <setRevertFlagCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::shouldRevert(_) => {
                    <shouldRevertCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<MockMetabasedSequencerChainCalls>] = &[
                {
                    fn setRevertFlag(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockMetabasedSequencerChainCalls> {
                        <setRevertFlagCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockMetabasedSequencerChainCalls::setRevertFlag)
                    }
                    setRevertFlag
                },
                {
                    fn processTransaction(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockMetabasedSequencerChainCalls> {
                        <processTransactionCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockMetabasedSequencerChainCalls::processTransaction)
                    }
                    processTransaction
                },
                {
                    fn shouldRevert(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockMetabasedSequencerChainCalls> {
                        <shouldRevertCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockMetabasedSequencerChainCalls::shouldRevert)
                    }
                    shouldRevert
                },
                {
                    fn lastProcessedData(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockMetabasedSequencerChainCalls> {
                        <lastProcessedDataCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockMetabasedSequencerChainCalls::lastProcessedData)
                    }
                    lastProcessedData
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::lastProcessedData(inner) => {
                    <lastProcessedDataCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransaction(inner) => {
                    <processTransactionCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setRevertFlag(inner) => {
                    <setRevertFlagCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::shouldRevert(inner) => {
                    <shouldRevertCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::lastProcessedData(inner) => {
                    <lastProcessedDataCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransaction(inner) => {
                    <processTransactionCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setRevertFlag(inner) => {
                    <setRevertFlagCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::shouldRevert(inner) => {
                    <shouldRevertCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`MockMetabasedSequencerChain`](self) contract instance.

See the [wrapper's documentation](`MockMetabasedSequencerChainInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> MockMetabasedSequencerChainInstance<T, P, N> {
        MockMetabasedSequencerChainInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<MockMetabasedSequencerChainInstance<T, P, N>>,
    > {
        MockMetabasedSequencerChainInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        MockMetabasedSequencerChainInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`MockMetabasedSequencerChain`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`MockMetabasedSequencerChain`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct MockMetabasedSequencerChainInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for MockMetabasedSequencerChainInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("MockMetabasedSequencerChainInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MockMetabasedSequencerChainInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`MockMetabasedSequencerChain`](self) contract instance.

See the [wrapper's documentation](`MockMetabasedSequencerChainInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<MockMetabasedSequencerChainInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> MockMetabasedSequencerChainInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(
            self,
        ) -> MockMetabasedSequencerChainInstance<T, P, N> {
            MockMetabasedSequencerChainInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MockMetabasedSequencerChainInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`lastProcessedData`] function.
        pub fn lastProcessedData(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, lastProcessedDataCall, N> {
            self.call_builder(&lastProcessedDataCall {})
        }
        ///Creates a new call builder for the [`processTransaction`] function.
        pub fn processTransaction(
            &self,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, processTransactionCall, N> {
            self.call_builder(&processTransactionCall { data })
        }
        ///Creates a new call builder for the [`setRevertFlag`] function.
        pub fn setRevertFlag(
            &self,
            _shouldRevert: bool,
        ) -> alloy_contract::SolCallBuilder<T, &P, setRevertFlagCall, N> {
            self.call_builder(&setRevertFlagCall { _shouldRevert })
        }
        ///Creates a new call builder for the [`shouldRevert`] function.
        pub fn shouldRevert(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, shouldRevertCall, N> {
            self.call_builder(&shouldRevertCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MockMetabasedSequencerChainInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
