/**

Generated by the following Solidity interface...
```solidity
interface SequencingModuleCheckerMock {
    error AlreadyInitialized();
    error InvalidModuleAddress();
    error NotAllowed(address batchSubmitter);
    error OwnableInvalidOwner(address owner);
    error OwnableUnauthorizedAccount(address account);

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event RequirementModuleUpdated(address indexed newModule);

    function initialize(address admin, address _requirementModule) external;
    function isAllowed(address proposer) external view returns (bool);
    function owner() external view returns (address);
    function renounceOwnership() external;
    function requirementModule() external view returns (address);
    function transferOwnership(address newOwner) external;
    function updateRequirementModule(address _newModule) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "initialize",
    "inputs": [
      {
        "name": "admin",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_requirementModule",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "isAllowed",
    "inputs": [
      {
        "name": "proposer",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "renounceOwnership",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "requirementModule",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract PermissionModule"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "transferOwnership",
    "inputs": [
      {
        "name": "newOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "updateRequirementModule",
    "inputs": [
      {
        "name": "_newModule",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "OwnershipTransferred",
    "inputs": [
      {
        "name": "previousOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RequirementModuleUpdated",
    "inputs": [
      {
        "name": "newModule",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AlreadyInitialized",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidModuleAddress",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NotAllowed",
    "inputs": [
      {
        "name": "batchSubmitter",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "OwnableInvalidOwner",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "OwnableUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ]
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod SequencingModuleCheckerMock {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60806040523461002757610011610036565b61001961002c565b610977610343823961097790f35b610032565b60405190565b5f80fd5b61003e61014d565b565b60a01b90565b9061005560ff60a01b91610040565b9181191691161790565b151590565b61006d9061005f565b90565b90565b9061008861008361008f92610064565b610070565b8254610046565b9055565b634e487b7160e01b5f52604160045260245ffd5b5f0190565b6100b461002c565b3d5f823e3d90fd5b60018060a01b031690565b90565b6100de6100d96100e3926100bc565b6100c7565b6100bc565b90565b6100ef906100ca565b90565b6100fb906100e6565b90565b5f1b90565b9061011460018060a01b03916100fe565b9181191691161790565b610127906100e6565b90565b90565b9061014261013d6101499261011e565b61012a565b8254610103565b9055565b610156336101ba565b6101615f6001610073565b61016961002c565b61014a810181811060018060401b038211176101b557610191829161014a610cba84396100a7565b03905ff080156101b0576101a76101ae916100f2565b600161012d565b565b6100ac565b610093565b6101c39061021e565b565b90565b6101dc6101d76101e1926101c5565b6100c7565b6100bc565b90565b6101ed906101c8565b90565b6101f9906100bc565b90565b610205906101f0565b9052565b919061021c905f602085019401906101fc565b565b8061023961023361022e5f6101e4565b6101f0565b916101f0565b1461024957610247906102e3565b565b6102736102555f6101e4565b61025d61002c565b918291631e4fbdf760e01b835260048301610209565b0390fd5b5f1c90565b60018060a01b031690565b61029361029891610277565b61027c565b90565b6102a59054610287565b90565b6102b1906100ca565b90565b6102bd906102a8565b90565b90565b906102d86102d36102df926102b4565b6102c0565b8254610103565b9055565b6102ec5f61029b565b6102f6825f6102c3565b9061032a6103247f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0936102b4565b916102b4565b9161033361002c565b8061033d816100a7565b0390a356fe60806040526004361015610013575b61038b565b61001d5f3561008c565b80633bb83a6414610087578063485cc95514610082578063715018a61461007d5780638da5cb5b14610078578063babcc53914610073578063d4f0eb4d1461006e5763f2fde38b0361000e57610358565b610325565b6102f0565b610276565b610221565b6101ed565b610157565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f9103126100aa57565b61009c565b1c90565b60018060a01b031690565b6100ce9060086100d393026100af565b6100b3565b90565b906100e191546100be565b90565b6100f060015f906100d6565b90565b60018060a01b031690565b90565b61011561011061011a926100f3565b6100fe565b6100f3565b90565b61012690610101565b90565b6101329061011d565b90565b61013e90610129565b9052565b9190610155905f60208501940190610135565b565b34610187576101673660046100a0565b6101836101726100e4565b61017a610092565b91829182610142565b0390f35b610098565b610195906100f3565b90565b6101a18161018c565b036101a857565b5f80fd5b905035906101b982610198565b565b91906040838203126101e357806101d76101e0925f86016101ac565b936020016101ac565b90565b61009c565b5f0190565b3461021c576102066102003660046101bb565b9061054b565b61020e610092565b80610218816101e8565b0390f35b610098565b3461024f576102313660046100a0565b61023961057c565b610241610092565b8061024b816101e8565b0390f35b610098565b61025d9061018c565b9052565b9190610274905f60208501940190610254565b565b346102a6576102863660046100a0565b6102a26102916105bb565b610299610092565b91829182610261565b0390f35b610098565b906020828203126102c4576102c1915f016101ac565b90565b61009c565b151590565b6102d7906102c9565b9052565b91906102ee905f602085019401906102ce565b565b346103205761031c61030b6103063660046102ab565b610693565b610313610092565b918291826102db565b0390f35b610098565b346103535761033d6103383660046102ab565b6107db565b610345610092565b8061034f816101e8565b0390f35b610098565b346103865761037061036b3660046102ab565b610852565b610378610092565b80610382816101e8565b0390f35b610098565b5f80fd5b906103a19161039c61085d565b6104b0565b565b60a01c90565b60ff1690565b6103bb6103c0916103a3565b6103a9565b90565b6103cd90546103af565b90565b90565b6103e76103e26103ec926103d0565b6100fe565b6100f3565b90565b6103f8906103d3565b90565b60a01b90565b9061041060ff60a01b916103fb565b9181191691161790565b610423906102c9565b90565b90565b9061043e6104396104459261041a565b610426565b8254610401565b9055565b61045290610101565b90565b61045e90610449565b90565b5f1b90565b9061047760018060a01b0391610461565b9181191691161790565b61048a90610449565b90565b90565b906104a56104a06104ac92610481565b61048d565b8254610466565b9055565b6104ba60016103c3565b61052957816104d96104d36104ce5f6103ef565b61018c565b9161018c565b14610506576104ff6104f8610504936104f3600180610429565b610455565b6001610490565b610852565b565b61050e610092565b632e7f3c7f60e11b815280610525600482016101e8565b0390fd5b610531610092565b62dc149f60e41b815280610547600482016101e8565b0390fd5b906105559161038f565b565b61055f61085d565b610567610569565b565b61057a6105755f6103ef565b6108d5565b565b610584610557565b565b5f90565b5f1c90565b60018060a01b031690565b6105a66105ab9161058a565b61058f565b90565b6105b8905461059a565b90565b6105c3610586565b506105cd5f6105ae565b90565b5f90565b6105e06105e59161058a565b6100b3565b90565b6105f290546105d4565b90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061061d906105f5565b810190811067ffffffffffffffff82111761063757604052565b6105ff565b60e01b90565b61064b816102c9565b0361065257565b5f80fd5b9050519061066382610642565b565b9060208282031261067e5761067b915f01610656565b90565b61009c565b61068b610092565b3d5f823e3d90fd5b60206106db916106a16105d0565b506106b46106af60016105e8565b610129565b6106d063babcc5396106c4610092565b9586948593849361063c565b835260048301610261565b03915afa90811561071f575f916106f1575b5090565b610712915060203d8111610718575b61070a8183610613565b810190610665565b5f6106ed565b503d610700565b610683565b6107359061073061085d565b610743565b565b6107409061011d565b90565b8061075e6107586107535f6103ef565b61018c565b9161018c565b146107b85761077661076f82610455565b6001610490565b6107a07f253580f806741c11b3d4aa60d9cacc5bef0cebb35748767fe23f11916e2f04b991610737565b906107a9610092565b806107b3816101e8565b0390a2565b6107c0610092565b632e7f3c7f60e11b8152806107d7600482016101e8565b0390fd5b6107e490610724565b565b6107f7906107f261085d565b6107f9565b565b8061081461080e6108095f6103ef565b61018c565b9161018c565b1461082457610822906108d5565b565b61084e6108305f6103ef565b610838610092565b918291631e4fbdf760e01b835260048301610261565b0390fd5b61085b906107e6565b565b6108656105bb565b61087e610878610873610934565b61018c565b9161018c565b0361088557565b6108ae610890610934565b610898610092565b91829163118cdaa760e01b835260048301610261565b0390fd5b90565b906108ca6108c56108d192610737565b6108b2565b8254610466565b9055565b6108de5f6105ae565b6108e8825f6108b5565b9061091c6109167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610737565b91610737565b91610925610092565b8061092f816101e8565b0390a3565b61093c610586565b50339056fea2646970667358221220ad774dea2325de7538f9523c5004df705ed287aec0e525581a5bb955a02ad49764736f6c63430008190033608060405234601c57600e6020565b61011f61002b823961011f90f35b6026565b60405190565b5f80fdfe608060405260043610156011575b60d5565b60195f356026565b63babcc53903600d5760aa565b60e01c90565b60405190565b5f80fd5b5f80fd5b60018060a01b031690565b604c90603a565b90565b6056816045565b03605c57565b5f80fd5b90503590606b82604f565b565b906020828203126083576080915f016060565b90565b6036565b151590565b6093906087565b9052565b919060a8905f60208501940190608c565b565b3460d15760cd60bf60bb366004606d565b60dd565b60c5602c565b918291826097565b0390f35b6032565b5f80fd5b5f90565b5060e460d9565b505f9056fea264697066735822122042ca8488bc7fcc684a7a3ef3e4c86355f54402b7ce27f15780d08a951ce6dd8364736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4a\0'Wa\0\x11a\x006V[a\0\x19a\0,V[a\twa\x03C\x829a\tw\x90\xF3[a\x002V[`@Q\x90V[_\x80\xFD[a\0>a\x01MV[V[`\xA0\x1B\x90V[\x90a\0U`\xFF`\xA0\x1B\x91a\0@V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x15\x15\x90V[a\0m\x90a\0_V[\x90V[\x90V[\x90a\0\x88a\0\x83a\0\x8F\x92a\0dV[a\0pV[\x82Ta\0FV[\x90UV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[_\x01\x90V[a\0\xB4a\0,V[=_\x82>=\x90\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[\x90V[a\0\xDEa\0\xD9a\0\xE3\x92a\0\xBCV[a\0\xC7V[a\0\xBCV[\x90V[a\0\xEF\x90a\0\xCAV[\x90V[a\0\xFB\x90a\0\xE6V[\x90V[_\x1B\x90V[\x90a\x01\x14`\x01\x80`\xA0\x1B\x03\x91a\0\xFEV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x01'\x90a\0\xE6V[\x90V[\x90V[\x90a\x01Ba\x01=a\x01I\x92a\x01\x1EV[a\x01*V[\x82Ta\x01\x03V[\x90UV[a\x01V3a\x01\xBAV[a\x01a_`\x01a\0sV[a\x01ia\0,V[a\x01J\x81\x01\x81\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\x01\xB5Wa\x01\x91\x82\x91a\x01Ja\x0C\xBA\x849a\0\xA7V[\x03\x90_\xF0\x80\x15a\x01\xB0Wa\x01\xA7a\x01\xAE\x91a\0\xF2V[`\x01a\x01-V[V[a\0\xACV[a\0\x93V[a\x01\xC3\x90a\x02\x1EV[V[\x90V[a\x01\xDCa\x01\xD7a\x01\xE1\x92a\x01\xC5V[a\0\xC7V[a\0\xBCV[\x90V[a\x01\xED\x90a\x01\xC8V[\x90V[a\x01\xF9\x90a\0\xBCV[\x90V[a\x02\x05\x90a\x01\xF0V[\x90RV[\x91\x90a\x02\x1C\x90_` \x85\x01\x94\x01\x90a\x01\xFCV[V[\x80a\x029a\x023a\x02._a\x01\xE4V[a\x01\xF0V[\x91a\x01\xF0V[\x14a\x02IWa\x02G\x90a\x02\xE3V[V[a\x02sa\x02U_a\x01\xE4V[a\x02]a\0,V[\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x02\tV[\x03\x90\xFD[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02\x93a\x02\x98\x91a\x02wV[a\x02|V[\x90V[a\x02\xA5\x90Ta\x02\x87V[\x90V[a\x02\xB1\x90a\0\xCAV[\x90V[a\x02\xBD\x90a\x02\xA8V[\x90V[\x90V[\x90a\x02\xD8a\x02\xD3a\x02\xDF\x92a\x02\xB4V[a\x02\xC0V[\x82Ta\x01\x03V[\x90UV[a\x02\xEC_a\x02\x9BV[a\x02\xF6\x82_a\x02\xC3V[\x90a\x03*a\x03$\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x02\xB4V[\x91a\x02\xB4V[\x91a\x033a\0,V[\x80a\x03=\x81a\0\xA7V[\x03\x90\xA3V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x03\x8BV[a\0\x1D_5a\0\x8CV[\x80c;\xB8:d\x14a\0\x87W\x80cH\\\xC9U\x14a\0\x82W\x80cqP\x18\xA6\x14a\0}W\x80c\x8D\xA5\xCB[\x14a\0xW\x80c\xBA\xBC\xC59\x14a\0sW\x80c\xD4\xF0\xEBM\x14a\0nWc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\x03XV[a\x03%V[a\x02\xF0V[a\x02vV[a\x02!V[a\x01\xEDV[a\x01WV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\0\xAAWV[a\0\x9CV[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xCE\x90`\x08a\0\xD3\x93\x02a\0\xAFV[a\0\xB3V[\x90V[\x90a\0\xE1\x91Ta\0\xBEV[\x90V[a\0\xF0`\x01_\x90a\0\xD6V[\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[\x90V[a\x01\x15a\x01\x10a\x01\x1A\x92a\0\xF3V[a\0\xFEV[a\0\xF3V[\x90V[a\x01&\x90a\x01\x01V[\x90V[a\x012\x90a\x01\x1DV[\x90V[a\x01>\x90a\x01)V[\x90RV[\x91\x90a\x01U\x90_` \x85\x01\x94\x01\x90a\x015V[V[4a\x01\x87Wa\x01g6`\x04a\0\xA0V[a\x01\x83a\x01ra\0\xE4V[a\x01za\0\x92V[\x91\x82\x91\x82a\x01BV[\x03\x90\xF3[a\0\x98V[a\x01\x95\x90a\0\xF3V[\x90V[a\x01\xA1\x81a\x01\x8CV[\x03a\x01\xA8WV[_\x80\xFD[\x90P5\x90a\x01\xB9\x82a\x01\x98V[V[\x91\x90`@\x83\x82\x03\x12a\x01\xE3W\x80a\x01\xD7a\x01\xE0\x92_\x86\x01a\x01\xACV[\x93` \x01a\x01\xACV[\x90V[a\0\x9CV[_\x01\x90V[4a\x02\x1CWa\x02\x06a\x02\x006`\x04a\x01\xBBV[\x90a\x05KV[a\x02\x0Ea\0\x92V[\x80a\x02\x18\x81a\x01\xE8V[\x03\x90\xF3[a\0\x98V[4a\x02OWa\x0216`\x04a\0\xA0V[a\x029a\x05|V[a\x02Aa\0\x92V[\x80a\x02K\x81a\x01\xE8V[\x03\x90\xF3[a\0\x98V[a\x02]\x90a\x01\x8CV[\x90RV[\x91\x90a\x02t\x90_` \x85\x01\x94\x01\x90a\x02TV[V[4a\x02\xA6Wa\x02\x866`\x04a\0\xA0V[a\x02\xA2a\x02\x91a\x05\xBBV[a\x02\x99a\0\x92V[\x91\x82\x91\x82a\x02aV[\x03\x90\xF3[a\0\x98V[\x90` \x82\x82\x03\x12a\x02\xC4Wa\x02\xC1\x91_\x01a\x01\xACV[\x90V[a\0\x9CV[\x15\x15\x90V[a\x02\xD7\x90a\x02\xC9V[\x90RV[\x91\x90a\x02\xEE\x90_` \x85\x01\x94\x01\x90a\x02\xCEV[V[4a\x03 Wa\x03\x1Ca\x03\x0Ba\x03\x066`\x04a\x02\xABV[a\x06\x93V[a\x03\x13a\0\x92V[\x91\x82\x91\x82a\x02\xDBV[\x03\x90\xF3[a\0\x98V[4a\x03SWa\x03=a\x0386`\x04a\x02\xABV[a\x07\xDBV[a\x03Ea\0\x92V[\x80a\x03O\x81a\x01\xE8V[\x03\x90\xF3[a\0\x98V[4a\x03\x86Wa\x03pa\x03k6`\x04a\x02\xABV[a\x08RV[a\x03xa\0\x92V[\x80a\x03\x82\x81a\x01\xE8V[\x03\x90\xF3[a\0\x98V[_\x80\xFD[\x90a\x03\xA1\x91a\x03\x9Ca\x08]V[a\x04\xB0V[V[`\xA0\x1C\x90V[`\xFF\x16\x90V[a\x03\xBBa\x03\xC0\x91a\x03\xA3V[a\x03\xA9V[\x90V[a\x03\xCD\x90Ta\x03\xAFV[\x90V[\x90V[a\x03\xE7a\x03\xE2a\x03\xEC\x92a\x03\xD0V[a\0\xFEV[a\0\xF3V[\x90V[a\x03\xF8\x90a\x03\xD3V[\x90V[`\xA0\x1B\x90V[\x90a\x04\x10`\xFF`\xA0\x1B\x91a\x03\xFBV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x04#\x90a\x02\xC9V[\x90V[\x90V[\x90a\x04>a\x049a\x04E\x92a\x04\x1AV[a\x04&V[\x82Ta\x04\x01V[\x90UV[a\x04R\x90a\x01\x01V[\x90V[a\x04^\x90a\x04IV[\x90V[_\x1B\x90V[\x90a\x04w`\x01\x80`\xA0\x1B\x03\x91a\x04aV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x04\x8A\x90a\x04IV[\x90V[\x90V[\x90a\x04\xA5a\x04\xA0a\x04\xAC\x92a\x04\x81V[a\x04\x8DV[\x82Ta\x04fV[\x90UV[a\x04\xBA`\x01a\x03\xC3V[a\x05)W\x81a\x04\xD9a\x04\xD3a\x04\xCE_a\x03\xEFV[a\x01\x8CV[\x91a\x01\x8CV[\x14a\x05\x06Wa\x04\xFFa\x04\xF8a\x05\x04\x93a\x04\xF3`\x01\x80a\x04)V[a\x04UV[`\x01a\x04\x90V[a\x08RV[V[a\x05\x0Ea\0\x92V[c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x05%`\x04\x82\x01a\x01\xE8V[\x03\x90\xFD[a\x051a\0\x92V[b\xDC\x14\x9F`\xE4\x1B\x81R\x80a\x05G`\x04\x82\x01a\x01\xE8V[\x03\x90\xFD[\x90a\x05U\x91a\x03\x8FV[V[a\x05_a\x08]V[a\x05ga\x05iV[V[a\x05za\x05u_a\x03\xEFV[a\x08\xD5V[V[a\x05\x84a\x05WV[V[_\x90V[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x05\xA6a\x05\xAB\x91a\x05\x8AV[a\x05\x8FV[\x90V[a\x05\xB8\x90Ta\x05\x9AV[\x90V[a\x05\xC3a\x05\x86V[Pa\x05\xCD_a\x05\xAEV[\x90V[_\x90V[a\x05\xE0a\x05\xE5\x91a\x05\x8AV[a\0\xB3V[\x90V[a\x05\xF2\x90Ta\x05\xD4V[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x06\x1D\x90a\x05\xF5V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x067W`@RV[a\x05\xFFV[`\xE0\x1B\x90V[a\x06K\x81a\x02\xC9V[\x03a\x06RWV[_\x80\xFD[\x90PQ\x90a\x06c\x82a\x06BV[V[\x90` \x82\x82\x03\x12a\x06~Wa\x06{\x91_\x01a\x06VV[\x90V[a\0\x9CV[a\x06\x8Ba\0\x92V[=_\x82>=\x90\xFD[` a\x06\xDB\x91a\x06\xA1a\x05\xD0V[Pa\x06\xB4a\x06\xAF`\x01a\x05\xE8V[a\x01)V[a\x06\xD0c\xBA\xBC\xC59a\x06\xC4a\0\x92V[\x95\x86\x94\x85\x93\x84\x93a\x06<V[\x83R`\x04\x83\x01a\x02aV[\x03\x91Z\xFA\x90\x81\x15a\x07\x1FW_\x91a\x06\xF1W[P\x90V[a\x07\x12\x91P` =\x81\x11a\x07\x18W[a\x07\n\x81\x83a\x06\x13V[\x81\x01\x90a\x06eV[_a\x06\xEDV[P=a\x07\0V[a\x06\x83V[a\x075\x90a\x070a\x08]V[a\x07CV[V[a\x07@\x90a\x01\x1DV[\x90V[\x80a\x07^a\x07Xa\x07S_a\x03\xEFV[a\x01\x8CV[\x91a\x01\x8CV[\x14a\x07\xB8Wa\x07va\x07o\x82a\x04UV[`\x01a\x04\x90V[a\x07\xA0\x7F%5\x80\xF8\x06t\x1C\x11\xB3\xD4\xAA`\xD9\xCA\xCC[\xEF\x0C\xEB\xB3WHv\x7F\xE2?\x11\x91n/\x04\xB9\x91a\x077V[\x90a\x07\xA9a\0\x92V[\x80a\x07\xB3\x81a\x01\xE8V[\x03\x90\xA2V[a\x07\xC0a\0\x92V[c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x07\xD7`\x04\x82\x01a\x01\xE8V[\x03\x90\xFD[a\x07\xE4\x90a\x07$V[V[a\x07\xF7\x90a\x07\xF2a\x08]V[a\x07\xF9V[V[\x80a\x08\x14a\x08\x0Ea\x08\t_a\x03\xEFV[a\x01\x8CV[\x91a\x01\x8CV[\x14a\x08$Wa\x08\"\x90a\x08\xD5V[V[a\x08Na\x080_a\x03\xEFV[a\x088a\0\x92V[\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x02aV[\x03\x90\xFD[a\x08[\x90a\x07\xE6V[V[a\x08ea\x05\xBBV[a\x08~a\x08xa\x08sa\t4V[a\x01\x8CV[\x91a\x01\x8CV[\x03a\x08\x85WV[a\x08\xAEa\x08\x90a\t4V[a\x08\x98a\0\x92V[\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x02aV[\x03\x90\xFD[\x90V[\x90a\x08\xCAa\x08\xC5a\x08\xD1\x92a\x077V[a\x08\xB2V[\x82Ta\x04fV[\x90UV[a\x08\xDE_a\x05\xAEV[a\x08\xE8\x82_a\x08\xB5V[\x90a\t\x1Ca\t\x16\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x077V[\x91a\x077V[\x91a\t%a\0\x92V[\x80a\t/\x81a\x01\xE8V[\x03\x90\xA3V[a\t<a\x05\x86V[P3\x90V\xFE\xA2dipfsX\"\x12 \xADwM\xEA#%\xDEu8\xF9R<P\x04\xDFp^\xD2\x87\xAE\xC0\xE5%X\x1A[\xB9U\xA0*\xD4\x97dsolcC\0\x08\x19\x003`\x80`@R4`\x1CW`\x0E` V[a\x01\x1Fa\0+\x829a\x01\x1F\x90\xF3[`&V[`@Q\x90V[_\x80\xFD\xFE`\x80`@R`\x046\x10\x15`\x11W[`\xD5V[`\x19_5`&V[c\xBA\xBC\xC59\x03`\rW`\xAAV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[`L\x90`:V[\x90V[`V\x81`EV[\x03`\\WV[_\x80\xFD[\x90P5\x90`k\x82`OV[V[\x90` \x82\x82\x03\x12`\x83W`\x80\x91_\x01``V[\x90V[`6V[\x15\x15\x90V[`\x93\x90`\x87V[\x90RV[\x91\x90`\xA8\x90_` \x85\x01\x94\x01\x90`\x8CV[V[4`\xD1W`\xCD`\xBF`\xBB6`\x04`mV[`\xDDV[`\xC5`,V[\x91\x82\x91\x82`\x97V[\x03\x90\xF3[`2V[_\x80\xFD[_\x90V[P`\xE4`\xD9V[P_\x90V\xFE\xA2dipfsX\"\x12 B\xCA\x84\x88\xBC\x7F\xCChJz>\xF3\xE4\xC8cU\xF5D\x02\xB7\xCE'\xF1W\x80\xD0\x8A\x95\x1C\xE6\xDD\x83dsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b61038b565b61001d5f3561008c565b80633bb83a6414610087578063485cc95514610082578063715018a61461007d5780638da5cb5b14610078578063babcc53914610073578063d4f0eb4d1461006e5763f2fde38b0361000e57610358565b610325565b6102f0565b610276565b610221565b6101ed565b610157565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f9103126100aa57565b61009c565b1c90565b60018060a01b031690565b6100ce9060086100d393026100af565b6100b3565b90565b906100e191546100be565b90565b6100f060015f906100d6565b90565b60018060a01b031690565b90565b61011561011061011a926100f3565b6100fe565b6100f3565b90565b61012690610101565b90565b6101329061011d565b90565b61013e90610129565b9052565b9190610155905f60208501940190610135565b565b34610187576101673660046100a0565b6101836101726100e4565b61017a610092565b91829182610142565b0390f35b610098565b610195906100f3565b90565b6101a18161018c565b036101a857565b5f80fd5b905035906101b982610198565b565b91906040838203126101e357806101d76101e0925f86016101ac565b936020016101ac565b90565b61009c565b5f0190565b3461021c576102066102003660046101bb565b9061054b565b61020e610092565b80610218816101e8565b0390f35b610098565b3461024f576102313660046100a0565b61023961057c565b610241610092565b8061024b816101e8565b0390f35b610098565b61025d9061018c565b9052565b9190610274905f60208501940190610254565b565b346102a6576102863660046100a0565b6102a26102916105bb565b610299610092565b91829182610261565b0390f35b610098565b906020828203126102c4576102c1915f016101ac565b90565b61009c565b151590565b6102d7906102c9565b9052565b91906102ee905f602085019401906102ce565b565b346103205761031c61030b6103063660046102ab565b610693565b610313610092565b918291826102db565b0390f35b610098565b346103535761033d6103383660046102ab565b6107db565b610345610092565b8061034f816101e8565b0390f35b610098565b346103865761037061036b3660046102ab565b610852565b610378610092565b80610382816101e8565b0390f35b610098565b5f80fd5b906103a19161039c61085d565b6104b0565b565b60a01c90565b60ff1690565b6103bb6103c0916103a3565b6103a9565b90565b6103cd90546103af565b90565b90565b6103e76103e26103ec926103d0565b6100fe565b6100f3565b90565b6103f8906103d3565b90565b60a01b90565b9061041060ff60a01b916103fb565b9181191691161790565b610423906102c9565b90565b90565b9061043e6104396104459261041a565b610426565b8254610401565b9055565b61045290610101565b90565b61045e90610449565b90565b5f1b90565b9061047760018060a01b0391610461565b9181191691161790565b61048a90610449565b90565b90565b906104a56104a06104ac92610481565b61048d565b8254610466565b9055565b6104ba60016103c3565b61052957816104d96104d36104ce5f6103ef565b61018c565b9161018c565b14610506576104ff6104f8610504936104f3600180610429565b610455565b6001610490565b610852565b565b61050e610092565b632e7f3c7f60e11b815280610525600482016101e8565b0390fd5b610531610092565b62dc149f60e41b815280610547600482016101e8565b0390fd5b906105559161038f565b565b61055f61085d565b610567610569565b565b61057a6105755f6103ef565b6108d5565b565b610584610557565b565b5f90565b5f1c90565b60018060a01b031690565b6105a66105ab9161058a565b61058f565b90565b6105b8905461059a565b90565b6105c3610586565b506105cd5f6105ae565b90565b5f90565b6105e06105e59161058a565b6100b3565b90565b6105f290546105d4565b90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061061d906105f5565b810190811067ffffffffffffffff82111761063757604052565b6105ff565b60e01b90565b61064b816102c9565b0361065257565b5f80fd5b9050519061066382610642565b565b9060208282031261067e5761067b915f01610656565b90565b61009c565b61068b610092565b3d5f823e3d90fd5b60206106db916106a16105d0565b506106b46106af60016105e8565b610129565b6106d063babcc5396106c4610092565b9586948593849361063c565b835260048301610261565b03915afa90811561071f575f916106f1575b5090565b610712915060203d8111610718575b61070a8183610613565b810190610665565b5f6106ed565b503d610700565b610683565b6107359061073061085d565b610743565b565b6107409061011d565b90565b8061075e6107586107535f6103ef565b61018c565b9161018c565b146107b85761077661076f82610455565b6001610490565b6107a07f253580f806741c11b3d4aa60d9cacc5bef0cebb35748767fe23f11916e2f04b991610737565b906107a9610092565b806107b3816101e8565b0390a2565b6107c0610092565b632e7f3c7f60e11b8152806107d7600482016101e8565b0390fd5b6107e490610724565b565b6107f7906107f261085d565b6107f9565b565b8061081461080e6108095f6103ef565b61018c565b9161018c565b1461082457610822906108d5565b565b61084e6108305f6103ef565b610838610092565b918291631e4fbdf760e01b835260048301610261565b0390fd5b61085b906107e6565b565b6108656105bb565b61087e610878610873610934565b61018c565b9161018c565b0361088557565b6108ae610890610934565b610898610092565b91829163118cdaa760e01b835260048301610261565b0390fd5b90565b906108ca6108c56108d192610737565b6108b2565b8254610466565b9055565b6108de5f6105ae565b6108e8825f6108b5565b9061091c6109167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610737565b91610737565b91610925610092565b8061092f816101e8565b0390a3565b61093c610586565b50339056fea2646970667358221220ad774dea2325de7538f9523c5004df705ed287aec0e525581a5bb955a02ad49764736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x03\x8BV[a\0\x1D_5a\0\x8CV[\x80c;\xB8:d\x14a\0\x87W\x80cH\\\xC9U\x14a\0\x82W\x80cqP\x18\xA6\x14a\0}W\x80c\x8D\xA5\xCB[\x14a\0xW\x80c\xBA\xBC\xC59\x14a\0sW\x80c\xD4\xF0\xEBM\x14a\0nWc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\x03XV[a\x03%V[a\x02\xF0V[a\x02vV[a\x02!V[a\x01\xEDV[a\x01WV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\0\xAAWV[a\0\x9CV[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xCE\x90`\x08a\0\xD3\x93\x02a\0\xAFV[a\0\xB3V[\x90V[\x90a\0\xE1\x91Ta\0\xBEV[\x90V[a\0\xF0`\x01_\x90a\0\xD6V[\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[\x90V[a\x01\x15a\x01\x10a\x01\x1A\x92a\0\xF3V[a\0\xFEV[a\0\xF3V[\x90V[a\x01&\x90a\x01\x01V[\x90V[a\x012\x90a\x01\x1DV[\x90V[a\x01>\x90a\x01)V[\x90RV[\x91\x90a\x01U\x90_` \x85\x01\x94\x01\x90a\x015V[V[4a\x01\x87Wa\x01g6`\x04a\0\xA0V[a\x01\x83a\x01ra\0\xE4V[a\x01za\0\x92V[\x91\x82\x91\x82a\x01BV[\x03\x90\xF3[a\0\x98V[a\x01\x95\x90a\0\xF3V[\x90V[a\x01\xA1\x81a\x01\x8CV[\x03a\x01\xA8WV[_\x80\xFD[\x90P5\x90a\x01\xB9\x82a\x01\x98V[V[\x91\x90`@\x83\x82\x03\x12a\x01\xE3W\x80a\x01\xD7a\x01\xE0\x92_\x86\x01a\x01\xACV[\x93` \x01a\x01\xACV[\x90V[a\0\x9CV[_\x01\x90V[4a\x02\x1CWa\x02\x06a\x02\x006`\x04a\x01\xBBV[\x90a\x05KV[a\x02\x0Ea\0\x92V[\x80a\x02\x18\x81a\x01\xE8V[\x03\x90\xF3[a\0\x98V[4a\x02OWa\x0216`\x04a\0\xA0V[a\x029a\x05|V[a\x02Aa\0\x92V[\x80a\x02K\x81a\x01\xE8V[\x03\x90\xF3[a\0\x98V[a\x02]\x90a\x01\x8CV[\x90RV[\x91\x90a\x02t\x90_` \x85\x01\x94\x01\x90a\x02TV[V[4a\x02\xA6Wa\x02\x866`\x04a\0\xA0V[a\x02\xA2a\x02\x91a\x05\xBBV[a\x02\x99a\0\x92V[\x91\x82\x91\x82a\x02aV[\x03\x90\xF3[a\0\x98V[\x90` \x82\x82\x03\x12a\x02\xC4Wa\x02\xC1\x91_\x01a\x01\xACV[\x90V[a\0\x9CV[\x15\x15\x90V[a\x02\xD7\x90a\x02\xC9V[\x90RV[\x91\x90a\x02\xEE\x90_` \x85\x01\x94\x01\x90a\x02\xCEV[V[4a\x03 Wa\x03\x1Ca\x03\x0Ba\x03\x066`\x04a\x02\xABV[a\x06\x93V[a\x03\x13a\0\x92V[\x91\x82\x91\x82a\x02\xDBV[\x03\x90\xF3[a\0\x98V[4a\x03SWa\x03=a\x0386`\x04a\x02\xABV[a\x07\xDBV[a\x03Ea\0\x92V[\x80a\x03O\x81a\x01\xE8V[\x03\x90\xF3[a\0\x98V[4a\x03\x86Wa\x03pa\x03k6`\x04a\x02\xABV[a\x08RV[a\x03xa\0\x92V[\x80a\x03\x82\x81a\x01\xE8V[\x03\x90\xF3[a\0\x98V[_\x80\xFD[\x90a\x03\xA1\x91a\x03\x9Ca\x08]V[a\x04\xB0V[V[`\xA0\x1C\x90V[`\xFF\x16\x90V[a\x03\xBBa\x03\xC0\x91a\x03\xA3V[a\x03\xA9V[\x90V[a\x03\xCD\x90Ta\x03\xAFV[\x90V[\x90V[a\x03\xE7a\x03\xE2a\x03\xEC\x92a\x03\xD0V[a\0\xFEV[a\0\xF3V[\x90V[a\x03\xF8\x90a\x03\xD3V[\x90V[`\xA0\x1B\x90V[\x90a\x04\x10`\xFF`\xA0\x1B\x91a\x03\xFBV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x04#\x90a\x02\xC9V[\x90V[\x90V[\x90a\x04>a\x049a\x04E\x92a\x04\x1AV[a\x04&V[\x82Ta\x04\x01V[\x90UV[a\x04R\x90a\x01\x01V[\x90V[a\x04^\x90a\x04IV[\x90V[_\x1B\x90V[\x90a\x04w`\x01\x80`\xA0\x1B\x03\x91a\x04aV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x04\x8A\x90a\x04IV[\x90V[\x90V[\x90a\x04\xA5a\x04\xA0a\x04\xAC\x92a\x04\x81V[a\x04\x8DV[\x82Ta\x04fV[\x90UV[a\x04\xBA`\x01a\x03\xC3V[a\x05)W\x81a\x04\xD9a\x04\xD3a\x04\xCE_a\x03\xEFV[a\x01\x8CV[\x91a\x01\x8CV[\x14a\x05\x06Wa\x04\xFFa\x04\xF8a\x05\x04\x93a\x04\xF3`\x01\x80a\x04)V[a\x04UV[`\x01a\x04\x90V[a\x08RV[V[a\x05\x0Ea\0\x92V[c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x05%`\x04\x82\x01a\x01\xE8V[\x03\x90\xFD[a\x051a\0\x92V[b\xDC\x14\x9F`\xE4\x1B\x81R\x80a\x05G`\x04\x82\x01a\x01\xE8V[\x03\x90\xFD[\x90a\x05U\x91a\x03\x8FV[V[a\x05_a\x08]V[a\x05ga\x05iV[V[a\x05za\x05u_a\x03\xEFV[a\x08\xD5V[V[a\x05\x84a\x05WV[V[_\x90V[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x05\xA6a\x05\xAB\x91a\x05\x8AV[a\x05\x8FV[\x90V[a\x05\xB8\x90Ta\x05\x9AV[\x90V[a\x05\xC3a\x05\x86V[Pa\x05\xCD_a\x05\xAEV[\x90V[_\x90V[a\x05\xE0a\x05\xE5\x91a\x05\x8AV[a\0\xB3V[\x90V[a\x05\xF2\x90Ta\x05\xD4V[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x06\x1D\x90a\x05\xF5V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x067W`@RV[a\x05\xFFV[`\xE0\x1B\x90V[a\x06K\x81a\x02\xC9V[\x03a\x06RWV[_\x80\xFD[\x90PQ\x90a\x06c\x82a\x06BV[V[\x90` \x82\x82\x03\x12a\x06~Wa\x06{\x91_\x01a\x06VV[\x90V[a\0\x9CV[a\x06\x8Ba\0\x92V[=_\x82>=\x90\xFD[` a\x06\xDB\x91a\x06\xA1a\x05\xD0V[Pa\x06\xB4a\x06\xAF`\x01a\x05\xE8V[a\x01)V[a\x06\xD0c\xBA\xBC\xC59a\x06\xC4a\0\x92V[\x95\x86\x94\x85\x93\x84\x93a\x06<V[\x83R`\x04\x83\x01a\x02aV[\x03\x91Z\xFA\x90\x81\x15a\x07\x1FW_\x91a\x06\xF1W[P\x90V[a\x07\x12\x91P` =\x81\x11a\x07\x18W[a\x07\n\x81\x83a\x06\x13V[\x81\x01\x90a\x06eV[_a\x06\xEDV[P=a\x07\0V[a\x06\x83V[a\x075\x90a\x070a\x08]V[a\x07CV[V[a\x07@\x90a\x01\x1DV[\x90V[\x80a\x07^a\x07Xa\x07S_a\x03\xEFV[a\x01\x8CV[\x91a\x01\x8CV[\x14a\x07\xB8Wa\x07va\x07o\x82a\x04UV[`\x01a\x04\x90V[a\x07\xA0\x7F%5\x80\xF8\x06t\x1C\x11\xB3\xD4\xAA`\xD9\xCA\xCC[\xEF\x0C\xEB\xB3WHv\x7F\xE2?\x11\x91n/\x04\xB9\x91a\x077V[\x90a\x07\xA9a\0\x92V[\x80a\x07\xB3\x81a\x01\xE8V[\x03\x90\xA2V[a\x07\xC0a\0\x92V[c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x07\xD7`\x04\x82\x01a\x01\xE8V[\x03\x90\xFD[a\x07\xE4\x90a\x07$V[V[a\x07\xF7\x90a\x07\xF2a\x08]V[a\x07\xF9V[V[\x80a\x08\x14a\x08\x0Ea\x08\t_a\x03\xEFV[a\x01\x8CV[\x91a\x01\x8CV[\x14a\x08$Wa\x08\"\x90a\x08\xD5V[V[a\x08Na\x080_a\x03\xEFV[a\x088a\0\x92V[\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x02aV[\x03\x90\xFD[a\x08[\x90a\x07\xE6V[V[a\x08ea\x05\xBBV[a\x08~a\x08xa\x08sa\t4V[a\x01\x8CV[\x91a\x01\x8CV[\x03a\x08\x85WV[a\x08\xAEa\x08\x90a\t4V[a\x08\x98a\0\x92V[\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x02aV[\x03\x90\xFD[\x90V[\x90a\x08\xCAa\x08\xC5a\x08\xD1\x92a\x077V[a\x08\xB2V[\x82Ta\x04fV[\x90UV[a\x08\xDE_a\x05\xAEV[a\x08\xE8\x82_a\x08\xB5V[\x90a\t\x1Ca\t\x16\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x077V[\x91a\x077V[\x91a\t%a\0\x92V[\x80a\t/\x81a\x01\xE8V[\x03\x90\xA3V[a\t<a\x05\x86V[P3\x90V\xFE\xA2dipfsX\"\x12 \xADwM\xEA#%\xDEu8\xF9R<P\x04\xDFp^\xD2\x87\xAE\xC0\xE5%X\x1A[\xB9U\xA0*\xD4\x97dsolcC\0\x08\x19\x003",
    );
    /**Custom error with signature `AlreadyInitialized()` and selector `0x0dc149f0`.
```solidity
error AlreadyInitialized();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AlreadyInitialized {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AlreadyInitialized> for UnderlyingRustTuple<'_> {
            fn from(value: AlreadyInitialized) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AlreadyInitialized {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AlreadyInitialized {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AlreadyInitialized()";
            const SELECTOR: [u8; 4] = [13u8, 193u8, 73u8, 240u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `InvalidModuleAddress()` and selector `0x5cfe78fe`.
```solidity
error InvalidModuleAddress();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidModuleAddress {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidModuleAddress> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidModuleAddress) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidModuleAddress {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidModuleAddress {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidModuleAddress()";
            const SELECTOR: [u8; 4] = [92u8, 254u8, 120u8, 254u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `NotAllowed(address)` and selector `0xfa5cd00f`.
```solidity
error NotAllowed(address batchSubmitter);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotAllowed {
        #[allow(missing_docs)]
        pub batchSubmitter: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotAllowed> for UnderlyingRustTuple<'_> {
            fn from(value: NotAllowed) -> Self {
                (value.batchSubmitter,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotAllowed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { batchSubmitter: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotAllowed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotAllowed(address)";
            const SELECTOR: [u8; 4] = [250u8, 92u8, 208u8, 15u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.batchSubmitter,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `OwnableInvalidOwner(address)` and selector `0x1e4fbdf7`.
```solidity
error OwnableInvalidOwner(address owner);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableInvalidOwner {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableInvalidOwner> for UnderlyingRustTuple<'_> {
            fn from(value: OwnableInvalidOwner) -> Self {
                (value.owner,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for OwnableInvalidOwner {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { owner: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableInvalidOwner {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableInvalidOwner(address)";
            const SELECTOR: [u8; 4] = [30u8, 79u8, 189u8, 247u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `OwnableUnauthorizedAccount(address)` and selector `0x118cdaa7`.
```solidity
error OwnableUnauthorizedAccount(address account);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableUnauthorizedAccount {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: OwnableUnauthorizedAccount) -> Self {
                (value.account,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for OwnableUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { account: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableUnauthorizedAccount(address)";
            const SELECTOR: [u8; 4] = [17u8, 140u8, 218u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
        }
    };
    /**Event with signature `OwnershipTransferred(address,address)` and selector `0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0`.
```solidity
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct OwnershipTransferred {
        #[allow(missing_docs)]
        pub previousOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OwnershipTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OwnershipTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousOwner: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousOwner.clone(),
                    self.newOwner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousOwner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OwnershipTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OwnershipTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &OwnershipTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RequirementModuleUpdated(address)` and selector `0x253580f806741c11b3d4aa60d9cacc5bef0cebb35748767fe23f11916e2f04b9`.
```solidity
event RequirementModuleUpdated(address indexed newModule);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RequirementModuleUpdated {
        #[allow(missing_docs)]
        pub newModule: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RequirementModuleUpdated {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RequirementModuleUpdated(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                37u8,
                53u8,
                128u8,
                248u8,
                6u8,
                116u8,
                28u8,
                17u8,
                179u8,
                212u8,
                170u8,
                96u8,
                217u8,
                202u8,
                204u8,
                91u8,
                239u8,
                12u8,
                235u8,
                179u8,
                87u8,
                72u8,
                118u8,
                127u8,
                226u8,
                63u8,
                17u8,
                145u8,
                110u8,
                47u8,
                4u8,
                185u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { newModule: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.newModule.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newModule,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RequirementModuleUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RequirementModuleUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &RequirementModuleUpdated,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Function with signature `initialize(address,address)` and selector `0x485cc955`.
```solidity
function initialize(address admin, address _requirementModule) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeCall {
        #[allow(missing_docs)]
        pub admin: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _requirementModule: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`initialize(address,address)`](initializeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeCall> for UnderlyingRustTuple<'_> {
                fn from(value: initializeCall) -> Self {
                    (value.admin, value._requirementModule)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        admin: tuple.0,
                        _requirementModule: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: initializeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for initializeCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = initializeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "initialize(address,address)";
            const SELECTOR: [u8; 4] = [72u8, 92u8, 201u8, 85u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._requirementModule,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isAllowed(address)` and selector `0xbabcc539`.
```solidity
function isAllowed(address proposer) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedCall {
        #[allow(missing_docs)]
        pub proposer: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`isAllowed(address)`](isAllowedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedCall> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedCall) -> Self {
                    (value.proposer,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { proposer: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isAllowedCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isAllowedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isAllowed(address)";
            const SELECTOR: [u8; 4] = [186u8, 188u8, 197u8, 57u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.proposer,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `owner()` and selector `0x8da5cb5b`.
```solidity
function owner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerCall {}
    ///Container type for the return parameters of the [`owner()`](ownerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "owner()";
            const SELECTOR: [u8; 4] = [141u8, 165u8, 203u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `renounceOwnership()` and selector `0x715018a6`.
```solidity
function renounceOwnership() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipCall {}
    ///Container type for the return parameters of the [`renounceOwnership()`](renounceOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceOwnershipCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceOwnership()";
            const SELECTOR: [u8; 4] = [113u8, 80u8, 24u8, 166u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `requirementModule()` and selector `0x3bb83a64`.
```solidity
function requirementModule() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct requirementModuleCall {}
    ///Container type for the return parameters of the [`requirementModule()`](requirementModuleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct requirementModuleReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<requirementModuleCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: requirementModuleCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for requirementModuleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<requirementModuleReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: requirementModuleReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for requirementModuleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for requirementModuleCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = requirementModuleReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "requirementModule()";
            const SELECTOR: [u8; 4] = [59u8, 184u8, 58u8, 100u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferOwnership(address)` and selector `0xf2fde38b`.
```solidity
function transferOwnership(address newOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipCall {
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferOwnership(address)`](transferOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipCall) -> Self {
                    (value.newOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferOwnershipCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferOwnership(address)";
            const SELECTOR: [u8; 4] = [242u8, 253u8, 227u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newOwner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `updateRequirementModule(address)` and selector `0xd4f0eb4d`.
```solidity
function updateRequirementModule(address _newModule) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateRequirementModuleCall {
        #[allow(missing_docs)]
        pub _newModule: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`updateRequirementModule(address)`](updateRequirementModuleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateRequirementModuleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateRequirementModuleCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateRequirementModuleCall) -> Self {
                    (value._newModule,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateRequirementModuleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _newModule: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateRequirementModuleReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateRequirementModuleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateRequirementModuleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for updateRequirementModuleCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = updateRequirementModuleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "updateRequirementModule(address)";
            const SELECTOR: [u8; 4] = [212u8, 240u8, 235u8, 77u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._newModule,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`SequencingModuleCheckerMock`](self) function calls.
    pub enum SequencingModuleCheckerMockCalls {
        #[allow(missing_docs)]
        initialize(initializeCall),
        #[allow(missing_docs)]
        isAllowed(isAllowedCall),
        #[allow(missing_docs)]
        owner(ownerCall),
        #[allow(missing_docs)]
        renounceOwnership(renounceOwnershipCall),
        #[allow(missing_docs)]
        requirementModule(requirementModuleCall),
        #[allow(missing_docs)]
        transferOwnership(transferOwnershipCall),
        #[allow(missing_docs)]
        updateRequirementModule(updateRequirementModuleCall),
    }
    #[automatically_derived]
    impl SequencingModuleCheckerMockCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [59u8, 184u8, 58u8, 100u8],
            [72u8, 92u8, 201u8, 85u8],
            [113u8, 80u8, 24u8, 166u8],
            [141u8, 165u8, 203u8, 91u8],
            [186u8, 188u8, 197u8, 57u8],
            [212u8, 240u8, 235u8, 77u8],
            [242u8, 253u8, 227u8, 139u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for SequencingModuleCheckerMockCalls {
        const NAME: &'static str = "SequencingModuleCheckerMockCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 7usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::initialize(_) => {
                    <initializeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isAllowed(_) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::owner(_) => <ownerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::renounceOwnership(_) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::requirementModule(_) => {
                    <requirementModuleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferOwnership(_) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::updateRequirementModule(_) => {
                    <updateRequirementModuleCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<SequencingModuleCheckerMockCalls>] = &[
                {
                    fn requirementModule(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SequencingModuleCheckerMockCalls> {
                        <requirementModuleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SequencingModuleCheckerMockCalls::requirementModule)
                    }
                    requirementModule
                },
                {
                    fn initialize(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SequencingModuleCheckerMockCalls> {
                        <initializeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SequencingModuleCheckerMockCalls::initialize)
                    }
                    initialize
                },
                {
                    fn renounceOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SequencingModuleCheckerMockCalls> {
                        <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SequencingModuleCheckerMockCalls::renounceOwnership)
                    }
                    renounceOwnership
                },
                {
                    fn owner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SequencingModuleCheckerMockCalls> {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SequencingModuleCheckerMockCalls::owner)
                    }
                    owner
                },
                {
                    fn isAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SequencingModuleCheckerMockCalls> {
                        <isAllowedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SequencingModuleCheckerMockCalls::isAllowed)
                    }
                    isAllowed
                },
                {
                    fn updateRequirementModule(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SequencingModuleCheckerMockCalls> {
                        <updateRequirementModuleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SequencingModuleCheckerMockCalls::updateRequirementModule,
                            )
                    }
                    updateRequirementModule
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SequencingModuleCheckerMockCalls> {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SequencingModuleCheckerMockCalls::transferOwnership)
                    }
                    transferOwnership
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::requirementModule(inner) => {
                    <requirementModuleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::updateRequirementModule(inner) => {
                    <updateRequirementModuleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::requirementModule(inner) => {
                    <requirementModuleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::updateRequirementModule(inner) => {
                    <updateRequirementModuleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`SequencingModuleCheckerMock`](self) custom errors.
    pub enum SequencingModuleCheckerMockErrors {
        #[allow(missing_docs)]
        AlreadyInitialized(AlreadyInitialized),
        #[allow(missing_docs)]
        InvalidModuleAddress(InvalidModuleAddress),
        #[allow(missing_docs)]
        NotAllowed(NotAllowed),
        #[allow(missing_docs)]
        OwnableInvalidOwner(OwnableInvalidOwner),
        #[allow(missing_docs)]
        OwnableUnauthorizedAccount(OwnableUnauthorizedAccount),
    }
    #[automatically_derived]
    impl SequencingModuleCheckerMockErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [13u8, 193u8, 73u8, 240u8],
            [17u8, 140u8, 218u8, 167u8],
            [30u8, 79u8, 189u8, 247u8],
            [92u8, 254u8, 120u8, 254u8],
            [250u8, 92u8, 208u8, 15u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for SequencingModuleCheckerMockErrors {
        const NAME: &'static str = "SequencingModuleCheckerMockErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 5usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AlreadyInitialized(_) => {
                    <AlreadyInitialized as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidModuleAddress(_) => {
                    <InvalidModuleAddress as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotAllowed(_) => {
                    <NotAllowed as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableInvalidOwner(_) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableUnauthorizedAccount(_) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<SequencingModuleCheckerMockErrors>] = &[
                {
                    fn AlreadyInitialized(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SequencingModuleCheckerMockErrors> {
                        <AlreadyInitialized as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SequencingModuleCheckerMockErrors::AlreadyInitialized)
                    }
                    AlreadyInitialized
                },
                {
                    fn OwnableUnauthorizedAccount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SequencingModuleCheckerMockErrors> {
                        <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SequencingModuleCheckerMockErrors::OwnableUnauthorizedAccount,
                            )
                    }
                    OwnableUnauthorizedAccount
                },
                {
                    fn OwnableInvalidOwner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SequencingModuleCheckerMockErrors> {
                        <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SequencingModuleCheckerMockErrors::OwnableInvalidOwner)
                    }
                    OwnableInvalidOwner
                },
                {
                    fn InvalidModuleAddress(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SequencingModuleCheckerMockErrors> {
                        <InvalidModuleAddress as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SequencingModuleCheckerMockErrors::InvalidModuleAddress)
                    }
                    InvalidModuleAddress
                },
                {
                    fn NotAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SequencingModuleCheckerMockErrors> {
                        <NotAllowed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SequencingModuleCheckerMockErrors::NotAllowed)
                    }
                    NotAllowed
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AlreadyInitialized(inner) => {
                    <AlreadyInitialized as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidModuleAddress(inner) => {
                    <InvalidModuleAddress as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotAllowed(inner) => {
                    <NotAllowed as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AlreadyInitialized(inner) => {
                    <AlreadyInitialized as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidModuleAddress(inner) => {
                    <InvalidModuleAddress as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotAllowed(inner) => {
                    <NotAllowed as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`SequencingModuleCheckerMock`](self) events.
    pub enum SequencingModuleCheckerMockEvents {
        #[allow(missing_docs)]
        OwnershipTransferred(OwnershipTransferred),
        #[allow(missing_docs)]
        RequirementModuleUpdated(RequirementModuleUpdated),
    }
    #[automatically_derived]
    impl SequencingModuleCheckerMockEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                37u8,
                53u8,
                128u8,
                248u8,
                6u8,
                116u8,
                28u8,
                17u8,
                179u8,
                212u8,
                170u8,
                96u8,
                217u8,
                202u8,
                204u8,
                91u8,
                239u8,
                12u8,
                235u8,
                179u8,
                87u8,
                72u8,
                118u8,
                127u8,
                226u8,
                63u8,
                17u8,
                145u8,
                110u8,
                47u8,
                4u8,
                185u8,
            ],
            [
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for SequencingModuleCheckerMockEvents {
        const NAME: &'static str = "SequencingModuleCheckerMockEvents";
        const COUNT: usize = 2usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::OwnershipTransferred)
                }
                Some(
                    <RequirementModuleUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <RequirementModuleUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RequirementModuleUpdated)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for SequencingModuleCheckerMockEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RequirementModuleUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RequirementModuleUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`SequencingModuleCheckerMock`](self) contract instance.

See the [wrapper's documentation](`SequencingModuleCheckerMockInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> SequencingModuleCheckerMockInstance<T, P, N> {
        SequencingModuleCheckerMockInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<SequencingModuleCheckerMockInstance<T, P, N>>,
    > {
        SequencingModuleCheckerMockInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        SequencingModuleCheckerMockInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`SequencingModuleCheckerMock`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`SequencingModuleCheckerMock`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct SequencingModuleCheckerMockInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for SequencingModuleCheckerMockInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("SequencingModuleCheckerMockInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SequencingModuleCheckerMockInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`SequencingModuleCheckerMock`](self) contract instance.

See the [wrapper's documentation](`SequencingModuleCheckerMockInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<SequencingModuleCheckerMockInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> SequencingModuleCheckerMockInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(
            self,
        ) -> SequencingModuleCheckerMockInstance<T, P, N> {
            SequencingModuleCheckerMockInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SequencingModuleCheckerMockInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`initialize`] function.
        pub fn initialize(
            &self,
            admin: alloy::sol_types::private::Address,
            _requirementModule: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, initializeCall, N> {
            self.call_builder(
                &initializeCall {
                    admin,
                    _requirementModule,
                },
            )
        }
        ///Creates a new call builder for the [`isAllowed`] function.
        pub fn isAllowed(
            &self,
            proposer: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, isAllowedCall, N> {
            self.call_builder(&isAllowedCall { proposer })
        }
        ///Creates a new call builder for the [`owner`] function.
        pub fn owner(&self) -> alloy_contract::SolCallBuilder<T, &P, ownerCall, N> {
            self.call_builder(&ownerCall {})
        }
        ///Creates a new call builder for the [`renounceOwnership`] function.
        pub fn renounceOwnership(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, renounceOwnershipCall, N> {
            self.call_builder(&renounceOwnershipCall {})
        }
        ///Creates a new call builder for the [`requirementModule`] function.
        pub fn requirementModule(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, requirementModuleCall, N> {
            self.call_builder(&requirementModuleCall {})
        }
        ///Creates a new call builder for the [`transferOwnership`] function.
        pub fn transferOwnership(
            &self,
            newOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferOwnershipCall, N> {
            self.call_builder(&transferOwnershipCall { newOwner })
        }
        ///Creates a new call builder for the [`updateRequirementModule`] function.
        pub fn updateRequirementModule(
            &self,
            _newModule: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, updateRequirementModuleCall, N> {
            self.call_builder(
                &updateRequirementModuleCall {
                    _newModule,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SequencingModuleCheckerMockInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`OwnershipTransferred`] event.
        pub fn OwnershipTransferred_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, OwnershipTransferred, N> {
            self.event_filter::<OwnershipTransferred>()
        }
        ///Creates a new event filter for the [`RequirementModuleUpdated`] event.
        pub fn RequirementModuleUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RequirementModuleUpdated, N> {
            self.event_filter::<RequirementModuleUpdated>()
        }
    }
}
