/**

Generated by the following Solidity interface...
```solidity
interface SequencingModuleCheckerMock {
    error AlreadyInitialized();
    error CalldataNotAllowed();
    error InvalidModuleAddress();
    error NotAllowed(address batchSubmitter);
    error OwnableInvalidOwner(address owner);
    error OwnableUnauthorizedAccount(address account);

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event RequirementModuleUpdated(address indexed newModule);

    function calldataRequirementModule() external view returns (address);
    function initialize(address admin, address _requirementModule) external;
    function isAllowed(address proposer) external view returns (bool);
    function isCalldataAllowed(bytes memory data) external view returns (bool);
    function owner() external view returns (address);
    function proposerRequirementModule() external view returns (address);
    function renounceOwnership() external;
    function transferOwnership(address newOwner) external;
    function updateRequirementModule(address _newModule) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "calldataRequirementModule",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract CalldataPermissionModule"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "initialize",
    "inputs": [
      {
        "name": "admin",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_requirementModule",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "isAllowed",
    "inputs": [
      {
        "name": "proposer",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isCalldataAllowed",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "proposerRequirementModule",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract ProposerPermissionModule"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "renounceOwnership",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "transferOwnership",
    "inputs": [
      {
        "name": "newOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "updateRequirementModule",
    "inputs": [
      {
        "name": "_newModule",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "OwnershipTransferred",
    "inputs": [
      {
        "name": "previousOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RequirementModuleUpdated",
    "inputs": [
      {
        "name": "newModule",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AlreadyInitialized",
    "inputs": []
  },
  {
    "type": "error",
    "name": "CalldataNotAllowed",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidModuleAddress",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NotAllowed",
    "inputs": [
      {
        "name": "batchSubmitter",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "OwnableInvalidOwner",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "OwnableUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ]
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod SequencingModuleCheckerMock {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4a\0'Wa\0\x11a\x006V[a\0\x19a\0,V[a\x0CWa\x03C\x829a\x0CW\x90\xF3[a\x002V[`@Q\x90V[_\x80\xFD[a\0>a\x01MV[V[`\xA0\x1B\x90V[\x90a\0U`\xFF`\xA0\x1B\x91a\0@V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x15\x15\x90V[a\0m\x90a\0_V[\x90V[\x90V[\x90a\0\x88a\0\x83a\0\x8F\x92a\0dV[a\0pV[\x82Ta\0FV[\x90UV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[_\x01\x90V[a\0\xB4a\0,V[=_\x82>=\x90\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[\x90V[a\0\xDEa\0\xD9a\0\xE3\x92a\0\xBCV[a\0\xC7V[a\0\xBCV[\x90V[a\0\xEF\x90a\0\xCAV[\x90V[a\0\xFB\x90a\0\xE6V[\x90V[_\x1B\x90V[\x90a\x01\x14`\x01\x80`\xA0\x1B\x03\x91a\0\xFEV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x01'\x90a\0\xE6V[\x90V[\x90V[\x90a\x01Ba\x01=a\x01I\x92a\x01\x1EV[a\x01*V[\x82Ta\x01\x03V[\x90UV[a\x01V3a\x01\xBAV[a\x01a_`\x02a\0sV[a\x01ia\0,V[a\x01J\x81\x01\x81\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\x01\xB5Wa\x01\x91\x82\x91a\x01Ja\x0F\x9A\x849a\0\xA7V[\x03\x90_\xF0\x80\x15a\x01\xB0Wa\x01\xA7a\x01\xAE\x91a\0\xF2V[`\x01a\x01-V[V[a\0\xACV[a\0\x93V[a\x01\xC3\x90a\x02\x1EV[V[\x90V[a\x01\xDCa\x01\xD7a\x01\xE1\x92a\x01\xC5V[a\0\xC7V[a\0\xBCV[\x90V[a\x01\xED\x90a\x01\xC8V[\x90V[a\x01\xF9\x90a\0\xBCV[\x90V[a\x02\x05\x90a\x01\xF0V[\x90RV[\x91\x90a\x02\x1C\x90_` \x85\x01\x94\x01\x90a\x01\xFCV[V[\x80a\x029a\x023a\x02._a\x01\xE4V[a\x01\xF0V[\x91a\x01\xF0V[\x14a\x02IWa\x02G\x90a\x02\xE3V[V[a\x02sa\x02U_a\x01\xE4V[a\x02]a\0,V[\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x02\tV[\x03\x90\xFD[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02\x93a\x02\x98\x91a\x02wV[a\x02|V[\x90V[a\x02\xA5\x90Ta\x02\x87V[\x90V[a\x02\xB1\x90a\0\xCAV[\x90V[a\x02\xBD\x90a\x02\xA8V[\x90V[\x90V[\x90a\x02\xD8a\x02\xD3a\x02\xDF\x92a\x02\xB4V[a\x02\xC0V[\x82Ta\x01\x03V[\x90UV[a\x02\xEC_a\x02\x9BV[a\x02\xF6\x82_a\x02\xC3V[\x90a\x03*a\x03$\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x02\xB4V[\x91a\x02\xB4V[\x91a\x033a\0,V[\x80a\x03=\x81a\0\xA7V[\x03\x90\xA3V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x05\tV[a\0\x1D_5a\0\xACV[\x80c=\xFB^\xE7\x14a\0\xA7W\x80cH\\\xC9U\x14a\0\xA2W\x80cqP\x18\xA6\x14a\0\x9DW\x80c\x8D\xA5\xCB[\x14a\0\x98W\x80c\xA80\xB6C\x14a\0\x93W\x80c\xAA\xA6\x07\x07\x14a\0\x8EW\x80c\xBA\xBC\xC59\x14a\0\x89W\x80c\xD4\xF0\xEBM\x14a\0\x84Wc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\x04\xD6V[a\x04\xA3V[a\x04nV[a\x04\x1BV[a\x03xV[a\x02\xA6V[a\x02QV[a\x02\x0EV[a\x01lV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01\nW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01\x05W` \x01\x92`\x01\x83\x02\x84\x01\x11a\x01\0WV[a\0\xCCV[a\0\xC8V[a\0\xC4V[\x90` \x82\x82\x03\x12a\x01@W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01;Wa\x017\x92\x01a\0\xD0V[\x90\x91V[a\0\xC0V[a\0\xBCV[\x15\x15\x90V[a\x01S\x90a\x01EV[\x90RV[\x91\x90a\x01j\x90_` \x85\x01\x94\x01\x90a\x01JV[V[4a\x01\x9DWa\x01\x99a\x01\x88a\x01\x826`\x04a\x01\x0FV[\x90a\x06&V[a\x01\x90a\0\xB2V[\x91\x82\x91\x82a\x01WV[\x03\x90\xF3[a\0\xB8V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01\xB6\x90a\x01\xA2V[\x90V[a\x01\xC2\x81a\x01\xADV[\x03a\x01\xC9WV[_\x80\xFD[\x90P5\x90a\x01\xDA\x82a\x01\xB9V[V[\x91\x90`@\x83\x82\x03\x12a\x02\x04W\x80a\x01\xF8a\x02\x01\x92_\x86\x01a\x01\xCDV[\x93` \x01a\x01\xCDV[\x90V[a\0\xBCV[_\x01\x90V[4a\x02=Wa\x02'a\x02!6`\x04a\x01\xDCV[\x90a\x08\xD2V[a\x02/a\0\xB2V[\x80a\x029\x81a\x02\tV[\x03\x90\xF3[a\0\xB8V[_\x91\x03\x12a\x02LWV[a\0\xBCV[4a\x02\x7FWa\x02a6`\x04a\x02BV[a\x02ia\t\x03V[a\x02qa\0\xB2V[\x80a\x02{\x81a\x02\tV[\x03\x90\xF3[a\0\xB8V[a\x02\x8D\x90a\x01\xADV[\x90RV[\x91\x90a\x02\xA4\x90_` \x85\x01\x94\x01\x90a\x02\x84V[V[4a\x02\xD6Wa\x02\xB66`\x04a\x02BV[a\x02\xD2a\x02\xC1a\t=V[a\x02\xC9a\0\xB2V[\x91\x82\x91\x82a\x02\x91V[\x03\x90\xF3[a\0\xB8V[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02\xFA\x90`\x08a\x02\xFF\x93\x02a\x02\xDBV[a\x02\xDFV[\x90V[\x90a\x03\r\x91Ta\x02\xEAV[\x90V[a\x03\x1C`\x01_\x90a\x03\x02V[\x90V[\x90V[a\x036a\x031a\x03;\x92a\x01\xA2V[a\x03\x1FV[a\x01\xA2V[\x90V[a\x03G\x90a\x03\"V[\x90V[a\x03S\x90a\x03>V[\x90V[a\x03_\x90a\x03JV[\x90RV[\x91\x90a\x03v\x90_` \x85\x01\x94\x01\x90a\x03VV[V[4a\x03\xA8Wa\x03\x886`\x04a\x02BV[a\x03\xA4a\x03\x93a\x03\x10V[a\x03\x9Ba\0\xB2V[\x91\x82\x91\x82a\x03cV[\x03\x90\xF3[a\0\xB8V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x03\xC8\x90`\x08a\x03\xCD\x93\x02a\x02\xDBV[a\x03\xADV[\x90V[\x90a\x03\xDB\x91Ta\x03\xB8V[\x90V[a\x03\xEA`\x02_\x90a\x03\xD0V[\x90V[a\x03\xF6\x90a\x03>V[\x90V[a\x04\x02\x90a\x03\xEDV[\x90RV[\x91\x90a\x04\x19\x90_` \x85\x01\x94\x01\x90a\x03\xF9V[V[4a\x04KWa\x04+6`\x04a\x02BV[a\x04Ga\x046a\x03\xDEV[a\x04>a\0\xB2V[\x91\x82\x91\x82a\x04\x06V[\x03\x90\xF3[a\0\xB8V[\x90` \x82\x82\x03\x12a\x04iWa\x04f\x91_\x01a\x01\xCDV[\x90V[a\0\xBCV[4a\x04\x9EWa\x04\x9Aa\x04\x89a\x04\x846`\x04a\x04PV[a\tsV[a\x04\x91a\0\xB2V[\x91\x82\x91\x82a\x01WV[\x03\x90\xF3[a\0\xB8V[4a\x04\xD1Wa\x04\xBBa\x04\xB66`\x04a\x04PV[a\n\xBBV[a\x04\xC3a\0\xB2V[\x80a\x04\xCD\x81a\x02\tV[\x03\x90\xF3[a\0\xB8V[4a\x05\x04Wa\x04\xEEa\x04\xE96`\x04a\x04PV[a\x0B2V[a\x04\xF6a\0\xB2V[\x80a\x05\0\x81a\x02\tV[\x03\x90\xF3[a\0\xB8V[_\x80\xFD[_\x90V[_\x1C\x90V[a\x05\"a\x05'\x91a\x05\x11V[a\x03\xADV[\x90V[a\x054\x90Ta\x05\x16V[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x05_\x90a\x057V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x05yW`@RV[a\x05AV[`\xE0\x1B\x90V[a\x05\x8D\x81a\x01EV[\x03a\x05\x94WV[_\x80\xFD[\x90PQ\x90a\x05\xA5\x82a\x05\x84V[V[\x90` \x82\x82\x03\x12a\x05\xC0Wa\x05\xBD\x91_\x01a\x05\x98V[\x90V[a\0\xBCV[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x827\x01RV[\x91\x90a\x05\xF3\x81a\x05\xEC\x81a\x05\xF8\x95a\x05\xC5V[\x80\x95a\x05\xCEV[a\x057V[\x01\x90V[\x90\x91a\x06\x13\x92` \x83\x01\x92_\x81\x85\x03\x91\x01Ra\x05\xD9V[\x90V[a\x06\x1Ea\0\xB2V[=_\x82>=\x90\xFD[\x90` \x90a\x062a\x05\rV[Pa\x06Ea\x06@`\x02a\x05*V[a\x03\xEDV[a\x06gc=\xFB^\xE7\x94\x92\x94a\x06ra\x06[a\0\xB2V[\x96\x87\x95\x86\x94\x85\x94a\x05~V[\x84R`\x04\x84\x01a\x05\xFCV[\x03\x91Z\xFA\x90\x81\x15a\x06\xB6W_\x91a\x06\x88W[P\x90V[a\x06\xA9\x91P` =\x81\x11a\x06\xAFW[a\x06\xA1\x81\x83a\x05UV[\x81\x01\x90a\x05\xA7V[_a\x06\x84V[P=a\x06\x97V[a\x06\x16V[\x90a\x06\xCD\x91a\x06\xC8a\x0B=V[a\x08#V[V[`\xA0\x1C\x90V[`\xFF\x16\x90V[a\x06\xE7a\x06\xEC\x91a\x06\xCFV[a\x06\xD5V[\x90V[a\x06\xF9\x90Ta\x06\xDBV[\x90V[\x90V[a\x07\x13a\x07\x0Ea\x07\x18\x92a\x06\xFCV[a\x03\x1FV[a\x01\xA2V[\x90V[a\x07$\x90a\x06\xFFV[\x90V[`\xA0\x1B\x90V[\x90a\x07<`\xFF`\xA0\x1B\x91a\x07'V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x07O\x90a\x01EV[\x90V[\x90V[\x90a\x07ja\x07ea\x07q\x92a\x07FV[a\x07RV[\x82Ta\x07-V[\x90UV[a\x07~\x90a\x03\"V[\x90V[a\x07\x8A\x90a\x07uV[\x90V[_\x1B\x90V[\x90a\x07\xA3`\x01\x80`\xA0\x1B\x03\x91a\x07\x8DV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x07\xB6\x90a\x07uV[\x90V[\x90V[\x90a\x07\xD1a\x07\xCCa\x07\xD8\x92a\x07\xADV[a\x07\xB9V[\x82Ta\x07\x92V[\x90UV[a\x07\xE5\x90a\x03\"V[\x90V[a\x07\xF1\x90a\x07\xDCV[\x90V[a\x07\xFD\x90a\x07\xDCV[\x90V[\x90V[\x90a\x08\x18a\x08\x13a\x08\x1F\x92a\x07\xF4V[a\x08\0V[\x82Ta\x07\x92V[\x90UV[a\x08-`\x02a\x06\xEFV[a\x08\xB0W\x81a\x08La\x08Fa\x08A_a\x07\x1BV[a\x01\xADV[\x91a\x01\xADV[\x14a\x08\x8DWa\x08\x86a\x08\x7Fa\x08\x8B\x93a\x08g`\x01`\x02a\x07UV[a\x08za\x08s\x82a\x07\x81V[`\x01a\x07\xBCV[a\x07\xE8V[`\x02a\x08\x03V[a\x0B2V[V[a\x08\x95a\0\xB2V[c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x08\xAC`\x04\x82\x01a\x02\tV[\x03\x90\xFD[a\x08\xB8a\0\xB2V[b\xDC\x14\x9F`\xE4\x1B\x81R\x80a\x08\xCE`\x04\x82\x01a\x02\tV[\x03\x90\xFD[\x90a\x08\xDC\x91a\x06\xBBV[V[a\x08\xE6a\x0B=V[a\x08\xEEa\x08\xF0V[V[a\t\x01a\x08\xFC_a\x07\x1BV[a\x0B\xB5V[V[a\t\x0Ba\x08\xDEV[V[_\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\t(a\t-\x91a\x05\x11V[a\t\x11V[\x90V[a\t:\x90Ta\t\x1CV[\x90V[a\tEa\t\rV[Pa\tO_a\t0V[\x90V[a\t^a\tc\x91a\x05\x11V[a\x02\xDFV[\x90V[a\tp\x90Ta\tRV[\x90V[` a\t\xBB\x91a\t\x81a\x05\rV[Pa\t\x94a\t\x8F`\x01a\tfV[a\x03JV[a\t\xB0c\xBA\xBC\xC59a\t\xA4a\0\xB2V[\x95\x86\x94\x85\x93\x84\x93a\x05~V[\x83R`\x04\x83\x01a\x02\x91V[\x03\x91Z\xFA\x90\x81\x15a\t\xFFW_\x91a\t\xD1W[P\x90V[a\t\xF2\x91P` =\x81\x11a\t\xF8W[a\t\xEA\x81\x83a\x05UV[\x81\x01\x90a\x05\xA7V[_a\t\xCDV[P=a\t\xE0V[a\x06\x16V[a\n\x15\x90a\n\x10a\x0B=V[a\n#V[V[a\n \x90a\x03>V[\x90V[\x80a\n>a\n8a\n3_a\x07\x1BV[a\x01\xADV[\x91a\x01\xADV[\x14a\n\x98Wa\nVa\nO\x82a\x07\x81V[`\x01a\x07\xBCV[a\n\x80\x7F%5\x80\xF8\x06t\x1C\x11\xB3\xD4\xAA`\xD9\xCA\xCC[\xEF\x0C\xEB\xB3WHv\x7F\xE2?\x11\x91n/\x04\xB9\x91a\n\x17V[\x90a\n\x89a\0\xB2V[\x80a\n\x93\x81a\x02\tV[\x03\x90\xA2V[a\n\xA0a\0\xB2V[c.\x7F<\x7F`\xE1\x1B\x81R\x80a\n\xB7`\x04\x82\x01a\x02\tV[\x03\x90\xFD[a\n\xC4\x90a\n\x04V[V[a\n\xD7\x90a\n\xD2a\x0B=V[a\n\xD9V[V[\x80a\n\xF4a\n\xEEa\n\xE9_a\x07\x1BV[a\x01\xADV[\x91a\x01\xADV[\x14a\x0B\x04Wa\x0B\x02\x90a\x0B\xB5V[V[a\x0B.a\x0B\x10_a\x07\x1BV[a\x0B\x18a\0\xB2V[\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x02\x91V[\x03\x90\xFD[a\x0B;\x90a\n\xC6V[V[a\x0BEa\t=V[a\x0B^a\x0BXa\x0BSa\x0C\x14V[a\x01\xADV[\x91a\x01\xADV[\x03a\x0BeWV[a\x0B\x8Ea\x0Bpa\x0C\x14V[a\x0Bxa\0\xB2V[\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x02\x91V[\x03\x90\xFD[\x90V[\x90a\x0B\xAAa\x0B\xA5a\x0B\xB1\x92a\n\x17V[a\x0B\x92V[\x82Ta\x07\x92V[\x90UV[a\x0B\xBE_a\t0V[a\x0B\xC8\x82_a\x0B\x95V[\x90a\x0B\xFCa\x0B\xF6\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\n\x17V[\x91a\n\x17V[\x91a\x0C\x05a\0\xB2V[\x80a\x0C\x0F\x81a\x02\tV[\x03\x90\xA3V[a\x0C\x1Ca\t\rV[P3\x90V\xFE\xA2dipfsX\"\x12 7\x03C\xF0\x8E\xFE\xD3\x0B\x92\x18\xD0\xC1\x15\xA5\xD8\xF6\xFC|\xA4\x18\x96\x7F\xCC\x81\x1A\x0Cv-\xEBe\xBB\xC3dsolcC\0\x08\x19\x003`\x80`@R4`\x1CW`\x0E` V[a\x01\x1Fa\0+\x829a\x01\x1F\x90\xF3[`&V[`@Q\x90V[_\x80\xFD\xFE`\x80`@R`\x046\x10\x15`\x11W[`\xD5V[`\x19_5`&V[c\xBA\xBC\xC59\x03`\rW`\xAAV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[`L\x90`:V[\x90V[`V\x81`EV[\x03`\\WV[_\x80\xFD[\x90P5\x90`k\x82`OV[V[\x90` \x82\x82\x03\x12`\x83W`\x80\x91_\x01``V[\x90V[`6V[\x15\x15\x90V[`\x93\x90`\x87V[\x90RV[\x91\x90`\xA8\x90_` \x85\x01\x94\x01\x90`\x8CV[V[4`\xD1W`\xCD`\xBF`\xBB6`\x04`mV[`\xDDV[`\xC5`,V[\x91\x82\x91\x82`\x97V[\x03\x90\xF3[`2V[_\x80\xFD[_\x90V[P`\xE4`\xD9V[P_\x90V\xFE\xA2dipfsX\"\x12 \xF6\xF8\x9A|\xEB\xF3Bz\x97\xE5\x85\xE2>\xE5K\x80\x94\x1BZ\xA1\xD3\xA3\xF8\xBB\xF5,\x99\x81*\"F\x16dsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b610509565b61001d5f356100ac565b80633dfb5ee7146100a7578063485cc955146100a2578063715018a61461009d5780638da5cb5b14610098578063a830b64314610093578063aaa607071461008e578063babcc53914610089578063d4f0eb4d146100845763f2fde38b0361000e576104d6565b6104a3565b61046e565b61041b565b610378565b6102a6565b610251565b61020e565b61016c565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f8301121561010a5781359167ffffffffffffffff831161010557602001926001830284011161010057565b6100cc565b6100c8565b6100c4565b90602082820312610140575f82013567ffffffffffffffff811161013b5761013792016100d0565b9091565b6100c0565b6100bc565b151590565b61015390610145565b9052565b919061016a905f6020850194019061014a565b565b3461019d5761019961018861018236600461010f565b90610626565b6101906100b2565b91829182610157565b0390f35b6100b8565b60018060a01b031690565b6101b6906101a2565b90565b6101c2816101ad565b036101c957565b5f80fd5b905035906101da826101b9565b565b919060408382031261020457806101f8610201925f86016101cd565b936020016101cd565b90565b6100bc565b5f0190565b3461023d576102276102213660046101dc565b906108d2565b61022f6100b2565b8061023981610209565b0390f35b6100b8565b5f91031261024c57565b6100bc565b3461027f57610261366004610242565b610269610903565b6102716100b2565b8061027b81610209565b0390f35b6100b8565b61028d906101ad565b9052565b91906102a4905f60208501940190610284565b565b346102d6576102b6366004610242565b6102d26102c161093d565b6102c96100b2565b91829182610291565b0390f35b6100b8565b1c90565b60018060a01b031690565b6102fa9060086102ff93026102db565b6102df565b90565b9061030d91546102ea565b90565b61031c60015f90610302565b90565b90565b61033661033161033b926101a2565b61031f565b6101a2565b90565b61034790610322565b90565b6103539061033e565b90565b61035f9061034a565b9052565b9190610376905f60208501940190610356565b565b346103a857610388366004610242565b6103a4610393610310565b61039b6100b2565b91829182610363565b0390f35b6100b8565b60018060a01b031690565b6103c89060086103cd93026102db565b6103ad565b90565b906103db91546103b8565b90565b6103ea60025f906103d0565b90565b6103f69061033e565b90565b610402906103ed565b9052565b9190610419905f602085019401906103f9565b565b3461044b5761042b366004610242565b6104476104366103de565b61043e6100b2565b91829182610406565b0390f35b6100b8565b9060208282031261046957610466915f016101cd565b90565b6100bc565b3461049e5761049a610489610484366004610450565b610973565b6104916100b2565b91829182610157565b0390f35b6100b8565b346104d1576104bb6104b6366004610450565b610abb565b6104c36100b2565b806104cd81610209565b0390f35b6100b8565b34610504576104ee6104e9366004610450565b610b32565b6104f66100b2565b8061050081610209565b0390f35b6100b8565b5f80fd5b5f90565b5f1c90565b61052261052791610511565b6103ad565b90565b6105349054610516565b90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061055f90610537565b810190811067ffffffffffffffff82111761057957604052565b610541565b60e01b90565b61058d81610145565b0361059457565b5f80fd5b905051906105a582610584565b565b906020828203126105c0576105bd915f01610598565b90565b6100bc565b60209181520190565b90825f939282370152565b91906105f3816105ec816105f8956105c5565b80956105ce565b610537565b0190565b90916106139260208301925f8185039101526105d9565b90565b61061e6100b2565b3d5f823e3d90fd5b9060209061063261050d565b50610645610640600261052a565b6103ed565b610667633dfb5ee794929461067261065b6100b2565b9687958694859461057e565b8452600484016105fc565b03915afa9081156106b6575f91610688575b5090565b6106a9915060203d81116106af575b6106a18183610555565b8101906105a7565b5f610684565b503d610697565b610616565b906106cd916106c8610b3d565b610823565b565b60a01c90565b60ff1690565b6106e76106ec916106cf565b6106d5565b90565b6106f990546106db565b90565b90565b61071361070e610718926106fc565b61031f565b6101a2565b90565b610724906106ff565b90565b60a01b90565b9061073c60ff60a01b91610727565b9181191691161790565b61074f90610145565b90565b90565b9061076a61076561077192610746565b610752565b825461072d565b9055565b61077e90610322565b90565b61078a90610775565b90565b5f1b90565b906107a360018060a01b039161078d565b9181191691161790565b6107b690610775565b90565b90565b906107d16107cc6107d8926107ad565b6107b9565b8254610792565b9055565b6107e590610322565b90565b6107f1906107dc565b90565b6107fd906107dc565b90565b90565b9061081861081361081f926107f4565b610800565b8254610792565b9055565b61082d60026106ef565b6108b0578161084c6108466108415f61071b565b6101ad565b916101ad565b1461088d5761088661087f61088b9361086760016002610755565b61087a61087382610781565b60016107bc565b6107e8565b6002610803565b610b32565b565b6108956100b2565b632e7f3c7f60e11b8152806108ac60048201610209565b0390fd5b6108b86100b2565b62dc149f60e41b8152806108ce60048201610209565b0390fd5b906108dc916106bb565b565b6108e6610b3d565b6108ee6108f0565b565b6109016108fc5f61071b565b610bb5565b565b61090b6108de565b565b5f90565b60018060a01b031690565b61092861092d91610511565b610911565b90565b61093a905461091c565b90565b61094561090d565b5061094f5f610930565b90565b61095e61096391610511565b6102df565b90565b6109709054610952565b90565b60206109bb9161098161050d565b5061099461098f6001610966565b61034a565b6109b063babcc5396109a46100b2565b9586948593849361057e565b835260048301610291565b03915afa9081156109ff575f916109d1575b5090565b6109f2915060203d81116109f8575b6109ea8183610555565b8101906105a7565b5f6109cd565b503d6109e0565b610616565b610a1590610a10610b3d565b610a23565b565b610a209061033e565b90565b80610a3e610a38610a335f61071b565b6101ad565b916101ad565b14610a9857610a56610a4f82610781565b60016107bc565b610a807f253580f806741c11b3d4aa60d9cacc5bef0cebb35748767fe23f11916e2f04b991610a17565b90610a896100b2565b80610a9381610209565b0390a2565b610aa06100b2565b632e7f3c7f60e11b815280610ab760048201610209565b0390fd5b610ac490610a04565b565b610ad790610ad2610b3d565b610ad9565b565b80610af4610aee610ae95f61071b565b6101ad565b916101ad565b14610b0457610b0290610bb5565b565b610b2e610b105f61071b565b610b186100b2565b918291631e4fbdf760e01b835260048301610291565b0390fd5b610b3b90610ac6565b565b610b4561093d565b610b5e610b58610b53610c14565b6101ad565b916101ad565b03610b6557565b610b8e610b70610c14565b610b786100b2565b91829163118cdaa760e01b835260048301610291565b0390fd5b90565b90610baa610ba5610bb192610a17565b610b92565b8254610792565b9055565b610bbe5f610930565b610bc8825f610b95565b90610bfc610bf67f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610a17565b91610a17565b91610c056100b2565b80610c0f81610209565b0390a3565b610c1c61090d565b50339056fea2646970667358221220370343f08efed30b9218d0c115a5d8f6fc7ca418967fcc811a0c762deb65bbc364736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x05\tV[a\0\x1D_5a\0\xACV[\x80c=\xFB^\xE7\x14a\0\xA7W\x80cH\\\xC9U\x14a\0\xA2W\x80cqP\x18\xA6\x14a\0\x9DW\x80c\x8D\xA5\xCB[\x14a\0\x98W\x80c\xA80\xB6C\x14a\0\x93W\x80c\xAA\xA6\x07\x07\x14a\0\x8EW\x80c\xBA\xBC\xC59\x14a\0\x89W\x80c\xD4\xF0\xEBM\x14a\0\x84Wc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\x04\xD6V[a\x04\xA3V[a\x04nV[a\x04\x1BV[a\x03xV[a\x02\xA6V[a\x02QV[a\x02\x0EV[a\x01lV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01\nW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01\x05W` \x01\x92`\x01\x83\x02\x84\x01\x11a\x01\0WV[a\0\xCCV[a\0\xC8V[a\0\xC4V[\x90` \x82\x82\x03\x12a\x01@W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01;Wa\x017\x92\x01a\0\xD0V[\x90\x91V[a\0\xC0V[a\0\xBCV[\x15\x15\x90V[a\x01S\x90a\x01EV[\x90RV[\x91\x90a\x01j\x90_` \x85\x01\x94\x01\x90a\x01JV[V[4a\x01\x9DWa\x01\x99a\x01\x88a\x01\x826`\x04a\x01\x0FV[\x90a\x06&V[a\x01\x90a\0\xB2V[\x91\x82\x91\x82a\x01WV[\x03\x90\xF3[a\0\xB8V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01\xB6\x90a\x01\xA2V[\x90V[a\x01\xC2\x81a\x01\xADV[\x03a\x01\xC9WV[_\x80\xFD[\x90P5\x90a\x01\xDA\x82a\x01\xB9V[V[\x91\x90`@\x83\x82\x03\x12a\x02\x04W\x80a\x01\xF8a\x02\x01\x92_\x86\x01a\x01\xCDV[\x93` \x01a\x01\xCDV[\x90V[a\0\xBCV[_\x01\x90V[4a\x02=Wa\x02'a\x02!6`\x04a\x01\xDCV[\x90a\x08\xD2V[a\x02/a\0\xB2V[\x80a\x029\x81a\x02\tV[\x03\x90\xF3[a\0\xB8V[_\x91\x03\x12a\x02LWV[a\0\xBCV[4a\x02\x7FWa\x02a6`\x04a\x02BV[a\x02ia\t\x03V[a\x02qa\0\xB2V[\x80a\x02{\x81a\x02\tV[\x03\x90\xF3[a\0\xB8V[a\x02\x8D\x90a\x01\xADV[\x90RV[\x91\x90a\x02\xA4\x90_` \x85\x01\x94\x01\x90a\x02\x84V[V[4a\x02\xD6Wa\x02\xB66`\x04a\x02BV[a\x02\xD2a\x02\xC1a\t=V[a\x02\xC9a\0\xB2V[\x91\x82\x91\x82a\x02\x91V[\x03\x90\xF3[a\0\xB8V[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02\xFA\x90`\x08a\x02\xFF\x93\x02a\x02\xDBV[a\x02\xDFV[\x90V[\x90a\x03\r\x91Ta\x02\xEAV[\x90V[a\x03\x1C`\x01_\x90a\x03\x02V[\x90V[\x90V[a\x036a\x031a\x03;\x92a\x01\xA2V[a\x03\x1FV[a\x01\xA2V[\x90V[a\x03G\x90a\x03\"V[\x90V[a\x03S\x90a\x03>V[\x90V[a\x03_\x90a\x03JV[\x90RV[\x91\x90a\x03v\x90_` \x85\x01\x94\x01\x90a\x03VV[V[4a\x03\xA8Wa\x03\x886`\x04a\x02BV[a\x03\xA4a\x03\x93a\x03\x10V[a\x03\x9Ba\0\xB2V[\x91\x82\x91\x82a\x03cV[\x03\x90\xF3[a\0\xB8V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x03\xC8\x90`\x08a\x03\xCD\x93\x02a\x02\xDBV[a\x03\xADV[\x90V[\x90a\x03\xDB\x91Ta\x03\xB8V[\x90V[a\x03\xEA`\x02_\x90a\x03\xD0V[\x90V[a\x03\xF6\x90a\x03>V[\x90V[a\x04\x02\x90a\x03\xEDV[\x90RV[\x91\x90a\x04\x19\x90_` \x85\x01\x94\x01\x90a\x03\xF9V[V[4a\x04KWa\x04+6`\x04a\x02BV[a\x04Ga\x046a\x03\xDEV[a\x04>a\0\xB2V[\x91\x82\x91\x82a\x04\x06V[\x03\x90\xF3[a\0\xB8V[\x90` \x82\x82\x03\x12a\x04iWa\x04f\x91_\x01a\x01\xCDV[\x90V[a\0\xBCV[4a\x04\x9EWa\x04\x9Aa\x04\x89a\x04\x846`\x04a\x04PV[a\tsV[a\x04\x91a\0\xB2V[\x91\x82\x91\x82a\x01WV[\x03\x90\xF3[a\0\xB8V[4a\x04\xD1Wa\x04\xBBa\x04\xB66`\x04a\x04PV[a\n\xBBV[a\x04\xC3a\0\xB2V[\x80a\x04\xCD\x81a\x02\tV[\x03\x90\xF3[a\0\xB8V[4a\x05\x04Wa\x04\xEEa\x04\xE96`\x04a\x04PV[a\x0B2V[a\x04\xF6a\0\xB2V[\x80a\x05\0\x81a\x02\tV[\x03\x90\xF3[a\0\xB8V[_\x80\xFD[_\x90V[_\x1C\x90V[a\x05\"a\x05'\x91a\x05\x11V[a\x03\xADV[\x90V[a\x054\x90Ta\x05\x16V[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x05_\x90a\x057V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x05yW`@RV[a\x05AV[`\xE0\x1B\x90V[a\x05\x8D\x81a\x01EV[\x03a\x05\x94WV[_\x80\xFD[\x90PQ\x90a\x05\xA5\x82a\x05\x84V[V[\x90` \x82\x82\x03\x12a\x05\xC0Wa\x05\xBD\x91_\x01a\x05\x98V[\x90V[a\0\xBCV[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x827\x01RV[\x91\x90a\x05\xF3\x81a\x05\xEC\x81a\x05\xF8\x95a\x05\xC5V[\x80\x95a\x05\xCEV[a\x057V[\x01\x90V[\x90\x91a\x06\x13\x92` \x83\x01\x92_\x81\x85\x03\x91\x01Ra\x05\xD9V[\x90V[a\x06\x1Ea\0\xB2V[=_\x82>=\x90\xFD[\x90` \x90a\x062a\x05\rV[Pa\x06Ea\x06@`\x02a\x05*V[a\x03\xEDV[a\x06gc=\xFB^\xE7\x94\x92\x94a\x06ra\x06[a\0\xB2V[\x96\x87\x95\x86\x94\x85\x94a\x05~V[\x84R`\x04\x84\x01a\x05\xFCV[\x03\x91Z\xFA\x90\x81\x15a\x06\xB6W_\x91a\x06\x88W[P\x90V[a\x06\xA9\x91P` =\x81\x11a\x06\xAFW[a\x06\xA1\x81\x83a\x05UV[\x81\x01\x90a\x05\xA7V[_a\x06\x84V[P=a\x06\x97V[a\x06\x16V[\x90a\x06\xCD\x91a\x06\xC8a\x0B=V[a\x08#V[V[`\xA0\x1C\x90V[`\xFF\x16\x90V[a\x06\xE7a\x06\xEC\x91a\x06\xCFV[a\x06\xD5V[\x90V[a\x06\xF9\x90Ta\x06\xDBV[\x90V[\x90V[a\x07\x13a\x07\x0Ea\x07\x18\x92a\x06\xFCV[a\x03\x1FV[a\x01\xA2V[\x90V[a\x07$\x90a\x06\xFFV[\x90V[`\xA0\x1B\x90V[\x90a\x07<`\xFF`\xA0\x1B\x91a\x07'V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x07O\x90a\x01EV[\x90V[\x90V[\x90a\x07ja\x07ea\x07q\x92a\x07FV[a\x07RV[\x82Ta\x07-V[\x90UV[a\x07~\x90a\x03\"V[\x90V[a\x07\x8A\x90a\x07uV[\x90V[_\x1B\x90V[\x90a\x07\xA3`\x01\x80`\xA0\x1B\x03\x91a\x07\x8DV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x07\xB6\x90a\x07uV[\x90V[\x90V[\x90a\x07\xD1a\x07\xCCa\x07\xD8\x92a\x07\xADV[a\x07\xB9V[\x82Ta\x07\x92V[\x90UV[a\x07\xE5\x90a\x03\"V[\x90V[a\x07\xF1\x90a\x07\xDCV[\x90V[a\x07\xFD\x90a\x07\xDCV[\x90V[\x90V[\x90a\x08\x18a\x08\x13a\x08\x1F\x92a\x07\xF4V[a\x08\0V[\x82Ta\x07\x92V[\x90UV[a\x08-`\x02a\x06\xEFV[a\x08\xB0W\x81a\x08La\x08Fa\x08A_a\x07\x1BV[a\x01\xADV[\x91a\x01\xADV[\x14a\x08\x8DWa\x08\x86a\x08\x7Fa\x08\x8B\x93a\x08g`\x01`\x02a\x07UV[a\x08za\x08s\x82a\x07\x81V[`\x01a\x07\xBCV[a\x07\xE8V[`\x02a\x08\x03V[a\x0B2V[V[a\x08\x95a\0\xB2V[c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x08\xAC`\x04\x82\x01a\x02\tV[\x03\x90\xFD[a\x08\xB8a\0\xB2V[b\xDC\x14\x9F`\xE4\x1B\x81R\x80a\x08\xCE`\x04\x82\x01a\x02\tV[\x03\x90\xFD[\x90a\x08\xDC\x91a\x06\xBBV[V[a\x08\xE6a\x0B=V[a\x08\xEEa\x08\xF0V[V[a\t\x01a\x08\xFC_a\x07\x1BV[a\x0B\xB5V[V[a\t\x0Ba\x08\xDEV[V[_\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\t(a\t-\x91a\x05\x11V[a\t\x11V[\x90V[a\t:\x90Ta\t\x1CV[\x90V[a\tEa\t\rV[Pa\tO_a\t0V[\x90V[a\t^a\tc\x91a\x05\x11V[a\x02\xDFV[\x90V[a\tp\x90Ta\tRV[\x90V[` a\t\xBB\x91a\t\x81a\x05\rV[Pa\t\x94a\t\x8F`\x01a\tfV[a\x03JV[a\t\xB0c\xBA\xBC\xC59a\t\xA4a\0\xB2V[\x95\x86\x94\x85\x93\x84\x93a\x05~V[\x83R`\x04\x83\x01a\x02\x91V[\x03\x91Z\xFA\x90\x81\x15a\t\xFFW_\x91a\t\xD1W[P\x90V[a\t\xF2\x91P` =\x81\x11a\t\xF8W[a\t\xEA\x81\x83a\x05UV[\x81\x01\x90a\x05\xA7V[_a\t\xCDV[P=a\t\xE0V[a\x06\x16V[a\n\x15\x90a\n\x10a\x0B=V[a\n#V[V[a\n \x90a\x03>V[\x90V[\x80a\n>a\n8a\n3_a\x07\x1BV[a\x01\xADV[\x91a\x01\xADV[\x14a\n\x98Wa\nVa\nO\x82a\x07\x81V[`\x01a\x07\xBCV[a\n\x80\x7F%5\x80\xF8\x06t\x1C\x11\xB3\xD4\xAA`\xD9\xCA\xCC[\xEF\x0C\xEB\xB3WHv\x7F\xE2?\x11\x91n/\x04\xB9\x91a\n\x17V[\x90a\n\x89a\0\xB2V[\x80a\n\x93\x81a\x02\tV[\x03\x90\xA2V[a\n\xA0a\0\xB2V[c.\x7F<\x7F`\xE1\x1B\x81R\x80a\n\xB7`\x04\x82\x01a\x02\tV[\x03\x90\xFD[a\n\xC4\x90a\n\x04V[V[a\n\xD7\x90a\n\xD2a\x0B=V[a\n\xD9V[V[\x80a\n\xF4a\n\xEEa\n\xE9_a\x07\x1BV[a\x01\xADV[\x91a\x01\xADV[\x14a\x0B\x04Wa\x0B\x02\x90a\x0B\xB5V[V[a\x0B.a\x0B\x10_a\x07\x1BV[a\x0B\x18a\0\xB2V[\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x02\x91V[\x03\x90\xFD[a\x0B;\x90a\n\xC6V[V[a\x0BEa\t=V[a\x0B^a\x0BXa\x0BSa\x0C\x14V[a\x01\xADV[\x91a\x01\xADV[\x03a\x0BeWV[a\x0B\x8Ea\x0Bpa\x0C\x14V[a\x0Bxa\0\xB2V[\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x02\x91V[\x03\x90\xFD[\x90V[\x90a\x0B\xAAa\x0B\xA5a\x0B\xB1\x92a\n\x17V[a\x0B\x92V[\x82Ta\x07\x92V[\x90UV[a\x0B\xBE_a\t0V[a\x0B\xC8\x82_a\x0B\x95V[\x90a\x0B\xFCa\x0B\xF6\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\n\x17V[\x91a\n\x17V[\x91a\x0C\x05a\0\xB2V[\x80a\x0C\x0F\x81a\x02\tV[\x03\x90\xA3V[a\x0C\x1Ca\t\rV[P3\x90V\xFE\xA2dipfsX\"\x12 7\x03C\xF0\x8E\xFE\xD3\x0B\x92\x18\xD0\xC1\x15\xA5\xD8\xF6\xFC|\xA4\x18\x96\x7F\xCC\x81\x1A\x0Cv-\xEBe\xBB\xC3dsolcC\0\x08\x19\x003",
    );
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `AlreadyInitialized()` and selector `0x0dc149f0`.
```solidity
error AlreadyInitialized();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AlreadyInitialized {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AlreadyInitialized> for UnderlyingRustTuple<'_> {
            fn from(value: AlreadyInitialized) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AlreadyInitialized {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AlreadyInitialized {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AlreadyInitialized()";
            const SELECTOR: [u8; 4] = [13u8, 193u8, 73u8, 240u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `CalldataNotAllowed()` and selector `0xc180a962`.
```solidity
error CalldataNotAllowed();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CalldataNotAllowed {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<CalldataNotAllowed> for UnderlyingRustTuple<'_> {
            fn from(value: CalldataNotAllowed) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for CalldataNotAllowed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for CalldataNotAllowed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "CalldataNotAllowed()";
            const SELECTOR: [u8; 4] = [193u8, 128u8, 169u8, 98u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `InvalidModuleAddress()` and selector `0x5cfe78fe`.
```solidity
error InvalidModuleAddress();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidModuleAddress {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidModuleAddress> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidModuleAddress) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidModuleAddress {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidModuleAddress {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidModuleAddress()";
            const SELECTOR: [u8; 4] = [92u8, 254u8, 120u8, 254u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NotAllowed(address)` and selector `0xfa5cd00f`.
```solidity
error NotAllowed(address batchSubmitter);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotAllowed {
        #[allow(missing_docs)]
        pub batchSubmitter: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotAllowed> for UnderlyingRustTuple<'_> {
            fn from(value: NotAllowed) -> Self {
                (value.batchSubmitter,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotAllowed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { batchSubmitter: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotAllowed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotAllowed(address)";
            const SELECTOR: [u8; 4] = [250u8, 92u8, 208u8, 15u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.batchSubmitter,
                    ),
                )
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `OwnableInvalidOwner(address)` and selector `0x1e4fbdf7`.
```solidity
error OwnableInvalidOwner(address owner);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableInvalidOwner {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableInvalidOwner> for UnderlyingRustTuple<'_> {
            fn from(value: OwnableInvalidOwner) -> Self {
                (value.owner,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for OwnableInvalidOwner {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { owner: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableInvalidOwner {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableInvalidOwner(address)";
            const SELECTOR: [u8; 4] = [30u8, 79u8, 189u8, 247u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `OwnableUnauthorizedAccount(address)` and selector `0x118cdaa7`.
```solidity
error OwnableUnauthorizedAccount(address account);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableUnauthorizedAccount {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: OwnableUnauthorizedAccount) -> Self {
                (value.account,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for OwnableUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { account: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableUnauthorizedAccount(address)";
            const SELECTOR: [u8; 4] = [17u8, 140u8, 218u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `OwnershipTransferred(address,address)` and selector `0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0`.
```solidity
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct OwnershipTransferred {
        #[allow(missing_docs)]
        pub previousOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OwnershipTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OwnershipTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                139u8, 224u8, 7u8, 156u8, 83u8, 22u8, 89u8, 20u8, 19u8, 68u8, 205u8,
                31u8, 208u8, 164u8, 242u8, 132u8, 25u8, 73u8, 127u8, 151u8, 34u8, 163u8,
                218u8, 175u8, 227u8, 180u8, 24u8, 111u8, 107u8, 100u8, 87u8, 224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousOwner: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousOwner.clone(),
                    self.newOwner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousOwner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OwnershipTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OwnershipTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &OwnershipTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `RequirementModuleUpdated(address)` and selector `0x253580f806741c11b3d4aa60d9cacc5bef0cebb35748767fe23f11916e2f04b9`.
```solidity
event RequirementModuleUpdated(address indexed newModule);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RequirementModuleUpdated {
        #[allow(missing_docs)]
        pub newModule: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RequirementModuleUpdated {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RequirementModuleUpdated(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                37u8, 53u8, 128u8, 248u8, 6u8, 116u8, 28u8, 17u8, 179u8, 212u8, 170u8,
                96u8, 217u8, 202u8, 204u8, 91u8, 239u8, 12u8, 235u8, 179u8, 87u8, 72u8,
                118u8, 127u8, 226u8, 63u8, 17u8, 145u8, 110u8, 47u8, 4u8, 185u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { newModule: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.newModule.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newModule,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RequirementModuleUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RequirementModuleUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &RequirementModuleUpdated,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `calldataRequirementModule()` and selector `0xaaa60707`.
```solidity
function calldataRequirementModule() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct calldataRequirementModuleCall {}
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`calldataRequirementModule()`](calldataRequirementModuleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct calldataRequirementModuleReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<calldataRequirementModuleCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: calldataRequirementModuleCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for calldataRequirementModuleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<calldataRequirementModuleReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: calldataRequirementModuleReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for calldataRequirementModuleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for calldataRequirementModuleCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = calldataRequirementModuleReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "calldataRequirementModule()";
            const SELECTOR: [u8; 4] = [170u8, 166u8, 7u8, 7u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `initialize(address,address)` and selector `0x485cc955`.
```solidity
function initialize(address admin, address _requirementModule) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeCall {
        #[allow(missing_docs)]
        pub admin: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _requirementModule: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`initialize(address,address)`](initializeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeCall> for UnderlyingRustTuple<'_> {
                fn from(value: initializeCall) -> Self {
                    (value.admin, value._requirementModule)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        admin: tuple.0,
                        _requirementModule: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: initializeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for initializeCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = initializeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "initialize(address,address)";
            const SELECTOR: [u8; 4] = [72u8, 92u8, 201u8, 85u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._requirementModule,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `isAllowed(address)` and selector `0xbabcc539`.
```solidity
function isAllowed(address proposer) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedCall {
        #[allow(missing_docs)]
        pub proposer: alloy::sol_types::private::Address,
    }
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`isAllowed(address)`](isAllowedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedCall> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedCall) -> Self {
                    (value.proposer,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { proposer: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isAllowedCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isAllowedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isAllowed(address)";
            const SELECTOR: [u8; 4] = [186u8, 188u8, 197u8, 57u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.proposer,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `isCalldataAllowed(bytes)` and selector `0x3dfb5ee7`.
```solidity
function isCalldataAllowed(bytes memory data) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isCalldataAllowedCall {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`isCalldataAllowed(bytes)`](isCalldataAllowedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isCalldataAllowedReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isCalldataAllowedCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: isCalldataAllowedCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isCalldataAllowedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isCalldataAllowedReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: isCalldataAllowedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isCalldataAllowedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isCalldataAllowedCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isCalldataAllowedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isCalldataAllowed(bytes)";
            const SELECTOR: [u8; 4] = [61u8, 251u8, 94u8, 231u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `owner()` and selector `0x8da5cb5b`.
```solidity
function owner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerCall {}
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`owner()`](ownerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "owner()";
            const SELECTOR: [u8; 4] = [141u8, 165u8, 203u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `proposerRequirementModule()` and selector `0xa830b643`.
```solidity
function proposerRequirementModule() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct proposerRequirementModuleCall {}
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`proposerRequirementModule()`](proposerRequirementModuleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct proposerRequirementModuleReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<proposerRequirementModuleCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: proposerRequirementModuleCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for proposerRequirementModuleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<proposerRequirementModuleReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: proposerRequirementModuleReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for proposerRequirementModuleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for proposerRequirementModuleCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = proposerRequirementModuleReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "proposerRequirementModule()";
            const SELECTOR: [u8; 4] = [168u8, 48u8, 182u8, 67u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `renounceOwnership()` and selector `0x715018a6`.
```solidity
function renounceOwnership() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipCall {}
    ///Container type for the return parameters of the [`renounceOwnership()`](renounceOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceOwnershipCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceOwnership()";
            const SELECTOR: [u8; 4] = [113u8, 80u8, 24u8, 166u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `transferOwnership(address)` and selector `0xf2fde38b`.
```solidity
function transferOwnership(address newOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipCall {
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferOwnership(address)`](transferOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipCall) -> Self {
                    (value.newOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferOwnershipCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferOwnership(address)";
            const SELECTOR: [u8; 4] = [242u8, 253u8, 227u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newOwner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `updateRequirementModule(address)` and selector `0xd4f0eb4d`.
```solidity
function updateRequirementModule(address _newModule) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateRequirementModuleCall {
        #[allow(missing_docs)]
        pub _newModule: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`updateRequirementModule(address)`](updateRequirementModuleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateRequirementModuleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateRequirementModuleCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateRequirementModuleCall) -> Self {
                    (value._newModule,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateRequirementModuleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _newModule: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateRequirementModuleReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateRequirementModuleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateRequirementModuleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for updateRequirementModuleCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = updateRequirementModuleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "updateRequirementModule(address)";
            const SELECTOR: [u8; 4] = [212u8, 240u8, 235u8, 77u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._newModule,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`SequencingModuleCheckerMock`](self) function calls.
    #[derive()]
    pub enum SequencingModuleCheckerMockCalls {
        #[allow(missing_docs)]
        calldataRequirementModule(calldataRequirementModuleCall),
        #[allow(missing_docs)]
        initialize(initializeCall),
        #[allow(missing_docs)]
        isAllowed(isAllowedCall),
        #[allow(missing_docs)]
        isCalldataAllowed(isCalldataAllowedCall),
        #[allow(missing_docs)]
        owner(ownerCall),
        #[allow(missing_docs)]
        proposerRequirementModule(proposerRequirementModuleCall),
        #[allow(missing_docs)]
        renounceOwnership(renounceOwnershipCall),
        #[allow(missing_docs)]
        transferOwnership(transferOwnershipCall),
        #[allow(missing_docs)]
        updateRequirementModule(updateRequirementModuleCall),
    }
    #[automatically_derived]
    impl SequencingModuleCheckerMockCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [61u8, 251u8, 94u8, 231u8],
            [72u8, 92u8, 201u8, 85u8],
            [113u8, 80u8, 24u8, 166u8],
            [141u8, 165u8, 203u8, 91u8],
            [168u8, 48u8, 182u8, 67u8],
            [170u8, 166u8, 7u8, 7u8],
            [186u8, 188u8, 197u8, 57u8],
            [212u8, 240u8, 235u8, 77u8],
            [242u8, 253u8, 227u8, 139u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for SequencingModuleCheckerMockCalls {
        const NAME: &'static str = "SequencingModuleCheckerMockCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 9usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::calldataRequirementModule(_) => {
                    <calldataRequirementModuleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::initialize(_) => {
                    <initializeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isAllowed(_) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isCalldataAllowed(_) => {
                    <isCalldataAllowedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::owner(_) => <ownerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::proposerRequirementModule(_) => {
                    <proposerRequirementModuleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::renounceOwnership(_) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferOwnership(_) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::updateRequirementModule(_) => {
                    <updateRequirementModuleCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<SequencingModuleCheckerMockCalls>] = &[
                {
                    fn isCalldataAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SequencingModuleCheckerMockCalls> {
                        <isCalldataAllowedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SequencingModuleCheckerMockCalls::isCalldataAllowed)
                    }
                    isCalldataAllowed
                },
                {
                    fn initialize(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SequencingModuleCheckerMockCalls> {
                        <initializeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SequencingModuleCheckerMockCalls::initialize)
                    }
                    initialize
                },
                {
                    fn renounceOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SequencingModuleCheckerMockCalls> {
                        <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SequencingModuleCheckerMockCalls::renounceOwnership)
                    }
                    renounceOwnership
                },
                {
                    fn owner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SequencingModuleCheckerMockCalls> {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SequencingModuleCheckerMockCalls::owner)
                    }
                    owner
                },
                {
                    fn proposerRequirementModule(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SequencingModuleCheckerMockCalls> {
                        <proposerRequirementModuleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SequencingModuleCheckerMockCalls::proposerRequirementModule,
                            )
                    }
                    proposerRequirementModule
                },
                {
                    fn calldataRequirementModule(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SequencingModuleCheckerMockCalls> {
                        <calldataRequirementModuleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SequencingModuleCheckerMockCalls::calldataRequirementModule,
                            )
                    }
                    calldataRequirementModule
                },
                {
                    fn isAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SequencingModuleCheckerMockCalls> {
                        <isAllowedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SequencingModuleCheckerMockCalls::isAllowed)
                    }
                    isAllowed
                },
                {
                    fn updateRequirementModule(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SequencingModuleCheckerMockCalls> {
                        <updateRequirementModuleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SequencingModuleCheckerMockCalls::updateRequirementModule,
                            )
                    }
                    updateRequirementModule
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SequencingModuleCheckerMockCalls> {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SequencingModuleCheckerMockCalls::transferOwnership)
                    }
                    transferOwnership
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::calldataRequirementModule(inner) => {
                    <calldataRequirementModuleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isCalldataAllowed(inner) => {
                    <isCalldataAllowedCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::proposerRequirementModule(inner) => {
                    <proposerRequirementModuleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::updateRequirementModule(inner) => {
                    <updateRequirementModuleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::calldataRequirementModule(inner) => {
                    <calldataRequirementModuleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isCalldataAllowed(inner) => {
                    <isCalldataAllowedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::proposerRequirementModule(inner) => {
                    <proposerRequirementModuleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::updateRequirementModule(inner) => {
                    <updateRequirementModuleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`SequencingModuleCheckerMock`](self) custom errors.
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum SequencingModuleCheckerMockErrors {
        #[allow(missing_docs)]
        AlreadyInitialized(AlreadyInitialized),
        #[allow(missing_docs)]
        CalldataNotAllowed(CalldataNotAllowed),
        #[allow(missing_docs)]
        InvalidModuleAddress(InvalidModuleAddress),
        #[allow(missing_docs)]
        NotAllowed(NotAllowed),
        #[allow(missing_docs)]
        OwnableInvalidOwner(OwnableInvalidOwner),
        #[allow(missing_docs)]
        OwnableUnauthorizedAccount(OwnableUnauthorizedAccount),
    }
    #[automatically_derived]
    impl SequencingModuleCheckerMockErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [13u8, 193u8, 73u8, 240u8],
            [17u8, 140u8, 218u8, 167u8],
            [30u8, 79u8, 189u8, 247u8],
            [92u8, 254u8, 120u8, 254u8],
            [193u8, 128u8, 169u8, 98u8],
            [250u8, 92u8, 208u8, 15u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for SequencingModuleCheckerMockErrors {
        const NAME: &'static str = "SequencingModuleCheckerMockErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 6usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AlreadyInitialized(_) => {
                    <AlreadyInitialized as alloy_sol_types::SolError>::SELECTOR
                }
                Self::CalldataNotAllowed(_) => {
                    <CalldataNotAllowed as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidModuleAddress(_) => {
                    <InvalidModuleAddress as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotAllowed(_) => {
                    <NotAllowed as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableInvalidOwner(_) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableUnauthorizedAccount(_) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<SequencingModuleCheckerMockErrors>] = &[
                {
                    fn AlreadyInitialized(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SequencingModuleCheckerMockErrors> {
                        <AlreadyInitialized as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SequencingModuleCheckerMockErrors::AlreadyInitialized)
                    }
                    AlreadyInitialized
                },
                {
                    fn OwnableUnauthorizedAccount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SequencingModuleCheckerMockErrors> {
                        <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SequencingModuleCheckerMockErrors::OwnableUnauthorizedAccount,
                            )
                    }
                    OwnableUnauthorizedAccount
                },
                {
                    fn OwnableInvalidOwner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SequencingModuleCheckerMockErrors> {
                        <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SequencingModuleCheckerMockErrors::OwnableInvalidOwner)
                    }
                    OwnableInvalidOwner
                },
                {
                    fn InvalidModuleAddress(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SequencingModuleCheckerMockErrors> {
                        <InvalidModuleAddress as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SequencingModuleCheckerMockErrors::InvalidModuleAddress)
                    }
                    InvalidModuleAddress
                },
                {
                    fn CalldataNotAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SequencingModuleCheckerMockErrors> {
                        <CalldataNotAllowed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SequencingModuleCheckerMockErrors::CalldataNotAllowed)
                    }
                    CalldataNotAllowed
                },
                {
                    fn NotAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SequencingModuleCheckerMockErrors> {
                        <NotAllowed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SequencingModuleCheckerMockErrors::NotAllowed)
                    }
                    NotAllowed
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AlreadyInitialized(inner) => {
                    <AlreadyInitialized as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::CalldataNotAllowed(inner) => {
                    <CalldataNotAllowed as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidModuleAddress(inner) => {
                    <InvalidModuleAddress as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotAllowed(inner) => {
                    <NotAllowed as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AlreadyInitialized(inner) => {
                    <AlreadyInitialized as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::CalldataNotAllowed(inner) => {
                    <CalldataNotAllowed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidModuleAddress(inner) => {
                    <InvalidModuleAddress as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotAllowed(inner) => {
                    <NotAllowed as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`SequencingModuleCheckerMock`](self) events.
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum SequencingModuleCheckerMockEvents {
        #[allow(missing_docs)]
        OwnershipTransferred(OwnershipTransferred),
        #[allow(missing_docs)]
        RequirementModuleUpdated(RequirementModuleUpdated),
    }
    #[automatically_derived]
    impl SequencingModuleCheckerMockEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                37u8, 53u8, 128u8, 248u8, 6u8, 116u8, 28u8, 17u8, 179u8, 212u8, 170u8,
                96u8, 217u8, 202u8, 204u8, 91u8, 239u8, 12u8, 235u8, 179u8, 87u8, 72u8,
                118u8, 127u8, 226u8, 63u8, 17u8, 145u8, 110u8, 47u8, 4u8, 185u8,
            ],
            [
                139u8, 224u8, 7u8, 156u8, 83u8, 22u8, 89u8, 20u8, 19u8, 68u8, 205u8,
                31u8, 208u8, 164u8, 242u8, 132u8, 25u8, 73u8, 127u8, 151u8, 34u8, 163u8,
                218u8, 175u8, 227u8, 180u8, 24u8, 111u8, 107u8, 100u8, 87u8, 224u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for SequencingModuleCheckerMockEvents {
        const NAME: &'static str = "SequencingModuleCheckerMockEvents";
        const COUNT: usize = 2usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::OwnershipTransferred)
                }
                Some(
                    <RequirementModuleUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <RequirementModuleUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RequirementModuleUpdated)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for SequencingModuleCheckerMockEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RequirementModuleUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RequirementModuleUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`SequencingModuleCheckerMock`](self) contract instance.

See the [wrapper's documentation](`SequencingModuleCheckerMockInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> SequencingModuleCheckerMockInstance<T, P, N> {
        SequencingModuleCheckerMockInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<SequencingModuleCheckerMockInstance<T, P, N>>,
    > {
        SequencingModuleCheckerMockInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        SequencingModuleCheckerMockInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`SequencingModuleCheckerMock`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`SequencingModuleCheckerMock`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct SequencingModuleCheckerMockInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for SequencingModuleCheckerMockInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("SequencingModuleCheckerMockInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SequencingModuleCheckerMockInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`SequencingModuleCheckerMock`](self) contract instance.

See the [wrapper's documentation](`SequencingModuleCheckerMockInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<SequencingModuleCheckerMockInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> SequencingModuleCheckerMockInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(
            self,
        ) -> SequencingModuleCheckerMockInstance<T, P, N> {
            SequencingModuleCheckerMockInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SequencingModuleCheckerMockInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`calldataRequirementModule`] function.
        pub fn calldataRequirementModule(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, calldataRequirementModuleCall, N> {
            self.call_builder(&calldataRequirementModuleCall {})
        }
        ///Creates a new call builder for the [`initialize`] function.
        pub fn initialize(
            &self,
            admin: alloy::sol_types::private::Address,
            _requirementModule: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, initializeCall, N> {
            self.call_builder(
                &initializeCall {
                    admin,
                    _requirementModule,
                },
            )
        }
        ///Creates a new call builder for the [`isAllowed`] function.
        pub fn isAllowed(
            &self,
            proposer: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, isAllowedCall, N> {
            self.call_builder(&isAllowedCall { proposer })
        }
        ///Creates a new call builder for the [`isCalldataAllowed`] function.
        pub fn isCalldataAllowed(
            &self,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, isCalldataAllowedCall, N> {
            self.call_builder(&isCalldataAllowedCall { data })
        }
        ///Creates a new call builder for the [`owner`] function.
        pub fn owner(&self) -> alloy_contract::SolCallBuilder<T, &P, ownerCall, N> {
            self.call_builder(&ownerCall {})
        }
        ///Creates a new call builder for the [`proposerRequirementModule`] function.
        pub fn proposerRequirementModule(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, proposerRequirementModuleCall, N> {
            self.call_builder(&proposerRequirementModuleCall {})
        }
        ///Creates a new call builder for the [`renounceOwnership`] function.
        pub fn renounceOwnership(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, renounceOwnershipCall, N> {
            self.call_builder(&renounceOwnershipCall {})
        }
        ///Creates a new call builder for the [`transferOwnership`] function.
        pub fn transferOwnership(
            &self,
            newOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferOwnershipCall, N> {
            self.call_builder(&transferOwnershipCall { newOwner })
        }
        ///Creates a new call builder for the [`updateRequirementModule`] function.
        pub fn updateRequirementModule(
            &self,
            _newModule: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, updateRequirementModuleCall, N> {
            self.call_builder(
                &updateRequirementModuleCall {
                    _newModule,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SequencingModuleCheckerMockInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`OwnershipTransferred`] event.
        pub fn OwnershipTransferred_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, OwnershipTransferred, N> {
            self.event_filter::<OwnershipTransferred>()
        }
        ///Creates a new event filter for the [`RequirementModuleUpdated`] event.
        pub fn RequirementModuleUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RequirementModuleUpdated, N> {
            self.event_filter::<RequirementModuleUpdated>()
        }
    }
}
