/**

Generated by the following Solidity interface...
```solidity
interface WalletPool {
    error AccessControlBadConfirmation();
    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);
    error AddressNotAllowed();
    error AllowlistUpdateFailed();

    event AllowlistModuleUpdated(address indexed module, address indexed wallet, bool isAllowed);
    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
    event WalletAddedToPool(address indexed wallet);
    event WalletRemovedFromPool(address indexed wallet);

    constructor(address _admin);

    function DEFAULT_ADMIN_ROLE() external view returns (bytes32);
    function MANAGER_ROLE() external view returns (bytes32);
    function addToWalletPool(address wallet, address[] memory allowlistModules) external;
    function getRoleAdmin(bytes32 role) external view returns (bytes32);
    function grantRole(bytes32 role, address account) external;
    function hasRole(bytes32 role, address account) external view returns (bool);
    function isInWalletPool(address wallet) external view returns (bool);
    function removeFromWalletPool(address wallet, address[] memory allowlistModules) external;
    function renounceRole(bytes32 role, address callerConfirmation) external;
    function revokeRole(bytes32 role, address account) external;
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
    function updateAllowlistModule(address allowlistModule, address wallet, bool isAllowed) external;
    function updateAllowlistModules(address wallet, bool isAllowed, address[] memory allowlistModules) external;
    function walletPool(address wallet) external view returns (bool isInPool);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_admin",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "DEFAULT_ADMIN_ROLE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "MANAGER_ROLE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "addToWalletPool",
    "inputs": [
      {
        "name": "wallet",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "allowlistModules",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "getRoleAdmin",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "grantRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "hasRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isInWalletPool",
    "inputs": [
      {
        "name": "wallet",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "removeFromWalletPool",
    "inputs": [
      {
        "name": "wallet",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "allowlistModules",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "renounceRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "callerConfirmation",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "revokeRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "supportsInterface",
    "inputs": [
      {
        "name": "interfaceId",
        "type": "bytes4",
        "internalType": "bytes4"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "updateAllowlistModule",
    "inputs": [
      {
        "name": "allowlistModule",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "wallet",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "isAllowed",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "updateAllowlistModules",
    "inputs": [
      {
        "name": "wallet",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "isAllowed",
        "type": "bool",
        "internalType": "bool"
      },
      {
        "name": "allowlistModules",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "walletPool",
    "inputs": [
      {
        "name": "wallet",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "isInPool",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "event",
    "name": "AllowlistModuleUpdated",
    "inputs": [
      {
        "name": "module",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "wallet",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "isAllowed",
        "type": "bool",
        "indexed": false,
        "internalType": "bool"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleAdminChanged",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "previousAdminRole",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "newAdminRole",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleGranted",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleRevoked",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "WalletAddedToPool",
    "inputs": [
      {
        "name": "wallet",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "WalletRemovedFromPool",
    "inputs": [
      {
        "name": "wallet",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AccessControlBadConfirmation",
    "inputs": []
  },
  {
    "type": "error",
    "name": "AccessControlUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "neededRole",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ]
  },
  {
    "type": "error",
    "name": "AddressNotAllowed",
    "inputs": []
  },
  {
    "type": "error",
    "name": "AllowlistUpdateFailed",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod WalletPool {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60806040523461002f576100196100146100f4565b61019c565b610021610034565b61119d6103d2823961119d90f35b61003a565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906100669061003e565b810190811060018060401b0382111761007e57604052565b610048565b9061009661008f610034565b928361005c565b565b5f80fd5b60018060a01b031690565b6100b09061009c565b90565b6100bc816100a7565b036100c357565b5f80fd5b905051906100d4826100b3565b565b906020828203126100ef576100ec915f016100c7565b90565b610098565b61011261156f8038038061010781610083565b9283398101906100d6565b90565b90565b90565b61012f61012a61013492610115565b610118565b61009c565b90565b6101409061011b565b90565b5f0190565b90565b5f1b90565b61016461015f61016992610115565b61014b565b610148565b90565b6101755f610150565b90565b7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0890565b806101b76101b16101ac5f610137565b6100a7565b916100a7565b146101e3576101e0906101d26101cb61016c565b82906102c0565b506101db610178565b6102c0565b50565b6101eb610034565b6315a9bc2760e11b81528061020260048201610143565b0390fd5b5f90565b151590565b61021890610148565b90565b906102259061020f565b5f5260205260405f2090565b61024561024061024a9261009c565b610118565b61009c565b90565b61025690610231565b90565b6102629061024d565b90565b9061026f90610259565b5f5260205260405f2090565b9061028760ff9161014b565b9181191691161790565b61029a9061020a565b90565b90565b906102b56102b06102bc92610291565b61029d565b825461027b565b9055565b6102c8610206565b506102dd6102d7828490610397565b1561020a565b5f146103655761030460016102ff5f6102f781869061021b565b018590610265565b6102a0565b9061030d6103c4565b9061034a61034461033e7f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9561020f565b92610259565b92610259565b92610353610034565b8061035d81610143565b0390a4600190565b50505f90565b5f1c90565b60ff1690565b6103826103879161036b565b610370565b90565b6103949054610376565b90565b6103bd915f6103b26103b8936103ab610206565b508261021b565b01610265565b61038a565b90565b5f90565b6103cc6103c0565b50339056fe60806040526004361015610013575b6107aa565b61001d5f356100fc565b806301ffc9a7146100f757806320f22089146100f25780632119c2b0146100ed578063248a9ca3146100e85780632f2ff15d146100e357806336568abe146100de57806364770d4f146100d957806391320d6b146100d457806391d14854146100cf578063a217fddf146100ca578063b1f24b07146100c5578063c66ab622146100c0578063d547741f146100bb5763ec87621c0361000e57610775565b610712565b6106dd565b610613565b6105de565b61055e565b610527565b6104a1565b610410565b6103dc565b61037a565b6102e0565b610215565b610188565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b63ffffffff60e01b1690565b61012981610114565b0361013057565b5f80fd5b9050359061014182610120565b565b9060208282031261015c57610159915f01610134565b90565b61010c565b151590565b61016f90610161565b9052565b9190610186905f60208501940190610166565b565b346101b8576101b46101a361019e366004610143565b6107b2565b6101ab610102565b91829182610173565b0390f35b610108565b60018060a01b031690565b6101d1906101bd565b90565b6101dd816101c8565b036101e457565b5f80fd5b905035906101f5826101d4565b565b906020828203126102105761020d915f016101e8565b90565b61010c565b346102455761024161023061022b3660046101f7565b610818565b610238610102565b91829182610173565b0390f35b610108565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156102905781359167ffffffffffffffff831161028b57602001926020830284011161028657565b610252565b61024e565b61024a565b9190916040818403126102d6576102ae835f83016101e8565b92602082013567ffffffffffffffff81116102d1576102cd9201610256565b9091565b610110565b61010c565b5f0190565b3461030f576102f96102f3366004610295565b91610902565b610301610102565b8061030b816102db565b0390f35b610108565b90565b61032081610314565b0361032757565b5f80fd5b9050359061033882610317565b565b9060208282031261035357610350915f0161032b565b90565b61010c565b61036190610314565b9052565b9190610378905f60208501940190610358565b565b346103aa576103a661039561039036600461033a565b610959565b61039d610102565b91829182610365565b0390f35b610108565b91906040838203126103d757806103cb6103d4925f860161032b565b936020016101e8565b90565b61010c565b3461040b576103f56103ef3660046103af565b906109a4565b6103fd610102565b80610407816102db565b0390f35b610108565b3461043f576104296104233660046103af565b906109b0565b610431610102565b8061043b816102db565b0390f35b610108565b61044d81610161565b0361045457565b5f80fd5b9050359061046582610444565b565b909160608284031261049c57610499610482845f85016101e8565b9361049081602086016101e8565b93604001610458565b90565b61010c565b346104d0576104ba6104b4366004610467565b91610a2b565b6104c2610102565b806104cc816102db565b0390f35b610108565b91606083830312610522576104ec825f85016101e8565b926104fa8360208301610458565b92604082013567ffffffffffffffff811161051d576105199201610256565b9091565b610110565b61010c565b346105595761054361053a3660046104d5565b92919091610a66565b61054b610102565b80610555816102db565b0390f35b610108565b3461058f5761058b61057a6105743660046103af565b90610a74565b610582610102565b91829182610173565b0390f35b610108565b5f91031261059e57565b61010c565b90565b5f1b90565b6105bf6105ba6105c4926105a3565b6105a6565b610314565b90565b6105d05f6105ab565b90565b6105db6105c7565b90565b3461060e576105ee366004610594565b61060a6105f96105d3565b610601610102565b91829182610365565b0390f35b610108565b346106425761062c610626366004610295565b91610b21565b610634610102565b8061063e816102db565b0390f35b610108565b90565b61065e610659610663926101bd565b610647565b6101bd565b90565b61066f9061064a565b90565b61067b90610666565b90565b9061068890610672565b5f5260205260405f2090565b1c90565b60ff1690565b6106ae9060086106b39302610694565b610698565b90565b906106c1915461069e565b90565b6106da906106d56001915f9261067e565b6106b6565b90565b3461070d576107096106f86106f33660046101f7565b6106c4565b610700610102565b91829182610173565b0390f35b610108565b346107415761072b6107253660046103af565b90610b58565b610733610102565b8061073d816102db565b0390f35b610108565b7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0890565b610772610746565b90565b346107a557610785366004610594565b6107a161079061076a565b610798610102565b91829182610365565b0390f35b610108565b5f80fd5b5f90565b6107ba6107ae565b50806107d56107cf637965db0b60e01b610114565b91610114565b149081156107e2575b5090565b6107ec9150610b64565b5f6107de565b5f1c90565b610803610808916107f2565b610698565b90565b61081590546107f7565b90565b61082f610834916108276107ae565b50600161067e565b61080b565b90565b90610852929161084d610848610746565b610b8a565b610899565b565b9061086060ff916105a6565b9181191691161790565b61087390610161565b90565b90565b9061088e6108896108959261086a565b610876565b8254610854565b9055565b91610900926108b460016108af6001849061067e565b610879565b806108df7ffbe100784c759aa4579024e68e1179726f2afae20a7a954f70a18ab31fbc0f6491610672565b906108e8610102565b806108f2816102db565b0390a2916001909192610c06565b565b9061090d9291610837565b565b5f90565b61091c90610314565b90565b9061092990610913565b5f5260205260405f2090565b90565b610944610949916107f2565b610935565b90565b6109569054610938565b90565b60016109716109779261096a61090f565b505f61091f565b0161094c565b90565b906109959161099061098b82610959565b610b8a565b610997565b565b906109a191610c6c565b50565b906109ae9161097a565b565b90806109cb6109c56109c0610d1b565b6101c8565b916101c8565b036109dc576109d991610d28565b50565b6109e4610102565b63334bd91960e11b8152806109fb600482016102db565b0390fd5b90610a1a9291610a15610a10610746565b610b8a565b610a1c565b565b91610a2992919091610f9c565b565b90610a3692916109ff565b565b90610a54939291610a4f610a4a610746565b610b8a565b610a56565b565b91610a649391909192610c06565b565b90610a72939291610a38565b565b610a9a915f610a8f610a9593610a886107ae565b508261091f565b0161067e565b61080b565b90565b90610ab89291610ab3610aae610746565b610b8a565b610aba565b565b91610b1f92610ad45f610acf6001849061067e565b610879565b80610aff7f361d33fb2c027615b962bed78fe0782d09444b7c6d37fed9a5618ca069727d0d91610672565b90610b08610102565b80610b12816102db565b0390a2915f909192610c06565b565b90610b2c9291610a9d565b565b90610b4991610b44610b3f82610959565b610b8a565b610b4b565b565b90610b5591610d28565b50565b90610b6291610b2e565b565b610b6c6107ae565b50610b86610b806301ffc9a760e01b610114565b91610114565b1490565b610b9c90610b96610d1b565b90611125565b565b90565b610bb5610bb0610bba926105a3565b610647565b610b9e565b90565b6001610bc99101610b9e565b90565b5090565b634e487b7160e01b5f52603260045260245ffd5b9190811015610bf4576020020190565b610bd0565b35610c03816101d4565b90565b93929091610c135f610ba1565b5b80610c31610c2b610c26858790610bcc565b610b9e565b91610b9e565b1015610c6457610c5f90610c5a610c52610c4d85878591610be4565b610bf9565b888791610f9c565b610bbd565b610c14565b505050509050565b610c746107ae565b50610c89610c83828490610a74565b15610161565b5f14610d1157610cb06001610cab5f610ca381869061091f565b01859061067e565b610879565b90610cb9610d1b565b90610cf6610cf0610cea7f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d95610913565b92610672565b92610672565b92610cff610102565b80610d09816102db565b0390a4600190565b50505f90565b5f90565b610d23610d17565b503390565b610d306107ae565b50610d3c818390610a74565b5f14610dc357610d625f610d5d5f610d5581869061091f565b01859061067e565b610879565b90610d6b610d1b565b90610da8610da2610d9c7ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b95610913565b92610672565b92610672565b92610db1610102565b80610dbb816102db565b0390a4600190565b50505f90565b5f90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b90610df590610dcd565b810190811067ffffffffffffffff821117610e0f57604052565b610dd7565b90610e27610e20610102565b9283610deb565b565b67ffffffffffffffff8111610e4757610e43602091610dcd565b0190565b610dd7565b90610e5e610e5983610e29565b610e14565b918252565b5f7f72656d6f766546726f6d416c6c6f776c69737428616464726573732900000000910152565b610e94601c610e4c565b90610ea160208301610e63565b565b610eab610e8a565b90565b5f7f616464546f416c6c6f776c697374286164647265737329000000000000000000910152565b610edf6017610e4c565b90610eec60208301610eae565b565b610ef6610ed5565b90565b90565b60200190565b5190565b610f0f90610114565b90565b610f1b906101c8565b9052565b9190610f32905f60208501940190610f12565b565b67ffffffffffffffff8111610f5257610f4e602091610dcd565b0190565b610dd7565b90610f69610f6483610f34565b610e14565b918252565b606090565b3d5f14610f8e57610f833d610f57565b903d5f602084013e5b565b610f96610f6e565b90610f8c565b919091610fa7610dc9565b50803b610fbc610fb65f610ba1565b91610b9e565b146110df576110565f80838582146110cd57600461103d610fdb610eee565b5b61102e8a61101687611010610ff8610ff2610102565b96610ef9565b61100a61100482610f02565b91610efc565b20610f06565b94610deb565b61101e610102565b9485936020850190815201610f1f565b60208201810382520382610deb565b82602082019151925af161104f610f73565b5015610161565b6110aa579190916110a561109361108d7ff63cbab9fec82f3c2ce882466fb7814edf12173ce734e0264892bda95fa2465c93610672565b93610672565b9361109c610102565b91829182610173565b0390a3565b6110b2610102565b631f2e5d2f60e31b8152806110c9600482016102db565b0390fd5b600461103d6110da610ea3565b610fdc565b6110e7610102565b631f2e5d2f60e31b8152806110fe600482016102db565b0390fd5b91602061112392949361111c60408201965f830190610f12565b0190610358565b565b9061113a611134838390610a74565b15610161565b611142575050565b61116361114d610102565b92839263e2517d3f60e01b845260048401611102565b0390fdfea2646970667358221220161e928fbbd87d5ca557ed3926c201da6c775a795816a86696ae6b69456561cd64736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4a\0/Wa\0\x19a\0\x14a\0\xF4V[a\x01\x9CV[a\0!a\x004V[a\x11\x9Da\x03\xD2\x829a\x11\x9D\x90\xF3[a\0:V[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0f\x90a\0>V[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0~W`@RV[a\0HV[\x90a\0\x96a\0\x8Fa\x004V[\x92\x83a\0\\V[V[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xB0\x90a\0\x9CV[\x90V[a\0\xBC\x81a\0\xA7V[\x03a\0\xC3WV[_\x80\xFD[\x90PQ\x90a\0\xD4\x82a\0\xB3V[V[\x90` \x82\x82\x03\x12a\0\xEFWa\0\xEC\x91_\x01a\0\xC7V[\x90V[a\0\x98V[a\x01\x12a\x15o\x808\x03\x80a\x01\x07\x81a\0\x83V[\x92\x839\x81\x01\x90a\0\xD6V[\x90V[\x90V[\x90V[a\x01/a\x01*a\x014\x92a\x01\x15V[a\x01\x18V[a\0\x9CV[\x90V[a\x01@\x90a\x01\x1BV[\x90V[_\x01\x90V[\x90V[_\x1B\x90V[a\x01da\x01_a\x01i\x92a\x01\x15V[a\x01KV[a\x01HV[\x90V[a\x01u_a\x01PV[\x90V[\x7F$\x1E\xCF\x16\xD7\x9D\x0F\x8D\xBF\xB9,\xBC\x07\xFE\x17\x84\x04%\x97l\xF0f\x7F\x02/\xE9\x87|\xAA\x83\x1B\x08\x90V[\x80a\x01\xB7a\x01\xB1a\x01\xAC_a\x017V[a\0\xA7V[\x91a\0\xA7V[\x14a\x01\xE3Wa\x01\xE0\x90a\x01\xD2a\x01\xCBa\x01lV[\x82\x90a\x02\xC0V[Pa\x01\xDBa\x01xV[a\x02\xC0V[PV[a\x01\xEBa\x004V[c\x15\xA9\xBC'`\xE1\x1B\x81R\x80a\x02\x02`\x04\x82\x01a\x01CV[\x03\x90\xFD[_\x90V[\x15\x15\x90V[a\x02\x18\x90a\x01HV[\x90V[\x90a\x02%\x90a\x02\x0FV[_R` R`@_ \x90V[a\x02Ea\x02@a\x02J\x92a\0\x9CV[a\x01\x18V[a\0\x9CV[\x90V[a\x02V\x90a\x021V[\x90V[a\x02b\x90a\x02MV[\x90V[\x90a\x02o\x90a\x02YV[_R` R`@_ \x90V[\x90a\x02\x87`\xFF\x91a\x01KV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x02\x9A\x90a\x02\nV[\x90V[\x90V[\x90a\x02\xB5a\x02\xB0a\x02\xBC\x92a\x02\x91V[a\x02\x9DV[\x82Ta\x02{V[\x90UV[a\x02\xC8a\x02\x06V[Pa\x02\xDDa\x02\xD7\x82\x84\x90a\x03\x97V[\x15a\x02\nV[_\x14a\x03eWa\x03\x04`\x01a\x02\xFF_a\x02\xF7\x81\x86\x90a\x02\x1BV[\x01\x85\x90a\x02eV[a\x02\xA0V[\x90a\x03\ra\x03\xC4V[\x90a\x03Ja\x03Da\x03>\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r\x95a\x02\x0FV[\x92a\x02YV[\x92a\x02YV[\x92a\x03Sa\x004V[\x80a\x03]\x81a\x01CV[\x03\x90\xA4`\x01\x90V[PP_\x90V[_\x1C\x90V[`\xFF\x16\x90V[a\x03\x82a\x03\x87\x91a\x03kV[a\x03pV[\x90V[a\x03\x94\x90Ta\x03vV[\x90V[a\x03\xBD\x91_a\x03\xB2a\x03\xB8\x93a\x03\xABa\x02\x06V[P\x82a\x02\x1BV[\x01a\x02eV[a\x03\x8AV[\x90V[_\x90V[a\x03\xCCa\x03\xC0V[P3\x90V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x07\xAAV[a\0\x1D_5a\0\xFCV[\x80c\x01\xFF\xC9\xA7\x14a\0\xF7W\x80c \xF2 \x89\x14a\0\xF2W\x80c!\x19\xC2\xB0\x14a\0\xEDW\x80c$\x8A\x9C\xA3\x14a\0\xE8W\x80c//\xF1]\x14a\0\xE3W\x80c6V\x8A\xBE\x14a\0\xDEW\x80cdw\rO\x14a\0\xD9W\x80c\x912\rk\x14a\0\xD4W\x80c\x91\xD1HT\x14a\0\xCFW\x80c\xA2\x17\xFD\xDF\x14a\0\xCAW\x80c\xB1\xF2K\x07\x14a\0\xC5W\x80c\xC6j\xB6\"\x14a\0\xC0W\x80c\xD5Gt\x1F\x14a\0\xBBWc\xEC\x87b\x1C\x03a\0\x0EWa\x07uV[a\x07\x12V[a\x06\xDDV[a\x06\x13V[a\x05\xDEV[a\x05^V[a\x05'V[a\x04\xA1V[a\x04\x10V[a\x03\xDCV[a\x03zV[a\x02\xE0V[a\x02\x15V[a\x01\x88V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[c\xFF\xFF\xFF\xFF`\xE0\x1B\x16\x90V[a\x01)\x81a\x01\x14V[\x03a\x010WV[_\x80\xFD[\x90P5\x90a\x01A\x82a\x01 V[V[\x90` \x82\x82\x03\x12a\x01\\Wa\x01Y\x91_\x01a\x014V[\x90V[a\x01\x0CV[\x15\x15\x90V[a\x01o\x90a\x01aV[\x90RV[\x91\x90a\x01\x86\x90_` \x85\x01\x94\x01\x90a\x01fV[V[4a\x01\xB8Wa\x01\xB4a\x01\xA3a\x01\x9E6`\x04a\x01CV[a\x07\xB2V[a\x01\xABa\x01\x02V[\x91\x82\x91\x82a\x01sV[\x03\x90\xF3[a\x01\x08V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01\xD1\x90a\x01\xBDV[\x90V[a\x01\xDD\x81a\x01\xC8V[\x03a\x01\xE4WV[_\x80\xFD[\x90P5\x90a\x01\xF5\x82a\x01\xD4V[V[\x90` \x82\x82\x03\x12a\x02\x10Wa\x02\r\x91_\x01a\x01\xE8V[\x90V[a\x01\x0CV[4a\x02EWa\x02Aa\x020a\x02+6`\x04a\x01\xF7V[a\x08\x18V[a\x028a\x01\x02V[\x91\x82\x91\x82a\x01sV[\x03\x90\xF3[a\x01\x08V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x02\x90W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x02\x8BW` \x01\x92` \x83\x02\x84\x01\x11a\x02\x86WV[a\x02RV[a\x02NV[a\x02JV[\x91\x90\x91`@\x81\x84\x03\x12a\x02\xD6Wa\x02\xAE\x83_\x83\x01a\x01\xE8V[\x92` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\xD1Wa\x02\xCD\x92\x01a\x02VV[\x90\x91V[a\x01\x10V[a\x01\x0CV[_\x01\x90V[4a\x03\x0FWa\x02\xF9a\x02\xF36`\x04a\x02\x95V[\x91a\t\x02V[a\x03\x01a\x01\x02V[\x80a\x03\x0B\x81a\x02\xDBV[\x03\x90\xF3[a\x01\x08V[\x90V[a\x03 \x81a\x03\x14V[\x03a\x03'WV[_\x80\xFD[\x90P5\x90a\x038\x82a\x03\x17V[V[\x90` \x82\x82\x03\x12a\x03SWa\x03P\x91_\x01a\x03+V[\x90V[a\x01\x0CV[a\x03a\x90a\x03\x14V[\x90RV[\x91\x90a\x03x\x90_` \x85\x01\x94\x01\x90a\x03XV[V[4a\x03\xAAWa\x03\xA6a\x03\x95a\x03\x906`\x04a\x03:V[a\tYV[a\x03\x9Da\x01\x02V[\x91\x82\x91\x82a\x03eV[\x03\x90\xF3[a\x01\x08V[\x91\x90`@\x83\x82\x03\x12a\x03\xD7W\x80a\x03\xCBa\x03\xD4\x92_\x86\x01a\x03+V[\x93` \x01a\x01\xE8V[\x90V[a\x01\x0CV[4a\x04\x0BWa\x03\xF5a\x03\xEF6`\x04a\x03\xAFV[\x90a\t\xA4V[a\x03\xFDa\x01\x02V[\x80a\x04\x07\x81a\x02\xDBV[\x03\x90\xF3[a\x01\x08V[4a\x04?Wa\x04)a\x04#6`\x04a\x03\xAFV[\x90a\t\xB0V[a\x041a\x01\x02V[\x80a\x04;\x81a\x02\xDBV[\x03\x90\xF3[a\x01\x08V[a\x04M\x81a\x01aV[\x03a\x04TWV[_\x80\xFD[\x90P5\x90a\x04e\x82a\x04DV[V[\x90\x91``\x82\x84\x03\x12a\x04\x9CWa\x04\x99a\x04\x82\x84_\x85\x01a\x01\xE8V[\x93a\x04\x90\x81` \x86\x01a\x01\xE8V[\x93`@\x01a\x04XV[\x90V[a\x01\x0CV[4a\x04\xD0Wa\x04\xBAa\x04\xB46`\x04a\x04gV[\x91a\n+V[a\x04\xC2a\x01\x02V[\x80a\x04\xCC\x81a\x02\xDBV[\x03\x90\xF3[a\x01\x08V[\x91``\x83\x83\x03\x12a\x05\"Wa\x04\xEC\x82_\x85\x01a\x01\xE8V[\x92a\x04\xFA\x83` \x83\x01a\x04XV[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05\x1DWa\x05\x19\x92\x01a\x02VV[\x90\x91V[a\x01\x10V[a\x01\x0CV[4a\x05YWa\x05Ca\x05:6`\x04a\x04\xD5V[\x92\x91\x90\x91a\nfV[a\x05Ka\x01\x02V[\x80a\x05U\x81a\x02\xDBV[\x03\x90\xF3[a\x01\x08V[4a\x05\x8FWa\x05\x8Ba\x05za\x05t6`\x04a\x03\xAFV[\x90a\ntV[a\x05\x82a\x01\x02V[\x91\x82\x91\x82a\x01sV[\x03\x90\xF3[a\x01\x08V[_\x91\x03\x12a\x05\x9EWV[a\x01\x0CV[\x90V[_\x1B\x90V[a\x05\xBFa\x05\xBAa\x05\xC4\x92a\x05\xA3V[a\x05\xA6V[a\x03\x14V[\x90V[a\x05\xD0_a\x05\xABV[\x90V[a\x05\xDBa\x05\xC7V[\x90V[4a\x06\x0EWa\x05\xEE6`\x04a\x05\x94V[a\x06\na\x05\xF9a\x05\xD3V[a\x06\x01a\x01\x02V[\x91\x82\x91\x82a\x03eV[\x03\x90\xF3[a\x01\x08V[4a\x06BWa\x06,a\x06&6`\x04a\x02\x95V[\x91a\x0B!V[a\x064a\x01\x02V[\x80a\x06>\x81a\x02\xDBV[\x03\x90\xF3[a\x01\x08V[\x90V[a\x06^a\x06Ya\x06c\x92a\x01\xBDV[a\x06GV[a\x01\xBDV[\x90V[a\x06o\x90a\x06JV[\x90V[a\x06{\x90a\x06fV[\x90V[\x90a\x06\x88\x90a\x06rV[_R` R`@_ \x90V[\x1C\x90V[`\xFF\x16\x90V[a\x06\xAE\x90`\x08a\x06\xB3\x93\x02a\x06\x94V[a\x06\x98V[\x90V[\x90a\x06\xC1\x91Ta\x06\x9EV[\x90V[a\x06\xDA\x90a\x06\xD5`\x01\x91_\x92a\x06~V[a\x06\xB6V[\x90V[4a\x07\rWa\x07\ta\x06\xF8a\x06\xF36`\x04a\x01\xF7V[a\x06\xC4V[a\x07\0a\x01\x02V[\x91\x82\x91\x82a\x01sV[\x03\x90\xF3[a\x01\x08V[4a\x07AWa\x07+a\x07%6`\x04a\x03\xAFV[\x90a\x0BXV[a\x073a\x01\x02V[\x80a\x07=\x81a\x02\xDBV[\x03\x90\xF3[a\x01\x08V[\x7F$\x1E\xCF\x16\xD7\x9D\x0F\x8D\xBF\xB9,\xBC\x07\xFE\x17\x84\x04%\x97l\xF0f\x7F\x02/\xE9\x87|\xAA\x83\x1B\x08\x90V[a\x07ra\x07FV[\x90V[4a\x07\xA5Wa\x07\x856`\x04a\x05\x94V[a\x07\xA1a\x07\x90a\x07jV[a\x07\x98a\x01\x02V[\x91\x82\x91\x82a\x03eV[\x03\x90\xF3[a\x01\x08V[_\x80\xFD[_\x90V[a\x07\xBAa\x07\xAEV[P\x80a\x07\xD5a\x07\xCFcye\xDB\x0B`\xE0\x1Ba\x01\x14V[\x91a\x01\x14V[\x14\x90\x81\x15a\x07\xE2W[P\x90V[a\x07\xEC\x91Pa\x0BdV[_a\x07\xDEV[_\x1C\x90V[a\x08\x03a\x08\x08\x91a\x07\xF2V[a\x06\x98V[\x90V[a\x08\x15\x90Ta\x07\xF7V[\x90V[a\x08/a\x084\x91a\x08'a\x07\xAEV[P`\x01a\x06~V[a\x08\x0BV[\x90V[\x90a\x08R\x92\x91a\x08Ma\x08Ha\x07FV[a\x0B\x8AV[a\x08\x99V[V[\x90a\x08``\xFF\x91a\x05\xA6V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x08s\x90a\x01aV[\x90V[\x90V[\x90a\x08\x8Ea\x08\x89a\x08\x95\x92a\x08jV[a\x08vV[\x82Ta\x08TV[\x90UV[\x91a\t\0\x92a\x08\xB4`\x01a\x08\xAF`\x01\x84\x90a\x06~V[a\x08yV[\x80a\x08\xDF\x7F\xFB\xE1\0xLu\x9A\xA4W\x90$\xE6\x8E\x11yro*\xFA\xE2\nz\x95Op\xA1\x8A\xB3\x1F\xBC\x0Fd\x91a\x06rV[\x90a\x08\xE8a\x01\x02V[\x80a\x08\xF2\x81a\x02\xDBV[\x03\x90\xA2\x91`\x01\x90\x91\x92a\x0C\x06V[V[\x90a\t\r\x92\x91a\x087V[V[_\x90V[a\t\x1C\x90a\x03\x14V[\x90V[\x90a\t)\x90a\t\x13V[_R` R`@_ \x90V[\x90V[a\tDa\tI\x91a\x07\xF2V[a\t5V[\x90V[a\tV\x90Ta\t8V[\x90V[`\x01a\tqa\tw\x92a\tja\t\x0FV[P_a\t\x1FV[\x01a\tLV[\x90V[\x90a\t\x95\x91a\t\x90a\t\x8B\x82a\tYV[a\x0B\x8AV[a\t\x97V[V[\x90a\t\xA1\x91a\x0ClV[PV[\x90a\t\xAE\x91a\tzV[V[\x90\x80a\t\xCBa\t\xC5a\t\xC0a\r\x1BV[a\x01\xC8V[\x91a\x01\xC8V[\x03a\t\xDCWa\t\xD9\x91a\r(V[PV[a\t\xE4a\x01\x02V[c3K\xD9\x19`\xE1\x1B\x81R\x80a\t\xFB`\x04\x82\x01a\x02\xDBV[\x03\x90\xFD[\x90a\n\x1A\x92\x91a\n\x15a\n\x10a\x07FV[a\x0B\x8AV[a\n\x1CV[V[\x91a\n)\x92\x91\x90\x91a\x0F\x9CV[V[\x90a\n6\x92\x91a\t\xFFV[V[\x90a\nT\x93\x92\x91a\nOa\nJa\x07FV[a\x0B\x8AV[a\nVV[V[\x91a\nd\x93\x91\x90\x91\x92a\x0C\x06V[V[\x90a\nr\x93\x92\x91a\n8V[V[a\n\x9A\x91_a\n\x8Fa\n\x95\x93a\n\x88a\x07\xAEV[P\x82a\t\x1FV[\x01a\x06~V[a\x08\x0BV[\x90V[\x90a\n\xB8\x92\x91a\n\xB3a\n\xAEa\x07FV[a\x0B\x8AV[a\n\xBAV[V[\x91a\x0B\x1F\x92a\n\xD4_a\n\xCF`\x01\x84\x90a\x06~V[a\x08yV[\x80a\n\xFF\x7F6\x1D3\xFB,\x02v\x15\xB9b\xBE\xD7\x8F\xE0x-\tDK|m7\xFE\xD9\xA5a\x8C\xA0ir}\r\x91a\x06rV[\x90a\x0B\x08a\x01\x02V[\x80a\x0B\x12\x81a\x02\xDBV[\x03\x90\xA2\x91_\x90\x91\x92a\x0C\x06V[V[\x90a\x0B,\x92\x91a\n\x9DV[V[\x90a\x0BI\x91a\x0BDa\x0B?\x82a\tYV[a\x0B\x8AV[a\x0BKV[V[\x90a\x0BU\x91a\r(V[PV[\x90a\x0Bb\x91a\x0B.V[V[a\x0Bla\x07\xAEV[Pa\x0B\x86a\x0B\x80c\x01\xFF\xC9\xA7`\xE0\x1Ba\x01\x14V[\x91a\x01\x14V[\x14\x90V[a\x0B\x9C\x90a\x0B\x96a\r\x1BV[\x90a\x11%V[V[\x90V[a\x0B\xB5a\x0B\xB0a\x0B\xBA\x92a\x05\xA3V[a\x06GV[a\x0B\x9EV[\x90V[`\x01a\x0B\xC9\x91\x01a\x0B\x9EV[\x90V[P\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[\x91\x90\x81\x10\x15a\x0B\xF4W` \x02\x01\x90V[a\x0B\xD0V[5a\x0C\x03\x81a\x01\xD4V[\x90V[\x93\x92\x90\x91a\x0C\x13_a\x0B\xA1V[[\x80a\x0C1a\x0C+a\x0C&\x85\x87\x90a\x0B\xCCV[a\x0B\x9EV[\x91a\x0B\x9EV[\x10\x15a\x0CdWa\x0C_\x90a\x0CZa\x0CRa\x0CM\x85\x87\x85\x91a\x0B\xE4V[a\x0B\xF9V[\x88\x87\x91a\x0F\x9CV[a\x0B\xBDV[a\x0C\x14V[PPPP\x90PV[a\x0Cta\x07\xAEV[Pa\x0C\x89a\x0C\x83\x82\x84\x90a\ntV[\x15a\x01aV[_\x14a\r\x11Wa\x0C\xB0`\x01a\x0C\xAB_a\x0C\xA3\x81\x86\x90a\t\x1FV[\x01\x85\x90a\x06~V[a\x08yV[\x90a\x0C\xB9a\r\x1BV[\x90a\x0C\xF6a\x0C\xF0a\x0C\xEA\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r\x95a\t\x13V[\x92a\x06rV[\x92a\x06rV[\x92a\x0C\xFFa\x01\x02V[\x80a\r\t\x81a\x02\xDBV[\x03\x90\xA4`\x01\x90V[PP_\x90V[_\x90V[a\r#a\r\x17V[P3\x90V[a\r0a\x07\xAEV[Pa\r<\x81\x83\x90a\ntV[_\x14a\r\xC3Wa\rb_a\r]_a\rU\x81\x86\x90a\t\x1FV[\x01\x85\x90a\x06~V[a\x08yV[\x90a\rka\r\x1BV[\x90a\r\xA8a\r\xA2a\r\x9C\x7F\xF69\x1F\\2\xD9\xC6\x9D*G\xEAg\x0BD)t\xB595\xD1\xED\xC7\xFDd\xEB!\xE0G\xA89\x17\x1B\x95a\t\x13V[\x92a\x06rV[\x92a\x06rV[\x92a\r\xB1a\x01\x02V[\x80a\r\xBB\x81a\x02\xDBV[\x03\x90\xA4`\x01\x90V[PP_\x90V[_\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\r\xF5\x90a\r\xCDV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x0E\x0FW`@RV[a\r\xD7V[\x90a\x0E'a\x0E a\x01\x02V[\x92\x83a\r\xEBV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x0EGWa\x0EC` \x91a\r\xCDV[\x01\x90V[a\r\xD7V[\x90a\x0E^a\x0EY\x83a\x0E)V[a\x0E\x14V[\x91\x82RV[_\x7FremoveFromAllowlist(address)\0\0\0\0\x91\x01RV[a\x0E\x94`\x1Ca\x0ELV[\x90a\x0E\xA1` \x83\x01a\x0EcV[V[a\x0E\xABa\x0E\x8AV[\x90V[_\x7FaddToAllowlist(address)\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x0E\xDF`\x17a\x0ELV[\x90a\x0E\xEC` \x83\x01a\x0E\xAEV[V[a\x0E\xF6a\x0E\xD5V[\x90V[\x90V[` \x01\x90V[Q\x90V[a\x0F\x0F\x90a\x01\x14V[\x90V[a\x0F\x1B\x90a\x01\xC8V[\x90RV[\x91\x90a\x0F2\x90_` \x85\x01\x94\x01\x90a\x0F\x12V[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x0FRWa\x0FN` \x91a\r\xCDV[\x01\x90V[a\r\xD7V[\x90a\x0Fia\x0Fd\x83a\x0F4V[a\x0E\x14V[\x91\x82RV[``\x90V[=_\x14a\x0F\x8EWa\x0F\x83=a\x0FWV[\x90=_` \x84\x01>[V[a\x0F\x96a\x0FnV[\x90a\x0F\x8CV[\x91\x90\x91a\x0F\xA7a\r\xC9V[P\x80;a\x0F\xBCa\x0F\xB6_a\x0B\xA1V[\x91a\x0B\x9EV[\x14a\x10\xDFWa\x10V_\x80\x83\x85\x82\x14a\x10\xCDW`\x04a\x10=a\x0F\xDBa\x0E\xEEV[[a\x10.\x8Aa\x10\x16\x87a\x10\x10a\x0F\xF8a\x0F\xF2a\x01\x02V[\x96a\x0E\xF9V[a\x10\na\x10\x04\x82a\x0F\x02V[\x91a\x0E\xFCV[ a\x0F\x06V[\x94a\r\xEBV[a\x10\x1Ea\x01\x02V[\x94\x85\x93` \x85\x01\x90\x81R\x01a\x0F\x1FV[` \x82\x01\x81\x03\x82R\x03\x82a\r\xEBV[\x82` \x82\x01\x91Q\x92Z\xF1a\x10Oa\x0FsV[P\x15a\x01aV[a\x10\xAAW\x91\x90\x91a\x10\xA5a\x10\x93a\x10\x8D\x7F\xF6<\xBA\xB9\xFE\xC8/<,\xE8\x82Fo\xB7\x81N\xDF\x12\x17<\xE74\xE0&H\x92\xBD\xA9_\xA2F\\\x93a\x06rV[\x93a\x06rV[\x93a\x10\x9Ca\x01\x02V[\x91\x82\x91\x82a\x01sV[\x03\x90\xA3V[a\x10\xB2a\x01\x02V[c\x1F.]/`\xE3\x1B\x81R\x80a\x10\xC9`\x04\x82\x01a\x02\xDBV[\x03\x90\xFD[`\x04a\x10=a\x10\xDAa\x0E\xA3V[a\x0F\xDCV[a\x10\xE7a\x01\x02V[c\x1F.]/`\xE3\x1B\x81R\x80a\x10\xFE`\x04\x82\x01a\x02\xDBV[\x03\x90\xFD[\x91` a\x11#\x92\x94\x93a\x11\x1C`@\x82\x01\x96_\x83\x01\x90a\x0F\x12V[\x01\x90a\x03XV[V[\x90a\x11:a\x114\x83\x83\x90a\ntV[\x15a\x01aV[a\x11BWPPV[a\x11ca\x11Ma\x01\x02V[\x92\x83\x92c\xE2Q}?`\xE0\x1B\x84R`\x04\x84\x01a\x11\x02V[\x03\x90\xFD\xFE\xA2dipfsX\"\x12 \x16\x1E\x92\x8F\xBB\xD8}\\\xA5W\xED9&\xC2\x01\xDAlwZyX\x16\xA8f\x96\xAEkiEea\xCDdsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b6107aa565b61001d5f356100fc565b806301ffc9a7146100f757806320f22089146100f25780632119c2b0146100ed578063248a9ca3146100e85780632f2ff15d146100e357806336568abe146100de57806364770d4f146100d957806391320d6b146100d457806391d14854146100cf578063a217fddf146100ca578063b1f24b07146100c5578063c66ab622146100c0578063d547741f146100bb5763ec87621c0361000e57610775565b610712565b6106dd565b610613565b6105de565b61055e565b610527565b6104a1565b610410565b6103dc565b61037a565b6102e0565b610215565b610188565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b63ffffffff60e01b1690565b61012981610114565b0361013057565b5f80fd5b9050359061014182610120565b565b9060208282031261015c57610159915f01610134565b90565b61010c565b151590565b61016f90610161565b9052565b9190610186905f60208501940190610166565b565b346101b8576101b46101a361019e366004610143565b6107b2565b6101ab610102565b91829182610173565b0390f35b610108565b60018060a01b031690565b6101d1906101bd565b90565b6101dd816101c8565b036101e457565b5f80fd5b905035906101f5826101d4565b565b906020828203126102105761020d915f016101e8565b90565b61010c565b346102455761024161023061022b3660046101f7565b610818565b610238610102565b91829182610173565b0390f35b610108565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156102905781359167ffffffffffffffff831161028b57602001926020830284011161028657565b610252565b61024e565b61024a565b9190916040818403126102d6576102ae835f83016101e8565b92602082013567ffffffffffffffff81116102d1576102cd9201610256565b9091565b610110565b61010c565b5f0190565b3461030f576102f96102f3366004610295565b91610902565b610301610102565b8061030b816102db565b0390f35b610108565b90565b61032081610314565b0361032757565b5f80fd5b9050359061033882610317565b565b9060208282031261035357610350915f0161032b565b90565b61010c565b61036190610314565b9052565b9190610378905f60208501940190610358565b565b346103aa576103a661039561039036600461033a565b610959565b61039d610102565b91829182610365565b0390f35b610108565b91906040838203126103d757806103cb6103d4925f860161032b565b936020016101e8565b90565b61010c565b3461040b576103f56103ef3660046103af565b906109a4565b6103fd610102565b80610407816102db565b0390f35b610108565b3461043f576104296104233660046103af565b906109b0565b610431610102565b8061043b816102db565b0390f35b610108565b61044d81610161565b0361045457565b5f80fd5b9050359061046582610444565b565b909160608284031261049c57610499610482845f85016101e8565b9361049081602086016101e8565b93604001610458565b90565b61010c565b346104d0576104ba6104b4366004610467565b91610a2b565b6104c2610102565b806104cc816102db565b0390f35b610108565b91606083830312610522576104ec825f85016101e8565b926104fa8360208301610458565b92604082013567ffffffffffffffff811161051d576105199201610256565b9091565b610110565b61010c565b346105595761054361053a3660046104d5565b92919091610a66565b61054b610102565b80610555816102db565b0390f35b610108565b3461058f5761058b61057a6105743660046103af565b90610a74565b610582610102565b91829182610173565b0390f35b610108565b5f91031261059e57565b61010c565b90565b5f1b90565b6105bf6105ba6105c4926105a3565b6105a6565b610314565b90565b6105d05f6105ab565b90565b6105db6105c7565b90565b3461060e576105ee366004610594565b61060a6105f96105d3565b610601610102565b91829182610365565b0390f35b610108565b346106425761062c610626366004610295565b91610b21565b610634610102565b8061063e816102db565b0390f35b610108565b90565b61065e610659610663926101bd565b610647565b6101bd565b90565b61066f9061064a565b90565b61067b90610666565b90565b9061068890610672565b5f5260205260405f2090565b1c90565b60ff1690565b6106ae9060086106b39302610694565b610698565b90565b906106c1915461069e565b90565b6106da906106d56001915f9261067e565b6106b6565b90565b3461070d576107096106f86106f33660046101f7565b6106c4565b610700610102565b91829182610173565b0390f35b610108565b346107415761072b6107253660046103af565b90610b58565b610733610102565b8061073d816102db565b0390f35b610108565b7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0890565b610772610746565b90565b346107a557610785366004610594565b6107a161079061076a565b610798610102565b91829182610365565b0390f35b610108565b5f80fd5b5f90565b6107ba6107ae565b50806107d56107cf637965db0b60e01b610114565b91610114565b149081156107e2575b5090565b6107ec9150610b64565b5f6107de565b5f1c90565b610803610808916107f2565b610698565b90565b61081590546107f7565b90565b61082f610834916108276107ae565b50600161067e565b61080b565b90565b90610852929161084d610848610746565b610b8a565b610899565b565b9061086060ff916105a6565b9181191691161790565b61087390610161565b90565b90565b9061088e6108896108959261086a565b610876565b8254610854565b9055565b91610900926108b460016108af6001849061067e565b610879565b806108df7ffbe100784c759aa4579024e68e1179726f2afae20a7a954f70a18ab31fbc0f6491610672565b906108e8610102565b806108f2816102db565b0390a2916001909192610c06565b565b9061090d9291610837565b565b5f90565b61091c90610314565b90565b9061092990610913565b5f5260205260405f2090565b90565b610944610949916107f2565b610935565b90565b6109569054610938565b90565b60016109716109779261096a61090f565b505f61091f565b0161094c565b90565b906109959161099061098b82610959565b610b8a565b610997565b565b906109a191610c6c565b50565b906109ae9161097a565b565b90806109cb6109c56109c0610d1b565b6101c8565b916101c8565b036109dc576109d991610d28565b50565b6109e4610102565b63334bd91960e11b8152806109fb600482016102db565b0390fd5b90610a1a9291610a15610a10610746565b610b8a565b610a1c565b565b91610a2992919091610f9c565b565b90610a3692916109ff565b565b90610a54939291610a4f610a4a610746565b610b8a565b610a56565b565b91610a649391909192610c06565b565b90610a72939291610a38565b565b610a9a915f610a8f610a9593610a886107ae565b508261091f565b0161067e565b61080b565b90565b90610ab89291610ab3610aae610746565b610b8a565b610aba565b565b91610b1f92610ad45f610acf6001849061067e565b610879565b80610aff7f361d33fb2c027615b962bed78fe0782d09444b7c6d37fed9a5618ca069727d0d91610672565b90610b08610102565b80610b12816102db565b0390a2915f909192610c06565b565b90610b2c9291610a9d565b565b90610b4991610b44610b3f82610959565b610b8a565b610b4b565b565b90610b5591610d28565b50565b90610b6291610b2e565b565b610b6c6107ae565b50610b86610b806301ffc9a760e01b610114565b91610114565b1490565b610b9c90610b96610d1b565b90611125565b565b90565b610bb5610bb0610bba926105a3565b610647565b610b9e565b90565b6001610bc99101610b9e565b90565b5090565b634e487b7160e01b5f52603260045260245ffd5b9190811015610bf4576020020190565b610bd0565b35610c03816101d4565b90565b93929091610c135f610ba1565b5b80610c31610c2b610c26858790610bcc565b610b9e565b91610b9e565b1015610c6457610c5f90610c5a610c52610c4d85878591610be4565b610bf9565b888791610f9c565b610bbd565b610c14565b505050509050565b610c746107ae565b50610c89610c83828490610a74565b15610161565b5f14610d1157610cb06001610cab5f610ca381869061091f565b01859061067e565b610879565b90610cb9610d1b565b90610cf6610cf0610cea7f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d95610913565b92610672565b92610672565b92610cff610102565b80610d09816102db565b0390a4600190565b50505f90565b5f90565b610d23610d17565b503390565b610d306107ae565b50610d3c818390610a74565b5f14610dc357610d625f610d5d5f610d5581869061091f565b01859061067e565b610879565b90610d6b610d1b565b90610da8610da2610d9c7ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b95610913565b92610672565b92610672565b92610db1610102565b80610dbb816102db565b0390a4600190565b50505f90565b5f90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b90610df590610dcd565b810190811067ffffffffffffffff821117610e0f57604052565b610dd7565b90610e27610e20610102565b9283610deb565b565b67ffffffffffffffff8111610e4757610e43602091610dcd565b0190565b610dd7565b90610e5e610e5983610e29565b610e14565b918252565b5f7f72656d6f766546726f6d416c6c6f776c69737428616464726573732900000000910152565b610e94601c610e4c565b90610ea160208301610e63565b565b610eab610e8a565b90565b5f7f616464546f416c6c6f776c697374286164647265737329000000000000000000910152565b610edf6017610e4c565b90610eec60208301610eae565b565b610ef6610ed5565b90565b90565b60200190565b5190565b610f0f90610114565b90565b610f1b906101c8565b9052565b9190610f32905f60208501940190610f12565b565b67ffffffffffffffff8111610f5257610f4e602091610dcd565b0190565b610dd7565b90610f69610f6483610f34565b610e14565b918252565b606090565b3d5f14610f8e57610f833d610f57565b903d5f602084013e5b565b610f96610f6e565b90610f8c565b919091610fa7610dc9565b50803b610fbc610fb65f610ba1565b91610b9e565b146110df576110565f80838582146110cd57600461103d610fdb610eee565b5b61102e8a61101687611010610ff8610ff2610102565b96610ef9565b61100a61100482610f02565b91610efc565b20610f06565b94610deb565b61101e610102565b9485936020850190815201610f1f565b60208201810382520382610deb565b82602082019151925af161104f610f73565b5015610161565b6110aa579190916110a561109361108d7ff63cbab9fec82f3c2ce882466fb7814edf12173ce734e0264892bda95fa2465c93610672565b93610672565b9361109c610102565b91829182610173565b0390a3565b6110b2610102565b631f2e5d2f60e31b8152806110c9600482016102db565b0390fd5b600461103d6110da610ea3565b610fdc565b6110e7610102565b631f2e5d2f60e31b8152806110fe600482016102db565b0390fd5b91602061112392949361111c60408201965f830190610f12565b0190610358565b565b9061113a611134838390610a74565b15610161565b611142575050565b61116361114d610102565b92839263e2517d3f60e01b845260048401611102565b0390fdfea2646970667358221220161e928fbbd87d5ca557ed3926c201da6c775a795816a86696ae6b69456561cd64736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x07\xAAV[a\0\x1D_5a\0\xFCV[\x80c\x01\xFF\xC9\xA7\x14a\0\xF7W\x80c \xF2 \x89\x14a\0\xF2W\x80c!\x19\xC2\xB0\x14a\0\xEDW\x80c$\x8A\x9C\xA3\x14a\0\xE8W\x80c//\xF1]\x14a\0\xE3W\x80c6V\x8A\xBE\x14a\0\xDEW\x80cdw\rO\x14a\0\xD9W\x80c\x912\rk\x14a\0\xD4W\x80c\x91\xD1HT\x14a\0\xCFW\x80c\xA2\x17\xFD\xDF\x14a\0\xCAW\x80c\xB1\xF2K\x07\x14a\0\xC5W\x80c\xC6j\xB6\"\x14a\0\xC0W\x80c\xD5Gt\x1F\x14a\0\xBBWc\xEC\x87b\x1C\x03a\0\x0EWa\x07uV[a\x07\x12V[a\x06\xDDV[a\x06\x13V[a\x05\xDEV[a\x05^V[a\x05'V[a\x04\xA1V[a\x04\x10V[a\x03\xDCV[a\x03zV[a\x02\xE0V[a\x02\x15V[a\x01\x88V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[c\xFF\xFF\xFF\xFF`\xE0\x1B\x16\x90V[a\x01)\x81a\x01\x14V[\x03a\x010WV[_\x80\xFD[\x90P5\x90a\x01A\x82a\x01 V[V[\x90` \x82\x82\x03\x12a\x01\\Wa\x01Y\x91_\x01a\x014V[\x90V[a\x01\x0CV[\x15\x15\x90V[a\x01o\x90a\x01aV[\x90RV[\x91\x90a\x01\x86\x90_` \x85\x01\x94\x01\x90a\x01fV[V[4a\x01\xB8Wa\x01\xB4a\x01\xA3a\x01\x9E6`\x04a\x01CV[a\x07\xB2V[a\x01\xABa\x01\x02V[\x91\x82\x91\x82a\x01sV[\x03\x90\xF3[a\x01\x08V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01\xD1\x90a\x01\xBDV[\x90V[a\x01\xDD\x81a\x01\xC8V[\x03a\x01\xE4WV[_\x80\xFD[\x90P5\x90a\x01\xF5\x82a\x01\xD4V[V[\x90` \x82\x82\x03\x12a\x02\x10Wa\x02\r\x91_\x01a\x01\xE8V[\x90V[a\x01\x0CV[4a\x02EWa\x02Aa\x020a\x02+6`\x04a\x01\xF7V[a\x08\x18V[a\x028a\x01\x02V[\x91\x82\x91\x82a\x01sV[\x03\x90\xF3[a\x01\x08V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x02\x90W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x02\x8BW` \x01\x92` \x83\x02\x84\x01\x11a\x02\x86WV[a\x02RV[a\x02NV[a\x02JV[\x91\x90\x91`@\x81\x84\x03\x12a\x02\xD6Wa\x02\xAE\x83_\x83\x01a\x01\xE8V[\x92` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\xD1Wa\x02\xCD\x92\x01a\x02VV[\x90\x91V[a\x01\x10V[a\x01\x0CV[_\x01\x90V[4a\x03\x0FWa\x02\xF9a\x02\xF36`\x04a\x02\x95V[\x91a\t\x02V[a\x03\x01a\x01\x02V[\x80a\x03\x0B\x81a\x02\xDBV[\x03\x90\xF3[a\x01\x08V[\x90V[a\x03 \x81a\x03\x14V[\x03a\x03'WV[_\x80\xFD[\x90P5\x90a\x038\x82a\x03\x17V[V[\x90` \x82\x82\x03\x12a\x03SWa\x03P\x91_\x01a\x03+V[\x90V[a\x01\x0CV[a\x03a\x90a\x03\x14V[\x90RV[\x91\x90a\x03x\x90_` \x85\x01\x94\x01\x90a\x03XV[V[4a\x03\xAAWa\x03\xA6a\x03\x95a\x03\x906`\x04a\x03:V[a\tYV[a\x03\x9Da\x01\x02V[\x91\x82\x91\x82a\x03eV[\x03\x90\xF3[a\x01\x08V[\x91\x90`@\x83\x82\x03\x12a\x03\xD7W\x80a\x03\xCBa\x03\xD4\x92_\x86\x01a\x03+V[\x93` \x01a\x01\xE8V[\x90V[a\x01\x0CV[4a\x04\x0BWa\x03\xF5a\x03\xEF6`\x04a\x03\xAFV[\x90a\t\xA4V[a\x03\xFDa\x01\x02V[\x80a\x04\x07\x81a\x02\xDBV[\x03\x90\xF3[a\x01\x08V[4a\x04?Wa\x04)a\x04#6`\x04a\x03\xAFV[\x90a\t\xB0V[a\x041a\x01\x02V[\x80a\x04;\x81a\x02\xDBV[\x03\x90\xF3[a\x01\x08V[a\x04M\x81a\x01aV[\x03a\x04TWV[_\x80\xFD[\x90P5\x90a\x04e\x82a\x04DV[V[\x90\x91``\x82\x84\x03\x12a\x04\x9CWa\x04\x99a\x04\x82\x84_\x85\x01a\x01\xE8V[\x93a\x04\x90\x81` \x86\x01a\x01\xE8V[\x93`@\x01a\x04XV[\x90V[a\x01\x0CV[4a\x04\xD0Wa\x04\xBAa\x04\xB46`\x04a\x04gV[\x91a\n+V[a\x04\xC2a\x01\x02V[\x80a\x04\xCC\x81a\x02\xDBV[\x03\x90\xF3[a\x01\x08V[\x91``\x83\x83\x03\x12a\x05\"Wa\x04\xEC\x82_\x85\x01a\x01\xE8V[\x92a\x04\xFA\x83` \x83\x01a\x04XV[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05\x1DWa\x05\x19\x92\x01a\x02VV[\x90\x91V[a\x01\x10V[a\x01\x0CV[4a\x05YWa\x05Ca\x05:6`\x04a\x04\xD5V[\x92\x91\x90\x91a\nfV[a\x05Ka\x01\x02V[\x80a\x05U\x81a\x02\xDBV[\x03\x90\xF3[a\x01\x08V[4a\x05\x8FWa\x05\x8Ba\x05za\x05t6`\x04a\x03\xAFV[\x90a\ntV[a\x05\x82a\x01\x02V[\x91\x82\x91\x82a\x01sV[\x03\x90\xF3[a\x01\x08V[_\x91\x03\x12a\x05\x9EWV[a\x01\x0CV[\x90V[_\x1B\x90V[a\x05\xBFa\x05\xBAa\x05\xC4\x92a\x05\xA3V[a\x05\xA6V[a\x03\x14V[\x90V[a\x05\xD0_a\x05\xABV[\x90V[a\x05\xDBa\x05\xC7V[\x90V[4a\x06\x0EWa\x05\xEE6`\x04a\x05\x94V[a\x06\na\x05\xF9a\x05\xD3V[a\x06\x01a\x01\x02V[\x91\x82\x91\x82a\x03eV[\x03\x90\xF3[a\x01\x08V[4a\x06BWa\x06,a\x06&6`\x04a\x02\x95V[\x91a\x0B!V[a\x064a\x01\x02V[\x80a\x06>\x81a\x02\xDBV[\x03\x90\xF3[a\x01\x08V[\x90V[a\x06^a\x06Ya\x06c\x92a\x01\xBDV[a\x06GV[a\x01\xBDV[\x90V[a\x06o\x90a\x06JV[\x90V[a\x06{\x90a\x06fV[\x90V[\x90a\x06\x88\x90a\x06rV[_R` R`@_ \x90V[\x1C\x90V[`\xFF\x16\x90V[a\x06\xAE\x90`\x08a\x06\xB3\x93\x02a\x06\x94V[a\x06\x98V[\x90V[\x90a\x06\xC1\x91Ta\x06\x9EV[\x90V[a\x06\xDA\x90a\x06\xD5`\x01\x91_\x92a\x06~V[a\x06\xB6V[\x90V[4a\x07\rWa\x07\ta\x06\xF8a\x06\xF36`\x04a\x01\xF7V[a\x06\xC4V[a\x07\0a\x01\x02V[\x91\x82\x91\x82a\x01sV[\x03\x90\xF3[a\x01\x08V[4a\x07AWa\x07+a\x07%6`\x04a\x03\xAFV[\x90a\x0BXV[a\x073a\x01\x02V[\x80a\x07=\x81a\x02\xDBV[\x03\x90\xF3[a\x01\x08V[\x7F$\x1E\xCF\x16\xD7\x9D\x0F\x8D\xBF\xB9,\xBC\x07\xFE\x17\x84\x04%\x97l\xF0f\x7F\x02/\xE9\x87|\xAA\x83\x1B\x08\x90V[a\x07ra\x07FV[\x90V[4a\x07\xA5Wa\x07\x856`\x04a\x05\x94V[a\x07\xA1a\x07\x90a\x07jV[a\x07\x98a\x01\x02V[\x91\x82\x91\x82a\x03eV[\x03\x90\xF3[a\x01\x08V[_\x80\xFD[_\x90V[a\x07\xBAa\x07\xAEV[P\x80a\x07\xD5a\x07\xCFcye\xDB\x0B`\xE0\x1Ba\x01\x14V[\x91a\x01\x14V[\x14\x90\x81\x15a\x07\xE2W[P\x90V[a\x07\xEC\x91Pa\x0BdV[_a\x07\xDEV[_\x1C\x90V[a\x08\x03a\x08\x08\x91a\x07\xF2V[a\x06\x98V[\x90V[a\x08\x15\x90Ta\x07\xF7V[\x90V[a\x08/a\x084\x91a\x08'a\x07\xAEV[P`\x01a\x06~V[a\x08\x0BV[\x90V[\x90a\x08R\x92\x91a\x08Ma\x08Ha\x07FV[a\x0B\x8AV[a\x08\x99V[V[\x90a\x08``\xFF\x91a\x05\xA6V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x08s\x90a\x01aV[\x90V[\x90V[\x90a\x08\x8Ea\x08\x89a\x08\x95\x92a\x08jV[a\x08vV[\x82Ta\x08TV[\x90UV[\x91a\t\0\x92a\x08\xB4`\x01a\x08\xAF`\x01\x84\x90a\x06~V[a\x08yV[\x80a\x08\xDF\x7F\xFB\xE1\0xLu\x9A\xA4W\x90$\xE6\x8E\x11yro*\xFA\xE2\nz\x95Op\xA1\x8A\xB3\x1F\xBC\x0Fd\x91a\x06rV[\x90a\x08\xE8a\x01\x02V[\x80a\x08\xF2\x81a\x02\xDBV[\x03\x90\xA2\x91`\x01\x90\x91\x92a\x0C\x06V[V[\x90a\t\r\x92\x91a\x087V[V[_\x90V[a\t\x1C\x90a\x03\x14V[\x90V[\x90a\t)\x90a\t\x13V[_R` R`@_ \x90V[\x90V[a\tDa\tI\x91a\x07\xF2V[a\t5V[\x90V[a\tV\x90Ta\t8V[\x90V[`\x01a\tqa\tw\x92a\tja\t\x0FV[P_a\t\x1FV[\x01a\tLV[\x90V[\x90a\t\x95\x91a\t\x90a\t\x8B\x82a\tYV[a\x0B\x8AV[a\t\x97V[V[\x90a\t\xA1\x91a\x0ClV[PV[\x90a\t\xAE\x91a\tzV[V[\x90\x80a\t\xCBa\t\xC5a\t\xC0a\r\x1BV[a\x01\xC8V[\x91a\x01\xC8V[\x03a\t\xDCWa\t\xD9\x91a\r(V[PV[a\t\xE4a\x01\x02V[c3K\xD9\x19`\xE1\x1B\x81R\x80a\t\xFB`\x04\x82\x01a\x02\xDBV[\x03\x90\xFD[\x90a\n\x1A\x92\x91a\n\x15a\n\x10a\x07FV[a\x0B\x8AV[a\n\x1CV[V[\x91a\n)\x92\x91\x90\x91a\x0F\x9CV[V[\x90a\n6\x92\x91a\t\xFFV[V[\x90a\nT\x93\x92\x91a\nOa\nJa\x07FV[a\x0B\x8AV[a\nVV[V[\x91a\nd\x93\x91\x90\x91\x92a\x0C\x06V[V[\x90a\nr\x93\x92\x91a\n8V[V[a\n\x9A\x91_a\n\x8Fa\n\x95\x93a\n\x88a\x07\xAEV[P\x82a\t\x1FV[\x01a\x06~V[a\x08\x0BV[\x90V[\x90a\n\xB8\x92\x91a\n\xB3a\n\xAEa\x07FV[a\x0B\x8AV[a\n\xBAV[V[\x91a\x0B\x1F\x92a\n\xD4_a\n\xCF`\x01\x84\x90a\x06~V[a\x08yV[\x80a\n\xFF\x7F6\x1D3\xFB,\x02v\x15\xB9b\xBE\xD7\x8F\xE0x-\tDK|m7\xFE\xD9\xA5a\x8C\xA0ir}\r\x91a\x06rV[\x90a\x0B\x08a\x01\x02V[\x80a\x0B\x12\x81a\x02\xDBV[\x03\x90\xA2\x91_\x90\x91\x92a\x0C\x06V[V[\x90a\x0B,\x92\x91a\n\x9DV[V[\x90a\x0BI\x91a\x0BDa\x0B?\x82a\tYV[a\x0B\x8AV[a\x0BKV[V[\x90a\x0BU\x91a\r(V[PV[\x90a\x0Bb\x91a\x0B.V[V[a\x0Bla\x07\xAEV[Pa\x0B\x86a\x0B\x80c\x01\xFF\xC9\xA7`\xE0\x1Ba\x01\x14V[\x91a\x01\x14V[\x14\x90V[a\x0B\x9C\x90a\x0B\x96a\r\x1BV[\x90a\x11%V[V[\x90V[a\x0B\xB5a\x0B\xB0a\x0B\xBA\x92a\x05\xA3V[a\x06GV[a\x0B\x9EV[\x90V[`\x01a\x0B\xC9\x91\x01a\x0B\x9EV[\x90V[P\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[\x91\x90\x81\x10\x15a\x0B\xF4W` \x02\x01\x90V[a\x0B\xD0V[5a\x0C\x03\x81a\x01\xD4V[\x90V[\x93\x92\x90\x91a\x0C\x13_a\x0B\xA1V[[\x80a\x0C1a\x0C+a\x0C&\x85\x87\x90a\x0B\xCCV[a\x0B\x9EV[\x91a\x0B\x9EV[\x10\x15a\x0CdWa\x0C_\x90a\x0CZa\x0CRa\x0CM\x85\x87\x85\x91a\x0B\xE4V[a\x0B\xF9V[\x88\x87\x91a\x0F\x9CV[a\x0B\xBDV[a\x0C\x14V[PPPP\x90PV[a\x0Cta\x07\xAEV[Pa\x0C\x89a\x0C\x83\x82\x84\x90a\ntV[\x15a\x01aV[_\x14a\r\x11Wa\x0C\xB0`\x01a\x0C\xAB_a\x0C\xA3\x81\x86\x90a\t\x1FV[\x01\x85\x90a\x06~V[a\x08yV[\x90a\x0C\xB9a\r\x1BV[\x90a\x0C\xF6a\x0C\xF0a\x0C\xEA\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r\x95a\t\x13V[\x92a\x06rV[\x92a\x06rV[\x92a\x0C\xFFa\x01\x02V[\x80a\r\t\x81a\x02\xDBV[\x03\x90\xA4`\x01\x90V[PP_\x90V[_\x90V[a\r#a\r\x17V[P3\x90V[a\r0a\x07\xAEV[Pa\r<\x81\x83\x90a\ntV[_\x14a\r\xC3Wa\rb_a\r]_a\rU\x81\x86\x90a\t\x1FV[\x01\x85\x90a\x06~V[a\x08yV[\x90a\rka\r\x1BV[\x90a\r\xA8a\r\xA2a\r\x9C\x7F\xF69\x1F\\2\xD9\xC6\x9D*G\xEAg\x0BD)t\xB595\xD1\xED\xC7\xFDd\xEB!\xE0G\xA89\x17\x1B\x95a\t\x13V[\x92a\x06rV[\x92a\x06rV[\x92a\r\xB1a\x01\x02V[\x80a\r\xBB\x81a\x02\xDBV[\x03\x90\xA4`\x01\x90V[PP_\x90V[_\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\r\xF5\x90a\r\xCDV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x0E\x0FW`@RV[a\r\xD7V[\x90a\x0E'a\x0E a\x01\x02V[\x92\x83a\r\xEBV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x0EGWa\x0EC` \x91a\r\xCDV[\x01\x90V[a\r\xD7V[\x90a\x0E^a\x0EY\x83a\x0E)V[a\x0E\x14V[\x91\x82RV[_\x7FremoveFromAllowlist(address)\0\0\0\0\x91\x01RV[a\x0E\x94`\x1Ca\x0ELV[\x90a\x0E\xA1` \x83\x01a\x0EcV[V[a\x0E\xABa\x0E\x8AV[\x90V[_\x7FaddToAllowlist(address)\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x0E\xDF`\x17a\x0ELV[\x90a\x0E\xEC` \x83\x01a\x0E\xAEV[V[a\x0E\xF6a\x0E\xD5V[\x90V[\x90V[` \x01\x90V[Q\x90V[a\x0F\x0F\x90a\x01\x14V[\x90V[a\x0F\x1B\x90a\x01\xC8V[\x90RV[\x91\x90a\x0F2\x90_` \x85\x01\x94\x01\x90a\x0F\x12V[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x0FRWa\x0FN` \x91a\r\xCDV[\x01\x90V[a\r\xD7V[\x90a\x0Fia\x0Fd\x83a\x0F4V[a\x0E\x14V[\x91\x82RV[``\x90V[=_\x14a\x0F\x8EWa\x0F\x83=a\x0FWV[\x90=_` \x84\x01>[V[a\x0F\x96a\x0FnV[\x90a\x0F\x8CV[\x91\x90\x91a\x0F\xA7a\r\xC9V[P\x80;a\x0F\xBCa\x0F\xB6_a\x0B\xA1V[\x91a\x0B\x9EV[\x14a\x10\xDFWa\x10V_\x80\x83\x85\x82\x14a\x10\xCDW`\x04a\x10=a\x0F\xDBa\x0E\xEEV[[a\x10.\x8Aa\x10\x16\x87a\x10\x10a\x0F\xF8a\x0F\xF2a\x01\x02V[\x96a\x0E\xF9V[a\x10\na\x10\x04\x82a\x0F\x02V[\x91a\x0E\xFCV[ a\x0F\x06V[\x94a\r\xEBV[a\x10\x1Ea\x01\x02V[\x94\x85\x93` \x85\x01\x90\x81R\x01a\x0F\x1FV[` \x82\x01\x81\x03\x82R\x03\x82a\r\xEBV[\x82` \x82\x01\x91Q\x92Z\xF1a\x10Oa\x0FsV[P\x15a\x01aV[a\x10\xAAW\x91\x90\x91a\x10\xA5a\x10\x93a\x10\x8D\x7F\xF6<\xBA\xB9\xFE\xC8/<,\xE8\x82Fo\xB7\x81N\xDF\x12\x17<\xE74\xE0&H\x92\xBD\xA9_\xA2F\\\x93a\x06rV[\x93a\x06rV[\x93a\x10\x9Ca\x01\x02V[\x91\x82\x91\x82a\x01sV[\x03\x90\xA3V[a\x10\xB2a\x01\x02V[c\x1F.]/`\xE3\x1B\x81R\x80a\x10\xC9`\x04\x82\x01a\x02\xDBV[\x03\x90\xFD[`\x04a\x10=a\x10\xDAa\x0E\xA3V[a\x0F\xDCV[a\x10\xE7a\x01\x02V[c\x1F.]/`\xE3\x1B\x81R\x80a\x10\xFE`\x04\x82\x01a\x02\xDBV[\x03\x90\xFD[\x91` a\x11#\x92\x94\x93a\x11\x1C`@\x82\x01\x96_\x83\x01\x90a\x0F\x12V[\x01\x90a\x03XV[V[\x90a\x11:a\x114\x83\x83\x90a\ntV[\x15a\x01aV[a\x11BWPPV[a\x11ca\x11Ma\x01\x02V[\x92\x83\x92c\xE2Q}?`\xE0\x1B\x84R`\x04\x84\x01a\x11\x02V[\x03\x90\xFD\xFE\xA2dipfsX\"\x12 \x16\x1E\x92\x8F\xBB\xD8}\\\xA5W\xED9&\xC2\x01\xDAlwZyX\x16\xA8f\x96\xAEkiEea\xCDdsolcC\0\x08\x19\x003",
    );
    /**Custom error with signature `AccessControlBadConfirmation()` and selector `0x6697b232`.
```solidity
error AccessControlBadConfirmation();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AccessControlBadConfirmation {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AccessControlBadConfirmation>
        for UnderlyingRustTuple<'_> {
            fn from(value: AccessControlBadConfirmation) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for AccessControlBadConfirmation {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AccessControlBadConfirmation {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AccessControlBadConfirmation()";
            const SELECTOR: [u8; 4] = [102u8, 151u8, 178u8, 50u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `AccessControlUnauthorizedAccount(address,bytes32)` and selector `0xe2517d3f`.
```solidity
error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AccessControlUnauthorizedAccount {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub neededRole: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AccessControlUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: AccessControlUnauthorizedAccount) -> Self {
                (value.account, value.neededRole)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for AccessControlUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    account: tuple.0,
                    neededRole: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AccessControlUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AccessControlUnauthorizedAccount(address,bytes32)";
            const SELECTOR: [u8; 4] = [226u8, 81u8, 125u8, 63u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.neededRole),
                )
            }
        }
    };
    /**Custom error with signature `AddressNotAllowed()` and selector `0x2b53784e`.
```solidity
error AddressNotAllowed();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AddressNotAllowed {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AddressNotAllowed> for UnderlyingRustTuple<'_> {
            fn from(value: AddressNotAllowed) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AddressNotAllowed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AddressNotAllowed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AddressNotAllowed()";
            const SELECTOR: [u8; 4] = [43u8, 83u8, 120u8, 78u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `AllowlistUpdateFailed()` and selector `0xf972e978`.
```solidity
error AllowlistUpdateFailed();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AllowlistUpdateFailed {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AllowlistUpdateFailed> for UnderlyingRustTuple<'_> {
            fn from(value: AllowlistUpdateFailed) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AllowlistUpdateFailed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AllowlistUpdateFailed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AllowlistUpdateFailed()";
            const SELECTOR: [u8; 4] = [249u8, 114u8, 233u8, 120u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Event with signature `AllowlistModuleUpdated(address,address,bool)` and selector `0xf63cbab9fec82f3c2ce882466fb7814edf12173ce734e0264892bda95fa2465c`.
```solidity
event AllowlistModuleUpdated(address indexed module, address indexed wallet, bool isAllowed);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct AllowlistModuleUpdated {
        #[allow(missing_docs)]
        pub module: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub wallet: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub isAllowed: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for AllowlistModuleUpdated {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "AllowlistModuleUpdated(address,address,bool)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                246u8,
                60u8,
                186u8,
                185u8,
                254u8,
                200u8,
                47u8,
                60u8,
                44u8,
                232u8,
                130u8,
                70u8,
                111u8,
                183u8,
                129u8,
                78u8,
                223u8,
                18u8,
                23u8,
                60u8,
                231u8,
                52u8,
                224u8,
                38u8,
                72u8,
                146u8,
                189u8,
                169u8,
                95u8,
                162u8,
                70u8,
                92u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    module: topics.1,
                    wallet: topics.2,
                    isAllowed: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.isAllowed,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.module.clone(), self.wallet.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.module,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.wallet,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for AllowlistModuleUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&AllowlistModuleUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &AllowlistModuleUpdated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RoleAdminChanged(bytes32,bytes32,bytes32)` and selector `0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff`.
```solidity
event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleAdminChanged {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub previousAdminRole: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub newAdminRole: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleAdminChanged {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            const SIGNATURE: &'static str = "RoleAdminChanged(bytes32,bytes32,bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                189u8,
                121u8,
                184u8,
                111u8,
                254u8,
                10u8,
                184u8,
                232u8,
                119u8,
                97u8,
                81u8,
                81u8,
                66u8,
                23u8,
                205u8,
                124u8,
                172u8,
                213u8,
                44u8,
                144u8,
                159u8,
                102u8,
                71u8,
                92u8,
                58u8,
                244u8,
                78u8,
                18u8,
                159u8,
                11u8,
                0u8,
                255u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    previousAdminRole: topics.2,
                    newAdminRole: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.previousAdminRole.clone(),
                    self.newAdminRole.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.previousAdminRole);
                out[3usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.newAdminRole);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleAdminChanged {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleAdminChanged> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleAdminChanged) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RoleGranted(bytes32,address,address)` and selector `0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d`.
```solidity
event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleGranted {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleGranted {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RoleGranted(bytes32,address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                47u8,
                135u8,
                136u8,
                17u8,
                126u8,
                126u8,
                255u8,
                29u8,
                130u8,
                233u8,
                38u8,
                236u8,
                121u8,
                73u8,
                1u8,
                209u8,
                124u8,
                120u8,
                2u8,
                74u8,
                80u8,
                39u8,
                9u8,
                64u8,
                48u8,
                69u8,
                64u8,
                167u8,
                51u8,
                101u8,
                111u8,
                13u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    account: topics.2,
                    sender: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.account.clone(),
                    self.sender.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.account,
                );
                out[3usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleGranted {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleGranted> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleGranted) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RoleRevoked(bytes32,address,address)` and selector `0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b`.
```solidity
event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleRevoked {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleRevoked {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RoleRevoked(bytes32,address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                246u8,
                57u8,
                31u8,
                92u8,
                50u8,
                217u8,
                198u8,
                157u8,
                42u8,
                71u8,
                234u8,
                103u8,
                11u8,
                68u8,
                41u8,
                116u8,
                181u8,
                57u8,
                53u8,
                209u8,
                237u8,
                199u8,
                253u8,
                100u8,
                235u8,
                33u8,
                224u8,
                71u8,
                168u8,
                57u8,
                23u8,
                27u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    account: topics.2,
                    sender: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.account.clone(),
                    self.sender.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.account,
                );
                out[3usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleRevoked {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleRevoked> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleRevoked) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `WalletAddedToPool(address)` and selector `0xfbe100784c759aa4579024e68e1179726f2afae20a7a954f70a18ab31fbc0f64`.
```solidity
event WalletAddedToPool(address indexed wallet);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct WalletAddedToPool {
        #[allow(missing_docs)]
        pub wallet: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for WalletAddedToPool {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "WalletAddedToPool(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                251u8,
                225u8,
                0u8,
                120u8,
                76u8,
                117u8,
                154u8,
                164u8,
                87u8,
                144u8,
                36u8,
                230u8,
                142u8,
                17u8,
                121u8,
                114u8,
                111u8,
                42u8,
                250u8,
                226u8,
                10u8,
                122u8,
                149u8,
                79u8,
                112u8,
                161u8,
                138u8,
                179u8,
                31u8,
                188u8,
                15u8,
                100u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { wallet: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.wallet.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.wallet,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for WalletAddedToPool {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&WalletAddedToPool> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &WalletAddedToPool) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `WalletRemovedFromPool(address)` and selector `0x361d33fb2c027615b962bed78fe0782d09444b7c6d37fed9a5618ca069727d0d`.
```solidity
event WalletRemovedFromPool(address indexed wallet);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct WalletRemovedFromPool {
        #[allow(missing_docs)]
        pub wallet: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for WalletRemovedFromPool {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "WalletRemovedFromPool(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                54u8,
                29u8,
                51u8,
                251u8,
                44u8,
                2u8,
                118u8,
                21u8,
                185u8,
                98u8,
                190u8,
                215u8,
                143u8,
                224u8,
                120u8,
                45u8,
                9u8,
                68u8,
                75u8,
                124u8,
                109u8,
                55u8,
                254u8,
                217u8,
                165u8,
                97u8,
                140u8,
                160u8,
                105u8,
                114u8,
                125u8,
                13u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { wallet: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.wallet.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.wallet,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for WalletRemovedFromPool {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&WalletRemovedFromPool> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &WalletRemovedFromPool) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address _admin);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub _admin: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value._admin,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _admin: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._admin,
                    ),
                )
            }
        }
    };
    /**Function with signature `DEFAULT_ADMIN_ROLE()` and selector `0xa217fddf`.
```solidity
function DEFAULT_ADMIN_ROLE() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_ADMIN_ROLECall {}
    ///Container type for the return parameters of the [`DEFAULT_ADMIN_ROLE()`](DEFAULT_ADMIN_ROLECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_ADMIN_ROLEReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_ADMIN_ROLECall>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_ADMIN_ROLECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_ADMIN_ROLECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_ADMIN_ROLEReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_ADMIN_ROLEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_ADMIN_ROLEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for DEFAULT_ADMIN_ROLECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = DEFAULT_ADMIN_ROLEReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "DEFAULT_ADMIN_ROLE()";
            const SELECTOR: [u8; 4] = [162u8, 23u8, 253u8, 223u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `MANAGER_ROLE()` and selector `0xec87621c`.
```solidity
function MANAGER_ROLE() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MANAGER_ROLECall {}
    ///Container type for the return parameters of the [`MANAGER_ROLE()`](MANAGER_ROLECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MANAGER_ROLEReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<MANAGER_ROLECall> for UnderlyingRustTuple<'_> {
                fn from(value: MANAGER_ROLECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for MANAGER_ROLECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<MANAGER_ROLEReturn> for UnderlyingRustTuple<'_> {
                fn from(value: MANAGER_ROLEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for MANAGER_ROLEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for MANAGER_ROLECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = MANAGER_ROLEReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "MANAGER_ROLE()";
            const SELECTOR: [u8; 4] = [236u8, 135u8, 98u8, 28u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `addToWalletPool(address,address[])` and selector `0x2119c2b0`.
```solidity
function addToWalletPool(address wallet, address[] memory allowlistModules) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addToWalletPoolCall {
        #[allow(missing_docs)]
        pub wallet: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub allowlistModules: alloy::sol_types::private::Vec<
            alloy::sol_types::private::Address,
        >,
    }
    ///Container type for the return parameters of the [`addToWalletPool(address,address[])`](addToWalletPoolCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addToWalletPoolReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addToWalletPoolCall> for UnderlyingRustTuple<'_> {
                fn from(value: addToWalletPoolCall) -> Self {
                    (value.wallet, value.allowlistModules)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for addToWalletPoolCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        wallet: tuple.0,
                        allowlistModules: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addToWalletPoolReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: addToWalletPoolReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for addToWalletPoolReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for addToWalletPoolCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = addToWalletPoolReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "addToWalletPool(address,address[])";
            const SELECTOR: [u8; 4] = [33u8, 25u8, 194u8, 176u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.wallet,
                    ),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(&self.allowlistModules),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getRoleAdmin(bytes32)` and selector `0x248a9ca3`.
```solidity
function getRoleAdmin(bytes32 role) external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRoleAdminCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`getRoleAdmin(bytes32)`](getRoleAdminCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRoleAdminReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRoleAdminCall> for UnderlyingRustTuple<'_> {
                fn from(value: getRoleAdminCall) -> Self {
                    (value.role,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getRoleAdminCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { role: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRoleAdminReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getRoleAdminReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getRoleAdminReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getRoleAdminCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getRoleAdminReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getRoleAdmin(bytes32)";
            const SELECTOR: [u8; 4] = [36u8, 138u8, 156u8, 163u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `grantRole(bytes32,address)` and selector `0x2f2ff15d`.
```solidity
function grantRole(bytes32 role, address account) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct grantRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`grantRole(bytes32,address)`](grantRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct grantRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<grantRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: grantRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for grantRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<grantRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: grantRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for grantRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for grantRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = grantRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "grantRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [47u8, 47u8, 241u8, 93u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `hasRole(bytes32,address)` and selector `0x91d14854`.
```solidity
function hasRole(bytes32 role, address account) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hasRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`hasRole(bytes32,address)`](hasRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hasRoleReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hasRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: hasRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for hasRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hasRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: hasRoleReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for hasRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for hasRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = hasRoleReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "hasRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [145u8, 209u8, 72u8, 84u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isInWalletPool(address)` and selector `0x20f22089`.
```solidity
function isInWalletPool(address wallet) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isInWalletPoolCall {
        #[allow(missing_docs)]
        pub wallet: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`isInWalletPool(address)`](isInWalletPoolCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isInWalletPoolReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isInWalletPoolCall> for UnderlyingRustTuple<'_> {
                fn from(value: isInWalletPoolCall) -> Self {
                    (value.wallet,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isInWalletPoolCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { wallet: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isInWalletPoolReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: isInWalletPoolReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isInWalletPoolReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isInWalletPoolCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isInWalletPoolReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isInWalletPool(address)";
            const SELECTOR: [u8; 4] = [32u8, 242u8, 32u8, 137u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.wallet,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `removeFromWalletPool(address,address[])` and selector `0xb1f24b07`.
```solidity
function removeFromWalletPool(address wallet, address[] memory allowlistModules) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct removeFromWalletPoolCall {
        #[allow(missing_docs)]
        pub wallet: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub allowlistModules: alloy::sol_types::private::Vec<
            alloy::sol_types::private::Address,
        >,
    }
    ///Container type for the return parameters of the [`removeFromWalletPool(address,address[])`](removeFromWalletPoolCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct removeFromWalletPoolReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<removeFromWalletPoolCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: removeFromWalletPoolCall) -> Self {
                    (value.wallet, value.allowlistModules)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for removeFromWalletPoolCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        wallet: tuple.0,
                        allowlistModules: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<removeFromWalletPoolReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: removeFromWalletPoolReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for removeFromWalletPoolReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for removeFromWalletPoolCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = removeFromWalletPoolReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "removeFromWalletPool(address,address[])";
            const SELECTOR: [u8; 4] = [177u8, 242u8, 75u8, 7u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.wallet,
                    ),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(&self.allowlistModules),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `renounceRole(bytes32,address)` and selector `0x36568abe`.
```solidity
function renounceRole(bytes32 role, address callerConfirmation) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub callerConfirmation: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`renounceRole(bytes32,address)`](renounceRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: renounceRoleCall) -> Self {
                    (value.role, value.callerConfirmation)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for renounceRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        callerConfirmation: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: renounceRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for renounceRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [54u8, 86u8, 138u8, 190u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.callerConfirmation,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `revokeRole(bytes32,address)` and selector `0xd547741f`.
```solidity
function revokeRole(bytes32 role, address account) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct revokeRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`revokeRole(bytes32,address)`](revokeRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct revokeRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<revokeRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: revokeRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for revokeRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<revokeRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: revokeRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for revokeRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for revokeRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = revokeRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "revokeRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [213u8, 71u8, 116u8, 31u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `supportsInterface(bytes4)` and selector `0x01ffc9a7`.
```solidity
function supportsInterface(bytes4 interfaceId) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct supportsInterfaceCall {
        #[allow(missing_docs)]
        pub interfaceId: alloy::sol_types::private::FixedBytes<4>,
    }
    ///Container type for the return parameters of the [`supportsInterface(bytes4)`](supportsInterfaceCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct supportsInterfaceReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<4>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<supportsInterfaceCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: supportsInterfaceCall) -> Self {
                    (value.interfaceId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for supportsInterfaceCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { interfaceId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<supportsInterfaceReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: supportsInterfaceReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for supportsInterfaceReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for supportsInterfaceCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = supportsInterfaceReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "supportsInterface(bytes4)";
            const SELECTOR: [u8; 4] = [1u8, 255u8, 201u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        4,
                    > as alloy_sol_types::SolType>::tokenize(&self.interfaceId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `updateAllowlistModule(address,address,bool)` and selector `0x64770d4f`.
```solidity
function updateAllowlistModule(address allowlistModule, address wallet, bool isAllowed) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateAllowlistModuleCall {
        #[allow(missing_docs)]
        pub allowlistModule: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub wallet: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub isAllowed: bool,
    }
    ///Container type for the return parameters of the [`updateAllowlistModule(address,address,bool)`](updateAllowlistModuleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateAllowlistModuleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                bool,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateAllowlistModuleCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateAllowlistModuleCall) -> Self {
                    (value.allowlistModule, value.wallet, value.isAllowed)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateAllowlistModuleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        allowlistModule: tuple.0,
                        wallet: tuple.1,
                        isAllowed: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateAllowlistModuleReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateAllowlistModuleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateAllowlistModuleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for updateAllowlistModuleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = updateAllowlistModuleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "updateAllowlistModule(address,address,bool)";
            const SELECTOR: [u8; 4] = [100u8, 119u8, 13u8, 79u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.allowlistModule,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.wallet,
                    ),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.isAllowed,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `updateAllowlistModules(address,bool,address[])` and selector `0x91320d6b`.
```solidity
function updateAllowlistModules(address wallet, bool isAllowed, address[] memory allowlistModules) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateAllowlistModulesCall {
        #[allow(missing_docs)]
        pub wallet: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub isAllowed: bool,
        #[allow(missing_docs)]
        pub allowlistModules: alloy::sol_types::private::Vec<
            alloy::sol_types::private::Address,
        >,
    }
    ///Container type for the return parameters of the [`updateAllowlistModules(address,bool,address[])`](updateAllowlistModulesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateAllowlistModulesReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                bool,
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateAllowlistModulesCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateAllowlistModulesCall) -> Self {
                    (value.wallet, value.isAllowed, value.allowlistModules)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateAllowlistModulesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        wallet: tuple.0,
                        isAllowed: tuple.1,
                        allowlistModules: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateAllowlistModulesReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateAllowlistModulesReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateAllowlistModulesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for updateAllowlistModulesCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = updateAllowlistModulesReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "updateAllowlistModules(address,bool,address[])";
            const SELECTOR: [u8; 4] = [145u8, 50u8, 13u8, 107u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.wallet,
                    ),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.isAllowed,
                    ),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(&self.allowlistModules),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `walletPool(address)` and selector `0xc66ab622`.
```solidity
function walletPool(address wallet) external view returns (bool isInPool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct walletPoolCall {
        #[allow(missing_docs)]
        pub wallet: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`walletPool(address)`](walletPoolCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct walletPoolReturn {
        #[allow(missing_docs)]
        pub isInPool: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<walletPoolCall> for UnderlyingRustTuple<'_> {
                fn from(value: walletPoolCall) -> Self {
                    (value.wallet,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for walletPoolCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { wallet: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<walletPoolReturn> for UnderlyingRustTuple<'_> {
                fn from(value: walletPoolReturn) -> Self {
                    (value.isInPool,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for walletPoolReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { isInPool: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for walletPoolCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = walletPoolReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "walletPool(address)";
            const SELECTOR: [u8; 4] = [198u8, 106u8, 182u8, 34u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.wallet,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`WalletPool`](self) function calls.
    pub enum WalletPoolCalls {
        #[allow(missing_docs)]
        DEFAULT_ADMIN_ROLE(DEFAULT_ADMIN_ROLECall),
        #[allow(missing_docs)]
        MANAGER_ROLE(MANAGER_ROLECall),
        #[allow(missing_docs)]
        addToWalletPool(addToWalletPoolCall),
        #[allow(missing_docs)]
        getRoleAdmin(getRoleAdminCall),
        #[allow(missing_docs)]
        grantRole(grantRoleCall),
        #[allow(missing_docs)]
        hasRole(hasRoleCall),
        #[allow(missing_docs)]
        isInWalletPool(isInWalletPoolCall),
        #[allow(missing_docs)]
        removeFromWalletPool(removeFromWalletPoolCall),
        #[allow(missing_docs)]
        renounceRole(renounceRoleCall),
        #[allow(missing_docs)]
        revokeRole(revokeRoleCall),
        #[allow(missing_docs)]
        supportsInterface(supportsInterfaceCall),
        #[allow(missing_docs)]
        updateAllowlistModule(updateAllowlistModuleCall),
        #[allow(missing_docs)]
        updateAllowlistModules(updateAllowlistModulesCall),
        #[allow(missing_docs)]
        walletPool(walletPoolCall),
    }
    #[automatically_derived]
    impl WalletPoolCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [1u8, 255u8, 201u8, 167u8],
            [32u8, 242u8, 32u8, 137u8],
            [33u8, 25u8, 194u8, 176u8],
            [36u8, 138u8, 156u8, 163u8],
            [47u8, 47u8, 241u8, 93u8],
            [54u8, 86u8, 138u8, 190u8],
            [100u8, 119u8, 13u8, 79u8],
            [145u8, 50u8, 13u8, 107u8],
            [145u8, 209u8, 72u8, 84u8],
            [162u8, 23u8, 253u8, 223u8],
            [177u8, 242u8, 75u8, 7u8],
            [198u8, 106u8, 182u8, 34u8],
            [213u8, 71u8, 116u8, 31u8],
            [236u8, 135u8, 98u8, 28u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for WalletPoolCalls {
        const NAME: &'static str = "WalletPoolCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 14usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::DEFAULT_ADMIN_ROLE(_) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::MANAGER_ROLE(_) => {
                    <MANAGER_ROLECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::addToWalletPool(_) => {
                    <addToWalletPoolCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getRoleAdmin(_) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::grantRole(_) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::hasRole(_) => <hasRoleCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::isInWalletPool(_) => {
                    <isInWalletPoolCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::removeFromWalletPool(_) => {
                    <removeFromWalletPoolCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::renounceRole(_) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::revokeRole(_) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::supportsInterface(_) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::updateAllowlistModule(_) => {
                    <updateAllowlistModuleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::updateAllowlistModules(_) => {
                    <updateAllowlistModulesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::walletPool(_) => {
                    <walletPoolCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<WalletPoolCalls>] = &[
                {
                    fn supportsInterface(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolCalls> {
                        <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolCalls::supportsInterface)
                    }
                    supportsInterface
                },
                {
                    fn isInWalletPool(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolCalls> {
                        <isInWalletPoolCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolCalls::isInWalletPool)
                    }
                    isInWalletPool
                },
                {
                    fn addToWalletPool(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolCalls> {
                        <addToWalletPoolCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolCalls::addToWalletPool)
                    }
                    addToWalletPool
                },
                {
                    fn getRoleAdmin(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolCalls> {
                        <getRoleAdminCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolCalls::getRoleAdmin)
                    }
                    getRoleAdmin
                },
                {
                    fn grantRole(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolCalls> {
                        <grantRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolCalls::grantRole)
                    }
                    grantRole
                },
                {
                    fn renounceRole(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolCalls> {
                        <renounceRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolCalls::renounceRole)
                    }
                    renounceRole
                },
                {
                    fn updateAllowlistModule(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolCalls> {
                        <updateAllowlistModuleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolCalls::updateAllowlistModule)
                    }
                    updateAllowlistModule
                },
                {
                    fn updateAllowlistModules(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolCalls> {
                        <updateAllowlistModulesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolCalls::updateAllowlistModules)
                    }
                    updateAllowlistModules
                },
                {
                    fn hasRole(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolCalls> {
                        <hasRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolCalls::hasRole)
                    }
                    hasRole
                },
                {
                    fn DEFAULT_ADMIN_ROLE(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolCalls> {
                        <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolCalls::DEFAULT_ADMIN_ROLE)
                    }
                    DEFAULT_ADMIN_ROLE
                },
                {
                    fn removeFromWalletPool(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolCalls> {
                        <removeFromWalletPoolCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolCalls::removeFromWalletPool)
                    }
                    removeFromWalletPool
                },
                {
                    fn walletPool(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolCalls> {
                        <walletPoolCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolCalls::walletPool)
                    }
                    walletPool
                },
                {
                    fn revokeRole(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolCalls> {
                        <revokeRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolCalls::revokeRole)
                    }
                    revokeRole
                },
                {
                    fn MANAGER_ROLE(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolCalls> {
                        <MANAGER_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolCalls::MANAGER_ROLE)
                    }
                    MANAGER_ROLE
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::DEFAULT_ADMIN_ROLE(inner) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::MANAGER_ROLE(inner) => {
                    <MANAGER_ROLECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::addToWalletPool(inner) => {
                    <addToWalletPoolCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getRoleAdmin(inner) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::grantRole(inner) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::hasRole(inner) => {
                    <hasRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isInWalletPool(inner) => {
                    <isInWalletPoolCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::removeFromWalletPool(inner) => {
                    <removeFromWalletPoolCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::renounceRole(inner) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::revokeRole(inner) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::supportsInterface(inner) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::updateAllowlistModule(inner) => {
                    <updateAllowlistModuleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::updateAllowlistModules(inner) => {
                    <updateAllowlistModulesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::walletPool(inner) => {
                    <walletPoolCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::DEFAULT_ADMIN_ROLE(inner) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::MANAGER_ROLE(inner) => {
                    <MANAGER_ROLECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::addToWalletPool(inner) => {
                    <addToWalletPoolCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getRoleAdmin(inner) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::grantRole(inner) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::hasRole(inner) => {
                    <hasRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::isInWalletPool(inner) => {
                    <isInWalletPoolCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::removeFromWalletPool(inner) => {
                    <removeFromWalletPoolCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::renounceRole(inner) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::revokeRole(inner) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::supportsInterface(inner) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::updateAllowlistModule(inner) => {
                    <updateAllowlistModuleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::updateAllowlistModules(inner) => {
                    <updateAllowlistModulesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::walletPool(inner) => {
                    <walletPoolCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`WalletPool`](self) custom errors.
    pub enum WalletPoolErrors {
        #[allow(missing_docs)]
        AccessControlBadConfirmation(AccessControlBadConfirmation),
        #[allow(missing_docs)]
        AccessControlUnauthorizedAccount(AccessControlUnauthorizedAccount),
        #[allow(missing_docs)]
        AddressNotAllowed(AddressNotAllowed),
        #[allow(missing_docs)]
        AllowlistUpdateFailed(AllowlistUpdateFailed),
    }
    #[automatically_derived]
    impl WalletPoolErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [43u8, 83u8, 120u8, 78u8],
            [102u8, 151u8, 178u8, 50u8],
            [226u8, 81u8, 125u8, 63u8],
            [249u8, 114u8, 233u8, 120u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for WalletPoolErrors {
        const NAME: &'static str = "WalletPoolErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 4usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AccessControlBadConfirmation(_) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::SELECTOR
                }
                Self::AccessControlUnauthorizedAccount(_) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
                Self::AddressNotAllowed(_) => {
                    <AddressNotAllowed as alloy_sol_types::SolError>::SELECTOR
                }
                Self::AllowlistUpdateFailed(_) => {
                    <AllowlistUpdateFailed as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<WalletPoolErrors>] = &[
                {
                    fn AddressNotAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolErrors> {
                        <AddressNotAllowed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolErrors::AddressNotAllowed)
                    }
                    AddressNotAllowed
                },
                {
                    fn AccessControlBadConfirmation(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolErrors> {
                        <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolErrors::AccessControlBadConfirmation)
                    }
                    AccessControlBadConfirmation
                },
                {
                    fn AccessControlUnauthorizedAccount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolErrors> {
                        <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolErrors::AccessControlUnauthorizedAccount)
                    }
                    AccessControlUnauthorizedAccount
                },
                {
                    fn AllowlistUpdateFailed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolErrors> {
                        <AllowlistUpdateFailed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolErrors::AllowlistUpdateFailed)
                    }
                    AllowlistUpdateFailed
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AccessControlBadConfirmation(inner) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::AccessControlUnauthorizedAccount(inner) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::AddressNotAllowed(inner) => {
                    <AddressNotAllowed as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::AllowlistUpdateFailed(inner) => {
                    <AllowlistUpdateFailed as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AccessControlBadConfirmation(inner) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::AccessControlUnauthorizedAccount(inner) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::AddressNotAllowed(inner) => {
                    <AddressNotAllowed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::AllowlistUpdateFailed(inner) => {
                    <AllowlistUpdateFailed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`WalletPool`](self) events.
    pub enum WalletPoolEvents {
        #[allow(missing_docs)]
        AllowlistModuleUpdated(AllowlistModuleUpdated),
        #[allow(missing_docs)]
        RoleAdminChanged(RoleAdminChanged),
        #[allow(missing_docs)]
        RoleGranted(RoleGranted),
        #[allow(missing_docs)]
        RoleRevoked(RoleRevoked),
        #[allow(missing_docs)]
        WalletAddedToPool(WalletAddedToPool),
        #[allow(missing_docs)]
        WalletRemovedFromPool(WalletRemovedFromPool),
    }
    #[automatically_derived]
    impl WalletPoolEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                47u8,
                135u8,
                136u8,
                17u8,
                126u8,
                126u8,
                255u8,
                29u8,
                130u8,
                233u8,
                38u8,
                236u8,
                121u8,
                73u8,
                1u8,
                209u8,
                124u8,
                120u8,
                2u8,
                74u8,
                80u8,
                39u8,
                9u8,
                64u8,
                48u8,
                69u8,
                64u8,
                167u8,
                51u8,
                101u8,
                111u8,
                13u8,
            ],
            [
                54u8,
                29u8,
                51u8,
                251u8,
                44u8,
                2u8,
                118u8,
                21u8,
                185u8,
                98u8,
                190u8,
                215u8,
                143u8,
                224u8,
                120u8,
                45u8,
                9u8,
                68u8,
                75u8,
                124u8,
                109u8,
                55u8,
                254u8,
                217u8,
                165u8,
                97u8,
                140u8,
                160u8,
                105u8,
                114u8,
                125u8,
                13u8,
            ],
            [
                189u8,
                121u8,
                184u8,
                111u8,
                254u8,
                10u8,
                184u8,
                232u8,
                119u8,
                97u8,
                81u8,
                81u8,
                66u8,
                23u8,
                205u8,
                124u8,
                172u8,
                213u8,
                44u8,
                144u8,
                159u8,
                102u8,
                71u8,
                92u8,
                58u8,
                244u8,
                78u8,
                18u8,
                159u8,
                11u8,
                0u8,
                255u8,
            ],
            [
                246u8,
                57u8,
                31u8,
                92u8,
                50u8,
                217u8,
                198u8,
                157u8,
                42u8,
                71u8,
                234u8,
                103u8,
                11u8,
                68u8,
                41u8,
                116u8,
                181u8,
                57u8,
                53u8,
                209u8,
                237u8,
                199u8,
                253u8,
                100u8,
                235u8,
                33u8,
                224u8,
                71u8,
                168u8,
                57u8,
                23u8,
                27u8,
            ],
            [
                246u8,
                60u8,
                186u8,
                185u8,
                254u8,
                200u8,
                47u8,
                60u8,
                44u8,
                232u8,
                130u8,
                70u8,
                111u8,
                183u8,
                129u8,
                78u8,
                223u8,
                18u8,
                23u8,
                60u8,
                231u8,
                52u8,
                224u8,
                38u8,
                72u8,
                146u8,
                189u8,
                169u8,
                95u8,
                162u8,
                70u8,
                92u8,
            ],
            [
                251u8,
                225u8,
                0u8,
                120u8,
                76u8,
                117u8,
                154u8,
                164u8,
                87u8,
                144u8,
                36u8,
                230u8,
                142u8,
                17u8,
                121u8,
                114u8,
                111u8,
                42u8,
                250u8,
                226u8,
                10u8,
                122u8,
                149u8,
                79u8,
                112u8,
                161u8,
                138u8,
                179u8,
                31u8,
                188u8,
                15u8,
                100u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for WalletPoolEvents {
        const NAME: &'static str = "WalletPoolEvents";
        const COUNT: usize = 6usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <AllowlistModuleUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <AllowlistModuleUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::AllowlistModuleUpdated)
                }
                Some(<RoleAdminChanged as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleAdminChanged as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RoleAdminChanged)
                }
                Some(<RoleGranted as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleGranted as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RoleGranted)
                }
                Some(<RoleRevoked as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleRevoked as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RoleRevoked)
                }
                Some(
                    <WalletAddedToPool as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <WalletAddedToPool as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::WalletAddedToPool)
                }
                Some(
                    <WalletRemovedFromPool as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <WalletRemovedFromPool as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::WalletRemovedFromPool)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for WalletPoolEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::AllowlistModuleUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleAdminChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleGranted(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleRevoked(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::WalletAddedToPool(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::WalletRemovedFromPool(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::AllowlistModuleUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleAdminChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleGranted(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleRevoked(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::WalletAddedToPool(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::WalletRemovedFromPool(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`WalletPool`](self) contract instance.

See the [wrapper's documentation](`WalletPoolInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> WalletPoolInstance<T, P, N> {
        WalletPoolInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _admin: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<WalletPoolInstance<T, P, N>>,
    > {
        WalletPoolInstance::<T, P, N>::deploy(provider, _admin)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _admin: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        WalletPoolInstance::<T, P, N>::deploy_builder(provider, _admin)
    }
    /**A [`WalletPool`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`WalletPool`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct WalletPoolInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for WalletPoolInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("WalletPoolInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > WalletPoolInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`WalletPool`](self) contract instance.

See the [wrapper's documentation](`WalletPoolInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _admin: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<WalletPoolInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, _admin);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _admin: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { _admin },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> WalletPoolInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> WalletPoolInstance<T, P, N> {
            WalletPoolInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > WalletPoolInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`DEFAULT_ADMIN_ROLE`] function.
        pub fn DEFAULT_ADMIN_ROLE(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, DEFAULT_ADMIN_ROLECall, N> {
            self.call_builder(&DEFAULT_ADMIN_ROLECall {})
        }
        ///Creates a new call builder for the [`MANAGER_ROLE`] function.
        pub fn MANAGER_ROLE(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, MANAGER_ROLECall, N> {
            self.call_builder(&MANAGER_ROLECall {})
        }
        ///Creates a new call builder for the [`addToWalletPool`] function.
        pub fn addToWalletPool(
            &self,
            wallet: alloy::sol_types::private::Address,
            allowlistModules: alloy::sol_types::private::Vec<
                alloy::sol_types::private::Address,
            >,
        ) -> alloy_contract::SolCallBuilder<T, &P, addToWalletPoolCall, N> {
            self.call_builder(
                &addToWalletPoolCall {
                    wallet,
                    allowlistModules,
                },
            )
        }
        ///Creates a new call builder for the [`getRoleAdmin`] function.
        pub fn getRoleAdmin(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, getRoleAdminCall, N> {
            self.call_builder(&getRoleAdminCall { role })
        }
        ///Creates a new call builder for the [`grantRole`] function.
        pub fn grantRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, grantRoleCall, N> {
            self.call_builder(&grantRoleCall { role, account })
        }
        ///Creates a new call builder for the [`hasRole`] function.
        pub fn hasRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, hasRoleCall, N> {
            self.call_builder(&hasRoleCall { role, account })
        }
        ///Creates a new call builder for the [`isInWalletPool`] function.
        pub fn isInWalletPool(
            &self,
            wallet: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, isInWalletPoolCall, N> {
            self.call_builder(&isInWalletPoolCall { wallet })
        }
        ///Creates a new call builder for the [`removeFromWalletPool`] function.
        pub fn removeFromWalletPool(
            &self,
            wallet: alloy::sol_types::private::Address,
            allowlistModules: alloy::sol_types::private::Vec<
                alloy::sol_types::private::Address,
            >,
        ) -> alloy_contract::SolCallBuilder<T, &P, removeFromWalletPoolCall, N> {
            self.call_builder(
                &removeFromWalletPoolCall {
                    wallet,
                    allowlistModules,
                },
            )
        }
        ///Creates a new call builder for the [`renounceRole`] function.
        pub fn renounceRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            callerConfirmation: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, renounceRoleCall, N> {
            self.call_builder(
                &renounceRoleCall {
                    role,
                    callerConfirmation,
                },
            )
        }
        ///Creates a new call builder for the [`revokeRole`] function.
        pub fn revokeRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, revokeRoleCall, N> {
            self.call_builder(&revokeRoleCall { role, account })
        }
        ///Creates a new call builder for the [`supportsInterface`] function.
        pub fn supportsInterface(
            &self,
            interfaceId: alloy::sol_types::private::FixedBytes<4>,
        ) -> alloy_contract::SolCallBuilder<T, &P, supportsInterfaceCall, N> {
            self.call_builder(
                &supportsInterfaceCall {
                    interfaceId,
                },
            )
        }
        ///Creates a new call builder for the [`updateAllowlistModule`] function.
        pub fn updateAllowlistModule(
            &self,
            allowlistModule: alloy::sol_types::private::Address,
            wallet: alloy::sol_types::private::Address,
            isAllowed: bool,
        ) -> alloy_contract::SolCallBuilder<T, &P, updateAllowlistModuleCall, N> {
            self.call_builder(
                &updateAllowlistModuleCall {
                    allowlistModule,
                    wallet,
                    isAllowed,
                },
            )
        }
        ///Creates a new call builder for the [`updateAllowlistModules`] function.
        pub fn updateAllowlistModules(
            &self,
            wallet: alloy::sol_types::private::Address,
            isAllowed: bool,
            allowlistModules: alloy::sol_types::private::Vec<
                alloy::sol_types::private::Address,
            >,
        ) -> alloy_contract::SolCallBuilder<T, &P, updateAllowlistModulesCall, N> {
            self.call_builder(
                &updateAllowlistModulesCall {
                    wallet,
                    isAllowed,
                    allowlistModules,
                },
            )
        }
        ///Creates a new call builder for the [`walletPool`] function.
        pub fn walletPool(
            &self,
            wallet: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, walletPoolCall, N> {
            self.call_builder(&walletPoolCall { wallet })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > WalletPoolInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`AllowlistModuleUpdated`] event.
        pub fn AllowlistModuleUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, AllowlistModuleUpdated, N> {
            self.event_filter::<AllowlistModuleUpdated>()
        }
        ///Creates a new event filter for the [`RoleAdminChanged`] event.
        pub fn RoleAdminChanged_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RoleAdminChanged, N> {
            self.event_filter::<RoleAdminChanged>()
        }
        ///Creates a new event filter for the [`RoleGranted`] event.
        pub fn RoleGranted_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RoleGranted, N> {
            self.event_filter::<RoleGranted>()
        }
        ///Creates a new event filter for the [`RoleRevoked`] event.
        pub fn RoleRevoked_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RoleRevoked, N> {
            self.event_filter::<RoleRevoked>()
        }
        ///Creates a new event filter for the [`WalletAddedToPool`] event.
        pub fn WalletAddedToPool_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, WalletAddedToPool, N> {
            self.event_filter::<WalletAddedToPool>()
        }
        ///Creates a new event filter for the [`WalletRemovedFromPool`] event.
        pub fn WalletRemovedFromPool_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, WalletRemovedFromPool, N> {
            self.event_filter::<WalletRemovedFromPool>()
        }
    }
}
