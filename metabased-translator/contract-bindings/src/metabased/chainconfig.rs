/**

Generated by the following Solidity interface...
```solidity
interface ChainConfig {
    error InvalidInitialization();
    error NotInitializing();
    error OwnableInvalidOwner(address owner);
    error OwnableUnauthorizedAccount(address account);

    event DefaultSequencingChainRpcUrlUpdated(string newRpcUrl);
    event Initialized(uint64 version);
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event RollupOwnerUpdated(address indexed newRollupOwner);

    constructor();

    function ARBITRUM_BRIDGE_ADDRESS() external view returns (address);
    function ARBITRUM_IGNORE_DELAYED_MESSAGES() external view returns (bool);
    function ARBITRUM_INBOX_ADDRESS() external view returns (address);
    function CHAIN_ID() external view returns (uint256);
    function DEFAULT_SEQUENCING_CHAIN_RPC_URL() external view returns (string memory);
    function MINE_EMPTY_BLOCKS() external view returns (bool);
    function ROLLUP_OWNER() external view returns (address);
    function SEQUENCING_CONTRACT_ADDRESS() external view returns (address);
    function SEQUENCING_START_BLOCK() external view returns (uint256);
    function SETTLEMENT_DELAY() external view returns (uint256);
    function SETTLEMENT_START_BLOCK() external view returns (uint256);
    function TARGET_ROLLUP_TYPE() external view returns (bytes32);
    function initialize(uint256 chainId, bytes32 targetRollupType, bool mineEmptyBlocks, address arbitrumBridgeAddress, address arbitrumInboxAddress, bool arbitrumIgnoreDelayedMessages, uint256 settlementDelay, uint256 settlementStartBlock, address sequencingContractAddress, uint256 sequencingStartBlock, address rollupOwner, string memory sequencingChainRpcUrl) external;
    function owner() external view returns (address);
    function renounceOwnership() external;
    function transferOwnership(address newOwner) external;
    function updateDefaultSequencingChainRpcUrl(string memory newRpcUrl) external;
    function updateRollupOwner(address newRollupOwner) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "ARBITRUM_BRIDGE_ADDRESS",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "ARBITRUM_IGNORE_DELAYED_MESSAGES",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "ARBITRUM_INBOX_ADDRESS",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "CHAIN_ID",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "DEFAULT_SEQUENCING_CHAIN_RPC_URL",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "MINE_EMPTY_BLOCKS",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "ROLLUP_OWNER",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "SEQUENCING_CONTRACT_ADDRESS",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "SEQUENCING_START_BLOCK",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "SETTLEMENT_DELAY",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "SETTLEMENT_START_BLOCK",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "TARGET_ROLLUP_TYPE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "initialize",
    "inputs": [
      {
        "name": "chainId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "targetRollupType",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "mineEmptyBlocks",
        "type": "bool",
        "internalType": "bool"
      },
      {
        "name": "arbitrumBridgeAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "arbitrumInboxAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "arbitrumIgnoreDelayedMessages",
        "type": "bool",
        "internalType": "bool"
      },
      {
        "name": "settlementDelay",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "settlementStartBlock",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "sequencingContractAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "sequencingStartBlock",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "rollupOwner",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "sequencingChainRpcUrl",
        "type": "string",
        "internalType": "string"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "renounceOwnership",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "transferOwnership",
    "inputs": [
      {
        "name": "newOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "updateDefaultSequencingChainRpcUrl",
    "inputs": [
      {
        "name": "newRpcUrl",
        "type": "string",
        "internalType": "string"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "updateRollupOwner",
    "inputs": [
      {
        "name": "newRollupOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "DefaultSequencingChainRpcUrlUpdated",
    "inputs": [
      {
        "name": "newRpcUrl",
        "type": "string",
        "indexed": false,
        "internalType": "string"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Initialized",
    "inputs": [
      {
        "name": "version",
        "type": "uint64",
        "indexed": false,
        "internalType": "uint64"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "OwnershipTransferred",
    "inputs": [
      {
        "name": "previousOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RollupOwnerUpdated",
    "inputs": [
      {
        "name": "newRollupOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "InvalidInitialization",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NotInitializing",
    "inputs": []
  },
  {
    "type": "error",
    "name": "OwnableInvalidOwner",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "OwnableUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ]
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod ChainConfig {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080806040523460765733156061575f8054336001600160a01b03198216811783556040519290916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3610d86908161007b8239f35b631e4fbdf760e01b81525f6004820152602490fd5b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c80632a84b0f014610b1857806341fc712d14610af057806357d1ba2514610ad357806362c73caa1461093e57806366a1d108146108595780636edd6c091461082d578063715018a6146107d657806385e1f4d0146107b95780638da5cb5b14610792578063a3c6e1e714610775578063aa6a43d81461074d578063acc32b3514610730578063b97aba3e1461070e578063bf6db6f8146106e6578063cdad39fc14610178578063d1f4737c1461015b578063e79388e6146101365763f2fde38b146100df575f80fd5b34610132576020366003190112610132576100f8610bd5565b610100610c9f565b6001600160a01b0381161561011a5761011890610cca565b005b604051631e4fbdf760e01b81525f6004820152602490fd5b5f80fd5b34610132575f36600319011261013257602060ff60045460a01c166040519015158152f35b34610132575f366003190112610132576020600654604051908152f35b3461013257610180366003190112610132576044358015158103610132576001600160a01b039060643580831690036101325760843582811681036101325760a435928315158403610132576101043591818316830361013257610144359082821682036101325767ffffffffffffffff610164351161013257366023610164350112156101325767ffffffffffffffff6101643560040135116104de57604051956102356004610164350135601f01601f191660200188610c23565b60046101643590810135808952369101602401116101325761016435600401356024610164350160208901375f60206101643560040135890101525f80516020610d31833981519152549567ffffffffffffffff871615806106d8575b600167ffffffffffffffff89161490816106ce575b1590816106c5575b506106b357600167ffffffffffffffff198816175f80516020610d318339815191525560ff8760401c1615610687575b60043515610642578460643516156105ee578483161561059b578486161561054357848416156104f257600435600155602435600255600354906affffffffffffffffffffff60a81b918260ff610100600160a81b0360643560081b169315151691161717600355846004549260ff60a01b90151560a01b1693169116171760045560c43560055560e435600655816bffffffffffffffffffffffff60a01b9316836007541617600755610124356008551690600954161760095581519167ffffffffffffffff83116104de576103c0836103bb600a54610beb565b610c45565b602090601f841160011461046c5792806103f29260ff955f92610461575b50508160011b915f199060031b1c19161790565b600a555b6103ff33610cca565b60401c161561040a57005b68ff0000000000000000195f80516020610d3183398151915254165f80516020610d31833981519152557fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2602060405160018152a1005b0151905085806103de565b90601f19841691600a5f525f80516020610d11833981519152925f5b8181106104c6575091600193918660ff9794106104ae575b505050811b01600a556103f6565b01515f1960f88460031b161c191690558480806104a0565b92936020600181928786015181550195019301610488565b634e487b7160e01b5f52604160045260245ffd5b60405162461bcd60e51b815260206004820152602360248201527f526f6c6c7570206f776e65722063616e6e6f74206265207a65726f206164647260448201526265737360e81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602a60248201527f53657175656e63696e6720636f6e747261637420616464726573732063616e6e6044820152696f74206265207a65726f60b01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602560248201527f417262697472756d20696e626f7820616464726573732063616e6e6f74206265604482015264207a65726f60d81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602660248201527f417262697472756d2062726964676520616464726573732063616e6e6f74206260448201526565207a65726f60d01b6064820152608490fd5b60405162461bcd60e51b815260206004820152601760248201527f436861696e2049442063616e6e6f74206265207a65726f0000000000000000006044820152606490fd5b68ffffffffffffffffff19871668010000000000000001175f80516020610d31833981519152556102df565b60405163f92ee8a960e01b8152600490fd5b905015896102af565b303b1591506102a7565b5060ff8760401c1615610292565b34610132575f366003190112610132576007546040516001600160a01b039091168152602090f35b34610132575f36600319011261013257602060ff600354166040519015158152f35b34610132575f366003190112610132576020600254604051908152f35b34610132575f366003190112610132576004546040516001600160a01b039091168152602090f35b34610132575f366003190112610132576020600854604051908152f35b34610132575f366003190112610132575f546040516001600160a01b039091168152602090f35b34610132575f366003190112610132576020600154604051908152f35b34610132575f366003190112610132576107ee610c9f565b5f80546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b34610132575f3660031901126101325760035460405160089190911c6001600160a01b03168152602090f35b34610132575f366003190112610132576040515f600a549161087a83610beb565b9283825260209384808401926001906001811690815f1461092057506001146108d8575b5050506108af826040940383610c23565b825193849281845251918280928501528484015e5f828201840152601f01601f19168101030190f35b91909450600a5f525f80516020610d11833981519152915f925b82841061090d575050508201909201916108af84604061089e565b80548685018801529286019281016108f2565b60ff19168552505090151560051b83010192506108af84604061089e565b3461013257602080600319360112610132576004359067ffffffffffffffff908183116101325736602384011215610132578260040135918211610132576024366024848601011161013257610992610c9f565b6109a1836103bb600a54610beb565b5f91601f8411600114610a335750507f0234a4e910f2b1e618f2c93be316ec0c7f40e1af23fe33f9fba2c5bb388a95f292826109f7816024956040955f91610a26575b508160011b915f199060031b1c19161790565b600a555b8083519485936020855282602086015201848401375f828201840152601f01601f19168101030190a1005b87915085010135886109e4565b600a5f9081525f80516020610d118339815191529392601f19861692905b838310610ab757505050926040927f0234a4e910f2b1e618f2c93be316ec0c7f40e1af23fe33f9fba2c5bb388a95f295928260249610610a9c575b5050600181811b01600a556109fb565b83018501355f19600384901b60f8161c191690558580610a8c565b908060018697848396988c010135815501960194019190610a51565b34610132575f366003190112610132576020600554604051908152f35b34610132575f366003190112610132576009546040516001600160a01b039091168152602090f35b3461013257602036600319011261013257610b31610bd5565b610b39610c9f565b6001600160a01b03168015610b8057600980546001600160a01b031916821790557f8829bee46683608d5fd80e243c0fae04d129ce172f70db1021c1128074a6f4d95f80a2005b60405162461bcd60e51b815260206004820152602760248201527f4e657720726f6c6c7570206f776e65722063616e6e6f74206265207a65726f206044820152666164647265737360c81b6064820152608490fd5b600435906001600160a01b038216820361013257565b90600182811c92168015610c19575b6020831014610c0557565b634e487b7160e01b5f52602260045260245ffd5b91607f1691610bfa565b90601f8019910116810190811067ffffffffffffffff8211176104de57604052565b601f8111610c51575050565b600a5f525f80516020610d11833981519152906020601f840160051c83019310610c95575b601f0160051c01905b818110610c8a575050565b5f8155600101610c7f565b9091508190610c76565b5f546001600160a01b03163303610cb257565b60405163118cdaa760e01b8152336004820152602490fd5b5f80546001600160a01b039283166001600160a01b03198216811783559216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a356fec65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8f0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00a264697066735822122020d37d97bde0074ea06ee07c32ce86f33e610a31dbde60b2c2421d007d36e7a664736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80\x80`@R4`vW3\x15`aW_\x80T3`\x01`\x01`\xA0\x1B\x03\x19\x82\x16\x81\x17\x83U`@Q\x92\x90\x91`\x01`\x01`\xA0\x1B\x03\x16\x90\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x90\x80\xA3a\r\x86\x90\x81a\0{\x829\xF3[c\x1EO\xBD\xF7`\xE0\x1B\x81R_`\x04\x82\x01R`$\x90\xFD[_\x80\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x11W_\x80\xFD[_5`\xE0\x1C\x80c*\x84\xB0\xF0\x14a\x0B\x18W\x80cA\xFCq-\x14a\n\xF0W\x80cW\xD1\xBA%\x14a\n\xD3W\x80cb\xC7<\xAA\x14a\t>W\x80cf\xA1\xD1\x08\x14a\x08YW\x80cn\xDDl\t\x14a\x08-W\x80cqP\x18\xA6\x14a\x07\xD6W\x80c\x85\xE1\xF4\xD0\x14a\x07\xB9W\x80c\x8D\xA5\xCB[\x14a\x07\x92W\x80c\xA3\xC6\xE1\xE7\x14a\x07uW\x80c\xAAjC\xD8\x14a\x07MW\x80c\xAC\xC3+5\x14a\x070W\x80c\xB9z\xBA>\x14a\x07\x0EW\x80c\xBFm\xB6\xF8\x14a\x06\xE6W\x80c\xCD\xAD9\xFC\x14a\x01xW\x80c\xD1\xF4s|\x14a\x01[W\x80c\xE7\x93\x88\xE6\x14a\x016Wc\xF2\xFD\xE3\x8B\x14a\0\xDFW_\x80\xFD[4a\x012W` 6`\x03\x19\x01\x12a\x012Wa\0\xF8a\x0B\xD5V[a\x01\0a\x0C\x9FV[`\x01`\x01`\xA0\x1B\x03\x81\x16\x15a\x01\x1AWa\x01\x18\x90a\x0C\xCAV[\0[`@Qc\x1EO\xBD\xF7`\xE0\x1B\x81R_`\x04\x82\x01R`$\x90\xFD[_\x80\xFD[4a\x012W_6`\x03\x19\x01\x12a\x012W` `\xFF`\x04T`\xA0\x1C\x16`@Q\x90\x15\x15\x81R\xF3[4a\x012W_6`\x03\x19\x01\x12a\x012W` `\x06T`@Q\x90\x81R\xF3[4a\x012Wa\x01\x806`\x03\x19\x01\x12a\x012W`D5\x80\x15\x15\x81\x03a\x012W`\x01`\x01`\xA0\x1B\x03\x90`d5\x80\x83\x16\x90\x03a\x012W`\x845\x82\x81\x16\x81\x03a\x012W`\xA45\x92\x83\x15\x15\x84\x03a\x012Wa\x01\x045\x91\x81\x83\x16\x83\x03a\x012Wa\x01D5\x90\x82\x82\x16\x82\x03a\x012Wg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x01d5\x11a\x012W6`#a\x01d5\x01\x12\x15a\x012Wg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x01d5`\x04\x015\x11a\x04\xDEW`@Q\x95a\x025`\x04a\x01d5\x015`\x1F\x01`\x1F\x19\x16` \x01\x88a\x0C#V[`\x04a\x01d5\x90\x81\x015\x80\x89R6\x91\x01`$\x01\x11a\x012Wa\x01d5`\x04\x015`$a\x01d5\x01` \x89\x017_` a\x01d5`\x04\x015\x89\x01\x01R_\x80Q` a\r1\x839\x81Q\x91RT\x95g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x87\x16\x15\x80a\x06\xD8W[`\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x89\x16\x14\x90\x81a\x06\xCEW[\x15\x90\x81a\x06\xC5W[Pa\x06\xB3W`\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x88\x16\x17_\x80Q` a\r1\x839\x81Q\x91RU`\xFF\x87`@\x1C\x16\x15a\x06\x87W[`\x045\x15a\x06BW\x84`d5\x16\x15a\x05\xEEW\x84\x83\x16\x15a\x05\x9BW\x84\x86\x16\x15a\x05CW\x84\x84\x16\x15a\x04\xF2W`\x045`\x01U`$5`\x02U`\x03T\x90j\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\xA8\x1B\x91\x82`\xFFa\x01\0`\x01`\xA8\x1B\x03`d5`\x08\x1B\x16\x93\x15\x15\x16\x91\x16\x17\x17`\x03U\x84`\x04T\x92`\xFF`\xA0\x1B\x90\x15\x15`\xA0\x1B\x16\x93\x16\x91\x16\x17\x17`\x04U`\xC45`\x05U`\xE45`\x06U\x81k\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\xA0\x1B\x93\x16\x83`\x07T\x16\x17`\x07Ua\x01$5`\x08U\x16\x90`\tT\x16\x17`\tU\x81Q\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x04\xDEWa\x03\xC0\x83a\x03\xBB`\nTa\x0B\xEBV[a\x0CEV[` \x90`\x1F\x84\x11`\x01\x14a\x04lW\x92\x80a\x03\xF2\x92`\xFF\x95_\x92a\x04aW[PP\x81`\x01\x1B\x91_\x19\x90`\x03\x1B\x1C\x19\x16\x17\x90V[`\nU[a\x03\xFF3a\x0C\xCAV[`@\x1C\x16\x15a\x04\nW\0[h\xFF\0\0\0\0\0\0\0\0\x19_\x80Q` a\r1\x839\x81Q\x91RT\x16_\x80Q` a\r1\x839\x81Q\x91RU\x7F\xC7\xF5\x05\xB2\xF3q\xAE!u\xEEI\x13\xF4I\x9E\x1F&3\xA7\xB5\x93c!\xEE\xD1\xCD\xAE\xB6\x11Q\x81\xD2` `@Q`\x01\x81R\xA1\0[\x01Q\x90P\x85\x80a\x03\xDEV[\x90`\x1F\x19\x84\x16\x91`\n_R_\x80Q` a\r\x11\x839\x81Q\x91R\x92_[\x81\x81\x10a\x04\xC6WP\x91`\x01\x93\x91\x86`\xFF\x97\x94\x10a\x04\xAEW[PPP\x81\x1B\x01`\nUa\x03\xF6V[\x01Q_\x19`\xF8\x84`\x03\x1B\x16\x1C\x19\x16\x90U\x84\x80\x80a\x04\xA0V[\x92\x93` `\x01\x81\x92\x87\x86\x01Q\x81U\x01\x95\x01\x93\x01a\x04\x88V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`#`$\x82\x01R\x7FRollup owner cannot be zero addr`D\x82\x01Rbess`\xE8\x1B`d\x82\x01R`\x84\x90\xFD[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`*`$\x82\x01R\x7FSequencing contract address cann`D\x82\x01Riot be zero`\xB0\x1B`d\x82\x01R`\x84\x90\xFD[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`%`$\x82\x01R\x7FArbitrum inbox address cannot be`D\x82\x01Rd zero`\xD8\x1B`d\x82\x01R`\x84\x90\xFD[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FArbitrum bridge address cannot b`D\x82\x01Ree zero`\xD0\x1B`d\x82\x01R`\x84\x90\xFD[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x17`$\x82\x01R\x7FChain ID cannot be zero\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x90\xFD[h\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x87\x16h\x01\0\0\0\0\0\0\0\x01\x17_\x80Q` a\r1\x839\x81Q\x91RUa\x02\xDFV[`@Qc\xF9.\xE8\xA9`\xE0\x1B\x81R`\x04\x90\xFD[\x90P\x15\x89a\x02\xAFV[0;\x15\x91Pa\x02\xA7V[P`\xFF\x87`@\x1C\x16\x15a\x02\x92V[4a\x012W_6`\x03\x19\x01\x12a\x012W`\x07T`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x90\xF3[4a\x012W_6`\x03\x19\x01\x12a\x012W` `\xFF`\x03T\x16`@Q\x90\x15\x15\x81R\xF3[4a\x012W_6`\x03\x19\x01\x12a\x012W` `\x02T`@Q\x90\x81R\xF3[4a\x012W_6`\x03\x19\x01\x12a\x012W`\x04T`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x90\xF3[4a\x012W_6`\x03\x19\x01\x12a\x012W` `\x08T`@Q\x90\x81R\xF3[4a\x012W_6`\x03\x19\x01\x12a\x012W_T`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x90\xF3[4a\x012W_6`\x03\x19\x01\x12a\x012W` `\x01T`@Q\x90\x81R\xF3[4a\x012W_6`\x03\x19\x01\x12a\x012Wa\x07\xEEa\x0C\x9FV[_\x80T`\x01`\x01`\xA0\x1B\x03\x19\x81\x16\x82U`\x01`\x01`\xA0\x1B\x03\x16\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x82\x80\xA3\0[4a\x012W_6`\x03\x19\x01\x12a\x012W`\x03T`@Q`\x08\x91\x90\x91\x1C`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x90\xF3[4a\x012W_6`\x03\x19\x01\x12a\x012W`@Q_`\nT\x91a\x08z\x83a\x0B\xEBV[\x92\x83\x82R` \x93\x84\x80\x84\x01\x92`\x01\x90`\x01\x81\x16\x90\x81_\x14a\t WP`\x01\x14a\x08\xD8W[PPPa\x08\xAF\x82`@\x94\x03\x83a\x0C#V[\x82Q\x93\x84\x92\x81\x84RQ\x91\x82\x80\x92\x85\x01R\x84\x84\x01^_\x82\x82\x01\x84\x01R`\x1F\x01`\x1F\x19\x16\x81\x01\x03\x01\x90\xF3[\x91\x90\x94P`\n_R_\x80Q` a\r\x11\x839\x81Q\x91R\x91_\x92[\x82\x84\x10a\t\rWPPP\x82\x01\x90\x92\x01\x91a\x08\xAF\x84`@a\x08\x9EV[\x80T\x86\x85\x01\x88\x01R\x92\x86\x01\x92\x81\x01a\x08\xF2V[`\xFF\x19\x16\x85RPP\x90\x15\x15`\x05\x1B\x83\x01\x01\x92Pa\x08\xAF\x84`@a\x08\x9EV[4a\x012W` \x80`\x03\x196\x01\x12a\x012W`\x045\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x81\x83\x11a\x012W6`#\x84\x01\x12\x15a\x012W\x82`\x04\x015\x91\x82\x11a\x012W`$6`$\x84\x86\x01\x01\x11a\x012Wa\t\x92a\x0C\x9FV[a\t\xA1\x83a\x03\xBB`\nTa\x0B\xEBV[_\x91`\x1F\x84\x11`\x01\x14a\n3WPP\x7F\x024\xA4\xE9\x10\xF2\xB1\xE6\x18\xF2\xC9;\xE3\x16\xEC\x0C\x7F@\xE1\xAF#\xFE3\xF9\xFB\xA2\xC5\xBB8\x8A\x95\xF2\x92\x82a\t\xF7\x81`$\x95`@\x95_\x91a\n&W[P\x81`\x01\x1B\x91_\x19\x90`\x03\x1B\x1C\x19\x16\x17\x90V[`\nU[\x80\x83Q\x94\x85\x93` \x85R\x82` \x86\x01R\x01\x84\x84\x017_\x82\x82\x01\x84\x01R`\x1F\x01`\x1F\x19\x16\x81\x01\x03\x01\x90\xA1\0[\x87\x91P\x85\x01\x015\x88a\t\xE4V[`\n_\x90\x81R_\x80Q` a\r\x11\x839\x81Q\x91R\x93\x92`\x1F\x19\x86\x16\x92\x90[\x83\x83\x10a\n\xB7WPPP\x92`@\x92\x7F\x024\xA4\xE9\x10\xF2\xB1\xE6\x18\xF2\xC9;\xE3\x16\xEC\x0C\x7F@\xE1\xAF#\xFE3\xF9\xFB\xA2\xC5\xBB8\x8A\x95\xF2\x95\x92\x82`$\x96\x10a\n\x9CW[PP`\x01\x81\x81\x1B\x01`\nUa\t\xFBV[\x83\x01\x85\x015_\x19`\x03\x84\x90\x1B`\xF8\x16\x1C\x19\x16\x90U\x85\x80a\n\x8CV[\x90\x80`\x01\x86\x97\x84\x83\x96\x98\x8C\x01\x015\x81U\x01\x96\x01\x94\x01\x91\x90a\nQV[4a\x012W_6`\x03\x19\x01\x12a\x012W` `\x05T`@Q\x90\x81R\xF3[4a\x012W_6`\x03\x19\x01\x12a\x012W`\tT`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x90\xF3[4a\x012W` 6`\x03\x19\x01\x12a\x012Wa\x0B1a\x0B\xD5V[a\x0B9a\x0C\x9FV[`\x01`\x01`\xA0\x1B\x03\x16\x80\x15a\x0B\x80W`\t\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16\x82\x17\x90U\x7F\x88)\xBE\xE4f\x83`\x8D_\xD8\x0E$<\x0F\xAE\x04\xD1)\xCE\x17/p\xDB\x10!\xC1\x12\x80t\xA6\xF4\xD9_\x80\xA2\0[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`'`$\x82\x01R\x7FNew rollup owner cannot be zero `D\x82\x01Rfaddress`\xC8\x1B`d\x82\x01R`\x84\x90\xFD[`\x045\x90`\x01`\x01`\xA0\x1B\x03\x82\x16\x82\x03a\x012WV[\x90`\x01\x82\x81\x1C\x92\x16\x80\x15a\x0C\x19W[` \x83\x10\x14a\x0C\x05WV[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x91`\x7F\x16\x91a\x0B\xFAV[\x90`\x1F\x80\x19\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x04\xDEW`@RV[`\x1F\x81\x11a\x0CQWPPV[`\n_R_\x80Q` a\r\x11\x839\x81Q\x91R\x90` `\x1F\x84\x01`\x05\x1C\x83\x01\x93\x10a\x0C\x95W[`\x1F\x01`\x05\x1C\x01\x90[\x81\x81\x10a\x0C\x8AWPPV[_\x81U`\x01\x01a\x0C\x7FV[\x90\x91P\x81\x90a\x0CvV[_T`\x01`\x01`\xA0\x1B\x03\x163\x03a\x0C\xB2WV[`@Qc\x11\x8C\xDA\xA7`\xE0\x1B\x81R3`\x04\x82\x01R`$\x90\xFD[_\x80T`\x01`\x01`\xA0\x1B\x03\x92\x83\x16`\x01`\x01`\xA0\x1B\x03\x19\x82\x16\x81\x17\x83U\x92\x16\x90\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x90\x80\xA3V\xFE\xC6Z{\xB8\xD65\x1C\x1C\xF7\x0C\x95\xA3\x16\xCCj\x92\x83\x9C\x98f\x82\xD9\x8B\xC3_\x95\x8FH\x83\xF9\xD2\xA8\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0\xA2dipfsX\"\x12  \xD3}\x97\xBD\xE0\x07N\xA0n\xE0|2\xCE\x86\xF3>a\n1\xDB\xDE`\xB2\xC2B\x1D\0}6\xE7\xA6dsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610011575f80fd5b5f3560e01c80632a84b0f014610b1857806341fc712d14610af057806357d1ba2514610ad357806362c73caa1461093e57806366a1d108146108595780636edd6c091461082d578063715018a6146107d657806385e1f4d0146107b95780638da5cb5b14610792578063a3c6e1e714610775578063aa6a43d81461074d578063acc32b3514610730578063b97aba3e1461070e578063bf6db6f8146106e6578063cdad39fc14610178578063d1f4737c1461015b578063e79388e6146101365763f2fde38b146100df575f80fd5b34610132576020366003190112610132576100f8610bd5565b610100610c9f565b6001600160a01b0381161561011a5761011890610cca565b005b604051631e4fbdf760e01b81525f6004820152602490fd5b5f80fd5b34610132575f36600319011261013257602060ff60045460a01c166040519015158152f35b34610132575f366003190112610132576020600654604051908152f35b3461013257610180366003190112610132576044358015158103610132576001600160a01b039060643580831690036101325760843582811681036101325760a435928315158403610132576101043591818316830361013257610144359082821682036101325767ffffffffffffffff610164351161013257366023610164350112156101325767ffffffffffffffff6101643560040135116104de57604051956102356004610164350135601f01601f191660200188610c23565b60046101643590810135808952369101602401116101325761016435600401356024610164350160208901375f60206101643560040135890101525f80516020610d31833981519152549567ffffffffffffffff871615806106d8575b600167ffffffffffffffff89161490816106ce575b1590816106c5575b506106b357600167ffffffffffffffff198816175f80516020610d318339815191525560ff8760401c1615610687575b60043515610642578460643516156105ee578483161561059b578486161561054357848416156104f257600435600155602435600255600354906affffffffffffffffffffff60a81b918260ff610100600160a81b0360643560081b169315151691161717600355846004549260ff60a01b90151560a01b1693169116171760045560c43560055560e435600655816bffffffffffffffffffffffff60a01b9316836007541617600755610124356008551690600954161760095581519167ffffffffffffffff83116104de576103c0836103bb600a54610beb565b610c45565b602090601f841160011461046c5792806103f29260ff955f92610461575b50508160011b915f199060031b1c19161790565b600a555b6103ff33610cca565b60401c161561040a57005b68ff0000000000000000195f80516020610d3183398151915254165f80516020610d31833981519152557fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2602060405160018152a1005b0151905085806103de565b90601f19841691600a5f525f80516020610d11833981519152925f5b8181106104c6575091600193918660ff9794106104ae575b505050811b01600a556103f6565b01515f1960f88460031b161c191690558480806104a0565b92936020600181928786015181550195019301610488565b634e487b7160e01b5f52604160045260245ffd5b60405162461bcd60e51b815260206004820152602360248201527f526f6c6c7570206f776e65722063616e6e6f74206265207a65726f206164647260448201526265737360e81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602a60248201527f53657175656e63696e6720636f6e747261637420616464726573732063616e6e6044820152696f74206265207a65726f60b01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602560248201527f417262697472756d20696e626f7820616464726573732063616e6e6f74206265604482015264207a65726f60d81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602660248201527f417262697472756d2062726964676520616464726573732063616e6e6f74206260448201526565207a65726f60d01b6064820152608490fd5b60405162461bcd60e51b815260206004820152601760248201527f436861696e2049442063616e6e6f74206265207a65726f0000000000000000006044820152606490fd5b68ffffffffffffffffff19871668010000000000000001175f80516020610d31833981519152556102df565b60405163f92ee8a960e01b8152600490fd5b905015896102af565b303b1591506102a7565b5060ff8760401c1615610292565b34610132575f366003190112610132576007546040516001600160a01b039091168152602090f35b34610132575f36600319011261013257602060ff600354166040519015158152f35b34610132575f366003190112610132576020600254604051908152f35b34610132575f366003190112610132576004546040516001600160a01b039091168152602090f35b34610132575f366003190112610132576020600854604051908152f35b34610132575f366003190112610132575f546040516001600160a01b039091168152602090f35b34610132575f366003190112610132576020600154604051908152f35b34610132575f366003190112610132576107ee610c9f565b5f80546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b34610132575f3660031901126101325760035460405160089190911c6001600160a01b03168152602090f35b34610132575f366003190112610132576040515f600a549161087a83610beb565b9283825260209384808401926001906001811690815f1461092057506001146108d8575b5050506108af826040940383610c23565b825193849281845251918280928501528484015e5f828201840152601f01601f19168101030190f35b91909450600a5f525f80516020610d11833981519152915f925b82841061090d575050508201909201916108af84604061089e565b80548685018801529286019281016108f2565b60ff19168552505090151560051b83010192506108af84604061089e565b3461013257602080600319360112610132576004359067ffffffffffffffff908183116101325736602384011215610132578260040135918211610132576024366024848601011161013257610992610c9f565b6109a1836103bb600a54610beb565b5f91601f8411600114610a335750507f0234a4e910f2b1e618f2c93be316ec0c7f40e1af23fe33f9fba2c5bb388a95f292826109f7816024956040955f91610a26575b508160011b915f199060031b1c19161790565b600a555b8083519485936020855282602086015201848401375f828201840152601f01601f19168101030190a1005b87915085010135886109e4565b600a5f9081525f80516020610d118339815191529392601f19861692905b838310610ab757505050926040927f0234a4e910f2b1e618f2c93be316ec0c7f40e1af23fe33f9fba2c5bb388a95f295928260249610610a9c575b5050600181811b01600a556109fb565b83018501355f19600384901b60f8161c191690558580610a8c565b908060018697848396988c010135815501960194019190610a51565b34610132575f366003190112610132576020600554604051908152f35b34610132575f366003190112610132576009546040516001600160a01b039091168152602090f35b3461013257602036600319011261013257610b31610bd5565b610b39610c9f565b6001600160a01b03168015610b8057600980546001600160a01b031916821790557f8829bee46683608d5fd80e243c0fae04d129ce172f70db1021c1128074a6f4d95f80a2005b60405162461bcd60e51b815260206004820152602760248201527f4e657720726f6c6c7570206f776e65722063616e6e6f74206265207a65726f206044820152666164647265737360c81b6064820152608490fd5b600435906001600160a01b038216820361013257565b90600182811c92168015610c19575b6020831014610c0557565b634e487b7160e01b5f52602260045260245ffd5b91607f1691610bfa565b90601f8019910116810190811067ffffffffffffffff8211176104de57604052565b601f8111610c51575050565b600a5f525f80516020610d11833981519152906020601f840160051c83019310610c95575b601f0160051c01905b818110610c8a575050565b5f8155600101610c7f565b9091508190610c76565b5f546001600160a01b03163303610cb257565b60405163118cdaa760e01b8152336004820152602490fd5b5f80546001600160a01b039283166001600160a01b03198216811783559216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a356fec65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8f0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00a264697066735822122020d37d97bde0074ea06ee07c32ce86f33e610a31dbde60b2c2421d007d36e7a664736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x11W_\x80\xFD[_5`\xE0\x1C\x80c*\x84\xB0\xF0\x14a\x0B\x18W\x80cA\xFCq-\x14a\n\xF0W\x80cW\xD1\xBA%\x14a\n\xD3W\x80cb\xC7<\xAA\x14a\t>W\x80cf\xA1\xD1\x08\x14a\x08YW\x80cn\xDDl\t\x14a\x08-W\x80cqP\x18\xA6\x14a\x07\xD6W\x80c\x85\xE1\xF4\xD0\x14a\x07\xB9W\x80c\x8D\xA5\xCB[\x14a\x07\x92W\x80c\xA3\xC6\xE1\xE7\x14a\x07uW\x80c\xAAjC\xD8\x14a\x07MW\x80c\xAC\xC3+5\x14a\x070W\x80c\xB9z\xBA>\x14a\x07\x0EW\x80c\xBFm\xB6\xF8\x14a\x06\xE6W\x80c\xCD\xAD9\xFC\x14a\x01xW\x80c\xD1\xF4s|\x14a\x01[W\x80c\xE7\x93\x88\xE6\x14a\x016Wc\xF2\xFD\xE3\x8B\x14a\0\xDFW_\x80\xFD[4a\x012W` 6`\x03\x19\x01\x12a\x012Wa\0\xF8a\x0B\xD5V[a\x01\0a\x0C\x9FV[`\x01`\x01`\xA0\x1B\x03\x81\x16\x15a\x01\x1AWa\x01\x18\x90a\x0C\xCAV[\0[`@Qc\x1EO\xBD\xF7`\xE0\x1B\x81R_`\x04\x82\x01R`$\x90\xFD[_\x80\xFD[4a\x012W_6`\x03\x19\x01\x12a\x012W` `\xFF`\x04T`\xA0\x1C\x16`@Q\x90\x15\x15\x81R\xF3[4a\x012W_6`\x03\x19\x01\x12a\x012W` `\x06T`@Q\x90\x81R\xF3[4a\x012Wa\x01\x806`\x03\x19\x01\x12a\x012W`D5\x80\x15\x15\x81\x03a\x012W`\x01`\x01`\xA0\x1B\x03\x90`d5\x80\x83\x16\x90\x03a\x012W`\x845\x82\x81\x16\x81\x03a\x012W`\xA45\x92\x83\x15\x15\x84\x03a\x012Wa\x01\x045\x91\x81\x83\x16\x83\x03a\x012Wa\x01D5\x90\x82\x82\x16\x82\x03a\x012Wg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x01d5\x11a\x012W6`#a\x01d5\x01\x12\x15a\x012Wg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x01d5`\x04\x015\x11a\x04\xDEW`@Q\x95a\x025`\x04a\x01d5\x015`\x1F\x01`\x1F\x19\x16` \x01\x88a\x0C#V[`\x04a\x01d5\x90\x81\x015\x80\x89R6\x91\x01`$\x01\x11a\x012Wa\x01d5`\x04\x015`$a\x01d5\x01` \x89\x017_` a\x01d5`\x04\x015\x89\x01\x01R_\x80Q` a\r1\x839\x81Q\x91RT\x95g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x87\x16\x15\x80a\x06\xD8W[`\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x89\x16\x14\x90\x81a\x06\xCEW[\x15\x90\x81a\x06\xC5W[Pa\x06\xB3W`\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x88\x16\x17_\x80Q` a\r1\x839\x81Q\x91RU`\xFF\x87`@\x1C\x16\x15a\x06\x87W[`\x045\x15a\x06BW\x84`d5\x16\x15a\x05\xEEW\x84\x83\x16\x15a\x05\x9BW\x84\x86\x16\x15a\x05CW\x84\x84\x16\x15a\x04\xF2W`\x045`\x01U`$5`\x02U`\x03T\x90j\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\xA8\x1B\x91\x82`\xFFa\x01\0`\x01`\xA8\x1B\x03`d5`\x08\x1B\x16\x93\x15\x15\x16\x91\x16\x17\x17`\x03U\x84`\x04T\x92`\xFF`\xA0\x1B\x90\x15\x15`\xA0\x1B\x16\x93\x16\x91\x16\x17\x17`\x04U`\xC45`\x05U`\xE45`\x06U\x81k\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\xA0\x1B\x93\x16\x83`\x07T\x16\x17`\x07Ua\x01$5`\x08U\x16\x90`\tT\x16\x17`\tU\x81Q\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x04\xDEWa\x03\xC0\x83a\x03\xBB`\nTa\x0B\xEBV[a\x0CEV[` \x90`\x1F\x84\x11`\x01\x14a\x04lW\x92\x80a\x03\xF2\x92`\xFF\x95_\x92a\x04aW[PP\x81`\x01\x1B\x91_\x19\x90`\x03\x1B\x1C\x19\x16\x17\x90V[`\nU[a\x03\xFF3a\x0C\xCAV[`@\x1C\x16\x15a\x04\nW\0[h\xFF\0\0\0\0\0\0\0\0\x19_\x80Q` a\r1\x839\x81Q\x91RT\x16_\x80Q` a\r1\x839\x81Q\x91RU\x7F\xC7\xF5\x05\xB2\xF3q\xAE!u\xEEI\x13\xF4I\x9E\x1F&3\xA7\xB5\x93c!\xEE\xD1\xCD\xAE\xB6\x11Q\x81\xD2` `@Q`\x01\x81R\xA1\0[\x01Q\x90P\x85\x80a\x03\xDEV[\x90`\x1F\x19\x84\x16\x91`\n_R_\x80Q` a\r\x11\x839\x81Q\x91R\x92_[\x81\x81\x10a\x04\xC6WP\x91`\x01\x93\x91\x86`\xFF\x97\x94\x10a\x04\xAEW[PPP\x81\x1B\x01`\nUa\x03\xF6V[\x01Q_\x19`\xF8\x84`\x03\x1B\x16\x1C\x19\x16\x90U\x84\x80\x80a\x04\xA0V[\x92\x93` `\x01\x81\x92\x87\x86\x01Q\x81U\x01\x95\x01\x93\x01a\x04\x88V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`#`$\x82\x01R\x7FRollup owner cannot be zero addr`D\x82\x01Rbess`\xE8\x1B`d\x82\x01R`\x84\x90\xFD[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`*`$\x82\x01R\x7FSequencing contract address cann`D\x82\x01Riot be zero`\xB0\x1B`d\x82\x01R`\x84\x90\xFD[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`%`$\x82\x01R\x7FArbitrum inbox address cannot be`D\x82\x01Rd zero`\xD8\x1B`d\x82\x01R`\x84\x90\xFD[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FArbitrum bridge address cannot b`D\x82\x01Ree zero`\xD0\x1B`d\x82\x01R`\x84\x90\xFD[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x17`$\x82\x01R\x7FChain ID cannot be zero\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x90\xFD[h\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x87\x16h\x01\0\0\0\0\0\0\0\x01\x17_\x80Q` a\r1\x839\x81Q\x91RUa\x02\xDFV[`@Qc\xF9.\xE8\xA9`\xE0\x1B\x81R`\x04\x90\xFD[\x90P\x15\x89a\x02\xAFV[0;\x15\x91Pa\x02\xA7V[P`\xFF\x87`@\x1C\x16\x15a\x02\x92V[4a\x012W_6`\x03\x19\x01\x12a\x012W`\x07T`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x90\xF3[4a\x012W_6`\x03\x19\x01\x12a\x012W` `\xFF`\x03T\x16`@Q\x90\x15\x15\x81R\xF3[4a\x012W_6`\x03\x19\x01\x12a\x012W` `\x02T`@Q\x90\x81R\xF3[4a\x012W_6`\x03\x19\x01\x12a\x012W`\x04T`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x90\xF3[4a\x012W_6`\x03\x19\x01\x12a\x012W` `\x08T`@Q\x90\x81R\xF3[4a\x012W_6`\x03\x19\x01\x12a\x012W_T`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x90\xF3[4a\x012W_6`\x03\x19\x01\x12a\x012W` `\x01T`@Q\x90\x81R\xF3[4a\x012W_6`\x03\x19\x01\x12a\x012Wa\x07\xEEa\x0C\x9FV[_\x80T`\x01`\x01`\xA0\x1B\x03\x19\x81\x16\x82U`\x01`\x01`\xA0\x1B\x03\x16\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x82\x80\xA3\0[4a\x012W_6`\x03\x19\x01\x12a\x012W`\x03T`@Q`\x08\x91\x90\x91\x1C`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x90\xF3[4a\x012W_6`\x03\x19\x01\x12a\x012W`@Q_`\nT\x91a\x08z\x83a\x0B\xEBV[\x92\x83\x82R` \x93\x84\x80\x84\x01\x92`\x01\x90`\x01\x81\x16\x90\x81_\x14a\t WP`\x01\x14a\x08\xD8W[PPPa\x08\xAF\x82`@\x94\x03\x83a\x0C#V[\x82Q\x93\x84\x92\x81\x84RQ\x91\x82\x80\x92\x85\x01R\x84\x84\x01^_\x82\x82\x01\x84\x01R`\x1F\x01`\x1F\x19\x16\x81\x01\x03\x01\x90\xF3[\x91\x90\x94P`\n_R_\x80Q` a\r\x11\x839\x81Q\x91R\x91_\x92[\x82\x84\x10a\t\rWPPP\x82\x01\x90\x92\x01\x91a\x08\xAF\x84`@a\x08\x9EV[\x80T\x86\x85\x01\x88\x01R\x92\x86\x01\x92\x81\x01a\x08\xF2V[`\xFF\x19\x16\x85RPP\x90\x15\x15`\x05\x1B\x83\x01\x01\x92Pa\x08\xAF\x84`@a\x08\x9EV[4a\x012W` \x80`\x03\x196\x01\x12a\x012W`\x045\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x81\x83\x11a\x012W6`#\x84\x01\x12\x15a\x012W\x82`\x04\x015\x91\x82\x11a\x012W`$6`$\x84\x86\x01\x01\x11a\x012Wa\t\x92a\x0C\x9FV[a\t\xA1\x83a\x03\xBB`\nTa\x0B\xEBV[_\x91`\x1F\x84\x11`\x01\x14a\n3WPP\x7F\x024\xA4\xE9\x10\xF2\xB1\xE6\x18\xF2\xC9;\xE3\x16\xEC\x0C\x7F@\xE1\xAF#\xFE3\xF9\xFB\xA2\xC5\xBB8\x8A\x95\xF2\x92\x82a\t\xF7\x81`$\x95`@\x95_\x91a\n&W[P\x81`\x01\x1B\x91_\x19\x90`\x03\x1B\x1C\x19\x16\x17\x90V[`\nU[\x80\x83Q\x94\x85\x93` \x85R\x82` \x86\x01R\x01\x84\x84\x017_\x82\x82\x01\x84\x01R`\x1F\x01`\x1F\x19\x16\x81\x01\x03\x01\x90\xA1\0[\x87\x91P\x85\x01\x015\x88a\t\xE4V[`\n_\x90\x81R_\x80Q` a\r\x11\x839\x81Q\x91R\x93\x92`\x1F\x19\x86\x16\x92\x90[\x83\x83\x10a\n\xB7WPPP\x92`@\x92\x7F\x024\xA4\xE9\x10\xF2\xB1\xE6\x18\xF2\xC9;\xE3\x16\xEC\x0C\x7F@\xE1\xAF#\xFE3\xF9\xFB\xA2\xC5\xBB8\x8A\x95\xF2\x95\x92\x82`$\x96\x10a\n\x9CW[PP`\x01\x81\x81\x1B\x01`\nUa\t\xFBV[\x83\x01\x85\x015_\x19`\x03\x84\x90\x1B`\xF8\x16\x1C\x19\x16\x90U\x85\x80a\n\x8CV[\x90\x80`\x01\x86\x97\x84\x83\x96\x98\x8C\x01\x015\x81U\x01\x96\x01\x94\x01\x91\x90a\nQV[4a\x012W_6`\x03\x19\x01\x12a\x012W` `\x05T`@Q\x90\x81R\xF3[4a\x012W_6`\x03\x19\x01\x12a\x012W`\tT`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x90\xF3[4a\x012W` 6`\x03\x19\x01\x12a\x012Wa\x0B1a\x0B\xD5V[a\x0B9a\x0C\x9FV[`\x01`\x01`\xA0\x1B\x03\x16\x80\x15a\x0B\x80W`\t\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16\x82\x17\x90U\x7F\x88)\xBE\xE4f\x83`\x8D_\xD8\x0E$<\x0F\xAE\x04\xD1)\xCE\x17/p\xDB\x10!\xC1\x12\x80t\xA6\xF4\xD9_\x80\xA2\0[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`'`$\x82\x01R\x7FNew rollup owner cannot be zero `D\x82\x01Rfaddress`\xC8\x1B`d\x82\x01R`\x84\x90\xFD[`\x045\x90`\x01`\x01`\xA0\x1B\x03\x82\x16\x82\x03a\x012WV[\x90`\x01\x82\x81\x1C\x92\x16\x80\x15a\x0C\x19W[` \x83\x10\x14a\x0C\x05WV[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x91`\x7F\x16\x91a\x0B\xFAV[\x90`\x1F\x80\x19\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x04\xDEW`@RV[`\x1F\x81\x11a\x0CQWPPV[`\n_R_\x80Q` a\r\x11\x839\x81Q\x91R\x90` `\x1F\x84\x01`\x05\x1C\x83\x01\x93\x10a\x0C\x95W[`\x1F\x01`\x05\x1C\x01\x90[\x81\x81\x10a\x0C\x8AWPPV[_\x81U`\x01\x01a\x0C\x7FV[\x90\x91P\x81\x90a\x0CvV[_T`\x01`\x01`\xA0\x1B\x03\x163\x03a\x0C\xB2WV[`@Qc\x11\x8C\xDA\xA7`\xE0\x1B\x81R3`\x04\x82\x01R`$\x90\xFD[_\x80T`\x01`\x01`\xA0\x1B\x03\x92\x83\x16`\x01`\x01`\xA0\x1B\x03\x19\x82\x16\x81\x17\x83U\x92\x16\x90\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x90\x80\xA3V\xFE\xC6Z{\xB8\xD65\x1C\x1C\xF7\x0C\x95\xA3\x16\xCCj\x92\x83\x9C\x98f\x82\xD9\x8B\xC3_\x95\x8FH\x83\xF9\xD2\xA8\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0\xA2dipfsX\"\x12  \xD3}\x97\xBD\xE0\x07N\xA0n\xE0|2\xCE\x86\xF3>a\n1\xDB\xDE`\xB2\xC2B\x1D\0}6\xE7\xA6dsolcC\0\x08\x19\x003",
    );
    /**Custom error with signature `InvalidInitialization()` and selector `0xf92ee8a9`.
```solidity
error InvalidInitialization();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidInitialization {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidInitialization> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidInitialization) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidInitialization {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidInitialization {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidInitialization()";
            const SELECTOR: [u8; 4] = [249u8, 46u8, 232u8, 169u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `NotInitializing()` and selector `0xd7e6bcf8`.
```solidity
error NotInitializing();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotInitializing {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotInitializing> for UnderlyingRustTuple<'_> {
            fn from(value: NotInitializing) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotInitializing {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotInitializing {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotInitializing()";
            const SELECTOR: [u8; 4] = [215u8, 230u8, 188u8, 248u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `OwnableInvalidOwner(address)` and selector `0x1e4fbdf7`.
```solidity
error OwnableInvalidOwner(address owner);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableInvalidOwner {
        pub owner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableInvalidOwner> for UnderlyingRustTuple<'_> {
            fn from(value: OwnableInvalidOwner) -> Self {
                (value.owner,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for OwnableInvalidOwner {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { owner: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableInvalidOwner {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableInvalidOwner(address)";
            const SELECTOR: [u8; 4] = [30u8, 79u8, 189u8, 247u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `OwnableUnauthorizedAccount(address)` and selector `0x118cdaa7`.
```solidity
error OwnableUnauthorizedAccount(address account);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableUnauthorizedAccount {
        pub account: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: OwnableUnauthorizedAccount) -> Self {
                (value.account,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for OwnableUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { account: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableUnauthorizedAccount(address)";
            const SELECTOR: [u8; 4] = [17u8, 140u8, 218u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
        }
    };
    /**Event with signature `DefaultSequencingChainRpcUrlUpdated(string)` and selector `0x0234a4e910f2b1e618f2c93be316ec0c7f40e1af23fe33f9fba2c5bb388a95f2`.
```solidity
event DefaultSequencingChainRpcUrlUpdated(string newRpcUrl);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct DefaultSequencingChainRpcUrlUpdated {
        #[allow(missing_docs)]
        pub newRpcUrl: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for DefaultSequencingChainRpcUrlUpdated {
            type DataTuple<'a> = (alloy::sol_types::sol_data::String,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "DefaultSequencingChainRpcUrlUpdated(string)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                2u8,
                52u8,
                164u8,
                233u8,
                16u8,
                242u8,
                177u8,
                230u8,
                24u8,
                242u8,
                201u8,
                59u8,
                227u8,
                22u8,
                236u8,
                12u8,
                127u8,
                64u8,
                225u8,
                175u8,
                35u8,
                254u8,
                51u8,
                249u8,
                251u8,
                162u8,
                197u8,
                187u8,
                56u8,
                138u8,
                149u8,
                242u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { newRpcUrl: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.newRpcUrl,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData
        for DefaultSequencingChainRpcUrlUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&DefaultSequencingChainRpcUrlUpdated>
        for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &DefaultSequencingChainRpcUrlUpdated,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `Initialized(uint64)` and selector `0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2`.
```solidity
event Initialized(uint64 version);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Initialized {
        #[allow(missing_docs)]
        pub version: u64,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Initialized {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "Initialized(uint64)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                199u8,
                245u8,
                5u8,
                178u8,
                243u8,
                113u8,
                174u8,
                33u8,
                117u8,
                238u8,
                73u8,
                19u8,
                244u8,
                73u8,
                158u8,
                31u8,
                38u8,
                51u8,
                167u8,
                181u8,
                147u8,
                99u8,
                33u8,
                238u8,
                209u8,
                205u8,
                174u8,
                182u8,
                17u8,
                81u8,
                129u8,
                210u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { version: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.version),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Initialized {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Initialized> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Initialized) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `OwnershipTransferred(address,address)` and selector `0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0`.
```solidity
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct OwnershipTransferred {
        #[allow(missing_docs)]
        pub previousOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OwnershipTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OwnershipTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousOwner: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousOwner.clone(),
                    self.newOwner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousOwner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OwnershipTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OwnershipTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &OwnershipTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RollupOwnerUpdated(address)` and selector `0x8829bee46683608d5fd80e243c0fae04d129ce172f70db1021c1128074a6f4d9`.
```solidity
event RollupOwnerUpdated(address indexed newRollupOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RollupOwnerUpdated {
        #[allow(missing_docs)]
        pub newRollupOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RollupOwnerUpdated {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RollupOwnerUpdated(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                136u8,
                41u8,
                190u8,
                228u8,
                102u8,
                131u8,
                96u8,
                141u8,
                95u8,
                216u8,
                14u8,
                36u8,
                60u8,
                15u8,
                174u8,
                4u8,
                209u8,
                41u8,
                206u8,
                23u8,
                47u8,
                112u8,
                219u8,
                16u8,
                33u8,
                193u8,
                18u8,
                128u8,
                116u8,
                166u8,
                244u8,
                217u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { newRollupOwner: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.newRollupOwner.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newRollupOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RollupOwnerUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RollupOwnerUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RollupOwnerUpdated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {}
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Function with signature `ARBITRUM_BRIDGE_ADDRESS()` and selector `0x6edd6c09`.
```solidity
function ARBITRUM_BRIDGE_ADDRESS() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ARBITRUM_BRIDGE_ADDRESSCall {}
    ///Container type for the return parameters of the [`ARBITRUM_BRIDGE_ADDRESS()`](ARBITRUM_BRIDGE_ADDRESSCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ARBITRUM_BRIDGE_ADDRESSReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ARBITRUM_BRIDGE_ADDRESSCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: ARBITRUM_BRIDGE_ADDRESSCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ARBITRUM_BRIDGE_ADDRESSCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ARBITRUM_BRIDGE_ADDRESSReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: ARBITRUM_BRIDGE_ADDRESSReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ARBITRUM_BRIDGE_ADDRESSReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ARBITRUM_BRIDGE_ADDRESSCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ARBITRUM_BRIDGE_ADDRESSReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ARBITRUM_BRIDGE_ADDRESS()";
            const SELECTOR: [u8; 4] = [110u8, 221u8, 108u8, 9u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `ARBITRUM_IGNORE_DELAYED_MESSAGES()` and selector `0xe79388e6`.
```solidity
function ARBITRUM_IGNORE_DELAYED_MESSAGES() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ARBITRUM_IGNORE_DELAYED_MESSAGESCall {}
    ///Container type for the return parameters of the [`ARBITRUM_IGNORE_DELAYED_MESSAGES()`](ARBITRUM_IGNORE_DELAYED_MESSAGESCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ARBITRUM_IGNORE_DELAYED_MESSAGESReturn {
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ARBITRUM_IGNORE_DELAYED_MESSAGESCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: ARBITRUM_IGNORE_DELAYED_MESSAGESCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ARBITRUM_IGNORE_DELAYED_MESSAGESCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ARBITRUM_IGNORE_DELAYED_MESSAGESReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: ARBITRUM_IGNORE_DELAYED_MESSAGESReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ARBITRUM_IGNORE_DELAYED_MESSAGESReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ARBITRUM_IGNORE_DELAYED_MESSAGESCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ARBITRUM_IGNORE_DELAYED_MESSAGESReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ARBITRUM_IGNORE_DELAYED_MESSAGES()";
            const SELECTOR: [u8; 4] = [231u8, 147u8, 136u8, 230u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `ARBITRUM_INBOX_ADDRESS()` and selector `0xaa6a43d8`.
```solidity
function ARBITRUM_INBOX_ADDRESS() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ARBITRUM_INBOX_ADDRESSCall {}
    ///Container type for the return parameters of the [`ARBITRUM_INBOX_ADDRESS()`](ARBITRUM_INBOX_ADDRESSCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ARBITRUM_INBOX_ADDRESSReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ARBITRUM_INBOX_ADDRESSCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: ARBITRUM_INBOX_ADDRESSCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ARBITRUM_INBOX_ADDRESSCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ARBITRUM_INBOX_ADDRESSReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: ARBITRUM_INBOX_ADDRESSReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ARBITRUM_INBOX_ADDRESSReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ARBITRUM_INBOX_ADDRESSCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ARBITRUM_INBOX_ADDRESSReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ARBITRUM_INBOX_ADDRESS()";
            const SELECTOR: [u8; 4] = [170u8, 106u8, 67u8, 216u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `CHAIN_ID()` and selector `0x85e1f4d0`.
```solidity
function CHAIN_ID() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CHAIN_IDCall {}
    ///Container type for the return parameters of the [`CHAIN_ID()`](CHAIN_IDCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CHAIN_IDReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<CHAIN_IDCall> for UnderlyingRustTuple<'_> {
                fn from(value: CHAIN_IDCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for CHAIN_IDCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<CHAIN_IDReturn> for UnderlyingRustTuple<'_> {
                fn from(value: CHAIN_IDReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for CHAIN_IDReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for CHAIN_IDCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = CHAIN_IDReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "CHAIN_ID()";
            const SELECTOR: [u8; 4] = [133u8, 225u8, 244u8, 208u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `DEFAULT_SEQUENCING_CHAIN_RPC_URL()` and selector `0x66a1d108`.
```solidity
function DEFAULT_SEQUENCING_CHAIN_RPC_URL() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_SEQUENCING_CHAIN_RPC_URLCall {}
    ///Container type for the return parameters of the [`DEFAULT_SEQUENCING_CHAIN_RPC_URL()`](DEFAULT_SEQUENCING_CHAIN_RPC_URLCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_SEQUENCING_CHAIN_RPC_URLReturn {
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_SEQUENCING_CHAIN_RPC_URLCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_SEQUENCING_CHAIN_RPC_URLCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_SEQUENCING_CHAIN_RPC_URLCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_SEQUENCING_CHAIN_RPC_URLReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_SEQUENCING_CHAIN_RPC_URLReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_SEQUENCING_CHAIN_RPC_URLReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for DEFAULT_SEQUENCING_CHAIN_RPC_URLCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = DEFAULT_SEQUENCING_CHAIN_RPC_URLReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "DEFAULT_SEQUENCING_CHAIN_RPC_URL()";
            const SELECTOR: [u8; 4] = [102u8, 161u8, 209u8, 8u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `MINE_EMPTY_BLOCKS()` and selector `0xb97aba3e`.
```solidity
function MINE_EMPTY_BLOCKS() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MINE_EMPTY_BLOCKSCall {}
    ///Container type for the return parameters of the [`MINE_EMPTY_BLOCKS()`](MINE_EMPTY_BLOCKSCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MINE_EMPTY_BLOCKSReturn {
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<MINE_EMPTY_BLOCKSCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: MINE_EMPTY_BLOCKSCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for MINE_EMPTY_BLOCKSCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<MINE_EMPTY_BLOCKSReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: MINE_EMPTY_BLOCKSReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for MINE_EMPTY_BLOCKSReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for MINE_EMPTY_BLOCKSCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = MINE_EMPTY_BLOCKSReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "MINE_EMPTY_BLOCKS()";
            const SELECTOR: [u8; 4] = [185u8, 122u8, 186u8, 62u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `ROLLUP_OWNER()` and selector `0x41fc712d`.
```solidity
function ROLLUP_OWNER() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ROLLUP_OWNERCall {}
    ///Container type for the return parameters of the [`ROLLUP_OWNER()`](ROLLUP_OWNERCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ROLLUP_OWNERReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ROLLUP_OWNERCall> for UnderlyingRustTuple<'_> {
                fn from(value: ROLLUP_OWNERCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ROLLUP_OWNERCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ROLLUP_OWNERReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ROLLUP_OWNERReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ROLLUP_OWNERReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ROLLUP_OWNERCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ROLLUP_OWNERReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ROLLUP_OWNER()";
            const SELECTOR: [u8; 4] = [65u8, 252u8, 113u8, 45u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `SEQUENCING_CONTRACT_ADDRESS()` and selector `0xbf6db6f8`.
```solidity
function SEQUENCING_CONTRACT_ADDRESS() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SEQUENCING_CONTRACT_ADDRESSCall {}
    ///Container type for the return parameters of the [`SEQUENCING_CONTRACT_ADDRESS()`](SEQUENCING_CONTRACT_ADDRESSCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SEQUENCING_CONTRACT_ADDRESSReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SEQUENCING_CONTRACT_ADDRESSCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: SEQUENCING_CONTRACT_ADDRESSCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SEQUENCING_CONTRACT_ADDRESSCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SEQUENCING_CONTRACT_ADDRESSReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: SEQUENCING_CONTRACT_ADDRESSReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SEQUENCING_CONTRACT_ADDRESSReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for SEQUENCING_CONTRACT_ADDRESSCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = SEQUENCING_CONTRACT_ADDRESSReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SEQUENCING_CONTRACT_ADDRESS()";
            const SELECTOR: [u8; 4] = [191u8, 109u8, 182u8, 248u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `SEQUENCING_START_BLOCK()` and selector `0xa3c6e1e7`.
```solidity
function SEQUENCING_START_BLOCK() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SEQUENCING_START_BLOCKCall {}
    ///Container type for the return parameters of the [`SEQUENCING_START_BLOCK()`](SEQUENCING_START_BLOCKCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SEQUENCING_START_BLOCKReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SEQUENCING_START_BLOCKCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: SEQUENCING_START_BLOCKCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SEQUENCING_START_BLOCKCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SEQUENCING_START_BLOCKReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: SEQUENCING_START_BLOCKReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SEQUENCING_START_BLOCKReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for SEQUENCING_START_BLOCKCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = SEQUENCING_START_BLOCKReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SEQUENCING_START_BLOCK()";
            const SELECTOR: [u8; 4] = [163u8, 198u8, 225u8, 231u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `SETTLEMENT_DELAY()` and selector `0x57d1ba25`.
```solidity
function SETTLEMENT_DELAY() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SETTLEMENT_DELAYCall {}
    ///Container type for the return parameters of the [`SETTLEMENT_DELAY()`](SETTLEMENT_DELAYCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SETTLEMENT_DELAYReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SETTLEMENT_DELAYCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: SETTLEMENT_DELAYCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SETTLEMENT_DELAYCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SETTLEMENT_DELAYReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: SETTLEMENT_DELAYReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SETTLEMENT_DELAYReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for SETTLEMENT_DELAYCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = SETTLEMENT_DELAYReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SETTLEMENT_DELAY()";
            const SELECTOR: [u8; 4] = [87u8, 209u8, 186u8, 37u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `SETTLEMENT_START_BLOCK()` and selector `0xd1f4737c`.
```solidity
function SETTLEMENT_START_BLOCK() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SETTLEMENT_START_BLOCKCall {}
    ///Container type for the return parameters of the [`SETTLEMENT_START_BLOCK()`](SETTLEMENT_START_BLOCKCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SETTLEMENT_START_BLOCKReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SETTLEMENT_START_BLOCKCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: SETTLEMENT_START_BLOCKCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SETTLEMENT_START_BLOCKCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SETTLEMENT_START_BLOCKReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: SETTLEMENT_START_BLOCKReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SETTLEMENT_START_BLOCKReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for SETTLEMENT_START_BLOCKCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = SETTLEMENT_START_BLOCKReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SETTLEMENT_START_BLOCK()";
            const SELECTOR: [u8; 4] = [209u8, 244u8, 115u8, 124u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `TARGET_ROLLUP_TYPE()` and selector `0xacc32b35`.
```solidity
function TARGET_ROLLUP_TYPE() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TARGET_ROLLUP_TYPECall {}
    ///Container type for the return parameters of the [`TARGET_ROLLUP_TYPE()`](TARGET_ROLLUP_TYPECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TARGET_ROLLUP_TYPEReturn {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<TARGET_ROLLUP_TYPECall>
            for UnderlyingRustTuple<'_> {
                fn from(value: TARGET_ROLLUP_TYPECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for TARGET_ROLLUP_TYPECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<TARGET_ROLLUP_TYPEReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: TARGET_ROLLUP_TYPEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for TARGET_ROLLUP_TYPEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for TARGET_ROLLUP_TYPECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = TARGET_ROLLUP_TYPEReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "TARGET_ROLLUP_TYPE()";
            const SELECTOR: [u8; 4] = [172u8, 195u8, 43u8, 53u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `initialize(uint256,bytes32,bool,address,address,bool,uint256,uint256,address,uint256,address,string)` and selector `0xcdad39fc`.
```solidity
function initialize(uint256 chainId, bytes32 targetRollupType, bool mineEmptyBlocks, address arbitrumBridgeAddress, address arbitrumInboxAddress, bool arbitrumIgnoreDelayedMessages, uint256 settlementDelay, uint256 settlementStartBlock, address sequencingContractAddress, uint256 sequencingStartBlock, address rollupOwner, string memory sequencingChainRpcUrl) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeCall {
        pub chainId: alloy::sol_types::private::primitives::aliases::U256,
        pub targetRollupType: alloy::sol_types::private::FixedBytes<32>,
        pub mineEmptyBlocks: bool,
        pub arbitrumBridgeAddress: alloy::sol_types::private::Address,
        pub arbitrumInboxAddress: alloy::sol_types::private::Address,
        pub arbitrumIgnoreDelayedMessages: bool,
        pub settlementDelay: alloy::sol_types::private::primitives::aliases::U256,
        pub settlementStartBlock: alloy::sol_types::private::primitives::aliases::U256,
        pub sequencingContractAddress: alloy::sol_types::private::Address,
        pub sequencingStartBlock: alloy::sol_types::private::primitives::aliases::U256,
        pub rollupOwner: alloy::sol_types::private::Address,
        pub sequencingChainRpcUrl: alloy::sol_types::private::String,
    }
    ///Container type for the return parameters of the [`initialize(uint256,bytes32,bool,address,address,bool,uint256,uint256,address,uint256,address,string)`](initializeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::String,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::FixedBytes<32>,
                bool,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                bool,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::String,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeCall> for UnderlyingRustTuple<'_> {
                fn from(value: initializeCall) -> Self {
                    (
                        value.chainId,
                        value.targetRollupType,
                        value.mineEmptyBlocks,
                        value.arbitrumBridgeAddress,
                        value.arbitrumInboxAddress,
                        value.arbitrumIgnoreDelayedMessages,
                        value.settlementDelay,
                        value.settlementStartBlock,
                        value.sequencingContractAddress,
                        value.sequencingStartBlock,
                        value.rollupOwner,
                        value.sequencingChainRpcUrl,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        chainId: tuple.0,
                        targetRollupType: tuple.1,
                        mineEmptyBlocks: tuple.2,
                        arbitrumBridgeAddress: tuple.3,
                        arbitrumInboxAddress: tuple.4,
                        arbitrumIgnoreDelayedMessages: tuple.5,
                        settlementDelay: tuple.6,
                        settlementStartBlock: tuple.7,
                        sequencingContractAddress: tuple.8,
                        sequencingStartBlock: tuple.9,
                        rollupOwner: tuple.10,
                        sequencingChainRpcUrl: tuple.11,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: initializeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for initializeCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::String,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = initializeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "initialize(uint256,bytes32,bool,address,address,bool,uint256,uint256,address,uint256,address,string)";
            const SELECTOR: [u8; 4] = [205u8, 173u8, 57u8, 252u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.chainId),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.targetRollupType),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.mineEmptyBlocks,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.arbitrumBridgeAddress,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.arbitrumInboxAddress,
                    ),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.arbitrumIgnoreDelayedMessages,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.settlementDelay),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.settlementStartBlock),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.sequencingContractAddress,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.sequencingStartBlock),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.rollupOwner,
                    ),
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.sequencingChainRpcUrl,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `owner()` and selector `0x8da5cb5b`.
```solidity
function owner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerCall {}
    ///Container type for the return parameters of the [`owner()`](ownerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "owner()";
            const SELECTOR: [u8; 4] = [141u8, 165u8, 203u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `renounceOwnership()` and selector `0x715018a6`.
```solidity
function renounceOwnership() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipCall {}
    ///Container type for the return parameters of the [`renounceOwnership()`](renounceOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceOwnershipCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceOwnership()";
            const SELECTOR: [u8; 4] = [113u8, 80u8, 24u8, 166u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferOwnership(address)` and selector `0xf2fde38b`.
```solidity
function transferOwnership(address newOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipCall {
        pub newOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferOwnership(address)`](transferOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipCall) -> Self {
                    (value.newOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferOwnershipCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferOwnership(address)";
            const SELECTOR: [u8; 4] = [242u8, 253u8, 227u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newOwner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `updateDefaultSequencingChainRpcUrl(string)` and selector `0x62c73caa`.
```solidity
function updateDefaultSequencingChainRpcUrl(string memory newRpcUrl) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateDefaultSequencingChainRpcUrlCall {
        pub newRpcUrl: alloy::sol_types::private::String,
    }
    ///Container type for the return parameters of the [`updateDefaultSequencingChainRpcUrl(string)`](updateDefaultSequencingChainRpcUrlCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateDefaultSequencingChainRpcUrlReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateDefaultSequencingChainRpcUrlCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateDefaultSequencingChainRpcUrlCall) -> Self {
                    (value.newRpcUrl,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateDefaultSequencingChainRpcUrlCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newRpcUrl: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateDefaultSequencingChainRpcUrlReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateDefaultSequencingChainRpcUrlReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateDefaultSequencingChainRpcUrlReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for updateDefaultSequencingChainRpcUrlCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::String,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = updateDefaultSequencingChainRpcUrlReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "updateDefaultSequencingChainRpcUrl(string)";
            const SELECTOR: [u8; 4] = [98u8, 199u8, 60u8, 170u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.newRpcUrl,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `updateRollupOwner(address)` and selector `0x2a84b0f0`.
```solidity
function updateRollupOwner(address newRollupOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateRollupOwnerCall {
        pub newRollupOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`updateRollupOwner(address)`](updateRollupOwnerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateRollupOwnerReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateRollupOwnerCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateRollupOwnerCall) -> Self {
                    (value.newRollupOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateRollupOwnerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newRollupOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateRollupOwnerReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateRollupOwnerReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateRollupOwnerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for updateRollupOwnerCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = updateRollupOwnerReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "updateRollupOwner(address)";
            const SELECTOR: [u8; 4] = [42u8, 132u8, 176u8, 240u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newRollupOwner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`ChainConfig`](self) function calls.
    pub enum ChainConfigCalls {
        ARBITRUM_BRIDGE_ADDRESS(ARBITRUM_BRIDGE_ADDRESSCall),
        ARBITRUM_IGNORE_DELAYED_MESSAGES(ARBITRUM_IGNORE_DELAYED_MESSAGESCall),
        ARBITRUM_INBOX_ADDRESS(ARBITRUM_INBOX_ADDRESSCall),
        CHAIN_ID(CHAIN_IDCall),
        DEFAULT_SEQUENCING_CHAIN_RPC_URL(DEFAULT_SEQUENCING_CHAIN_RPC_URLCall),
        MINE_EMPTY_BLOCKS(MINE_EMPTY_BLOCKSCall),
        ROLLUP_OWNER(ROLLUP_OWNERCall),
        SEQUENCING_CONTRACT_ADDRESS(SEQUENCING_CONTRACT_ADDRESSCall),
        SEQUENCING_START_BLOCK(SEQUENCING_START_BLOCKCall),
        SETTLEMENT_DELAY(SETTLEMENT_DELAYCall),
        SETTLEMENT_START_BLOCK(SETTLEMENT_START_BLOCKCall),
        TARGET_ROLLUP_TYPE(TARGET_ROLLUP_TYPECall),
        initialize(initializeCall),
        owner(ownerCall),
        renounceOwnership(renounceOwnershipCall),
        transferOwnership(transferOwnershipCall),
        updateDefaultSequencingChainRpcUrl(updateDefaultSequencingChainRpcUrlCall),
        updateRollupOwner(updateRollupOwnerCall),
    }
    #[automatically_derived]
    impl ChainConfigCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [42u8, 132u8, 176u8, 240u8],
            [65u8, 252u8, 113u8, 45u8],
            [87u8, 209u8, 186u8, 37u8],
            [98u8, 199u8, 60u8, 170u8],
            [102u8, 161u8, 209u8, 8u8],
            [110u8, 221u8, 108u8, 9u8],
            [113u8, 80u8, 24u8, 166u8],
            [133u8, 225u8, 244u8, 208u8],
            [141u8, 165u8, 203u8, 91u8],
            [163u8, 198u8, 225u8, 231u8],
            [170u8, 106u8, 67u8, 216u8],
            [172u8, 195u8, 43u8, 53u8],
            [185u8, 122u8, 186u8, 62u8],
            [191u8, 109u8, 182u8, 248u8],
            [205u8, 173u8, 57u8, 252u8],
            [209u8, 244u8, 115u8, 124u8],
            [231u8, 147u8, 136u8, 230u8],
            [242u8, 253u8, 227u8, 139u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ChainConfigCalls {
        const NAME: &'static str = "ChainConfigCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 18usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::ARBITRUM_BRIDGE_ADDRESS(_) => {
                    <ARBITRUM_BRIDGE_ADDRESSCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::ARBITRUM_IGNORE_DELAYED_MESSAGES(_) => {
                    <ARBITRUM_IGNORE_DELAYED_MESSAGESCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::ARBITRUM_INBOX_ADDRESS(_) => {
                    <ARBITRUM_INBOX_ADDRESSCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::CHAIN_ID(_) => <CHAIN_IDCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::DEFAULT_SEQUENCING_CHAIN_RPC_URL(_) => {
                    <DEFAULT_SEQUENCING_CHAIN_RPC_URLCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::MINE_EMPTY_BLOCKS(_) => {
                    <MINE_EMPTY_BLOCKSCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::ROLLUP_OWNER(_) => {
                    <ROLLUP_OWNERCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::SEQUENCING_CONTRACT_ADDRESS(_) => {
                    <SEQUENCING_CONTRACT_ADDRESSCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::SEQUENCING_START_BLOCK(_) => {
                    <SEQUENCING_START_BLOCKCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::SETTLEMENT_DELAY(_) => {
                    <SETTLEMENT_DELAYCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::SETTLEMENT_START_BLOCK(_) => {
                    <SETTLEMENT_START_BLOCKCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::TARGET_ROLLUP_TYPE(_) => {
                    <TARGET_ROLLUP_TYPECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::initialize(_) => {
                    <initializeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::owner(_) => <ownerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::renounceOwnership(_) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferOwnership(_) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::updateDefaultSequencingChainRpcUrl(_) => {
                    <updateDefaultSequencingChainRpcUrlCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::updateRollupOwner(_) => {
                    <updateRollupOwnerCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<ChainConfigCalls>] = &[
                {
                    fn updateRollupOwner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ChainConfigCalls> {
                        <updateRollupOwnerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ChainConfigCalls::updateRollupOwner)
                    }
                    updateRollupOwner
                },
                {
                    fn ROLLUP_OWNER(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ChainConfigCalls> {
                        <ROLLUP_OWNERCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ChainConfigCalls::ROLLUP_OWNER)
                    }
                    ROLLUP_OWNER
                },
                {
                    fn SETTLEMENT_DELAY(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ChainConfigCalls> {
                        <SETTLEMENT_DELAYCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ChainConfigCalls::SETTLEMENT_DELAY)
                    }
                    SETTLEMENT_DELAY
                },
                {
                    fn updateDefaultSequencingChainRpcUrl(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ChainConfigCalls> {
                        <updateDefaultSequencingChainRpcUrlCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ChainConfigCalls::updateDefaultSequencingChainRpcUrl)
                    }
                    updateDefaultSequencingChainRpcUrl
                },
                {
                    fn DEFAULT_SEQUENCING_CHAIN_RPC_URL(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ChainConfigCalls> {
                        <DEFAULT_SEQUENCING_CHAIN_RPC_URLCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ChainConfigCalls::DEFAULT_SEQUENCING_CHAIN_RPC_URL)
                    }
                    DEFAULT_SEQUENCING_CHAIN_RPC_URL
                },
                {
                    fn ARBITRUM_BRIDGE_ADDRESS(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ChainConfigCalls> {
                        <ARBITRUM_BRIDGE_ADDRESSCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ChainConfigCalls::ARBITRUM_BRIDGE_ADDRESS)
                    }
                    ARBITRUM_BRIDGE_ADDRESS
                },
                {
                    fn renounceOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ChainConfigCalls> {
                        <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ChainConfigCalls::renounceOwnership)
                    }
                    renounceOwnership
                },
                {
                    fn CHAIN_ID(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ChainConfigCalls> {
                        <CHAIN_IDCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ChainConfigCalls::CHAIN_ID)
                    }
                    CHAIN_ID
                },
                {
                    fn owner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ChainConfigCalls> {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ChainConfigCalls::owner)
                    }
                    owner
                },
                {
                    fn SEQUENCING_START_BLOCK(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ChainConfigCalls> {
                        <SEQUENCING_START_BLOCKCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ChainConfigCalls::SEQUENCING_START_BLOCK)
                    }
                    SEQUENCING_START_BLOCK
                },
                {
                    fn ARBITRUM_INBOX_ADDRESS(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ChainConfigCalls> {
                        <ARBITRUM_INBOX_ADDRESSCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ChainConfigCalls::ARBITRUM_INBOX_ADDRESS)
                    }
                    ARBITRUM_INBOX_ADDRESS
                },
                {
                    fn TARGET_ROLLUP_TYPE(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ChainConfigCalls> {
                        <TARGET_ROLLUP_TYPECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ChainConfigCalls::TARGET_ROLLUP_TYPE)
                    }
                    TARGET_ROLLUP_TYPE
                },
                {
                    fn MINE_EMPTY_BLOCKS(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ChainConfigCalls> {
                        <MINE_EMPTY_BLOCKSCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ChainConfigCalls::MINE_EMPTY_BLOCKS)
                    }
                    MINE_EMPTY_BLOCKS
                },
                {
                    fn SEQUENCING_CONTRACT_ADDRESS(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ChainConfigCalls> {
                        <SEQUENCING_CONTRACT_ADDRESSCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ChainConfigCalls::SEQUENCING_CONTRACT_ADDRESS)
                    }
                    SEQUENCING_CONTRACT_ADDRESS
                },
                {
                    fn initialize(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ChainConfigCalls> {
                        <initializeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ChainConfigCalls::initialize)
                    }
                    initialize
                },
                {
                    fn SETTLEMENT_START_BLOCK(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ChainConfigCalls> {
                        <SETTLEMENT_START_BLOCKCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ChainConfigCalls::SETTLEMENT_START_BLOCK)
                    }
                    SETTLEMENT_START_BLOCK
                },
                {
                    fn ARBITRUM_IGNORE_DELAYED_MESSAGES(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ChainConfigCalls> {
                        <ARBITRUM_IGNORE_DELAYED_MESSAGESCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ChainConfigCalls::ARBITRUM_IGNORE_DELAYED_MESSAGES)
                    }
                    ARBITRUM_IGNORE_DELAYED_MESSAGES
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ChainConfigCalls> {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ChainConfigCalls::transferOwnership)
                    }
                    transferOwnership
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::ARBITRUM_BRIDGE_ADDRESS(inner) => {
                    <ARBITRUM_BRIDGE_ADDRESSCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ARBITRUM_IGNORE_DELAYED_MESSAGES(inner) => {
                    <ARBITRUM_IGNORE_DELAYED_MESSAGESCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ARBITRUM_INBOX_ADDRESS(inner) => {
                    <ARBITRUM_INBOX_ADDRESSCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::CHAIN_ID(inner) => {
                    <CHAIN_IDCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::DEFAULT_SEQUENCING_CHAIN_RPC_URL(inner) => {
                    <DEFAULT_SEQUENCING_CHAIN_RPC_URLCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::MINE_EMPTY_BLOCKS(inner) => {
                    <MINE_EMPTY_BLOCKSCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ROLLUP_OWNER(inner) => {
                    <ROLLUP_OWNERCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SEQUENCING_CONTRACT_ADDRESS(inner) => {
                    <SEQUENCING_CONTRACT_ADDRESSCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SEQUENCING_START_BLOCK(inner) => {
                    <SEQUENCING_START_BLOCKCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SETTLEMENT_DELAY(inner) => {
                    <SETTLEMENT_DELAYCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SETTLEMENT_START_BLOCK(inner) => {
                    <SETTLEMENT_START_BLOCKCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::TARGET_ROLLUP_TYPE(inner) => {
                    <TARGET_ROLLUP_TYPECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::updateDefaultSequencingChainRpcUrl(inner) => {
                    <updateDefaultSequencingChainRpcUrlCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::updateRollupOwner(inner) => {
                    <updateRollupOwnerCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::ARBITRUM_BRIDGE_ADDRESS(inner) => {
                    <ARBITRUM_BRIDGE_ADDRESSCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ARBITRUM_IGNORE_DELAYED_MESSAGES(inner) => {
                    <ARBITRUM_IGNORE_DELAYED_MESSAGESCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ARBITRUM_INBOX_ADDRESS(inner) => {
                    <ARBITRUM_INBOX_ADDRESSCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::CHAIN_ID(inner) => {
                    <CHAIN_IDCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::DEFAULT_SEQUENCING_CHAIN_RPC_URL(inner) => {
                    <DEFAULT_SEQUENCING_CHAIN_RPC_URLCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::MINE_EMPTY_BLOCKS(inner) => {
                    <MINE_EMPTY_BLOCKSCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ROLLUP_OWNER(inner) => {
                    <ROLLUP_OWNERCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SEQUENCING_CONTRACT_ADDRESS(inner) => {
                    <SEQUENCING_CONTRACT_ADDRESSCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SEQUENCING_START_BLOCK(inner) => {
                    <SEQUENCING_START_BLOCKCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SETTLEMENT_DELAY(inner) => {
                    <SETTLEMENT_DELAYCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SETTLEMENT_START_BLOCK(inner) => {
                    <SETTLEMENT_START_BLOCKCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::TARGET_ROLLUP_TYPE(inner) => {
                    <TARGET_ROLLUP_TYPECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::updateDefaultSequencingChainRpcUrl(inner) => {
                    <updateDefaultSequencingChainRpcUrlCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::updateRollupOwner(inner) => {
                    <updateRollupOwnerCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`ChainConfig`](self) custom errors.
    pub enum ChainConfigErrors {
        InvalidInitialization(InvalidInitialization),
        NotInitializing(NotInitializing),
        OwnableInvalidOwner(OwnableInvalidOwner),
        OwnableUnauthorizedAccount(OwnableUnauthorizedAccount),
    }
    #[automatically_derived]
    impl ChainConfigErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [17u8, 140u8, 218u8, 167u8],
            [30u8, 79u8, 189u8, 247u8],
            [215u8, 230u8, 188u8, 248u8],
            [249u8, 46u8, 232u8, 169u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ChainConfigErrors {
        const NAME: &'static str = "ChainConfigErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 4usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::InvalidInitialization(_) => {
                    <InvalidInitialization as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotInitializing(_) => {
                    <NotInitializing as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableInvalidOwner(_) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableUnauthorizedAccount(_) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<ChainConfigErrors>] = &[
                {
                    fn OwnableUnauthorizedAccount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ChainConfigErrors> {
                        <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ChainConfigErrors::OwnableUnauthorizedAccount)
                    }
                    OwnableUnauthorizedAccount
                },
                {
                    fn OwnableInvalidOwner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ChainConfigErrors> {
                        <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ChainConfigErrors::OwnableInvalidOwner)
                    }
                    OwnableInvalidOwner
                },
                {
                    fn NotInitializing(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ChainConfigErrors> {
                        <NotInitializing as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ChainConfigErrors::NotInitializing)
                    }
                    NotInitializing
                },
                {
                    fn InvalidInitialization(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ChainConfigErrors> {
                        <InvalidInitialization as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ChainConfigErrors::InvalidInitialization)
                    }
                    InvalidInitialization
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::InvalidInitialization(inner) => {
                    <InvalidInitialization as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotInitializing(inner) => {
                    <NotInitializing as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::InvalidInitialization(inner) => {
                    <InvalidInitialization as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotInitializing(inner) => {
                    <NotInitializing as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`ChainConfig`](self) events.
    pub enum ChainConfigEvents {
        DefaultSequencingChainRpcUrlUpdated(DefaultSequencingChainRpcUrlUpdated),
        Initialized(Initialized),
        OwnershipTransferred(OwnershipTransferred),
        RollupOwnerUpdated(RollupOwnerUpdated),
    }
    #[automatically_derived]
    impl ChainConfigEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                2u8,
                52u8,
                164u8,
                233u8,
                16u8,
                242u8,
                177u8,
                230u8,
                24u8,
                242u8,
                201u8,
                59u8,
                227u8,
                22u8,
                236u8,
                12u8,
                127u8,
                64u8,
                225u8,
                175u8,
                35u8,
                254u8,
                51u8,
                249u8,
                251u8,
                162u8,
                197u8,
                187u8,
                56u8,
                138u8,
                149u8,
                242u8,
            ],
            [
                136u8,
                41u8,
                190u8,
                228u8,
                102u8,
                131u8,
                96u8,
                141u8,
                95u8,
                216u8,
                14u8,
                36u8,
                60u8,
                15u8,
                174u8,
                4u8,
                209u8,
                41u8,
                206u8,
                23u8,
                47u8,
                112u8,
                219u8,
                16u8,
                33u8,
                193u8,
                18u8,
                128u8,
                116u8,
                166u8,
                244u8,
                217u8,
            ],
            [
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ],
            [
                199u8,
                245u8,
                5u8,
                178u8,
                243u8,
                113u8,
                174u8,
                33u8,
                117u8,
                238u8,
                73u8,
                19u8,
                244u8,
                73u8,
                158u8,
                31u8,
                38u8,
                51u8,
                167u8,
                181u8,
                147u8,
                99u8,
                33u8,
                238u8,
                209u8,
                205u8,
                174u8,
                182u8,
                17u8,
                81u8,
                129u8,
                210u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for ChainConfigEvents {
        const NAME: &'static str = "ChainConfigEvents";
        const COUNT: usize = 4usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <DefaultSequencingChainRpcUrlUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <DefaultSequencingChainRpcUrlUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::DefaultSequencingChainRpcUrlUpdated)
                }
                Some(<Initialized as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Initialized as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::Initialized)
                }
                Some(
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::OwnershipTransferred)
                }
                Some(
                    <RollupOwnerUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <RollupOwnerUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RollupOwnerUpdated)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for ChainConfigEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::DefaultSequencingChainRpcUrlUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Initialized(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RollupOwnerUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::DefaultSequencingChainRpcUrlUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Initialized(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RollupOwnerUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`ChainConfig`](self) contract instance.

See the [wrapper's documentation](`ChainConfigInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> ChainConfigInstance<T, P, N> {
        ChainConfigInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<ChainConfigInstance<T, P, N>>,
    > {
        ChainConfigInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        ChainConfigInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`ChainConfig`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`ChainConfig`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct ChainConfigInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for ChainConfigInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("ChainConfigInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ChainConfigInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`ChainConfig`](self) contract instance.

See the [wrapper's documentation](`ChainConfigInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<ChainConfigInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> ChainConfigInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> ChainConfigInstance<T, P, N> {
            ChainConfigInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ChainConfigInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`ARBITRUM_BRIDGE_ADDRESS`] function.
        pub fn ARBITRUM_BRIDGE_ADDRESS(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, ARBITRUM_BRIDGE_ADDRESSCall, N> {
            self.call_builder(&ARBITRUM_BRIDGE_ADDRESSCall {})
        }
        ///Creates a new call builder for the [`ARBITRUM_IGNORE_DELAYED_MESSAGES`] function.
        pub fn ARBITRUM_IGNORE_DELAYED_MESSAGES(
            &self,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            ARBITRUM_IGNORE_DELAYED_MESSAGESCall,
            N,
        > {
            self.call_builder(
                &ARBITRUM_IGNORE_DELAYED_MESSAGESCall {
                },
            )
        }
        ///Creates a new call builder for the [`ARBITRUM_INBOX_ADDRESS`] function.
        pub fn ARBITRUM_INBOX_ADDRESS(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, ARBITRUM_INBOX_ADDRESSCall, N> {
            self.call_builder(&ARBITRUM_INBOX_ADDRESSCall {})
        }
        ///Creates a new call builder for the [`CHAIN_ID`] function.
        pub fn CHAIN_ID(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, CHAIN_IDCall, N> {
            self.call_builder(&CHAIN_IDCall {})
        }
        ///Creates a new call builder for the [`DEFAULT_SEQUENCING_CHAIN_RPC_URL`] function.
        pub fn DEFAULT_SEQUENCING_CHAIN_RPC_URL(
            &self,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            DEFAULT_SEQUENCING_CHAIN_RPC_URLCall,
            N,
        > {
            self.call_builder(
                &DEFAULT_SEQUENCING_CHAIN_RPC_URLCall {
                },
            )
        }
        ///Creates a new call builder for the [`MINE_EMPTY_BLOCKS`] function.
        pub fn MINE_EMPTY_BLOCKS(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, MINE_EMPTY_BLOCKSCall, N> {
            self.call_builder(&MINE_EMPTY_BLOCKSCall {})
        }
        ///Creates a new call builder for the [`ROLLUP_OWNER`] function.
        pub fn ROLLUP_OWNER(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, ROLLUP_OWNERCall, N> {
            self.call_builder(&ROLLUP_OWNERCall {})
        }
        ///Creates a new call builder for the [`SEQUENCING_CONTRACT_ADDRESS`] function.
        pub fn SEQUENCING_CONTRACT_ADDRESS(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, SEQUENCING_CONTRACT_ADDRESSCall, N> {
            self.call_builder(&SEQUENCING_CONTRACT_ADDRESSCall {})
        }
        ///Creates a new call builder for the [`SEQUENCING_START_BLOCK`] function.
        pub fn SEQUENCING_START_BLOCK(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, SEQUENCING_START_BLOCKCall, N> {
            self.call_builder(&SEQUENCING_START_BLOCKCall {})
        }
        ///Creates a new call builder for the [`SETTLEMENT_DELAY`] function.
        pub fn SETTLEMENT_DELAY(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, SETTLEMENT_DELAYCall, N> {
            self.call_builder(&SETTLEMENT_DELAYCall {})
        }
        ///Creates a new call builder for the [`SETTLEMENT_START_BLOCK`] function.
        pub fn SETTLEMENT_START_BLOCK(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, SETTLEMENT_START_BLOCKCall, N> {
            self.call_builder(&SETTLEMENT_START_BLOCKCall {})
        }
        ///Creates a new call builder for the [`TARGET_ROLLUP_TYPE`] function.
        pub fn TARGET_ROLLUP_TYPE(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, TARGET_ROLLUP_TYPECall, N> {
            self.call_builder(&TARGET_ROLLUP_TYPECall {})
        }
        ///Creates a new call builder for the [`initialize`] function.
        pub fn initialize(
            &self,
            chainId: alloy::sol_types::private::primitives::aliases::U256,
            targetRollupType: alloy::sol_types::private::FixedBytes<32>,
            mineEmptyBlocks: bool,
            arbitrumBridgeAddress: alloy::sol_types::private::Address,
            arbitrumInboxAddress: alloy::sol_types::private::Address,
            arbitrumIgnoreDelayedMessages: bool,
            settlementDelay: alloy::sol_types::private::primitives::aliases::U256,
            settlementStartBlock: alloy::sol_types::private::primitives::aliases::U256,
            sequencingContractAddress: alloy::sol_types::private::Address,
            sequencingStartBlock: alloy::sol_types::private::primitives::aliases::U256,
            rollupOwner: alloy::sol_types::private::Address,
            sequencingChainRpcUrl: alloy::sol_types::private::String,
        ) -> alloy_contract::SolCallBuilder<T, &P, initializeCall, N> {
            self.call_builder(
                &initializeCall {
                    chainId,
                    targetRollupType,
                    mineEmptyBlocks,
                    arbitrumBridgeAddress,
                    arbitrumInboxAddress,
                    arbitrumIgnoreDelayedMessages,
                    settlementDelay,
                    settlementStartBlock,
                    sequencingContractAddress,
                    sequencingStartBlock,
                    rollupOwner,
                    sequencingChainRpcUrl,
                },
            )
        }
        ///Creates a new call builder for the [`owner`] function.
        pub fn owner(&self) -> alloy_contract::SolCallBuilder<T, &P, ownerCall, N> {
            self.call_builder(&ownerCall {})
        }
        ///Creates a new call builder for the [`renounceOwnership`] function.
        pub fn renounceOwnership(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, renounceOwnershipCall, N> {
            self.call_builder(&renounceOwnershipCall {})
        }
        ///Creates a new call builder for the [`transferOwnership`] function.
        pub fn transferOwnership(
            &self,
            newOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferOwnershipCall, N> {
            self.call_builder(&transferOwnershipCall { newOwner })
        }
        ///Creates a new call builder for the [`updateDefaultSequencingChainRpcUrl`] function.
        pub fn updateDefaultSequencingChainRpcUrl(
            &self,
            newRpcUrl: alloy::sol_types::private::String,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            updateDefaultSequencingChainRpcUrlCall,
            N,
        > {
            self.call_builder(
                &updateDefaultSequencingChainRpcUrlCall {
                    newRpcUrl,
                },
            )
        }
        ///Creates a new call builder for the [`updateRollupOwner`] function.
        pub fn updateRollupOwner(
            &self,
            newRollupOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, updateRollupOwnerCall, N> {
            self.call_builder(
                &updateRollupOwnerCall {
                    newRollupOwner,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ChainConfigInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`DefaultSequencingChainRpcUrlUpdated`] event.
        pub fn DefaultSequencingChainRpcUrlUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, DefaultSequencingChainRpcUrlUpdated, N> {
            self.event_filter::<DefaultSequencingChainRpcUrlUpdated>()
        }
        ///Creates a new event filter for the [`Initialized`] event.
        pub fn Initialized_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, Initialized, N> {
            self.event_filter::<Initialized>()
        }
        ///Creates a new event filter for the [`OwnershipTransferred`] event.
        pub fn OwnershipTransferred_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, OwnershipTransferred, N> {
            self.event_filter::<OwnershipTransferred>()
        }
        ///Creates a new event filter for the [`RollupOwnerUpdated`] event.
        pub fn RollupOwnerUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RollupOwnerUpdated, N> {
            self.event_filter::<RollupOwnerUpdated>()
        }
    }
}
