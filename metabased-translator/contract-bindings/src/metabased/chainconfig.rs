/**

Generated by the following Solidity interface...
```solidity
interface ChainConfig {
    error InvalidInitialization();
    error NotInitializing();
    error OwnableInvalidOwner(address owner);
    error OwnableUnauthorizedAccount(address account);

    event DefaultSequencingChainRpcUrlUpdated(string newRpcUrl);
    event Initialized(uint64 version);
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event RollupOwnerUpdated(address indexed newRollupOwner);

    constructor();

    function ARBITRUM_BRIDGE_ADDRESS() external view returns (address);
    function ARBITRUM_IGNORE_DELAYED_MESSAGES() external view returns (bool);
    function ARBITRUM_INBOX_ADDRESS() external view returns (address);
    function CHAIN_ID() external view returns (uint256);
    function DEFAULT_SEQUENCING_CHAIN_RPC_URL() external view returns (string memory);
    function MINE_EMPTY_BLOCKS() external view returns (bool);
    function ROLLUP_OWNER() external view returns (address);
    function SEQUENCING_CONTRACT_ADDRESS() external view returns (address);
    function SEQUENCING_START_BLOCK() external view returns (uint256);
    function SETTLEMENT_DELAY() external view returns (uint256);
    function SETTLEMENT_START_BLOCK() external view returns (uint256);
    function TARGET_ROLLUP_TYPE() external view returns (bytes32);
    function initialize(uint256 chainId, bytes32 targetRollupType, bool mineEmptyBlocks, address arbitrumBridgeAddress, address arbitrumInboxAddress, bool arbitrumIgnoreDelayedMessages, uint256 settlementDelay, uint256 settlementStartBlock, address sequencingContractAddress, uint256 sequencingStartBlock, address rollupOwner, string memory sequencingChainRpcUrl) external;
    function owner() external view returns (address);
    function renounceOwnership() external;
    function transferOwnership(address newOwner) external;
    function updateDefaultSequencingChainRpcUrl(string memory newRpcUrl) external;
    function updateRollupOwner(address newRollupOwner) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "ARBITRUM_BRIDGE_ADDRESS",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "ARBITRUM_IGNORE_DELAYED_MESSAGES",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "ARBITRUM_INBOX_ADDRESS",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "CHAIN_ID",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "DEFAULT_SEQUENCING_CHAIN_RPC_URL",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "MINE_EMPTY_BLOCKS",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "ROLLUP_OWNER",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "SEQUENCING_CONTRACT_ADDRESS",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "SEQUENCING_START_BLOCK",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "SETTLEMENT_DELAY",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "SETTLEMENT_START_BLOCK",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "TARGET_ROLLUP_TYPE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "initialize",
    "inputs": [
      {
        "name": "chainId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "targetRollupType",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "mineEmptyBlocks",
        "type": "bool",
        "internalType": "bool"
      },
      {
        "name": "arbitrumBridgeAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "arbitrumInboxAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "arbitrumIgnoreDelayedMessages",
        "type": "bool",
        "internalType": "bool"
      },
      {
        "name": "settlementDelay",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "settlementStartBlock",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "sequencingContractAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "sequencingStartBlock",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "rollupOwner",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "sequencingChainRpcUrl",
        "type": "string",
        "internalType": "string"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "renounceOwnership",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "transferOwnership",
    "inputs": [
      {
        "name": "newOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "updateDefaultSequencingChainRpcUrl",
    "inputs": [
      {
        "name": "newRpcUrl",
        "type": "string",
        "internalType": "string"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "updateRollupOwner",
    "inputs": [
      {
        "name": "newRollupOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "DefaultSequencingChainRpcUrlUpdated",
    "inputs": [
      {
        "name": "newRpcUrl",
        "type": "string",
        "indexed": false,
        "internalType": "string"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Initialized",
    "inputs": [
      {
        "name": "version",
        "type": "uint64",
        "indexed": false,
        "internalType": "uint64"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "OwnershipTransferred",
    "inputs": [
      {
        "name": "previousOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RollupOwnerUpdated",
    "inputs": [
      {
        "name": "newRollupOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "InvalidInitialization",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NotInitializing",
    "inputs": []
  },
  {
    "type": "error",
    "name": "OwnableInvalidOwner",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "OwnableUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ]
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod ChainConfig {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60806040523461002757610011610036565b61001961002c565b611bd661020e8239611bd690f35b610032565b60405190565b5f80fd5b61003f336100a8565b565b90565b60018060a01b031690565b90565b61006661006161006b92610041565b61004f565b610044565b90565b61007790610052565b90565b61008390610044565b90565b61008f9061007a565b9052565b91906100a6905f60208501940190610086565b565b806100c36100bd6100b85f61006e565b61007a565b9161007a565b146100d3576100d1906101ae565b565b6100fd6100df5f61006e565b6100e761002c565b918291631e4fbdf760e01b835260048301610093565b0390fd5b5f1c90565b60018060a01b031690565b61011d61012291610101565b610106565b90565b61012f9054610111565b90565b5f1b90565b9061014860018060a01b0391610132565b9181191691161790565b61016661016161016b92610044565b61004f565b610044565b90565b61017790610152565b90565b6101839061016e565b90565b90565b9061019e6101996101a59261017a565b610186565b8254610137565b9055565b5f0190565b6101b75f610125565b6101c1825f610189565b906101f56101ef7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09361017a565b9161017a565b916101fe61002c565b80610208816101a9565b0390a356fe60806040526004361015610013575b610bb9565b61001d5f3561013c565b80632a84b0f01461013757806341fc712d1461013257806357d1ba251461012d57806362c73caa1461012857806366a1d108146101235780636edd6c091461011e578063715018a61461011957806385e1f4d0146101145780638da5cb5b1461010f578063a3c6e1e71461010a578063aa6a43d814610105578063acc32b3514610100578063b97aba3e146100fb578063bf6db6f8146100f6578063cdad39fc146100f1578063d1f4737c146100ec578063e79388e6146100e75763f2fde38b0361000e57610b86565b610b51565b610b0c565b610aba565b6108a8565b610864565b6107cd565b61073b565b6106f7565b6106b3565b61067e565b61063c565b610607565b6105c2565b6103a1565b6102eb565b610259565b6101b1565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b60018060a01b031690565b61016890610154565b90565b6101748161015f565b0361017b57565b5f80fd5b9050359061018c8261016b565b565b906020828203126101a7576101a4915f0161017f565b90565b61014c565b5f0190565b346101df576101c96101c436600461018e565b610d8f565b6101d1610142565b806101db816101ac565b0390f35b610148565b5f9103126101ee57565b61014c565b1c90565b60018060a01b031690565b61021290600861021793026101f3565b6101f7565b90565b906102259154610202565b90565b61023460095f9061021a565b90565b6102409061015f565b9052565b9190610257905f60208501940190610237565b565b34610289576102693660046101e4565b610285610274610228565b61027c610142565b91829182610244565b0390f35b610148565b90565b6102a19060086102a693026101f3565b61028e565b90565b906102b49154610291565b90565b6102c360055f906102a9565b90565b90565b6102d2906102c6565b9052565b91906102e9905f602085019401906102c9565b565b3461031b576102fb3660046101e4565b6103176103066102b7565b61030e610142565b918291826102d6565b0390f35b610148565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156103665781359167ffffffffffffffff831161036157602001926001830284011161035c57565b610328565b610324565b610320565b9060208282031261039c575f82013567ffffffffffffffff811161039757610393920161032c565b9091565b610150565b61014c565b346103d0576103ba6103b436600461036b565b9061103d565b6103c2610142565b806103cc816101ac565b0390f35b610148565b634e487b7160e01b5f525f60045260245ffd5b634e487b7160e01b5f52602260045260245ffd5b906001600283049216801561041c575b602083101461041757565b6103e8565b91607f169161040c565b60209181520190565b5f5260205f2090565b905f929180549061045261044b836103fc565b8094610426565b916001811690815f146104a9575060011461046d575b505050565b61047a919293945061042f565b915f925b81841061049157505001905f8080610468565b6001816020929593955484860152019101929061047e565b92949550505060ff19168252151560200201905f8080610468565b906104ce91610438565b90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906104f9906104d1565b810190811067ffffffffffffffff82111761051357604052565b6104db565b9061053861053192610528610142565b938480926104c4565b03836104ef565b565b905f1061054d5761054a90610518565b90565b6103d5565b61055e600a5f9061053a565b90565b5190565b60209181520190565b90825f9392825e0152565b6105986105a16020936105a69361058f81610561565b93848093610565565b9586910161056e565b6104d1565b0190565b6105bf9160208201915f818403910152610579565b90565b346105f2576105d23660046101e4565b6105ee6105dd610552565b6105e5610142565b918291826105aa565b0390f35b610148565b610604600360019061021a565b90565b34610637576106173660046101e4565b6106336106226105f7565b61062a610142565b91829182610244565b0390f35b610148565b3461066a5761064c3660046101e4565b61065461106e565b61065c610142565b80610666816101ac565b0390f35b610148565b61067b60015f906102a9565b90565b346106ae5761068e3660046101e4565b6106aa61069961066f565b6106a1610142565b918291826102d6565b0390f35b610148565b346106e3576106c33660046101e4565b6106df6106ce6110a2565b6106d6610142565b91829182610244565b0390f35b610148565b6106f460085f906102a9565b90565b34610727576107073660046101e4565b6107236107126106e8565b61071a610142565b918291826102d6565b0390f35b610148565b61073860045f9061021a565b90565b3461076b5761074b3660046101e4565b61076761075661072c565b61075e610142565b91829182610244565b0390f35b610148565b90565b61078390600861078893026101f3565b610770565b90565b906107969154610773565b90565b6107a560025f9061078b565b90565b90565b6107b4906107a8565b9052565b91906107cb905f602085019401906107ab565b565b346107fd576107dd3660046101e4565b6107f96107e8610799565b6107f0610142565b918291826107b8565b0390f35b610148565b60ff1690565b61081890600861081d93026101f3565b610802565b90565b9061082b9154610808565b90565b61083a60035f90610820565b90565b151590565b61084b9061083d565b9052565b9190610862905f60208501940190610842565b565b34610894576108743660046101e4565b61089061087f61082e565b610887610142565b9182918261084f565b0390f35b610148565b6108a560075f9061021a565b90565b346108d8576108b83660046101e4565b6108d46108c3610899565b6108cb610142565b91829182610244565b0390f35b610148565b6108e6816102c6565b036108ed57565b5f80fd5b905035906108fe826108dd565b565b610909816107a8565b0361091057565b5f80fd5b9050359061092182610900565b565b61092c8161083d565b0361093357565b5f80fd5b9050359061094482610923565b565b5f80fd5b9061095d610956610142565b92836104ef565b565b67ffffffffffffffff811161097d576109796020916104d1565b0190565b6104db565b90825f939282370152565b909291926109a261099d8261095f565b61094a565b938185526020850190828401116109be576109bc92610982565b565b610946565b9080601f830112156109e1578160206109de9335910161098d565b90565b610320565b9161018083830312610ab5576109fe825f85016108f1565b92610a0c8360208301610914565b92610a1a8160408401610937565b92610a28826060850161017f565b92610a36836080830161017f565b92610a448160a08401610937565b92610a528260c085016108f1565b92610a608360e083016108f1565b92610a6f81610100840161017f565b92610a7e8261012085016108f1565b92610a8d83610140830161017f565b9261016082013567ffffffffffffffff8111610ab057610aad92016109c3565b90565b610150565b61014c565b34610af857610ae2610acd3660046109e6565b9a999099989198979297969396959495611a2e565b610aea610142565b80610af4816101ac565b0390f35b610148565b610b0960065f906102a9565b90565b34610b3c57610b1c3660046101e4565b610b38610b27610afd565b610b2f610142565b918291826102d6565b0390f35b610148565b610b4e6004601490610820565b90565b34610b8157610b613660046101e4565b610b7d610b6c610b41565b610b74610142565b9182918261084f565b0390f35b610148565b34610bb457610b9e610b9936600461018e565b611ab0565b610ba6610142565b80610bb0816101ac565b0390f35b610148565b5f80fd5b610bce90610bc9611abb565b610d1d565b565b90565b90565b610bea610be5610bef92610bd0565b610bd3565b610154565b90565b610bfb90610bd6565b90565b60207f6164647265737300000000000000000000000000000000000000000000000000917f4e657720726f6c6c7570206f776e65722063616e6e6f74206265207a65726f205f8201520152565b610c586027604092610565565b610c6181610bfe565b0190565b610c7a9060208101905f818303910152610c4b565b90565b15610c8457565b610c8c610142565b62461bcd60e51b815280610ca260048201610c65565b0390fd5b5f1b90565b90610cbc60018060a01b0391610ca6565b9181191691161790565b610cda610cd5610cdf92610154565b610bd3565b610154565b90565b610ceb90610cc6565b90565b610cf790610ce2565b90565b90565b90610d12610d0d610d1992610cee565b610cfa565b8254610cab565b9055565b610d4281610d3b610d35610d305f610bf2565b61015f565b9161015f565b1415610c7d565b610d4d816009610cfd565b610d777f8829bee46683608d5fd80e243c0fae04d129ce172f70db1021c1128074a6f4d991610cee565b90610d80610142565b80610d8a816101ac565b0390a2565b610d9890610bbd565b565b90610dac91610da7611abb565b610ff4565b565b5090565b601f602091010490565b1b90565b91906008610ddb910291610dd55f1984610dbc565b92610dbc565b9181191691161790565b610df9610df4610dfe926102c6565b610bd3565b6102c6565b90565b90565b9190610e1a610e15610e2293610de5565b610e01565b908354610dc0565b9055565b5f90565b610e3c91610e36610e26565b91610e04565b565b5b818110610e4a575050565b80610e575f600193610e2a565b01610e3f565b9190601f8111610e6d575b505050565b610e79610e9e9361042f565b906020610e8584610db2565b83019310610ea6575b610e9790610db2565b0190610e3e565b5f8080610e68565b9150610e9781929050610e8e565b90610ec4905f19906008026101f3565b191690565b81610ed391610eb4565b906002021790565b91610ee69082610dae565b9067ffffffffffffffff8211610fa557610f0a82610f0485546103fc565b85610e5d565b5f90601f8311600114610f3d57918091610f2c935f92610f31575b5050610ec9565b90555b565b90915001355f80610f25565b601f19831691610f4c8561042f565b925f5b818110610f8d57509160029391856001969410610f73575b50505002019055610f2f565b610f83910135601f841690610eb4565b90555f8080610f67565b91936020600181928787013581550195019201610f4f565b6104db565b90610fb59291610edb565b565b9190610fd181610fca81610fd695610565565b8095610982565b6104d1565b0190565b9091610ff19260208301925f818503910152610fb7565b90565b611001818390600a610faa565b907f0234a4e910f2b1e618f2c93be316ec0c7f40e1af23fe33f9fba2c5bb388a95f29161103861102f610142565b92839283610fda565b0390a1565b9061104791610d9a565b565b611051611abb565b61105961105b565b565b61106c6110675f610bf2565b611b10565b565b611076611049565b565b5f90565b5f1c90565b61108d6110929161107c565b6101f7565b90565b61109f9054611081565b90565b6110aa611078565b506110b45f611095565b90565b60401c90565b6110c96110ce916110b7565b610802565b90565b6110db90546110bd565b90565b67ffffffffffffffff1690565b6110f76110fc9161107c565b6110de565b90565b61110990546110eb565b90565b67ffffffffffffffff1690565b61112d61112861113292610bd0565b610bd3565b61110c565b90565b90565b61114c61114761115192611135565b610bd3565b61110c565b90565b61115d90610ce2565b90565b61117461116f61117992610bd0565b610bd3565b6102c6565b90565b9061118f67ffffffffffffffff91610ca6565b9181191691161790565b6111ad6111a86111b29261110c565b610bd3565b61110c565b90565b90565b906111cd6111c86111d492611199565b6111b5565b825461117c565b9055565b60401b90565b906111f268ff0000000000000000916111d8565b9181191691161790565b6112059061083d565b90565b90565b9061122061121b611227926111fc565b611208565b82546111de565b9055565b61123490611138565b9052565b919061124b905f6020850194019061122b565b565b9895929a9794919a9996939099611262611b6f565b9b8c5f0161126f906110d1565b156112799061083d565b9b8d5f01611286906110ff565b805f61129190611119565b9061129b9061110c565b14806113c0575b906112b66112b06001611138565b9161110c565b1480611398575b6112c890911561083d565b9081611387575b50611364576112fa9b8e8e6112ef6112e76001611138565b5f84016111b8565b611350575b506118ea565b611302575b50565b61130f905f80910161120b565b60016113477fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29161133e610142565b91829182611238565b0390a15f6112ff565b61135e905f6001910161120b565b8e6112f4565b61136c610142565b63f92ee8a960e01b815280611383600482016101ac565b0390fd5b61139291501561083d565b5f6112cf565b506112c86113a530611154565b3b6113b86113b25f611160565b916102c6565b1490506112bd565b508d6112a2565b5f7f436861696e2049442063616e6e6f74206265207a65726f000000000000000000910152565b6113fb6017602092610565565b611404816113c7565b0190565b61141d9060208101905f8183039101526113ee565b90565b1561142757565b61142f610142565b62461bcd60e51b81528061144560048201611408565b0390fd5b60207f65207a65726f0000000000000000000000000000000000000000000000000000917f417262697472756d2062726964676520616464726573732063616e6e6f7420625f8201520152565b6114a36026604092610565565b6114ac81611449565b0190565b6114c59060208101905f818303910152611496565b90565b156114cf57565b6114d7610142565b62461bcd60e51b8152806114ed600482016114b0565b0390fd5b60207f207a65726f000000000000000000000000000000000000000000000000000000917f417262697472756d20696e626f7820616464726573732063616e6e6f742062655f8201520152565b61154b6025604092610565565b611554816114f1565b0190565b61156d9060208101905f81830391015261153e565b90565b1561157757565b61157f610142565b62461bcd60e51b81528061159560048201611558565b0390fd5b60207f6f74206265207a65726f00000000000000000000000000000000000000000000917f53657175656e63696e6720636f6e747261637420616464726573732063616e6e5f8201520152565b6115f3602a604092610565565b6115fc81611599565b0190565b6116159060208101905f8183039101526115e6565b90565b1561161f57565b611627610142565b62461bcd60e51b81528061163d60048201611600565b0390fd5b60207f6573730000000000000000000000000000000000000000000000000000000000917f526f6c6c7570206f776e65722063616e6e6f74206265207a65726f20616464725f8201520152565b61169b6023604092610565565b6116a481611641565b0190565b6116bd9060208101905f81830391015261168e565b90565b156116c757565b6116cf610142565b62461bcd60e51b8152806116e5600482016116a8565b0390fd5b906116f55f1991610ca6565b9181191691161790565b9061171461170f61171b92610de5565b610e01565b82546116e9565b9055565b611728906107a8565b90565b6117349061107c565b90565b9061174c6117476117539261171f565b61172b565b82546116e9565b9055565b9061176360ff91610ca6565b9181191691161790565b9061178261177d611789926111fc565b611208565b8254611757565b9055565b60081b90565b906117a6610100600160a81b039161178d565b9181191691161790565b906117c56117c06117cc92610cee565b610cfa565b8254611793565b9055565b60a01b90565b906117e560ff60a01b916117d0565b9181191691161790565b906118046117ff61180b926111fc565b611208565b82546117d6565b9055565b9061181981610561565b9067ffffffffffffffff82116118d95761183d8261183785546103fc565b85610e5d565b602090601f831160011461187157918091611860935f92611865575b5050610ec9565b90555b565b90915001515f80611859565b601f198316916118808561042f565b925f5b8181106118c1575091600293918560019694106118a7575b50505002019055611863565b6118b7910151601f841690610eb4565b90555f808061189b565b91936020600181928787015181550195019201611883565b6104db565b906118e89161180f565b565b956119f9611a0e966119f28b97611a239f9e9c611a0798611a1c9f9c8f99611a159f9a611a009a6119d66119e4946119cf6119dd946119ae6119eb9a6119438561193c6119365f611160565b916102c6565b1415611420565b6119688b61196161195b6119565f610bf2565b61015f565b9161015f565b14156114c8565b61198d8d61198661198061197b5f610bf2565b61015f565b9161015f565b1415611570565b6119a76119a161199c5f610bf2565b61015f565b9161015f565b1415611618565b6119c86119c26119bd5f610bf2565b61015f565b9161015f565b14156116c0565b60016116ff565b6002611737565b600361176d565b60036117b0565b6004610cfd565b60046117ef565b60056116ff565b60066116ff565b6007610cfd565b60086116ff565b6009610cfd565b600a6118de565b611a2c33611b10565b565b90611a429b9a99989796959493929161124d565b565b611a5590611a50611abb565b611a57565b565b80611a72611a6c611a675f610bf2565b61015f565b9161015f565b14611a8257611a8090611b10565b565b611aac611a8e5f610bf2565b611a96610142565b918291631e4fbdf760e01b835260048301610244565b0390fd5b611ab990611a44565b565b611ac36110a2565b611adc611ad6611ad1611b93565b61015f565b9161015f565b03611ae357565b611b0c611aee611b93565b611af6610142565b91829163118cdaa760e01b835260048301610244565b0390fd5b611b195f611095565b611b23825f610cfd565b90611b57611b517f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610cee565b91610cee565b91611b60610142565b80611b6a816101ac565b0390a3565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b611b9b611078565b50339056fea2646970667358221220fc12e1fd8504633f088734fe36b9d05f6efab957b2ebf1e41fad80a6bb44015964736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4a\0'Wa\0\x11a\x006V[a\0\x19a\0,V[a\x1B\xD6a\x02\x0E\x829a\x1B\xD6\x90\xF3[a\x002V[`@Q\x90V[_\x80\xFD[a\0?3a\0\xA8V[V[\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[\x90V[a\0fa\0aa\0k\x92a\0AV[a\0OV[a\0DV[\x90V[a\0w\x90a\0RV[\x90V[a\0\x83\x90a\0DV[\x90V[a\0\x8F\x90a\0zV[\x90RV[\x91\x90a\0\xA6\x90_` \x85\x01\x94\x01\x90a\0\x86V[V[\x80a\0\xC3a\0\xBDa\0\xB8_a\0nV[a\0zV[\x91a\0zV[\x14a\0\xD3Wa\0\xD1\x90a\x01\xAEV[V[a\0\xFDa\0\xDF_a\0nV[a\0\xE7a\0,V[\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\0\x93V[\x03\x90\xFD[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01\x1Da\x01\"\x91a\x01\x01V[a\x01\x06V[\x90V[a\x01/\x90Ta\x01\x11V[\x90V[_\x1B\x90V[\x90a\x01H`\x01\x80`\xA0\x1B\x03\x91a\x012V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x01fa\x01aa\x01k\x92a\0DV[a\0OV[a\0DV[\x90V[a\x01w\x90a\x01RV[\x90V[a\x01\x83\x90a\x01nV[\x90V[\x90V[\x90a\x01\x9Ea\x01\x99a\x01\xA5\x92a\x01zV[a\x01\x86V[\x82Ta\x017V[\x90UV[_\x01\x90V[a\x01\xB7_a\x01%V[a\x01\xC1\x82_a\x01\x89V[\x90a\x01\xF5a\x01\xEF\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x01zV[\x91a\x01zV[\x91a\x01\xFEa\0,V[\x80a\x02\x08\x81a\x01\xA9V[\x03\x90\xA3V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x0B\xB9V[a\0\x1D_5a\x01<V[\x80c*\x84\xB0\xF0\x14a\x017W\x80cA\xFCq-\x14a\x012W\x80cW\xD1\xBA%\x14a\x01-W\x80cb\xC7<\xAA\x14a\x01(W\x80cf\xA1\xD1\x08\x14a\x01#W\x80cn\xDDl\t\x14a\x01\x1EW\x80cqP\x18\xA6\x14a\x01\x19W\x80c\x85\xE1\xF4\xD0\x14a\x01\x14W\x80c\x8D\xA5\xCB[\x14a\x01\x0FW\x80c\xA3\xC6\xE1\xE7\x14a\x01\nW\x80c\xAAjC\xD8\x14a\x01\x05W\x80c\xAC\xC3+5\x14a\x01\0W\x80c\xB9z\xBA>\x14a\0\xFBW\x80c\xBFm\xB6\xF8\x14a\0\xF6W\x80c\xCD\xAD9\xFC\x14a\0\xF1W\x80c\xD1\xF4s|\x14a\0\xECW\x80c\xE7\x93\x88\xE6\x14a\0\xE7Wc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\x0B\x86V[a\x0BQV[a\x0B\x0CV[a\n\xBAV[a\x08\xA8V[a\x08dV[a\x07\xCDV[a\x07;V[a\x06\xF7V[a\x06\xB3V[a\x06~V[a\x06<V[a\x06\x07V[a\x05\xC2V[a\x03\xA1V[a\x02\xEBV[a\x02YV[a\x01\xB1V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01h\x90a\x01TV[\x90V[a\x01t\x81a\x01_V[\x03a\x01{WV[_\x80\xFD[\x90P5\x90a\x01\x8C\x82a\x01kV[V[\x90` \x82\x82\x03\x12a\x01\xA7Wa\x01\xA4\x91_\x01a\x01\x7FV[\x90V[a\x01LV[_\x01\x90V[4a\x01\xDFWa\x01\xC9a\x01\xC46`\x04a\x01\x8EV[a\r\x8FV[a\x01\xD1a\x01BV[\x80a\x01\xDB\x81a\x01\xACV[\x03\x90\xF3[a\x01HV[_\x91\x03\x12a\x01\xEEWV[a\x01LV[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02\x12\x90`\x08a\x02\x17\x93\x02a\x01\xF3V[a\x01\xF7V[\x90V[\x90a\x02%\x91Ta\x02\x02V[\x90V[a\x024`\t_\x90a\x02\x1AV[\x90V[a\x02@\x90a\x01_V[\x90RV[\x91\x90a\x02W\x90_` \x85\x01\x94\x01\x90a\x027V[V[4a\x02\x89Wa\x02i6`\x04a\x01\xE4V[a\x02\x85a\x02ta\x02(V[a\x02|a\x01BV[\x91\x82\x91\x82a\x02DV[\x03\x90\xF3[a\x01HV[\x90V[a\x02\xA1\x90`\x08a\x02\xA6\x93\x02a\x01\xF3V[a\x02\x8EV[\x90V[\x90a\x02\xB4\x91Ta\x02\x91V[\x90V[a\x02\xC3`\x05_\x90a\x02\xA9V[\x90V[\x90V[a\x02\xD2\x90a\x02\xC6V[\x90RV[\x91\x90a\x02\xE9\x90_` \x85\x01\x94\x01\x90a\x02\xC9V[V[4a\x03\x1BWa\x02\xFB6`\x04a\x01\xE4V[a\x03\x17a\x03\x06a\x02\xB7V[a\x03\x0Ea\x01BV[\x91\x82\x91\x82a\x02\xD6V[\x03\x90\xF3[a\x01HV[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x03fW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x03aW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x03\\WV[a\x03(V[a\x03$V[a\x03 V[\x90` \x82\x82\x03\x12a\x03\x9CW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03\x97Wa\x03\x93\x92\x01a\x03,V[\x90\x91V[a\x01PV[a\x01LV[4a\x03\xD0Wa\x03\xBAa\x03\xB46`\x04a\x03kV[\x90a\x10=V[a\x03\xC2a\x01BV[\x80a\x03\xCC\x81a\x01\xACV[\x03\x90\xF3[a\x01HV[cNH{q`\xE0\x1B_R_`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\x04\x1CW[` \x83\x10\x14a\x04\x17WV[a\x03\xE8V[\x91`\x7F\x16\x91a\x04\x0CV[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\x04Ra\x04K\x83a\x03\xFCV[\x80\x94a\x04&V[\x91`\x01\x81\x16\x90\x81_\x14a\x04\xA9WP`\x01\x14a\x04mW[PPPV[a\x04z\x91\x92\x93\x94Pa\x04/V[\x91_\x92[\x81\x84\x10a\x04\x91WPP\x01\x90_\x80\x80a\x04hV[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\x04~V[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\x04hV[\x90a\x04\xCE\x91a\x048V[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x04\xF9\x90a\x04\xD1V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x05\x13W`@RV[a\x04\xDBV[\x90a\x058a\x051\x92a\x05(a\x01BV[\x93\x84\x80\x92a\x04\xC4V[\x03\x83a\x04\xEFV[V[\x90_\x10a\x05MWa\x05J\x90a\x05\x18V[\x90V[a\x03\xD5V[a\x05^`\n_\x90a\x05:V[\x90V[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\x05\x98a\x05\xA1` \x93a\x05\xA6\x93a\x05\x8F\x81a\x05aV[\x93\x84\x80\x93a\x05eV[\x95\x86\x91\x01a\x05nV[a\x04\xD1V[\x01\x90V[a\x05\xBF\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x05yV[\x90V[4a\x05\xF2Wa\x05\xD26`\x04a\x01\xE4V[a\x05\xEEa\x05\xDDa\x05RV[a\x05\xE5a\x01BV[\x91\x82\x91\x82a\x05\xAAV[\x03\x90\xF3[a\x01HV[a\x06\x04`\x03`\x01\x90a\x02\x1AV[\x90V[4a\x067Wa\x06\x176`\x04a\x01\xE4V[a\x063a\x06\"a\x05\xF7V[a\x06*a\x01BV[\x91\x82\x91\x82a\x02DV[\x03\x90\xF3[a\x01HV[4a\x06jWa\x06L6`\x04a\x01\xE4V[a\x06Ta\x10nV[a\x06\\a\x01BV[\x80a\x06f\x81a\x01\xACV[\x03\x90\xF3[a\x01HV[a\x06{`\x01_\x90a\x02\xA9V[\x90V[4a\x06\xAEWa\x06\x8E6`\x04a\x01\xE4V[a\x06\xAAa\x06\x99a\x06oV[a\x06\xA1a\x01BV[\x91\x82\x91\x82a\x02\xD6V[\x03\x90\xF3[a\x01HV[4a\x06\xE3Wa\x06\xC36`\x04a\x01\xE4V[a\x06\xDFa\x06\xCEa\x10\xA2V[a\x06\xD6a\x01BV[\x91\x82\x91\x82a\x02DV[\x03\x90\xF3[a\x01HV[a\x06\xF4`\x08_\x90a\x02\xA9V[\x90V[4a\x07'Wa\x07\x076`\x04a\x01\xE4V[a\x07#a\x07\x12a\x06\xE8V[a\x07\x1Aa\x01BV[\x91\x82\x91\x82a\x02\xD6V[\x03\x90\xF3[a\x01HV[a\x078`\x04_\x90a\x02\x1AV[\x90V[4a\x07kWa\x07K6`\x04a\x01\xE4V[a\x07ga\x07Va\x07,V[a\x07^a\x01BV[\x91\x82\x91\x82a\x02DV[\x03\x90\xF3[a\x01HV[\x90V[a\x07\x83\x90`\x08a\x07\x88\x93\x02a\x01\xF3V[a\x07pV[\x90V[\x90a\x07\x96\x91Ta\x07sV[\x90V[a\x07\xA5`\x02_\x90a\x07\x8BV[\x90V[\x90V[a\x07\xB4\x90a\x07\xA8V[\x90RV[\x91\x90a\x07\xCB\x90_` \x85\x01\x94\x01\x90a\x07\xABV[V[4a\x07\xFDWa\x07\xDD6`\x04a\x01\xE4V[a\x07\xF9a\x07\xE8a\x07\x99V[a\x07\xF0a\x01BV[\x91\x82\x91\x82a\x07\xB8V[\x03\x90\xF3[a\x01HV[`\xFF\x16\x90V[a\x08\x18\x90`\x08a\x08\x1D\x93\x02a\x01\xF3V[a\x08\x02V[\x90V[\x90a\x08+\x91Ta\x08\x08V[\x90V[a\x08:`\x03_\x90a\x08 V[\x90V[\x15\x15\x90V[a\x08K\x90a\x08=V[\x90RV[\x91\x90a\x08b\x90_` \x85\x01\x94\x01\x90a\x08BV[V[4a\x08\x94Wa\x08t6`\x04a\x01\xE4V[a\x08\x90a\x08\x7Fa\x08.V[a\x08\x87a\x01BV[\x91\x82\x91\x82a\x08OV[\x03\x90\xF3[a\x01HV[a\x08\xA5`\x07_\x90a\x02\x1AV[\x90V[4a\x08\xD8Wa\x08\xB86`\x04a\x01\xE4V[a\x08\xD4a\x08\xC3a\x08\x99V[a\x08\xCBa\x01BV[\x91\x82\x91\x82a\x02DV[\x03\x90\xF3[a\x01HV[a\x08\xE6\x81a\x02\xC6V[\x03a\x08\xEDWV[_\x80\xFD[\x90P5\x90a\x08\xFE\x82a\x08\xDDV[V[a\t\t\x81a\x07\xA8V[\x03a\t\x10WV[_\x80\xFD[\x90P5\x90a\t!\x82a\t\0V[V[a\t,\x81a\x08=V[\x03a\t3WV[_\x80\xFD[\x90P5\x90a\tD\x82a\t#V[V[_\x80\xFD[\x90a\t]a\tVa\x01BV[\x92\x83a\x04\xEFV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\t}Wa\ty` \x91a\x04\xD1V[\x01\x90V[a\x04\xDBV[\x90\x82_\x93\x92\x827\x01RV[\x90\x92\x91\x92a\t\xA2a\t\x9D\x82a\t_V[a\tJV[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\t\xBEWa\t\xBC\x92a\t\x82V[V[a\tFV[\x90\x80`\x1F\x83\x01\x12\x15a\t\xE1W\x81` a\t\xDE\x935\x91\x01a\t\x8DV[\x90V[a\x03 V[\x91a\x01\x80\x83\x83\x03\x12a\n\xB5Wa\t\xFE\x82_\x85\x01a\x08\xF1V[\x92a\n\x0C\x83` \x83\x01a\t\x14V[\x92a\n\x1A\x81`@\x84\x01a\t7V[\x92a\n(\x82``\x85\x01a\x01\x7FV[\x92a\n6\x83`\x80\x83\x01a\x01\x7FV[\x92a\nD\x81`\xA0\x84\x01a\t7V[\x92a\nR\x82`\xC0\x85\x01a\x08\xF1V[\x92a\n`\x83`\xE0\x83\x01a\x08\xF1V[\x92a\no\x81a\x01\0\x84\x01a\x01\x7FV[\x92a\n~\x82a\x01 \x85\x01a\x08\xF1V[\x92a\n\x8D\x83a\x01@\x83\x01a\x01\x7FV[\x92a\x01`\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\n\xB0Wa\n\xAD\x92\x01a\t\xC3V[\x90V[a\x01PV[a\x01LV[4a\n\xF8Wa\n\xE2a\n\xCD6`\x04a\t\xE6V[\x9A\x99\x90\x99\x98\x91\x98\x97\x92\x97\x96\x93\x96\x95\x94\x95a\x1A.V[a\n\xEAa\x01BV[\x80a\n\xF4\x81a\x01\xACV[\x03\x90\xF3[a\x01HV[a\x0B\t`\x06_\x90a\x02\xA9V[\x90V[4a\x0B<Wa\x0B\x1C6`\x04a\x01\xE4V[a\x0B8a\x0B'a\n\xFDV[a\x0B/a\x01BV[\x91\x82\x91\x82a\x02\xD6V[\x03\x90\xF3[a\x01HV[a\x0BN`\x04`\x14\x90a\x08 V[\x90V[4a\x0B\x81Wa\x0Ba6`\x04a\x01\xE4V[a\x0B}a\x0Bla\x0BAV[a\x0Bta\x01BV[\x91\x82\x91\x82a\x08OV[\x03\x90\xF3[a\x01HV[4a\x0B\xB4Wa\x0B\x9Ea\x0B\x996`\x04a\x01\x8EV[a\x1A\xB0V[a\x0B\xA6a\x01BV[\x80a\x0B\xB0\x81a\x01\xACV[\x03\x90\xF3[a\x01HV[_\x80\xFD[a\x0B\xCE\x90a\x0B\xC9a\x1A\xBBV[a\r\x1DV[V[\x90V[\x90V[a\x0B\xEAa\x0B\xE5a\x0B\xEF\x92a\x0B\xD0V[a\x0B\xD3V[a\x01TV[\x90V[a\x0B\xFB\x90a\x0B\xD6V[\x90V[` \x7Faddress\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FNew rollup owner cannot be zero _\x82\x01R\x01RV[a\x0CX`'`@\x92a\x05eV[a\x0Ca\x81a\x0B\xFEV[\x01\x90V[a\x0Cz\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x0CKV[\x90V[\x15a\x0C\x84WV[a\x0C\x8Ca\x01BV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x0C\xA2`\x04\x82\x01a\x0CeV[\x03\x90\xFD[_\x1B\x90V[\x90a\x0C\xBC`\x01\x80`\xA0\x1B\x03\x91a\x0C\xA6V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0C\xDAa\x0C\xD5a\x0C\xDF\x92a\x01TV[a\x0B\xD3V[a\x01TV[\x90V[a\x0C\xEB\x90a\x0C\xC6V[\x90V[a\x0C\xF7\x90a\x0C\xE2V[\x90V[\x90V[\x90a\r\x12a\r\ra\r\x19\x92a\x0C\xEEV[a\x0C\xFAV[\x82Ta\x0C\xABV[\x90UV[a\rB\x81a\r;a\r5a\r0_a\x0B\xF2V[a\x01_V[\x91a\x01_V[\x14\x15a\x0C}V[a\rM\x81`\ta\x0C\xFDV[a\rw\x7F\x88)\xBE\xE4f\x83`\x8D_\xD8\x0E$<\x0F\xAE\x04\xD1)\xCE\x17/p\xDB\x10!\xC1\x12\x80t\xA6\xF4\xD9\x91a\x0C\xEEV[\x90a\r\x80a\x01BV[\x80a\r\x8A\x81a\x01\xACV[\x03\x90\xA2V[a\r\x98\x90a\x0B\xBDV[V[\x90a\r\xAC\x91a\r\xA7a\x1A\xBBV[a\x0F\xF4V[V[P\x90V[`\x1F` \x91\x01\x04\x90V[\x1B\x90V[\x91\x90`\x08a\r\xDB\x91\x02\x91a\r\xD5_\x19\x84a\r\xBCV[\x92a\r\xBCV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\r\xF9a\r\xF4a\r\xFE\x92a\x02\xC6V[a\x0B\xD3V[a\x02\xC6V[\x90V[\x90V[\x91\x90a\x0E\x1Aa\x0E\x15a\x0E\"\x93a\r\xE5V[a\x0E\x01V[\x90\x83Ta\r\xC0V[\x90UV[_\x90V[a\x0E<\x91a\x0E6a\x0E&V[\x91a\x0E\x04V[V[[\x81\x81\x10a\x0EJWPPV[\x80a\x0EW_`\x01\x93a\x0E*V[\x01a\x0E?V[\x91\x90`\x1F\x81\x11a\x0EmW[PPPV[a\x0Eya\x0E\x9E\x93a\x04/V[\x90` a\x0E\x85\x84a\r\xB2V[\x83\x01\x93\x10a\x0E\xA6W[a\x0E\x97\x90a\r\xB2V[\x01\x90a\x0E>V[_\x80\x80a\x0EhV[\x91Pa\x0E\x97\x81\x92\x90Pa\x0E\x8EV[\x90a\x0E\xC4\x90_\x19\x90`\x08\x02a\x01\xF3V[\x19\x16\x90V[\x81a\x0E\xD3\x91a\x0E\xB4V[\x90`\x02\x02\x17\x90V[\x91a\x0E\xE6\x90\x82a\r\xAEV[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x0F\xA5Wa\x0F\n\x82a\x0F\x04\x85Ta\x03\xFCV[\x85a\x0E]V[_\x90`\x1F\x83\x11`\x01\x14a\x0F=W\x91\x80\x91a\x0F,\x93_\x92a\x0F1W[PPa\x0E\xC9V[\x90U[V[\x90\x91P\x015_\x80a\x0F%V[`\x1F\x19\x83\x16\x91a\x0FL\x85a\x04/V[\x92_[\x81\x81\x10a\x0F\x8DWP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x0FsW[PPP\x02\x01\x90Ua\x0F/V[a\x0F\x83\x91\x015`\x1F\x84\x16\x90a\x0E\xB4V[\x90U_\x80\x80a\x0FgV[\x91\x93` `\x01\x81\x92\x87\x87\x015\x81U\x01\x95\x01\x92\x01a\x0FOV[a\x04\xDBV[\x90a\x0F\xB5\x92\x91a\x0E\xDBV[V[\x91\x90a\x0F\xD1\x81a\x0F\xCA\x81a\x0F\xD6\x95a\x05eV[\x80\x95a\t\x82V[a\x04\xD1V[\x01\x90V[\x90\x91a\x0F\xF1\x92` \x83\x01\x92_\x81\x85\x03\x91\x01Ra\x0F\xB7V[\x90V[a\x10\x01\x81\x83\x90`\na\x0F\xAAV[\x90\x7F\x024\xA4\xE9\x10\xF2\xB1\xE6\x18\xF2\xC9;\xE3\x16\xEC\x0C\x7F@\xE1\xAF#\xFE3\xF9\xFB\xA2\xC5\xBB8\x8A\x95\xF2\x91a\x108a\x10/a\x01BV[\x92\x83\x92\x83a\x0F\xDAV[\x03\x90\xA1V[\x90a\x10G\x91a\r\x9AV[V[a\x10Qa\x1A\xBBV[a\x10Ya\x10[V[V[a\x10la\x10g_a\x0B\xF2V[a\x1B\x10V[V[a\x10va\x10IV[V[_\x90V[_\x1C\x90V[a\x10\x8Da\x10\x92\x91a\x10|V[a\x01\xF7V[\x90V[a\x10\x9F\x90Ta\x10\x81V[\x90V[a\x10\xAAa\x10xV[Pa\x10\xB4_a\x10\x95V[\x90V[`@\x1C\x90V[a\x10\xC9a\x10\xCE\x91a\x10\xB7V[a\x08\x02V[\x90V[a\x10\xDB\x90Ta\x10\xBDV[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x10\xF7a\x10\xFC\x91a\x10|V[a\x10\xDEV[\x90V[a\x11\t\x90Ta\x10\xEBV[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x11-a\x11(a\x112\x92a\x0B\xD0V[a\x0B\xD3V[a\x11\x0CV[\x90V[\x90V[a\x11La\x11Ga\x11Q\x92a\x115V[a\x0B\xD3V[a\x11\x0CV[\x90V[a\x11]\x90a\x0C\xE2V[\x90V[a\x11ta\x11oa\x11y\x92a\x0B\xD0V[a\x0B\xD3V[a\x02\xC6V[\x90V[\x90a\x11\x8Fg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91a\x0C\xA6V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x11\xADa\x11\xA8a\x11\xB2\x92a\x11\x0CV[a\x0B\xD3V[a\x11\x0CV[\x90V[\x90V[\x90a\x11\xCDa\x11\xC8a\x11\xD4\x92a\x11\x99V[a\x11\xB5V[\x82Ta\x11|V[\x90UV[`@\x1B\x90V[\x90a\x11\xF2h\xFF\0\0\0\0\0\0\0\0\x91a\x11\xD8V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x12\x05\x90a\x08=V[\x90V[\x90V[\x90a\x12 a\x12\x1Ba\x12'\x92a\x11\xFCV[a\x12\x08V[\x82Ta\x11\xDEV[\x90UV[a\x124\x90a\x118V[\x90RV[\x91\x90a\x12K\x90_` \x85\x01\x94\x01\x90a\x12+V[V[\x98\x95\x92\x9A\x97\x94\x91\x9A\x99\x96\x93\x90\x99a\x12ba\x1BoV[\x9B\x8C_\x01a\x12o\x90a\x10\xD1V[\x15a\x12y\x90a\x08=V[\x9B\x8D_\x01a\x12\x86\x90a\x10\xFFV[\x80_a\x12\x91\x90a\x11\x19V[\x90a\x12\x9B\x90a\x11\x0CV[\x14\x80a\x13\xC0W[\x90a\x12\xB6a\x12\xB0`\x01a\x118V[\x91a\x11\x0CV[\x14\x80a\x13\x98W[a\x12\xC8\x90\x91\x15a\x08=V[\x90\x81a\x13\x87W[Pa\x13dWa\x12\xFA\x9B\x8E\x8Ea\x12\xEFa\x12\xE7`\x01a\x118V[_\x84\x01a\x11\xB8V[a\x13PW[Pa\x18\xEAV[a\x13\x02W[PV[a\x13\x0F\x90_\x80\x91\x01a\x12\x0BV[`\x01a\x13G\x7F\xC7\xF5\x05\xB2\xF3q\xAE!u\xEEI\x13\xF4I\x9E\x1F&3\xA7\xB5\x93c!\xEE\xD1\xCD\xAE\xB6\x11Q\x81\xD2\x91a\x13>a\x01BV[\x91\x82\x91\x82a\x128V[\x03\x90\xA1_a\x12\xFFV[a\x13^\x90_`\x01\x91\x01a\x12\x0BV[\x8Ea\x12\xF4V[a\x13la\x01BV[c\xF9.\xE8\xA9`\xE0\x1B\x81R\x80a\x13\x83`\x04\x82\x01a\x01\xACV[\x03\x90\xFD[a\x13\x92\x91P\x15a\x08=V[_a\x12\xCFV[Pa\x12\xC8a\x13\xA50a\x11TV[;a\x13\xB8a\x13\xB2_a\x11`V[\x91a\x02\xC6V[\x14\x90Pa\x12\xBDV[P\x8Da\x12\xA2V[_\x7FChain ID cannot be zero\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x13\xFB`\x17` \x92a\x05eV[a\x14\x04\x81a\x13\xC7V[\x01\x90V[a\x14\x1D\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x13\xEEV[\x90V[\x15a\x14'WV[a\x14/a\x01BV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x14E`\x04\x82\x01a\x14\x08V[\x03\x90\xFD[` \x7Fe zero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FArbitrum bridge address cannot b_\x82\x01R\x01RV[a\x14\xA3`&`@\x92a\x05eV[a\x14\xAC\x81a\x14IV[\x01\x90V[a\x14\xC5\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x14\x96V[\x90V[\x15a\x14\xCFWV[a\x14\xD7a\x01BV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x14\xED`\x04\x82\x01a\x14\xB0V[\x03\x90\xFD[` \x7F zero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FArbitrum inbox address cannot be_\x82\x01R\x01RV[a\x15K`%`@\x92a\x05eV[a\x15T\x81a\x14\xF1V[\x01\x90V[a\x15m\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x15>V[\x90V[\x15a\x15wWV[a\x15\x7Fa\x01BV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x15\x95`\x04\x82\x01a\x15XV[\x03\x90\xFD[` \x7Fot be zero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FSequencing contract address cann_\x82\x01R\x01RV[a\x15\xF3`*`@\x92a\x05eV[a\x15\xFC\x81a\x15\x99V[\x01\x90V[a\x16\x15\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x15\xE6V[\x90V[\x15a\x16\x1FWV[a\x16'a\x01BV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x16=`\x04\x82\x01a\x16\0V[\x03\x90\xFD[` \x7Fess\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FRollup owner cannot be zero addr_\x82\x01R\x01RV[a\x16\x9B`#`@\x92a\x05eV[a\x16\xA4\x81a\x16AV[\x01\x90V[a\x16\xBD\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x16\x8EV[\x90V[\x15a\x16\xC7WV[a\x16\xCFa\x01BV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x16\xE5`\x04\x82\x01a\x16\xA8V[\x03\x90\xFD[\x90a\x16\xF5_\x19\x91a\x0C\xA6V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x17\x14a\x17\x0Fa\x17\x1B\x92a\r\xE5V[a\x0E\x01V[\x82Ta\x16\xE9V[\x90UV[a\x17(\x90a\x07\xA8V[\x90V[a\x174\x90a\x10|V[\x90V[\x90a\x17La\x17Ga\x17S\x92a\x17\x1FV[a\x17+V[\x82Ta\x16\xE9V[\x90UV[\x90a\x17c`\xFF\x91a\x0C\xA6V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x17\x82a\x17}a\x17\x89\x92a\x11\xFCV[a\x12\x08V[\x82Ta\x17WV[\x90UV[`\x08\x1B\x90V[\x90a\x17\xA6a\x01\0`\x01`\xA8\x1B\x03\x91a\x17\x8DV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x17\xC5a\x17\xC0a\x17\xCC\x92a\x0C\xEEV[a\x0C\xFAV[\x82Ta\x17\x93V[\x90UV[`\xA0\x1B\x90V[\x90a\x17\xE5`\xFF`\xA0\x1B\x91a\x17\xD0V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x18\x04a\x17\xFFa\x18\x0B\x92a\x11\xFCV[a\x12\x08V[\x82Ta\x17\xD6V[\x90UV[\x90a\x18\x19\x81a\x05aV[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x18\xD9Wa\x18=\x82a\x187\x85Ta\x03\xFCV[\x85a\x0E]V[` \x90`\x1F\x83\x11`\x01\x14a\x18qW\x91\x80\x91a\x18`\x93_\x92a\x18eW[PPa\x0E\xC9V[\x90U[V[\x90\x91P\x01Q_\x80a\x18YV[`\x1F\x19\x83\x16\x91a\x18\x80\x85a\x04/V[\x92_[\x81\x81\x10a\x18\xC1WP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x18\xA7W[PPP\x02\x01\x90Ua\x18cV[a\x18\xB7\x91\x01Q`\x1F\x84\x16\x90a\x0E\xB4V[\x90U_\x80\x80a\x18\x9BV[\x91\x93` `\x01\x81\x92\x87\x87\x01Q\x81U\x01\x95\x01\x92\x01a\x18\x83V[a\x04\xDBV[\x90a\x18\xE8\x91a\x18\x0FV[V[\x95a\x19\xF9a\x1A\x0E\x96a\x19\xF2\x8B\x97a\x1A#\x9F\x9E\x9Ca\x1A\x07\x98a\x1A\x1C\x9F\x9C\x8F\x99a\x1A\x15\x9F\x9Aa\x1A\0\x9Aa\x19\xD6a\x19\xE4\x94a\x19\xCFa\x19\xDD\x94a\x19\xAEa\x19\xEB\x9Aa\x19C\x85a\x19<a\x196_a\x11`V[\x91a\x02\xC6V[\x14\x15a\x14 V[a\x19h\x8Ba\x19aa\x19[a\x19V_a\x0B\xF2V[a\x01_V[\x91a\x01_V[\x14\x15a\x14\xC8V[a\x19\x8D\x8Da\x19\x86a\x19\x80a\x19{_a\x0B\xF2V[a\x01_V[\x91a\x01_V[\x14\x15a\x15pV[a\x19\xA7a\x19\xA1a\x19\x9C_a\x0B\xF2V[a\x01_V[\x91a\x01_V[\x14\x15a\x16\x18V[a\x19\xC8a\x19\xC2a\x19\xBD_a\x0B\xF2V[a\x01_V[\x91a\x01_V[\x14\x15a\x16\xC0V[`\x01a\x16\xFFV[`\x02a\x177V[`\x03a\x17mV[`\x03a\x17\xB0V[`\x04a\x0C\xFDV[`\x04a\x17\xEFV[`\x05a\x16\xFFV[`\x06a\x16\xFFV[`\x07a\x0C\xFDV[`\x08a\x16\xFFV[`\ta\x0C\xFDV[`\na\x18\xDEV[a\x1A,3a\x1B\x10V[V[\x90a\x1AB\x9B\x9A\x99\x98\x97\x96\x95\x94\x93\x92\x91a\x12MV[V[a\x1AU\x90a\x1APa\x1A\xBBV[a\x1AWV[V[\x80a\x1Ara\x1Ala\x1Ag_a\x0B\xF2V[a\x01_V[\x91a\x01_V[\x14a\x1A\x82Wa\x1A\x80\x90a\x1B\x10V[V[a\x1A\xACa\x1A\x8E_a\x0B\xF2V[a\x1A\x96a\x01BV[\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x02DV[\x03\x90\xFD[a\x1A\xB9\x90a\x1ADV[V[a\x1A\xC3a\x10\xA2V[a\x1A\xDCa\x1A\xD6a\x1A\xD1a\x1B\x93V[a\x01_V[\x91a\x01_V[\x03a\x1A\xE3WV[a\x1B\x0Ca\x1A\xEEa\x1B\x93V[a\x1A\xF6a\x01BV[\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x02DV[\x03\x90\xFD[a\x1B\x19_a\x10\x95V[a\x1B#\x82_a\x0C\xFDV[\x90a\x1BWa\x1BQ\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x0C\xEEV[\x91a\x0C\xEEV[\x91a\x1B`a\x01BV[\x80a\x1Bj\x81a\x01\xACV[\x03\x90\xA3V[\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0\x90V[a\x1B\x9Ba\x10xV[P3\x90V\xFE\xA2dipfsX\"\x12 \xFC\x12\xE1\xFD\x85\x04c?\x08\x874\xFE6\xB9\xD0_n\xFA\xB9W\xB2\xEB\xF1\xE4\x1F\xAD\x80\xA6\xBBD\x01YdsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b610bb9565b61001d5f3561013c565b80632a84b0f01461013757806341fc712d1461013257806357d1ba251461012d57806362c73caa1461012857806366a1d108146101235780636edd6c091461011e578063715018a61461011957806385e1f4d0146101145780638da5cb5b1461010f578063a3c6e1e71461010a578063aa6a43d814610105578063acc32b3514610100578063b97aba3e146100fb578063bf6db6f8146100f6578063cdad39fc146100f1578063d1f4737c146100ec578063e79388e6146100e75763f2fde38b0361000e57610b86565b610b51565b610b0c565b610aba565b6108a8565b610864565b6107cd565b61073b565b6106f7565b6106b3565b61067e565b61063c565b610607565b6105c2565b6103a1565b6102eb565b610259565b6101b1565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b60018060a01b031690565b61016890610154565b90565b6101748161015f565b0361017b57565b5f80fd5b9050359061018c8261016b565b565b906020828203126101a7576101a4915f0161017f565b90565b61014c565b5f0190565b346101df576101c96101c436600461018e565b610d8f565b6101d1610142565b806101db816101ac565b0390f35b610148565b5f9103126101ee57565b61014c565b1c90565b60018060a01b031690565b61021290600861021793026101f3565b6101f7565b90565b906102259154610202565b90565b61023460095f9061021a565b90565b6102409061015f565b9052565b9190610257905f60208501940190610237565b565b34610289576102693660046101e4565b610285610274610228565b61027c610142565b91829182610244565b0390f35b610148565b90565b6102a19060086102a693026101f3565b61028e565b90565b906102b49154610291565b90565b6102c360055f906102a9565b90565b90565b6102d2906102c6565b9052565b91906102e9905f602085019401906102c9565b565b3461031b576102fb3660046101e4565b6103176103066102b7565b61030e610142565b918291826102d6565b0390f35b610148565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156103665781359167ffffffffffffffff831161036157602001926001830284011161035c57565b610328565b610324565b610320565b9060208282031261039c575f82013567ffffffffffffffff811161039757610393920161032c565b9091565b610150565b61014c565b346103d0576103ba6103b436600461036b565b9061103d565b6103c2610142565b806103cc816101ac565b0390f35b610148565b634e487b7160e01b5f525f60045260245ffd5b634e487b7160e01b5f52602260045260245ffd5b906001600283049216801561041c575b602083101461041757565b6103e8565b91607f169161040c565b60209181520190565b5f5260205f2090565b905f929180549061045261044b836103fc565b8094610426565b916001811690815f146104a9575060011461046d575b505050565b61047a919293945061042f565b915f925b81841061049157505001905f8080610468565b6001816020929593955484860152019101929061047e565b92949550505060ff19168252151560200201905f8080610468565b906104ce91610438565b90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906104f9906104d1565b810190811067ffffffffffffffff82111761051357604052565b6104db565b9061053861053192610528610142565b938480926104c4565b03836104ef565b565b905f1061054d5761054a90610518565b90565b6103d5565b61055e600a5f9061053a565b90565b5190565b60209181520190565b90825f9392825e0152565b6105986105a16020936105a69361058f81610561565b93848093610565565b9586910161056e565b6104d1565b0190565b6105bf9160208201915f818403910152610579565b90565b346105f2576105d23660046101e4565b6105ee6105dd610552565b6105e5610142565b918291826105aa565b0390f35b610148565b610604600360019061021a565b90565b34610637576106173660046101e4565b6106336106226105f7565b61062a610142565b91829182610244565b0390f35b610148565b3461066a5761064c3660046101e4565b61065461106e565b61065c610142565b80610666816101ac565b0390f35b610148565b61067b60015f906102a9565b90565b346106ae5761068e3660046101e4565b6106aa61069961066f565b6106a1610142565b918291826102d6565b0390f35b610148565b346106e3576106c33660046101e4565b6106df6106ce6110a2565b6106d6610142565b91829182610244565b0390f35b610148565b6106f460085f906102a9565b90565b34610727576107073660046101e4565b6107236107126106e8565b61071a610142565b918291826102d6565b0390f35b610148565b61073860045f9061021a565b90565b3461076b5761074b3660046101e4565b61076761075661072c565b61075e610142565b91829182610244565b0390f35b610148565b90565b61078390600861078893026101f3565b610770565b90565b906107969154610773565b90565b6107a560025f9061078b565b90565b90565b6107b4906107a8565b9052565b91906107cb905f602085019401906107ab565b565b346107fd576107dd3660046101e4565b6107f96107e8610799565b6107f0610142565b918291826107b8565b0390f35b610148565b60ff1690565b61081890600861081d93026101f3565b610802565b90565b9061082b9154610808565b90565b61083a60035f90610820565b90565b151590565b61084b9061083d565b9052565b9190610862905f60208501940190610842565b565b34610894576108743660046101e4565b61089061087f61082e565b610887610142565b9182918261084f565b0390f35b610148565b6108a560075f9061021a565b90565b346108d8576108b83660046101e4565b6108d46108c3610899565b6108cb610142565b91829182610244565b0390f35b610148565b6108e6816102c6565b036108ed57565b5f80fd5b905035906108fe826108dd565b565b610909816107a8565b0361091057565b5f80fd5b9050359061092182610900565b565b61092c8161083d565b0361093357565b5f80fd5b9050359061094482610923565b565b5f80fd5b9061095d610956610142565b92836104ef565b565b67ffffffffffffffff811161097d576109796020916104d1565b0190565b6104db565b90825f939282370152565b909291926109a261099d8261095f565b61094a565b938185526020850190828401116109be576109bc92610982565b565b610946565b9080601f830112156109e1578160206109de9335910161098d565b90565b610320565b9161018083830312610ab5576109fe825f85016108f1565b92610a0c8360208301610914565b92610a1a8160408401610937565b92610a28826060850161017f565b92610a36836080830161017f565b92610a448160a08401610937565b92610a528260c085016108f1565b92610a608360e083016108f1565b92610a6f81610100840161017f565b92610a7e8261012085016108f1565b92610a8d83610140830161017f565b9261016082013567ffffffffffffffff8111610ab057610aad92016109c3565b90565b610150565b61014c565b34610af857610ae2610acd3660046109e6565b9a999099989198979297969396959495611a2e565b610aea610142565b80610af4816101ac565b0390f35b610148565b610b0960065f906102a9565b90565b34610b3c57610b1c3660046101e4565b610b38610b27610afd565b610b2f610142565b918291826102d6565b0390f35b610148565b610b4e6004601490610820565b90565b34610b8157610b613660046101e4565b610b7d610b6c610b41565b610b74610142565b9182918261084f565b0390f35b610148565b34610bb457610b9e610b9936600461018e565b611ab0565b610ba6610142565b80610bb0816101ac565b0390f35b610148565b5f80fd5b610bce90610bc9611abb565b610d1d565b565b90565b90565b610bea610be5610bef92610bd0565b610bd3565b610154565b90565b610bfb90610bd6565b90565b60207f6164647265737300000000000000000000000000000000000000000000000000917f4e657720726f6c6c7570206f776e65722063616e6e6f74206265207a65726f205f8201520152565b610c586027604092610565565b610c6181610bfe565b0190565b610c7a9060208101905f818303910152610c4b565b90565b15610c8457565b610c8c610142565b62461bcd60e51b815280610ca260048201610c65565b0390fd5b5f1b90565b90610cbc60018060a01b0391610ca6565b9181191691161790565b610cda610cd5610cdf92610154565b610bd3565b610154565b90565b610ceb90610cc6565b90565b610cf790610ce2565b90565b90565b90610d12610d0d610d1992610cee565b610cfa565b8254610cab565b9055565b610d4281610d3b610d35610d305f610bf2565b61015f565b9161015f565b1415610c7d565b610d4d816009610cfd565b610d777f8829bee46683608d5fd80e243c0fae04d129ce172f70db1021c1128074a6f4d991610cee565b90610d80610142565b80610d8a816101ac565b0390a2565b610d9890610bbd565b565b90610dac91610da7611abb565b610ff4565b565b5090565b601f602091010490565b1b90565b91906008610ddb910291610dd55f1984610dbc565b92610dbc565b9181191691161790565b610df9610df4610dfe926102c6565b610bd3565b6102c6565b90565b90565b9190610e1a610e15610e2293610de5565b610e01565b908354610dc0565b9055565b5f90565b610e3c91610e36610e26565b91610e04565b565b5b818110610e4a575050565b80610e575f600193610e2a565b01610e3f565b9190601f8111610e6d575b505050565b610e79610e9e9361042f565b906020610e8584610db2565b83019310610ea6575b610e9790610db2565b0190610e3e565b5f8080610e68565b9150610e9781929050610e8e565b90610ec4905f19906008026101f3565b191690565b81610ed391610eb4565b906002021790565b91610ee69082610dae565b9067ffffffffffffffff8211610fa557610f0a82610f0485546103fc565b85610e5d565b5f90601f8311600114610f3d57918091610f2c935f92610f31575b5050610ec9565b90555b565b90915001355f80610f25565b601f19831691610f4c8561042f565b925f5b818110610f8d57509160029391856001969410610f73575b50505002019055610f2f565b610f83910135601f841690610eb4565b90555f8080610f67565b91936020600181928787013581550195019201610f4f565b6104db565b90610fb59291610edb565b565b9190610fd181610fca81610fd695610565565b8095610982565b6104d1565b0190565b9091610ff19260208301925f818503910152610fb7565b90565b611001818390600a610faa565b907f0234a4e910f2b1e618f2c93be316ec0c7f40e1af23fe33f9fba2c5bb388a95f29161103861102f610142565b92839283610fda565b0390a1565b9061104791610d9a565b565b611051611abb565b61105961105b565b565b61106c6110675f610bf2565b611b10565b565b611076611049565b565b5f90565b5f1c90565b61108d6110929161107c565b6101f7565b90565b61109f9054611081565b90565b6110aa611078565b506110b45f611095565b90565b60401c90565b6110c96110ce916110b7565b610802565b90565b6110db90546110bd565b90565b67ffffffffffffffff1690565b6110f76110fc9161107c565b6110de565b90565b61110990546110eb565b90565b67ffffffffffffffff1690565b61112d61112861113292610bd0565b610bd3565b61110c565b90565b90565b61114c61114761115192611135565b610bd3565b61110c565b90565b61115d90610ce2565b90565b61117461116f61117992610bd0565b610bd3565b6102c6565b90565b9061118f67ffffffffffffffff91610ca6565b9181191691161790565b6111ad6111a86111b29261110c565b610bd3565b61110c565b90565b90565b906111cd6111c86111d492611199565b6111b5565b825461117c565b9055565b60401b90565b906111f268ff0000000000000000916111d8565b9181191691161790565b6112059061083d565b90565b90565b9061122061121b611227926111fc565b611208565b82546111de565b9055565b61123490611138565b9052565b919061124b905f6020850194019061122b565b565b9895929a9794919a9996939099611262611b6f565b9b8c5f0161126f906110d1565b156112799061083d565b9b8d5f01611286906110ff565b805f61129190611119565b9061129b9061110c565b14806113c0575b906112b66112b06001611138565b9161110c565b1480611398575b6112c890911561083d565b9081611387575b50611364576112fa9b8e8e6112ef6112e76001611138565b5f84016111b8565b611350575b506118ea565b611302575b50565b61130f905f80910161120b565b60016113477fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29161133e610142565b91829182611238565b0390a15f6112ff565b61135e905f6001910161120b565b8e6112f4565b61136c610142565b63f92ee8a960e01b815280611383600482016101ac565b0390fd5b61139291501561083d565b5f6112cf565b506112c86113a530611154565b3b6113b86113b25f611160565b916102c6565b1490506112bd565b508d6112a2565b5f7f436861696e2049442063616e6e6f74206265207a65726f000000000000000000910152565b6113fb6017602092610565565b611404816113c7565b0190565b61141d9060208101905f8183039101526113ee565b90565b1561142757565b61142f610142565b62461bcd60e51b81528061144560048201611408565b0390fd5b60207f65207a65726f0000000000000000000000000000000000000000000000000000917f417262697472756d2062726964676520616464726573732063616e6e6f7420625f8201520152565b6114a36026604092610565565b6114ac81611449565b0190565b6114c59060208101905f818303910152611496565b90565b156114cf57565b6114d7610142565b62461bcd60e51b8152806114ed600482016114b0565b0390fd5b60207f207a65726f000000000000000000000000000000000000000000000000000000917f417262697472756d20696e626f7820616464726573732063616e6e6f742062655f8201520152565b61154b6025604092610565565b611554816114f1565b0190565b61156d9060208101905f81830391015261153e565b90565b1561157757565b61157f610142565b62461bcd60e51b81528061159560048201611558565b0390fd5b60207f6f74206265207a65726f00000000000000000000000000000000000000000000917f53657175656e63696e6720636f6e747261637420616464726573732063616e6e5f8201520152565b6115f3602a604092610565565b6115fc81611599565b0190565b6116159060208101905f8183039101526115e6565b90565b1561161f57565b611627610142565b62461bcd60e51b81528061163d60048201611600565b0390fd5b60207f6573730000000000000000000000000000000000000000000000000000000000917f526f6c6c7570206f776e65722063616e6e6f74206265207a65726f20616464725f8201520152565b61169b6023604092610565565b6116a481611641565b0190565b6116bd9060208101905f81830391015261168e565b90565b156116c757565b6116cf610142565b62461bcd60e51b8152806116e5600482016116a8565b0390fd5b906116f55f1991610ca6565b9181191691161790565b9061171461170f61171b92610de5565b610e01565b82546116e9565b9055565b611728906107a8565b90565b6117349061107c565b90565b9061174c6117476117539261171f565b61172b565b82546116e9565b9055565b9061176360ff91610ca6565b9181191691161790565b9061178261177d611789926111fc565b611208565b8254611757565b9055565b60081b90565b906117a6610100600160a81b039161178d565b9181191691161790565b906117c56117c06117cc92610cee565b610cfa565b8254611793565b9055565b60a01b90565b906117e560ff60a01b916117d0565b9181191691161790565b906118046117ff61180b926111fc565b611208565b82546117d6565b9055565b9061181981610561565b9067ffffffffffffffff82116118d95761183d8261183785546103fc565b85610e5d565b602090601f831160011461187157918091611860935f92611865575b5050610ec9565b90555b565b90915001515f80611859565b601f198316916118808561042f565b925f5b8181106118c1575091600293918560019694106118a7575b50505002019055611863565b6118b7910151601f841690610eb4565b90555f808061189b565b91936020600181928787015181550195019201611883565b6104db565b906118e89161180f565b565b956119f9611a0e966119f28b97611a239f9e9c611a0798611a1c9f9c8f99611a159f9a611a009a6119d66119e4946119cf6119dd946119ae6119eb9a6119438561193c6119365f611160565b916102c6565b1415611420565b6119688b61196161195b6119565f610bf2565b61015f565b9161015f565b14156114c8565b61198d8d61198661198061197b5f610bf2565b61015f565b9161015f565b1415611570565b6119a76119a161199c5f610bf2565b61015f565b9161015f565b1415611618565b6119c86119c26119bd5f610bf2565b61015f565b9161015f565b14156116c0565b60016116ff565b6002611737565b600361176d565b60036117b0565b6004610cfd565b60046117ef565b60056116ff565b60066116ff565b6007610cfd565b60086116ff565b6009610cfd565b600a6118de565b611a2c33611b10565b565b90611a429b9a99989796959493929161124d565b565b611a5590611a50611abb565b611a57565b565b80611a72611a6c611a675f610bf2565b61015f565b9161015f565b14611a8257611a8090611b10565b565b611aac611a8e5f610bf2565b611a96610142565b918291631e4fbdf760e01b835260048301610244565b0390fd5b611ab990611a44565b565b611ac36110a2565b611adc611ad6611ad1611b93565b61015f565b9161015f565b03611ae357565b611b0c611aee611b93565b611af6610142565b91829163118cdaa760e01b835260048301610244565b0390fd5b611b195f611095565b611b23825f610cfd565b90611b57611b517f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610cee565b91610cee565b91611b60610142565b80611b6a816101ac565b0390a3565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b611b9b611078565b50339056fea2646970667358221220fc12e1fd8504633f088734fe36b9d05f6efab957b2ebf1e41fad80a6bb44015964736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x0B\xB9V[a\0\x1D_5a\x01<V[\x80c*\x84\xB0\xF0\x14a\x017W\x80cA\xFCq-\x14a\x012W\x80cW\xD1\xBA%\x14a\x01-W\x80cb\xC7<\xAA\x14a\x01(W\x80cf\xA1\xD1\x08\x14a\x01#W\x80cn\xDDl\t\x14a\x01\x1EW\x80cqP\x18\xA6\x14a\x01\x19W\x80c\x85\xE1\xF4\xD0\x14a\x01\x14W\x80c\x8D\xA5\xCB[\x14a\x01\x0FW\x80c\xA3\xC6\xE1\xE7\x14a\x01\nW\x80c\xAAjC\xD8\x14a\x01\x05W\x80c\xAC\xC3+5\x14a\x01\0W\x80c\xB9z\xBA>\x14a\0\xFBW\x80c\xBFm\xB6\xF8\x14a\0\xF6W\x80c\xCD\xAD9\xFC\x14a\0\xF1W\x80c\xD1\xF4s|\x14a\0\xECW\x80c\xE7\x93\x88\xE6\x14a\0\xE7Wc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\x0B\x86V[a\x0BQV[a\x0B\x0CV[a\n\xBAV[a\x08\xA8V[a\x08dV[a\x07\xCDV[a\x07;V[a\x06\xF7V[a\x06\xB3V[a\x06~V[a\x06<V[a\x06\x07V[a\x05\xC2V[a\x03\xA1V[a\x02\xEBV[a\x02YV[a\x01\xB1V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01h\x90a\x01TV[\x90V[a\x01t\x81a\x01_V[\x03a\x01{WV[_\x80\xFD[\x90P5\x90a\x01\x8C\x82a\x01kV[V[\x90` \x82\x82\x03\x12a\x01\xA7Wa\x01\xA4\x91_\x01a\x01\x7FV[\x90V[a\x01LV[_\x01\x90V[4a\x01\xDFWa\x01\xC9a\x01\xC46`\x04a\x01\x8EV[a\r\x8FV[a\x01\xD1a\x01BV[\x80a\x01\xDB\x81a\x01\xACV[\x03\x90\xF3[a\x01HV[_\x91\x03\x12a\x01\xEEWV[a\x01LV[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02\x12\x90`\x08a\x02\x17\x93\x02a\x01\xF3V[a\x01\xF7V[\x90V[\x90a\x02%\x91Ta\x02\x02V[\x90V[a\x024`\t_\x90a\x02\x1AV[\x90V[a\x02@\x90a\x01_V[\x90RV[\x91\x90a\x02W\x90_` \x85\x01\x94\x01\x90a\x027V[V[4a\x02\x89Wa\x02i6`\x04a\x01\xE4V[a\x02\x85a\x02ta\x02(V[a\x02|a\x01BV[\x91\x82\x91\x82a\x02DV[\x03\x90\xF3[a\x01HV[\x90V[a\x02\xA1\x90`\x08a\x02\xA6\x93\x02a\x01\xF3V[a\x02\x8EV[\x90V[\x90a\x02\xB4\x91Ta\x02\x91V[\x90V[a\x02\xC3`\x05_\x90a\x02\xA9V[\x90V[\x90V[a\x02\xD2\x90a\x02\xC6V[\x90RV[\x91\x90a\x02\xE9\x90_` \x85\x01\x94\x01\x90a\x02\xC9V[V[4a\x03\x1BWa\x02\xFB6`\x04a\x01\xE4V[a\x03\x17a\x03\x06a\x02\xB7V[a\x03\x0Ea\x01BV[\x91\x82\x91\x82a\x02\xD6V[\x03\x90\xF3[a\x01HV[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x03fW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x03aW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x03\\WV[a\x03(V[a\x03$V[a\x03 V[\x90` \x82\x82\x03\x12a\x03\x9CW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03\x97Wa\x03\x93\x92\x01a\x03,V[\x90\x91V[a\x01PV[a\x01LV[4a\x03\xD0Wa\x03\xBAa\x03\xB46`\x04a\x03kV[\x90a\x10=V[a\x03\xC2a\x01BV[\x80a\x03\xCC\x81a\x01\xACV[\x03\x90\xF3[a\x01HV[cNH{q`\xE0\x1B_R_`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\x04\x1CW[` \x83\x10\x14a\x04\x17WV[a\x03\xE8V[\x91`\x7F\x16\x91a\x04\x0CV[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\x04Ra\x04K\x83a\x03\xFCV[\x80\x94a\x04&V[\x91`\x01\x81\x16\x90\x81_\x14a\x04\xA9WP`\x01\x14a\x04mW[PPPV[a\x04z\x91\x92\x93\x94Pa\x04/V[\x91_\x92[\x81\x84\x10a\x04\x91WPP\x01\x90_\x80\x80a\x04hV[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\x04~V[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\x04hV[\x90a\x04\xCE\x91a\x048V[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x04\xF9\x90a\x04\xD1V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x05\x13W`@RV[a\x04\xDBV[\x90a\x058a\x051\x92a\x05(a\x01BV[\x93\x84\x80\x92a\x04\xC4V[\x03\x83a\x04\xEFV[V[\x90_\x10a\x05MWa\x05J\x90a\x05\x18V[\x90V[a\x03\xD5V[a\x05^`\n_\x90a\x05:V[\x90V[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\x05\x98a\x05\xA1` \x93a\x05\xA6\x93a\x05\x8F\x81a\x05aV[\x93\x84\x80\x93a\x05eV[\x95\x86\x91\x01a\x05nV[a\x04\xD1V[\x01\x90V[a\x05\xBF\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x05yV[\x90V[4a\x05\xF2Wa\x05\xD26`\x04a\x01\xE4V[a\x05\xEEa\x05\xDDa\x05RV[a\x05\xE5a\x01BV[\x91\x82\x91\x82a\x05\xAAV[\x03\x90\xF3[a\x01HV[a\x06\x04`\x03`\x01\x90a\x02\x1AV[\x90V[4a\x067Wa\x06\x176`\x04a\x01\xE4V[a\x063a\x06\"a\x05\xF7V[a\x06*a\x01BV[\x91\x82\x91\x82a\x02DV[\x03\x90\xF3[a\x01HV[4a\x06jWa\x06L6`\x04a\x01\xE4V[a\x06Ta\x10nV[a\x06\\a\x01BV[\x80a\x06f\x81a\x01\xACV[\x03\x90\xF3[a\x01HV[a\x06{`\x01_\x90a\x02\xA9V[\x90V[4a\x06\xAEWa\x06\x8E6`\x04a\x01\xE4V[a\x06\xAAa\x06\x99a\x06oV[a\x06\xA1a\x01BV[\x91\x82\x91\x82a\x02\xD6V[\x03\x90\xF3[a\x01HV[4a\x06\xE3Wa\x06\xC36`\x04a\x01\xE4V[a\x06\xDFa\x06\xCEa\x10\xA2V[a\x06\xD6a\x01BV[\x91\x82\x91\x82a\x02DV[\x03\x90\xF3[a\x01HV[a\x06\xF4`\x08_\x90a\x02\xA9V[\x90V[4a\x07'Wa\x07\x076`\x04a\x01\xE4V[a\x07#a\x07\x12a\x06\xE8V[a\x07\x1Aa\x01BV[\x91\x82\x91\x82a\x02\xD6V[\x03\x90\xF3[a\x01HV[a\x078`\x04_\x90a\x02\x1AV[\x90V[4a\x07kWa\x07K6`\x04a\x01\xE4V[a\x07ga\x07Va\x07,V[a\x07^a\x01BV[\x91\x82\x91\x82a\x02DV[\x03\x90\xF3[a\x01HV[\x90V[a\x07\x83\x90`\x08a\x07\x88\x93\x02a\x01\xF3V[a\x07pV[\x90V[\x90a\x07\x96\x91Ta\x07sV[\x90V[a\x07\xA5`\x02_\x90a\x07\x8BV[\x90V[\x90V[a\x07\xB4\x90a\x07\xA8V[\x90RV[\x91\x90a\x07\xCB\x90_` \x85\x01\x94\x01\x90a\x07\xABV[V[4a\x07\xFDWa\x07\xDD6`\x04a\x01\xE4V[a\x07\xF9a\x07\xE8a\x07\x99V[a\x07\xF0a\x01BV[\x91\x82\x91\x82a\x07\xB8V[\x03\x90\xF3[a\x01HV[`\xFF\x16\x90V[a\x08\x18\x90`\x08a\x08\x1D\x93\x02a\x01\xF3V[a\x08\x02V[\x90V[\x90a\x08+\x91Ta\x08\x08V[\x90V[a\x08:`\x03_\x90a\x08 V[\x90V[\x15\x15\x90V[a\x08K\x90a\x08=V[\x90RV[\x91\x90a\x08b\x90_` \x85\x01\x94\x01\x90a\x08BV[V[4a\x08\x94Wa\x08t6`\x04a\x01\xE4V[a\x08\x90a\x08\x7Fa\x08.V[a\x08\x87a\x01BV[\x91\x82\x91\x82a\x08OV[\x03\x90\xF3[a\x01HV[a\x08\xA5`\x07_\x90a\x02\x1AV[\x90V[4a\x08\xD8Wa\x08\xB86`\x04a\x01\xE4V[a\x08\xD4a\x08\xC3a\x08\x99V[a\x08\xCBa\x01BV[\x91\x82\x91\x82a\x02DV[\x03\x90\xF3[a\x01HV[a\x08\xE6\x81a\x02\xC6V[\x03a\x08\xEDWV[_\x80\xFD[\x90P5\x90a\x08\xFE\x82a\x08\xDDV[V[a\t\t\x81a\x07\xA8V[\x03a\t\x10WV[_\x80\xFD[\x90P5\x90a\t!\x82a\t\0V[V[a\t,\x81a\x08=V[\x03a\t3WV[_\x80\xFD[\x90P5\x90a\tD\x82a\t#V[V[_\x80\xFD[\x90a\t]a\tVa\x01BV[\x92\x83a\x04\xEFV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\t}Wa\ty` \x91a\x04\xD1V[\x01\x90V[a\x04\xDBV[\x90\x82_\x93\x92\x827\x01RV[\x90\x92\x91\x92a\t\xA2a\t\x9D\x82a\t_V[a\tJV[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\t\xBEWa\t\xBC\x92a\t\x82V[V[a\tFV[\x90\x80`\x1F\x83\x01\x12\x15a\t\xE1W\x81` a\t\xDE\x935\x91\x01a\t\x8DV[\x90V[a\x03 V[\x91a\x01\x80\x83\x83\x03\x12a\n\xB5Wa\t\xFE\x82_\x85\x01a\x08\xF1V[\x92a\n\x0C\x83` \x83\x01a\t\x14V[\x92a\n\x1A\x81`@\x84\x01a\t7V[\x92a\n(\x82``\x85\x01a\x01\x7FV[\x92a\n6\x83`\x80\x83\x01a\x01\x7FV[\x92a\nD\x81`\xA0\x84\x01a\t7V[\x92a\nR\x82`\xC0\x85\x01a\x08\xF1V[\x92a\n`\x83`\xE0\x83\x01a\x08\xF1V[\x92a\no\x81a\x01\0\x84\x01a\x01\x7FV[\x92a\n~\x82a\x01 \x85\x01a\x08\xF1V[\x92a\n\x8D\x83a\x01@\x83\x01a\x01\x7FV[\x92a\x01`\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\n\xB0Wa\n\xAD\x92\x01a\t\xC3V[\x90V[a\x01PV[a\x01LV[4a\n\xF8Wa\n\xE2a\n\xCD6`\x04a\t\xE6V[\x9A\x99\x90\x99\x98\x91\x98\x97\x92\x97\x96\x93\x96\x95\x94\x95a\x1A.V[a\n\xEAa\x01BV[\x80a\n\xF4\x81a\x01\xACV[\x03\x90\xF3[a\x01HV[a\x0B\t`\x06_\x90a\x02\xA9V[\x90V[4a\x0B<Wa\x0B\x1C6`\x04a\x01\xE4V[a\x0B8a\x0B'a\n\xFDV[a\x0B/a\x01BV[\x91\x82\x91\x82a\x02\xD6V[\x03\x90\xF3[a\x01HV[a\x0BN`\x04`\x14\x90a\x08 V[\x90V[4a\x0B\x81Wa\x0Ba6`\x04a\x01\xE4V[a\x0B}a\x0Bla\x0BAV[a\x0Bta\x01BV[\x91\x82\x91\x82a\x08OV[\x03\x90\xF3[a\x01HV[4a\x0B\xB4Wa\x0B\x9Ea\x0B\x996`\x04a\x01\x8EV[a\x1A\xB0V[a\x0B\xA6a\x01BV[\x80a\x0B\xB0\x81a\x01\xACV[\x03\x90\xF3[a\x01HV[_\x80\xFD[a\x0B\xCE\x90a\x0B\xC9a\x1A\xBBV[a\r\x1DV[V[\x90V[\x90V[a\x0B\xEAa\x0B\xE5a\x0B\xEF\x92a\x0B\xD0V[a\x0B\xD3V[a\x01TV[\x90V[a\x0B\xFB\x90a\x0B\xD6V[\x90V[` \x7Faddress\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FNew rollup owner cannot be zero _\x82\x01R\x01RV[a\x0CX`'`@\x92a\x05eV[a\x0Ca\x81a\x0B\xFEV[\x01\x90V[a\x0Cz\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x0CKV[\x90V[\x15a\x0C\x84WV[a\x0C\x8Ca\x01BV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x0C\xA2`\x04\x82\x01a\x0CeV[\x03\x90\xFD[_\x1B\x90V[\x90a\x0C\xBC`\x01\x80`\xA0\x1B\x03\x91a\x0C\xA6V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0C\xDAa\x0C\xD5a\x0C\xDF\x92a\x01TV[a\x0B\xD3V[a\x01TV[\x90V[a\x0C\xEB\x90a\x0C\xC6V[\x90V[a\x0C\xF7\x90a\x0C\xE2V[\x90V[\x90V[\x90a\r\x12a\r\ra\r\x19\x92a\x0C\xEEV[a\x0C\xFAV[\x82Ta\x0C\xABV[\x90UV[a\rB\x81a\r;a\r5a\r0_a\x0B\xF2V[a\x01_V[\x91a\x01_V[\x14\x15a\x0C}V[a\rM\x81`\ta\x0C\xFDV[a\rw\x7F\x88)\xBE\xE4f\x83`\x8D_\xD8\x0E$<\x0F\xAE\x04\xD1)\xCE\x17/p\xDB\x10!\xC1\x12\x80t\xA6\xF4\xD9\x91a\x0C\xEEV[\x90a\r\x80a\x01BV[\x80a\r\x8A\x81a\x01\xACV[\x03\x90\xA2V[a\r\x98\x90a\x0B\xBDV[V[\x90a\r\xAC\x91a\r\xA7a\x1A\xBBV[a\x0F\xF4V[V[P\x90V[`\x1F` \x91\x01\x04\x90V[\x1B\x90V[\x91\x90`\x08a\r\xDB\x91\x02\x91a\r\xD5_\x19\x84a\r\xBCV[\x92a\r\xBCV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\r\xF9a\r\xF4a\r\xFE\x92a\x02\xC6V[a\x0B\xD3V[a\x02\xC6V[\x90V[\x90V[\x91\x90a\x0E\x1Aa\x0E\x15a\x0E\"\x93a\r\xE5V[a\x0E\x01V[\x90\x83Ta\r\xC0V[\x90UV[_\x90V[a\x0E<\x91a\x0E6a\x0E&V[\x91a\x0E\x04V[V[[\x81\x81\x10a\x0EJWPPV[\x80a\x0EW_`\x01\x93a\x0E*V[\x01a\x0E?V[\x91\x90`\x1F\x81\x11a\x0EmW[PPPV[a\x0Eya\x0E\x9E\x93a\x04/V[\x90` a\x0E\x85\x84a\r\xB2V[\x83\x01\x93\x10a\x0E\xA6W[a\x0E\x97\x90a\r\xB2V[\x01\x90a\x0E>V[_\x80\x80a\x0EhV[\x91Pa\x0E\x97\x81\x92\x90Pa\x0E\x8EV[\x90a\x0E\xC4\x90_\x19\x90`\x08\x02a\x01\xF3V[\x19\x16\x90V[\x81a\x0E\xD3\x91a\x0E\xB4V[\x90`\x02\x02\x17\x90V[\x91a\x0E\xE6\x90\x82a\r\xAEV[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x0F\xA5Wa\x0F\n\x82a\x0F\x04\x85Ta\x03\xFCV[\x85a\x0E]V[_\x90`\x1F\x83\x11`\x01\x14a\x0F=W\x91\x80\x91a\x0F,\x93_\x92a\x0F1W[PPa\x0E\xC9V[\x90U[V[\x90\x91P\x015_\x80a\x0F%V[`\x1F\x19\x83\x16\x91a\x0FL\x85a\x04/V[\x92_[\x81\x81\x10a\x0F\x8DWP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x0FsW[PPP\x02\x01\x90Ua\x0F/V[a\x0F\x83\x91\x015`\x1F\x84\x16\x90a\x0E\xB4V[\x90U_\x80\x80a\x0FgV[\x91\x93` `\x01\x81\x92\x87\x87\x015\x81U\x01\x95\x01\x92\x01a\x0FOV[a\x04\xDBV[\x90a\x0F\xB5\x92\x91a\x0E\xDBV[V[\x91\x90a\x0F\xD1\x81a\x0F\xCA\x81a\x0F\xD6\x95a\x05eV[\x80\x95a\t\x82V[a\x04\xD1V[\x01\x90V[\x90\x91a\x0F\xF1\x92` \x83\x01\x92_\x81\x85\x03\x91\x01Ra\x0F\xB7V[\x90V[a\x10\x01\x81\x83\x90`\na\x0F\xAAV[\x90\x7F\x024\xA4\xE9\x10\xF2\xB1\xE6\x18\xF2\xC9;\xE3\x16\xEC\x0C\x7F@\xE1\xAF#\xFE3\xF9\xFB\xA2\xC5\xBB8\x8A\x95\xF2\x91a\x108a\x10/a\x01BV[\x92\x83\x92\x83a\x0F\xDAV[\x03\x90\xA1V[\x90a\x10G\x91a\r\x9AV[V[a\x10Qa\x1A\xBBV[a\x10Ya\x10[V[V[a\x10la\x10g_a\x0B\xF2V[a\x1B\x10V[V[a\x10va\x10IV[V[_\x90V[_\x1C\x90V[a\x10\x8Da\x10\x92\x91a\x10|V[a\x01\xF7V[\x90V[a\x10\x9F\x90Ta\x10\x81V[\x90V[a\x10\xAAa\x10xV[Pa\x10\xB4_a\x10\x95V[\x90V[`@\x1C\x90V[a\x10\xC9a\x10\xCE\x91a\x10\xB7V[a\x08\x02V[\x90V[a\x10\xDB\x90Ta\x10\xBDV[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x10\xF7a\x10\xFC\x91a\x10|V[a\x10\xDEV[\x90V[a\x11\t\x90Ta\x10\xEBV[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x11-a\x11(a\x112\x92a\x0B\xD0V[a\x0B\xD3V[a\x11\x0CV[\x90V[\x90V[a\x11La\x11Ga\x11Q\x92a\x115V[a\x0B\xD3V[a\x11\x0CV[\x90V[a\x11]\x90a\x0C\xE2V[\x90V[a\x11ta\x11oa\x11y\x92a\x0B\xD0V[a\x0B\xD3V[a\x02\xC6V[\x90V[\x90a\x11\x8Fg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91a\x0C\xA6V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x11\xADa\x11\xA8a\x11\xB2\x92a\x11\x0CV[a\x0B\xD3V[a\x11\x0CV[\x90V[\x90V[\x90a\x11\xCDa\x11\xC8a\x11\xD4\x92a\x11\x99V[a\x11\xB5V[\x82Ta\x11|V[\x90UV[`@\x1B\x90V[\x90a\x11\xF2h\xFF\0\0\0\0\0\0\0\0\x91a\x11\xD8V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x12\x05\x90a\x08=V[\x90V[\x90V[\x90a\x12 a\x12\x1Ba\x12'\x92a\x11\xFCV[a\x12\x08V[\x82Ta\x11\xDEV[\x90UV[a\x124\x90a\x118V[\x90RV[\x91\x90a\x12K\x90_` \x85\x01\x94\x01\x90a\x12+V[V[\x98\x95\x92\x9A\x97\x94\x91\x9A\x99\x96\x93\x90\x99a\x12ba\x1BoV[\x9B\x8C_\x01a\x12o\x90a\x10\xD1V[\x15a\x12y\x90a\x08=V[\x9B\x8D_\x01a\x12\x86\x90a\x10\xFFV[\x80_a\x12\x91\x90a\x11\x19V[\x90a\x12\x9B\x90a\x11\x0CV[\x14\x80a\x13\xC0W[\x90a\x12\xB6a\x12\xB0`\x01a\x118V[\x91a\x11\x0CV[\x14\x80a\x13\x98W[a\x12\xC8\x90\x91\x15a\x08=V[\x90\x81a\x13\x87W[Pa\x13dWa\x12\xFA\x9B\x8E\x8Ea\x12\xEFa\x12\xE7`\x01a\x118V[_\x84\x01a\x11\xB8V[a\x13PW[Pa\x18\xEAV[a\x13\x02W[PV[a\x13\x0F\x90_\x80\x91\x01a\x12\x0BV[`\x01a\x13G\x7F\xC7\xF5\x05\xB2\xF3q\xAE!u\xEEI\x13\xF4I\x9E\x1F&3\xA7\xB5\x93c!\xEE\xD1\xCD\xAE\xB6\x11Q\x81\xD2\x91a\x13>a\x01BV[\x91\x82\x91\x82a\x128V[\x03\x90\xA1_a\x12\xFFV[a\x13^\x90_`\x01\x91\x01a\x12\x0BV[\x8Ea\x12\xF4V[a\x13la\x01BV[c\xF9.\xE8\xA9`\xE0\x1B\x81R\x80a\x13\x83`\x04\x82\x01a\x01\xACV[\x03\x90\xFD[a\x13\x92\x91P\x15a\x08=V[_a\x12\xCFV[Pa\x12\xC8a\x13\xA50a\x11TV[;a\x13\xB8a\x13\xB2_a\x11`V[\x91a\x02\xC6V[\x14\x90Pa\x12\xBDV[P\x8Da\x12\xA2V[_\x7FChain ID cannot be zero\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x13\xFB`\x17` \x92a\x05eV[a\x14\x04\x81a\x13\xC7V[\x01\x90V[a\x14\x1D\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x13\xEEV[\x90V[\x15a\x14'WV[a\x14/a\x01BV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x14E`\x04\x82\x01a\x14\x08V[\x03\x90\xFD[` \x7Fe zero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FArbitrum bridge address cannot b_\x82\x01R\x01RV[a\x14\xA3`&`@\x92a\x05eV[a\x14\xAC\x81a\x14IV[\x01\x90V[a\x14\xC5\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x14\x96V[\x90V[\x15a\x14\xCFWV[a\x14\xD7a\x01BV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x14\xED`\x04\x82\x01a\x14\xB0V[\x03\x90\xFD[` \x7F zero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FArbitrum inbox address cannot be_\x82\x01R\x01RV[a\x15K`%`@\x92a\x05eV[a\x15T\x81a\x14\xF1V[\x01\x90V[a\x15m\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x15>V[\x90V[\x15a\x15wWV[a\x15\x7Fa\x01BV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x15\x95`\x04\x82\x01a\x15XV[\x03\x90\xFD[` \x7Fot be zero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FSequencing contract address cann_\x82\x01R\x01RV[a\x15\xF3`*`@\x92a\x05eV[a\x15\xFC\x81a\x15\x99V[\x01\x90V[a\x16\x15\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x15\xE6V[\x90V[\x15a\x16\x1FWV[a\x16'a\x01BV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x16=`\x04\x82\x01a\x16\0V[\x03\x90\xFD[` \x7Fess\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FRollup owner cannot be zero addr_\x82\x01R\x01RV[a\x16\x9B`#`@\x92a\x05eV[a\x16\xA4\x81a\x16AV[\x01\x90V[a\x16\xBD\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x16\x8EV[\x90V[\x15a\x16\xC7WV[a\x16\xCFa\x01BV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x16\xE5`\x04\x82\x01a\x16\xA8V[\x03\x90\xFD[\x90a\x16\xF5_\x19\x91a\x0C\xA6V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x17\x14a\x17\x0Fa\x17\x1B\x92a\r\xE5V[a\x0E\x01V[\x82Ta\x16\xE9V[\x90UV[a\x17(\x90a\x07\xA8V[\x90V[a\x174\x90a\x10|V[\x90V[\x90a\x17La\x17Ga\x17S\x92a\x17\x1FV[a\x17+V[\x82Ta\x16\xE9V[\x90UV[\x90a\x17c`\xFF\x91a\x0C\xA6V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x17\x82a\x17}a\x17\x89\x92a\x11\xFCV[a\x12\x08V[\x82Ta\x17WV[\x90UV[`\x08\x1B\x90V[\x90a\x17\xA6a\x01\0`\x01`\xA8\x1B\x03\x91a\x17\x8DV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x17\xC5a\x17\xC0a\x17\xCC\x92a\x0C\xEEV[a\x0C\xFAV[\x82Ta\x17\x93V[\x90UV[`\xA0\x1B\x90V[\x90a\x17\xE5`\xFF`\xA0\x1B\x91a\x17\xD0V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x18\x04a\x17\xFFa\x18\x0B\x92a\x11\xFCV[a\x12\x08V[\x82Ta\x17\xD6V[\x90UV[\x90a\x18\x19\x81a\x05aV[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x18\xD9Wa\x18=\x82a\x187\x85Ta\x03\xFCV[\x85a\x0E]V[` \x90`\x1F\x83\x11`\x01\x14a\x18qW\x91\x80\x91a\x18`\x93_\x92a\x18eW[PPa\x0E\xC9V[\x90U[V[\x90\x91P\x01Q_\x80a\x18YV[`\x1F\x19\x83\x16\x91a\x18\x80\x85a\x04/V[\x92_[\x81\x81\x10a\x18\xC1WP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x18\xA7W[PPP\x02\x01\x90Ua\x18cV[a\x18\xB7\x91\x01Q`\x1F\x84\x16\x90a\x0E\xB4V[\x90U_\x80\x80a\x18\x9BV[\x91\x93` `\x01\x81\x92\x87\x87\x01Q\x81U\x01\x95\x01\x92\x01a\x18\x83V[a\x04\xDBV[\x90a\x18\xE8\x91a\x18\x0FV[V[\x95a\x19\xF9a\x1A\x0E\x96a\x19\xF2\x8B\x97a\x1A#\x9F\x9E\x9Ca\x1A\x07\x98a\x1A\x1C\x9F\x9C\x8F\x99a\x1A\x15\x9F\x9Aa\x1A\0\x9Aa\x19\xD6a\x19\xE4\x94a\x19\xCFa\x19\xDD\x94a\x19\xAEa\x19\xEB\x9Aa\x19C\x85a\x19<a\x196_a\x11`V[\x91a\x02\xC6V[\x14\x15a\x14 V[a\x19h\x8Ba\x19aa\x19[a\x19V_a\x0B\xF2V[a\x01_V[\x91a\x01_V[\x14\x15a\x14\xC8V[a\x19\x8D\x8Da\x19\x86a\x19\x80a\x19{_a\x0B\xF2V[a\x01_V[\x91a\x01_V[\x14\x15a\x15pV[a\x19\xA7a\x19\xA1a\x19\x9C_a\x0B\xF2V[a\x01_V[\x91a\x01_V[\x14\x15a\x16\x18V[a\x19\xC8a\x19\xC2a\x19\xBD_a\x0B\xF2V[a\x01_V[\x91a\x01_V[\x14\x15a\x16\xC0V[`\x01a\x16\xFFV[`\x02a\x177V[`\x03a\x17mV[`\x03a\x17\xB0V[`\x04a\x0C\xFDV[`\x04a\x17\xEFV[`\x05a\x16\xFFV[`\x06a\x16\xFFV[`\x07a\x0C\xFDV[`\x08a\x16\xFFV[`\ta\x0C\xFDV[`\na\x18\xDEV[a\x1A,3a\x1B\x10V[V[\x90a\x1AB\x9B\x9A\x99\x98\x97\x96\x95\x94\x93\x92\x91a\x12MV[V[a\x1AU\x90a\x1APa\x1A\xBBV[a\x1AWV[V[\x80a\x1Ara\x1Ala\x1Ag_a\x0B\xF2V[a\x01_V[\x91a\x01_V[\x14a\x1A\x82Wa\x1A\x80\x90a\x1B\x10V[V[a\x1A\xACa\x1A\x8E_a\x0B\xF2V[a\x1A\x96a\x01BV[\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x02DV[\x03\x90\xFD[a\x1A\xB9\x90a\x1ADV[V[a\x1A\xC3a\x10\xA2V[a\x1A\xDCa\x1A\xD6a\x1A\xD1a\x1B\x93V[a\x01_V[\x91a\x01_V[\x03a\x1A\xE3WV[a\x1B\x0Ca\x1A\xEEa\x1B\x93V[a\x1A\xF6a\x01BV[\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x02DV[\x03\x90\xFD[a\x1B\x19_a\x10\x95V[a\x1B#\x82_a\x0C\xFDV[\x90a\x1BWa\x1BQ\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x0C\xEEV[\x91a\x0C\xEEV[\x91a\x1B`a\x01BV[\x80a\x1Bj\x81a\x01\xACV[\x03\x90\xA3V[\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0\x90V[a\x1B\x9Ba\x10xV[P3\x90V\xFE\xA2dipfsX\"\x12 \xFC\x12\xE1\xFD\x85\x04c?\x08\x874\xFE6\xB9\xD0_n\xFA\xB9W\xB2\xEB\xF1\xE4\x1F\xAD\x80\xA6\xBBD\x01YdsolcC\0\x08\x19\x003",
    );
    /**Custom error with signature `InvalidInitialization()` and selector `0xf92ee8a9`.
```solidity
error InvalidInitialization();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidInitialization {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidInitialization> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidInitialization) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidInitialization {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidInitialization {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidInitialization()";
            const SELECTOR: [u8; 4] = [249u8, 46u8, 232u8, 169u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `NotInitializing()` and selector `0xd7e6bcf8`.
```solidity
error NotInitializing();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotInitializing {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotInitializing> for UnderlyingRustTuple<'_> {
            fn from(value: NotInitializing) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotInitializing {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotInitializing {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotInitializing()";
            const SELECTOR: [u8; 4] = [215u8, 230u8, 188u8, 248u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `OwnableInvalidOwner(address)` and selector `0x1e4fbdf7`.
```solidity
error OwnableInvalidOwner(address owner);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableInvalidOwner {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableInvalidOwner> for UnderlyingRustTuple<'_> {
            fn from(value: OwnableInvalidOwner) -> Self {
                (value.owner,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for OwnableInvalidOwner {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { owner: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableInvalidOwner {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableInvalidOwner(address)";
            const SELECTOR: [u8; 4] = [30u8, 79u8, 189u8, 247u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `OwnableUnauthorizedAccount(address)` and selector `0x118cdaa7`.
```solidity
error OwnableUnauthorizedAccount(address account);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableUnauthorizedAccount {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: OwnableUnauthorizedAccount) -> Self {
                (value.account,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for OwnableUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { account: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableUnauthorizedAccount(address)";
            const SELECTOR: [u8; 4] = [17u8, 140u8, 218u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
        }
    };
    /**Event with signature `DefaultSequencingChainRpcUrlUpdated(string)` and selector `0x0234a4e910f2b1e618f2c93be316ec0c7f40e1af23fe33f9fba2c5bb388a95f2`.
```solidity
event DefaultSequencingChainRpcUrlUpdated(string newRpcUrl);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct DefaultSequencingChainRpcUrlUpdated {
        #[allow(missing_docs)]
        pub newRpcUrl: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for DefaultSequencingChainRpcUrlUpdated {
            type DataTuple<'a> = (alloy::sol_types::sol_data::String,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "DefaultSequencingChainRpcUrlUpdated(string)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                2u8,
                52u8,
                164u8,
                233u8,
                16u8,
                242u8,
                177u8,
                230u8,
                24u8,
                242u8,
                201u8,
                59u8,
                227u8,
                22u8,
                236u8,
                12u8,
                127u8,
                64u8,
                225u8,
                175u8,
                35u8,
                254u8,
                51u8,
                249u8,
                251u8,
                162u8,
                197u8,
                187u8,
                56u8,
                138u8,
                149u8,
                242u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { newRpcUrl: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.newRpcUrl,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData
        for DefaultSequencingChainRpcUrlUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&DefaultSequencingChainRpcUrlUpdated>
        for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &DefaultSequencingChainRpcUrlUpdated,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `Initialized(uint64)` and selector `0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2`.
```solidity
event Initialized(uint64 version);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Initialized {
        #[allow(missing_docs)]
        pub version: u64,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Initialized {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "Initialized(uint64)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                199u8,
                245u8,
                5u8,
                178u8,
                243u8,
                113u8,
                174u8,
                33u8,
                117u8,
                238u8,
                73u8,
                19u8,
                244u8,
                73u8,
                158u8,
                31u8,
                38u8,
                51u8,
                167u8,
                181u8,
                147u8,
                99u8,
                33u8,
                238u8,
                209u8,
                205u8,
                174u8,
                182u8,
                17u8,
                81u8,
                129u8,
                210u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { version: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.version),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Initialized {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Initialized> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Initialized) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `OwnershipTransferred(address,address)` and selector `0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0`.
```solidity
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct OwnershipTransferred {
        #[allow(missing_docs)]
        pub previousOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OwnershipTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OwnershipTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousOwner: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousOwner.clone(),
                    self.newOwner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousOwner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OwnershipTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OwnershipTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &OwnershipTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RollupOwnerUpdated(address)` and selector `0x8829bee46683608d5fd80e243c0fae04d129ce172f70db1021c1128074a6f4d9`.
```solidity
event RollupOwnerUpdated(address indexed newRollupOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RollupOwnerUpdated {
        #[allow(missing_docs)]
        pub newRollupOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RollupOwnerUpdated {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RollupOwnerUpdated(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                136u8,
                41u8,
                190u8,
                228u8,
                102u8,
                131u8,
                96u8,
                141u8,
                95u8,
                216u8,
                14u8,
                36u8,
                60u8,
                15u8,
                174u8,
                4u8,
                209u8,
                41u8,
                206u8,
                23u8,
                47u8,
                112u8,
                219u8,
                16u8,
                33u8,
                193u8,
                18u8,
                128u8,
                116u8,
                166u8,
                244u8,
                217u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { newRollupOwner: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.newRollupOwner.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newRollupOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RollupOwnerUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RollupOwnerUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RollupOwnerUpdated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {}
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Function with signature `ARBITRUM_BRIDGE_ADDRESS()` and selector `0x6edd6c09`.
```solidity
function ARBITRUM_BRIDGE_ADDRESS() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ARBITRUM_BRIDGE_ADDRESSCall {}
    ///Container type for the return parameters of the [`ARBITRUM_BRIDGE_ADDRESS()`](ARBITRUM_BRIDGE_ADDRESSCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ARBITRUM_BRIDGE_ADDRESSReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ARBITRUM_BRIDGE_ADDRESSCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: ARBITRUM_BRIDGE_ADDRESSCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ARBITRUM_BRIDGE_ADDRESSCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ARBITRUM_BRIDGE_ADDRESSReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: ARBITRUM_BRIDGE_ADDRESSReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ARBITRUM_BRIDGE_ADDRESSReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ARBITRUM_BRIDGE_ADDRESSCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ARBITRUM_BRIDGE_ADDRESSReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ARBITRUM_BRIDGE_ADDRESS()";
            const SELECTOR: [u8; 4] = [110u8, 221u8, 108u8, 9u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `ARBITRUM_IGNORE_DELAYED_MESSAGES()` and selector `0xe79388e6`.
```solidity
function ARBITRUM_IGNORE_DELAYED_MESSAGES() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ARBITRUM_IGNORE_DELAYED_MESSAGESCall {}
    ///Container type for the return parameters of the [`ARBITRUM_IGNORE_DELAYED_MESSAGES()`](ARBITRUM_IGNORE_DELAYED_MESSAGESCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ARBITRUM_IGNORE_DELAYED_MESSAGESReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ARBITRUM_IGNORE_DELAYED_MESSAGESCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: ARBITRUM_IGNORE_DELAYED_MESSAGESCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ARBITRUM_IGNORE_DELAYED_MESSAGESCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ARBITRUM_IGNORE_DELAYED_MESSAGESReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: ARBITRUM_IGNORE_DELAYED_MESSAGESReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ARBITRUM_IGNORE_DELAYED_MESSAGESReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ARBITRUM_IGNORE_DELAYED_MESSAGESCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ARBITRUM_IGNORE_DELAYED_MESSAGESReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ARBITRUM_IGNORE_DELAYED_MESSAGES()";
            const SELECTOR: [u8; 4] = [231u8, 147u8, 136u8, 230u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `ARBITRUM_INBOX_ADDRESS()` and selector `0xaa6a43d8`.
```solidity
function ARBITRUM_INBOX_ADDRESS() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ARBITRUM_INBOX_ADDRESSCall {}
    ///Container type for the return parameters of the [`ARBITRUM_INBOX_ADDRESS()`](ARBITRUM_INBOX_ADDRESSCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ARBITRUM_INBOX_ADDRESSReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ARBITRUM_INBOX_ADDRESSCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: ARBITRUM_INBOX_ADDRESSCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ARBITRUM_INBOX_ADDRESSCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ARBITRUM_INBOX_ADDRESSReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: ARBITRUM_INBOX_ADDRESSReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ARBITRUM_INBOX_ADDRESSReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ARBITRUM_INBOX_ADDRESSCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ARBITRUM_INBOX_ADDRESSReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ARBITRUM_INBOX_ADDRESS()";
            const SELECTOR: [u8; 4] = [170u8, 106u8, 67u8, 216u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `CHAIN_ID()` and selector `0x85e1f4d0`.
```solidity
function CHAIN_ID() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CHAIN_IDCall {}
    ///Container type for the return parameters of the [`CHAIN_ID()`](CHAIN_IDCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CHAIN_IDReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<CHAIN_IDCall> for UnderlyingRustTuple<'_> {
                fn from(value: CHAIN_IDCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for CHAIN_IDCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<CHAIN_IDReturn> for UnderlyingRustTuple<'_> {
                fn from(value: CHAIN_IDReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for CHAIN_IDReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for CHAIN_IDCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = CHAIN_IDReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "CHAIN_ID()";
            const SELECTOR: [u8; 4] = [133u8, 225u8, 244u8, 208u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `DEFAULT_SEQUENCING_CHAIN_RPC_URL()` and selector `0x66a1d108`.
```solidity
function DEFAULT_SEQUENCING_CHAIN_RPC_URL() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_SEQUENCING_CHAIN_RPC_URLCall {}
    ///Container type for the return parameters of the [`DEFAULT_SEQUENCING_CHAIN_RPC_URL()`](DEFAULT_SEQUENCING_CHAIN_RPC_URLCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_SEQUENCING_CHAIN_RPC_URLReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_SEQUENCING_CHAIN_RPC_URLCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_SEQUENCING_CHAIN_RPC_URLCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_SEQUENCING_CHAIN_RPC_URLCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_SEQUENCING_CHAIN_RPC_URLReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_SEQUENCING_CHAIN_RPC_URLReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_SEQUENCING_CHAIN_RPC_URLReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for DEFAULT_SEQUENCING_CHAIN_RPC_URLCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = DEFAULT_SEQUENCING_CHAIN_RPC_URLReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "DEFAULT_SEQUENCING_CHAIN_RPC_URL()";
            const SELECTOR: [u8; 4] = [102u8, 161u8, 209u8, 8u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `MINE_EMPTY_BLOCKS()` and selector `0xb97aba3e`.
```solidity
function MINE_EMPTY_BLOCKS() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MINE_EMPTY_BLOCKSCall {}
    ///Container type for the return parameters of the [`MINE_EMPTY_BLOCKS()`](MINE_EMPTY_BLOCKSCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MINE_EMPTY_BLOCKSReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<MINE_EMPTY_BLOCKSCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: MINE_EMPTY_BLOCKSCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for MINE_EMPTY_BLOCKSCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<MINE_EMPTY_BLOCKSReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: MINE_EMPTY_BLOCKSReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for MINE_EMPTY_BLOCKSReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for MINE_EMPTY_BLOCKSCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = MINE_EMPTY_BLOCKSReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "MINE_EMPTY_BLOCKS()";
            const SELECTOR: [u8; 4] = [185u8, 122u8, 186u8, 62u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `ROLLUP_OWNER()` and selector `0x41fc712d`.
```solidity
function ROLLUP_OWNER() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ROLLUP_OWNERCall {}
    ///Container type for the return parameters of the [`ROLLUP_OWNER()`](ROLLUP_OWNERCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ROLLUP_OWNERReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ROLLUP_OWNERCall> for UnderlyingRustTuple<'_> {
                fn from(value: ROLLUP_OWNERCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ROLLUP_OWNERCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ROLLUP_OWNERReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ROLLUP_OWNERReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ROLLUP_OWNERReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ROLLUP_OWNERCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ROLLUP_OWNERReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ROLLUP_OWNER()";
            const SELECTOR: [u8; 4] = [65u8, 252u8, 113u8, 45u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `SEQUENCING_CONTRACT_ADDRESS()` and selector `0xbf6db6f8`.
```solidity
function SEQUENCING_CONTRACT_ADDRESS() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SEQUENCING_CONTRACT_ADDRESSCall {}
    ///Container type for the return parameters of the [`SEQUENCING_CONTRACT_ADDRESS()`](SEQUENCING_CONTRACT_ADDRESSCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SEQUENCING_CONTRACT_ADDRESSReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SEQUENCING_CONTRACT_ADDRESSCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: SEQUENCING_CONTRACT_ADDRESSCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SEQUENCING_CONTRACT_ADDRESSCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SEQUENCING_CONTRACT_ADDRESSReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: SEQUENCING_CONTRACT_ADDRESSReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SEQUENCING_CONTRACT_ADDRESSReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for SEQUENCING_CONTRACT_ADDRESSCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = SEQUENCING_CONTRACT_ADDRESSReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SEQUENCING_CONTRACT_ADDRESS()";
            const SELECTOR: [u8; 4] = [191u8, 109u8, 182u8, 248u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `SEQUENCING_START_BLOCK()` and selector `0xa3c6e1e7`.
```solidity
function SEQUENCING_START_BLOCK() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SEQUENCING_START_BLOCKCall {}
    ///Container type for the return parameters of the [`SEQUENCING_START_BLOCK()`](SEQUENCING_START_BLOCKCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SEQUENCING_START_BLOCKReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SEQUENCING_START_BLOCKCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: SEQUENCING_START_BLOCKCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SEQUENCING_START_BLOCKCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SEQUENCING_START_BLOCKReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: SEQUENCING_START_BLOCKReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SEQUENCING_START_BLOCKReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for SEQUENCING_START_BLOCKCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = SEQUENCING_START_BLOCKReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SEQUENCING_START_BLOCK()";
            const SELECTOR: [u8; 4] = [163u8, 198u8, 225u8, 231u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `SETTLEMENT_DELAY()` and selector `0x57d1ba25`.
```solidity
function SETTLEMENT_DELAY() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SETTLEMENT_DELAYCall {}
    ///Container type for the return parameters of the [`SETTLEMENT_DELAY()`](SETTLEMENT_DELAYCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SETTLEMENT_DELAYReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SETTLEMENT_DELAYCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: SETTLEMENT_DELAYCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SETTLEMENT_DELAYCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SETTLEMENT_DELAYReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: SETTLEMENT_DELAYReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SETTLEMENT_DELAYReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for SETTLEMENT_DELAYCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = SETTLEMENT_DELAYReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SETTLEMENT_DELAY()";
            const SELECTOR: [u8; 4] = [87u8, 209u8, 186u8, 37u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `SETTLEMENT_START_BLOCK()` and selector `0xd1f4737c`.
```solidity
function SETTLEMENT_START_BLOCK() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SETTLEMENT_START_BLOCKCall {}
    ///Container type for the return parameters of the [`SETTLEMENT_START_BLOCK()`](SETTLEMENT_START_BLOCKCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SETTLEMENT_START_BLOCKReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SETTLEMENT_START_BLOCKCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: SETTLEMENT_START_BLOCKCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SETTLEMENT_START_BLOCKCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<SETTLEMENT_START_BLOCKReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: SETTLEMENT_START_BLOCKReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for SETTLEMENT_START_BLOCKReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for SETTLEMENT_START_BLOCKCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = SETTLEMENT_START_BLOCKReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SETTLEMENT_START_BLOCK()";
            const SELECTOR: [u8; 4] = [209u8, 244u8, 115u8, 124u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `TARGET_ROLLUP_TYPE()` and selector `0xacc32b35`.
```solidity
function TARGET_ROLLUP_TYPE() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TARGET_ROLLUP_TYPECall {}
    ///Container type for the return parameters of the [`TARGET_ROLLUP_TYPE()`](TARGET_ROLLUP_TYPECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TARGET_ROLLUP_TYPEReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<TARGET_ROLLUP_TYPECall>
            for UnderlyingRustTuple<'_> {
                fn from(value: TARGET_ROLLUP_TYPECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for TARGET_ROLLUP_TYPECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<TARGET_ROLLUP_TYPEReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: TARGET_ROLLUP_TYPEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for TARGET_ROLLUP_TYPEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for TARGET_ROLLUP_TYPECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = TARGET_ROLLUP_TYPEReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "TARGET_ROLLUP_TYPE()";
            const SELECTOR: [u8; 4] = [172u8, 195u8, 43u8, 53u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `initialize(uint256,bytes32,bool,address,address,bool,uint256,uint256,address,uint256,address,string)` and selector `0xcdad39fc`.
```solidity
function initialize(uint256 chainId, bytes32 targetRollupType, bool mineEmptyBlocks, address arbitrumBridgeAddress, address arbitrumInboxAddress, bool arbitrumIgnoreDelayedMessages, uint256 settlementDelay, uint256 settlementStartBlock, address sequencingContractAddress, uint256 sequencingStartBlock, address rollupOwner, string memory sequencingChainRpcUrl) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeCall {
        #[allow(missing_docs)]
        pub chainId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub targetRollupType: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub mineEmptyBlocks: bool,
        #[allow(missing_docs)]
        pub arbitrumBridgeAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub arbitrumInboxAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub arbitrumIgnoreDelayedMessages: bool,
        #[allow(missing_docs)]
        pub settlementDelay: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub settlementStartBlock: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub sequencingContractAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sequencingStartBlock: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub rollupOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sequencingChainRpcUrl: alloy::sol_types::private::String,
    }
    ///Container type for the return parameters of the [`initialize(uint256,bytes32,bool,address,address,bool,uint256,uint256,address,uint256,address,string)`](initializeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::String,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::FixedBytes<32>,
                bool,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                bool,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::String,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeCall> for UnderlyingRustTuple<'_> {
                fn from(value: initializeCall) -> Self {
                    (
                        value.chainId,
                        value.targetRollupType,
                        value.mineEmptyBlocks,
                        value.arbitrumBridgeAddress,
                        value.arbitrumInboxAddress,
                        value.arbitrumIgnoreDelayedMessages,
                        value.settlementDelay,
                        value.settlementStartBlock,
                        value.sequencingContractAddress,
                        value.sequencingStartBlock,
                        value.rollupOwner,
                        value.sequencingChainRpcUrl,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        chainId: tuple.0,
                        targetRollupType: tuple.1,
                        mineEmptyBlocks: tuple.2,
                        arbitrumBridgeAddress: tuple.3,
                        arbitrumInboxAddress: tuple.4,
                        arbitrumIgnoreDelayedMessages: tuple.5,
                        settlementDelay: tuple.6,
                        settlementStartBlock: tuple.7,
                        sequencingContractAddress: tuple.8,
                        sequencingStartBlock: tuple.9,
                        rollupOwner: tuple.10,
                        sequencingChainRpcUrl: tuple.11,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: initializeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for initializeCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::String,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = initializeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "initialize(uint256,bytes32,bool,address,address,bool,uint256,uint256,address,uint256,address,string)";
            const SELECTOR: [u8; 4] = [205u8, 173u8, 57u8, 252u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.chainId),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.targetRollupType),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.mineEmptyBlocks,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.arbitrumBridgeAddress,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.arbitrumInboxAddress,
                    ),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.arbitrumIgnoreDelayedMessages,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.settlementDelay),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.settlementStartBlock),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.sequencingContractAddress,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.sequencingStartBlock),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.rollupOwner,
                    ),
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.sequencingChainRpcUrl,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `owner()` and selector `0x8da5cb5b`.
```solidity
function owner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerCall {}
    ///Container type for the return parameters of the [`owner()`](ownerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "owner()";
            const SELECTOR: [u8; 4] = [141u8, 165u8, 203u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `renounceOwnership()` and selector `0x715018a6`.
```solidity
function renounceOwnership() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipCall {}
    ///Container type for the return parameters of the [`renounceOwnership()`](renounceOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceOwnershipCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceOwnership()";
            const SELECTOR: [u8; 4] = [113u8, 80u8, 24u8, 166u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferOwnership(address)` and selector `0xf2fde38b`.
```solidity
function transferOwnership(address newOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipCall {
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferOwnership(address)`](transferOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipCall) -> Self {
                    (value.newOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferOwnershipCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferOwnership(address)";
            const SELECTOR: [u8; 4] = [242u8, 253u8, 227u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newOwner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `updateDefaultSequencingChainRpcUrl(string)` and selector `0x62c73caa`.
```solidity
function updateDefaultSequencingChainRpcUrl(string memory newRpcUrl) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateDefaultSequencingChainRpcUrlCall {
        #[allow(missing_docs)]
        pub newRpcUrl: alloy::sol_types::private::String,
    }
    ///Container type for the return parameters of the [`updateDefaultSequencingChainRpcUrl(string)`](updateDefaultSequencingChainRpcUrlCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateDefaultSequencingChainRpcUrlReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateDefaultSequencingChainRpcUrlCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateDefaultSequencingChainRpcUrlCall) -> Self {
                    (value.newRpcUrl,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateDefaultSequencingChainRpcUrlCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newRpcUrl: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateDefaultSequencingChainRpcUrlReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateDefaultSequencingChainRpcUrlReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateDefaultSequencingChainRpcUrlReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for updateDefaultSequencingChainRpcUrlCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::String,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = updateDefaultSequencingChainRpcUrlReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "updateDefaultSequencingChainRpcUrl(string)";
            const SELECTOR: [u8; 4] = [98u8, 199u8, 60u8, 170u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.newRpcUrl,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `updateRollupOwner(address)` and selector `0x2a84b0f0`.
```solidity
function updateRollupOwner(address newRollupOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateRollupOwnerCall {
        #[allow(missing_docs)]
        pub newRollupOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`updateRollupOwner(address)`](updateRollupOwnerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateRollupOwnerReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateRollupOwnerCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateRollupOwnerCall) -> Self {
                    (value.newRollupOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateRollupOwnerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newRollupOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateRollupOwnerReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateRollupOwnerReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateRollupOwnerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for updateRollupOwnerCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = updateRollupOwnerReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "updateRollupOwner(address)";
            const SELECTOR: [u8; 4] = [42u8, 132u8, 176u8, 240u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newRollupOwner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`ChainConfig`](self) function calls.
    pub enum ChainConfigCalls {
        #[allow(missing_docs)]
        ARBITRUM_BRIDGE_ADDRESS(ARBITRUM_BRIDGE_ADDRESSCall),
        #[allow(missing_docs)]
        ARBITRUM_IGNORE_DELAYED_MESSAGES(ARBITRUM_IGNORE_DELAYED_MESSAGESCall),
        #[allow(missing_docs)]
        ARBITRUM_INBOX_ADDRESS(ARBITRUM_INBOX_ADDRESSCall),
        #[allow(missing_docs)]
        CHAIN_ID(CHAIN_IDCall),
        #[allow(missing_docs)]
        DEFAULT_SEQUENCING_CHAIN_RPC_URL(DEFAULT_SEQUENCING_CHAIN_RPC_URLCall),
        #[allow(missing_docs)]
        MINE_EMPTY_BLOCKS(MINE_EMPTY_BLOCKSCall),
        #[allow(missing_docs)]
        ROLLUP_OWNER(ROLLUP_OWNERCall),
        #[allow(missing_docs)]
        SEQUENCING_CONTRACT_ADDRESS(SEQUENCING_CONTRACT_ADDRESSCall),
        #[allow(missing_docs)]
        SEQUENCING_START_BLOCK(SEQUENCING_START_BLOCKCall),
        #[allow(missing_docs)]
        SETTLEMENT_DELAY(SETTLEMENT_DELAYCall),
        #[allow(missing_docs)]
        SETTLEMENT_START_BLOCK(SETTLEMENT_START_BLOCKCall),
        #[allow(missing_docs)]
        TARGET_ROLLUP_TYPE(TARGET_ROLLUP_TYPECall),
        #[allow(missing_docs)]
        initialize(initializeCall),
        #[allow(missing_docs)]
        owner(ownerCall),
        #[allow(missing_docs)]
        renounceOwnership(renounceOwnershipCall),
        #[allow(missing_docs)]
        transferOwnership(transferOwnershipCall),
        #[allow(missing_docs)]
        updateDefaultSequencingChainRpcUrl(updateDefaultSequencingChainRpcUrlCall),
        #[allow(missing_docs)]
        updateRollupOwner(updateRollupOwnerCall),
    }
    #[automatically_derived]
    impl ChainConfigCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [42u8, 132u8, 176u8, 240u8],
            [65u8, 252u8, 113u8, 45u8],
            [87u8, 209u8, 186u8, 37u8],
            [98u8, 199u8, 60u8, 170u8],
            [102u8, 161u8, 209u8, 8u8],
            [110u8, 221u8, 108u8, 9u8],
            [113u8, 80u8, 24u8, 166u8],
            [133u8, 225u8, 244u8, 208u8],
            [141u8, 165u8, 203u8, 91u8],
            [163u8, 198u8, 225u8, 231u8],
            [170u8, 106u8, 67u8, 216u8],
            [172u8, 195u8, 43u8, 53u8],
            [185u8, 122u8, 186u8, 62u8],
            [191u8, 109u8, 182u8, 248u8],
            [205u8, 173u8, 57u8, 252u8],
            [209u8, 244u8, 115u8, 124u8],
            [231u8, 147u8, 136u8, 230u8],
            [242u8, 253u8, 227u8, 139u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ChainConfigCalls {
        const NAME: &'static str = "ChainConfigCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 18usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::ARBITRUM_BRIDGE_ADDRESS(_) => {
                    <ARBITRUM_BRIDGE_ADDRESSCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::ARBITRUM_IGNORE_DELAYED_MESSAGES(_) => {
                    <ARBITRUM_IGNORE_DELAYED_MESSAGESCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::ARBITRUM_INBOX_ADDRESS(_) => {
                    <ARBITRUM_INBOX_ADDRESSCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::CHAIN_ID(_) => <CHAIN_IDCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::DEFAULT_SEQUENCING_CHAIN_RPC_URL(_) => {
                    <DEFAULT_SEQUENCING_CHAIN_RPC_URLCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::MINE_EMPTY_BLOCKS(_) => {
                    <MINE_EMPTY_BLOCKSCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::ROLLUP_OWNER(_) => {
                    <ROLLUP_OWNERCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::SEQUENCING_CONTRACT_ADDRESS(_) => {
                    <SEQUENCING_CONTRACT_ADDRESSCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::SEQUENCING_START_BLOCK(_) => {
                    <SEQUENCING_START_BLOCKCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::SETTLEMENT_DELAY(_) => {
                    <SETTLEMENT_DELAYCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::SETTLEMENT_START_BLOCK(_) => {
                    <SETTLEMENT_START_BLOCKCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::TARGET_ROLLUP_TYPE(_) => {
                    <TARGET_ROLLUP_TYPECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::initialize(_) => {
                    <initializeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::owner(_) => <ownerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::renounceOwnership(_) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferOwnership(_) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::updateDefaultSequencingChainRpcUrl(_) => {
                    <updateDefaultSequencingChainRpcUrlCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::updateRollupOwner(_) => {
                    <updateRollupOwnerCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<ChainConfigCalls>] = &[
                {
                    fn updateRollupOwner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ChainConfigCalls> {
                        <updateRollupOwnerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ChainConfigCalls::updateRollupOwner)
                    }
                    updateRollupOwner
                },
                {
                    fn ROLLUP_OWNER(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ChainConfigCalls> {
                        <ROLLUP_OWNERCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ChainConfigCalls::ROLLUP_OWNER)
                    }
                    ROLLUP_OWNER
                },
                {
                    fn SETTLEMENT_DELAY(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ChainConfigCalls> {
                        <SETTLEMENT_DELAYCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ChainConfigCalls::SETTLEMENT_DELAY)
                    }
                    SETTLEMENT_DELAY
                },
                {
                    fn updateDefaultSequencingChainRpcUrl(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ChainConfigCalls> {
                        <updateDefaultSequencingChainRpcUrlCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ChainConfigCalls::updateDefaultSequencingChainRpcUrl)
                    }
                    updateDefaultSequencingChainRpcUrl
                },
                {
                    fn DEFAULT_SEQUENCING_CHAIN_RPC_URL(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ChainConfigCalls> {
                        <DEFAULT_SEQUENCING_CHAIN_RPC_URLCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ChainConfigCalls::DEFAULT_SEQUENCING_CHAIN_RPC_URL)
                    }
                    DEFAULT_SEQUENCING_CHAIN_RPC_URL
                },
                {
                    fn ARBITRUM_BRIDGE_ADDRESS(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ChainConfigCalls> {
                        <ARBITRUM_BRIDGE_ADDRESSCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ChainConfigCalls::ARBITRUM_BRIDGE_ADDRESS)
                    }
                    ARBITRUM_BRIDGE_ADDRESS
                },
                {
                    fn renounceOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ChainConfigCalls> {
                        <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ChainConfigCalls::renounceOwnership)
                    }
                    renounceOwnership
                },
                {
                    fn CHAIN_ID(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ChainConfigCalls> {
                        <CHAIN_IDCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ChainConfigCalls::CHAIN_ID)
                    }
                    CHAIN_ID
                },
                {
                    fn owner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ChainConfigCalls> {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ChainConfigCalls::owner)
                    }
                    owner
                },
                {
                    fn SEQUENCING_START_BLOCK(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ChainConfigCalls> {
                        <SEQUENCING_START_BLOCKCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ChainConfigCalls::SEQUENCING_START_BLOCK)
                    }
                    SEQUENCING_START_BLOCK
                },
                {
                    fn ARBITRUM_INBOX_ADDRESS(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ChainConfigCalls> {
                        <ARBITRUM_INBOX_ADDRESSCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ChainConfigCalls::ARBITRUM_INBOX_ADDRESS)
                    }
                    ARBITRUM_INBOX_ADDRESS
                },
                {
                    fn TARGET_ROLLUP_TYPE(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ChainConfigCalls> {
                        <TARGET_ROLLUP_TYPECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ChainConfigCalls::TARGET_ROLLUP_TYPE)
                    }
                    TARGET_ROLLUP_TYPE
                },
                {
                    fn MINE_EMPTY_BLOCKS(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ChainConfigCalls> {
                        <MINE_EMPTY_BLOCKSCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ChainConfigCalls::MINE_EMPTY_BLOCKS)
                    }
                    MINE_EMPTY_BLOCKS
                },
                {
                    fn SEQUENCING_CONTRACT_ADDRESS(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ChainConfigCalls> {
                        <SEQUENCING_CONTRACT_ADDRESSCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ChainConfigCalls::SEQUENCING_CONTRACT_ADDRESS)
                    }
                    SEQUENCING_CONTRACT_ADDRESS
                },
                {
                    fn initialize(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ChainConfigCalls> {
                        <initializeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ChainConfigCalls::initialize)
                    }
                    initialize
                },
                {
                    fn SETTLEMENT_START_BLOCK(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ChainConfigCalls> {
                        <SETTLEMENT_START_BLOCKCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ChainConfigCalls::SETTLEMENT_START_BLOCK)
                    }
                    SETTLEMENT_START_BLOCK
                },
                {
                    fn ARBITRUM_IGNORE_DELAYED_MESSAGES(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ChainConfigCalls> {
                        <ARBITRUM_IGNORE_DELAYED_MESSAGESCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ChainConfigCalls::ARBITRUM_IGNORE_DELAYED_MESSAGES)
                    }
                    ARBITRUM_IGNORE_DELAYED_MESSAGES
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ChainConfigCalls> {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ChainConfigCalls::transferOwnership)
                    }
                    transferOwnership
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::ARBITRUM_BRIDGE_ADDRESS(inner) => {
                    <ARBITRUM_BRIDGE_ADDRESSCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ARBITRUM_IGNORE_DELAYED_MESSAGES(inner) => {
                    <ARBITRUM_IGNORE_DELAYED_MESSAGESCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ARBITRUM_INBOX_ADDRESS(inner) => {
                    <ARBITRUM_INBOX_ADDRESSCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::CHAIN_ID(inner) => {
                    <CHAIN_IDCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::DEFAULT_SEQUENCING_CHAIN_RPC_URL(inner) => {
                    <DEFAULT_SEQUENCING_CHAIN_RPC_URLCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::MINE_EMPTY_BLOCKS(inner) => {
                    <MINE_EMPTY_BLOCKSCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ROLLUP_OWNER(inner) => {
                    <ROLLUP_OWNERCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SEQUENCING_CONTRACT_ADDRESS(inner) => {
                    <SEQUENCING_CONTRACT_ADDRESSCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SEQUENCING_START_BLOCK(inner) => {
                    <SEQUENCING_START_BLOCKCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SETTLEMENT_DELAY(inner) => {
                    <SETTLEMENT_DELAYCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SETTLEMENT_START_BLOCK(inner) => {
                    <SETTLEMENT_START_BLOCKCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::TARGET_ROLLUP_TYPE(inner) => {
                    <TARGET_ROLLUP_TYPECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::updateDefaultSequencingChainRpcUrl(inner) => {
                    <updateDefaultSequencingChainRpcUrlCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::updateRollupOwner(inner) => {
                    <updateRollupOwnerCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::ARBITRUM_BRIDGE_ADDRESS(inner) => {
                    <ARBITRUM_BRIDGE_ADDRESSCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ARBITRUM_IGNORE_DELAYED_MESSAGES(inner) => {
                    <ARBITRUM_IGNORE_DELAYED_MESSAGESCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ARBITRUM_INBOX_ADDRESS(inner) => {
                    <ARBITRUM_INBOX_ADDRESSCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::CHAIN_ID(inner) => {
                    <CHAIN_IDCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::DEFAULT_SEQUENCING_CHAIN_RPC_URL(inner) => {
                    <DEFAULT_SEQUENCING_CHAIN_RPC_URLCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::MINE_EMPTY_BLOCKS(inner) => {
                    <MINE_EMPTY_BLOCKSCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ROLLUP_OWNER(inner) => {
                    <ROLLUP_OWNERCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SEQUENCING_CONTRACT_ADDRESS(inner) => {
                    <SEQUENCING_CONTRACT_ADDRESSCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SEQUENCING_START_BLOCK(inner) => {
                    <SEQUENCING_START_BLOCKCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SETTLEMENT_DELAY(inner) => {
                    <SETTLEMENT_DELAYCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SETTLEMENT_START_BLOCK(inner) => {
                    <SETTLEMENT_START_BLOCKCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::TARGET_ROLLUP_TYPE(inner) => {
                    <TARGET_ROLLUP_TYPECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::updateDefaultSequencingChainRpcUrl(inner) => {
                    <updateDefaultSequencingChainRpcUrlCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::updateRollupOwner(inner) => {
                    <updateRollupOwnerCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`ChainConfig`](self) custom errors.
    pub enum ChainConfigErrors {
        #[allow(missing_docs)]
        InvalidInitialization(InvalidInitialization),
        #[allow(missing_docs)]
        NotInitializing(NotInitializing),
        #[allow(missing_docs)]
        OwnableInvalidOwner(OwnableInvalidOwner),
        #[allow(missing_docs)]
        OwnableUnauthorizedAccount(OwnableUnauthorizedAccount),
    }
    #[automatically_derived]
    impl ChainConfigErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [17u8, 140u8, 218u8, 167u8],
            [30u8, 79u8, 189u8, 247u8],
            [215u8, 230u8, 188u8, 248u8],
            [249u8, 46u8, 232u8, 169u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ChainConfigErrors {
        const NAME: &'static str = "ChainConfigErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 4usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::InvalidInitialization(_) => {
                    <InvalidInitialization as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotInitializing(_) => {
                    <NotInitializing as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableInvalidOwner(_) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableUnauthorizedAccount(_) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<ChainConfigErrors>] = &[
                {
                    fn OwnableUnauthorizedAccount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ChainConfigErrors> {
                        <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ChainConfigErrors::OwnableUnauthorizedAccount)
                    }
                    OwnableUnauthorizedAccount
                },
                {
                    fn OwnableInvalidOwner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ChainConfigErrors> {
                        <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ChainConfigErrors::OwnableInvalidOwner)
                    }
                    OwnableInvalidOwner
                },
                {
                    fn NotInitializing(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ChainConfigErrors> {
                        <NotInitializing as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ChainConfigErrors::NotInitializing)
                    }
                    NotInitializing
                },
                {
                    fn InvalidInitialization(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ChainConfigErrors> {
                        <InvalidInitialization as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ChainConfigErrors::InvalidInitialization)
                    }
                    InvalidInitialization
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::InvalidInitialization(inner) => {
                    <InvalidInitialization as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotInitializing(inner) => {
                    <NotInitializing as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::InvalidInitialization(inner) => {
                    <InvalidInitialization as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotInitializing(inner) => {
                    <NotInitializing as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`ChainConfig`](self) events.
    pub enum ChainConfigEvents {
        #[allow(missing_docs)]
        DefaultSequencingChainRpcUrlUpdated(DefaultSequencingChainRpcUrlUpdated),
        #[allow(missing_docs)]
        Initialized(Initialized),
        #[allow(missing_docs)]
        OwnershipTransferred(OwnershipTransferred),
        #[allow(missing_docs)]
        RollupOwnerUpdated(RollupOwnerUpdated),
    }
    #[automatically_derived]
    impl ChainConfigEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                2u8,
                52u8,
                164u8,
                233u8,
                16u8,
                242u8,
                177u8,
                230u8,
                24u8,
                242u8,
                201u8,
                59u8,
                227u8,
                22u8,
                236u8,
                12u8,
                127u8,
                64u8,
                225u8,
                175u8,
                35u8,
                254u8,
                51u8,
                249u8,
                251u8,
                162u8,
                197u8,
                187u8,
                56u8,
                138u8,
                149u8,
                242u8,
            ],
            [
                136u8,
                41u8,
                190u8,
                228u8,
                102u8,
                131u8,
                96u8,
                141u8,
                95u8,
                216u8,
                14u8,
                36u8,
                60u8,
                15u8,
                174u8,
                4u8,
                209u8,
                41u8,
                206u8,
                23u8,
                47u8,
                112u8,
                219u8,
                16u8,
                33u8,
                193u8,
                18u8,
                128u8,
                116u8,
                166u8,
                244u8,
                217u8,
            ],
            [
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ],
            [
                199u8,
                245u8,
                5u8,
                178u8,
                243u8,
                113u8,
                174u8,
                33u8,
                117u8,
                238u8,
                73u8,
                19u8,
                244u8,
                73u8,
                158u8,
                31u8,
                38u8,
                51u8,
                167u8,
                181u8,
                147u8,
                99u8,
                33u8,
                238u8,
                209u8,
                205u8,
                174u8,
                182u8,
                17u8,
                81u8,
                129u8,
                210u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for ChainConfigEvents {
        const NAME: &'static str = "ChainConfigEvents";
        const COUNT: usize = 4usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <DefaultSequencingChainRpcUrlUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <DefaultSequencingChainRpcUrlUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::DefaultSequencingChainRpcUrlUpdated)
                }
                Some(<Initialized as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Initialized as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::Initialized)
                }
                Some(
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::OwnershipTransferred)
                }
                Some(
                    <RollupOwnerUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <RollupOwnerUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RollupOwnerUpdated)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for ChainConfigEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::DefaultSequencingChainRpcUrlUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Initialized(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RollupOwnerUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::DefaultSequencingChainRpcUrlUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Initialized(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RollupOwnerUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`ChainConfig`](self) contract instance.

See the [wrapper's documentation](`ChainConfigInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> ChainConfigInstance<T, P, N> {
        ChainConfigInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<ChainConfigInstance<T, P, N>>,
    > {
        ChainConfigInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        ChainConfigInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`ChainConfig`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`ChainConfig`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct ChainConfigInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for ChainConfigInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("ChainConfigInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ChainConfigInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`ChainConfig`](self) contract instance.

See the [wrapper's documentation](`ChainConfigInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<ChainConfigInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> ChainConfigInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> ChainConfigInstance<T, P, N> {
            ChainConfigInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ChainConfigInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`ARBITRUM_BRIDGE_ADDRESS`] function.
        pub fn ARBITRUM_BRIDGE_ADDRESS(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, ARBITRUM_BRIDGE_ADDRESSCall, N> {
            self.call_builder(&ARBITRUM_BRIDGE_ADDRESSCall {})
        }
        ///Creates a new call builder for the [`ARBITRUM_IGNORE_DELAYED_MESSAGES`] function.
        pub fn ARBITRUM_IGNORE_DELAYED_MESSAGES(
            &self,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            ARBITRUM_IGNORE_DELAYED_MESSAGESCall,
            N,
        > {
            self.call_builder(
                &ARBITRUM_IGNORE_DELAYED_MESSAGESCall {
                },
            )
        }
        ///Creates a new call builder for the [`ARBITRUM_INBOX_ADDRESS`] function.
        pub fn ARBITRUM_INBOX_ADDRESS(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, ARBITRUM_INBOX_ADDRESSCall, N> {
            self.call_builder(&ARBITRUM_INBOX_ADDRESSCall {})
        }
        ///Creates a new call builder for the [`CHAIN_ID`] function.
        pub fn CHAIN_ID(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, CHAIN_IDCall, N> {
            self.call_builder(&CHAIN_IDCall {})
        }
        ///Creates a new call builder for the [`DEFAULT_SEQUENCING_CHAIN_RPC_URL`] function.
        pub fn DEFAULT_SEQUENCING_CHAIN_RPC_URL(
            &self,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            DEFAULT_SEQUENCING_CHAIN_RPC_URLCall,
            N,
        > {
            self.call_builder(
                &DEFAULT_SEQUENCING_CHAIN_RPC_URLCall {
                },
            )
        }
        ///Creates a new call builder for the [`MINE_EMPTY_BLOCKS`] function.
        pub fn MINE_EMPTY_BLOCKS(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, MINE_EMPTY_BLOCKSCall, N> {
            self.call_builder(&MINE_EMPTY_BLOCKSCall {})
        }
        ///Creates a new call builder for the [`ROLLUP_OWNER`] function.
        pub fn ROLLUP_OWNER(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, ROLLUP_OWNERCall, N> {
            self.call_builder(&ROLLUP_OWNERCall {})
        }
        ///Creates a new call builder for the [`SEQUENCING_CONTRACT_ADDRESS`] function.
        pub fn SEQUENCING_CONTRACT_ADDRESS(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, SEQUENCING_CONTRACT_ADDRESSCall, N> {
            self.call_builder(&SEQUENCING_CONTRACT_ADDRESSCall {})
        }
        ///Creates a new call builder for the [`SEQUENCING_START_BLOCK`] function.
        pub fn SEQUENCING_START_BLOCK(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, SEQUENCING_START_BLOCKCall, N> {
            self.call_builder(&SEQUENCING_START_BLOCKCall {})
        }
        ///Creates a new call builder for the [`SETTLEMENT_DELAY`] function.
        pub fn SETTLEMENT_DELAY(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, SETTLEMENT_DELAYCall, N> {
            self.call_builder(&SETTLEMENT_DELAYCall {})
        }
        ///Creates a new call builder for the [`SETTLEMENT_START_BLOCK`] function.
        pub fn SETTLEMENT_START_BLOCK(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, SETTLEMENT_START_BLOCKCall, N> {
            self.call_builder(&SETTLEMENT_START_BLOCKCall {})
        }
        ///Creates a new call builder for the [`TARGET_ROLLUP_TYPE`] function.
        pub fn TARGET_ROLLUP_TYPE(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, TARGET_ROLLUP_TYPECall, N> {
            self.call_builder(&TARGET_ROLLUP_TYPECall {})
        }
        ///Creates a new call builder for the [`initialize`] function.
        pub fn initialize(
            &self,
            chainId: alloy::sol_types::private::primitives::aliases::U256,
            targetRollupType: alloy::sol_types::private::FixedBytes<32>,
            mineEmptyBlocks: bool,
            arbitrumBridgeAddress: alloy::sol_types::private::Address,
            arbitrumInboxAddress: alloy::sol_types::private::Address,
            arbitrumIgnoreDelayedMessages: bool,
            settlementDelay: alloy::sol_types::private::primitives::aliases::U256,
            settlementStartBlock: alloy::sol_types::private::primitives::aliases::U256,
            sequencingContractAddress: alloy::sol_types::private::Address,
            sequencingStartBlock: alloy::sol_types::private::primitives::aliases::U256,
            rollupOwner: alloy::sol_types::private::Address,
            sequencingChainRpcUrl: alloy::sol_types::private::String,
        ) -> alloy_contract::SolCallBuilder<T, &P, initializeCall, N> {
            self.call_builder(
                &initializeCall {
                    chainId,
                    targetRollupType,
                    mineEmptyBlocks,
                    arbitrumBridgeAddress,
                    arbitrumInboxAddress,
                    arbitrumIgnoreDelayedMessages,
                    settlementDelay,
                    settlementStartBlock,
                    sequencingContractAddress,
                    sequencingStartBlock,
                    rollupOwner,
                    sequencingChainRpcUrl,
                },
            )
        }
        ///Creates a new call builder for the [`owner`] function.
        pub fn owner(&self) -> alloy_contract::SolCallBuilder<T, &P, ownerCall, N> {
            self.call_builder(&ownerCall {})
        }
        ///Creates a new call builder for the [`renounceOwnership`] function.
        pub fn renounceOwnership(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, renounceOwnershipCall, N> {
            self.call_builder(&renounceOwnershipCall {})
        }
        ///Creates a new call builder for the [`transferOwnership`] function.
        pub fn transferOwnership(
            &self,
            newOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferOwnershipCall, N> {
            self.call_builder(&transferOwnershipCall { newOwner })
        }
        ///Creates a new call builder for the [`updateDefaultSequencingChainRpcUrl`] function.
        pub fn updateDefaultSequencingChainRpcUrl(
            &self,
            newRpcUrl: alloy::sol_types::private::String,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            updateDefaultSequencingChainRpcUrlCall,
            N,
        > {
            self.call_builder(
                &updateDefaultSequencingChainRpcUrlCall {
                    newRpcUrl,
                },
            )
        }
        ///Creates a new call builder for the [`updateRollupOwner`] function.
        pub fn updateRollupOwner(
            &self,
            newRollupOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, updateRollupOwnerCall, N> {
            self.call_builder(
                &updateRollupOwnerCall {
                    newRollupOwner,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ChainConfigInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`DefaultSequencingChainRpcUrlUpdated`] event.
        pub fn DefaultSequencingChainRpcUrlUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, DefaultSequencingChainRpcUrlUpdated, N> {
            self.event_filter::<DefaultSequencingChainRpcUrlUpdated>()
        }
        ///Creates a new event filter for the [`Initialized`] event.
        pub fn Initialized_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, Initialized, N> {
            self.event_filter::<Initialized>()
        }
        ///Creates a new event filter for the [`OwnershipTransferred`] event.
        pub fn OwnershipTransferred_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, OwnershipTransferred, N> {
            self.event_filter::<OwnershipTransferred>()
        }
        ///Creates a new event filter for the [`RollupOwnerUpdated`] event.
        pub fn RollupOwnerUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RollupOwnerUpdated, N> {
            self.event_filter::<RollupOwnerUpdated>()
        }
    }
}
