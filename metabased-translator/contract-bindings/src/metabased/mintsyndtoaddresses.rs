/**

Generated by the following Solidity interface...
```solidity
interface MintSYNDToAddresses {
    function IS_SCRIPT() external view returns (bool);
    function run() external;
    function synd() external view returns (address);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "IS_SCRIPT",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "run",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "synd",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract SyndicateToken"
      }
    ],
    "stateMutability": "view"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod MintSYNDToAddresses {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60806040526001600c5f6101000a81548160ff0219169083151502179055506001600c60026101000a81548160ff0219169083151502179055503480156043575f80fd5b50610ae9806100515f395ff3fe608060405234801561000f575f80fd5b506004361061003f575f3560e01c8063a5220ded14610043578063c040622614610061578063f8ccbf471461006b575b5f80fd5b61004b610089565b6040516100589190610858565b60405180910390f35b6100696100af565b005b6100736106db565b604051610080919061088b565b60405180910390f35b600c60039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c73ffffffffffffffffffffffffffffffffffffffff16637fb5297f6040518163ffffffff1660e01b81526004015f604051808303815f87803b158015610116575f80fd5b505af1158015610128573d5f803e3d5ffd5b505050505f600467ffffffffffffffff811115610148576101476108a4565b5b6040519080825280602002602001820160405280156101765781602001602082028036833780820191505090505b5090507319aaf160da8985c54bb97adaf9304b5ac7890421815f815181106101a1576101a06108d1565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250507337d911cbd7bb03521a975ec2de03ce1dd015688381600181518110610204576102036108d1565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050739a0ef1333681b357047282144dc06d7daa1f76ba81600281518110610267576102666108d1565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250507328fab3a5b69711cc64b09240d2694d9f0f07ebf6816003815181106102ca576102c96108d1565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250505f600467ffffffffffffffff8111156103205761031f6108a4565b5b60405190808252806020026020018201604052801561034e5781602001602082028036833780820191505090505b50905069021e19e0c9bab2400000815f8151811061036f5761036e6108d1565b5b60200260200101818152505069021e19e0c9bab24000008160018151811061039a576103996108d1565b5b60200260200101818152505069021e19e0c9bab2400000816002815181106103c5576103c46108d1565b5b60200260200101818152505069021e19e0c9bab2400000816003815181106103f0576103ef6108d1565b5b602002602001018181525050739a0ef1333681b357047282144dc06d7daa1f76ba600c60036101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505f5b8251811015610659575f73ffffffffffffffffffffffffffffffffffffffff16838281518110610486576104856108d1565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16036104e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104db90610958565b60405180910390fd5b600c60039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f19848381518110610535576105346108d1565b5b60200260200101518484815181106105505761054f6108d1565b5b60200260200101516040518363ffffffff1660e01b81526004016105759291906109ae565b5f604051808303815f87803b15801561058c575f80fd5b505af115801561059e573d5f803e3d5ffd5b5050505061064c6040518060400160405280600681526020017f4d696e74656400000000000000000000000000000000000000000000000000008152508383815181106105ee576105ed6108d1565b5b60200260200101516040518060400160405280600781526020017f53594e4420746f0000000000000000000000000000000000000000000000000081525086858151811061063f5761063e6108d1565b5b60200260200101516106ee565b8080600101915050610453565b507f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c73ffffffffffffffffffffffffffffffffffffffff166376eadd366040518163ffffffff1660e01b81526004015f604051808303815f87803b1580156106c1575f80fd5b505af11580156106d3573d5f803e3d5ffd5b505050505050565b600c60029054906101000a900460ff1681565b61078a848484846040516024016107089493929190610a35565b6040516020818303038152906040527f7c4632a4000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610790565b50505050565b6107a78161079f6107aa6107c9565b63ffffffff16565b50565b5f6a636f6e736f6c652e6c6f6790505f80835160208501845afa505050565b6107d4819050919050565b6107dc610a86565b565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f819050919050565b5f61082061081b610816846107de565b6107fd565b6107de565b9050919050565b5f61083182610806565b9050919050565b5f61084282610827565b9050919050565b61085281610838565b82525050565b5f60208201905061086b5f830184610849565b92915050565b5f8115159050919050565b61088581610871565b82525050565b5f60208201905061089e5f83018461087c565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f82825260208201905092915050565b7f496e76616c6964206164647265737300000000000000000000000000000000005f82015250565b5f610942600f836108fe565b915061094d8261090e565b602082019050919050565b5f6020820190508181035f83015261096f81610936565b9050919050565b5f610980826107de565b9050919050565b61099081610976565b82525050565b5f819050919050565b6109a881610996565b82525050565b5f6040820190506109c15f830185610987565b6109ce602083018461099f565b9392505050565b5f81519050919050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f610a07826109d5565b610a1181856108fe565b9350610a218185602086016109df565b610a2a816109ed565b840191505092915050565b5f6080820190508181035f830152610a4d81876109fd565b9050610a5c602083018661099f565b8181036040830152610a6e81856109fd565b9050610a7d6060830184610987565b95945050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52605160045260245ffdfea2646970667358221220b9ecf15e10ab197eccbd053ea6fd0f594bdf2e5e1824861bc17a01516eed594264736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x01`\x0C_a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP`\x01`\x0C`\x02a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP4\x80\x15`CW_\x80\xFD[Pa\n\xE9\x80a\0Q_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\0?W_5`\xE0\x1C\x80c\xA5\"\r\xED\x14a\0CW\x80c\xC0@b&\x14a\0aW\x80c\xF8\xCC\xBFG\x14a\0kW[_\x80\xFD[a\0Ka\0\x89V[`@Qa\0X\x91\x90a\x08XV[`@Q\x80\x91\x03\x90\xF3[a\0ia\0\xAFV[\0[a\0sa\x06\xDBV[`@Qa\0\x80\x91\x90a\x08\x8BV[`@Q\x80\x91\x03\x90\xF3[`\x0C`\x03\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81V[\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-_\x1Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x7F\xB5)\x7F`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x01\x16W_\x80\xFD[PZ\xF1\x15\x80\x15a\x01(W=_\x80>=_\xFD[PPPP_`\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x01HWa\x01Ga\x08\xA4V[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x01vW\x81` \x01` \x82\x02\x806\x837\x80\x82\x01\x91PP\x90P[P\x90Ps\x19\xAA\xF1`\xDA\x89\x85\xC5K\xB9z\xDA\xF90KZ\xC7\x89\x04!\x81_\x81Q\x81\x10a\x01\xA1Wa\x01\xA0a\x08\xD1V[[` \x02` \x01\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPPs7\xD9\x11\xCB\xD7\xBB\x03R\x1A\x97^\xC2\xDE\x03\xCE\x1D\xD0\x15h\x83\x81`\x01\x81Q\x81\x10a\x02\x04Wa\x02\x03a\x08\xD1V[[` \x02` \x01\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPPs\x9A\x0E\xF136\x81\xB3W\x04r\x82\x14M\xC0m}\xAA\x1Fv\xBA\x81`\x02\x81Q\x81\x10a\x02gWa\x02fa\x08\xD1V[[` \x02` \x01\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPPs(\xFA\xB3\xA5\xB6\x97\x11\xCCd\xB0\x92@\xD2iM\x9F\x0F\x07\xEB\xF6\x81`\x03\x81Q\x81\x10a\x02\xCAWa\x02\xC9a\x08\xD1V[[` \x02` \x01\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP_`\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x03 Wa\x03\x1Fa\x08\xA4V[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x03NW\x81` \x01` \x82\x02\x806\x837\x80\x82\x01\x91PP\x90P[P\x90Pi\x02\x1E\x19\xE0\xC9\xBA\xB2@\0\0\x81_\x81Q\x81\x10a\x03oWa\x03na\x08\xD1V[[` \x02` \x01\x01\x81\x81RPPi\x02\x1E\x19\xE0\xC9\xBA\xB2@\0\0\x81`\x01\x81Q\x81\x10a\x03\x9AWa\x03\x99a\x08\xD1V[[` \x02` \x01\x01\x81\x81RPPi\x02\x1E\x19\xE0\xC9\xBA\xB2@\0\0\x81`\x02\x81Q\x81\x10a\x03\xC5Wa\x03\xC4a\x08\xD1V[[` \x02` \x01\x01\x81\x81RPPi\x02\x1E\x19\xE0\xC9\xBA\xB2@\0\0\x81`\x03\x81Q\x81\x10a\x03\xF0Wa\x03\xEFa\x08\xD1V[[` \x02` \x01\x01\x81\x81RPPs\x9A\x0E\xF136\x81\xB3W\x04r\x82\x14M\xC0m}\xAA\x1Fv\xBA`\x0C`\x03a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP_[\x82Q\x81\x10\x15a\x06YW_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x83\x82\x81Q\x81\x10a\x04\x86Wa\x04\x85a\x08\xD1V[[` \x02` \x01\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a\x04\xE4W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x04\xDB\x90a\tXV[`@Q\x80\x91\x03\x90\xFD[`\x0C`\x03\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c@\xC1\x0F\x19\x84\x83\x81Q\x81\x10a\x055Wa\x054a\x08\xD1V[[` \x02` \x01\x01Q\x84\x84\x81Q\x81\x10a\x05PWa\x05Oa\x08\xD1V[[` \x02` \x01\x01Q`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x05u\x92\x91\x90a\t\xAEV[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x05\x8CW_\x80\xFD[PZ\xF1\x15\x80\x15a\x05\x9EW=_\x80>=_\xFD[PPPPa\x06L`@Q\x80`@\x01`@R\x80`\x06\x81R` \x01\x7FMinted\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x83\x83\x81Q\x81\x10a\x05\xEEWa\x05\xEDa\x08\xD1V[[` \x02` \x01\x01Q`@Q\x80`@\x01`@R\x80`\x07\x81R` \x01\x7FSYND to\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x86\x85\x81Q\x81\x10a\x06?Wa\x06>a\x08\xD1V[[` \x02` \x01\x01Qa\x06\xEEV[\x80\x80`\x01\x01\x91PPa\x04SV[P\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-_\x1Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16cv\xEA\xDD6`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x06\xC1W_\x80\xFD[PZ\xF1\x15\x80\x15a\x06\xD3W=_\x80>=_\xFD[PPPPPPV[`\x0C`\x02\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x81V[a\x07\x8A\x84\x84\x84\x84`@Q`$\x01a\x07\x08\x94\x93\x92\x91\x90a\n5V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x7F|F2\xA4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16` \x82\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x81\x83\x16\x17\x83RPPPPa\x07\x90V[PPPPV[a\x07\xA7\x81a\x07\x9Fa\x07\xAAa\x07\xC9V[c\xFF\xFF\xFF\xFF\x16V[PV[_jconsole.log\x90P_\x80\x83Q` \x85\x01\x84Z\xFAPPPV[a\x07\xD4\x81\x90P\x91\x90PV[a\x07\xDCa\n\x86V[V[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_\x81\x90P\x91\x90PV[_a\x08 a\x08\x1Ba\x08\x16\x84a\x07\xDEV[a\x07\xFDV[a\x07\xDEV[\x90P\x91\x90PV[_a\x081\x82a\x08\x06V[\x90P\x91\x90PV[_a\x08B\x82a\x08'V[\x90P\x91\x90PV[a\x08R\x81a\x088V[\x82RPPV[_` \x82\x01\x90Pa\x08k_\x83\x01\x84a\x08IV[\x92\x91PPV[_\x81\x15\x15\x90P\x91\x90PV[a\x08\x85\x81a\x08qV[\x82RPPV[_` \x82\x01\x90Pa\x08\x9E_\x83\x01\x84a\x08|V[\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[\x7FInvalid address\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_\x82\x01RPV[_a\tB`\x0F\x83a\x08\xFEV[\x91Pa\tM\x82a\t\x0EV[` \x82\x01\x90P\x91\x90PV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\to\x81a\t6V[\x90P\x91\x90PV[_a\t\x80\x82a\x07\xDEV[\x90P\x91\x90PV[a\t\x90\x81a\tvV[\x82RPPV[_\x81\x90P\x91\x90PV[a\t\xA8\x81a\t\x96V[\x82RPPV[_`@\x82\x01\x90Pa\t\xC1_\x83\x01\x85a\t\x87V[a\t\xCE` \x83\x01\x84a\t\x9FV[\x93\x92PPPV[_\x81Q\x90P\x91\x90PV[\x82\x81\x83^_\x83\x83\x01RPPPV[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[_a\n\x07\x82a\t\xD5V[a\n\x11\x81\x85a\x08\xFEV[\x93Pa\n!\x81\x85` \x86\x01a\t\xDFV[a\n*\x81a\t\xEDV[\x84\x01\x91PP\x92\x91PPV[_`\x80\x82\x01\x90P\x81\x81\x03_\x83\x01Ra\nM\x81\x87a\t\xFDV[\x90Pa\n\\` \x83\x01\x86a\t\x9FV[\x81\x81\x03`@\x83\x01Ra\nn\x81\x85a\t\xFDV[\x90Pa\n}``\x83\x01\x84a\t\x87V[\x95\x94PPPPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`Q`\x04R`$_\xFD\xFE\xA2dipfsX\"\x12 \xB9\xEC\xF1^\x10\xAB\x19~\xCC\xBD\x05>\xA6\xFD\x0FYK\xDF.^\x18$\x86\x1B\xC1z\x01Qn\xEDYBdsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f80fd5b506004361061003f575f3560e01c8063a5220ded14610043578063c040622614610061578063f8ccbf471461006b575b5f80fd5b61004b610089565b6040516100589190610858565b60405180910390f35b6100696100af565b005b6100736106db565b604051610080919061088b565b60405180910390f35b600c60039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c73ffffffffffffffffffffffffffffffffffffffff16637fb5297f6040518163ffffffff1660e01b81526004015f604051808303815f87803b158015610116575f80fd5b505af1158015610128573d5f803e3d5ffd5b505050505f600467ffffffffffffffff811115610148576101476108a4565b5b6040519080825280602002602001820160405280156101765781602001602082028036833780820191505090505b5090507319aaf160da8985c54bb97adaf9304b5ac7890421815f815181106101a1576101a06108d1565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250507337d911cbd7bb03521a975ec2de03ce1dd015688381600181518110610204576102036108d1565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050739a0ef1333681b357047282144dc06d7daa1f76ba81600281518110610267576102666108d1565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250507328fab3a5b69711cc64b09240d2694d9f0f07ebf6816003815181106102ca576102c96108d1565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250505f600467ffffffffffffffff8111156103205761031f6108a4565b5b60405190808252806020026020018201604052801561034e5781602001602082028036833780820191505090505b50905069021e19e0c9bab2400000815f8151811061036f5761036e6108d1565b5b60200260200101818152505069021e19e0c9bab24000008160018151811061039a576103996108d1565b5b60200260200101818152505069021e19e0c9bab2400000816002815181106103c5576103c46108d1565b5b60200260200101818152505069021e19e0c9bab2400000816003815181106103f0576103ef6108d1565b5b602002602001018181525050739a0ef1333681b357047282144dc06d7daa1f76ba600c60036101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505f5b8251811015610659575f73ffffffffffffffffffffffffffffffffffffffff16838281518110610486576104856108d1565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16036104e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104db90610958565b60405180910390fd5b600c60039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f19848381518110610535576105346108d1565b5b60200260200101518484815181106105505761054f6108d1565b5b60200260200101516040518363ffffffff1660e01b81526004016105759291906109ae565b5f604051808303815f87803b15801561058c575f80fd5b505af115801561059e573d5f803e3d5ffd5b5050505061064c6040518060400160405280600681526020017f4d696e74656400000000000000000000000000000000000000000000000000008152508383815181106105ee576105ed6108d1565b5b60200260200101516040518060400160405280600781526020017f53594e4420746f0000000000000000000000000000000000000000000000000081525086858151811061063f5761063e6108d1565b5b60200260200101516106ee565b8080600101915050610453565b507f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c73ffffffffffffffffffffffffffffffffffffffff166376eadd366040518163ffffffff1660e01b81526004015f604051808303815f87803b1580156106c1575f80fd5b505af11580156106d3573d5f803e3d5ffd5b505050505050565b600c60029054906101000a900460ff1681565b61078a848484846040516024016107089493929190610a35565b6040516020818303038152906040527f7c4632a4000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610790565b50505050565b6107a78161079f6107aa6107c9565b63ffffffff16565b50565b5f6a636f6e736f6c652e6c6f6790505f80835160208501845afa505050565b6107d4819050919050565b6107dc610a86565b565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f819050919050565b5f61082061081b610816846107de565b6107fd565b6107de565b9050919050565b5f61083182610806565b9050919050565b5f61084282610827565b9050919050565b61085281610838565b82525050565b5f60208201905061086b5f830184610849565b92915050565b5f8115159050919050565b61088581610871565b82525050565b5f60208201905061089e5f83018461087c565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f82825260208201905092915050565b7f496e76616c6964206164647265737300000000000000000000000000000000005f82015250565b5f610942600f836108fe565b915061094d8261090e565b602082019050919050565b5f6020820190508181035f83015261096f81610936565b9050919050565b5f610980826107de565b9050919050565b61099081610976565b82525050565b5f819050919050565b6109a881610996565b82525050565b5f6040820190506109c15f830185610987565b6109ce602083018461099f565b9392505050565b5f81519050919050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f610a07826109d5565b610a1181856108fe565b9350610a218185602086016109df565b610a2a816109ed565b840191505092915050565b5f6080820190508181035f830152610a4d81876109fd565b9050610a5c602083018661099f565b8181036040830152610a6e81856109fd565b9050610a7d6060830184610987565b95945050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52605160045260245ffdfea2646970667358221220b9ecf15e10ab197eccbd053ea6fd0f594bdf2e5e1824861bc17a01516eed594264736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\0?W_5`\xE0\x1C\x80c\xA5\"\r\xED\x14a\0CW\x80c\xC0@b&\x14a\0aW\x80c\xF8\xCC\xBFG\x14a\0kW[_\x80\xFD[a\0Ka\0\x89V[`@Qa\0X\x91\x90a\x08XV[`@Q\x80\x91\x03\x90\xF3[a\0ia\0\xAFV[\0[a\0sa\x06\xDBV[`@Qa\0\x80\x91\x90a\x08\x8BV[`@Q\x80\x91\x03\x90\xF3[`\x0C`\x03\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81V[\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-_\x1Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x7F\xB5)\x7F`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x01\x16W_\x80\xFD[PZ\xF1\x15\x80\x15a\x01(W=_\x80>=_\xFD[PPPP_`\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x01HWa\x01Ga\x08\xA4V[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x01vW\x81` \x01` \x82\x02\x806\x837\x80\x82\x01\x91PP\x90P[P\x90Ps\x19\xAA\xF1`\xDA\x89\x85\xC5K\xB9z\xDA\xF90KZ\xC7\x89\x04!\x81_\x81Q\x81\x10a\x01\xA1Wa\x01\xA0a\x08\xD1V[[` \x02` \x01\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPPs7\xD9\x11\xCB\xD7\xBB\x03R\x1A\x97^\xC2\xDE\x03\xCE\x1D\xD0\x15h\x83\x81`\x01\x81Q\x81\x10a\x02\x04Wa\x02\x03a\x08\xD1V[[` \x02` \x01\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPPs\x9A\x0E\xF136\x81\xB3W\x04r\x82\x14M\xC0m}\xAA\x1Fv\xBA\x81`\x02\x81Q\x81\x10a\x02gWa\x02fa\x08\xD1V[[` \x02` \x01\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPPs(\xFA\xB3\xA5\xB6\x97\x11\xCCd\xB0\x92@\xD2iM\x9F\x0F\x07\xEB\xF6\x81`\x03\x81Q\x81\x10a\x02\xCAWa\x02\xC9a\x08\xD1V[[` \x02` \x01\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP_`\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x03 Wa\x03\x1Fa\x08\xA4V[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x03NW\x81` \x01` \x82\x02\x806\x837\x80\x82\x01\x91PP\x90P[P\x90Pi\x02\x1E\x19\xE0\xC9\xBA\xB2@\0\0\x81_\x81Q\x81\x10a\x03oWa\x03na\x08\xD1V[[` \x02` \x01\x01\x81\x81RPPi\x02\x1E\x19\xE0\xC9\xBA\xB2@\0\0\x81`\x01\x81Q\x81\x10a\x03\x9AWa\x03\x99a\x08\xD1V[[` \x02` \x01\x01\x81\x81RPPi\x02\x1E\x19\xE0\xC9\xBA\xB2@\0\0\x81`\x02\x81Q\x81\x10a\x03\xC5Wa\x03\xC4a\x08\xD1V[[` \x02` \x01\x01\x81\x81RPPi\x02\x1E\x19\xE0\xC9\xBA\xB2@\0\0\x81`\x03\x81Q\x81\x10a\x03\xF0Wa\x03\xEFa\x08\xD1V[[` \x02` \x01\x01\x81\x81RPPs\x9A\x0E\xF136\x81\xB3W\x04r\x82\x14M\xC0m}\xAA\x1Fv\xBA`\x0C`\x03a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP_[\x82Q\x81\x10\x15a\x06YW_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x83\x82\x81Q\x81\x10a\x04\x86Wa\x04\x85a\x08\xD1V[[` \x02` \x01\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a\x04\xE4W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x04\xDB\x90a\tXV[`@Q\x80\x91\x03\x90\xFD[`\x0C`\x03\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c@\xC1\x0F\x19\x84\x83\x81Q\x81\x10a\x055Wa\x054a\x08\xD1V[[` \x02` \x01\x01Q\x84\x84\x81Q\x81\x10a\x05PWa\x05Oa\x08\xD1V[[` \x02` \x01\x01Q`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x05u\x92\x91\x90a\t\xAEV[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x05\x8CW_\x80\xFD[PZ\xF1\x15\x80\x15a\x05\x9EW=_\x80>=_\xFD[PPPPa\x06L`@Q\x80`@\x01`@R\x80`\x06\x81R` \x01\x7FMinted\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x83\x83\x81Q\x81\x10a\x05\xEEWa\x05\xEDa\x08\xD1V[[` \x02` \x01\x01Q`@Q\x80`@\x01`@R\x80`\x07\x81R` \x01\x7FSYND to\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x86\x85\x81Q\x81\x10a\x06?Wa\x06>a\x08\xD1V[[` \x02` \x01\x01Qa\x06\xEEV[\x80\x80`\x01\x01\x91PPa\x04SV[P\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-_\x1Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16cv\xEA\xDD6`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x06\xC1W_\x80\xFD[PZ\xF1\x15\x80\x15a\x06\xD3W=_\x80>=_\xFD[PPPPPPV[`\x0C`\x02\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x81V[a\x07\x8A\x84\x84\x84\x84`@Q`$\x01a\x07\x08\x94\x93\x92\x91\x90a\n5V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x7F|F2\xA4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16` \x82\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x81\x83\x16\x17\x83RPPPPa\x07\x90V[PPPPV[a\x07\xA7\x81a\x07\x9Fa\x07\xAAa\x07\xC9V[c\xFF\xFF\xFF\xFF\x16V[PV[_jconsole.log\x90P_\x80\x83Q` \x85\x01\x84Z\xFAPPPV[a\x07\xD4\x81\x90P\x91\x90PV[a\x07\xDCa\n\x86V[V[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_\x81\x90P\x91\x90PV[_a\x08 a\x08\x1Ba\x08\x16\x84a\x07\xDEV[a\x07\xFDV[a\x07\xDEV[\x90P\x91\x90PV[_a\x081\x82a\x08\x06V[\x90P\x91\x90PV[_a\x08B\x82a\x08'V[\x90P\x91\x90PV[a\x08R\x81a\x088V[\x82RPPV[_` \x82\x01\x90Pa\x08k_\x83\x01\x84a\x08IV[\x92\x91PPV[_\x81\x15\x15\x90P\x91\x90PV[a\x08\x85\x81a\x08qV[\x82RPPV[_` \x82\x01\x90Pa\x08\x9E_\x83\x01\x84a\x08|V[\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[\x7FInvalid address\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_\x82\x01RPV[_a\tB`\x0F\x83a\x08\xFEV[\x91Pa\tM\x82a\t\x0EV[` \x82\x01\x90P\x91\x90PV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\to\x81a\t6V[\x90P\x91\x90PV[_a\t\x80\x82a\x07\xDEV[\x90P\x91\x90PV[a\t\x90\x81a\tvV[\x82RPPV[_\x81\x90P\x91\x90PV[a\t\xA8\x81a\t\x96V[\x82RPPV[_`@\x82\x01\x90Pa\t\xC1_\x83\x01\x85a\t\x87V[a\t\xCE` \x83\x01\x84a\t\x9FV[\x93\x92PPPV[_\x81Q\x90P\x91\x90PV[\x82\x81\x83^_\x83\x83\x01RPPPV[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[_a\n\x07\x82a\t\xD5V[a\n\x11\x81\x85a\x08\xFEV[\x93Pa\n!\x81\x85` \x86\x01a\t\xDFV[a\n*\x81a\t\xEDV[\x84\x01\x91PP\x92\x91PPV[_`\x80\x82\x01\x90P\x81\x81\x03_\x83\x01Ra\nM\x81\x87a\t\xFDV[\x90Pa\n\\` \x83\x01\x86a\t\x9FV[\x81\x81\x03`@\x83\x01Ra\nn\x81\x85a\t\xFDV[\x90Pa\n}``\x83\x01\x84a\t\x87V[\x95\x94PPPPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`Q`\x04R`$_\xFD\xFE\xA2dipfsX\"\x12 \xB9\xEC\xF1^\x10\xAB\x19~\xCC\xBD\x05>\xA6\xFD\x0FYK\xDF.^\x18$\x86\x1B\xC1z\x01Qn\xEDYBdsolcC\0\x08\x19\x003",
    );
    /**Function with signature `IS_SCRIPT()` and selector `0xf8ccbf47`.
```solidity
function IS_SCRIPT() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTCall {}
    ///Container type for the return parameters of the [`IS_SCRIPT()`](IS_SCRIPTCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTCall> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTReturn> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for IS_SCRIPTCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = IS_SCRIPTReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "IS_SCRIPT()";
            const SELECTOR: [u8; 4] = [248u8, 204u8, 191u8, 71u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `run()` and selector `0xc0406226`.
```solidity
function run() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runCall {}
    ///Container type for the return parameters of the [`run()`](runCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runCall> for UnderlyingRustTuple<'_> {
                fn from(value: runCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runReturn> for UnderlyingRustTuple<'_> {
                fn from(value: runReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for runCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = runReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "run()";
            const SELECTOR: [u8; 4] = [192u8, 64u8, 98u8, 38u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `synd()` and selector `0xa5220ded`.
```solidity
function synd() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct syndCall {}
    ///Container type for the return parameters of the [`synd()`](syndCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct syndReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<syndCall> for UnderlyingRustTuple<'_> {
                fn from(value: syndCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for syndCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<syndReturn> for UnderlyingRustTuple<'_> {
                fn from(value: syndReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for syndReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for syndCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = syndReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "synd()";
            const SELECTOR: [u8; 4] = [165u8, 34u8, 13u8, 237u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`MintSYNDToAddresses`](self) function calls.
    pub enum MintSYNDToAddressesCalls {
        #[allow(missing_docs)]
        IS_SCRIPT(IS_SCRIPTCall),
        #[allow(missing_docs)]
        run(runCall),
        #[allow(missing_docs)]
        synd(syndCall),
    }
    #[automatically_derived]
    impl MintSYNDToAddressesCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [165u8, 34u8, 13u8, 237u8],
            [192u8, 64u8, 98u8, 38u8],
            [248u8, 204u8, 191u8, 71u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for MintSYNDToAddressesCalls {
        const NAME: &'static str = "MintSYNDToAddressesCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 3usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::IS_SCRIPT(_) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::run(_) => <runCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::synd(_) => <syndCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<MintSYNDToAddressesCalls>] = &[
                {
                    fn synd(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MintSYNDToAddressesCalls> {
                        <syndCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MintSYNDToAddressesCalls::synd)
                    }
                    synd
                },
                {
                    fn run(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MintSYNDToAddressesCalls> {
                        <runCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MintSYNDToAddressesCalls::run)
                    }
                    run
                },
                {
                    fn IS_SCRIPT(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MintSYNDToAddressesCalls> {
                        <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MintSYNDToAddressesCalls::IS_SCRIPT)
                    }
                    IS_SCRIPT
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::synd(inner) => {
                    <syndCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::synd(inner) => {
                    <syndCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`MintSYNDToAddresses`](self) contract instance.

See the [wrapper's documentation](`MintSYNDToAddressesInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> MintSYNDToAddressesInstance<T, P, N> {
        MintSYNDToAddressesInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<MintSYNDToAddressesInstance<T, P, N>>,
    > {
        MintSYNDToAddressesInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        MintSYNDToAddressesInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`MintSYNDToAddresses`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`MintSYNDToAddresses`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct MintSYNDToAddressesInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for MintSYNDToAddressesInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("MintSYNDToAddressesInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MintSYNDToAddressesInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`MintSYNDToAddresses`](self) contract instance.

See the [wrapper's documentation](`MintSYNDToAddressesInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<MintSYNDToAddressesInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> MintSYNDToAddressesInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> MintSYNDToAddressesInstance<T, P, N> {
            MintSYNDToAddressesInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MintSYNDToAddressesInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`IS_SCRIPT`] function.
        pub fn IS_SCRIPT(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, IS_SCRIPTCall, N> {
            self.call_builder(&IS_SCRIPTCall {})
        }
        ///Creates a new call builder for the [`run`] function.
        pub fn run(&self) -> alloy_contract::SolCallBuilder<T, &P, runCall, N> {
            self.call_builder(&runCall {})
        }
        ///Creates a new call builder for the [`synd`] function.
        pub fn synd(&self) -> alloy_contract::SolCallBuilder<T, &P, syndCall, N> {
            self.call_builder(&syndCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MintSYNDToAddressesInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
