/**

Generated by the following Solidity interface...
```solidity
interface MintSYNDToAddresses {
    function IS_SCRIPT() external view returns (bool);
    function run() external;
    function synd() external view returns (address);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "IS_SCRIPT",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "run",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "synd",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract SyndicateToken"
      }
    ],
    "stateMutability": "view"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod MintSYNDToAddresses {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608080604052346026576201000162ff00ff19600c541617600c5561056b908161002b8239f35b5f80fdfe6080604081815260049182361015610015575f80fd5b5f925f3560e01c918263a5220ded1461042657508163c04062261461006c575063f8ccbf4714610043575f80fd5b3461006857816003193601126100685760209060ff600c5460101c1690519015158152f35b5080fd5b90508234610422575f36600319011261042257737109709ecfa91a80626ff3989d68f67f5b1dd12d91823b15610422578351637fb5297f60e01b81525f81838183885af1801561041857610405575b508351906100c882610474565b8082526080946020608036828601377319aaf160da8985c54bb97adaf9304b5ac78904216100f5856104ac565b527337d911cbd7bb03521a975ec2de03ce1dd0156883610114856104cd565b52739a0ef1333681b357047282144dc06d7daa1f76ba610133856104dd565b527328fab3a5b69711cc64b09240d2694d9f0f07ebf6610152856104ed565b5281519061015f82610474565b8382526080368284013769021e19e0c9bab24000008061017e846104ac565b5280610189846104cd565b5280610194846104dd565b5261019e836104ed565b52600c80546301000000600160b81b031916769a0ef1333681b357047282144dc06d7daa1f76ba000000178155865b86518110156103b2576001600160a01b03806101e9838a6104fd565b51161561037d5780835460181c169080610203848b6104fd565b51169161021084886104fd565b5192813b1561037957908b8093928a519283916340c10f1960e01b83528d830152602496878301528160449687925af1801561036f57928594928f948e8e948c92610347575b5050906102758761026e6102d698996102eb956104fd565b51956104fd565b5116918b519361028485610490565b6006855265135a5b9d195960d21b8b8601528c51906102a282610490565b600782526653594e4420746f60c81b8c8301528d519788968d88019a631f118ca960e21b8c528989015260a4880190610511565b92860152848203602319016064860152610511565b90608483015203601f8019918281018552011682019082821067ffffffffffffffff8311176103355750875251600192918a9182916a636f6e736f6c652e6c6f675afa50016101cd565b634e487b7160e01b5f90815260418b52fd5b9295975093505061035991945061044c565b61036b5791898d928594898e5f610256565b8a80fd5b89513d8e823e3d90fd5b8b80fd5b855162461bcd60e51b8152808801859052600f60248201526e496e76616c6964206164647265737360881b6044820152606490fd5b87808a8789823b15610400578151633b756e9b60e11b81529284918491829084905af19081156103f757506103e45750f35b6103ed9061044c565b6103f45780f35b80fd5b513d84823e3d90fd5b505050fd5b61041091925061044c565b5f90846100bb565b85513d5f823e3d90fd5b5f80fd5b34610422575f36600319011261042257600c5460181c6001600160a01b03168152602090f35b67ffffffffffffffff811161046057604052565b634e487b7160e01b5f52604160045260245ffd5b60a0810190811067ffffffffffffffff82111761046057604052565b6040810190811067ffffffffffffffff82111761046057604052565b8051156104b95760200190565b634e487b7160e01b5f52603260045260245ffd5b8051600110156104b95760400190565b8051600210156104b95760600190565b8051600310156104b95760800190565b80518210156104b95760209160051b010190565b805180835260209291819084018484015e5f828201840152601f01601f191601019056fea264697066735822122014fa92c5db5b4445eafc7f1d2586d72c5fe210734c80e9b36c414b9054a3591164736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80\x80`@R4`&Wb\x01\0\x01b\xFF\0\xFF\x19`\x0CT\x16\x17`\x0CUa\x05k\x90\x81a\0+\x829\xF3[_\x80\xFD\xFE`\x80`@\x81\x81R`\x04\x91\x826\x10\x15a\0\x15W_\x80\xFD[_\x92_5`\xE0\x1C\x91\x82c\xA5\"\r\xED\x14a\x04&WP\x81c\xC0@b&\x14a\0lWPc\xF8\xCC\xBFG\x14a\0CW_\x80\xFD[4a\0hW\x81`\x03\x196\x01\x12a\0hW` \x90`\xFF`\x0CT`\x10\x1C\x16\x90Q\x90\x15\x15\x81R\xF3[P\x80\xFD[\x90P\x824a\x04\"W_6`\x03\x19\x01\x12a\x04\"Wsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x91\x82;\x15a\x04\"W\x83Qc\x7F\xB5)\x7F`\xE0\x1B\x81R_\x81\x83\x81\x83\x88Z\xF1\x80\x15a\x04\x18Wa\x04\x05W[P\x83Q\x90a\0\xC8\x82a\x04tV[\x80\x82R`\x80\x94` `\x806\x82\x86\x017s\x19\xAA\xF1`\xDA\x89\x85\xC5K\xB9z\xDA\xF90KZ\xC7\x89\x04!a\0\xF5\x85a\x04\xACV[Rs7\xD9\x11\xCB\xD7\xBB\x03R\x1A\x97^\xC2\xDE\x03\xCE\x1D\xD0\x15h\x83a\x01\x14\x85a\x04\xCDV[Rs\x9A\x0E\xF136\x81\xB3W\x04r\x82\x14M\xC0m}\xAA\x1Fv\xBAa\x013\x85a\x04\xDDV[Rs(\xFA\xB3\xA5\xB6\x97\x11\xCCd\xB0\x92@\xD2iM\x9F\x0F\x07\xEB\xF6a\x01R\x85a\x04\xEDV[R\x81Q\x90a\x01_\x82a\x04tV[\x83\x82R`\x806\x82\x84\x017i\x02\x1E\x19\xE0\xC9\xBA\xB2@\0\0\x80a\x01~\x84a\x04\xACV[R\x80a\x01\x89\x84a\x04\xCDV[R\x80a\x01\x94\x84a\x04\xDDV[Ra\x01\x9E\x83a\x04\xEDV[R`\x0C\x80Tc\x01\0\0\0`\x01`\xB8\x1B\x03\x19\x16v\x9A\x0E\xF136\x81\xB3W\x04r\x82\x14M\xC0m}\xAA\x1Fv\xBA\0\0\0\x17\x81U\x86[\x86Q\x81\x10\x15a\x03\xB2W`\x01`\x01`\xA0\x1B\x03\x80a\x01\xE9\x83\x8Aa\x04\xFDV[Q\x16\x15a\x03}W\x80\x83T`\x18\x1C\x16\x90\x80a\x02\x03\x84\x8Ba\x04\xFDV[Q\x16\x91a\x02\x10\x84\x88a\x04\xFDV[Q\x92\x81;\x15a\x03yW\x90\x8B\x80\x93\x92\x8AQ\x92\x83\x91c@\xC1\x0F\x19`\xE0\x1B\x83R\x8D\x83\x01R`$\x96\x87\x83\x01R\x81`D\x96\x87\x92Z\xF1\x80\x15a\x03oW\x92\x85\x94\x92\x8F\x94\x8E\x8E\x94\x8C\x92a\x03GW[PP\x90a\x02u\x87a\x02na\x02\xD6\x98\x99a\x02\xEB\x95a\x04\xFDV[Q\x95a\x04\xFDV[Q\x16\x91\x8BQ\x93a\x02\x84\x85a\x04\x90V[`\x06\x85Re\x13Z[\x9D\x19Y`\xD2\x1B\x8B\x86\x01R\x8CQ\x90a\x02\xA2\x82a\x04\x90V[`\x07\x82RfSYND to`\xC8\x1B\x8C\x83\x01R\x8DQ\x97\x88\x96\x8D\x88\x01\x9Ac\x1F\x11\x8C\xA9`\xE2\x1B\x8CR\x89\x89\x01R`\xA4\x88\x01\x90a\x05\x11V[\x92\x86\x01R\x84\x82\x03`#\x19\x01`d\x86\x01Ra\x05\x11V[\x90`\x84\x83\x01R\x03`\x1F\x80\x19\x91\x82\x81\x01\x85R\x01\x16\x82\x01\x90\x82\x82\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11\x17a\x035WP\x87RQ`\x01\x92\x91\x8A\x91\x82\x91jconsole.logZ\xFAP\x01a\x01\xCDV[cNH{q`\xE0\x1B_\x90\x81R`A\x8BR\xFD[\x92\x95\x97P\x93PPa\x03Y\x91\x94Pa\x04LV[a\x03kW\x91\x89\x8D\x92\x85\x94\x89\x8E_a\x02VV[\x8A\x80\xFD[\x89Q=\x8E\x82>=\x90\xFD[\x8B\x80\xFD[\x85QbF\x1B\xCD`\xE5\x1B\x81R\x80\x88\x01\x85\x90R`\x0F`$\x82\x01RnInvalid address`\x88\x1B`D\x82\x01R`d\x90\xFD[\x87\x80\x8A\x87\x89\x82;\x15a\x04\0W\x81Qc;un\x9B`\xE1\x1B\x81R\x92\x84\x91\x84\x91\x82\x90\x84\x90Z\xF1\x90\x81\x15a\x03\xF7WPa\x03\xE4WP\xF3[a\x03\xED\x90a\x04LV[a\x03\xF4W\x80\xF3[\x80\xFD[Q=\x84\x82>=\x90\xFD[PPP\xFD[a\x04\x10\x91\x92Pa\x04LV[_\x90\x84a\0\xBBV[\x85Q=_\x82>=\x90\xFD[_\x80\xFD[4a\x04\"W_6`\x03\x19\x01\x12a\x04\"W`\x0CT`\x18\x1C`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x90\xF3[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04`W`@RV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`\xA0\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x04`W`@RV[`@\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x04`W`@RV[\x80Q\x15a\x04\xB9W` \x01\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[\x80Q`\x01\x10\x15a\x04\xB9W`@\x01\x90V[\x80Q`\x02\x10\x15a\x04\xB9W``\x01\x90V[\x80Q`\x03\x10\x15a\x04\xB9W`\x80\x01\x90V[\x80Q\x82\x10\x15a\x04\xB9W` \x91`\x05\x1B\x01\x01\x90V[\x80Q\x80\x83R` \x92\x91\x81\x90\x84\x01\x84\x84\x01^_\x82\x82\x01\x84\x01R`\x1F\x01`\x1F\x19\x16\x01\x01\x90V\xFE\xA2dipfsX\"\x12 \x14\xFA\x92\xC5\xDB[DE\xEA\xFC\x7F\x1D%\x86\xD7,_\xE2\x10sL\x80\xE9\xB3lAK\x90T\xA3Y\x11dsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x6080604081815260049182361015610015575f80fd5b5f925f3560e01c918263a5220ded1461042657508163c04062261461006c575063f8ccbf4714610043575f80fd5b3461006857816003193601126100685760209060ff600c5460101c1690519015158152f35b5080fd5b90508234610422575f36600319011261042257737109709ecfa91a80626ff3989d68f67f5b1dd12d91823b15610422578351637fb5297f60e01b81525f81838183885af1801561041857610405575b508351906100c882610474565b8082526080946020608036828601377319aaf160da8985c54bb97adaf9304b5ac78904216100f5856104ac565b527337d911cbd7bb03521a975ec2de03ce1dd0156883610114856104cd565b52739a0ef1333681b357047282144dc06d7daa1f76ba610133856104dd565b527328fab3a5b69711cc64b09240d2694d9f0f07ebf6610152856104ed565b5281519061015f82610474565b8382526080368284013769021e19e0c9bab24000008061017e846104ac565b5280610189846104cd565b5280610194846104dd565b5261019e836104ed565b52600c80546301000000600160b81b031916769a0ef1333681b357047282144dc06d7daa1f76ba000000178155865b86518110156103b2576001600160a01b03806101e9838a6104fd565b51161561037d5780835460181c169080610203848b6104fd565b51169161021084886104fd565b5192813b1561037957908b8093928a519283916340c10f1960e01b83528d830152602496878301528160449687925af1801561036f57928594928f948e8e948c92610347575b5050906102758761026e6102d698996102eb956104fd565b51956104fd565b5116918b519361028485610490565b6006855265135a5b9d195960d21b8b8601528c51906102a282610490565b600782526653594e4420746f60c81b8c8301528d519788968d88019a631f118ca960e21b8c528989015260a4880190610511565b92860152848203602319016064860152610511565b90608483015203601f8019918281018552011682019082821067ffffffffffffffff8311176103355750875251600192918a9182916a636f6e736f6c652e6c6f675afa50016101cd565b634e487b7160e01b5f90815260418b52fd5b9295975093505061035991945061044c565b61036b5791898d928594898e5f610256565b8a80fd5b89513d8e823e3d90fd5b8b80fd5b855162461bcd60e51b8152808801859052600f60248201526e496e76616c6964206164647265737360881b6044820152606490fd5b87808a8789823b15610400578151633b756e9b60e11b81529284918491829084905af19081156103f757506103e45750f35b6103ed9061044c565b6103f45780f35b80fd5b513d84823e3d90fd5b505050fd5b61041091925061044c565b5f90846100bb565b85513d5f823e3d90fd5b5f80fd5b34610422575f36600319011261042257600c5460181c6001600160a01b03168152602090f35b67ffffffffffffffff811161046057604052565b634e487b7160e01b5f52604160045260245ffd5b60a0810190811067ffffffffffffffff82111761046057604052565b6040810190811067ffffffffffffffff82111761046057604052565b8051156104b95760200190565b634e487b7160e01b5f52603260045260245ffd5b8051600110156104b95760400190565b8051600210156104b95760600190565b8051600310156104b95760800190565b80518210156104b95760209160051b010190565b805180835260209291819084018484015e5f828201840152601f01601f191601019056fea264697066735822122014fa92c5db5b4445eafc7f1d2586d72c5fe210734c80e9b36c414b9054a3591164736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@\x81\x81R`\x04\x91\x826\x10\x15a\0\x15W_\x80\xFD[_\x92_5`\xE0\x1C\x91\x82c\xA5\"\r\xED\x14a\x04&WP\x81c\xC0@b&\x14a\0lWPc\xF8\xCC\xBFG\x14a\0CW_\x80\xFD[4a\0hW\x81`\x03\x196\x01\x12a\0hW` \x90`\xFF`\x0CT`\x10\x1C\x16\x90Q\x90\x15\x15\x81R\xF3[P\x80\xFD[\x90P\x824a\x04\"W_6`\x03\x19\x01\x12a\x04\"Wsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x91\x82;\x15a\x04\"W\x83Qc\x7F\xB5)\x7F`\xE0\x1B\x81R_\x81\x83\x81\x83\x88Z\xF1\x80\x15a\x04\x18Wa\x04\x05W[P\x83Q\x90a\0\xC8\x82a\x04tV[\x80\x82R`\x80\x94` `\x806\x82\x86\x017s\x19\xAA\xF1`\xDA\x89\x85\xC5K\xB9z\xDA\xF90KZ\xC7\x89\x04!a\0\xF5\x85a\x04\xACV[Rs7\xD9\x11\xCB\xD7\xBB\x03R\x1A\x97^\xC2\xDE\x03\xCE\x1D\xD0\x15h\x83a\x01\x14\x85a\x04\xCDV[Rs\x9A\x0E\xF136\x81\xB3W\x04r\x82\x14M\xC0m}\xAA\x1Fv\xBAa\x013\x85a\x04\xDDV[Rs(\xFA\xB3\xA5\xB6\x97\x11\xCCd\xB0\x92@\xD2iM\x9F\x0F\x07\xEB\xF6a\x01R\x85a\x04\xEDV[R\x81Q\x90a\x01_\x82a\x04tV[\x83\x82R`\x806\x82\x84\x017i\x02\x1E\x19\xE0\xC9\xBA\xB2@\0\0\x80a\x01~\x84a\x04\xACV[R\x80a\x01\x89\x84a\x04\xCDV[R\x80a\x01\x94\x84a\x04\xDDV[Ra\x01\x9E\x83a\x04\xEDV[R`\x0C\x80Tc\x01\0\0\0`\x01`\xB8\x1B\x03\x19\x16v\x9A\x0E\xF136\x81\xB3W\x04r\x82\x14M\xC0m}\xAA\x1Fv\xBA\0\0\0\x17\x81U\x86[\x86Q\x81\x10\x15a\x03\xB2W`\x01`\x01`\xA0\x1B\x03\x80a\x01\xE9\x83\x8Aa\x04\xFDV[Q\x16\x15a\x03}W\x80\x83T`\x18\x1C\x16\x90\x80a\x02\x03\x84\x8Ba\x04\xFDV[Q\x16\x91a\x02\x10\x84\x88a\x04\xFDV[Q\x92\x81;\x15a\x03yW\x90\x8B\x80\x93\x92\x8AQ\x92\x83\x91c@\xC1\x0F\x19`\xE0\x1B\x83R\x8D\x83\x01R`$\x96\x87\x83\x01R\x81`D\x96\x87\x92Z\xF1\x80\x15a\x03oW\x92\x85\x94\x92\x8F\x94\x8E\x8E\x94\x8C\x92a\x03GW[PP\x90a\x02u\x87a\x02na\x02\xD6\x98\x99a\x02\xEB\x95a\x04\xFDV[Q\x95a\x04\xFDV[Q\x16\x91\x8BQ\x93a\x02\x84\x85a\x04\x90V[`\x06\x85Re\x13Z[\x9D\x19Y`\xD2\x1B\x8B\x86\x01R\x8CQ\x90a\x02\xA2\x82a\x04\x90V[`\x07\x82RfSYND to`\xC8\x1B\x8C\x83\x01R\x8DQ\x97\x88\x96\x8D\x88\x01\x9Ac\x1F\x11\x8C\xA9`\xE2\x1B\x8CR\x89\x89\x01R`\xA4\x88\x01\x90a\x05\x11V[\x92\x86\x01R\x84\x82\x03`#\x19\x01`d\x86\x01Ra\x05\x11V[\x90`\x84\x83\x01R\x03`\x1F\x80\x19\x91\x82\x81\x01\x85R\x01\x16\x82\x01\x90\x82\x82\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11\x17a\x035WP\x87RQ`\x01\x92\x91\x8A\x91\x82\x91jconsole.logZ\xFAP\x01a\x01\xCDV[cNH{q`\xE0\x1B_\x90\x81R`A\x8BR\xFD[\x92\x95\x97P\x93PPa\x03Y\x91\x94Pa\x04LV[a\x03kW\x91\x89\x8D\x92\x85\x94\x89\x8E_a\x02VV[\x8A\x80\xFD[\x89Q=\x8E\x82>=\x90\xFD[\x8B\x80\xFD[\x85QbF\x1B\xCD`\xE5\x1B\x81R\x80\x88\x01\x85\x90R`\x0F`$\x82\x01RnInvalid address`\x88\x1B`D\x82\x01R`d\x90\xFD[\x87\x80\x8A\x87\x89\x82;\x15a\x04\0W\x81Qc;un\x9B`\xE1\x1B\x81R\x92\x84\x91\x84\x91\x82\x90\x84\x90Z\xF1\x90\x81\x15a\x03\xF7WPa\x03\xE4WP\xF3[a\x03\xED\x90a\x04LV[a\x03\xF4W\x80\xF3[\x80\xFD[Q=\x84\x82>=\x90\xFD[PPP\xFD[a\x04\x10\x91\x92Pa\x04LV[_\x90\x84a\0\xBBV[\x85Q=_\x82>=\x90\xFD[_\x80\xFD[4a\x04\"W_6`\x03\x19\x01\x12a\x04\"W`\x0CT`\x18\x1C`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x90\xF3[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04`W`@RV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`\xA0\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x04`W`@RV[`@\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x04`W`@RV[\x80Q\x15a\x04\xB9W` \x01\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[\x80Q`\x01\x10\x15a\x04\xB9W`@\x01\x90V[\x80Q`\x02\x10\x15a\x04\xB9W``\x01\x90V[\x80Q`\x03\x10\x15a\x04\xB9W`\x80\x01\x90V[\x80Q\x82\x10\x15a\x04\xB9W` \x91`\x05\x1B\x01\x01\x90V[\x80Q\x80\x83R` \x92\x91\x81\x90\x84\x01\x84\x84\x01^_\x82\x82\x01\x84\x01R`\x1F\x01`\x1F\x19\x16\x01\x01\x90V\xFE\xA2dipfsX\"\x12 \x14\xFA\x92\xC5\xDB[DE\xEA\xFC\x7F\x1D%\x86\xD7,_\xE2\x10sL\x80\xE9\xB3lAK\x90T\xA3Y\x11dsolcC\0\x08\x19\x003",
    );
    /**Function with signature `IS_SCRIPT()` and selector `0xf8ccbf47`.
```solidity
function IS_SCRIPT() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTCall {}
    ///Container type for the return parameters of the [`IS_SCRIPT()`](IS_SCRIPTCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTReturn {
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTCall> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTReturn> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for IS_SCRIPTCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = IS_SCRIPTReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "IS_SCRIPT()";
            const SELECTOR: [u8; 4] = [248u8, 204u8, 191u8, 71u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `run()` and selector `0xc0406226`.
```solidity
function run() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runCall {}
    ///Container type for the return parameters of the [`run()`](runCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runCall> for UnderlyingRustTuple<'_> {
                fn from(value: runCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runReturn> for UnderlyingRustTuple<'_> {
                fn from(value: runReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for runCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = runReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "run()";
            const SELECTOR: [u8; 4] = [192u8, 64u8, 98u8, 38u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `synd()` and selector `0xa5220ded`.
```solidity
function synd() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct syndCall {}
    ///Container type for the return parameters of the [`synd()`](syndCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct syndReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<syndCall> for UnderlyingRustTuple<'_> {
                fn from(value: syndCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for syndCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<syndReturn> for UnderlyingRustTuple<'_> {
                fn from(value: syndReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for syndReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for syndCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = syndReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "synd()";
            const SELECTOR: [u8; 4] = [165u8, 34u8, 13u8, 237u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`MintSYNDToAddresses`](self) function calls.
    pub enum MintSYNDToAddressesCalls {
        IS_SCRIPT(IS_SCRIPTCall),
        run(runCall),
        synd(syndCall),
    }
    #[automatically_derived]
    impl MintSYNDToAddressesCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [165u8, 34u8, 13u8, 237u8],
            [192u8, 64u8, 98u8, 38u8],
            [248u8, 204u8, 191u8, 71u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for MintSYNDToAddressesCalls {
        const NAME: &'static str = "MintSYNDToAddressesCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 3usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::IS_SCRIPT(_) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::run(_) => <runCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::synd(_) => <syndCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<MintSYNDToAddressesCalls>] = &[
                {
                    fn synd(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MintSYNDToAddressesCalls> {
                        <syndCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MintSYNDToAddressesCalls::synd)
                    }
                    synd
                },
                {
                    fn run(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MintSYNDToAddressesCalls> {
                        <runCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MintSYNDToAddressesCalls::run)
                    }
                    run
                },
                {
                    fn IS_SCRIPT(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MintSYNDToAddressesCalls> {
                        <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MintSYNDToAddressesCalls::IS_SCRIPT)
                    }
                    IS_SCRIPT
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::synd(inner) => {
                    <syndCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::synd(inner) => {
                    <syndCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`MintSYNDToAddresses`](self) contract instance.

See the [wrapper's documentation](`MintSYNDToAddressesInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> MintSYNDToAddressesInstance<T, P, N> {
        MintSYNDToAddressesInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<MintSYNDToAddressesInstance<T, P, N>>,
    > {
        MintSYNDToAddressesInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        MintSYNDToAddressesInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`MintSYNDToAddresses`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`MintSYNDToAddresses`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct MintSYNDToAddressesInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for MintSYNDToAddressesInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("MintSYNDToAddressesInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MintSYNDToAddressesInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`MintSYNDToAddresses`](self) contract instance.

See the [wrapper's documentation](`MintSYNDToAddressesInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<MintSYNDToAddressesInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> MintSYNDToAddressesInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> MintSYNDToAddressesInstance<T, P, N> {
            MintSYNDToAddressesInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MintSYNDToAddressesInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`IS_SCRIPT`] function.
        pub fn IS_SCRIPT(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, IS_SCRIPTCall, N> {
            self.call_builder(&IS_SCRIPTCall {})
        }
        ///Creates a new call builder for the [`run`] function.
        pub fn run(&self) -> alloy_contract::SolCallBuilder<T, &P, runCall, N> {
            self.call_builder(&runCall {})
        }
        ///Creates a new call builder for the [`synd`] function.
        pub fn synd(&self) -> alloy_contract::SolCallBuilder<T, &P, syndCall, N> {
            self.call_builder(&syndCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MintSYNDToAddressesInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
