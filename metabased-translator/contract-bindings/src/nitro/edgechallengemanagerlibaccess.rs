/**

Generated by the following Solidity interface...
```solidity
interface EdgeChallengeManagerLibAccess {
    type EdgeStatus is uint8;
    type MachineStatus is uint8;
    struct AssertionReferenceData {
        bytes32 assertionHash;
        bytes32 predecessorId;
        bool isPending;
        bool hasSibling;
        AssertionState startState;
        AssertionState endState;
    }
    struct AssertionState {
        GlobalState globalState;
        MachineStatus machineStatus;
        bytes32 endHistoryRoot;
    }
    struct ChallengeEdge {
        bytes32 originId;
        bytes32 startHistoryRoot;
        uint256 startHeight;
        bytes32 endHistoryRoot;
        uint256 endHeight;
        bytes32 lowerChildId;
        bytes32 upperChildId;
        bytes32 claimId;
        address staker;
        uint64 createdAtBlock;
        uint64 confirmedAtBlock;
        EdgeStatus status;
        uint8 level;
        bool refunded;
        uint64 totalTimeUnrivaledCache;
    }
    struct CreateEdgeArgs {
        uint8 level;
        bytes32 endHistoryRoot;
        uint256 endHeight;
        bytes32 claimId;
        bytes prefixProof;
        bytes proof;
    }
    struct EdgeAddedData {
        bytes32 edgeId;
        bytes32 mutualId;
        bytes32 originId;
        bytes32 claimId;
        uint256 length;
        uint8 level;
        bool hasRival;
        bool isLayerZero;
    }
    struct ExecutionContext {
        uint256 maxInboxMessagesRead;
        address bridge;
        bytes32 initialWasmModuleRoot;
    }
    struct GlobalState {
        bytes32[2] bytes32Vals;
        uint64[2] u64Vals;
    }
    struct OneStepData {
        bytes32 beforeHash;
        bytes proof;
    }

    error AccountHasMadeLayerZeroRival(address account, bytes32 mutualId);
    error AssertionHashEmpty();
    error AssertionHashMismatch(bytes32 h1, bytes32 h2);
    error AssertionNoSibling();
    error AssertionNotPending();
    error CachedTimeSufficient(uint256 actual, uint256 expected);
    error ChildrenAlreadySet(bytes32 edgeId, bytes32 lowerChildId, bytes32 upperChildId);
    error ClaimEdgeInvalidLevel(uint8 argLevel, uint8 claimLevel);
    error ClaimEdgeNotLengthOneRival(bytes32 claimId);
    error ClaimEdgeNotPending();
    error EdgeAlreadyExists(bytes32 edgeId);
    error EdgeNotExists(bytes32 edgeId);
    error EdgeNotLengthOne(uint256 length);
    error EdgeNotPending(bytes32 edgeId, EdgeStatus status);
    error EdgeTypeNotSmallStep(uint8 level);
    error EdgeUnrivaled(bytes32 edgeId);
    error EmptyClaimId();
    error EmptyEdgeSpecificProof();
    error EmptyEndMachineStatus();
    error EmptyEndRoot();
    error EmptyFirstRival();
    error EmptyOriginId();
    error EmptyPrefixProof();
    error EmptyStaker();
    error EmptyStartMachineStatus();
    error EmptyStartRoot();
    error HeightDiffLtTwo(uint256 h1, uint256 h2);
    error InsufficientConfirmationBlocks(uint256 totalBlocks, uint256 thresholdBlocks);
    error InvalidEndHeight(uint256 actualHeight, uint256 expectedHeight);
    error InvalidHeights(uint256 start, uint256 end);
    error LevelTooHigh(uint8 level, uint8 numBigStepLevels);
    error MerkleProofTooLong(uint256 actualLength, uint256 maxProofLength);
    error NotPowerOfTwo(uint256 val);
    error RivalEdgeConfirmed(bytes32 edgeId, bytes32 confirmedRivalId);

    function add(ChallengeEdge memory edge) external returns (EdgeAddedData memory);
    function bisectEdge(bytes32 edgeId, bytes32 bisectionHistoryRoot, bytes memory prefixProof) external returns (bytes32, EdgeAddedData memory, EdgeAddedData memory);
    function confirmEdgeByOneStepProof(bytes32 edgeId, address oneStepProofEntry, OneStepData memory oneStepData, ExecutionContext memory execCtx, bytes32[] memory beforeHistoryInclusionProof, bytes32[] memory afterHistoryInclusionProof, uint8 numBigStepLevel, uint256 bigStepHeight, uint256 smallStepHeight) external;
    function confirmEdgeByTime(bytes32 edgeId, uint64 claimedAssertionUnrivaledBlocks, uint64 confirmationThresholdBlock) external returns (uint256);
    function confirmedRivals(bytes32 mutualId) external view returns (bytes32);
    function createLayerZeroEdge(CreateEdgeArgs memory args, AssertionReferenceData memory ard, address oneStepProofEntry, uint256 expectedEndHeight, uint8 numBigStepLevel, bool whitelistEnabled) external returns (EdgeAddedData memory);
    function exists(bytes32 edgeId) external view returns (bool);
    function firstRivals(bytes32 mutualId) external view returns (bytes32);
    function get(bytes32 edgeId) external view returns (ChallengeEdge memory);
    function getConfirmedRival(bytes32 mutualId) external view returns (bytes32);
    function getNoCheck(bytes32 edgeId) external view returns (ChallengeEdge memory);
    function getPrevAssertionHash(bytes32 edgeId) external view returns (bytes32);
    function hasLengthOneRival(bytes32 edgeId) external view returns (bool);
    function hasMadeLayerZeroRival(address account, bytes32 mutualId) external view returns (bool);
    function hasRival(bytes32 edgeId) external view returns (bool);
    function isPowerOfTwo(uint256 x) external pure returns (bool);
    function mandatoryBisectionHeight(uint256 start, uint256 end) external pure returns (uint256);
    function nextEdgeLevel(uint8 level, uint8 numBigStepLevel) external pure returns (uint8);
    function remove(bytes32 edgeId) external;
    function setClaimId(bytes32 edgeId, bytes32 claimId) external;
    function setConfirmed(bytes32 id) external;
    function setConfirmedRival(bytes32 edgeId) external;
    function setFirstRival(bytes32 edgeId, bytes32 firstRival) external;
    function setHasMadeLayerZeroRival(address account, bytes32 mutualId, bool x) external;
    function setLevel(bytes32 edgeId, uint8 level) external;
    function timeUnrivaled(bytes32 edgeId) external view returns (uint256);
    function timeUnrivaledTotal(bytes32 edgeId) external view returns (uint256);
    function updateTimerCacheByChildren(bytes32 edgeId, uint256 maximumCachedTime) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "add",
    "inputs": [
      {
        "name": "edge",
        "type": "tuple",
        "internalType": "struct ChallengeEdge",
        "components": [
          {
            "name": "originId",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "startHistoryRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "startHeight",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "endHistoryRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "endHeight",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "lowerChildId",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "upperChildId",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "claimId",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "staker",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "createdAtBlock",
            "type": "uint64",
            "internalType": "uint64"
          },
          {
            "name": "confirmedAtBlock",
            "type": "uint64",
            "internalType": "uint64"
          },
          {
            "name": "status",
            "type": "uint8",
            "internalType": "enum EdgeStatus"
          },
          {
            "name": "level",
            "type": "uint8",
            "internalType": "uint8"
          },
          {
            "name": "refunded",
            "type": "bool",
            "internalType": "bool"
          },
          {
            "name": "totalTimeUnrivaledCache",
            "type": "uint64",
            "internalType": "uint64"
          }
        ]
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "tuple",
        "internalType": "struct EdgeAddedData",
        "components": [
          {
            "name": "edgeId",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "mutualId",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "originId",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "claimId",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "length",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "level",
            "type": "uint8",
            "internalType": "uint8"
          },
          {
            "name": "hasRival",
            "type": "bool",
            "internalType": "bool"
          },
          {
            "name": "isLayerZero",
            "type": "bool",
            "internalType": "bool"
          }
        ]
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "bisectEdge",
    "inputs": [
      {
        "name": "edgeId",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "bisectionHistoryRoot",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "prefixProof",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "",
        "type": "tuple",
        "internalType": "struct EdgeAddedData",
        "components": [
          {
            "name": "edgeId",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "mutualId",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "originId",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "claimId",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "length",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "level",
            "type": "uint8",
            "internalType": "uint8"
          },
          {
            "name": "hasRival",
            "type": "bool",
            "internalType": "bool"
          },
          {
            "name": "isLayerZero",
            "type": "bool",
            "internalType": "bool"
          }
        ]
      },
      {
        "name": "",
        "type": "tuple",
        "internalType": "struct EdgeAddedData",
        "components": [
          {
            "name": "edgeId",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "mutualId",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "originId",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "claimId",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "length",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "level",
            "type": "uint8",
            "internalType": "uint8"
          },
          {
            "name": "hasRival",
            "type": "bool",
            "internalType": "bool"
          },
          {
            "name": "isLayerZero",
            "type": "bool",
            "internalType": "bool"
          }
        ]
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "confirmEdgeByOneStepProof",
    "inputs": [
      {
        "name": "edgeId",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "oneStepProofEntry",
        "type": "address",
        "internalType": "contract IOneStepProofEntry"
      },
      {
        "name": "oneStepData",
        "type": "tuple",
        "internalType": "struct OneStepData",
        "components": [
          {
            "name": "beforeHash",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "proof",
            "type": "bytes",
            "internalType": "bytes"
          }
        ]
      },
      {
        "name": "execCtx",
        "type": "tuple",
        "internalType": "struct ExecutionContext",
        "components": [
          {
            "name": "maxInboxMessagesRead",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "bridge",
            "type": "address",
            "internalType": "contract IBridge"
          },
          {
            "name": "initialWasmModuleRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          }
        ]
      },
      {
        "name": "beforeHistoryInclusionProof",
        "type": "bytes32[]",
        "internalType": "bytes32[]"
      },
      {
        "name": "afterHistoryInclusionProof",
        "type": "bytes32[]",
        "internalType": "bytes32[]"
      },
      {
        "name": "numBigStepLevel",
        "type": "uint8",
        "internalType": "uint8"
      },
      {
        "name": "bigStepHeight",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "smallStepHeight",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "confirmEdgeByTime",
    "inputs": [
      {
        "name": "edgeId",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "claimedAssertionUnrivaledBlocks",
        "type": "uint64",
        "internalType": "uint64"
      },
      {
        "name": "confirmationThresholdBlock",
        "type": "uint64",
        "internalType": "uint64"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "confirmedRivals",
    "inputs": [
      {
        "name": "mutualId",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "createLayerZeroEdge",
    "inputs": [
      {
        "name": "args",
        "type": "tuple",
        "internalType": "struct CreateEdgeArgs",
        "components": [
          {
            "name": "level",
            "type": "uint8",
            "internalType": "uint8"
          },
          {
            "name": "endHistoryRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "endHeight",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "claimId",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "prefixProof",
            "type": "bytes",
            "internalType": "bytes"
          },
          {
            "name": "proof",
            "type": "bytes",
            "internalType": "bytes"
          }
        ]
      },
      {
        "name": "ard",
        "type": "tuple",
        "internalType": "struct AssertionReferenceData",
        "components": [
          {
            "name": "assertionHash",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "predecessorId",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "isPending",
            "type": "bool",
            "internalType": "bool"
          },
          {
            "name": "hasSibling",
            "type": "bool",
            "internalType": "bool"
          },
          {
            "name": "startState",
            "type": "tuple",
            "internalType": "struct AssertionState",
            "components": [
              {
                "name": "globalState",
                "type": "tuple",
                "internalType": "struct GlobalState",
                "components": [
                  {
                    "name": "bytes32Vals",
                    "type": "bytes32[2]",
                    "internalType": "bytes32[2]"
                  },
                  {
                    "name": "u64Vals",
                    "type": "uint64[2]",
                    "internalType": "uint64[2]"
                  }
                ]
              },
              {
                "name": "machineStatus",
                "type": "uint8",
                "internalType": "enum MachineStatus"
              },
              {
                "name": "endHistoryRoot",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "endState",
            "type": "tuple",
            "internalType": "struct AssertionState",
            "components": [
              {
                "name": "globalState",
                "type": "tuple",
                "internalType": "struct GlobalState",
                "components": [
                  {
                    "name": "bytes32Vals",
                    "type": "bytes32[2]",
                    "internalType": "bytes32[2]"
                  },
                  {
                    "name": "u64Vals",
                    "type": "uint64[2]",
                    "internalType": "uint64[2]"
                  }
                ]
              },
              {
                "name": "machineStatus",
                "type": "uint8",
                "internalType": "enum MachineStatus"
              },
              {
                "name": "endHistoryRoot",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          }
        ]
      },
      {
        "name": "oneStepProofEntry",
        "type": "address",
        "internalType": "contract IOneStepProofEntry"
      },
      {
        "name": "expectedEndHeight",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "numBigStepLevel",
        "type": "uint8",
        "internalType": "uint8"
      },
      {
        "name": "whitelistEnabled",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "tuple",
        "internalType": "struct EdgeAddedData",
        "components": [
          {
            "name": "edgeId",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "mutualId",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "originId",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "claimId",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "length",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "level",
            "type": "uint8",
            "internalType": "uint8"
          },
          {
            "name": "hasRival",
            "type": "bool",
            "internalType": "bool"
          },
          {
            "name": "isLayerZero",
            "type": "bool",
            "internalType": "bool"
          }
        ]
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "exists",
    "inputs": [
      {
        "name": "edgeId",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "firstRivals",
    "inputs": [
      {
        "name": "mutualId",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "get",
    "inputs": [
      {
        "name": "edgeId",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "tuple",
        "internalType": "struct ChallengeEdge",
        "components": [
          {
            "name": "originId",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "startHistoryRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "startHeight",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "endHistoryRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "endHeight",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "lowerChildId",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "upperChildId",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "claimId",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "staker",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "createdAtBlock",
            "type": "uint64",
            "internalType": "uint64"
          },
          {
            "name": "confirmedAtBlock",
            "type": "uint64",
            "internalType": "uint64"
          },
          {
            "name": "status",
            "type": "uint8",
            "internalType": "enum EdgeStatus"
          },
          {
            "name": "level",
            "type": "uint8",
            "internalType": "uint8"
          },
          {
            "name": "refunded",
            "type": "bool",
            "internalType": "bool"
          },
          {
            "name": "totalTimeUnrivaledCache",
            "type": "uint64",
            "internalType": "uint64"
          }
        ]
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getConfirmedRival",
    "inputs": [
      {
        "name": "mutualId",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getNoCheck",
    "inputs": [
      {
        "name": "edgeId",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "tuple",
        "internalType": "struct ChallengeEdge",
        "components": [
          {
            "name": "originId",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "startHistoryRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "startHeight",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "endHistoryRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "endHeight",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "lowerChildId",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "upperChildId",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "claimId",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "staker",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "createdAtBlock",
            "type": "uint64",
            "internalType": "uint64"
          },
          {
            "name": "confirmedAtBlock",
            "type": "uint64",
            "internalType": "uint64"
          },
          {
            "name": "status",
            "type": "uint8",
            "internalType": "enum EdgeStatus"
          },
          {
            "name": "level",
            "type": "uint8",
            "internalType": "uint8"
          },
          {
            "name": "refunded",
            "type": "bool",
            "internalType": "bool"
          },
          {
            "name": "totalTimeUnrivaledCache",
            "type": "uint64",
            "internalType": "uint64"
          }
        ]
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getPrevAssertionHash",
    "inputs": [
      {
        "name": "edgeId",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "hasLengthOneRival",
    "inputs": [
      {
        "name": "edgeId",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "hasMadeLayerZeroRival",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "mutualId",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "hasRival",
    "inputs": [
      {
        "name": "edgeId",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isPowerOfTwo",
    "inputs": [
      {
        "name": "x",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "mandatoryBisectionHeight",
    "inputs": [
      {
        "name": "start",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "end",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "nextEdgeLevel",
    "inputs": [
      {
        "name": "level",
        "type": "uint8",
        "internalType": "uint8"
      },
      {
        "name": "numBigStepLevel",
        "type": "uint8",
        "internalType": "uint8"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint8",
        "internalType": "uint8"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "remove",
    "inputs": [
      {
        "name": "edgeId",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setClaimId",
    "inputs": [
      {
        "name": "edgeId",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "claimId",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setConfirmed",
    "inputs": [
      {
        "name": "id",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setConfirmedRival",
    "inputs": [
      {
        "name": "edgeId",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setFirstRival",
    "inputs": [
      {
        "name": "edgeId",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "firstRival",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setHasMadeLayerZeroRival",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "mutualId",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "x",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setLevel",
    "inputs": [
      {
        "name": "edgeId",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "level",
        "type": "uint8",
        "internalType": "uint8"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "timeUnrivaled",
    "inputs": [
      {
        "name": "edgeId",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "timeUnrivaledTotal",
    "inputs": [
      {
        "name": "edgeId",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "updateTimerCacheByChildren",
    "inputs": [
      {
        "name": "edgeId",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "maximumCachedTime",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "error",
    "name": "AccountHasMadeLayerZeroRival",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "mutualId",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ]
  },
  {
    "type": "error",
    "name": "AssertionHashEmpty",
    "inputs": []
  },
  {
    "type": "error",
    "name": "AssertionHashMismatch",
    "inputs": [
      {
        "name": "h1",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "h2",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ]
  },
  {
    "type": "error",
    "name": "AssertionNoSibling",
    "inputs": []
  },
  {
    "type": "error",
    "name": "AssertionNotPending",
    "inputs": []
  },
  {
    "type": "error",
    "name": "CachedTimeSufficient",
    "inputs": [
      {
        "name": "actual",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "expected",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ChildrenAlreadySet",
    "inputs": [
      {
        "name": "edgeId",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "lowerChildId",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "upperChildId",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ]
  },
  {
    "type": "error",
    "name": "ClaimEdgeInvalidLevel",
    "inputs": [
      {
        "name": "argLevel",
        "type": "uint8",
        "internalType": "uint8"
      },
      {
        "name": "claimLevel",
        "type": "uint8",
        "internalType": "uint8"
      }
    ]
  },
  {
    "type": "error",
    "name": "ClaimEdgeNotLengthOneRival",
    "inputs": [
      {
        "name": "claimId",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ]
  },
  {
    "type": "error",
    "name": "ClaimEdgeNotPending",
    "inputs": []
  },
  {
    "type": "error",
    "name": "EdgeAlreadyExists",
    "inputs": [
      {
        "name": "edgeId",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ]
  },
  {
    "type": "error",
    "name": "EdgeNotExists",
    "inputs": [
      {
        "name": "edgeId",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ]
  },
  {
    "type": "error",
    "name": "EdgeNotLengthOne",
    "inputs": [
      {
        "name": "length",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "EdgeNotPending",
    "inputs": [
      {
        "name": "edgeId",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "status",
        "type": "uint8",
        "internalType": "enum EdgeStatus"
      }
    ]
  },
  {
    "type": "error",
    "name": "EdgeTypeNotSmallStep",
    "inputs": [
      {
        "name": "level",
        "type": "uint8",
        "internalType": "uint8"
      }
    ]
  },
  {
    "type": "error",
    "name": "EdgeUnrivaled",
    "inputs": [
      {
        "name": "edgeId",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ]
  },
  {
    "type": "error",
    "name": "EmptyClaimId",
    "inputs": []
  },
  {
    "type": "error",
    "name": "EmptyEdgeSpecificProof",
    "inputs": []
  },
  {
    "type": "error",
    "name": "EmptyEndMachineStatus",
    "inputs": []
  },
  {
    "type": "error",
    "name": "EmptyEndRoot",
    "inputs": []
  },
  {
    "type": "error",
    "name": "EmptyFirstRival",
    "inputs": []
  },
  {
    "type": "error",
    "name": "EmptyOriginId",
    "inputs": []
  },
  {
    "type": "error",
    "name": "EmptyPrefixProof",
    "inputs": []
  },
  {
    "type": "error",
    "name": "EmptyStaker",
    "inputs": []
  },
  {
    "type": "error",
    "name": "EmptyStartMachineStatus",
    "inputs": []
  },
  {
    "type": "error",
    "name": "EmptyStartRoot",
    "inputs": []
  },
  {
    "type": "error",
    "name": "HeightDiffLtTwo",
    "inputs": [
      {
        "name": "h1",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "h2",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "InsufficientConfirmationBlocks",
    "inputs": [
      {
        "name": "totalBlocks",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "thresholdBlocks",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "InvalidEndHeight",
    "inputs": [
      {
        "name": "actualHeight",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "expectedHeight",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "InvalidHeights",
    "inputs": [
      {
        "name": "start",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "end",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "LevelTooHigh",
    "inputs": [
      {
        "name": "level",
        "type": "uint8",
        "internalType": "uint8"
      },
      {
        "name": "numBigStepLevels",
        "type": "uint8",
        "internalType": "uint8"
      }
    ]
  },
  {
    "type": "error",
    "name": "MerkleProofTooLong",
    "inputs": [
      {
        "name": "actualLength",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "maxProofLength",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "NotPowerOfTwo",
    "inputs": [
      {
        "name": "val",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "RivalEdgeConfirmed",
    "inputs": [
      {
        "name": "edgeId",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "confirmedRivalId",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ]
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod EdgeChallengeManagerLibAccess {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052348015600e575f80fd5b50614e388061001c5f395ff3fe608060405234801561000f575f80fd5b50600436106101bb575f3560e01c80638fb7d65e116100f3578063c8bc4e4311610093578063e4cfe2aa1161006e578063e4cfe2aa146104de578063e7faf63e146104f1578063edaab54a14610504578063f9a239f514610517575f80fd5b8063c8bc4e4314610489578063cd2860ac146104ab578063cd8fc677146104cb575f80fd5b8063a50c2361116100ce578063a50c236114610444578063b292a8ee14610457578063c40e425e14610476578063c89a166c14610457575f80fd5b80638fb7d65e14610379578063908517e91461038c57806395bc26731461039f575f80fd5b80634c478bb71161015e578063610df39e11610139578063610df39e146102e9578063655b42f3146102fc5780637e4098d7146103345780638eaa6ac014610359575f80fd5b80634c478bb7146102a457806354b64151146102c35780635a48e0f4146102d6575f80fd5b806338a699a41161019957806338a699a41461020f5780633e35f5e8146102225780634666e7bc146102435780634c1f245c14610262575f80fd5b806305718ffe146101bf57806306388dd6146101d45780630e1ed1f5146101fc575b5f80fd5b6101d26101cd366004613e81565b61052a565b005b6101e76101e2366004613e81565b610537565b60405190151581526020015b60405180910390f35b6101d261020a366004613ea8565b610547565b6101e761021d366004613e81565b610571565b610235610230366004613e81565b610599565b6040519081526020016101f3565b6101d2610251366004613ed2565b5f9182526001602052604090912055565b6101d2610270366004613f20565b6001600160a01b03929092165f90815260036020908152604080832093835292905220805460ff1916911515919091179055565b6102356102b2366004613e81565b5f9081526001602052604090205490565b6101e76102d1366004613e81565b6105a4565b6102356102e4366004613e81565b6105af565b6102356102f7366004613f72565b6105ba565b6101e761030a366004613fa2565b6001600160a01b03919091165f908152600360209081526040808320938352929052205460ff1690565b610347610342366004613fcc565b6105d1565b60405160ff90911681526020016101f3565b61036c610367366004613e81565b6105dc565b6040516101f3919061401c565b61036c610387366004613e81565b610786565b6101e761039a366004613e81565b61080d565b6101d26103ad366004613e81565b5f90815260208190526040812081815560018101829055600281018290556003810182905560048101829055600581018290556006810182905560078101919091556008810180547fffffffff0000000000000000000000000000000000000000000000000000000016905560090180547fffffffffffffffffffffffffff00000000000000000000000000000000000000169055565b6101d2610452366004613e81565b610818565b610235610465366004613e81565b5f9081526002602052604090205490565b6101d2610484366004613ed2565b61082a565b61049c6104973660046141de565b61083d565b6040516101f39392919061427f565b6104be6104b9366004614353565b6108d7565b6040516101f3919061443b565b6102356104d9366004613ed2565b610921565b6102356104ec366004613e81565b61092c565b6101d26104ff36600461453b565b610937565b6101d2610512366004613ed2565b610958565b6104be61052536600461471e565b610969565b6105345f826109c3565b50565b5f61054182610a48565b92915050565b806105525f84610a6e565b60090160096101000a81548160ff021916908360ff1602179055505050565b5f61054161057f8284610a6e565b60080154600160a01b900467ffffffffffffffff16151590565b5f6105418183610ac1565b5f6105418183610c77565b5f6105418183610ca9565b5f6105c781858585610cfe565b90505b9392505050565b5f6105ca8383610de4565b604080516101e0810182525f80825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810182905261018081018290526101a081018290526101c081019190915261065e5f83610a6e565b604080516101e0810182528254815260018084015460208301526002840154928201929092526003830154606082015260048301546080820152600583015460a0820152600683015460c0820152600783015460e082015260088301546001600160a01b038116610100830152600160a01b900467ffffffffffffffff908116610120830152600984015490811661014083015290929161016084019168010000000000000000900460ff169081111561071a5761071a613ff4565b600181111561072b5761072b613ff4565b81526009919091015460ff69010000000000000000008204811660208401526a01000000000000000000008204161515604083015267ffffffffffffffff6b0100000000000000000000009091041660609091015292915050565b604080516101e0810182525f8082526020808301829052828401829052606083018290526080830182905260a0830182905260c0830182905260e08301829052610100830182905261012083018290526101408301829052610160830182905261018083018290526101a083018290526101c083018290528482528190529190912061065e565b5f6105418183610e05565b6105346108255f83610a6e565b610ee2565b806108355f84610a6e565b600701555050565b60408051610100810182525f80825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905260408051610100810182525f80825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101919091526108c85f878787610f8c565b92509250925093509350939050565b60408051610100810182525f80825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101919091526105415f836113bd565b5f6105ca83836117e6565b5f610541818361188f565b61094b5f8c8c8c8c8c8c8c8c8c8c8c611924565b5050505050505050505050565b6109635f8383611cc2565b50505050565b60408051610100810182525f80825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101919091526109b85f888888888888611ce5565b979650505050505050565b5f8181526020839052604081206109d990611e05565b5f8181526002850160205260409020549091508015610a33576040517fdd7028f000000000000000000000000000000000000000000000000000000000815260048101849052602481018290526044015b60405180910390fd5b505f9081526002909201602052604090912055565b5f815f03610a5757505f919050565b5f610a63600184614826565b929092161592915050565b5f81815260208390526040812060080154600160a01b900467ffffffffffffffff16610aaf5760405162a7b02b60e01b815260048101839052602401610a2a565b505f9081526020919091526040902090565b5f81815260208390526040812060080154600160a01b900467ffffffffffffffff16610b025760405162a7b02b60e01b815260048101839052602401610a2a565b5f828152602084905260408120610b1890611e05565b5f818152600186016020526040812054919250819003610b64576040517fda10f67c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040516815539492559053115160ba1b6020820152602901604051602081830303815290604052805190602001208103610bcd575f84815260208690526040902060080154610bc490600160a01b900467ffffffffffffffff1643614826565b92505050610541565b5f81815260208690526040902060080154600160a01b900467ffffffffffffffff16610c0e5760405162a7b02b60e01b815260048101829052602401610a2a565b5f81815260208690526040808220600890810154878452919092209091015467ffffffffffffffff600160a01b928390048116929091041680821115610c6357610c588183614826565b945050505050610541565b5f945050505050610541565b505092915050565b5f610c828383610e05565b80156105ca57505f828152602084905260409020610c9f90611e99565b6001149392505050565b5f80610cb58484610a6e565b90505b60098101546901000000000000000000900460ff1615610cf65780545f908152600185016020526040902054610cee8582610a6e565b915050610cb8565b549392505050565b5f83815260208590526040812060080154600160a01b900467ffffffffffffffff16610d3f5760405162a7b02b60e01b815260048101859052602401610a2a565b5f610d4a868661188f565b9050610d6067ffffffffffffffff851682614839565b90508267ffffffffffffffff16811015610db9576040517f11a8d4d00000000000000000000000000000000000000000000000000000000081526004810182905267ffffffffffffffff84166024820152604401610a2a565b5f858152602087905260409020610dcf90610ee2565b610dd986866109c3565b90505b949350505050565b5f80610df184600161484c565b9050610dfd8184611edc565b509392505050565b5f81815260208390526040812060080154600160a01b900467ffffffffffffffff16610e465760405162a7b02b60e01b815260048101839052602401610a2a565b5f828152602084905260408120610e5c90611e05565b5f818152600186016020526040812054919250819003610ea8576040517fda10f67c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040516815539492559053115160ba1b602082015260290160408051601f1981840301815291905280516020909101201415949350505050565b5f600982015468010000000000000000900460ff166001811115610f0857610f08613ff4565b14610f5e57610f1681611f61565b60098201546040517f23f8405d000000000000000000000000000000000000000000000000000000008152610a2a929168010000000000000000900460ff1690600401614865565b600901805467ffffffffffffffff431668ffffffffffffffffff199091161768010000000000000000179055565b60408051610100810182525f80825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905260408051610100810182525f80825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101919091525f808781526020899052604090206009015468010000000000000000900460ff16600181111561103d5761103d613ff4565b14611099575f86815260208890526040908190206009015490517f23f8405d000000000000000000000000000000000000000000000000000000008152610a2a9188916801000000000000000090910460ff1690600401614865565b6110a38787610e05565b6110dc576040517f80e07e4500000000000000000000000000000000000000000000000000000000815260048101879052602401610a2a565b5f868152602088905260408120604080516101e0810182528254815260018084015460208301526002840154928201929092526003830154606082015260048301546080820152600583015460a0820152600683015460c0820152600783015460e082015260088301546001600160a01b038116610100830152600160a01b900467ffffffffffffffff908116610120830152600984015490811661014083015290929161016084019168010000000000000000900460ff16908111156111a5576111a5613ff4565b60018111156111b6576111b6613ff4565b8152600991909101546901000000000000000000810460ff90811660208401526a010000000000000000000082041615156040808401919091526b01000000000000000000000090910467ffffffffffffffff1660609092019190915281015160808201519192505f9161122a91906117e6565b90505f80878060200190518101906112429190614908565b909250905061127289611256856001614839565b6060870151608088015161126b906001614839565b868661201f565b505060408051610100810182525f80825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290525f6112d2855f0151866020015187604001518d888a610180015161233d565b90506112dd81612445565b5f81815260208e90526040902060080154909350600160a01b900467ffffffffffffffff16611313576113108c826113bd565b91505b5060408051610100810182525f80825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101919091525f611373865f01518c8789606001518a608001518b610180015161233d565b905061137f8d826113bd565b9150506113ab83825f01518e5f015f8f81526020019081526020015f206124f49092919063ffffffff16565b919b909a509098509650505050505050565b60408051610100810182525f80825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290529061140683612445565b5f81815260208690526040902060080154909150600160a01b900467ffffffffffffffff1615611465576040517fbcedf3de00000000000000000000000000000000000000000000000000000000815260048101829052602401610a2a565b5f81815260208581526040918290208551815590850151600180830191909155918501516002820155606085015160038201556080850151600482015560a0850151600582015560c0850151600682015560e0850151600782015561010085015160088201805461012088015167ffffffffffffffff908116600160a01b027fffffffff000000000000000000000000000000000000000000000000000000009092166001600160a01b0390941693909317179055610140860151600983018054919092167fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000821681178355610160880151889590939268ffffffffffffffffff1916909117906801000000000000000090849081111561158857611588613ff4565b02179055506101808281015160099290920180546101a08501516101c09095015167ffffffffffffffff166b0100000000000000000000000272ffffffffffffffff0000000000000000000000199515156a0100000000000000000000027fffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffff60ff909616690100000000000000000002959095167fffffffffffffffffffffffffffffffffffffffffff0000ffffffffffffffffff909216919091179390931793909316919091179091558301518351604080860151602080880151608089015184517fff0000000000000000000000000000000000000000000000000000000000000060f89890981b97909716878401526021870195909552604186019290925260618501919091526081808501939093528151808503909301835260a1909301905280519101205f905f818152600187016020526040812054919250819003611730576040516815539492559053115160ba1b602082015260290160408051601f1981840301815291815281516020928301205f85815260018a01909352912055611777565b6040516815539492559053115160ba1b6020820152602901604051602081830303815290604052805190602001208103611777575f82815260018701602052604090208390555b6040805161010081018252848152602080820185905287518284015260e088015160608301525f868152908990529190912060808201906117b790611e99565b815261018087015160ff166020820152911515604083015260e090950151151560609091015250919392505050565b5f60026117f38484614826565b1015611835576040517f902985940000000000000000000000000000000000000000000000000000000081526004810184905260248101839052604401610a2a565b61183f8383614826565b60020361185857611851836001614839565b9050610541565b5f83611865600185614826565b1890505f61187282612574565b90505f19811b80611884600187614826565b169695505050505050565b5f8061189b8484610ac1565b5f84815260208690526040902060050154909150156105ca575f8381526020859052604080822060058101548352818320600990810154600690920154845291909220015467ffffffffffffffff6b010000000000000000000000928390048116929091041680821061190e5780611910565b815b61191a9084614839565b9695505050505050565b5f8b815260208d90526040902060080154600160a01b900467ffffffffffffffff166119655760405162a7b02b60e01b8152600481018c9052602401610a2a565b60025f8c815260208e90526040902060090154611992906901000000000000000000900460ff1685611edc565b60028111156119a3576119a3613ff4565b146119fe575f8b815260208d90526040908190206009015490517f348aefdf000000000000000000000000000000000000000000000000000000008152690100000000000000000090910460ff166004820152602401610a2a565b5f8b815260208d905260409020611a1490611e99565b600114611a66575f8b815260208d905260409020611a3190611e99565b6040517f6b595e50000000000000000000000000000000000000000000000000000000008152600401610a2a91815260200190565b5f8b815260208d905260409020600201548b825b60018f5f015f8481526020019081526020015f2060090160099054906101000a900460ff1660ff161115611b15575f8f5f015f8481526020019081526020015f205f015490508f6001015f8281526020019081526020015f205492508f5f015f8481526020019081526020015f206002015482611af79190614968565b611b019085614839565b9350611b0d8683614968565b915050611a7a565b5050611b6d8d5f015f8e81526020019081526020015f20600101548b5f0135838b8b808060200260200160405190810160405280939291908181526020018383602002808284375f920191909152506126b892505050565b5f8b6001600160a01b031663b5112fd28b848e5f01358f8060200190611b93919061497f565b6040518663ffffffff1660e01b8152600401611bb39594939291906149e0565b602060405180830381865afa158015611bce573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611bf29190614a41565b9050611c538e5f015f8f81526020019081526020015f206003015482846001611c1b9190614839565b8a8a808060200260200160405190810160405280939291908181526020018383602002808284375f920191909152506126b892505050565b5f8d815260208f905260409020611c6990610ee2565b611c738e8e6109c3565b5050505f998a5250505060209790975250506040909320600901805472ffffffffffffffff0000000000000000000000191672ffffffffffffffff000000000000000000000017905550505050565b5f80611cd98585611cd3888861188f565b86612744565b91509150935093915050565b60408051610100810182525f80825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290529080611d338a8a8a8a896127db565b915091505f611d43838b89612d72565b90505f611d5183838d612ecd565b90508515611deb575f611d6382612f6f565b335f90815260038f016020908152604080832084845290915290205490915060ff1615611dc5576040517f5a46ac3a00000000000000000000000000000000000000000000000000000000815233600482015260248101829052604401610a2a565b335f90815260038e016020908152604080832093835292905220805460ff191660011790555b611df58c826113bd565b9c9b505050505050505050505050565b6009810154815460028301546001840154600485015460408051690100000000000000000090960460f81b7fff00000000000000000000000000000000000000000000000000000000000000166020808801919091526021870195909552604186019390935260618501919091526081808501919091528151808503909101815260a1909301905281519101205f90610541565b5f8082600201548360040154611eaf9190614826565b9050805f0361054157611ec183611f61565b60405162a7b02b60e01b8152600401610a2a91815260200190565b5f8260ff165f03611eee57505f610541565b8160ff168360ff1611611f0357506001610541565b611f0e82600161484c565b60ff168360ff1603611f2257506002610541565b6040517fae0da57800000000000000000000000000000000000000000000000000000000815260ff808516600483015283166024820152604401610a2a565b60098101548154600283015460018401546004850154600386015460408051690100000000000000000090970460f81b7fff00000000000000000000000000000000000000000000000000000000000000166020808901919091526021880196909652604187019490945260618601929092526081808601919091528251808603909101815260a18501835280519084012060c185015260e18085019190915281518085039091018152610101909301905281519101205f90610541565b5f851161206e5760405162461bcd60e51b815260206004820152601460248201527f5072652d73697a652063616e6e6f7420626520300000000000000000000000006044820152606401610a2a565b8561207883612ff4565b146120c55760405162461bcd60e51b815260206004820152601b60248201527f50726520657870616e73696f6e20726f6f74206d69736d6174636800000000006044820152606401610a2a565b846120cf83613184565b146121425760405162461bcd60e51b815260206004820152602160248201527f5072652073697a6520646f6573206e6f74206d6174636820657870616e73696f60448201527f6e000000000000000000000000000000000000000000000000000000000000006064820152608401610a2a565b8285106121915760405162461bcd60e51b815260206004820181905260248201527f5072652073697a65206e6f74206c657373207468616e20706f73742073697a656044820152606401610a2a565b5f8590505f806121a3855f87516131d3565b90505b85831015612265575f6121b98488613347565b90508451831061220b5760405162461bcd60e51b815260206004820152601260248201527f496e646578206f7574206f662072616e676500000000000000000000000000006044820152606401610a2a565b61222f828287868151811061222257612222614a58565b602002602001015161342e565b91506001811b61223f8186614839565b94508785111561225157612251614a6c565b8361225b81614a80565b94505050506121a6565b8661226f82612ff4565b146122e25760405162461bcd60e51b815260206004820152602260248201527f506f737420657870616e73696f6e20726f6f74206e6f7420657175616c20706f60448201527f73740000000000000000000000000000000000000000000000000000000000006064820152608401610a2a565b835182146123325760405162461bcd60e51b815260206004820152601660248201527f496e636f6d706c6574652070726f6f66207573616765000000000000000000006044820152606401610a2a565b505050505050505050565b604080516101e0810182525f80825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810182905261018081018290526101a081018290526101c08101919091526123c28787878787613996565b50604080516101e081018252968752602087019590955293850192909252606084015260808301525f60a0830181905260c0830181905260e08301819052610100830181905267ffffffffffffffff43166101208401526101408301819052610160830181905260ff9091166101808301526101a082018190526101c082015290565b610180810151815160408084015160208086015160808701516060880151855160f89890981b7fff0000000000000000000000000000000000000000000000000000000000000016888501526021880196909652604187019390935260618601526081808601929092528251808603909201825260a18501835281519181019190912060c185015260e18085019390935281518085039093018352610101909301905280519101205f90610541565b60058301541515806125095750600683015415155b156125645761251783611f61565b600584015460068501546040517f8b0e71d0000000000000000000000000000000000000000000000000000000008152600481019390935260248301919091526044820152606401610a2a565b6005830191909155600690910155565b5f815f036125c45760405162461bcd60e51b815260206004820152601c60248201527f5a65726f20686173206e6f207369676e69666963616e742062697473000000006044820152606401610a2a565b70010000000000000000000000000000000082106125ef57608091821c916125ec9082614839565b90505b68010000000000000000821061261257604091821c9161260f9082614839565b90505b640100000000821061263157602091821c9161262e9082614839565b90505b62010000821061264e57601091821c9161264b9082614839565b90505b610100821061266a57600891821c916126679082614839565b90505b6010821061268557600491821c916126829082614839565b90505b600482106126a057600291821c9161269d9082614839565b90505b600282106126b357610541600182614839565b919050565b5f6126ec8284866040516020016126d191815260200190565b60405160208183030381529060405280519060200120613a87565b905080851461273d5760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420696e636c7573696f6e2070726f6f660000000000000000006044820152606401610a2a565b5050505050565b5f805f612752878786613b3a565b905067ffffffffffffffff85116127695784612773565b67ffffffffffffffff5b9450808511156127cc575050505f838152602085905260409020600901805472ffffffffffffffff000000000000000000000019166b01000000000000000000000067ffffffffffffffff8516021790556001826127d2565b5f925090505b94509492505050565b60408051606080820183525f8083526020830152918101919091525f8061280e6128086020890189614a98565b85611edc565b600281111561281f5761281f613ff4565b03612b4c57602085015185515f03612863576040517fe96bc61a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b85516060880135146128b15785516040517f5b177a3c000000000000000000000000000000000000000000000000000000008152600481019190915260608801356024820152604401610a2a565b85604001516128ec576040517fc169243600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8560600151612927576040517fb45d1c3a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61293460a088018861497f565b90505f0361296e576040517fc9ccac5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f61297c60a089018961497f565b8101906129899190614b4e565b509091505f905087608001516020015160028111156129aa576129aa613ff4565b036129e1576040517f46365e5200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f8760a001516020015160028111156129fc576129fc613ff4565b03612a33576040517f8999857d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f866001600160a01b031663c39619c4612a508a60800151613ba7565b6040518263ffffffff1660e01b8152600401612a6c9190614bb3565b602060405180830381865afa158015612a87573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612aab9190614a41565b90505f876001600160a01b031663c39619c4612aca8b60a00151613ba7565b6040518263ffffffff1660e01b8152600401612ae69190614bb3565b602060405180830381865afa158015612b01573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612b259190614a41565b6040805160608101825293845260208401919091528201929092529350909150612d689050565b612b5a878760600135610c77565b612b96576040517fff6d9bd700000000000000000000000000000000000000000000000000000000815260608701356004820152602401610a2a565b60608601355f90815260208890526040812090612bb282611e05565b90505f600983015468010000000000000000900460ff166001811115612bda57612bda613ff4565b14612c11576040517f12459ffd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6009820154612c30906901000000000000000000900460ff1686610de4565b60ff16612c4060208a018a614a98565b60ff1614612ca857612c556020890189614a98565b60098301546040517fac9e611600000000000000000000000000000000000000000000000000000000815260ff928316600482015269010000000000000000009091049091166024820152604401610a2a565b612cb560a089018961497f565b90505f03612cef576040517fc9ccac5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f80808080612d0160a08e018e61497f565b810190612d0e9190614c2c565b94509450945094509450612d2c8760010154868960020154866126b8565b612d408760030154858960040154856126b8565b6040518060600160405280868152602001858152602001828152508698509850505050505050505b9550959350505050565b604080515f808252602082019092528190612d9790612d92908751613be1565b612ff4565b9050612da283610a48565b612ddb576040517feafedbfc00000000000000000000000000000000000000000000000000000000815260048101849052602401610a2a565b82846040013514612e2557604080517fdfcc62bc00000000000000000000000000000000000000000000000000000000815290850135600482015260248101849052604401610a2a565b612e4184602001358660200151866040013588604001516126b8565b612e4e608085018561497f565b90505f03612e88576040517f342a075200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f80612e97608087018761497f565b810190612ea49190614cc1565b9092509050612ec2836001602089013561126b60408b013583614839565b509095945050505050565b604080516101e0810182525f80825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810182905261018081018290526101a081018290526101c08101919091526105c784845f602086018035906040880135906060890135903390612f6a908b614a98565b613c16565b61018081015181516040808401516020808601516080870151845160f89790971b7fff0000000000000000000000000000000000000000000000000000000000000016878401526021870195909552604186019290925260618501919091526081808501939093528151808503909301835260a1909301905280519101205f90610541565b5f808251116130455760405162461bcd60e51b815260206004820152601660248201527f456d707479206d65726b6c6520657870616e73696f6e000000000000000000006044820152606401610a2a565b6040825111156130975760405162461bcd60e51b815260206004820152601a60248201527f4d65726b6c6520657870616e73696f6e20746f6f206c617267650000000000006044820152606401610a2a565b5f805b835181101561317d575f8482815181106130b6576130b6614a58565b60200260200101519050825f801b0361312057801561311b57809250600185516130e09190614826565b821461311b576040516131029084905f90602001918252602082015260400190565b6040516020818303038152906040528051906020012092505b613174565b801561313f576040805160208101839052908101849052606001613102565b60405161315b9084905f90602001918252602082015260400190565b6040516020818303038152906040528051906020012092505b5060010161309a565b5092915050565b5f80805b835181101561317d578381815181106131a3576131a3614a58565b60200260200101515f801b146131cb576131be816002614df7565b6131c89083614839565b91505b600101613188565b60608183106132245760405162461bcd60e51b815260206004820152601760248201527f5374617274206e6f74206c657373207468616e20656e640000000000000000006044820152606401610a2a565b835182111561329b5760405162461bcd60e51b815260206004820152602160248201527f456e64206e6f74206c657373206f7220657175616c207468616e206c656e677460448201527f68000000000000000000000000000000000000000000000000000000000000006064820152608401610a2a565b5f6132a68484614826565b67ffffffffffffffff8111156132be576132be614106565b6040519080825280602002602001820160405280156132e7578160200160208202803683370190505b509050835b8381101561333e5785818151811061330657613306614a58565b602002602001015182868361331b9190614826565b8151811061332b5761332b614a58565b60209081029190910101526001016132ec565b50949350505050565b5f8183106133975760405162461bcd60e51b815260206004820152601760248201527f5374617274206e6f74206c657373207468616e20656e640000000000000000006044820152606401610a2a565b5f6133a3838518612574565b90505f60016133b28382614839565b6001901b6133c09190614826565b905084811684821681156133d757610c5882613dbd565b80156133e657610c5881612574565b60405162461bcd60e51b815260206004820152601b60248201527f426f7468207920616e64207a2063616e6e6f74206265207a65726f00000000006044820152606401610a2a565b6060604083106134805760405162461bcd60e51b815260206004820152600e60248201527f4c6576656c20746f6f20686967680000000000000000000000000000000000006044820152606401610a2a565b5f8290036134d05760405162461bcd60e51b815260206004820152601b60248201527f43616e6e6f7420617070656e6420656d707479207375627472656500000000006044820152606401610a2a565b6040845111156135225760405162461bcd60e51b815260206004820152601a60248201527f4d65726b6c6520657870616e73696f6e20746f6f206c617267650000000000006044820152606401610a2a565b83515f0361359f575f613536846001614839565b67ffffffffffffffff81111561354e5761354e614106565b604051908082528060200260200182016040528015613577578160200160208202803683370190505b5090508281858151811061358d5761358d614a58565b602090810291909101015290506105ca565b835183106136155760405162461bcd60e51b815260206004820152603560248201527f4c6576656c2067726561746572207468616e2068696768657374206c6576656c60448201527f206f662063757272656e7420657870616e73696f6e00000000000000000000006064820152608401610a2a565b815f61362086613184565b90505f61362e866002614df7565b6136389083614839565b90505f61364483612574565b61364d83612574565b1161369b57875167ffffffffffffffff81111561366c5761366c614106565b604051908082528060200260200182016040528015613695578160200160208202803683370190505b506136eb565b87516136a8906001614839565b67ffffffffffffffff8111156136c0576136c0614106565b6040519080825280602002602001820160405280156136e9578160200160208202803683370190505b505b905060408151111561373f5760405162461bcd60e51b815260206004820152601c60248201527f417070656e642063726561746573206f76657273697a652074726565000000006044820152606401610a2a565b5f5b88518110156138eb57878110156137e75788818151811061376457613764614a58565b60200260200101515f801b146137e25760405162461bcd60e51b815260206004820152602260248201527f417070656e642061626f7665206c65617374207369676e69666963616e74206260448201527f69740000000000000000000000000000000000000000000000000000000000006064820152608401610a2a565b6138e3565b5f85900361382c5788818151811061380157613801614a58565b602002602001015182828151811061381b5761381b614a58565b6020026020010181815250506138e3565b88818151811061383e5761383e614a58565b60200260200101515f801b03613874578482828151811061386157613861614a58565b60209081029190910101525f94506138e3565b5f801b82828151811061388957613889614a58565b6020026020010181815250508881815181106138a7576138a7614a58565b6020026020010151856040516020016138ca929190918252602082015260400190565b6040516020818303038152906040528051906020012094505b600101613741565b50831561391f578381600183516139029190614826565b8151811061391257613912614a58565b6020026020010181815250505b806001825161392e9190614826565b8151811061393e5761393e614a58565b60200260200101515f801b036109b85760405162461bcd60e51b815260206004820152600f60248201527f4c61737420656e747279207a65726f00000000000000000000000000000000006044820152606401610a2a565b5f8590036139d0576040517f8d79dbbc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b828111613a13576040517f2060faf40000000000000000000000000000000000000000000000000000000081526004810184905260248101829052604401610a2a565b5f849003613a4d576040517f83c683e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f82900361273d576040517f5cb6e5bb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82515f90610100811115613ad2576040517ffdac331e000000000000000000000000000000000000000000000000000000008152600481018290526101006024820152604401610a2a565b825f5b82811015613b30575f878281518110613af057613af0614a58565b60200260200101519050816001901b87165f03613b1957825f528060205260405f209250613b27565b805f528260205260405f2092505b50600101613ad5565b5095945050505050565b5f828152602084905260408120600901546b010000000000000000000000900467ffffffffffffffff168281106105c7576040517fd1f592810000000000000000000000000000000000000000000000000000000081526004810182905260248101849052604401610a2a565b613baf613e28565b6040518060400160405280835f0151815260200183602001516002811115613bd957613bd9613ff4565b905292915050565b60606105ca835f84604051602001613bfb91815260200190565b6040516020818303038152906040528051906020012061342e565b604080516101e0810182525f80825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810182905261018081018290526101a081018290526101c08101919091526001600160a01b038316613cce576040517ff289e65700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f849003613d08576040517f6932bcfd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b613d158989898989613996565b604051806101e001604052808a81526020018981526020018881526020018781526020018681526020015f801b81526020015f801b8152602001858152602001846001600160a01b031681526020014367ffffffffffffffff1681526020015f67ffffffffffffffff1681526020015f6001811115613d9657613d96613ff4565b815260ff841660208201525f60408201819052606090910152905098975050505050505050565b5f808211613e0d5760405162461bcd60e51b815260206004820152601c60248201527f5a65726f20686173206e6f207369676e69666963616e742062697473000000006044820152606401610a2a565b5f8280613e1b600182614826565b161890506105ca81612574565b6040518060400160405280613e3b613e47565b81526020015f5b905290565b6040518060400160405280613e5a613e63565b8152602001613e425b60405180604001604052806002906020820280368337509192915050565b5f60208284031215613e91575f80fd5b5035919050565b803560ff811681146126b3575f80fd5b5f8060408385031215613eb9575f80fd5b82359150613ec960208401613e98565b90509250929050565b5f8060408385031215613ee3575f80fd5b50508035926020909101359150565b6001600160a01b0381168114610534575f80fd5b80356126b381613ef2565b803580151581146126b3575f80fd5b5f805f60608486031215613f32575f80fd5b8335613f3d81613ef2565b925060208401359150613f5260408501613f11565b90509250925092565b803567ffffffffffffffff811681146126b3575f80fd5b5f805f60608486031215613f84575f80fd5b83359250613f9460208501613f5b565b9150613f5260408501613f5b565b5f8060408385031215613fb3575f80fd5b8235613fbe81613ef2565b946020939093013593505050565b5f8060408385031215613fdd575f80fd5b613fe683613e98565b9150613ec960208401613e98565b634e487b7160e01b5f52602160045260245ffd5b6002811061401857614018613ff4565b9052565b5f6101e082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151614089828501826001600160a01b03169052565b50506101208381015167ffffffffffffffff81168483015250506101408381015167ffffffffffffffff8116848301525050610160808401516140ce82850182614008565b50506101808381015160ff16908301526101a0808401511515908301526101c08084015167ffffffffffffffff811682850152610c6f565b634e487b7160e01b5f52604160045260245ffd5b6040516101e0810167ffffffffffffffff8111828210171561413e5761413e614106565b60405290565b6040516060810167ffffffffffffffff8111828210171561413e5761413e614106565b6040805190810167ffffffffffffffff8111828210171561413e5761413e614106565b60405160c0810167ffffffffffffffff8111828210171561413e5761413e614106565b604051601f8201601f1916810167ffffffffffffffff811182821017156141d6576141d6614106565b604052919050565b5f805f606084860312156141f0575f80fd5b833592506020808501359250604085013567ffffffffffffffff80821115614216575f80fd5b818701915087601f830112614229575f80fd5b81358181111561423b5761423b614106565b61424d84601f19601f840116016141ad565b91508082528884828501011115614262575f80fd5b80848401858401375f848284010152508093505050509250925092565b83815261022081016142e46020830185805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260ff60a08201511660a083015260c0810151151560c083015260e0810151151560e08301525050565b825161012083015260208301516101408301526040830151610160830152606083015161018083015260808301516101a083015260a083015160ff166101c083015260c083015115156101e083015260e08301511515610200830152610ddc565b8035600281106126b3575f80fd5b5f6101e08284031215614364575f80fd5b61436c61411a565b823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c082015260e083013560e08201526101006143c4818501613f06565b908201526101206143d6848201613f5b565b908201526101406143e8848201613f5b565b908201526101606143fa848201614345565b9082015261018061440c848201613e98565b908201526101a061441e848201613f11565b908201526101c0614430848201613f5b565b908201529392505050565b61010081016105418284805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260ff60a08201511660a083015260c0810151151560c083015260e0810151151560e08301525050565b5f604082840312156144aa575f80fd5b50919050565b5f606082840312156144c0575f80fd5b6144c8614144565b90508135815260208201356144dc81613ef2565b806020830152506040820135604082015292915050565b5f8083601f840112614503575f80fd5b50813567ffffffffffffffff81111561451a575f80fd5b6020830191508360208260051b8501011115614534575f80fd5b9250929050565b5f805f805f805f805f805f6101608c8e031215614556575f80fd5b8b359a5061456660208d01613f06565b995067ffffffffffffffff8060408e01351115614581575f80fd5b6145918e60408f01358f0161449a565b99506145a08e60608f016144b0565b98508060c08e013511156145b2575f80fd5b6145c28e60c08f01358f016144f3565b909850965060e08d01358110156145d7575f80fd5b506145e88d60e08e01358e016144f3565b90955093506145fa6101008d01613e98565b92506101208c013591506101408c013590509295989b509295989b9093969950565b5f82601f83011261462b575f80fd5b614633614167565b806040840185811115614644575f80fd5b845b81811015612ec25761465781613f5b565b845260209384019301614646565b8035600381106126b3575f80fd5b5f81830360c0811215614684575f80fd5b61468c614144565b9150608081121561469b575f80fd5b506146a4614167565b83601f8401126146b2575f80fd5b6146ba614167565b8060408501868111156146cb575f80fd5b855b818110156146e55780358452602093840193016146cd565b508184526146f3878261461c565b6020850152505050815261470960808301614665565b602082015260a0820135604082015292915050565b5f805f805f808688036102a0811215614735575f80fd5b873567ffffffffffffffff81111561474b575f80fd5b880160c0818b03121561475c575f80fd5b9650610200601f1982011215614770575f80fd5b5061477961418a565b602088013581526040880135602082015261479660608901613f11565b60408201526147a760808901613f11565b60608201526147b98960a08a01614673565b60808201526147cc896101608a01614673565b60a082015294506147e06102208801613f06565b935061024087013592506147f76102608801613e98565b91506148066102808801613f11565b90509295509295509295565b634e487b7160e01b5f52601160045260245ffd5b8181038181111561054157610541614812565b8082018082111561054157610541614812565b60ff818116838216019081111561054157610541614812565b828152604081016105ca6020830184614008565b5f67ffffffffffffffff82111561489257614892614106565b5060051b60200190565b5f82601f8301126148ab575f80fd5b815160206148c06148bb83614879565b6141ad565b8083825260208201915060208460051b8701019350868411156148e1575f80fd5b602086015b848110156148fd57805183529183019183016148e6565b509695505050505050565b5f8060408385031215614919575f80fd5b825167ffffffffffffffff80821115614930575f80fd5b61493c8683870161489c565b93506020850151915080821115614951575f80fd5b5061495e8582860161489c565b9150509250929050565b808202811582820484141761054157610541614812565b5f8083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126149b2575f80fd5b83018035915067ffffffffffffffff8211156149cc575f80fd5b602001915036819003821315614534575f80fd5b855181526001600160a01b0360208701511660208201526040860151604082015284606082015283608082015260c060a08201528160c0820152818360e08301375f81830160e090810191909152601f909201601f19160101949350505050565b5f60208284031215614a51575f80fd5b5051919050565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52600160045260245ffd5b5f5f198203614a9157614a91614812565b5060010190565b5f60208284031215614aa8575f80fd5b6105ca82613e98565b5f82601f830112614ac0575f80fd5b81356020614ad06148bb83614879565b8083825260208201915060208460051b870101935086841115614af1575f80fd5b602086015b848110156148fd5780358352918301918301614af6565b5f6101008284031215614b1e575f80fd5b614b26614144565b9050614b328383614673565b815260c0820135602082015260e0820135604082015292915050565b5f805f6102208486031215614b61575f80fd5b833567ffffffffffffffff811115614b77575f80fd5b614b8386828701614ab1565b935050614b938560208601614b0d565b9150613f52856101208601614b0d565b6003811061401857614018613ff4565b8151805160a083019190835f5b6002811015614bdf578251825260209283019290910190600101614bc0565b50505060209081015190604084015f5b6002811015614c1657835167ffffffffffffffff1682529282019290820190600101614bef565b50505050602083015161317d6080840182614ba3565b5f805f805f60a08688031215614c40575f80fd5b8535945060208601359350604086013567ffffffffffffffff80821115614c65575f80fd5b614c7189838a01614ab1565b94506060880135915080821115614c86575f80fd5b614c9289838a01614ab1565b93506080880135915080821115614ca7575f80fd5b50614cb488828901614ab1565b9150509295509295909350565b5f8060408385031215614cd2575f80fd5b823567ffffffffffffffff80821115614ce9575f80fd5b614cf586838701614ab1565b93506020850135915080821115614d0a575f80fd5b5061495e85828601614ab1565b600181815b80851115614d5157815f1904821115614d3757614d37614812565b80851615614d4457918102915b93841c9390800290614d1c565b509250929050565b5f82614d6757506001610541565b81614d7357505f610541565b8160018114614d895760028114614d9357614daf565b6001915050610541565b60ff841115614da457614da4614812565b50506001821b610541565b5060208310610133831016604e8410600b8410161715614dd2575081810a610541565b614ddc8383614d17565b805f1904821115614def57614def614812565b029392505050565b5f6105ca8383614d5956fea2646970667358221220806e525e430352e1beda52830104ca5ae64a502195f0d77ae8f7fbeca7e8ac2b64736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15`\x0EW_\x80\xFD[PaN8\x80a\0\x1C_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\x01\xBBW_5`\xE0\x1C\x80c\x8F\xB7\xD6^\x11a\0\xF3W\x80c\xC8\xBCNC\x11a\0\x93W\x80c\xE4\xCF\xE2\xAA\x11a\0nW\x80c\xE4\xCF\xE2\xAA\x14a\x04\xDEW\x80c\xE7\xFA\xF6>\x14a\x04\xF1W\x80c\xED\xAA\xB5J\x14a\x05\x04W\x80c\xF9\xA29\xF5\x14a\x05\x17W_\x80\xFD[\x80c\xC8\xBCNC\x14a\x04\x89W\x80c\xCD(`\xAC\x14a\x04\xABW\x80c\xCD\x8F\xC6w\x14a\x04\xCBW_\x80\xFD[\x80c\xA5\x0C#a\x11a\0\xCEW\x80c\xA5\x0C#a\x14a\x04DW\x80c\xB2\x92\xA8\xEE\x14a\x04WW\x80c\xC4\x0EB^\x14a\x04vW\x80c\xC8\x9A\x16l\x14a\x04WW_\x80\xFD[\x80c\x8F\xB7\xD6^\x14a\x03yW\x80c\x90\x85\x17\xE9\x14a\x03\x8CW\x80c\x95\xBC&s\x14a\x03\x9FW_\x80\xFD[\x80cLG\x8B\xB7\x11a\x01^W\x80ca\r\xF3\x9E\x11a\x019W\x80ca\r\xF3\x9E\x14a\x02\xE9W\x80ce[B\xF3\x14a\x02\xFCW\x80c~@\x98\xD7\x14a\x034W\x80c\x8E\xAAj\xC0\x14a\x03YW_\x80\xFD[\x80cLG\x8B\xB7\x14a\x02\xA4W\x80cT\xB6AQ\x14a\x02\xC3W\x80cZH\xE0\xF4\x14a\x02\xD6W_\x80\xFD[\x80c8\xA6\x99\xA4\x11a\x01\x99W\x80c8\xA6\x99\xA4\x14a\x02\x0FW\x80c>5\xF5\xE8\x14a\x02\"W\x80cFf\xE7\xBC\x14a\x02CW\x80cL\x1F$\\\x14a\x02bW_\x80\xFD[\x80c\x05q\x8F\xFE\x14a\x01\xBFW\x80c\x068\x8D\xD6\x14a\x01\xD4W\x80c\x0E\x1E\xD1\xF5\x14a\x01\xFCW[_\x80\xFD[a\x01\xD2a\x01\xCD6`\x04a>\x81V[a\x05*V[\0[a\x01\xE7a\x01\xE26`\x04a>\x81V[a\x057V[`@Q\x90\x15\x15\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\x01\xD2a\x02\n6`\x04a>\xA8V[a\x05GV[a\x01\xE7a\x02\x1D6`\x04a>\x81V[a\x05qV[a\x025a\x0206`\x04a>\x81V[a\x05\x99V[`@Q\x90\x81R` \x01a\x01\xF3V[a\x01\xD2a\x02Q6`\x04a>\xD2V[_\x91\x82R`\x01` R`@\x90\x91 UV[a\x01\xD2a\x02p6`\x04a? V[`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16_\x90\x81R`\x03` \x90\x81R`@\x80\x83 \x93\x83R\x92\x90R \x80T`\xFF\x19\x16\x91\x15\x15\x91\x90\x91\x17\x90UV[a\x025a\x02\xB26`\x04a>\x81V[_\x90\x81R`\x01` R`@\x90 T\x90V[a\x01\xE7a\x02\xD16`\x04a>\x81V[a\x05\xA4V[a\x025a\x02\xE46`\x04a>\x81V[a\x05\xAFV[a\x025a\x02\xF76`\x04a?rV[a\x05\xBAV[a\x01\xE7a\x03\n6`\x04a?\xA2V[`\x01`\x01`\xA0\x1B\x03\x91\x90\x91\x16_\x90\x81R`\x03` \x90\x81R`@\x80\x83 \x93\x83R\x92\x90R T`\xFF\x16\x90V[a\x03Ga\x03B6`\x04a?\xCCV[a\x05\xD1V[`@Q`\xFF\x90\x91\x16\x81R` \x01a\x01\xF3V[a\x03la\x03g6`\x04a>\x81V[a\x05\xDCV[`@Qa\x01\xF3\x91\x90a@\x1CV[a\x03la\x03\x876`\x04a>\x81V[a\x07\x86V[a\x01\xE7a\x03\x9A6`\x04a>\x81V[a\x08\rV[a\x01\xD2a\x03\xAD6`\x04a>\x81V[_\x90\x81R` \x81\x90R`@\x81 \x81\x81U`\x01\x81\x01\x82\x90U`\x02\x81\x01\x82\x90U`\x03\x81\x01\x82\x90U`\x04\x81\x01\x82\x90U`\x05\x81\x01\x82\x90U`\x06\x81\x01\x82\x90U`\x07\x81\x01\x91\x90\x91U`\x08\x81\x01\x80T\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x90U`\t\x01\x80T\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x90UV[a\x01\xD2a\x04R6`\x04a>\x81V[a\x08\x18V[a\x025a\x04e6`\x04a>\x81V[_\x90\x81R`\x02` R`@\x90 T\x90V[a\x01\xD2a\x04\x846`\x04a>\xD2V[a\x08*V[a\x04\x9Ca\x04\x976`\x04aA\xDEV[a\x08=V[`@Qa\x01\xF3\x93\x92\x91\x90aB\x7FV[a\x04\xBEa\x04\xB96`\x04aCSV[a\x08\xD7V[`@Qa\x01\xF3\x91\x90aD;V[a\x025a\x04\xD96`\x04a>\xD2V[a\t!V[a\x025a\x04\xEC6`\x04a>\x81V[a\t,V[a\x01\xD2a\x04\xFF6`\x04aE;V[a\t7V[a\x01\xD2a\x05\x126`\x04a>\xD2V[a\tXV[a\x04\xBEa\x05%6`\x04aG\x1EV[a\tiV[a\x054_\x82a\t\xC3V[PV[_a\x05A\x82a\nHV[\x92\x91PPV[\x80a\x05R_\x84a\nnV[`\t\x01`\ta\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\xFF\x16\x02\x17\x90UPPPV[_a\x05Aa\x05\x7F\x82\x84a\nnV[`\x08\x01T`\x01`\xA0\x1B\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x15\x15\x90V[_a\x05A\x81\x83a\n\xC1V[_a\x05A\x81\x83a\x0CwV[_a\x05A\x81\x83a\x0C\xA9V[_a\x05\xC7\x81\x85\x85\x85a\x0C\xFEV[\x90P[\x93\x92PPPV[_a\x05\xCA\x83\x83a\r\xE4V[`@\x80Qa\x01\xE0\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R`\xC0\x81\x01\x82\x90R`\xE0\x81\x01\x82\x90Ra\x01\0\x81\x01\x82\x90Ra\x01 \x81\x01\x82\x90Ra\x01@\x81\x01\x82\x90Ra\x01`\x81\x01\x82\x90Ra\x01\x80\x81\x01\x82\x90Ra\x01\xA0\x81\x01\x82\x90Ra\x01\xC0\x81\x01\x91\x90\x91Ra\x06^_\x83a\nnV[`@\x80Qa\x01\xE0\x81\x01\x82R\x82T\x81R`\x01\x80\x84\x01T` \x83\x01R`\x02\x84\x01T\x92\x82\x01\x92\x90\x92R`\x03\x83\x01T``\x82\x01R`\x04\x83\x01T`\x80\x82\x01R`\x05\x83\x01T`\xA0\x82\x01R`\x06\x83\x01T`\xC0\x82\x01R`\x07\x83\x01T`\xE0\x82\x01R`\x08\x83\x01T`\x01`\x01`\xA0\x1B\x03\x81\x16a\x01\0\x83\x01R`\x01`\xA0\x1B\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x81\x16a\x01 \x83\x01R`\t\x84\x01T\x90\x81\x16a\x01@\x83\x01R\x90\x92\x91a\x01`\x84\x01\x91h\x01\0\0\0\0\0\0\0\0\x90\x04`\xFF\x16\x90\x81\x11\x15a\x07\x1AWa\x07\x1Aa?\xF4V[`\x01\x81\x11\x15a\x07+Wa\x07+a?\xF4V[\x81R`\t\x91\x90\x91\x01T`\xFFi\x01\0\0\0\0\0\0\0\0\0\x82\x04\x81\x16` \x84\x01Rj\x01\0\0\0\0\0\0\0\0\0\0\x82\x04\x16\x15\x15`@\x83\x01Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFk\x01\0\0\0\0\0\0\0\0\0\0\0\x90\x91\x04\x16``\x90\x91\x01R\x92\x91PPV[`@\x80Qa\x01\xE0\x81\x01\x82R_\x80\x82R` \x80\x83\x01\x82\x90R\x82\x84\x01\x82\x90R``\x83\x01\x82\x90R`\x80\x83\x01\x82\x90R`\xA0\x83\x01\x82\x90R`\xC0\x83\x01\x82\x90R`\xE0\x83\x01\x82\x90Ra\x01\0\x83\x01\x82\x90Ra\x01 \x83\x01\x82\x90Ra\x01@\x83\x01\x82\x90Ra\x01`\x83\x01\x82\x90Ra\x01\x80\x83\x01\x82\x90Ra\x01\xA0\x83\x01\x82\x90Ra\x01\xC0\x83\x01\x82\x90R\x84\x82R\x81\x90R\x91\x90\x91 a\x06^V[_a\x05A\x81\x83a\x0E\x05V[a\x054a\x08%_\x83a\nnV[a\x0E\xE2V[\x80a\x085_\x84a\nnV[`\x07\x01UPPV[`@\x80Qa\x01\0\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R`\xC0\x81\x01\x82\x90R`\xE0\x81\x01\x82\x90R`@\x80Qa\x01\0\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R`\xC0\x81\x01\x82\x90R`\xE0\x81\x01\x91\x90\x91Ra\x08\xC8_\x87\x87\x87a\x0F\x8CV[\x92P\x92P\x92P\x93P\x93P\x93\x90PV[`@\x80Qa\x01\0\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R`\xC0\x81\x01\x82\x90R`\xE0\x81\x01\x91\x90\x91Ra\x05A_\x83a\x13\xBDV[_a\x05\xCA\x83\x83a\x17\xE6V[_a\x05A\x81\x83a\x18\x8FV[a\tK_\x8C\x8C\x8C\x8C\x8C\x8C\x8C\x8C\x8C\x8C\x8Ca\x19$V[PPPPPPPPPPPV[a\tc_\x83\x83a\x1C\xC2V[PPPPV[`@\x80Qa\x01\0\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R`\xC0\x81\x01\x82\x90R`\xE0\x81\x01\x91\x90\x91Ra\t\xB8_\x88\x88\x88\x88\x88\x88a\x1C\xE5V[\x97\x96PPPPPPPV[_\x81\x81R` \x83\x90R`@\x81 a\t\xD9\x90a\x1E\x05V[_\x81\x81R`\x02\x85\x01` R`@\x90 T\x90\x91P\x80\x15a\n3W`@Q\x7F\xDDp(\xF0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x84\x90R`$\x81\x01\x82\x90R`D\x01[`@Q\x80\x91\x03\x90\xFD[P_\x90\x81R`\x02\x90\x92\x01` R`@\x90\x91 UV[_\x81_\x03a\nWWP_\x91\x90PV[_a\nc`\x01\x84aH&V[\x92\x90\x92\x16\x15\x92\x91PPV[_\x81\x81R` \x83\x90R`@\x81 `\x08\x01T`\x01`\xA0\x1B\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\n\xAFW`@Qb\xA7\xB0+`\xE0\x1B\x81R`\x04\x81\x01\x83\x90R`$\x01a\n*V[P_\x90\x81R` \x91\x90\x91R`@\x90 \x90V[_\x81\x81R` \x83\x90R`@\x81 `\x08\x01T`\x01`\xA0\x1B\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x0B\x02W`@Qb\xA7\xB0+`\xE0\x1B\x81R`\x04\x81\x01\x83\x90R`$\x01a\n*V[_\x82\x81R` \x84\x90R`@\x81 a\x0B\x18\x90a\x1E\x05V[_\x81\x81R`\x01\x86\x01` R`@\x81 T\x91\x92P\x81\x90\x03a\x0BdW`@Q\x7F\xDA\x10\xF6|\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`@Qh\x15S\x94\x92U\x90S\x11Q`\xBA\x1B` \x82\x01R`)\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x81\x03a\x0B\xCDW_\x84\x81R` \x86\x90R`@\x90 `\x08\x01Ta\x0B\xC4\x90`\x01`\xA0\x1B\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16CaH&V[\x92PPPa\x05AV[_\x81\x81R` \x86\x90R`@\x90 `\x08\x01T`\x01`\xA0\x1B\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x0C\x0EW`@Qb\xA7\xB0+`\xE0\x1B\x81R`\x04\x81\x01\x82\x90R`$\x01a\n*V[_\x81\x81R` \x86\x90R`@\x80\x82 `\x08\x90\x81\x01T\x87\x84R\x91\x90\x92 \x90\x91\x01Tg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x01`\xA0\x1B\x92\x83\x90\x04\x81\x16\x92\x90\x91\x04\x16\x80\x82\x11\x15a\x0CcWa\x0CX\x81\x83aH&V[\x94PPPPPa\x05AV[_\x94PPPPPa\x05AV[PP\x92\x91PPV[_a\x0C\x82\x83\x83a\x0E\x05V[\x80\x15a\x05\xCAWP_\x82\x81R` \x84\x90R`@\x90 a\x0C\x9F\x90a\x1E\x99V[`\x01\x14\x93\x92PPPV[_\x80a\x0C\xB5\x84\x84a\nnV[\x90P[`\t\x81\x01Ti\x01\0\0\0\0\0\0\0\0\0\x90\x04`\xFF\x16\x15a\x0C\xF6W\x80T_\x90\x81R`\x01\x85\x01` R`@\x90 Ta\x0C\xEE\x85\x82a\nnV[\x91PPa\x0C\xB8V[T\x93\x92PPPV[_\x83\x81R` \x85\x90R`@\x81 `\x08\x01T`\x01`\xA0\x1B\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\r?W`@Qb\xA7\xB0+`\xE0\x1B\x81R`\x04\x81\x01\x85\x90R`$\x01a\n*V[_a\rJ\x86\x86a\x18\x8FV[\x90Pa\r`g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x85\x16\x82aH9V[\x90P\x82g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81\x10\x15a\r\xB9W`@Q\x7F\x11\xA8\xD4\xD0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x82\x90Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x16`$\x82\x01R`D\x01a\n*V[_\x85\x81R` \x87\x90R`@\x90 a\r\xCF\x90a\x0E\xE2V[a\r\xD9\x86\x86a\t\xC3V[\x90P[\x94\x93PPPPV[_\x80a\r\xF1\x84`\x01aHLV[\x90Pa\r\xFD\x81\x84a\x1E\xDCV[P\x93\x92PPPV[_\x81\x81R` \x83\x90R`@\x81 `\x08\x01T`\x01`\xA0\x1B\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x0EFW`@Qb\xA7\xB0+`\xE0\x1B\x81R`\x04\x81\x01\x83\x90R`$\x01a\n*V[_\x82\x81R` \x84\x90R`@\x81 a\x0E\\\x90a\x1E\x05V[_\x81\x81R`\x01\x86\x01` R`@\x81 T\x91\x92P\x81\x90\x03a\x0E\xA8W`@Q\x7F\xDA\x10\xF6|\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`@Qh\x15S\x94\x92U\x90S\x11Q`\xBA\x1B` \x82\x01R`)\x01`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R\x80Q` \x90\x91\x01 \x14\x15\x94\x93PPPPV[_`\t\x82\x01Th\x01\0\0\0\0\0\0\0\0\x90\x04`\xFF\x16`\x01\x81\x11\x15a\x0F\x08Wa\x0F\x08a?\xF4V[\x14a\x0F^Wa\x0F\x16\x81a\x1FaV[`\t\x82\x01T`@Q\x7F#\xF8@]\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Ra\n*\x92\x91h\x01\0\0\0\0\0\0\0\0\x90\x04`\xFF\x16\x90`\x04\x01aHeV[`\t\x01\x80Tg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFC\x16h\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x90\x91\x16\x17h\x01\0\0\0\0\0\0\0\0\x17\x90UV[`@\x80Qa\x01\0\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R`\xC0\x81\x01\x82\x90R`\xE0\x81\x01\x82\x90R`@\x80Qa\x01\0\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R`\xC0\x81\x01\x82\x90R`\xE0\x81\x01\x91\x90\x91R_\x80\x87\x81R` \x89\x90R`@\x90 `\t\x01Th\x01\0\0\0\0\0\0\0\0\x90\x04`\xFF\x16`\x01\x81\x11\x15a\x10=Wa\x10=a?\xF4V[\x14a\x10\x99W_\x86\x81R` \x88\x90R`@\x90\x81\x90 `\t\x01T\x90Q\x7F#\xF8@]\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Ra\n*\x91\x88\x91h\x01\0\0\0\0\0\0\0\0\x90\x91\x04`\xFF\x16\x90`\x04\x01aHeV[a\x10\xA3\x87\x87a\x0E\x05V[a\x10\xDCW`@Q\x7F\x80\xE0~E\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x87\x90R`$\x01a\n*V[_\x86\x81R` \x88\x90R`@\x81 `@\x80Qa\x01\xE0\x81\x01\x82R\x82T\x81R`\x01\x80\x84\x01T` \x83\x01R`\x02\x84\x01T\x92\x82\x01\x92\x90\x92R`\x03\x83\x01T``\x82\x01R`\x04\x83\x01T`\x80\x82\x01R`\x05\x83\x01T`\xA0\x82\x01R`\x06\x83\x01T`\xC0\x82\x01R`\x07\x83\x01T`\xE0\x82\x01R`\x08\x83\x01T`\x01`\x01`\xA0\x1B\x03\x81\x16a\x01\0\x83\x01R`\x01`\xA0\x1B\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x81\x16a\x01 \x83\x01R`\t\x84\x01T\x90\x81\x16a\x01@\x83\x01R\x90\x92\x91a\x01`\x84\x01\x91h\x01\0\0\0\0\0\0\0\0\x90\x04`\xFF\x16\x90\x81\x11\x15a\x11\xA5Wa\x11\xA5a?\xF4V[`\x01\x81\x11\x15a\x11\xB6Wa\x11\xB6a?\xF4V[\x81R`\t\x91\x90\x91\x01Ti\x01\0\0\0\0\0\0\0\0\0\x81\x04`\xFF\x90\x81\x16` \x84\x01Rj\x01\0\0\0\0\0\0\0\0\0\0\x82\x04\x16\x15\x15`@\x80\x84\x01\x91\x90\x91Rk\x01\0\0\0\0\0\0\0\0\0\0\0\x90\x91\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16``\x90\x92\x01\x91\x90\x91R\x81\x01Q`\x80\x82\x01Q\x91\x92P_\x91a\x12*\x91\x90a\x17\xE6V[\x90P_\x80\x87\x80` \x01\x90Q\x81\x01\x90a\x12B\x91\x90aI\x08V[\x90\x92P\x90Pa\x12r\x89a\x12V\x85`\x01aH9V[``\x87\x01Q`\x80\x88\x01Qa\x12k\x90`\x01aH9V[\x86\x86a \x1FV[PP`@\x80Qa\x01\0\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R`\xC0\x81\x01\x82\x90R`\xE0\x81\x01\x82\x90R_a\x12\xD2\x85_\x01Q\x86` \x01Q\x87`@\x01Q\x8D\x88\x8Aa\x01\x80\x01Qa#=V[\x90Pa\x12\xDD\x81a$EV[_\x81\x81R` \x8E\x90R`@\x90 `\x08\x01T\x90\x93P`\x01`\xA0\x1B\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x13\x13Wa\x13\x10\x8C\x82a\x13\xBDV[\x91P[P`@\x80Qa\x01\0\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R`\xC0\x81\x01\x82\x90R`\xE0\x81\x01\x91\x90\x91R_a\x13s\x86_\x01Q\x8C\x87\x89``\x01Q\x8A`\x80\x01Q\x8Ba\x01\x80\x01Qa#=V[\x90Pa\x13\x7F\x8D\x82a\x13\xBDV[\x91PPa\x13\xAB\x83\x82_\x01Q\x8E_\x01_\x8F\x81R` \x01\x90\x81R` \x01_ a$\xF4\x90\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[\x91\x9B\x90\x9AP\x90\x98P\x96PPPPPPPV[`@\x80Qa\x01\0\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R`\xC0\x81\x01\x82\x90R`\xE0\x81\x01\x82\x90R\x90a\x14\x06\x83a$EV[_\x81\x81R` \x86\x90R`@\x90 `\x08\x01T\x90\x91P`\x01`\xA0\x1B\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x15a\x14eW`@Q\x7F\xBC\xED\xF3\xDE\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x82\x90R`$\x01a\n*V[_\x81\x81R` \x85\x81R`@\x91\x82\x90 \x85Q\x81U\x90\x85\x01Q`\x01\x80\x83\x01\x91\x90\x91U\x91\x85\x01Q`\x02\x82\x01U``\x85\x01Q`\x03\x82\x01U`\x80\x85\x01Q`\x04\x82\x01U`\xA0\x85\x01Q`\x05\x82\x01U`\xC0\x85\x01Q`\x06\x82\x01U`\xE0\x85\x01Q`\x07\x82\x01Ua\x01\0\x85\x01Q`\x08\x82\x01\x80Ta\x01 \x88\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x81\x16`\x01`\xA0\x1B\x02\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x92\x16`\x01`\x01`\xA0\x1B\x03\x90\x94\x16\x93\x90\x93\x17\x17\x90Ua\x01@\x86\x01Q`\t\x83\x01\x80T\x91\x90\x92\x16\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\x82\x16\x81\x17\x83Ua\x01`\x88\x01Q\x88\x95\x90\x93\x92h\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16\x90\x91\x17\x90h\x01\0\0\0\0\0\0\0\0\x90\x84\x90\x81\x11\x15a\x15\x88Wa\x15\x88a?\xF4V[\x02\x17\x90UPa\x01\x80\x82\x81\x01Q`\t\x92\x90\x92\x01\x80Ta\x01\xA0\x85\x01Qa\x01\xC0\x90\x95\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16k\x01\0\0\0\0\0\0\0\0\0\0\0\x02r\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\x19\x95\x15\x15j\x01\0\0\0\0\0\0\0\0\0\0\x02\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\xFF\x90\x96\x16i\x01\0\0\0\0\0\0\0\0\0\x02\x95\x90\x95\x16\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x92\x16\x91\x90\x91\x17\x93\x90\x93\x17\x93\x90\x93\x16\x91\x90\x91\x17\x90\x91U\x83\x01Q\x83Q`@\x80\x86\x01Q` \x80\x88\x01Q`\x80\x89\x01Q\x84Q\x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xF8\x98\x90\x98\x1B\x97\x90\x97\x16\x87\x84\x01R`!\x87\x01\x95\x90\x95R`A\x86\x01\x92\x90\x92R`a\x85\x01\x91\x90\x91R`\x81\x80\x85\x01\x93\x90\x93R\x81Q\x80\x85\x03\x90\x93\x01\x83R`\xA1\x90\x93\x01\x90R\x80Q\x91\x01 _\x90_\x81\x81R`\x01\x87\x01` R`@\x81 T\x91\x92P\x81\x90\x03a\x170W`@Qh\x15S\x94\x92U\x90S\x11Q`\xBA\x1B` \x82\x01R`)\x01`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x81R\x81Q` \x92\x83\x01 _\x85\x81R`\x01\x8A\x01\x90\x93R\x91 Ua\x17wV[`@Qh\x15S\x94\x92U\x90S\x11Q`\xBA\x1B` \x82\x01R`)\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x81\x03a\x17wW_\x82\x81R`\x01\x87\x01` R`@\x90 \x83\x90U[`@\x80Qa\x01\0\x81\x01\x82R\x84\x81R` \x80\x82\x01\x85\x90R\x87Q\x82\x84\x01R`\xE0\x88\x01Q``\x83\x01R_\x86\x81R\x90\x89\x90R\x91\x90\x91 `\x80\x82\x01\x90a\x17\xB7\x90a\x1E\x99V[\x81Ra\x01\x80\x87\x01Q`\xFF\x16` \x82\x01R\x91\x15\x15`@\x83\x01R`\xE0\x90\x95\x01Q\x15\x15``\x90\x91\x01RP\x91\x93\x92PPPV[_`\x02a\x17\xF3\x84\x84aH&V[\x10\x15a\x185W`@Q\x7F\x90)\x85\x94\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x84\x90R`$\x81\x01\x83\x90R`D\x01a\n*V[a\x18?\x83\x83aH&V[`\x02\x03a\x18XWa\x18Q\x83`\x01aH9V[\x90Pa\x05AV[_\x83a\x18e`\x01\x85aH&V[\x18\x90P_a\x18r\x82a%tV[\x90P_\x19\x81\x1B\x80a\x18\x84`\x01\x87aH&V[\x16\x96\x95PPPPPPV[_\x80a\x18\x9B\x84\x84a\n\xC1V[_\x84\x81R` \x86\x90R`@\x90 `\x05\x01T\x90\x91P\x15a\x05\xCAW_\x83\x81R` \x85\x90R`@\x80\x82 `\x05\x81\x01T\x83R\x81\x83 `\t\x90\x81\x01T`\x06\x90\x92\x01T\x84R\x91\x90\x92 \x01Tg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFk\x01\0\0\0\0\0\0\0\0\0\0\0\x92\x83\x90\x04\x81\x16\x92\x90\x91\x04\x16\x80\x82\x10a\x19\x0EW\x80a\x19\x10V[\x81[a\x19\x1A\x90\x84aH9V[\x96\x95PPPPPPV[_\x8B\x81R` \x8D\x90R`@\x90 `\x08\x01T`\x01`\xA0\x1B\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x19eW`@Qb\xA7\xB0+`\xE0\x1B\x81R`\x04\x81\x01\x8C\x90R`$\x01a\n*V[`\x02_\x8C\x81R` \x8E\x90R`@\x90 `\t\x01Ta\x19\x92\x90i\x01\0\0\0\0\0\0\0\0\0\x90\x04`\xFF\x16\x85a\x1E\xDCV[`\x02\x81\x11\x15a\x19\xA3Wa\x19\xA3a?\xF4V[\x14a\x19\xFEW_\x8B\x81R` \x8D\x90R`@\x90\x81\x90 `\t\x01T\x90Q\x7F4\x8A\xEF\xDF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Ri\x01\0\0\0\0\0\0\0\0\0\x90\x91\x04`\xFF\x16`\x04\x82\x01R`$\x01a\n*V[_\x8B\x81R` \x8D\x90R`@\x90 a\x1A\x14\x90a\x1E\x99V[`\x01\x14a\x1AfW_\x8B\x81R` \x8D\x90R`@\x90 a\x1A1\x90a\x1E\x99V[`@Q\x7FkY^P\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\n*\x91\x81R` \x01\x90V[_\x8B\x81R` \x8D\x90R`@\x90 `\x02\x01T\x8B\x82[`\x01\x8F_\x01_\x84\x81R` \x01\x90\x81R` \x01_ `\t\x01`\t\x90T\x90a\x01\0\n\x90\x04`\xFF\x16`\xFF\x16\x11\x15a\x1B\x15W_\x8F_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x01T\x90P\x8F`\x01\x01_\x82\x81R` \x01\x90\x81R` \x01_ T\x92P\x8F_\x01_\x84\x81R` \x01\x90\x81R` \x01_ `\x02\x01T\x82a\x1A\xF7\x91\x90aIhV[a\x1B\x01\x90\x85aH9V[\x93Pa\x1B\r\x86\x83aIhV[\x91PPa\x1AzV[PPa\x1Bm\x8D_\x01_\x8E\x81R` \x01\x90\x81R` \x01_ `\x01\x01T\x8B_\x015\x83\x8B\x8B\x80\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83` \x02\x80\x82\x847_\x92\x01\x91\x90\x91RPa&\xB8\x92PPPV[_\x8B`\x01`\x01`\xA0\x1B\x03\x16c\xB5\x11/\xD2\x8B\x84\x8E_\x015\x8F\x80` \x01\x90a\x1B\x93\x91\x90aI\x7FV[`@Q\x86c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x1B\xB3\x95\x94\x93\x92\x91\x90aI\xE0V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x1B\xCEW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x1B\xF2\x91\x90aJAV[\x90Pa\x1CS\x8E_\x01_\x8F\x81R` \x01\x90\x81R` \x01_ `\x03\x01T\x82\x84`\x01a\x1C\x1B\x91\x90aH9V[\x8A\x8A\x80\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83` \x02\x80\x82\x847_\x92\x01\x91\x90\x91RPa&\xB8\x92PPPV[_\x8D\x81R` \x8F\x90R`@\x90 a\x1Ci\x90a\x0E\xE2V[a\x1Cs\x8E\x8Ea\t\xC3V[PPP_\x99\x8ARPPP` \x97\x90\x97RPP`@\x90\x93 `\t\x01\x80Tr\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\x19\x16r\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\x17\x90UPPPPV[_\x80a\x1C\xD9\x85\x85a\x1C\xD3\x88\x88a\x18\x8FV[\x86a'DV[\x91P\x91P\x93P\x93\x91PPV[`@\x80Qa\x01\0\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R`\xC0\x81\x01\x82\x90R`\xE0\x81\x01\x82\x90R\x90\x80a\x1D3\x8A\x8A\x8A\x8A\x89a'\xDBV[\x91P\x91P_a\x1DC\x83\x8B\x89a-rV[\x90P_a\x1DQ\x83\x83\x8Da.\xCDV[\x90P\x85\x15a\x1D\xEBW_a\x1Dc\x82a/oV[3_\x90\x81R`\x03\x8F\x01` \x90\x81R`@\x80\x83 \x84\x84R\x90\x91R\x90 T\x90\x91P`\xFF\x16\x15a\x1D\xC5W`@Q\x7FZF\xAC:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R3`\x04\x82\x01R`$\x81\x01\x82\x90R`D\x01a\n*V[3_\x90\x81R`\x03\x8E\x01` \x90\x81R`@\x80\x83 \x93\x83R\x92\x90R \x80T`\xFF\x19\x16`\x01\x17\x90U[a\x1D\xF5\x8C\x82a\x13\xBDV[\x9C\x9BPPPPPPPPPPPPV[`\t\x81\x01T\x81T`\x02\x83\x01T`\x01\x84\x01T`\x04\x85\x01T`@\x80Qi\x01\0\0\0\0\0\0\0\0\0\x90\x96\x04`\xF8\x1B\x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16` \x80\x88\x01\x91\x90\x91R`!\x87\x01\x95\x90\x95R`A\x86\x01\x93\x90\x93R`a\x85\x01\x91\x90\x91R`\x81\x80\x85\x01\x91\x90\x91R\x81Q\x80\x85\x03\x90\x91\x01\x81R`\xA1\x90\x93\x01\x90R\x81Q\x91\x01 _\x90a\x05AV[_\x80\x82`\x02\x01T\x83`\x04\x01Ta\x1E\xAF\x91\x90aH&V[\x90P\x80_\x03a\x05AWa\x1E\xC1\x83a\x1FaV[`@Qb\xA7\xB0+`\xE0\x1B\x81R`\x04\x01a\n*\x91\x81R` \x01\x90V[_\x82`\xFF\x16_\x03a\x1E\xEEWP_a\x05AV[\x81`\xFF\x16\x83`\xFF\x16\x11a\x1F\x03WP`\x01a\x05AV[a\x1F\x0E\x82`\x01aHLV[`\xFF\x16\x83`\xFF\x16\x03a\x1F\"WP`\x02a\x05AV[`@Q\x7F\xAE\r\xA5x\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\xFF\x80\x85\x16`\x04\x83\x01R\x83\x16`$\x82\x01R`D\x01a\n*V[`\t\x81\x01T\x81T`\x02\x83\x01T`\x01\x84\x01T`\x04\x85\x01T`\x03\x86\x01T`@\x80Qi\x01\0\0\0\0\0\0\0\0\0\x90\x97\x04`\xF8\x1B\x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16` \x80\x89\x01\x91\x90\x91R`!\x88\x01\x96\x90\x96R`A\x87\x01\x94\x90\x94R`a\x86\x01\x92\x90\x92R`\x81\x80\x86\x01\x91\x90\x91R\x82Q\x80\x86\x03\x90\x91\x01\x81R`\xA1\x85\x01\x83R\x80Q\x90\x84\x01 `\xC1\x85\x01R`\xE1\x80\x85\x01\x91\x90\x91R\x81Q\x80\x85\x03\x90\x91\x01\x81Ra\x01\x01\x90\x93\x01\x90R\x81Q\x91\x01 _\x90a\x05AV[_\x85\x11a nW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x14`$\x82\x01R\x7FPre-size cannot be 0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\n*V[\x85a x\x83a/\xF4V[\x14a \xC5W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1B`$\x82\x01R\x7FPre expansion root mismatch\0\0\0\0\0`D\x82\x01R`d\x01a\n*V[\x84a \xCF\x83a1\x84V[\x14a!BW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`!`$\x82\x01R\x7FPre size does not match expansio`D\x82\x01R\x7Fn\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\n*V[\x82\x85\x10a!\x91W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01\x81\x90R`$\x82\x01R\x7FPre size not less than post size`D\x82\x01R`d\x01a\n*V[_\x85\x90P_\x80a!\xA3\x85_\x87Qa1\xD3V[\x90P[\x85\x83\x10\x15a\"eW_a!\xB9\x84\x88a3GV[\x90P\x84Q\x83\x10a\"\x0BW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x12`$\x82\x01R\x7FIndex out of range\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\n*V[a\"/\x82\x82\x87\x86\x81Q\x81\x10a\"\"Wa\"\"aJXV[` \x02` \x01\x01Qa4.V[\x91P`\x01\x81\x1Ba\"?\x81\x86aH9V[\x94P\x87\x85\x11\x15a\"QWa\"QaJlV[\x83a\"[\x81aJ\x80V[\x94PPPPa!\xA6V[\x86a\"o\x82a/\xF4V[\x14a\"\xE2W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\"`$\x82\x01R\x7FPost expansion root not equal po`D\x82\x01R\x7Fst\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\n*V[\x83Q\x82\x14a#2W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x16`$\x82\x01R\x7FIncomplete proof usage\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\n*V[PPPPPPPPPV[`@\x80Qa\x01\xE0\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R`\xC0\x81\x01\x82\x90R`\xE0\x81\x01\x82\x90Ra\x01\0\x81\x01\x82\x90Ra\x01 \x81\x01\x82\x90Ra\x01@\x81\x01\x82\x90Ra\x01`\x81\x01\x82\x90Ra\x01\x80\x81\x01\x82\x90Ra\x01\xA0\x81\x01\x82\x90Ra\x01\xC0\x81\x01\x91\x90\x91Ra#\xC2\x87\x87\x87\x87\x87a9\x96V[P`@\x80Qa\x01\xE0\x81\x01\x82R\x96\x87R` \x87\x01\x95\x90\x95R\x93\x85\x01\x92\x90\x92R``\x84\x01R`\x80\x83\x01R_`\xA0\x83\x01\x81\x90R`\xC0\x83\x01\x81\x90R`\xE0\x83\x01\x81\x90Ra\x01\0\x83\x01\x81\x90Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFC\x16a\x01 \x84\x01Ra\x01@\x83\x01\x81\x90Ra\x01`\x83\x01\x81\x90R`\xFF\x90\x91\x16a\x01\x80\x83\x01Ra\x01\xA0\x82\x01\x81\x90Ra\x01\xC0\x82\x01R\x90V[a\x01\x80\x81\x01Q\x81Q`@\x80\x84\x01Q` \x80\x86\x01Q`\x80\x87\x01Q``\x88\x01Q\x85Q`\xF8\x98\x90\x98\x1B\x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x88\x85\x01R`!\x88\x01\x96\x90\x96R`A\x87\x01\x93\x90\x93R`a\x86\x01R`\x81\x80\x86\x01\x92\x90\x92R\x82Q\x80\x86\x03\x90\x92\x01\x82R`\xA1\x85\x01\x83R\x81Q\x91\x81\x01\x91\x90\x91 `\xC1\x85\x01R`\xE1\x80\x85\x01\x93\x90\x93R\x81Q\x80\x85\x03\x90\x93\x01\x83Ra\x01\x01\x90\x93\x01\x90R\x80Q\x91\x01 _\x90a\x05AV[`\x05\x83\x01T\x15\x15\x80a%\tWP`\x06\x83\x01T\x15\x15[\x15a%dWa%\x17\x83a\x1FaV[`\x05\x84\x01T`\x06\x85\x01T`@Q\x7F\x8B\x0Eq\xD0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x93\x90\x93R`$\x83\x01\x91\x90\x91R`D\x82\x01R`d\x01a\n*V[`\x05\x83\x01\x91\x90\x91U`\x06\x90\x91\x01UV[_\x81_\x03a%\xC4W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1C`$\x82\x01R\x7FZero has no significant bits\0\0\0\0`D\x82\x01R`d\x01a\n*V[p\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82\x10a%\xEFW`\x80\x91\x82\x1C\x91a%\xEC\x90\x82aH9V[\x90P[h\x01\0\0\0\0\0\0\0\0\x82\x10a&\x12W`@\x91\x82\x1C\x91a&\x0F\x90\x82aH9V[\x90P[d\x01\0\0\0\0\x82\x10a&1W` \x91\x82\x1C\x91a&.\x90\x82aH9V[\x90P[b\x01\0\0\x82\x10a&NW`\x10\x91\x82\x1C\x91a&K\x90\x82aH9V[\x90P[a\x01\0\x82\x10a&jW`\x08\x91\x82\x1C\x91a&g\x90\x82aH9V[\x90P[`\x10\x82\x10a&\x85W`\x04\x91\x82\x1C\x91a&\x82\x90\x82aH9V[\x90P[`\x04\x82\x10a&\xA0W`\x02\x91\x82\x1C\x91a&\x9D\x90\x82aH9V[\x90P[`\x02\x82\x10a&\xB3Wa\x05A`\x01\x82aH9V[\x91\x90PV[_a&\xEC\x82\x84\x86`@Q` \x01a&\xD1\x91\x81R` \x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 a:\x87V[\x90P\x80\x85\x14a'=W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x17`$\x82\x01R\x7FInvalid inclusion proof\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\n*V[PPPPPV[_\x80_a'R\x87\x87\x86a;:V[\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x85\x11a'iW\x84a'sV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF[\x94P\x80\x85\x11\x15a'\xCCWPPP_\x83\x81R` \x85\x90R`@\x90 `\t\x01\x80Tr\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\x19\x16k\x01\0\0\0\0\0\0\0\0\0\0\0g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x85\x16\x02\x17\x90U`\x01\x82a'\xD2V[_\x92P\x90P[\x94P\x94\x92PPPV[`@\x80Q``\x80\x82\x01\x83R_\x80\x83R` \x83\x01R\x91\x81\x01\x91\x90\x91R_\x80a(\x0Ea(\x08` \x89\x01\x89aJ\x98V[\x85a\x1E\xDCV[`\x02\x81\x11\x15a(\x1FWa(\x1Fa?\xF4V[\x03a+LW` \x85\x01Q\x85Q_\x03a(cW`@Q\x7F\xE9k\xC6\x1A\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x85Q``\x88\x015\x14a(\xB1W\x85Q`@Q\x7F[\x17z<\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x91\x90\x91R``\x88\x015`$\x82\x01R`D\x01a\n*V[\x85`@\x01Qa(\xECW`@Q\x7F\xC1i$6\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x85``\x01Qa)'W`@Q\x7F\xB4]\x1C:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a)4`\xA0\x88\x01\x88aI\x7FV[\x90P_\x03a)nW`@Q\x7F\xC9\xCC\xACP\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_a)|`\xA0\x89\x01\x89aI\x7FV[\x81\x01\x90a)\x89\x91\x90aKNV[P\x90\x91P_\x90P\x87`\x80\x01Q` \x01Q`\x02\x81\x11\x15a)\xAAWa)\xAAa?\xF4V[\x03a)\xE1W`@Q\x7FF6^R\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x87`\xA0\x01Q` \x01Q`\x02\x81\x11\x15a)\xFCWa)\xFCa?\xF4V[\x03a*3W`@Q\x7F\x89\x99\x85}\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x86`\x01`\x01`\xA0\x1B\x03\x16c\xC3\x96\x19\xC4a*P\x8A`\x80\x01Qa;\xA7V[`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a*l\x91\x90aK\xB3V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a*\x87W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a*\xAB\x91\x90aJAV[\x90P_\x87`\x01`\x01`\xA0\x1B\x03\x16c\xC3\x96\x19\xC4a*\xCA\x8B`\xA0\x01Qa;\xA7V[`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a*\xE6\x91\x90aK\xB3V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a+\x01W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a+%\x91\x90aJAV[`@\x80Q``\x81\x01\x82R\x93\x84R` \x84\x01\x91\x90\x91R\x82\x01\x92\x90\x92R\x93P\x90\x91Pa-h\x90PV[a+Z\x87\x87``\x015a\x0CwV[a+\x96W`@Q\x7F\xFFm\x9B\xD7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R``\x87\x015`\x04\x82\x01R`$\x01a\n*V[``\x86\x015_\x90\x81R` \x88\x90R`@\x81 \x90a+\xB2\x82a\x1E\x05V[\x90P_`\t\x83\x01Th\x01\0\0\0\0\0\0\0\0\x90\x04`\xFF\x16`\x01\x81\x11\x15a+\xDAWa+\xDAa?\xF4V[\x14a,\x11W`@Q\x7F\x12E\x9F\xFD\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\t\x82\x01Ta,0\x90i\x01\0\0\0\0\0\0\0\0\0\x90\x04`\xFF\x16\x86a\r\xE4V[`\xFF\x16a,@` \x8A\x01\x8AaJ\x98V[`\xFF\x16\x14a,\xA8Wa,U` \x89\x01\x89aJ\x98V[`\t\x83\x01T`@Q\x7F\xAC\x9Ea\x16\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\xFF\x92\x83\x16`\x04\x82\x01Ri\x01\0\0\0\0\0\0\0\0\0\x90\x91\x04\x90\x91\x16`$\x82\x01R`D\x01a\n*V[a,\xB5`\xA0\x89\x01\x89aI\x7FV[\x90P_\x03a,\xEFW`@Q\x7F\xC9\xCC\xACP\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x80\x80\x80\x80a-\x01`\xA0\x8E\x01\x8EaI\x7FV[\x81\x01\x90a-\x0E\x91\x90aL,V[\x94P\x94P\x94P\x94P\x94Pa-,\x87`\x01\x01T\x86\x89`\x02\x01T\x86a&\xB8V[a-@\x87`\x03\x01T\x85\x89`\x04\x01T\x85a&\xB8V[`@Q\x80``\x01`@R\x80\x86\x81R` \x01\x85\x81R` \x01\x82\x81RP\x86\x98P\x98PPPPPPPP[\x95P\x95\x93PPPPV[`@\x80Q_\x80\x82R` \x82\x01\x90\x92R\x81\x90a-\x97\x90a-\x92\x90\x87Qa;\xE1V[a/\xF4V[\x90Pa-\xA2\x83a\nHV[a-\xDBW`@Q\x7F\xEA\xFE\xDB\xFC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x84\x90R`$\x01a\n*V[\x82\x84`@\x015\x14a.%W`@\x80Q\x7F\xDF\xCCb\xBC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\x90\x85\x015`\x04\x82\x01R`$\x81\x01\x84\x90R`D\x01a\n*V[a.A\x84` \x015\x86` \x01Q\x86`@\x015\x88`@\x01Qa&\xB8V[a.N`\x80\x85\x01\x85aI\x7FV[\x90P_\x03a.\x88W`@Q\x7F4*\x07R\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x80a.\x97`\x80\x87\x01\x87aI\x7FV[\x81\x01\x90a.\xA4\x91\x90aL\xC1V[\x90\x92P\x90Pa.\xC2\x83`\x01` \x89\x015a\x12k`@\x8B\x015\x83aH9V[P\x90\x95\x94PPPPPV[`@\x80Qa\x01\xE0\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R`\xC0\x81\x01\x82\x90R`\xE0\x81\x01\x82\x90Ra\x01\0\x81\x01\x82\x90Ra\x01 \x81\x01\x82\x90Ra\x01@\x81\x01\x82\x90Ra\x01`\x81\x01\x82\x90Ra\x01\x80\x81\x01\x82\x90Ra\x01\xA0\x81\x01\x82\x90Ra\x01\xC0\x81\x01\x91\x90\x91Ra\x05\xC7\x84\x84_` \x86\x01\x805\x90`@\x88\x015\x90``\x89\x015\x903\x90a/j\x90\x8BaJ\x98V[a<\x16V[a\x01\x80\x81\x01Q\x81Q`@\x80\x84\x01Q` \x80\x86\x01Q`\x80\x87\x01Q\x84Q`\xF8\x97\x90\x97\x1B\x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x87\x84\x01R`!\x87\x01\x95\x90\x95R`A\x86\x01\x92\x90\x92R`a\x85\x01\x91\x90\x91R`\x81\x80\x85\x01\x93\x90\x93R\x81Q\x80\x85\x03\x90\x93\x01\x83R`\xA1\x90\x93\x01\x90R\x80Q\x91\x01 _\x90a\x05AV[_\x80\x82Q\x11a0EW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x16`$\x82\x01R\x7FEmpty merkle expansion\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\n*V[`@\x82Q\x11\x15a0\x97W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1A`$\x82\x01R\x7FMerkle expansion too large\0\0\0\0\0\0`D\x82\x01R`d\x01a\n*V[_\x80[\x83Q\x81\x10\x15a1}W_\x84\x82\x81Q\x81\x10a0\xB6Wa0\xB6aJXV[` \x02` \x01\x01Q\x90P\x82_\x80\x1B\x03a1 W\x80\x15a1\x1BW\x80\x92P`\x01\x85Qa0\xE0\x91\x90aH&V[\x82\x14a1\x1BW`@Qa1\x02\x90\x84\x90_\x90` \x01\x91\x82R` \x82\x01R`@\x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x92P[a1tV[\x80\x15a1?W`@\x80Q` \x81\x01\x83\x90R\x90\x81\x01\x84\x90R``\x01a1\x02V[`@Qa1[\x90\x84\x90_\x90` \x01\x91\x82R` \x82\x01R`@\x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x92P[P`\x01\x01a0\x9AV[P\x92\x91PPV[_\x80\x80[\x83Q\x81\x10\x15a1}W\x83\x81\x81Q\x81\x10a1\xA3Wa1\xA3aJXV[` \x02` \x01\x01Q_\x80\x1B\x14a1\xCBWa1\xBE\x81`\x02aM\xF7V[a1\xC8\x90\x83aH9V[\x91P[`\x01\x01a1\x88V[``\x81\x83\x10a2$W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x17`$\x82\x01R\x7FStart not less than end\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\n*V[\x83Q\x82\x11\x15a2\x9BW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`!`$\x82\x01R\x7FEnd not less or equal than lengt`D\x82\x01R\x7Fh\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\n*V[_a2\xA6\x84\x84aH&V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a2\xBEWa2\xBEaA\x06V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a2\xE7W\x81` \x01` \x82\x02\x806\x837\x01\x90P[P\x90P\x83[\x83\x81\x10\x15a3>W\x85\x81\x81Q\x81\x10a3\x06Wa3\x06aJXV[` \x02` \x01\x01Q\x82\x86\x83a3\x1B\x91\x90aH&V[\x81Q\x81\x10a3+Wa3+aJXV[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a2\xECV[P\x94\x93PPPPV[_\x81\x83\x10a3\x97W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x17`$\x82\x01R\x7FStart not less than end\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\n*V[_a3\xA3\x83\x85\x18a%tV[\x90P_`\x01a3\xB2\x83\x82aH9V[`\x01\x90\x1Ba3\xC0\x91\x90aH&V[\x90P\x84\x81\x16\x84\x82\x16\x81\x15a3\xD7Wa\x0CX\x82a=\xBDV[\x80\x15a3\xE6Wa\x0CX\x81a%tV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1B`$\x82\x01R\x7FBoth y and z cannot be zero\0\0\0\0\0`D\x82\x01R`d\x01a\n*V[```@\x83\x10a4\x80W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0E`$\x82\x01R\x7FLevel too high\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\n*V[_\x82\x90\x03a4\xD0W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1B`$\x82\x01R\x7FCannot append empty subtree\0\0\0\0\0`D\x82\x01R`d\x01a\n*V[`@\x84Q\x11\x15a5\"W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1A`$\x82\x01R\x7FMerkle expansion too large\0\0\0\0\0\0`D\x82\x01R`d\x01a\n*V[\x83Q_\x03a5\x9FW_a56\x84`\x01aH9V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a5NWa5NaA\x06V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a5wW\x81` \x01` \x82\x02\x806\x837\x01\x90P[P\x90P\x82\x81\x85\x81Q\x81\x10a5\x8DWa5\x8DaJXV[` \x90\x81\x02\x91\x90\x91\x01\x01R\x90Pa\x05\xCAV[\x83Q\x83\x10a6\x15W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`5`$\x82\x01R\x7FLevel greater than highest level`D\x82\x01R\x7F of current expansion\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\n*V[\x81_a6 \x86a1\x84V[\x90P_a6.\x86`\x02aM\xF7V[a68\x90\x83aH9V[\x90P_a6D\x83a%tV[a6M\x83a%tV[\x11a6\x9BW\x87Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a6lWa6laA\x06V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a6\x95W\x81` \x01` \x82\x02\x806\x837\x01\x90P[Pa6\xEBV[\x87Qa6\xA8\x90`\x01aH9V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a6\xC0Wa6\xC0aA\x06V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a6\xE9W\x81` \x01` \x82\x02\x806\x837\x01\x90P[P[\x90P`@\x81Q\x11\x15a7?W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1C`$\x82\x01R\x7FAppend creates oversize tree\0\0\0\0`D\x82\x01R`d\x01a\n*V[_[\x88Q\x81\x10\x15a8\xEBW\x87\x81\x10\x15a7\xE7W\x88\x81\x81Q\x81\x10a7dWa7daJXV[` \x02` \x01\x01Q_\x80\x1B\x14a7\xE2W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\"`$\x82\x01R\x7FAppend above least significant b`D\x82\x01R\x7Fit\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\n*V[a8\xE3V[_\x85\x90\x03a8,W\x88\x81\x81Q\x81\x10a8\x01Wa8\x01aJXV[` \x02` \x01\x01Q\x82\x82\x81Q\x81\x10a8\x1BWa8\x1BaJXV[` \x02` \x01\x01\x81\x81RPPa8\xE3V[\x88\x81\x81Q\x81\x10a8>Wa8>aJXV[` \x02` \x01\x01Q_\x80\x1B\x03a8tW\x84\x82\x82\x81Q\x81\x10a8aWa8aaJXV[` \x90\x81\x02\x91\x90\x91\x01\x01R_\x94Pa8\xE3V[_\x80\x1B\x82\x82\x81Q\x81\x10a8\x89Wa8\x89aJXV[` \x02` \x01\x01\x81\x81RPP\x88\x81\x81Q\x81\x10a8\xA7Wa8\xA7aJXV[` \x02` \x01\x01Q\x85`@Q` \x01a8\xCA\x92\x91\x90\x91\x82R` \x82\x01R`@\x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x94P[`\x01\x01a7AV[P\x83\x15a9\x1FW\x83\x81`\x01\x83Qa9\x02\x91\x90aH&V[\x81Q\x81\x10a9\x12Wa9\x12aJXV[` \x02` \x01\x01\x81\x81RPP[\x80`\x01\x82Qa9.\x91\x90aH&V[\x81Q\x81\x10a9>Wa9>aJXV[` \x02` \x01\x01Q_\x80\x1B\x03a\t\xB8W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0F`$\x82\x01R\x7FLast entry zero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\n*V[_\x85\x90\x03a9\xD0W`@Q\x7F\x8Dy\xDB\xBC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x82\x81\x11a:\x13W`@Q\x7F `\xFA\xF4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x84\x90R`$\x81\x01\x82\x90R`D\x01a\n*V[_\x84\x90\x03a:MW`@Q\x7F\x83\xC6\x83\xE4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x82\x90\x03a'=W`@Q\x7F\\\xB6\xE5\xBB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x82Q_\x90a\x01\0\x81\x11\x15a:\xD2W`@Q\x7F\xFD\xAC3\x1E\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x82\x90Ra\x01\0`$\x82\x01R`D\x01a\n*V[\x82_[\x82\x81\x10\x15a;0W_\x87\x82\x81Q\x81\x10a:\xF0Wa:\xF0aJXV[` \x02` \x01\x01Q\x90P\x81`\x01\x90\x1B\x87\x16_\x03a;\x19W\x82_R\x80` R`@_ \x92Pa;'V[\x80_R\x82` R`@_ \x92P[P`\x01\x01a:\xD5V[P\x95\x94PPPPPV[_\x82\x81R` \x84\x90R`@\x81 `\t\x01Tk\x01\0\0\0\0\0\0\0\0\0\0\0\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82\x81\x10a\x05\xC7W`@Q\x7F\xD1\xF5\x92\x81\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x82\x90R`$\x81\x01\x84\x90R`D\x01a\n*V[a;\xAFa>(V[`@Q\x80`@\x01`@R\x80\x83_\x01Q\x81R` \x01\x83` \x01Q`\x02\x81\x11\x15a;\xD9Wa;\xD9a?\xF4V[\x90R\x92\x91PPV[``a\x05\xCA\x83_\x84`@Q` \x01a;\xFB\x91\x81R` \x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 a4.V[`@\x80Qa\x01\xE0\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R`\xC0\x81\x01\x82\x90R`\xE0\x81\x01\x82\x90Ra\x01\0\x81\x01\x82\x90Ra\x01 \x81\x01\x82\x90Ra\x01@\x81\x01\x82\x90Ra\x01`\x81\x01\x82\x90Ra\x01\x80\x81\x01\x82\x90Ra\x01\xA0\x81\x01\x82\x90Ra\x01\xC0\x81\x01\x91\x90\x91R`\x01`\x01`\xA0\x1B\x03\x83\x16a<\xCEW`@Q\x7F\xF2\x89\xE6W\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x84\x90\x03a=\x08W`@Q\x7Fi2\xBC\xFD\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a=\x15\x89\x89\x89\x89\x89a9\x96V[`@Q\x80a\x01\xE0\x01`@R\x80\x8A\x81R` \x01\x89\x81R` \x01\x88\x81R` \x01\x87\x81R` \x01\x86\x81R` \x01_\x80\x1B\x81R` \x01_\x80\x1B\x81R` \x01\x85\x81R` \x01\x84`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01Cg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_`\x01\x81\x11\x15a=\x96Wa=\x96a?\xF4V[\x81R`\xFF\x84\x16` \x82\x01R_`@\x82\x01\x81\x90R``\x90\x91\x01R\x90P\x98\x97PPPPPPPPV[_\x80\x82\x11a>\rW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1C`$\x82\x01R\x7FZero has no significant bits\0\0\0\0`D\x82\x01R`d\x01a\n*V[_\x82\x80a>\x1B`\x01\x82aH&V[\x16\x18\x90Pa\x05\xCA\x81a%tV[`@Q\x80`@\x01`@R\x80a>;a>GV[\x81R` \x01_[\x90R\x90V[`@Q\x80`@\x01`@R\x80a>Za>cV[\x81R` \x01a>B[`@Q\x80`@\x01`@R\x80`\x02\x90` \x82\x02\x806\x837P\x91\x92\x91PPV[_` \x82\x84\x03\x12\x15a>\x91W_\x80\xFD[P5\x91\x90PV[\x805`\xFF\x81\x16\x81\x14a&\xB3W_\x80\xFD[_\x80`@\x83\x85\x03\x12\x15a>\xB9W_\x80\xFD[\x825\x91Pa>\xC9` \x84\x01a>\x98V[\x90P\x92P\x92\x90PV[_\x80`@\x83\x85\x03\x12\x15a>\xE3W_\x80\xFD[PP\x805\x92` \x90\x91\x015\x91PV[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x054W_\x80\xFD[\x805a&\xB3\x81a>\xF2V[\x805\x80\x15\x15\x81\x14a&\xB3W_\x80\xFD[_\x80_``\x84\x86\x03\x12\x15a?2W_\x80\xFD[\x835a?=\x81a>\xF2V[\x92P` \x84\x015\x91Pa?R`@\x85\x01a?\x11V[\x90P\x92P\x92P\x92V[\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a&\xB3W_\x80\xFD[_\x80_``\x84\x86\x03\x12\x15a?\x84W_\x80\xFD[\x835\x92Pa?\x94` \x85\x01a?[V[\x91Pa?R`@\x85\x01a?[V[_\x80`@\x83\x85\x03\x12\x15a?\xB3W_\x80\xFD[\x825a?\xBE\x81a>\xF2V[\x94` \x93\x90\x93\x015\x93PPPV[_\x80`@\x83\x85\x03\x12\x15a?\xDDW_\x80\xFD[a?\xE6\x83a>\x98V[\x91Pa>\xC9` \x84\x01a>\x98V[cNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[`\x02\x81\x10a@\x18Wa@\x18a?\xF4V[\x90RV[_a\x01\xE0\x82\x01\x90P\x82Q\x82R` \x83\x01Q` \x83\x01R`@\x83\x01Q`@\x83\x01R``\x83\x01Q``\x83\x01R`\x80\x83\x01Q`\x80\x83\x01R`\xA0\x83\x01Q`\xA0\x83\x01R`\xC0\x83\x01Q`\xC0\x83\x01R`\xE0\x83\x01Q`\xE0\x83\x01Ra\x01\0\x80\x84\x01Qa@\x89\x82\x85\x01\x82`\x01`\x01`\xA0\x1B\x03\x16\x90RV[PPa\x01 \x83\x81\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x84\x83\x01RPPa\x01@\x83\x81\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x84\x83\x01RPPa\x01`\x80\x84\x01Qa@\xCE\x82\x85\x01\x82a@\x08V[PPa\x01\x80\x83\x81\x01Q`\xFF\x16\x90\x83\x01Ra\x01\xA0\x80\x84\x01Q\x15\x15\x90\x83\x01Ra\x01\xC0\x80\x84\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x82\x85\x01Ra\x0CoV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@Qa\x01\xE0\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15aA>WaA>aA\x06V[`@R\x90V[`@Q``\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15aA>WaA>aA\x06V[`@\x80Q\x90\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15aA>WaA>aA\x06V[`@Q`\xC0\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15aA>WaA>aA\x06V[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15aA\xD6WaA\xD6aA\x06V[`@R\x91\x90PV[_\x80_``\x84\x86\x03\x12\x15aA\xF0W_\x80\xFD[\x835\x92P` \x80\x85\x015\x92P`@\x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15aB\x16W_\x80\xFD[\x81\x87\x01\x91P\x87`\x1F\x83\x01\x12aB)W_\x80\xFD[\x815\x81\x81\x11\x15aB;WaB;aA\x06V[aBM\x84`\x1F\x19`\x1F\x84\x01\x16\x01aA\xADV[\x91P\x80\x82R\x88\x84\x82\x85\x01\x01\x11\x15aBbW_\x80\xFD[\x80\x84\x84\x01\x85\x84\x017_\x84\x82\x84\x01\x01RP\x80\x93PPPP\x92P\x92P\x92V[\x83\x81Ra\x02 \x81\x01aB\xE4` \x83\x01\x85\x80Q\x82R` \x81\x01Q` \x83\x01R`@\x81\x01Q`@\x83\x01R``\x81\x01Q``\x83\x01R`\x80\x81\x01Q`\x80\x83\x01R`\xFF`\xA0\x82\x01Q\x16`\xA0\x83\x01R`\xC0\x81\x01Q\x15\x15`\xC0\x83\x01R`\xE0\x81\x01Q\x15\x15`\xE0\x83\x01RPPV[\x82Qa\x01 \x83\x01R` \x83\x01Qa\x01@\x83\x01R`@\x83\x01Qa\x01`\x83\x01R``\x83\x01Qa\x01\x80\x83\x01R`\x80\x83\x01Qa\x01\xA0\x83\x01R`\xA0\x83\x01Q`\xFF\x16a\x01\xC0\x83\x01R`\xC0\x83\x01Q\x15\x15a\x01\xE0\x83\x01R`\xE0\x83\x01Q\x15\x15a\x02\0\x83\x01Ra\r\xDCV[\x805`\x02\x81\x10a&\xB3W_\x80\xFD[_a\x01\xE0\x82\x84\x03\x12\x15aCdW_\x80\xFD[aClaA\x1AV[\x825\x81R` \x83\x015` \x82\x01R`@\x83\x015`@\x82\x01R``\x83\x015``\x82\x01R`\x80\x83\x015`\x80\x82\x01R`\xA0\x83\x015`\xA0\x82\x01R`\xC0\x83\x015`\xC0\x82\x01R`\xE0\x83\x015`\xE0\x82\x01Ra\x01\0aC\xC4\x81\x85\x01a?\x06V[\x90\x82\x01Ra\x01 aC\xD6\x84\x82\x01a?[V[\x90\x82\x01Ra\x01@aC\xE8\x84\x82\x01a?[V[\x90\x82\x01Ra\x01`aC\xFA\x84\x82\x01aCEV[\x90\x82\x01Ra\x01\x80aD\x0C\x84\x82\x01a>\x98V[\x90\x82\x01Ra\x01\xA0aD\x1E\x84\x82\x01a?\x11V[\x90\x82\x01Ra\x01\xC0aD0\x84\x82\x01a?[V[\x90\x82\x01R\x93\x92PPPV[a\x01\0\x81\x01a\x05A\x82\x84\x80Q\x82R` \x81\x01Q` \x83\x01R`@\x81\x01Q`@\x83\x01R``\x81\x01Q``\x83\x01R`\x80\x81\x01Q`\x80\x83\x01R`\xFF`\xA0\x82\x01Q\x16`\xA0\x83\x01R`\xC0\x81\x01Q\x15\x15`\xC0\x83\x01R`\xE0\x81\x01Q\x15\x15`\xE0\x83\x01RPPV[_`@\x82\x84\x03\x12\x15aD\xAAW_\x80\xFD[P\x91\x90PV[_``\x82\x84\x03\x12\x15aD\xC0W_\x80\xFD[aD\xC8aADV[\x90P\x815\x81R` \x82\x015aD\xDC\x81a>\xF2V[\x80` \x83\x01RP`@\x82\x015`@\x82\x01R\x92\x91PPV[_\x80\x83`\x1F\x84\x01\x12aE\x03W_\x80\xFD[P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aE\x1AW_\x80\xFD[` \x83\x01\x91P\x83` \x82`\x05\x1B\x85\x01\x01\x11\x15aE4W_\x80\xFD[\x92P\x92\x90PV[_\x80_\x80_\x80_\x80_\x80_a\x01`\x8C\x8E\x03\x12\x15aEVW_\x80\xFD[\x8B5\x9APaEf` \x8D\x01a?\x06V[\x99Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80`@\x8E\x015\x11\x15aE\x81W_\x80\xFD[aE\x91\x8E`@\x8F\x015\x8F\x01aD\x9AV[\x99PaE\xA0\x8E``\x8F\x01aD\xB0V[\x98P\x80`\xC0\x8E\x015\x11\x15aE\xB2W_\x80\xFD[aE\xC2\x8E`\xC0\x8F\x015\x8F\x01aD\xF3V[\x90\x98P\x96P`\xE0\x8D\x015\x81\x10\x15aE\xD7W_\x80\xFD[PaE\xE8\x8D`\xE0\x8E\x015\x8E\x01aD\xF3V[\x90\x95P\x93PaE\xFAa\x01\0\x8D\x01a>\x98V[\x92Pa\x01 \x8C\x015\x91Pa\x01@\x8C\x015\x90P\x92\x95\x98\x9BP\x92\x95\x98\x9B\x90\x93\x96\x99PV[_\x82`\x1F\x83\x01\x12aF+W_\x80\xFD[aF3aAgV[\x80`@\x84\x01\x85\x81\x11\x15aFDW_\x80\xFD[\x84[\x81\x81\x10\x15a.\xC2WaFW\x81a?[V[\x84R` \x93\x84\x01\x93\x01aFFV[\x805`\x03\x81\x10a&\xB3W_\x80\xFD[_\x81\x83\x03`\xC0\x81\x12\x15aF\x84W_\x80\xFD[aF\x8CaADV[\x91P`\x80\x81\x12\x15aF\x9BW_\x80\xFD[PaF\xA4aAgV[\x83`\x1F\x84\x01\x12aF\xB2W_\x80\xFD[aF\xBAaAgV[\x80`@\x85\x01\x86\x81\x11\x15aF\xCBW_\x80\xFD[\x85[\x81\x81\x10\x15aF\xE5W\x805\x84R` \x93\x84\x01\x93\x01aF\xCDV[P\x81\x84RaF\xF3\x87\x82aF\x1CV[` \x85\x01RPPP\x81RaG\t`\x80\x83\x01aFeV[` \x82\x01R`\xA0\x82\x015`@\x82\x01R\x92\x91PPV[_\x80_\x80_\x80\x86\x88\x03a\x02\xA0\x81\x12\x15aG5W_\x80\xFD[\x875g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aGKW_\x80\xFD[\x88\x01`\xC0\x81\x8B\x03\x12\x15aG\\W_\x80\xFD[\x96Pa\x02\0`\x1F\x19\x82\x01\x12\x15aGpW_\x80\xFD[PaGyaA\x8AV[` \x88\x015\x81R`@\x88\x015` \x82\x01RaG\x96``\x89\x01a?\x11V[`@\x82\x01RaG\xA7`\x80\x89\x01a?\x11V[``\x82\x01RaG\xB9\x89`\xA0\x8A\x01aFsV[`\x80\x82\x01RaG\xCC\x89a\x01`\x8A\x01aFsV[`\xA0\x82\x01R\x94PaG\xE0a\x02 \x88\x01a?\x06V[\x93Pa\x02@\x87\x015\x92PaG\xF7a\x02`\x88\x01a>\x98V[\x91PaH\x06a\x02\x80\x88\x01a?\x11V[\x90P\x92\x95P\x92\x95P\x92\x95V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[\x81\x81\x03\x81\x81\x11\x15a\x05AWa\x05AaH\x12V[\x80\x82\x01\x80\x82\x11\x15a\x05AWa\x05AaH\x12V[`\xFF\x81\x81\x16\x83\x82\x16\x01\x90\x81\x11\x15a\x05AWa\x05AaH\x12V[\x82\x81R`@\x81\x01a\x05\xCA` \x83\x01\x84a@\x08V[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15aH\x92WaH\x92aA\x06V[P`\x05\x1B` \x01\x90V[_\x82`\x1F\x83\x01\x12aH\xABW_\x80\xFD[\x81Q` aH\xC0aH\xBB\x83aHyV[aA\xADV[\x80\x83\x82R` \x82\x01\x91P` \x84`\x05\x1B\x87\x01\x01\x93P\x86\x84\x11\x15aH\xE1W_\x80\xFD[` \x86\x01[\x84\x81\x10\x15aH\xFDW\x80Q\x83R\x91\x83\x01\x91\x83\x01aH\xE6V[P\x96\x95PPPPPPV[_\x80`@\x83\x85\x03\x12\x15aI\x19W_\x80\xFD[\x82Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15aI0W_\x80\xFD[aI<\x86\x83\x87\x01aH\x9CV[\x93P` \x85\x01Q\x91P\x80\x82\x11\x15aIQW_\x80\xFD[PaI^\x85\x82\x86\x01aH\x9CV[\x91PP\x92P\x92\x90PV[\x80\x82\x02\x81\x15\x82\x82\x04\x84\x14\x17a\x05AWa\x05AaH\x12V[_\x80\x835\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE1\x846\x03\x01\x81\x12aI\xB2W_\x80\xFD[\x83\x01\x805\x91Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15aI\xCCW_\x80\xFD[` \x01\x91P6\x81\x90\x03\x82\x13\x15aE4W_\x80\xFD[\x85Q\x81R`\x01`\x01`\xA0\x1B\x03` \x87\x01Q\x16` \x82\x01R`@\x86\x01Q`@\x82\x01R\x84``\x82\x01R\x83`\x80\x82\x01R`\xC0`\xA0\x82\x01R\x81`\xC0\x82\x01R\x81\x83`\xE0\x83\x017_\x81\x83\x01`\xE0\x90\x81\x01\x91\x90\x91R`\x1F\x90\x92\x01`\x1F\x19\x16\x01\x01\x94\x93PPPPV[_` \x82\x84\x03\x12\x15aJQW_\x80\xFD[PQ\x91\x90PV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\x01`\x04R`$_\xFD[__\x19\x82\x03aJ\x91WaJ\x91aH\x12V[P`\x01\x01\x90V[_` \x82\x84\x03\x12\x15aJ\xA8W_\x80\xFD[a\x05\xCA\x82a>\x98V[_\x82`\x1F\x83\x01\x12aJ\xC0W_\x80\xFD[\x815` aJ\xD0aH\xBB\x83aHyV[\x80\x83\x82R` \x82\x01\x91P` \x84`\x05\x1B\x87\x01\x01\x93P\x86\x84\x11\x15aJ\xF1W_\x80\xFD[` \x86\x01[\x84\x81\x10\x15aH\xFDW\x805\x83R\x91\x83\x01\x91\x83\x01aJ\xF6V[_a\x01\0\x82\x84\x03\x12\x15aK\x1EW_\x80\xFD[aK&aADV[\x90PaK2\x83\x83aFsV[\x81R`\xC0\x82\x015` \x82\x01R`\xE0\x82\x015`@\x82\x01R\x92\x91PPV[_\x80_a\x02 \x84\x86\x03\x12\x15aKaW_\x80\xFD[\x835g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aKwW_\x80\xFD[aK\x83\x86\x82\x87\x01aJ\xB1V[\x93PPaK\x93\x85` \x86\x01aK\rV[\x91Pa?R\x85a\x01 \x86\x01aK\rV[`\x03\x81\x10a@\x18Wa@\x18a?\xF4V[\x81Q\x80Q`\xA0\x83\x01\x91\x90\x83_[`\x02\x81\x10\x15aK\xDFW\x82Q\x82R` \x92\x83\x01\x92\x90\x91\x01\x90`\x01\x01aK\xC0V[PPP` \x90\x81\x01Q\x90`@\x84\x01_[`\x02\x81\x10\x15aL\x16W\x83Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82R\x92\x82\x01\x92\x90\x82\x01\x90`\x01\x01aK\xEFV[PPPP` \x83\x01Qa1}`\x80\x84\x01\x82aK\xA3V[_\x80_\x80_`\xA0\x86\x88\x03\x12\x15aL@W_\x80\xFD[\x855\x94P` \x86\x015\x93P`@\x86\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15aLeW_\x80\xFD[aLq\x89\x83\x8A\x01aJ\xB1V[\x94P``\x88\x015\x91P\x80\x82\x11\x15aL\x86W_\x80\xFD[aL\x92\x89\x83\x8A\x01aJ\xB1V[\x93P`\x80\x88\x015\x91P\x80\x82\x11\x15aL\xA7W_\x80\xFD[PaL\xB4\x88\x82\x89\x01aJ\xB1V[\x91PP\x92\x95P\x92\x95\x90\x93PV[_\x80`@\x83\x85\x03\x12\x15aL\xD2W_\x80\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15aL\xE9W_\x80\xFD[aL\xF5\x86\x83\x87\x01aJ\xB1V[\x93P` \x85\x015\x91P\x80\x82\x11\x15aM\nW_\x80\xFD[PaI^\x85\x82\x86\x01aJ\xB1V[`\x01\x81\x81[\x80\x85\x11\x15aMQW\x81_\x19\x04\x82\x11\x15aM7WaM7aH\x12V[\x80\x85\x16\x15aMDW\x91\x81\x02\x91[\x93\x84\x1C\x93\x90\x80\x02\x90aM\x1CV[P\x92P\x92\x90PV[_\x82aMgWP`\x01a\x05AV[\x81aMsWP_a\x05AV[\x81`\x01\x81\x14aM\x89W`\x02\x81\x14aM\x93WaM\xAFV[`\x01\x91PPa\x05AV[`\xFF\x84\x11\x15aM\xA4WaM\xA4aH\x12V[PP`\x01\x82\x1Ba\x05AV[P` \x83\x10a\x013\x83\x10\x16`N\x84\x10`\x0B\x84\x10\x16\x17\x15aM\xD2WP\x81\x81\na\x05AV[aM\xDC\x83\x83aM\x17V[\x80_\x19\x04\x82\x11\x15aM\xEFWaM\xEFaH\x12V[\x02\x93\x92PPPV[_a\x05\xCA\x83\x83aMYV\xFE\xA2dipfsX\"\x12 \x80nR^C\x03R\xE1\xBE\xDAR\x83\x01\x04\xCAZ\xE6JP!\x95\xF0\xD7z\xE8\xF7\xFB\xEC\xA7\xE8\xAC+dsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f80fd5b50600436106101bb575f3560e01c80638fb7d65e116100f3578063c8bc4e4311610093578063e4cfe2aa1161006e578063e4cfe2aa146104de578063e7faf63e146104f1578063edaab54a14610504578063f9a239f514610517575f80fd5b8063c8bc4e4314610489578063cd2860ac146104ab578063cd8fc677146104cb575f80fd5b8063a50c2361116100ce578063a50c236114610444578063b292a8ee14610457578063c40e425e14610476578063c89a166c14610457575f80fd5b80638fb7d65e14610379578063908517e91461038c57806395bc26731461039f575f80fd5b80634c478bb71161015e578063610df39e11610139578063610df39e146102e9578063655b42f3146102fc5780637e4098d7146103345780638eaa6ac014610359575f80fd5b80634c478bb7146102a457806354b64151146102c35780635a48e0f4146102d6575f80fd5b806338a699a41161019957806338a699a41461020f5780633e35f5e8146102225780634666e7bc146102435780634c1f245c14610262575f80fd5b806305718ffe146101bf57806306388dd6146101d45780630e1ed1f5146101fc575b5f80fd5b6101d26101cd366004613e81565b61052a565b005b6101e76101e2366004613e81565b610537565b60405190151581526020015b60405180910390f35b6101d261020a366004613ea8565b610547565b6101e761021d366004613e81565b610571565b610235610230366004613e81565b610599565b6040519081526020016101f3565b6101d2610251366004613ed2565b5f9182526001602052604090912055565b6101d2610270366004613f20565b6001600160a01b03929092165f90815260036020908152604080832093835292905220805460ff1916911515919091179055565b6102356102b2366004613e81565b5f9081526001602052604090205490565b6101e76102d1366004613e81565b6105a4565b6102356102e4366004613e81565b6105af565b6102356102f7366004613f72565b6105ba565b6101e761030a366004613fa2565b6001600160a01b03919091165f908152600360209081526040808320938352929052205460ff1690565b610347610342366004613fcc565b6105d1565b60405160ff90911681526020016101f3565b61036c610367366004613e81565b6105dc565b6040516101f3919061401c565b61036c610387366004613e81565b610786565b6101e761039a366004613e81565b61080d565b6101d26103ad366004613e81565b5f90815260208190526040812081815560018101829055600281018290556003810182905560048101829055600581018290556006810182905560078101919091556008810180547fffffffff0000000000000000000000000000000000000000000000000000000016905560090180547fffffffffffffffffffffffffff00000000000000000000000000000000000000169055565b6101d2610452366004613e81565b610818565b610235610465366004613e81565b5f9081526002602052604090205490565b6101d2610484366004613ed2565b61082a565b61049c6104973660046141de565b61083d565b6040516101f39392919061427f565b6104be6104b9366004614353565b6108d7565b6040516101f3919061443b565b6102356104d9366004613ed2565b610921565b6102356104ec366004613e81565b61092c565b6101d26104ff36600461453b565b610937565b6101d2610512366004613ed2565b610958565b6104be61052536600461471e565b610969565b6105345f826109c3565b50565b5f61054182610a48565b92915050565b806105525f84610a6e565b60090160096101000a81548160ff021916908360ff1602179055505050565b5f61054161057f8284610a6e565b60080154600160a01b900467ffffffffffffffff16151590565b5f6105418183610ac1565b5f6105418183610c77565b5f6105418183610ca9565b5f6105c781858585610cfe565b90505b9392505050565b5f6105ca8383610de4565b604080516101e0810182525f80825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810182905261018081018290526101a081018290526101c081019190915261065e5f83610a6e565b604080516101e0810182528254815260018084015460208301526002840154928201929092526003830154606082015260048301546080820152600583015460a0820152600683015460c0820152600783015460e082015260088301546001600160a01b038116610100830152600160a01b900467ffffffffffffffff908116610120830152600984015490811661014083015290929161016084019168010000000000000000900460ff169081111561071a5761071a613ff4565b600181111561072b5761072b613ff4565b81526009919091015460ff69010000000000000000008204811660208401526a01000000000000000000008204161515604083015267ffffffffffffffff6b0100000000000000000000009091041660609091015292915050565b604080516101e0810182525f8082526020808301829052828401829052606083018290526080830182905260a0830182905260c0830182905260e08301829052610100830182905261012083018290526101408301829052610160830182905261018083018290526101a083018290526101c083018290528482528190529190912061065e565b5f6105418183610e05565b6105346108255f83610a6e565b610ee2565b806108355f84610a6e565b600701555050565b60408051610100810182525f80825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905260408051610100810182525f80825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101919091526108c85f878787610f8c565b92509250925093509350939050565b60408051610100810182525f80825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101919091526105415f836113bd565b5f6105ca83836117e6565b5f610541818361188f565b61094b5f8c8c8c8c8c8c8c8c8c8c8c611924565b5050505050505050505050565b6109635f8383611cc2565b50505050565b60408051610100810182525f80825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101919091526109b85f888888888888611ce5565b979650505050505050565b5f8181526020839052604081206109d990611e05565b5f8181526002850160205260409020549091508015610a33576040517fdd7028f000000000000000000000000000000000000000000000000000000000815260048101849052602481018290526044015b60405180910390fd5b505f9081526002909201602052604090912055565b5f815f03610a5757505f919050565b5f610a63600184614826565b929092161592915050565b5f81815260208390526040812060080154600160a01b900467ffffffffffffffff16610aaf5760405162a7b02b60e01b815260048101839052602401610a2a565b505f9081526020919091526040902090565b5f81815260208390526040812060080154600160a01b900467ffffffffffffffff16610b025760405162a7b02b60e01b815260048101839052602401610a2a565b5f828152602084905260408120610b1890611e05565b5f818152600186016020526040812054919250819003610b64576040517fda10f67c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040516815539492559053115160ba1b6020820152602901604051602081830303815290604052805190602001208103610bcd575f84815260208690526040902060080154610bc490600160a01b900467ffffffffffffffff1643614826565b92505050610541565b5f81815260208690526040902060080154600160a01b900467ffffffffffffffff16610c0e5760405162a7b02b60e01b815260048101829052602401610a2a565b5f81815260208690526040808220600890810154878452919092209091015467ffffffffffffffff600160a01b928390048116929091041680821115610c6357610c588183614826565b945050505050610541565b5f945050505050610541565b505092915050565b5f610c828383610e05565b80156105ca57505f828152602084905260409020610c9f90611e99565b6001149392505050565b5f80610cb58484610a6e565b90505b60098101546901000000000000000000900460ff1615610cf65780545f908152600185016020526040902054610cee8582610a6e565b915050610cb8565b549392505050565b5f83815260208590526040812060080154600160a01b900467ffffffffffffffff16610d3f5760405162a7b02b60e01b815260048101859052602401610a2a565b5f610d4a868661188f565b9050610d6067ffffffffffffffff851682614839565b90508267ffffffffffffffff16811015610db9576040517f11a8d4d00000000000000000000000000000000000000000000000000000000081526004810182905267ffffffffffffffff84166024820152604401610a2a565b5f858152602087905260409020610dcf90610ee2565b610dd986866109c3565b90505b949350505050565b5f80610df184600161484c565b9050610dfd8184611edc565b509392505050565b5f81815260208390526040812060080154600160a01b900467ffffffffffffffff16610e465760405162a7b02b60e01b815260048101839052602401610a2a565b5f828152602084905260408120610e5c90611e05565b5f818152600186016020526040812054919250819003610ea8576040517fda10f67c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040516815539492559053115160ba1b602082015260290160408051601f1981840301815291905280516020909101201415949350505050565b5f600982015468010000000000000000900460ff166001811115610f0857610f08613ff4565b14610f5e57610f1681611f61565b60098201546040517f23f8405d000000000000000000000000000000000000000000000000000000008152610a2a929168010000000000000000900460ff1690600401614865565b600901805467ffffffffffffffff431668ffffffffffffffffff199091161768010000000000000000179055565b60408051610100810182525f80825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905260408051610100810182525f80825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101919091525f808781526020899052604090206009015468010000000000000000900460ff16600181111561103d5761103d613ff4565b14611099575f86815260208890526040908190206009015490517f23f8405d000000000000000000000000000000000000000000000000000000008152610a2a9188916801000000000000000090910460ff1690600401614865565b6110a38787610e05565b6110dc576040517f80e07e4500000000000000000000000000000000000000000000000000000000815260048101879052602401610a2a565b5f868152602088905260408120604080516101e0810182528254815260018084015460208301526002840154928201929092526003830154606082015260048301546080820152600583015460a0820152600683015460c0820152600783015460e082015260088301546001600160a01b038116610100830152600160a01b900467ffffffffffffffff908116610120830152600984015490811661014083015290929161016084019168010000000000000000900460ff16908111156111a5576111a5613ff4565b60018111156111b6576111b6613ff4565b8152600991909101546901000000000000000000810460ff90811660208401526a010000000000000000000082041615156040808401919091526b01000000000000000000000090910467ffffffffffffffff1660609092019190915281015160808201519192505f9161122a91906117e6565b90505f80878060200190518101906112429190614908565b909250905061127289611256856001614839565b6060870151608088015161126b906001614839565b868661201f565b505060408051610100810182525f80825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290525f6112d2855f0151866020015187604001518d888a610180015161233d565b90506112dd81612445565b5f81815260208e90526040902060080154909350600160a01b900467ffffffffffffffff16611313576113108c826113bd565b91505b5060408051610100810182525f80825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101919091525f611373865f01518c8789606001518a608001518b610180015161233d565b905061137f8d826113bd565b9150506113ab83825f01518e5f015f8f81526020019081526020015f206124f49092919063ffffffff16565b919b909a509098509650505050505050565b60408051610100810182525f80825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290529061140683612445565b5f81815260208690526040902060080154909150600160a01b900467ffffffffffffffff1615611465576040517fbcedf3de00000000000000000000000000000000000000000000000000000000815260048101829052602401610a2a565b5f81815260208581526040918290208551815590850151600180830191909155918501516002820155606085015160038201556080850151600482015560a0850151600582015560c0850151600682015560e0850151600782015561010085015160088201805461012088015167ffffffffffffffff908116600160a01b027fffffffff000000000000000000000000000000000000000000000000000000009092166001600160a01b0390941693909317179055610140860151600983018054919092167fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000821681178355610160880151889590939268ffffffffffffffffff1916909117906801000000000000000090849081111561158857611588613ff4565b02179055506101808281015160099290920180546101a08501516101c09095015167ffffffffffffffff166b0100000000000000000000000272ffffffffffffffff0000000000000000000000199515156a0100000000000000000000027fffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffff60ff909616690100000000000000000002959095167fffffffffffffffffffffffffffffffffffffffffff0000ffffffffffffffffff909216919091179390931793909316919091179091558301518351604080860151602080880151608089015184517fff0000000000000000000000000000000000000000000000000000000000000060f89890981b97909716878401526021870195909552604186019290925260618501919091526081808501939093528151808503909301835260a1909301905280519101205f905f818152600187016020526040812054919250819003611730576040516815539492559053115160ba1b602082015260290160408051601f1981840301815291815281516020928301205f85815260018a01909352912055611777565b6040516815539492559053115160ba1b6020820152602901604051602081830303815290604052805190602001208103611777575f82815260018701602052604090208390555b6040805161010081018252848152602080820185905287518284015260e088015160608301525f868152908990529190912060808201906117b790611e99565b815261018087015160ff166020820152911515604083015260e090950151151560609091015250919392505050565b5f60026117f38484614826565b1015611835576040517f902985940000000000000000000000000000000000000000000000000000000081526004810184905260248101839052604401610a2a565b61183f8383614826565b60020361185857611851836001614839565b9050610541565b5f83611865600185614826565b1890505f61187282612574565b90505f19811b80611884600187614826565b169695505050505050565b5f8061189b8484610ac1565b5f84815260208690526040902060050154909150156105ca575f8381526020859052604080822060058101548352818320600990810154600690920154845291909220015467ffffffffffffffff6b010000000000000000000000928390048116929091041680821061190e5780611910565b815b61191a9084614839565b9695505050505050565b5f8b815260208d90526040902060080154600160a01b900467ffffffffffffffff166119655760405162a7b02b60e01b8152600481018c9052602401610a2a565b60025f8c815260208e90526040902060090154611992906901000000000000000000900460ff1685611edc565b60028111156119a3576119a3613ff4565b146119fe575f8b815260208d90526040908190206009015490517f348aefdf000000000000000000000000000000000000000000000000000000008152690100000000000000000090910460ff166004820152602401610a2a565b5f8b815260208d905260409020611a1490611e99565b600114611a66575f8b815260208d905260409020611a3190611e99565b6040517f6b595e50000000000000000000000000000000000000000000000000000000008152600401610a2a91815260200190565b5f8b815260208d905260409020600201548b825b60018f5f015f8481526020019081526020015f2060090160099054906101000a900460ff1660ff161115611b15575f8f5f015f8481526020019081526020015f205f015490508f6001015f8281526020019081526020015f205492508f5f015f8481526020019081526020015f206002015482611af79190614968565b611b019085614839565b9350611b0d8683614968565b915050611a7a565b5050611b6d8d5f015f8e81526020019081526020015f20600101548b5f0135838b8b808060200260200160405190810160405280939291908181526020018383602002808284375f920191909152506126b892505050565b5f8b6001600160a01b031663b5112fd28b848e5f01358f8060200190611b93919061497f565b6040518663ffffffff1660e01b8152600401611bb39594939291906149e0565b602060405180830381865afa158015611bce573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611bf29190614a41565b9050611c538e5f015f8f81526020019081526020015f206003015482846001611c1b9190614839565b8a8a808060200260200160405190810160405280939291908181526020018383602002808284375f920191909152506126b892505050565b5f8d815260208f905260409020611c6990610ee2565b611c738e8e6109c3565b5050505f998a5250505060209790975250506040909320600901805472ffffffffffffffff0000000000000000000000191672ffffffffffffffff000000000000000000000017905550505050565b5f80611cd98585611cd3888861188f565b86612744565b91509150935093915050565b60408051610100810182525f80825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290529080611d338a8a8a8a896127db565b915091505f611d43838b89612d72565b90505f611d5183838d612ecd565b90508515611deb575f611d6382612f6f565b335f90815260038f016020908152604080832084845290915290205490915060ff1615611dc5576040517f5a46ac3a00000000000000000000000000000000000000000000000000000000815233600482015260248101829052604401610a2a565b335f90815260038e016020908152604080832093835292905220805460ff191660011790555b611df58c826113bd565b9c9b505050505050505050505050565b6009810154815460028301546001840154600485015460408051690100000000000000000090960460f81b7fff00000000000000000000000000000000000000000000000000000000000000166020808801919091526021870195909552604186019390935260618501919091526081808501919091528151808503909101815260a1909301905281519101205f90610541565b5f8082600201548360040154611eaf9190614826565b9050805f0361054157611ec183611f61565b60405162a7b02b60e01b8152600401610a2a91815260200190565b5f8260ff165f03611eee57505f610541565b8160ff168360ff1611611f0357506001610541565b611f0e82600161484c565b60ff168360ff1603611f2257506002610541565b6040517fae0da57800000000000000000000000000000000000000000000000000000000815260ff808516600483015283166024820152604401610a2a565b60098101548154600283015460018401546004850154600386015460408051690100000000000000000090970460f81b7fff00000000000000000000000000000000000000000000000000000000000000166020808901919091526021880196909652604187019490945260618601929092526081808601919091528251808603909101815260a18501835280519084012060c185015260e18085019190915281518085039091018152610101909301905281519101205f90610541565b5f851161206e5760405162461bcd60e51b815260206004820152601460248201527f5072652d73697a652063616e6e6f7420626520300000000000000000000000006044820152606401610a2a565b8561207883612ff4565b146120c55760405162461bcd60e51b815260206004820152601b60248201527f50726520657870616e73696f6e20726f6f74206d69736d6174636800000000006044820152606401610a2a565b846120cf83613184565b146121425760405162461bcd60e51b815260206004820152602160248201527f5072652073697a6520646f6573206e6f74206d6174636820657870616e73696f60448201527f6e000000000000000000000000000000000000000000000000000000000000006064820152608401610a2a565b8285106121915760405162461bcd60e51b815260206004820181905260248201527f5072652073697a65206e6f74206c657373207468616e20706f73742073697a656044820152606401610a2a565b5f8590505f806121a3855f87516131d3565b90505b85831015612265575f6121b98488613347565b90508451831061220b5760405162461bcd60e51b815260206004820152601260248201527f496e646578206f7574206f662072616e676500000000000000000000000000006044820152606401610a2a565b61222f828287868151811061222257612222614a58565b602002602001015161342e565b91506001811b61223f8186614839565b94508785111561225157612251614a6c565b8361225b81614a80565b94505050506121a6565b8661226f82612ff4565b146122e25760405162461bcd60e51b815260206004820152602260248201527f506f737420657870616e73696f6e20726f6f74206e6f7420657175616c20706f60448201527f73740000000000000000000000000000000000000000000000000000000000006064820152608401610a2a565b835182146123325760405162461bcd60e51b815260206004820152601660248201527f496e636f6d706c6574652070726f6f66207573616765000000000000000000006044820152606401610a2a565b505050505050505050565b604080516101e0810182525f80825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810182905261018081018290526101a081018290526101c08101919091526123c28787878787613996565b50604080516101e081018252968752602087019590955293850192909252606084015260808301525f60a0830181905260c0830181905260e08301819052610100830181905267ffffffffffffffff43166101208401526101408301819052610160830181905260ff9091166101808301526101a082018190526101c082015290565b610180810151815160408084015160208086015160808701516060880151855160f89890981b7fff0000000000000000000000000000000000000000000000000000000000000016888501526021880196909652604187019390935260618601526081808601929092528251808603909201825260a18501835281519181019190912060c185015260e18085019390935281518085039093018352610101909301905280519101205f90610541565b60058301541515806125095750600683015415155b156125645761251783611f61565b600584015460068501546040517f8b0e71d0000000000000000000000000000000000000000000000000000000008152600481019390935260248301919091526044820152606401610a2a565b6005830191909155600690910155565b5f815f036125c45760405162461bcd60e51b815260206004820152601c60248201527f5a65726f20686173206e6f207369676e69666963616e742062697473000000006044820152606401610a2a565b70010000000000000000000000000000000082106125ef57608091821c916125ec9082614839565b90505b68010000000000000000821061261257604091821c9161260f9082614839565b90505b640100000000821061263157602091821c9161262e9082614839565b90505b62010000821061264e57601091821c9161264b9082614839565b90505b610100821061266a57600891821c916126679082614839565b90505b6010821061268557600491821c916126829082614839565b90505b600482106126a057600291821c9161269d9082614839565b90505b600282106126b357610541600182614839565b919050565b5f6126ec8284866040516020016126d191815260200190565b60405160208183030381529060405280519060200120613a87565b905080851461273d5760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420696e636c7573696f6e2070726f6f660000000000000000006044820152606401610a2a565b5050505050565b5f805f612752878786613b3a565b905067ffffffffffffffff85116127695784612773565b67ffffffffffffffff5b9450808511156127cc575050505f838152602085905260409020600901805472ffffffffffffffff000000000000000000000019166b01000000000000000000000067ffffffffffffffff8516021790556001826127d2565b5f925090505b94509492505050565b60408051606080820183525f8083526020830152918101919091525f8061280e6128086020890189614a98565b85611edc565b600281111561281f5761281f613ff4565b03612b4c57602085015185515f03612863576040517fe96bc61a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b85516060880135146128b15785516040517f5b177a3c000000000000000000000000000000000000000000000000000000008152600481019190915260608801356024820152604401610a2a565b85604001516128ec576040517fc169243600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8560600151612927576040517fb45d1c3a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61293460a088018861497f565b90505f0361296e576040517fc9ccac5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f61297c60a089018961497f565b8101906129899190614b4e565b509091505f905087608001516020015160028111156129aa576129aa613ff4565b036129e1576040517f46365e5200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f8760a001516020015160028111156129fc576129fc613ff4565b03612a33576040517f8999857d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f866001600160a01b031663c39619c4612a508a60800151613ba7565b6040518263ffffffff1660e01b8152600401612a6c9190614bb3565b602060405180830381865afa158015612a87573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612aab9190614a41565b90505f876001600160a01b031663c39619c4612aca8b60a00151613ba7565b6040518263ffffffff1660e01b8152600401612ae69190614bb3565b602060405180830381865afa158015612b01573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612b259190614a41565b6040805160608101825293845260208401919091528201929092529350909150612d689050565b612b5a878760600135610c77565b612b96576040517fff6d9bd700000000000000000000000000000000000000000000000000000000815260608701356004820152602401610a2a565b60608601355f90815260208890526040812090612bb282611e05565b90505f600983015468010000000000000000900460ff166001811115612bda57612bda613ff4565b14612c11576040517f12459ffd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6009820154612c30906901000000000000000000900460ff1686610de4565b60ff16612c4060208a018a614a98565b60ff1614612ca857612c556020890189614a98565b60098301546040517fac9e611600000000000000000000000000000000000000000000000000000000815260ff928316600482015269010000000000000000009091049091166024820152604401610a2a565b612cb560a089018961497f565b90505f03612cef576040517fc9ccac5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f80808080612d0160a08e018e61497f565b810190612d0e9190614c2c565b94509450945094509450612d2c8760010154868960020154866126b8565b612d408760030154858960040154856126b8565b6040518060600160405280868152602001858152602001828152508698509850505050505050505b9550959350505050565b604080515f808252602082019092528190612d9790612d92908751613be1565b612ff4565b9050612da283610a48565b612ddb576040517feafedbfc00000000000000000000000000000000000000000000000000000000815260048101849052602401610a2a565b82846040013514612e2557604080517fdfcc62bc00000000000000000000000000000000000000000000000000000000815290850135600482015260248101849052604401610a2a565b612e4184602001358660200151866040013588604001516126b8565b612e4e608085018561497f565b90505f03612e88576040517f342a075200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f80612e97608087018761497f565b810190612ea49190614cc1565b9092509050612ec2836001602089013561126b60408b013583614839565b509095945050505050565b604080516101e0810182525f80825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810182905261018081018290526101a081018290526101c08101919091526105c784845f602086018035906040880135906060890135903390612f6a908b614a98565b613c16565b61018081015181516040808401516020808601516080870151845160f89790971b7fff0000000000000000000000000000000000000000000000000000000000000016878401526021870195909552604186019290925260618501919091526081808501939093528151808503909301835260a1909301905280519101205f90610541565b5f808251116130455760405162461bcd60e51b815260206004820152601660248201527f456d707479206d65726b6c6520657870616e73696f6e000000000000000000006044820152606401610a2a565b6040825111156130975760405162461bcd60e51b815260206004820152601a60248201527f4d65726b6c6520657870616e73696f6e20746f6f206c617267650000000000006044820152606401610a2a565b5f805b835181101561317d575f8482815181106130b6576130b6614a58565b60200260200101519050825f801b0361312057801561311b57809250600185516130e09190614826565b821461311b576040516131029084905f90602001918252602082015260400190565b6040516020818303038152906040528051906020012092505b613174565b801561313f576040805160208101839052908101849052606001613102565b60405161315b9084905f90602001918252602082015260400190565b6040516020818303038152906040528051906020012092505b5060010161309a565b5092915050565b5f80805b835181101561317d578381815181106131a3576131a3614a58565b60200260200101515f801b146131cb576131be816002614df7565b6131c89083614839565b91505b600101613188565b60608183106132245760405162461bcd60e51b815260206004820152601760248201527f5374617274206e6f74206c657373207468616e20656e640000000000000000006044820152606401610a2a565b835182111561329b5760405162461bcd60e51b815260206004820152602160248201527f456e64206e6f74206c657373206f7220657175616c207468616e206c656e677460448201527f68000000000000000000000000000000000000000000000000000000000000006064820152608401610a2a565b5f6132a68484614826565b67ffffffffffffffff8111156132be576132be614106565b6040519080825280602002602001820160405280156132e7578160200160208202803683370190505b509050835b8381101561333e5785818151811061330657613306614a58565b602002602001015182868361331b9190614826565b8151811061332b5761332b614a58565b60209081029190910101526001016132ec565b50949350505050565b5f8183106133975760405162461bcd60e51b815260206004820152601760248201527f5374617274206e6f74206c657373207468616e20656e640000000000000000006044820152606401610a2a565b5f6133a3838518612574565b90505f60016133b28382614839565b6001901b6133c09190614826565b905084811684821681156133d757610c5882613dbd565b80156133e657610c5881612574565b60405162461bcd60e51b815260206004820152601b60248201527f426f7468207920616e64207a2063616e6e6f74206265207a65726f00000000006044820152606401610a2a565b6060604083106134805760405162461bcd60e51b815260206004820152600e60248201527f4c6576656c20746f6f20686967680000000000000000000000000000000000006044820152606401610a2a565b5f8290036134d05760405162461bcd60e51b815260206004820152601b60248201527f43616e6e6f7420617070656e6420656d707479207375627472656500000000006044820152606401610a2a565b6040845111156135225760405162461bcd60e51b815260206004820152601a60248201527f4d65726b6c6520657870616e73696f6e20746f6f206c617267650000000000006044820152606401610a2a565b83515f0361359f575f613536846001614839565b67ffffffffffffffff81111561354e5761354e614106565b604051908082528060200260200182016040528015613577578160200160208202803683370190505b5090508281858151811061358d5761358d614a58565b602090810291909101015290506105ca565b835183106136155760405162461bcd60e51b815260206004820152603560248201527f4c6576656c2067726561746572207468616e2068696768657374206c6576656c60448201527f206f662063757272656e7420657870616e73696f6e00000000000000000000006064820152608401610a2a565b815f61362086613184565b90505f61362e866002614df7565b6136389083614839565b90505f61364483612574565b61364d83612574565b1161369b57875167ffffffffffffffff81111561366c5761366c614106565b604051908082528060200260200182016040528015613695578160200160208202803683370190505b506136eb565b87516136a8906001614839565b67ffffffffffffffff8111156136c0576136c0614106565b6040519080825280602002602001820160405280156136e9578160200160208202803683370190505b505b905060408151111561373f5760405162461bcd60e51b815260206004820152601c60248201527f417070656e642063726561746573206f76657273697a652074726565000000006044820152606401610a2a565b5f5b88518110156138eb57878110156137e75788818151811061376457613764614a58565b60200260200101515f801b146137e25760405162461bcd60e51b815260206004820152602260248201527f417070656e642061626f7665206c65617374207369676e69666963616e74206260448201527f69740000000000000000000000000000000000000000000000000000000000006064820152608401610a2a565b6138e3565b5f85900361382c5788818151811061380157613801614a58565b602002602001015182828151811061381b5761381b614a58565b6020026020010181815250506138e3565b88818151811061383e5761383e614a58565b60200260200101515f801b03613874578482828151811061386157613861614a58565b60209081029190910101525f94506138e3565b5f801b82828151811061388957613889614a58565b6020026020010181815250508881815181106138a7576138a7614a58565b6020026020010151856040516020016138ca929190918252602082015260400190565b6040516020818303038152906040528051906020012094505b600101613741565b50831561391f578381600183516139029190614826565b8151811061391257613912614a58565b6020026020010181815250505b806001825161392e9190614826565b8151811061393e5761393e614a58565b60200260200101515f801b036109b85760405162461bcd60e51b815260206004820152600f60248201527f4c61737420656e747279207a65726f00000000000000000000000000000000006044820152606401610a2a565b5f8590036139d0576040517f8d79dbbc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b828111613a13576040517f2060faf40000000000000000000000000000000000000000000000000000000081526004810184905260248101829052604401610a2a565b5f849003613a4d576040517f83c683e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f82900361273d576040517f5cb6e5bb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82515f90610100811115613ad2576040517ffdac331e000000000000000000000000000000000000000000000000000000008152600481018290526101006024820152604401610a2a565b825f5b82811015613b30575f878281518110613af057613af0614a58565b60200260200101519050816001901b87165f03613b1957825f528060205260405f209250613b27565b805f528260205260405f2092505b50600101613ad5565b5095945050505050565b5f828152602084905260408120600901546b010000000000000000000000900467ffffffffffffffff168281106105c7576040517fd1f592810000000000000000000000000000000000000000000000000000000081526004810182905260248101849052604401610a2a565b613baf613e28565b6040518060400160405280835f0151815260200183602001516002811115613bd957613bd9613ff4565b905292915050565b60606105ca835f84604051602001613bfb91815260200190565b6040516020818303038152906040528051906020012061342e565b604080516101e0810182525f80825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810182905261018081018290526101a081018290526101c08101919091526001600160a01b038316613cce576040517ff289e65700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f849003613d08576040517f6932bcfd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b613d158989898989613996565b604051806101e001604052808a81526020018981526020018881526020018781526020018681526020015f801b81526020015f801b8152602001858152602001846001600160a01b031681526020014367ffffffffffffffff1681526020015f67ffffffffffffffff1681526020015f6001811115613d9657613d96613ff4565b815260ff841660208201525f60408201819052606090910152905098975050505050505050565b5f808211613e0d5760405162461bcd60e51b815260206004820152601c60248201527f5a65726f20686173206e6f207369676e69666963616e742062697473000000006044820152606401610a2a565b5f8280613e1b600182614826565b161890506105ca81612574565b6040518060400160405280613e3b613e47565b81526020015f5b905290565b6040518060400160405280613e5a613e63565b8152602001613e425b60405180604001604052806002906020820280368337509192915050565b5f60208284031215613e91575f80fd5b5035919050565b803560ff811681146126b3575f80fd5b5f8060408385031215613eb9575f80fd5b82359150613ec960208401613e98565b90509250929050565b5f8060408385031215613ee3575f80fd5b50508035926020909101359150565b6001600160a01b0381168114610534575f80fd5b80356126b381613ef2565b803580151581146126b3575f80fd5b5f805f60608486031215613f32575f80fd5b8335613f3d81613ef2565b925060208401359150613f5260408501613f11565b90509250925092565b803567ffffffffffffffff811681146126b3575f80fd5b5f805f60608486031215613f84575f80fd5b83359250613f9460208501613f5b565b9150613f5260408501613f5b565b5f8060408385031215613fb3575f80fd5b8235613fbe81613ef2565b946020939093013593505050565b5f8060408385031215613fdd575f80fd5b613fe683613e98565b9150613ec960208401613e98565b634e487b7160e01b5f52602160045260245ffd5b6002811061401857614018613ff4565b9052565b5f6101e082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151614089828501826001600160a01b03169052565b50506101208381015167ffffffffffffffff81168483015250506101408381015167ffffffffffffffff8116848301525050610160808401516140ce82850182614008565b50506101808381015160ff16908301526101a0808401511515908301526101c08084015167ffffffffffffffff811682850152610c6f565b634e487b7160e01b5f52604160045260245ffd5b6040516101e0810167ffffffffffffffff8111828210171561413e5761413e614106565b60405290565b6040516060810167ffffffffffffffff8111828210171561413e5761413e614106565b6040805190810167ffffffffffffffff8111828210171561413e5761413e614106565b60405160c0810167ffffffffffffffff8111828210171561413e5761413e614106565b604051601f8201601f1916810167ffffffffffffffff811182821017156141d6576141d6614106565b604052919050565b5f805f606084860312156141f0575f80fd5b833592506020808501359250604085013567ffffffffffffffff80821115614216575f80fd5b818701915087601f830112614229575f80fd5b81358181111561423b5761423b614106565b61424d84601f19601f840116016141ad565b91508082528884828501011115614262575f80fd5b80848401858401375f848284010152508093505050509250925092565b83815261022081016142e46020830185805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260ff60a08201511660a083015260c0810151151560c083015260e0810151151560e08301525050565b825161012083015260208301516101408301526040830151610160830152606083015161018083015260808301516101a083015260a083015160ff166101c083015260c083015115156101e083015260e08301511515610200830152610ddc565b8035600281106126b3575f80fd5b5f6101e08284031215614364575f80fd5b61436c61411a565b823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c082015260e083013560e08201526101006143c4818501613f06565b908201526101206143d6848201613f5b565b908201526101406143e8848201613f5b565b908201526101606143fa848201614345565b9082015261018061440c848201613e98565b908201526101a061441e848201613f11565b908201526101c0614430848201613f5b565b908201529392505050565b61010081016105418284805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260ff60a08201511660a083015260c0810151151560c083015260e0810151151560e08301525050565b5f604082840312156144aa575f80fd5b50919050565b5f606082840312156144c0575f80fd5b6144c8614144565b90508135815260208201356144dc81613ef2565b806020830152506040820135604082015292915050565b5f8083601f840112614503575f80fd5b50813567ffffffffffffffff81111561451a575f80fd5b6020830191508360208260051b8501011115614534575f80fd5b9250929050565b5f805f805f805f805f805f6101608c8e031215614556575f80fd5b8b359a5061456660208d01613f06565b995067ffffffffffffffff8060408e01351115614581575f80fd5b6145918e60408f01358f0161449a565b99506145a08e60608f016144b0565b98508060c08e013511156145b2575f80fd5b6145c28e60c08f01358f016144f3565b909850965060e08d01358110156145d7575f80fd5b506145e88d60e08e01358e016144f3565b90955093506145fa6101008d01613e98565b92506101208c013591506101408c013590509295989b509295989b9093969950565b5f82601f83011261462b575f80fd5b614633614167565b806040840185811115614644575f80fd5b845b81811015612ec25761465781613f5b565b845260209384019301614646565b8035600381106126b3575f80fd5b5f81830360c0811215614684575f80fd5b61468c614144565b9150608081121561469b575f80fd5b506146a4614167565b83601f8401126146b2575f80fd5b6146ba614167565b8060408501868111156146cb575f80fd5b855b818110156146e55780358452602093840193016146cd565b508184526146f3878261461c565b6020850152505050815261470960808301614665565b602082015260a0820135604082015292915050565b5f805f805f808688036102a0811215614735575f80fd5b873567ffffffffffffffff81111561474b575f80fd5b880160c0818b03121561475c575f80fd5b9650610200601f1982011215614770575f80fd5b5061477961418a565b602088013581526040880135602082015261479660608901613f11565b60408201526147a760808901613f11565b60608201526147b98960a08a01614673565b60808201526147cc896101608a01614673565b60a082015294506147e06102208801613f06565b935061024087013592506147f76102608801613e98565b91506148066102808801613f11565b90509295509295509295565b634e487b7160e01b5f52601160045260245ffd5b8181038181111561054157610541614812565b8082018082111561054157610541614812565b60ff818116838216019081111561054157610541614812565b828152604081016105ca6020830184614008565b5f67ffffffffffffffff82111561489257614892614106565b5060051b60200190565b5f82601f8301126148ab575f80fd5b815160206148c06148bb83614879565b6141ad565b8083825260208201915060208460051b8701019350868411156148e1575f80fd5b602086015b848110156148fd57805183529183019183016148e6565b509695505050505050565b5f8060408385031215614919575f80fd5b825167ffffffffffffffff80821115614930575f80fd5b61493c8683870161489c565b93506020850151915080821115614951575f80fd5b5061495e8582860161489c565b9150509250929050565b808202811582820484141761054157610541614812565b5f8083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126149b2575f80fd5b83018035915067ffffffffffffffff8211156149cc575f80fd5b602001915036819003821315614534575f80fd5b855181526001600160a01b0360208701511660208201526040860151604082015284606082015283608082015260c060a08201528160c0820152818360e08301375f81830160e090810191909152601f909201601f19160101949350505050565b5f60208284031215614a51575f80fd5b5051919050565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52600160045260245ffd5b5f5f198203614a9157614a91614812565b5060010190565b5f60208284031215614aa8575f80fd5b6105ca82613e98565b5f82601f830112614ac0575f80fd5b81356020614ad06148bb83614879565b8083825260208201915060208460051b870101935086841115614af1575f80fd5b602086015b848110156148fd5780358352918301918301614af6565b5f6101008284031215614b1e575f80fd5b614b26614144565b9050614b328383614673565b815260c0820135602082015260e0820135604082015292915050565b5f805f6102208486031215614b61575f80fd5b833567ffffffffffffffff811115614b77575f80fd5b614b8386828701614ab1565b935050614b938560208601614b0d565b9150613f52856101208601614b0d565b6003811061401857614018613ff4565b8151805160a083019190835f5b6002811015614bdf578251825260209283019290910190600101614bc0565b50505060209081015190604084015f5b6002811015614c1657835167ffffffffffffffff1682529282019290820190600101614bef565b50505050602083015161317d6080840182614ba3565b5f805f805f60a08688031215614c40575f80fd5b8535945060208601359350604086013567ffffffffffffffff80821115614c65575f80fd5b614c7189838a01614ab1565b94506060880135915080821115614c86575f80fd5b614c9289838a01614ab1565b93506080880135915080821115614ca7575f80fd5b50614cb488828901614ab1565b9150509295509295909350565b5f8060408385031215614cd2575f80fd5b823567ffffffffffffffff80821115614ce9575f80fd5b614cf586838701614ab1565b93506020850135915080821115614d0a575f80fd5b5061495e85828601614ab1565b600181815b80851115614d5157815f1904821115614d3757614d37614812565b80851615614d4457918102915b93841c9390800290614d1c565b509250929050565b5f82614d6757506001610541565b81614d7357505f610541565b8160018114614d895760028114614d9357614daf565b6001915050610541565b60ff841115614da457614da4614812565b50506001821b610541565b5060208310610133831016604e8410600b8410161715614dd2575081810a610541565b614ddc8383614d17565b805f1904821115614def57614def614812565b029392505050565b5f6105ca8383614d5956fea2646970667358221220806e525e430352e1beda52830104ca5ae64a502195f0d77ae8f7fbeca7e8ac2b64736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\x01\xBBW_5`\xE0\x1C\x80c\x8F\xB7\xD6^\x11a\0\xF3W\x80c\xC8\xBCNC\x11a\0\x93W\x80c\xE4\xCF\xE2\xAA\x11a\0nW\x80c\xE4\xCF\xE2\xAA\x14a\x04\xDEW\x80c\xE7\xFA\xF6>\x14a\x04\xF1W\x80c\xED\xAA\xB5J\x14a\x05\x04W\x80c\xF9\xA29\xF5\x14a\x05\x17W_\x80\xFD[\x80c\xC8\xBCNC\x14a\x04\x89W\x80c\xCD(`\xAC\x14a\x04\xABW\x80c\xCD\x8F\xC6w\x14a\x04\xCBW_\x80\xFD[\x80c\xA5\x0C#a\x11a\0\xCEW\x80c\xA5\x0C#a\x14a\x04DW\x80c\xB2\x92\xA8\xEE\x14a\x04WW\x80c\xC4\x0EB^\x14a\x04vW\x80c\xC8\x9A\x16l\x14a\x04WW_\x80\xFD[\x80c\x8F\xB7\xD6^\x14a\x03yW\x80c\x90\x85\x17\xE9\x14a\x03\x8CW\x80c\x95\xBC&s\x14a\x03\x9FW_\x80\xFD[\x80cLG\x8B\xB7\x11a\x01^W\x80ca\r\xF3\x9E\x11a\x019W\x80ca\r\xF3\x9E\x14a\x02\xE9W\x80ce[B\xF3\x14a\x02\xFCW\x80c~@\x98\xD7\x14a\x034W\x80c\x8E\xAAj\xC0\x14a\x03YW_\x80\xFD[\x80cLG\x8B\xB7\x14a\x02\xA4W\x80cT\xB6AQ\x14a\x02\xC3W\x80cZH\xE0\xF4\x14a\x02\xD6W_\x80\xFD[\x80c8\xA6\x99\xA4\x11a\x01\x99W\x80c8\xA6\x99\xA4\x14a\x02\x0FW\x80c>5\xF5\xE8\x14a\x02\"W\x80cFf\xE7\xBC\x14a\x02CW\x80cL\x1F$\\\x14a\x02bW_\x80\xFD[\x80c\x05q\x8F\xFE\x14a\x01\xBFW\x80c\x068\x8D\xD6\x14a\x01\xD4W\x80c\x0E\x1E\xD1\xF5\x14a\x01\xFCW[_\x80\xFD[a\x01\xD2a\x01\xCD6`\x04a>\x81V[a\x05*V[\0[a\x01\xE7a\x01\xE26`\x04a>\x81V[a\x057V[`@Q\x90\x15\x15\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\x01\xD2a\x02\n6`\x04a>\xA8V[a\x05GV[a\x01\xE7a\x02\x1D6`\x04a>\x81V[a\x05qV[a\x025a\x0206`\x04a>\x81V[a\x05\x99V[`@Q\x90\x81R` \x01a\x01\xF3V[a\x01\xD2a\x02Q6`\x04a>\xD2V[_\x91\x82R`\x01` R`@\x90\x91 UV[a\x01\xD2a\x02p6`\x04a? V[`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16_\x90\x81R`\x03` \x90\x81R`@\x80\x83 \x93\x83R\x92\x90R \x80T`\xFF\x19\x16\x91\x15\x15\x91\x90\x91\x17\x90UV[a\x025a\x02\xB26`\x04a>\x81V[_\x90\x81R`\x01` R`@\x90 T\x90V[a\x01\xE7a\x02\xD16`\x04a>\x81V[a\x05\xA4V[a\x025a\x02\xE46`\x04a>\x81V[a\x05\xAFV[a\x025a\x02\xF76`\x04a?rV[a\x05\xBAV[a\x01\xE7a\x03\n6`\x04a?\xA2V[`\x01`\x01`\xA0\x1B\x03\x91\x90\x91\x16_\x90\x81R`\x03` \x90\x81R`@\x80\x83 \x93\x83R\x92\x90R T`\xFF\x16\x90V[a\x03Ga\x03B6`\x04a?\xCCV[a\x05\xD1V[`@Q`\xFF\x90\x91\x16\x81R` \x01a\x01\xF3V[a\x03la\x03g6`\x04a>\x81V[a\x05\xDCV[`@Qa\x01\xF3\x91\x90a@\x1CV[a\x03la\x03\x876`\x04a>\x81V[a\x07\x86V[a\x01\xE7a\x03\x9A6`\x04a>\x81V[a\x08\rV[a\x01\xD2a\x03\xAD6`\x04a>\x81V[_\x90\x81R` \x81\x90R`@\x81 \x81\x81U`\x01\x81\x01\x82\x90U`\x02\x81\x01\x82\x90U`\x03\x81\x01\x82\x90U`\x04\x81\x01\x82\x90U`\x05\x81\x01\x82\x90U`\x06\x81\x01\x82\x90U`\x07\x81\x01\x91\x90\x91U`\x08\x81\x01\x80T\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x90U`\t\x01\x80T\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x90UV[a\x01\xD2a\x04R6`\x04a>\x81V[a\x08\x18V[a\x025a\x04e6`\x04a>\x81V[_\x90\x81R`\x02` R`@\x90 T\x90V[a\x01\xD2a\x04\x846`\x04a>\xD2V[a\x08*V[a\x04\x9Ca\x04\x976`\x04aA\xDEV[a\x08=V[`@Qa\x01\xF3\x93\x92\x91\x90aB\x7FV[a\x04\xBEa\x04\xB96`\x04aCSV[a\x08\xD7V[`@Qa\x01\xF3\x91\x90aD;V[a\x025a\x04\xD96`\x04a>\xD2V[a\t!V[a\x025a\x04\xEC6`\x04a>\x81V[a\t,V[a\x01\xD2a\x04\xFF6`\x04aE;V[a\t7V[a\x01\xD2a\x05\x126`\x04a>\xD2V[a\tXV[a\x04\xBEa\x05%6`\x04aG\x1EV[a\tiV[a\x054_\x82a\t\xC3V[PV[_a\x05A\x82a\nHV[\x92\x91PPV[\x80a\x05R_\x84a\nnV[`\t\x01`\ta\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\xFF\x16\x02\x17\x90UPPPV[_a\x05Aa\x05\x7F\x82\x84a\nnV[`\x08\x01T`\x01`\xA0\x1B\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x15\x15\x90V[_a\x05A\x81\x83a\n\xC1V[_a\x05A\x81\x83a\x0CwV[_a\x05A\x81\x83a\x0C\xA9V[_a\x05\xC7\x81\x85\x85\x85a\x0C\xFEV[\x90P[\x93\x92PPPV[_a\x05\xCA\x83\x83a\r\xE4V[`@\x80Qa\x01\xE0\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R`\xC0\x81\x01\x82\x90R`\xE0\x81\x01\x82\x90Ra\x01\0\x81\x01\x82\x90Ra\x01 \x81\x01\x82\x90Ra\x01@\x81\x01\x82\x90Ra\x01`\x81\x01\x82\x90Ra\x01\x80\x81\x01\x82\x90Ra\x01\xA0\x81\x01\x82\x90Ra\x01\xC0\x81\x01\x91\x90\x91Ra\x06^_\x83a\nnV[`@\x80Qa\x01\xE0\x81\x01\x82R\x82T\x81R`\x01\x80\x84\x01T` \x83\x01R`\x02\x84\x01T\x92\x82\x01\x92\x90\x92R`\x03\x83\x01T``\x82\x01R`\x04\x83\x01T`\x80\x82\x01R`\x05\x83\x01T`\xA0\x82\x01R`\x06\x83\x01T`\xC0\x82\x01R`\x07\x83\x01T`\xE0\x82\x01R`\x08\x83\x01T`\x01`\x01`\xA0\x1B\x03\x81\x16a\x01\0\x83\x01R`\x01`\xA0\x1B\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x81\x16a\x01 \x83\x01R`\t\x84\x01T\x90\x81\x16a\x01@\x83\x01R\x90\x92\x91a\x01`\x84\x01\x91h\x01\0\0\0\0\0\0\0\0\x90\x04`\xFF\x16\x90\x81\x11\x15a\x07\x1AWa\x07\x1Aa?\xF4V[`\x01\x81\x11\x15a\x07+Wa\x07+a?\xF4V[\x81R`\t\x91\x90\x91\x01T`\xFFi\x01\0\0\0\0\0\0\0\0\0\x82\x04\x81\x16` \x84\x01Rj\x01\0\0\0\0\0\0\0\0\0\0\x82\x04\x16\x15\x15`@\x83\x01Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFk\x01\0\0\0\0\0\0\0\0\0\0\0\x90\x91\x04\x16``\x90\x91\x01R\x92\x91PPV[`@\x80Qa\x01\xE0\x81\x01\x82R_\x80\x82R` \x80\x83\x01\x82\x90R\x82\x84\x01\x82\x90R``\x83\x01\x82\x90R`\x80\x83\x01\x82\x90R`\xA0\x83\x01\x82\x90R`\xC0\x83\x01\x82\x90R`\xE0\x83\x01\x82\x90Ra\x01\0\x83\x01\x82\x90Ra\x01 \x83\x01\x82\x90Ra\x01@\x83\x01\x82\x90Ra\x01`\x83\x01\x82\x90Ra\x01\x80\x83\x01\x82\x90Ra\x01\xA0\x83\x01\x82\x90Ra\x01\xC0\x83\x01\x82\x90R\x84\x82R\x81\x90R\x91\x90\x91 a\x06^V[_a\x05A\x81\x83a\x0E\x05V[a\x054a\x08%_\x83a\nnV[a\x0E\xE2V[\x80a\x085_\x84a\nnV[`\x07\x01UPPV[`@\x80Qa\x01\0\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R`\xC0\x81\x01\x82\x90R`\xE0\x81\x01\x82\x90R`@\x80Qa\x01\0\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R`\xC0\x81\x01\x82\x90R`\xE0\x81\x01\x91\x90\x91Ra\x08\xC8_\x87\x87\x87a\x0F\x8CV[\x92P\x92P\x92P\x93P\x93P\x93\x90PV[`@\x80Qa\x01\0\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R`\xC0\x81\x01\x82\x90R`\xE0\x81\x01\x91\x90\x91Ra\x05A_\x83a\x13\xBDV[_a\x05\xCA\x83\x83a\x17\xE6V[_a\x05A\x81\x83a\x18\x8FV[a\tK_\x8C\x8C\x8C\x8C\x8C\x8C\x8C\x8C\x8C\x8C\x8Ca\x19$V[PPPPPPPPPPPV[a\tc_\x83\x83a\x1C\xC2V[PPPPV[`@\x80Qa\x01\0\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R`\xC0\x81\x01\x82\x90R`\xE0\x81\x01\x91\x90\x91Ra\t\xB8_\x88\x88\x88\x88\x88\x88a\x1C\xE5V[\x97\x96PPPPPPPV[_\x81\x81R` \x83\x90R`@\x81 a\t\xD9\x90a\x1E\x05V[_\x81\x81R`\x02\x85\x01` R`@\x90 T\x90\x91P\x80\x15a\n3W`@Q\x7F\xDDp(\xF0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x84\x90R`$\x81\x01\x82\x90R`D\x01[`@Q\x80\x91\x03\x90\xFD[P_\x90\x81R`\x02\x90\x92\x01` R`@\x90\x91 UV[_\x81_\x03a\nWWP_\x91\x90PV[_a\nc`\x01\x84aH&V[\x92\x90\x92\x16\x15\x92\x91PPV[_\x81\x81R` \x83\x90R`@\x81 `\x08\x01T`\x01`\xA0\x1B\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\n\xAFW`@Qb\xA7\xB0+`\xE0\x1B\x81R`\x04\x81\x01\x83\x90R`$\x01a\n*V[P_\x90\x81R` \x91\x90\x91R`@\x90 \x90V[_\x81\x81R` \x83\x90R`@\x81 `\x08\x01T`\x01`\xA0\x1B\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x0B\x02W`@Qb\xA7\xB0+`\xE0\x1B\x81R`\x04\x81\x01\x83\x90R`$\x01a\n*V[_\x82\x81R` \x84\x90R`@\x81 a\x0B\x18\x90a\x1E\x05V[_\x81\x81R`\x01\x86\x01` R`@\x81 T\x91\x92P\x81\x90\x03a\x0BdW`@Q\x7F\xDA\x10\xF6|\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`@Qh\x15S\x94\x92U\x90S\x11Q`\xBA\x1B` \x82\x01R`)\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x81\x03a\x0B\xCDW_\x84\x81R` \x86\x90R`@\x90 `\x08\x01Ta\x0B\xC4\x90`\x01`\xA0\x1B\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16CaH&V[\x92PPPa\x05AV[_\x81\x81R` \x86\x90R`@\x90 `\x08\x01T`\x01`\xA0\x1B\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x0C\x0EW`@Qb\xA7\xB0+`\xE0\x1B\x81R`\x04\x81\x01\x82\x90R`$\x01a\n*V[_\x81\x81R` \x86\x90R`@\x80\x82 `\x08\x90\x81\x01T\x87\x84R\x91\x90\x92 \x90\x91\x01Tg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x01`\xA0\x1B\x92\x83\x90\x04\x81\x16\x92\x90\x91\x04\x16\x80\x82\x11\x15a\x0CcWa\x0CX\x81\x83aH&V[\x94PPPPPa\x05AV[_\x94PPPPPa\x05AV[PP\x92\x91PPV[_a\x0C\x82\x83\x83a\x0E\x05V[\x80\x15a\x05\xCAWP_\x82\x81R` \x84\x90R`@\x90 a\x0C\x9F\x90a\x1E\x99V[`\x01\x14\x93\x92PPPV[_\x80a\x0C\xB5\x84\x84a\nnV[\x90P[`\t\x81\x01Ti\x01\0\0\0\0\0\0\0\0\0\x90\x04`\xFF\x16\x15a\x0C\xF6W\x80T_\x90\x81R`\x01\x85\x01` R`@\x90 Ta\x0C\xEE\x85\x82a\nnV[\x91PPa\x0C\xB8V[T\x93\x92PPPV[_\x83\x81R` \x85\x90R`@\x81 `\x08\x01T`\x01`\xA0\x1B\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\r?W`@Qb\xA7\xB0+`\xE0\x1B\x81R`\x04\x81\x01\x85\x90R`$\x01a\n*V[_a\rJ\x86\x86a\x18\x8FV[\x90Pa\r`g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x85\x16\x82aH9V[\x90P\x82g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81\x10\x15a\r\xB9W`@Q\x7F\x11\xA8\xD4\xD0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x82\x90Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x16`$\x82\x01R`D\x01a\n*V[_\x85\x81R` \x87\x90R`@\x90 a\r\xCF\x90a\x0E\xE2V[a\r\xD9\x86\x86a\t\xC3V[\x90P[\x94\x93PPPPV[_\x80a\r\xF1\x84`\x01aHLV[\x90Pa\r\xFD\x81\x84a\x1E\xDCV[P\x93\x92PPPV[_\x81\x81R` \x83\x90R`@\x81 `\x08\x01T`\x01`\xA0\x1B\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x0EFW`@Qb\xA7\xB0+`\xE0\x1B\x81R`\x04\x81\x01\x83\x90R`$\x01a\n*V[_\x82\x81R` \x84\x90R`@\x81 a\x0E\\\x90a\x1E\x05V[_\x81\x81R`\x01\x86\x01` R`@\x81 T\x91\x92P\x81\x90\x03a\x0E\xA8W`@Q\x7F\xDA\x10\xF6|\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`@Qh\x15S\x94\x92U\x90S\x11Q`\xBA\x1B` \x82\x01R`)\x01`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R\x80Q` \x90\x91\x01 \x14\x15\x94\x93PPPPV[_`\t\x82\x01Th\x01\0\0\0\0\0\0\0\0\x90\x04`\xFF\x16`\x01\x81\x11\x15a\x0F\x08Wa\x0F\x08a?\xF4V[\x14a\x0F^Wa\x0F\x16\x81a\x1FaV[`\t\x82\x01T`@Q\x7F#\xF8@]\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Ra\n*\x92\x91h\x01\0\0\0\0\0\0\0\0\x90\x04`\xFF\x16\x90`\x04\x01aHeV[`\t\x01\x80Tg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFC\x16h\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x90\x91\x16\x17h\x01\0\0\0\0\0\0\0\0\x17\x90UV[`@\x80Qa\x01\0\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R`\xC0\x81\x01\x82\x90R`\xE0\x81\x01\x82\x90R`@\x80Qa\x01\0\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R`\xC0\x81\x01\x82\x90R`\xE0\x81\x01\x91\x90\x91R_\x80\x87\x81R` \x89\x90R`@\x90 `\t\x01Th\x01\0\0\0\0\0\0\0\0\x90\x04`\xFF\x16`\x01\x81\x11\x15a\x10=Wa\x10=a?\xF4V[\x14a\x10\x99W_\x86\x81R` \x88\x90R`@\x90\x81\x90 `\t\x01T\x90Q\x7F#\xF8@]\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Ra\n*\x91\x88\x91h\x01\0\0\0\0\0\0\0\0\x90\x91\x04`\xFF\x16\x90`\x04\x01aHeV[a\x10\xA3\x87\x87a\x0E\x05V[a\x10\xDCW`@Q\x7F\x80\xE0~E\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x87\x90R`$\x01a\n*V[_\x86\x81R` \x88\x90R`@\x81 `@\x80Qa\x01\xE0\x81\x01\x82R\x82T\x81R`\x01\x80\x84\x01T` \x83\x01R`\x02\x84\x01T\x92\x82\x01\x92\x90\x92R`\x03\x83\x01T``\x82\x01R`\x04\x83\x01T`\x80\x82\x01R`\x05\x83\x01T`\xA0\x82\x01R`\x06\x83\x01T`\xC0\x82\x01R`\x07\x83\x01T`\xE0\x82\x01R`\x08\x83\x01T`\x01`\x01`\xA0\x1B\x03\x81\x16a\x01\0\x83\x01R`\x01`\xA0\x1B\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x81\x16a\x01 \x83\x01R`\t\x84\x01T\x90\x81\x16a\x01@\x83\x01R\x90\x92\x91a\x01`\x84\x01\x91h\x01\0\0\0\0\0\0\0\0\x90\x04`\xFF\x16\x90\x81\x11\x15a\x11\xA5Wa\x11\xA5a?\xF4V[`\x01\x81\x11\x15a\x11\xB6Wa\x11\xB6a?\xF4V[\x81R`\t\x91\x90\x91\x01Ti\x01\0\0\0\0\0\0\0\0\0\x81\x04`\xFF\x90\x81\x16` \x84\x01Rj\x01\0\0\0\0\0\0\0\0\0\0\x82\x04\x16\x15\x15`@\x80\x84\x01\x91\x90\x91Rk\x01\0\0\0\0\0\0\0\0\0\0\0\x90\x91\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16``\x90\x92\x01\x91\x90\x91R\x81\x01Q`\x80\x82\x01Q\x91\x92P_\x91a\x12*\x91\x90a\x17\xE6V[\x90P_\x80\x87\x80` \x01\x90Q\x81\x01\x90a\x12B\x91\x90aI\x08V[\x90\x92P\x90Pa\x12r\x89a\x12V\x85`\x01aH9V[``\x87\x01Q`\x80\x88\x01Qa\x12k\x90`\x01aH9V[\x86\x86a \x1FV[PP`@\x80Qa\x01\0\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R`\xC0\x81\x01\x82\x90R`\xE0\x81\x01\x82\x90R_a\x12\xD2\x85_\x01Q\x86` \x01Q\x87`@\x01Q\x8D\x88\x8Aa\x01\x80\x01Qa#=V[\x90Pa\x12\xDD\x81a$EV[_\x81\x81R` \x8E\x90R`@\x90 `\x08\x01T\x90\x93P`\x01`\xA0\x1B\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x13\x13Wa\x13\x10\x8C\x82a\x13\xBDV[\x91P[P`@\x80Qa\x01\0\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R`\xC0\x81\x01\x82\x90R`\xE0\x81\x01\x91\x90\x91R_a\x13s\x86_\x01Q\x8C\x87\x89``\x01Q\x8A`\x80\x01Q\x8Ba\x01\x80\x01Qa#=V[\x90Pa\x13\x7F\x8D\x82a\x13\xBDV[\x91PPa\x13\xAB\x83\x82_\x01Q\x8E_\x01_\x8F\x81R` \x01\x90\x81R` \x01_ a$\xF4\x90\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[\x91\x9B\x90\x9AP\x90\x98P\x96PPPPPPPV[`@\x80Qa\x01\0\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R`\xC0\x81\x01\x82\x90R`\xE0\x81\x01\x82\x90R\x90a\x14\x06\x83a$EV[_\x81\x81R` \x86\x90R`@\x90 `\x08\x01T\x90\x91P`\x01`\xA0\x1B\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x15a\x14eW`@Q\x7F\xBC\xED\xF3\xDE\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x82\x90R`$\x01a\n*V[_\x81\x81R` \x85\x81R`@\x91\x82\x90 \x85Q\x81U\x90\x85\x01Q`\x01\x80\x83\x01\x91\x90\x91U\x91\x85\x01Q`\x02\x82\x01U``\x85\x01Q`\x03\x82\x01U`\x80\x85\x01Q`\x04\x82\x01U`\xA0\x85\x01Q`\x05\x82\x01U`\xC0\x85\x01Q`\x06\x82\x01U`\xE0\x85\x01Q`\x07\x82\x01Ua\x01\0\x85\x01Q`\x08\x82\x01\x80Ta\x01 \x88\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x81\x16`\x01`\xA0\x1B\x02\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x92\x16`\x01`\x01`\xA0\x1B\x03\x90\x94\x16\x93\x90\x93\x17\x17\x90Ua\x01@\x86\x01Q`\t\x83\x01\x80T\x91\x90\x92\x16\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\x82\x16\x81\x17\x83Ua\x01`\x88\x01Q\x88\x95\x90\x93\x92h\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16\x90\x91\x17\x90h\x01\0\0\0\0\0\0\0\0\x90\x84\x90\x81\x11\x15a\x15\x88Wa\x15\x88a?\xF4V[\x02\x17\x90UPa\x01\x80\x82\x81\x01Q`\t\x92\x90\x92\x01\x80Ta\x01\xA0\x85\x01Qa\x01\xC0\x90\x95\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16k\x01\0\0\0\0\0\0\0\0\0\0\0\x02r\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\x19\x95\x15\x15j\x01\0\0\0\0\0\0\0\0\0\0\x02\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\xFF\x90\x96\x16i\x01\0\0\0\0\0\0\0\0\0\x02\x95\x90\x95\x16\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x92\x16\x91\x90\x91\x17\x93\x90\x93\x17\x93\x90\x93\x16\x91\x90\x91\x17\x90\x91U\x83\x01Q\x83Q`@\x80\x86\x01Q` \x80\x88\x01Q`\x80\x89\x01Q\x84Q\x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xF8\x98\x90\x98\x1B\x97\x90\x97\x16\x87\x84\x01R`!\x87\x01\x95\x90\x95R`A\x86\x01\x92\x90\x92R`a\x85\x01\x91\x90\x91R`\x81\x80\x85\x01\x93\x90\x93R\x81Q\x80\x85\x03\x90\x93\x01\x83R`\xA1\x90\x93\x01\x90R\x80Q\x91\x01 _\x90_\x81\x81R`\x01\x87\x01` R`@\x81 T\x91\x92P\x81\x90\x03a\x170W`@Qh\x15S\x94\x92U\x90S\x11Q`\xBA\x1B` \x82\x01R`)\x01`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x81R\x81Q` \x92\x83\x01 _\x85\x81R`\x01\x8A\x01\x90\x93R\x91 Ua\x17wV[`@Qh\x15S\x94\x92U\x90S\x11Q`\xBA\x1B` \x82\x01R`)\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x81\x03a\x17wW_\x82\x81R`\x01\x87\x01` R`@\x90 \x83\x90U[`@\x80Qa\x01\0\x81\x01\x82R\x84\x81R` \x80\x82\x01\x85\x90R\x87Q\x82\x84\x01R`\xE0\x88\x01Q``\x83\x01R_\x86\x81R\x90\x89\x90R\x91\x90\x91 `\x80\x82\x01\x90a\x17\xB7\x90a\x1E\x99V[\x81Ra\x01\x80\x87\x01Q`\xFF\x16` \x82\x01R\x91\x15\x15`@\x83\x01R`\xE0\x90\x95\x01Q\x15\x15``\x90\x91\x01RP\x91\x93\x92PPPV[_`\x02a\x17\xF3\x84\x84aH&V[\x10\x15a\x185W`@Q\x7F\x90)\x85\x94\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x84\x90R`$\x81\x01\x83\x90R`D\x01a\n*V[a\x18?\x83\x83aH&V[`\x02\x03a\x18XWa\x18Q\x83`\x01aH9V[\x90Pa\x05AV[_\x83a\x18e`\x01\x85aH&V[\x18\x90P_a\x18r\x82a%tV[\x90P_\x19\x81\x1B\x80a\x18\x84`\x01\x87aH&V[\x16\x96\x95PPPPPPV[_\x80a\x18\x9B\x84\x84a\n\xC1V[_\x84\x81R` \x86\x90R`@\x90 `\x05\x01T\x90\x91P\x15a\x05\xCAW_\x83\x81R` \x85\x90R`@\x80\x82 `\x05\x81\x01T\x83R\x81\x83 `\t\x90\x81\x01T`\x06\x90\x92\x01T\x84R\x91\x90\x92 \x01Tg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFk\x01\0\0\0\0\0\0\0\0\0\0\0\x92\x83\x90\x04\x81\x16\x92\x90\x91\x04\x16\x80\x82\x10a\x19\x0EW\x80a\x19\x10V[\x81[a\x19\x1A\x90\x84aH9V[\x96\x95PPPPPPV[_\x8B\x81R` \x8D\x90R`@\x90 `\x08\x01T`\x01`\xA0\x1B\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x19eW`@Qb\xA7\xB0+`\xE0\x1B\x81R`\x04\x81\x01\x8C\x90R`$\x01a\n*V[`\x02_\x8C\x81R` \x8E\x90R`@\x90 `\t\x01Ta\x19\x92\x90i\x01\0\0\0\0\0\0\0\0\0\x90\x04`\xFF\x16\x85a\x1E\xDCV[`\x02\x81\x11\x15a\x19\xA3Wa\x19\xA3a?\xF4V[\x14a\x19\xFEW_\x8B\x81R` \x8D\x90R`@\x90\x81\x90 `\t\x01T\x90Q\x7F4\x8A\xEF\xDF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Ri\x01\0\0\0\0\0\0\0\0\0\x90\x91\x04`\xFF\x16`\x04\x82\x01R`$\x01a\n*V[_\x8B\x81R` \x8D\x90R`@\x90 a\x1A\x14\x90a\x1E\x99V[`\x01\x14a\x1AfW_\x8B\x81R` \x8D\x90R`@\x90 a\x1A1\x90a\x1E\x99V[`@Q\x7FkY^P\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\n*\x91\x81R` \x01\x90V[_\x8B\x81R` \x8D\x90R`@\x90 `\x02\x01T\x8B\x82[`\x01\x8F_\x01_\x84\x81R` \x01\x90\x81R` \x01_ `\t\x01`\t\x90T\x90a\x01\0\n\x90\x04`\xFF\x16`\xFF\x16\x11\x15a\x1B\x15W_\x8F_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x01T\x90P\x8F`\x01\x01_\x82\x81R` \x01\x90\x81R` \x01_ T\x92P\x8F_\x01_\x84\x81R` \x01\x90\x81R` \x01_ `\x02\x01T\x82a\x1A\xF7\x91\x90aIhV[a\x1B\x01\x90\x85aH9V[\x93Pa\x1B\r\x86\x83aIhV[\x91PPa\x1AzV[PPa\x1Bm\x8D_\x01_\x8E\x81R` \x01\x90\x81R` \x01_ `\x01\x01T\x8B_\x015\x83\x8B\x8B\x80\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83` \x02\x80\x82\x847_\x92\x01\x91\x90\x91RPa&\xB8\x92PPPV[_\x8B`\x01`\x01`\xA0\x1B\x03\x16c\xB5\x11/\xD2\x8B\x84\x8E_\x015\x8F\x80` \x01\x90a\x1B\x93\x91\x90aI\x7FV[`@Q\x86c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x1B\xB3\x95\x94\x93\x92\x91\x90aI\xE0V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x1B\xCEW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x1B\xF2\x91\x90aJAV[\x90Pa\x1CS\x8E_\x01_\x8F\x81R` \x01\x90\x81R` \x01_ `\x03\x01T\x82\x84`\x01a\x1C\x1B\x91\x90aH9V[\x8A\x8A\x80\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83` \x02\x80\x82\x847_\x92\x01\x91\x90\x91RPa&\xB8\x92PPPV[_\x8D\x81R` \x8F\x90R`@\x90 a\x1Ci\x90a\x0E\xE2V[a\x1Cs\x8E\x8Ea\t\xC3V[PPP_\x99\x8ARPPP` \x97\x90\x97RPP`@\x90\x93 `\t\x01\x80Tr\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\x19\x16r\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\x17\x90UPPPPV[_\x80a\x1C\xD9\x85\x85a\x1C\xD3\x88\x88a\x18\x8FV[\x86a'DV[\x91P\x91P\x93P\x93\x91PPV[`@\x80Qa\x01\0\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R`\xC0\x81\x01\x82\x90R`\xE0\x81\x01\x82\x90R\x90\x80a\x1D3\x8A\x8A\x8A\x8A\x89a'\xDBV[\x91P\x91P_a\x1DC\x83\x8B\x89a-rV[\x90P_a\x1DQ\x83\x83\x8Da.\xCDV[\x90P\x85\x15a\x1D\xEBW_a\x1Dc\x82a/oV[3_\x90\x81R`\x03\x8F\x01` \x90\x81R`@\x80\x83 \x84\x84R\x90\x91R\x90 T\x90\x91P`\xFF\x16\x15a\x1D\xC5W`@Q\x7FZF\xAC:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R3`\x04\x82\x01R`$\x81\x01\x82\x90R`D\x01a\n*V[3_\x90\x81R`\x03\x8E\x01` \x90\x81R`@\x80\x83 \x93\x83R\x92\x90R \x80T`\xFF\x19\x16`\x01\x17\x90U[a\x1D\xF5\x8C\x82a\x13\xBDV[\x9C\x9BPPPPPPPPPPPPV[`\t\x81\x01T\x81T`\x02\x83\x01T`\x01\x84\x01T`\x04\x85\x01T`@\x80Qi\x01\0\0\0\0\0\0\0\0\0\x90\x96\x04`\xF8\x1B\x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16` \x80\x88\x01\x91\x90\x91R`!\x87\x01\x95\x90\x95R`A\x86\x01\x93\x90\x93R`a\x85\x01\x91\x90\x91R`\x81\x80\x85\x01\x91\x90\x91R\x81Q\x80\x85\x03\x90\x91\x01\x81R`\xA1\x90\x93\x01\x90R\x81Q\x91\x01 _\x90a\x05AV[_\x80\x82`\x02\x01T\x83`\x04\x01Ta\x1E\xAF\x91\x90aH&V[\x90P\x80_\x03a\x05AWa\x1E\xC1\x83a\x1FaV[`@Qb\xA7\xB0+`\xE0\x1B\x81R`\x04\x01a\n*\x91\x81R` \x01\x90V[_\x82`\xFF\x16_\x03a\x1E\xEEWP_a\x05AV[\x81`\xFF\x16\x83`\xFF\x16\x11a\x1F\x03WP`\x01a\x05AV[a\x1F\x0E\x82`\x01aHLV[`\xFF\x16\x83`\xFF\x16\x03a\x1F\"WP`\x02a\x05AV[`@Q\x7F\xAE\r\xA5x\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\xFF\x80\x85\x16`\x04\x83\x01R\x83\x16`$\x82\x01R`D\x01a\n*V[`\t\x81\x01T\x81T`\x02\x83\x01T`\x01\x84\x01T`\x04\x85\x01T`\x03\x86\x01T`@\x80Qi\x01\0\0\0\0\0\0\0\0\0\x90\x97\x04`\xF8\x1B\x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16` \x80\x89\x01\x91\x90\x91R`!\x88\x01\x96\x90\x96R`A\x87\x01\x94\x90\x94R`a\x86\x01\x92\x90\x92R`\x81\x80\x86\x01\x91\x90\x91R\x82Q\x80\x86\x03\x90\x91\x01\x81R`\xA1\x85\x01\x83R\x80Q\x90\x84\x01 `\xC1\x85\x01R`\xE1\x80\x85\x01\x91\x90\x91R\x81Q\x80\x85\x03\x90\x91\x01\x81Ra\x01\x01\x90\x93\x01\x90R\x81Q\x91\x01 _\x90a\x05AV[_\x85\x11a nW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x14`$\x82\x01R\x7FPre-size cannot be 0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\n*V[\x85a x\x83a/\xF4V[\x14a \xC5W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1B`$\x82\x01R\x7FPre expansion root mismatch\0\0\0\0\0`D\x82\x01R`d\x01a\n*V[\x84a \xCF\x83a1\x84V[\x14a!BW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`!`$\x82\x01R\x7FPre size does not match expansio`D\x82\x01R\x7Fn\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\n*V[\x82\x85\x10a!\x91W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01\x81\x90R`$\x82\x01R\x7FPre size not less than post size`D\x82\x01R`d\x01a\n*V[_\x85\x90P_\x80a!\xA3\x85_\x87Qa1\xD3V[\x90P[\x85\x83\x10\x15a\"eW_a!\xB9\x84\x88a3GV[\x90P\x84Q\x83\x10a\"\x0BW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x12`$\x82\x01R\x7FIndex out of range\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\n*V[a\"/\x82\x82\x87\x86\x81Q\x81\x10a\"\"Wa\"\"aJXV[` \x02` \x01\x01Qa4.V[\x91P`\x01\x81\x1Ba\"?\x81\x86aH9V[\x94P\x87\x85\x11\x15a\"QWa\"QaJlV[\x83a\"[\x81aJ\x80V[\x94PPPPa!\xA6V[\x86a\"o\x82a/\xF4V[\x14a\"\xE2W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\"`$\x82\x01R\x7FPost expansion root not equal po`D\x82\x01R\x7Fst\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\n*V[\x83Q\x82\x14a#2W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x16`$\x82\x01R\x7FIncomplete proof usage\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\n*V[PPPPPPPPPV[`@\x80Qa\x01\xE0\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R`\xC0\x81\x01\x82\x90R`\xE0\x81\x01\x82\x90Ra\x01\0\x81\x01\x82\x90Ra\x01 \x81\x01\x82\x90Ra\x01@\x81\x01\x82\x90Ra\x01`\x81\x01\x82\x90Ra\x01\x80\x81\x01\x82\x90Ra\x01\xA0\x81\x01\x82\x90Ra\x01\xC0\x81\x01\x91\x90\x91Ra#\xC2\x87\x87\x87\x87\x87a9\x96V[P`@\x80Qa\x01\xE0\x81\x01\x82R\x96\x87R` \x87\x01\x95\x90\x95R\x93\x85\x01\x92\x90\x92R``\x84\x01R`\x80\x83\x01R_`\xA0\x83\x01\x81\x90R`\xC0\x83\x01\x81\x90R`\xE0\x83\x01\x81\x90Ra\x01\0\x83\x01\x81\x90Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFC\x16a\x01 \x84\x01Ra\x01@\x83\x01\x81\x90Ra\x01`\x83\x01\x81\x90R`\xFF\x90\x91\x16a\x01\x80\x83\x01Ra\x01\xA0\x82\x01\x81\x90Ra\x01\xC0\x82\x01R\x90V[a\x01\x80\x81\x01Q\x81Q`@\x80\x84\x01Q` \x80\x86\x01Q`\x80\x87\x01Q``\x88\x01Q\x85Q`\xF8\x98\x90\x98\x1B\x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x88\x85\x01R`!\x88\x01\x96\x90\x96R`A\x87\x01\x93\x90\x93R`a\x86\x01R`\x81\x80\x86\x01\x92\x90\x92R\x82Q\x80\x86\x03\x90\x92\x01\x82R`\xA1\x85\x01\x83R\x81Q\x91\x81\x01\x91\x90\x91 `\xC1\x85\x01R`\xE1\x80\x85\x01\x93\x90\x93R\x81Q\x80\x85\x03\x90\x93\x01\x83Ra\x01\x01\x90\x93\x01\x90R\x80Q\x91\x01 _\x90a\x05AV[`\x05\x83\x01T\x15\x15\x80a%\tWP`\x06\x83\x01T\x15\x15[\x15a%dWa%\x17\x83a\x1FaV[`\x05\x84\x01T`\x06\x85\x01T`@Q\x7F\x8B\x0Eq\xD0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x93\x90\x93R`$\x83\x01\x91\x90\x91R`D\x82\x01R`d\x01a\n*V[`\x05\x83\x01\x91\x90\x91U`\x06\x90\x91\x01UV[_\x81_\x03a%\xC4W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1C`$\x82\x01R\x7FZero has no significant bits\0\0\0\0`D\x82\x01R`d\x01a\n*V[p\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82\x10a%\xEFW`\x80\x91\x82\x1C\x91a%\xEC\x90\x82aH9V[\x90P[h\x01\0\0\0\0\0\0\0\0\x82\x10a&\x12W`@\x91\x82\x1C\x91a&\x0F\x90\x82aH9V[\x90P[d\x01\0\0\0\0\x82\x10a&1W` \x91\x82\x1C\x91a&.\x90\x82aH9V[\x90P[b\x01\0\0\x82\x10a&NW`\x10\x91\x82\x1C\x91a&K\x90\x82aH9V[\x90P[a\x01\0\x82\x10a&jW`\x08\x91\x82\x1C\x91a&g\x90\x82aH9V[\x90P[`\x10\x82\x10a&\x85W`\x04\x91\x82\x1C\x91a&\x82\x90\x82aH9V[\x90P[`\x04\x82\x10a&\xA0W`\x02\x91\x82\x1C\x91a&\x9D\x90\x82aH9V[\x90P[`\x02\x82\x10a&\xB3Wa\x05A`\x01\x82aH9V[\x91\x90PV[_a&\xEC\x82\x84\x86`@Q` \x01a&\xD1\x91\x81R` \x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 a:\x87V[\x90P\x80\x85\x14a'=W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x17`$\x82\x01R\x7FInvalid inclusion proof\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\n*V[PPPPPV[_\x80_a'R\x87\x87\x86a;:V[\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x85\x11a'iW\x84a'sV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF[\x94P\x80\x85\x11\x15a'\xCCWPPP_\x83\x81R` \x85\x90R`@\x90 `\t\x01\x80Tr\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\x19\x16k\x01\0\0\0\0\0\0\0\0\0\0\0g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x85\x16\x02\x17\x90U`\x01\x82a'\xD2V[_\x92P\x90P[\x94P\x94\x92PPPV[`@\x80Q``\x80\x82\x01\x83R_\x80\x83R` \x83\x01R\x91\x81\x01\x91\x90\x91R_\x80a(\x0Ea(\x08` \x89\x01\x89aJ\x98V[\x85a\x1E\xDCV[`\x02\x81\x11\x15a(\x1FWa(\x1Fa?\xF4V[\x03a+LW` \x85\x01Q\x85Q_\x03a(cW`@Q\x7F\xE9k\xC6\x1A\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x85Q``\x88\x015\x14a(\xB1W\x85Q`@Q\x7F[\x17z<\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x91\x90\x91R``\x88\x015`$\x82\x01R`D\x01a\n*V[\x85`@\x01Qa(\xECW`@Q\x7F\xC1i$6\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x85``\x01Qa)'W`@Q\x7F\xB4]\x1C:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a)4`\xA0\x88\x01\x88aI\x7FV[\x90P_\x03a)nW`@Q\x7F\xC9\xCC\xACP\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_a)|`\xA0\x89\x01\x89aI\x7FV[\x81\x01\x90a)\x89\x91\x90aKNV[P\x90\x91P_\x90P\x87`\x80\x01Q` \x01Q`\x02\x81\x11\x15a)\xAAWa)\xAAa?\xF4V[\x03a)\xE1W`@Q\x7FF6^R\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x87`\xA0\x01Q` \x01Q`\x02\x81\x11\x15a)\xFCWa)\xFCa?\xF4V[\x03a*3W`@Q\x7F\x89\x99\x85}\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x86`\x01`\x01`\xA0\x1B\x03\x16c\xC3\x96\x19\xC4a*P\x8A`\x80\x01Qa;\xA7V[`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a*l\x91\x90aK\xB3V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a*\x87W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a*\xAB\x91\x90aJAV[\x90P_\x87`\x01`\x01`\xA0\x1B\x03\x16c\xC3\x96\x19\xC4a*\xCA\x8B`\xA0\x01Qa;\xA7V[`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a*\xE6\x91\x90aK\xB3V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a+\x01W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a+%\x91\x90aJAV[`@\x80Q``\x81\x01\x82R\x93\x84R` \x84\x01\x91\x90\x91R\x82\x01\x92\x90\x92R\x93P\x90\x91Pa-h\x90PV[a+Z\x87\x87``\x015a\x0CwV[a+\x96W`@Q\x7F\xFFm\x9B\xD7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R``\x87\x015`\x04\x82\x01R`$\x01a\n*V[``\x86\x015_\x90\x81R` \x88\x90R`@\x81 \x90a+\xB2\x82a\x1E\x05V[\x90P_`\t\x83\x01Th\x01\0\0\0\0\0\0\0\0\x90\x04`\xFF\x16`\x01\x81\x11\x15a+\xDAWa+\xDAa?\xF4V[\x14a,\x11W`@Q\x7F\x12E\x9F\xFD\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\t\x82\x01Ta,0\x90i\x01\0\0\0\0\0\0\0\0\0\x90\x04`\xFF\x16\x86a\r\xE4V[`\xFF\x16a,@` \x8A\x01\x8AaJ\x98V[`\xFF\x16\x14a,\xA8Wa,U` \x89\x01\x89aJ\x98V[`\t\x83\x01T`@Q\x7F\xAC\x9Ea\x16\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\xFF\x92\x83\x16`\x04\x82\x01Ri\x01\0\0\0\0\0\0\0\0\0\x90\x91\x04\x90\x91\x16`$\x82\x01R`D\x01a\n*V[a,\xB5`\xA0\x89\x01\x89aI\x7FV[\x90P_\x03a,\xEFW`@Q\x7F\xC9\xCC\xACP\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x80\x80\x80\x80a-\x01`\xA0\x8E\x01\x8EaI\x7FV[\x81\x01\x90a-\x0E\x91\x90aL,V[\x94P\x94P\x94P\x94P\x94Pa-,\x87`\x01\x01T\x86\x89`\x02\x01T\x86a&\xB8V[a-@\x87`\x03\x01T\x85\x89`\x04\x01T\x85a&\xB8V[`@Q\x80``\x01`@R\x80\x86\x81R` \x01\x85\x81R` \x01\x82\x81RP\x86\x98P\x98PPPPPPPP[\x95P\x95\x93PPPPV[`@\x80Q_\x80\x82R` \x82\x01\x90\x92R\x81\x90a-\x97\x90a-\x92\x90\x87Qa;\xE1V[a/\xF4V[\x90Pa-\xA2\x83a\nHV[a-\xDBW`@Q\x7F\xEA\xFE\xDB\xFC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x84\x90R`$\x01a\n*V[\x82\x84`@\x015\x14a.%W`@\x80Q\x7F\xDF\xCCb\xBC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\x90\x85\x015`\x04\x82\x01R`$\x81\x01\x84\x90R`D\x01a\n*V[a.A\x84` \x015\x86` \x01Q\x86`@\x015\x88`@\x01Qa&\xB8V[a.N`\x80\x85\x01\x85aI\x7FV[\x90P_\x03a.\x88W`@Q\x7F4*\x07R\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x80a.\x97`\x80\x87\x01\x87aI\x7FV[\x81\x01\x90a.\xA4\x91\x90aL\xC1V[\x90\x92P\x90Pa.\xC2\x83`\x01` \x89\x015a\x12k`@\x8B\x015\x83aH9V[P\x90\x95\x94PPPPPV[`@\x80Qa\x01\xE0\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R`\xC0\x81\x01\x82\x90R`\xE0\x81\x01\x82\x90Ra\x01\0\x81\x01\x82\x90Ra\x01 \x81\x01\x82\x90Ra\x01@\x81\x01\x82\x90Ra\x01`\x81\x01\x82\x90Ra\x01\x80\x81\x01\x82\x90Ra\x01\xA0\x81\x01\x82\x90Ra\x01\xC0\x81\x01\x91\x90\x91Ra\x05\xC7\x84\x84_` \x86\x01\x805\x90`@\x88\x015\x90``\x89\x015\x903\x90a/j\x90\x8BaJ\x98V[a<\x16V[a\x01\x80\x81\x01Q\x81Q`@\x80\x84\x01Q` \x80\x86\x01Q`\x80\x87\x01Q\x84Q`\xF8\x97\x90\x97\x1B\x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x87\x84\x01R`!\x87\x01\x95\x90\x95R`A\x86\x01\x92\x90\x92R`a\x85\x01\x91\x90\x91R`\x81\x80\x85\x01\x93\x90\x93R\x81Q\x80\x85\x03\x90\x93\x01\x83R`\xA1\x90\x93\x01\x90R\x80Q\x91\x01 _\x90a\x05AV[_\x80\x82Q\x11a0EW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x16`$\x82\x01R\x7FEmpty merkle expansion\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\n*V[`@\x82Q\x11\x15a0\x97W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1A`$\x82\x01R\x7FMerkle expansion too large\0\0\0\0\0\0`D\x82\x01R`d\x01a\n*V[_\x80[\x83Q\x81\x10\x15a1}W_\x84\x82\x81Q\x81\x10a0\xB6Wa0\xB6aJXV[` \x02` \x01\x01Q\x90P\x82_\x80\x1B\x03a1 W\x80\x15a1\x1BW\x80\x92P`\x01\x85Qa0\xE0\x91\x90aH&V[\x82\x14a1\x1BW`@Qa1\x02\x90\x84\x90_\x90` \x01\x91\x82R` \x82\x01R`@\x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x92P[a1tV[\x80\x15a1?W`@\x80Q` \x81\x01\x83\x90R\x90\x81\x01\x84\x90R``\x01a1\x02V[`@Qa1[\x90\x84\x90_\x90` \x01\x91\x82R` \x82\x01R`@\x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x92P[P`\x01\x01a0\x9AV[P\x92\x91PPV[_\x80\x80[\x83Q\x81\x10\x15a1}W\x83\x81\x81Q\x81\x10a1\xA3Wa1\xA3aJXV[` \x02` \x01\x01Q_\x80\x1B\x14a1\xCBWa1\xBE\x81`\x02aM\xF7V[a1\xC8\x90\x83aH9V[\x91P[`\x01\x01a1\x88V[``\x81\x83\x10a2$W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x17`$\x82\x01R\x7FStart not less than end\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\n*V[\x83Q\x82\x11\x15a2\x9BW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`!`$\x82\x01R\x7FEnd not less or equal than lengt`D\x82\x01R\x7Fh\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\n*V[_a2\xA6\x84\x84aH&V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a2\xBEWa2\xBEaA\x06V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a2\xE7W\x81` \x01` \x82\x02\x806\x837\x01\x90P[P\x90P\x83[\x83\x81\x10\x15a3>W\x85\x81\x81Q\x81\x10a3\x06Wa3\x06aJXV[` \x02` \x01\x01Q\x82\x86\x83a3\x1B\x91\x90aH&V[\x81Q\x81\x10a3+Wa3+aJXV[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a2\xECV[P\x94\x93PPPPV[_\x81\x83\x10a3\x97W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x17`$\x82\x01R\x7FStart not less than end\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\n*V[_a3\xA3\x83\x85\x18a%tV[\x90P_`\x01a3\xB2\x83\x82aH9V[`\x01\x90\x1Ba3\xC0\x91\x90aH&V[\x90P\x84\x81\x16\x84\x82\x16\x81\x15a3\xD7Wa\x0CX\x82a=\xBDV[\x80\x15a3\xE6Wa\x0CX\x81a%tV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1B`$\x82\x01R\x7FBoth y and z cannot be zero\0\0\0\0\0`D\x82\x01R`d\x01a\n*V[```@\x83\x10a4\x80W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0E`$\x82\x01R\x7FLevel too high\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\n*V[_\x82\x90\x03a4\xD0W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1B`$\x82\x01R\x7FCannot append empty subtree\0\0\0\0\0`D\x82\x01R`d\x01a\n*V[`@\x84Q\x11\x15a5\"W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1A`$\x82\x01R\x7FMerkle expansion too large\0\0\0\0\0\0`D\x82\x01R`d\x01a\n*V[\x83Q_\x03a5\x9FW_a56\x84`\x01aH9V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a5NWa5NaA\x06V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a5wW\x81` \x01` \x82\x02\x806\x837\x01\x90P[P\x90P\x82\x81\x85\x81Q\x81\x10a5\x8DWa5\x8DaJXV[` \x90\x81\x02\x91\x90\x91\x01\x01R\x90Pa\x05\xCAV[\x83Q\x83\x10a6\x15W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`5`$\x82\x01R\x7FLevel greater than highest level`D\x82\x01R\x7F of current expansion\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\n*V[\x81_a6 \x86a1\x84V[\x90P_a6.\x86`\x02aM\xF7V[a68\x90\x83aH9V[\x90P_a6D\x83a%tV[a6M\x83a%tV[\x11a6\x9BW\x87Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a6lWa6laA\x06V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a6\x95W\x81` \x01` \x82\x02\x806\x837\x01\x90P[Pa6\xEBV[\x87Qa6\xA8\x90`\x01aH9V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a6\xC0Wa6\xC0aA\x06V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a6\xE9W\x81` \x01` \x82\x02\x806\x837\x01\x90P[P[\x90P`@\x81Q\x11\x15a7?W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1C`$\x82\x01R\x7FAppend creates oversize tree\0\0\0\0`D\x82\x01R`d\x01a\n*V[_[\x88Q\x81\x10\x15a8\xEBW\x87\x81\x10\x15a7\xE7W\x88\x81\x81Q\x81\x10a7dWa7daJXV[` \x02` \x01\x01Q_\x80\x1B\x14a7\xE2W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\"`$\x82\x01R\x7FAppend above least significant b`D\x82\x01R\x7Fit\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\n*V[a8\xE3V[_\x85\x90\x03a8,W\x88\x81\x81Q\x81\x10a8\x01Wa8\x01aJXV[` \x02` \x01\x01Q\x82\x82\x81Q\x81\x10a8\x1BWa8\x1BaJXV[` \x02` \x01\x01\x81\x81RPPa8\xE3V[\x88\x81\x81Q\x81\x10a8>Wa8>aJXV[` \x02` \x01\x01Q_\x80\x1B\x03a8tW\x84\x82\x82\x81Q\x81\x10a8aWa8aaJXV[` \x90\x81\x02\x91\x90\x91\x01\x01R_\x94Pa8\xE3V[_\x80\x1B\x82\x82\x81Q\x81\x10a8\x89Wa8\x89aJXV[` \x02` \x01\x01\x81\x81RPP\x88\x81\x81Q\x81\x10a8\xA7Wa8\xA7aJXV[` \x02` \x01\x01Q\x85`@Q` \x01a8\xCA\x92\x91\x90\x91\x82R` \x82\x01R`@\x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x94P[`\x01\x01a7AV[P\x83\x15a9\x1FW\x83\x81`\x01\x83Qa9\x02\x91\x90aH&V[\x81Q\x81\x10a9\x12Wa9\x12aJXV[` \x02` \x01\x01\x81\x81RPP[\x80`\x01\x82Qa9.\x91\x90aH&V[\x81Q\x81\x10a9>Wa9>aJXV[` \x02` \x01\x01Q_\x80\x1B\x03a\t\xB8W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0F`$\x82\x01R\x7FLast entry zero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\n*V[_\x85\x90\x03a9\xD0W`@Q\x7F\x8Dy\xDB\xBC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x82\x81\x11a:\x13W`@Q\x7F `\xFA\xF4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x84\x90R`$\x81\x01\x82\x90R`D\x01a\n*V[_\x84\x90\x03a:MW`@Q\x7F\x83\xC6\x83\xE4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x82\x90\x03a'=W`@Q\x7F\\\xB6\xE5\xBB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x82Q_\x90a\x01\0\x81\x11\x15a:\xD2W`@Q\x7F\xFD\xAC3\x1E\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x82\x90Ra\x01\0`$\x82\x01R`D\x01a\n*V[\x82_[\x82\x81\x10\x15a;0W_\x87\x82\x81Q\x81\x10a:\xF0Wa:\xF0aJXV[` \x02` \x01\x01Q\x90P\x81`\x01\x90\x1B\x87\x16_\x03a;\x19W\x82_R\x80` R`@_ \x92Pa;'V[\x80_R\x82` R`@_ \x92P[P`\x01\x01a:\xD5V[P\x95\x94PPPPPV[_\x82\x81R` \x84\x90R`@\x81 `\t\x01Tk\x01\0\0\0\0\0\0\0\0\0\0\0\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82\x81\x10a\x05\xC7W`@Q\x7F\xD1\xF5\x92\x81\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x82\x90R`$\x81\x01\x84\x90R`D\x01a\n*V[a;\xAFa>(V[`@Q\x80`@\x01`@R\x80\x83_\x01Q\x81R` \x01\x83` \x01Q`\x02\x81\x11\x15a;\xD9Wa;\xD9a?\xF4V[\x90R\x92\x91PPV[``a\x05\xCA\x83_\x84`@Q` \x01a;\xFB\x91\x81R` \x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 a4.V[`@\x80Qa\x01\xE0\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R`\xC0\x81\x01\x82\x90R`\xE0\x81\x01\x82\x90Ra\x01\0\x81\x01\x82\x90Ra\x01 \x81\x01\x82\x90Ra\x01@\x81\x01\x82\x90Ra\x01`\x81\x01\x82\x90Ra\x01\x80\x81\x01\x82\x90Ra\x01\xA0\x81\x01\x82\x90Ra\x01\xC0\x81\x01\x91\x90\x91R`\x01`\x01`\xA0\x1B\x03\x83\x16a<\xCEW`@Q\x7F\xF2\x89\xE6W\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x84\x90\x03a=\x08W`@Q\x7Fi2\xBC\xFD\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a=\x15\x89\x89\x89\x89\x89a9\x96V[`@Q\x80a\x01\xE0\x01`@R\x80\x8A\x81R` \x01\x89\x81R` \x01\x88\x81R` \x01\x87\x81R` \x01\x86\x81R` \x01_\x80\x1B\x81R` \x01_\x80\x1B\x81R` \x01\x85\x81R` \x01\x84`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01Cg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_`\x01\x81\x11\x15a=\x96Wa=\x96a?\xF4V[\x81R`\xFF\x84\x16` \x82\x01R_`@\x82\x01\x81\x90R``\x90\x91\x01R\x90P\x98\x97PPPPPPPPV[_\x80\x82\x11a>\rW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1C`$\x82\x01R\x7FZero has no significant bits\0\0\0\0`D\x82\x01R`d\x01a\n*V[_\x82\x80a>\x1B`\x01\x82aH&V[\x16\x18\x90Pa\x05\xCA\x81a%tV[`@Q\x80`@\x01`@R\x80a>;a>GV[\x81R` \x01_[\x90R\x90V[`@Q\x80`@\x01`@R\x80a>Za>cV[\x81R` \x01a>B[`@Q\x80`@\x01`@R\x80`\x02\x90` \x82\x02\x806\x837P\x91\x92\x91PPV[_` \x82\x84\x03\x12\x15a>\x91W_\x80\xFD[P5\x91\x90PV[\x805`\xFF\x81\x16\x81\x14a&\xB3W_\x80\xFD[_\x80`@\x83\x85\x03\x12\x15a>\xB9W_\x80\xFD[\x825\x91Pa>\xC9` \x84\x01a>\x98V[\x90P\x92P\x92\x90PV[_\x80`@\x83\x85\x03\x12\x15a>\xE3W_\x80\xFD[PP\x805\x92` \x90\x91\x015\x91PV[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x054W_\x80\xFD[\x805a&\xB3\x81a>\xF2V[\x805\x80\x15\x15\x81\x14a&\xB3W_\x80\xFD[_\x80_``\x84\x86\x03\x12\x15a?2W_\x80\xFD[\x835a?=\x81a>\xF2V[\x92P` \x84\x015\x91Pa?R`@\x85\x01a?\x11V[\x90P\x92P\x92P\x92V[\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a&\xB3W_\x80\xFD[_\x80_``\x84\x86\x03\x12\x15a?\x84W_\x80\xFD[\x835\x92Pa?\x94` \x85\x01a?[V[\x91Pa?R`@\x85\x01a?[V[_\x80`@\x83\x85\x03\x12\x15a?\xB3W_\x80\xFD[\x825a?\xBE\x81a>\xF2V[\x94` \x93\x90\x93\x015\x93PPPV[_\x80`@\x83\x85\x03\x12\x15a?\xDDW_\x80\xFD[a?\xE6\x83a>\x98V[\x91Pa>\xC9` \x84\x01a>\x98V[cNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[`\x02\x81\x10a@\x18Wa@\x18a?\xF4V[\x90RV[_a\x01\xE0\x82\x01\x90P\x82Q\x82R` \x83\x01Q` \x83\x01R`@\x83\x01Q`@\x83\x01R``\x83\x01Q``\x83\x01R`\x80\x83\x01Q`\x80\x83\x01R`\xA0\x83\x01Q`\xA0\x83\x01R`\xC0\x83\x01Q`\xC0\x83\x01R`\xE0\x83\x01Q`\xE0\x83\x01Ra\x01\0\x80\x84\x01Qa@\x89\x82\x85\x01\x82`\x01`\x01`\xA0\x1B\x03\x16\x90RV[PPa\x01 \x83\x81\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x84\x83\x01RPPa\x01@\x83\x81\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x84\x83\x01RPPa\x01`\x80\x84\x01Qa@\xCE\x82\x85\x01\x82a@\x08V[PPa\x01\x80\x83\x81\x01Q`\xFF\x16\x90\x83\x01Ra\x01\xA0\x80\x84\x01Q\x15\x15\x90\x83\x01Ra\x01\xC0\x80\x84\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x82\x85\x01Ra\x0CoV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@Qa\x01\xE0\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15aA>WaA>aA\x06V[`@R\x90V[`@Q``\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15aA>WaA>aA\x06V[`@\x80Q\x90\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15aA>WaA>aA\x06V[`@Q`\xC0\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15aA>WaA>aA\x06V[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15aA\xD6WaA\xD6aA\x06V[`@R\x91\x90PV[_\x80_``\x84\x86\x03\x12\x15aA\xF0W_\x80\xFD[\x835\x92P` \x80\x85\x015\x92P`@\x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15aB\x16W_\x80\xFD[\x81\x87\x01\x91P\x87`\x1F\x83\x01\x12aB)W_\x80\xFD[\x815\x81\x81\x11\x15aB;WaB;aA\x06V[aBM\x84`\x1F\x19`\x1F\x84\x01\x16\x01aA\xADV[\x91P\x80\x82R\x88\x84\x82\x85\x01\x01\x11\x15aBbW_\x80\xFD[\x80\x84\x84\x01\x85\x84\x017_\x84\x82\x84\x01\x01RP\x80\x93PPPP\x92P\x92P\x92V[\x83\x81Ra\x02 \x81\x01aB\xE4` \x83\x01\x85\x80Q\x82R` \x81\x01Q` \x83\x01R`@\x81\x01Q`@\x83\x01R``\x81\x01Q``\x83\x01R`\x80\x81\x01Q`\x80\x83\x01R`\xFF`\xA0\x82\x01Q\x16`\xA0\x83\x01R`\xC0\x81\x01Q\x15\x15`\xC0\x83\x01R`\xE0\x81\x01Q\x15\x15`\xE0\x83\x01RPPV[\x82Qa\x01 \x83\x01R` \x83\x01Qa\x01@\x83\x01R`@\x83\x01Qa\x01`\x83\x01R``\x83\x01Qa\x01\x80\x83\x01R`\x80\x83\x01Qa\x01\xA0\x83\x01R`\xA0\x83\x01Q`\xFF\x16a\x01\xC0\x83\x01R`\xC0\x83\x01Q\x15\x15a\x01\xE0\x83\x01R`\xE0\x83\x01Q\x15\x15a\x02\0\x83\x01Ra\r\xDCV[\x805`\x02\x81\x10a&\xB3W_\x80\xFD[_a\x01\xE0\x82\x84\x03\x12\x15aCdW_\x80\xFD[aClaA\x1AV[\x825\x81R` \x83\x015` \x82\x01R`@\x83\x015`@\x82\x01R``\x83\x015``\x82\x01R`\x80\x83\x015`\x80\x82\x01R`\xA0\x83\x015`\xA0\x82\x01R`\xC0\x83\x015`\xC0\x82\x01R`\xE0\x83\x015`\xE0\x82\x01Ra\x01\0aC\xC4\x81\x85\x01a?\x06V[\x90\x82\x01Ra\x01 aC\xD6\x84\x82\x01a?[V[\x90\x82\x01Ra\x01@aC\xE8\x84\x82\x01a?[V[\x90\x82\x01Ra\x01`aC\xFA\x84\x82\x01aCEV[\x90\x82\x01Ra\x01\x80aD\x0C\x84\x82\x01a>\x98V[\x90\x82\x01Ra\x01\xA0aD\x1E\x84\x82\x01a?\x11V[\x90\x82\x01Ra\x01\xC0aD0\x84\x82\x01a?[V[\x90\x82\x01R\x93\x92PPPV[a\x01\0\x81\x01a\x05A\x82\x84\x80Q\x82R` \x81\x01Q` \x83\x01R`@\x81\x01Q`@\x83\x01R``\x81\x01Q``\x83\x01R`\x80\x81\x01Q`\x80\x83\x01R`\xFF`\xA0\x82\x01Q\x16`\xA0\x83\x01R`\xC0\x81\x01Q\x15\x15`\xC0\x83\x01R`\xE0\x81\x01Q\x15\x15`\xE0\x83\x01RPPV[_`@\x82\x84\x03\x12\x15aD\xAAW_\x80\xFD[P\x91\x90PV[_``\x82\x84\x03\x12\x15aD\xC0W_\x80\xFD[aD\xC8aADV[\x90P\x815\x81R` \x82\x015aD\xDC\x81a>\xF2V[\x80` \x83\x01RP`@\x82\x015`@\x82\x01R\x92\x91PPV[_\x80\x83`\x1F\x84\x01\x12aE\x03W_\x80\xFD[P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aE\x1AW_\x80\xFD[` \x83\x01\x91P\x83` \x82`\x05\x1B\x85\x01\x01\x11\x15aE4W_\x80\xFD[\x92P\x92\x90PV[_\x80_\x80_\x80_\x80_\x80_a\x01`\x8C\x8E\x03\x12\x15aEVW_\x80\xFD[\x8B5\x9APaEf` \x8D\x01a?\x06V[\x99Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80`@\x8E\x015\x11\x15aE\x81W_\x80\xFD[aE\x91\x8E`@\x8F\x015\x8F\x01aD\x9AV[\x99PaE\xA0\x8E``\x8F\x01aD\xB0V[\x98P\x80`\xC0\x8E\x015\x11\x15aE\xB2W_\x80\xFD[aE\xC2\x8E`\xC0\x8F\x015\x8F\x01aD\xF3V[\x90\x98P\x96P`\xE0\x8D\x015\x81\x10\x15aE\xD7W_\x80\xFD[PaE\xE8\x8D`\xE0\x8E\x015\x8E\x01aD\xF3V[\x90\x95P\x93PaE\xFAa\x01\0\x8D\x01a>\x98V[\x92Pa\x01 \x8C\x015\x91Pa\x01@\x8C\x015\x90P\x92\x95\x98\x9BP\x92\x95\x98\x9B\x90\x93\x96\x99PV[_\x82`\x1F\x83\x01\x12aF+W_\x80\xFD[aF3aAgV[\x80`@\x84\x01\x85\x81\x11\x15aFDW_\x80\xFD[\x84[\x81\x81\x10\x15a.\xC2WaFW\x81a?[V[\x84R` \x93\x84\x01\x93\x01aFFV[\x805`\x03\x81\x10a&\xB3W_\x80\xFD[_\x81\x83\x03`\xC0\x81\x12\x15aF\x84W_\x80\xFD[aF\x8CaADV[\x91P`\x80\x81\x12\x15aF\x9BW_\x80\xFD[PaF\xA4aAgV[\x83`\x1F\x84\x01\x12aF\xB2W_\x80\xFD[aF\xBAaAgV[\x80`@\x85\x01\x86\x81\x11\x15aF\xCBW_\x80\xFD[\x85[\x81\x81\x10\x15aF\xE5W\x805\x84R` \x93\x84\x01\x93\x01aF\xCDV[P\x81\x84RaF\xF3\x87\x82aF\x1CV[` \x85\x01RPPP\x81RaG\t`\x80\x83\x01aFeV[` \x82\x01R`\xA0\x82\x015`@\x82\x01R\x92\x91PPV[_\x80_\x80_\x80\x86\x88\x03a\x02\xA0\x81\x12\x15aG5W_\x80\xFD[\x875g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aGKW_\x80\xFD[\x88\x01`\xC0\x81\x8B\x03\x12\x15aG\\W_\x80\xFD[\x96Pa\x02\0`\x1F\x19\x82\x01\x12\x15aGpW_\x80\xFD[PaGyaA\x8AV[` \x88\x015\x81R`@\x88\x015` \x82\x01RaG\x96``\x89\x01a?\x11V[`@\x82\x01RaG\xA7`\x80\x89\x01a?\x11V[``\x82\x01RaG\xB9\x89`\xA0\x8A\x01aFsV[`\x80\x82\x01RaG\xCC\x89a\x01`\x8A\x01aFsV[`\xA0\x82\x01R\x94PaG\xE0a\x02 \x88\x01a?\x06V[\x93Pa\x02@\x87\x015\x92PaG\xF7a\x02`\x88\x01a>\x98V[\x91PaH\x06a\x02\x80\x88\x01a?\x11V[\x90P\x92\x95P\x92\x95P\x92\x95V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[\x81\x81\x03\x81\x81\x11\x15a\x05AWa\x05AaH\x12V[\x80\x82\x01\x80\x82\x11\x15a\x05AWa\x05AaH\x12V[`\xFF\x81\x81\x16\x83\x82\x16\x01\x90\x81\x11\x15a\x05AWa\x05AaH\x12V[\x82\x81R`@\x81\x01a\x05\xCA` \x83\x01\x84a@\x08V[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15aH\x92WaH\x92aA\x06V[P`\x05\x1B` \x01\x90V[_\x82`\x1F\x83\x01\x12aH\xABW_\x80\xFD[\x81Q` aH\xC0aH\xBB\x83aHyV[aA\xADV[\x80\x83\x82R` \x82\x01\x91P` \x84`\x05\x1B\x87\x01\x01\x93P\x86\x84\x11\x15aH\xE1W_\x80\xFD[` \x86\x01[\x84\x81\x10\x15aH\xFDW\x80Q\x83R\x91\x83\x01\x91\x83\x01aH\xE6V[P\x96\x95PPPPPPV[_\x80`@\x83\x85\x03\x12\x15aI\x19W_\x80\xFD[\x82Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15aI0W_\x80\xFD[aI<\x86\x83\x87\x01aH\x9CV[\x93P` \x85\x01Q\x91P\x80\x82\x11\x15aIQW_\x80\xFD[PaI^\x85\x82\x86\x01aH\x9CV[\x91PP\x92P\x92\x90PV[\x80\x82\x02\x81\x15\x82\x82\x04\x84\x14\x17a\x05AWa\x05AaH\x12V[_\x80\x835\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE1\x846\x03\x01\x81\x12aI\xB2W_\x80\xFD[\x83\x01\x805\x91Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15aI\xCCW_\x80\xFD[` \x01\x91P6\x81\x90\x03\x82\x13\x15aE4W_\x80\xFD[\x85Q\x81R`\x01`\x01`\xA0\x1B\x03` \x87\x01Q\x16` \x82\x01R`@\x86\x01Q`@\x82\x01R\x84``\x82\x01R\x83`\x80\x82\x01R`\xC0`\xA0\x82\x01R\x81`\xC0\x82\x01R\x81\x83`\xE0\x83\x017_\x81\x83\x01`\xE0\x90\x81\x01\x91\x90\x91R`\x1F\x90\x92\x01`\x1F\x19\x16\x01\x01\x94\x93PPPPV[_` \x82\x84\x03\x12\x15aJQW_\x80\xFD[PQ\x91\x90PV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\x01`\x04R`$_\xFD[__\x19\x82\x03aJ\x91WaJ\x91aH\x12V[P`\x01\x01\x90V[_` \x82\x84\x03\x12\x15aJ\xA8W_\x80\xFD[a\x05\xCA\x82a>\x98V[_\x82`\x1F\x83\x01\x12aJ\xC0W_\x80\xFD[\x815` aJ\xD0aH\xBB\x83aHyV[\x80\x83\x82R` \x82\x01\x91P` \x84`\x05\x1B\x87\x01\x01\x93P\x86\x84\x11\x15aJ\xF1W_\x80\xFD[` \x86\x01[\x84\x81\x10\x15aH\xFDW\x805\x83R\x91\x83\x01\x91\x83\x01aJ\xF6V[_a\x01\0\x82\x84\x03\x12\x15aK\x1EW_\x80\xFD[aK&aADV[\x90PaK2\x83\x83aFsV[\x81R`\xC0\x82\x015` \x82\x01R`\xE0\x82\x015`@\x82\x01R\x92\x91PPV[_\x80_a\x02 \x84\x86\x03\x12\x15aKaW_\x80\xFD[\x835g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aKwW_\x80\xFD[aK\x83\x86\x82\x87\x01aJ\xB1V[\x93PPaK\x93\x85` \x86\x01aK\rV[\x91Pa?R\x85a\x01 \x86\x01aK\rV[`\x03\x81\x10a@\x18Wa@\x18a?\xF4V[\x81Q\x80Q`\xA0\x83\x01\x91\x90\x83_[`\x02\x81\x10\x15aK\xDFW\x82Q\x82R` \x92\x83\x01\x92\x90\x91\x01\x90`\x01\x01aK\xC0V[PPP` \x90\x81\x01Q\x90`@\x84\x01_[`\x02\x81\x10\x15aL\x16W\x83Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82R\x92\x82\x01\x92\x90\x82\x01\x90`\x01\x01aK\xEFV[PPPP` \x83\x01Qa1}`\x80\x84\x01\x82aK\xA3V[_\x80_\x80_`\xA0\x86\x88\x03\x12\x15aL@W_\x80\xFD[\x855\x94P` \x86\x015\x93P`@\x86\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15aLeW_\x80\xFD[aLq\x89\x83\x8A\x01aJ\xB1V[\x94P``\x88\x015\x91P\x80\x82\x11\x15aL\x86W_\x80\xFD[aL\x92\x89\x83\x8A\x01aJ\xB1V[\x93P`\x80\x88\x015\x91P\x80\x82\x11\x15aL\xA7W_\x80\xFD[PaL\xB4\x88\x82\x89\x01aJ\xB1V[\x91PP\x92\x95P\x92\x95\x90\x93PV[_\x80`@\x83\x85\x03\x12\x15aL\xD2W_\x80\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15aL\xE9W_\x80\xFD[aL\xF5\x86\x83\x87\x01aJ\xB1V[\x93P` \x85\x015\x91P\x80\x82\x11\x15aM\nW_\x80\xFD[PaI^\x85\x82\x86\x01aJ\xB1V[`\x01\x81\x81[\x80\x85\x11\x15aMQW\x81_\x19\x04\x82\x11\x15aM7WaM7aH\x12V[\x80\x85\x16\x15aMDW\x91\x81\x02\x91[\x93\x84\x1C\x93\x90\x80\x02\x90aM\x1CV[P\x92P\x92\x90PV[_\x82aMgWP`\x01a\x05AV[\x81aMsWP_a\x05AV[\x81`\x01\x81\x14aM\x89W`\x02\x81\x14aM\x93WaM\xAFV[`\x01\x91PPa\x05AV[`\xFF\x84\x11\x15aM\xA4WaM\xA4aH\x12V[PP`\x01\x82\x1Ba\x05AV[P` \x83\x10a\x013\x83\x10\x16`N\x84\x10`\x0B\x84\x10\x16\x17\x15aM\xD2WP\x81\x81\na\x05AV[aM\xDC\x83\x83aM\x17V[\x80_\x19\x04\x82\x11\x15aM\xEFWaM\xEFaH\x12V[\x02\x93\x92PPPV[_a\x05\xCA\x83\x83aMYV\xFE\xA2dipfsX\"\x12 \x80nR^C\x03R\xE1\xBE\xDAR\x83\x01\x04\xCAZ\xE6JP!\x95\xF0\xD7z\xE8\xF7\xFB\xEC\xA7\xE8\xAC+dsolcC\0\x08\x19\x003",
    );
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct EdgeStatus(u8);
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<EdgeStatus> for u8 {
            #[inline]
            fn stv_to_tokens(
                &self,
            ) -> <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'_> {
                alloy_sol_types::private::SolTypeValue::<
                    alloy::sol_types::sol_data::Uint<8>,
                >::stv_to_tokens(self)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::tokenize(self)
                    .0
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(self, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encoded_size(self)
            }
        }
        #[automatically_derived]
        impl EdgeStatus {
            /// The Solidity type name.
            pub const NAME: &'static str = stringify!(@ name);
            /// Convert from the underlying value type.
            #[inline]
            pub const fn from(value: u8) -> Self {
                Self(value)
            }
            /// Return the underlying value.
            #[inline]
            pub const fn into(self) -> u8 {
                self.0
            }
            /// Return the single encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode(&self.0)
            }
            /// Return the packed encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode_packed(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode_packed(&self.0)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for EdgeStatus {
            type RustType = u8;
            type Token<'a> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = Self::NAME;
            const ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                Self::type_check(token).is_ok()
            }
            #[inline]
            fn type_check(token: &Self::Token<'_>) -> alloy_sol_types::Result<()> {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::type_check(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::detokenize(token)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for EdgeStatus {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::topic_preimage_length(rust)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(rust, out)
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic(rust)
            }
        }
    };
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MachineStatus(u8);
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<MachineStatus> for u8 {
            #[inline]
            fn stv_to_tokens(
                &self,
            ) -> <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'_> {
                alloy_sol_types::private::SolTypeValue::<
                    alloy::sol_types::sol_data::Uint<8>,
                >::stv_to_tokens(self)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::tokenize(self)
                    .0
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(self, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encoded_size(self)
            }
        }
        #[automatically_derived]
        impl MachineStatus {
            /// The Solidity type name.
            pub const NAME: &'static str = stringify!(@ name);
            /// Convert from the underlying value type.
            #[inline]
            pub const fn from(value: u8) -> Self {
                Self(value)
            }
            /// Return the underlying value.
            #[inline]
            pub const fn into(self) -> u8 {
                self.0
            }
            /// Return the single encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode(&self.0)
            }
            /// Return the packed encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode_packed(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode_packed(&self.0)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for MachineStatus {
            type RustType = u8;
            type Token<'a> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = Self::NAME;
            const ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                Self::type_check(token).is_ok()
            }
            #[inline]
            fn type_check(token: &Self::Token<'_>) -> alloy_sol_types::Result<()> {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::type_check(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::detokenize(token)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for MachineStatus {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::topic_preimage_length(rust)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(rust, out)
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic(rust)
            }
        }
    };
    /**```solidity
struct AssertionReferenceData { bytes32 assertionHash; bytes32 predecessorId; bool isPending; bool hasSibling; AssertionState startState; AssertionState endState; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AssertionReferenceData {
        #[allow(missing_docs)]
        pub assertionHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub predecessorId: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub isPending: bool,
        #[allow(missing_docs)]
        pub hasSibling: bool,
        #[allow(missing_docs)]
        pub startState: <AssertionState as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub endState: <AssertionState as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::Bool,
            alloy::sol_types::sol_data::Bool,
            AssertionState,
            AssertionState,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::FixedBytes<32>,
            bool,
            bool,
            <AssertionState as alloy::sol_types::SolType>::RustType,
            <AssertionState as alloy::sol_types::SolType>::RustType,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AssertionReferenceData> for UnderlyingRustTuple<'_> {
            fn from(value: AssertionReferenceData) -> Self {
                (
                    value.assertionHash,
                    value.predecessorId,
                    value.isPending,
                    value.hasSibling,
                    value.startState,
                    value.endState,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AssertionReferenceData {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    assertionHash: tuple.0,
                    predecessorId: tuple.1,
                    isPending: tuple.2,
                    hasSibling: tuple.3,
                    startState: tuple.4,
                    endState: tuple.5,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for AssertionReferenceData {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for AssertionReferenceData {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.assertionHash),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.predecessorId),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.isPending,
                    ),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.hasSibling,
                    ),
                    <AssertionState as alloy_sol_types::SolType>::tokenize(
                        &self.startState,
                    ),
                    <AssertionState as alloy_sol_types::SolType>::tokenize(
                        &self.endState,
                    ),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for AssertionReferenceData {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for AssertionReferenceData {
            const NAME: &'static str = "AssertionReferenceData";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "AssertionReferenceData(bytes32 assertionHash,bytes32 predecessorId,bool isPending,bool hasSibling,AssertionState startState,AssertionState endState)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(2);
                components
                    .push(
                        <AssertionState as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <AssertionState as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
                    .push(
                        <AssertionState as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <AssertionState as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.assertionHash)
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.predecessorId)
                        .0,
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::eip712_data_word(
                            &self.isPending,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::eip712_data_word(
                            &self.hasSibling,
                        )
                        .0,
                    <AssertionState as alloy_sol_types::SolType>::eip712_data_word(
                            &self.startState,
                        )
                        .0,
                    <AssertionState as alloy_sol_types::SolType>::eip712_data_word(
                            &self.endState,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for AssertionReferenceData {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.assertionHash,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.predecessorId,
                    )
                    + <alloy::sol_types::sol_data::Bool as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.isPending,
                    )
                    + <alloy::sol_types::sol_data::Bool as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.hasSibling,
                    )
                    + <AssertionState as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.startState,
                    )
                    + <AssertionState as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.endState,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.assertionHash,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.predecessorId,
                    out,
                );
                <alloy::sol_types::sol_data::Bool as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.isPending,
                    out,
                );
                <alloy::sol_types::sol_data::Bool as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.hasSibling,
                    out,
                );
                <AssertionState as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.startState,
                    out,
                );
                <AssertionState as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.endState,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct AssertionState { GlobalState globalState; MachineStatus machineStatus; bytes32 endHistoryRoot; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AssertionState {
        #[allow(missing_docs)]
        pub globalState: <GlobalState as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub machineStatus: <MachineStatus as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub endHistoryRoot: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            GlobalState,
            MachineStatus,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            <GlobalState as alloy::sol_types::SolType>::RustType,
            <MachineStatus as alloy::sol_types::SolType>::RustType,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AssertionState> for UnderlyingRustTuple<'_> {
            fn from(value: AssertionState) -> Self {
                (value.globalState, value.machineStatus, value.endHistoryRoot)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AssertionState {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    globalState: tuple.0,
                    machineStatus: tuple.1,
                    endHistoryRoot: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for AssertionState {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for AssertionState {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <GlobalState as alloy_sol_types::SolType>::tokenize(
                        &self.globalState,
                    ),
                    <MachineStatus as alloy_sol_types::SolType>::tokenize(
                        &self.machineStatus,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.endHistoryRoot),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for AssertionState {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for AssertionState {
            const NAME: &'static str = "AssertionState";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "AssertionState(GlobalState globalState,uint8 machineStatus,bytes32 endHistoryRoot)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(1);
                components
                    .push(
                        <GlobalState as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <GlobalState as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <GlobalState as alloy_sol_types::SolType>::eip712_data_word(
                            &self.globalState,
                        )
                        .0,
                    <MachineStatus as alloy_sol_types::SolType>::eip712_data_word(
                            &self.machineStatus,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.endHistoryRoot,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for AssertionState {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <GlobalState as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.globalState,
                    )
                    + <MachineStatus as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.machineStatus,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.endHistoryRoot,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <GlobalState as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.globalState,
                    out,
                );
                <MachineStatus as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.machineStatus,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.endHistoryRoot,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct ChallengeEdge { bytes32 originId; bytes32 startHistoryRoot; uint256 startHeight; bytes32 endHistoryRoot; uint256 endHeight; bytes32 lowerChildId; bytes32 upperChildId; bytes32 claimId; address staker; uint64 createdAtBlock; uint64 confirmedAtBlock; EdgeStatus status; uint8 level; bool refunded; uint64 totalTimeUnrivaledCache; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ChallengeEdge {
        #[allow(missing_docs)]
        pub originId: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub startHistoryRoot: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub startHeight: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub endHistoryRoot: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub endHeight: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub lowerChildId: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub upperChildId: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub claimId: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub staker: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub createdAtBlock: u64,
        #[allow(missing_docs)]
        pub confirmedAtBlock: u64,
        #[allow(missing_docs)]
        pub status: <EdgeStatus as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub level: u8,
        #[allow(missing_docs)]
        pub refunded: bool,
        #[allow(missing_docs)]
        pub totalTimeUnrivaledCache: u64,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Uint<64>,
            alloy::sol_types::sol_data::Uint<64>,
            EdgeStatus,
            alloy::sol_types::sol_data::Uint<8>,
            alloy::sol_types::sol_data::Bool,
            alloy::sol_types::sol_data::Uint<64>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::Address,
            u64,
            u64,
            <EdgeStatus as alloy::sol_types::SolType>::RustType,
            u8,
            bool,
            u64,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ChallengeEdge> for UnderlyingRustTuple<'_> {
            fn from(value: ChallengeEdge) -> Self {
                (
                    value.originId,
                    value.startHistoryRoot,
                    value.startHeight,
                    value.endHistoryRoot,
                    value.endHeight,
                    value.lowerChildId,
                    value.upperChildId,
                    value.claimId,
                    value.staker,
                    value.createdAtBlock,
                    value.confirmedAtBlock,
                    value.status,
                    value.level,
                    value.refunded,
                    value.totalTimeUnrivaledCache,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ChallengeEdge {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    originId: tuple.0,
                    startHistoryRoot: tuple.1,
                    startHeight: tuple.2,
                    endHistoryRoot: tuple.3,
                    endHeight: tuple.4,
                    lowerChildId: tuple.5,
                    upperChildId: tuple.6,
                    claimId: tuple.7,
                    staker: tuple.8,
                    createdAtBlock: tuple.9,
                    confirmedAtBlock: tuple.10,
                    status: tuple.11,
                    level: tuple.12,
                    refunded: tuple.13,
                    totalTimeUnrivaledCache: tuple.14,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for ChallengeEdge {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for ChallengeEdge {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.originId),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.startHistoryRoot),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.startHeight),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.endHistoryRoot),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.endHeight),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.lowerChildId),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.upperChildId),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.claimId),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.staker,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.createdAtBlock),
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.confirmedAtBlock),
                    <EdgeStatus as alloy_sol_types::SolType>::tokenize(&self.status),
                    <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::SolType>::tokenize(&self.level),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.refunded,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(
                        &self.totalTimeUnrivaledCache,
                    ),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ChallengeEdge {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for ChallengeEdge {
            const NAME: &'static str = "ChallengeEdge";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "ChallengeEdge(bytes32 originId,bytes32 startHistoryRoot,uint256 startHeight,bytes32 endHistoryRoot,uint256 endHeight,bytes32 lowerChildId,bytes32 upperChildId,bytes32 claimId,address staker,uint64 createdAtBlock,uint64 confirmedAtBlock,uint8 status,uint8 level,bool refunded,uint64 totalTimeUnrivaledCache)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.originId)
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.startHistoryRoot,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.startHeight)
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.endHistoryRoot,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.endHeight)
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.lowerChildId)
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.upperChildId)
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.claimId)
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.staker,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.createdAtBlock,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.confirmedAtBlock,
                        )
                        .0,
                    <EdgeStatus as alloy_sol_types::SolType>::eip712_data_word(
                            &self.status,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.level)
                        .0,
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::eip712_data_word(
                            &self.refunded,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.totalTimeUnrivaledCache,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ChallengeEdge {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.originId,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.startHistoryRoot,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.startHeight,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.endHistoryRoot,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.endHeight,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.lowerChildId,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.upperChildId,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.claimId,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.staker,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.createdAtBlock,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.confirmedAtBlock,
                    )
                    + <EdgeStatus as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.status,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.level)
                    + <alloy::sol_types::sol_data::Bool as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.refunded,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.totalTimeUnrivaledCache,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.originId,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.startHistoryRoot,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.startHeight,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.endHistoryRoot,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.endHeight,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.lowerChildId,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.upperChildId,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.claimId,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.staker,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    64,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.createdAtBlock,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    64,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.confirmedAtBlock,
                    out,
                );
                <EdgeStatus as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.status,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.level,
                    out,
                );
                <alloy::sol_types::sol_data::Bool as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.refunded,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    64,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.totalTimeUnrivaledCache,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct CreateEdgeArgs { uint8 level; bytes32 endHistoryRoot; uint256 endHeight; bytes32 claimId; bytes prefixProof; bytes proof; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CreateEdgeArgs {
        #[allow(missing_docs)]
        pub level: u8,
        #[allow(missing_docs)]
        pub endHistoryRoot: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub endHeight: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub claimId: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub prefixProof: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub proof: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<8>,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::Bytes,
            alloy::sol_types::sol_data::Bytes,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            u8,
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::Bytes,
            alloy::sol_types::private::Bytes,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<CreateEdgeArgs> for UnderlyingRustTuple<'_> {
            fn from(value: CreateEdgeArgs) -> Self {
                (
                    value.level,
                    value.endHistoryRoot,
                    value.endHeight,
                    value.claimId,
                    value.prefixProof,
                    value.proof,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for CreateEdgeArgs {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    level: tuple.0,
                    endHistoryRoot: tuple.1,
                    endHeight: tuple.2,
                    claimId: tuple.3,
                    prefixProof: tuple.4,
                    proof: tuple.5,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for CreateEdgeArgs {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for CreateEdgeArgs {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::SolType>::tokenize(&self.level),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.endHistoryRoot),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.endHeight),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.claimId),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.prefixProof,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.proof,
                    ),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for CreateEdgeArgs {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for CreateEdgeArgs {
            const NAME: &'static str = "CreateEdgeArgs";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "CreateEdgeArgs(uint8 level,bytes32 endHistoryRoot,uint256 endHeight,bytes32 claimId,bytes prefixProof,bytes proof)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.level)
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.endHistoryRoot,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.endHeight)
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.claimId)
                        .0,
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::eip712_data_word(
                            &self.prefixProof,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::eip712_data_word(
                            &self.proof,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for CreateEdgeArgs {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.level)
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.endHistoryRoot,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.endHeight,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.claimId,
                    )
                    + <alloy::sol_types::sol_data::Bytes as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.prefixProof,
                    )
                    + <alloy::sol_types::sol_data::Bytes as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.proof,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.level,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.endHistoryRoot,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.endHeight,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.claimId,
                    out,
                );
                <alloy::sol_types::sol_data::Bytes as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.prefixProof,
                    out,
                );
                <alloy::sol_types::sol_data::Bytes as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.proof,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct EdgeAddedData { bytes32 edgeId; bytes32 mutualId; bytes32 originId; bytes32 claimId; uint256 length; uint8 level; bool hasRival; bool isLayerZero; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct EdgeAddedData {
        #[allow(missing_docs)]
        pub edgeId: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub mutualId: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub originId: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub claimId: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub length: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub level: u8,
        #[allow(missing_docs)]
        pub hasRival: bool,
        #[allow(missing_docs)]
        pub isLayerZero: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<8>,
            alloy::sol_types::sol_data::Bool,
            alloy::sol_types::sol_data::Bool,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::primitives::aliases::U256,
            u8,
            bool,
            bool,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<EdgeAddedData> for UnderlyingRustTuple<'_> {
            fn from(value: EdgeAddedData) -> Self {
                (
                    value.edgeId,
                    value.mutualId,
                    value.originId,
                    value.claimId,
                    value.length,
                    value.level,
                    value.hasRival,
                    value.isLayerZero,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for EdgeAddedData {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    edgeId: tuple.0,
                    mutualId: tuple.1,
                    originId: tuple.2,
                    claimId: tuple.3,
                    length: tuple.4,
                    level: tuple.5,
                    hasRival: tuple.6,
                    isLayerZero: tuple.7,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for EdgeAddedData {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for EdgeAddedData {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.edgeId),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.mutualId),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.originId),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.claimId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.length),
                    <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::SolType>::tokenize(&self.level),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.hasRival,
                    ),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.isLayerZero,
                    ),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for EdgeAddedData {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for EdgeAddedData {
            const NAME: &'static str = "EdgeAddedData";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "EdgeAddedData(bytes32 edgeId,bytes32 mutualId,bytes32 originId,bytes32 claimId,uint256 length,uint8 level,bool hasRival,bool isLayerZero)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.edgeId)
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.mutualId)
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.originId)
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.claimId)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.length)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.level)
                        .0,
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::eip712_data_word(
                            &self.hasRival,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::eip712_data_word(
                            &self.isLayerZero,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for EdgeAddedData {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.edgeId,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.mutualId,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.originId,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.claimId,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.length,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.level)
                    + <alloy::sol_types::sol_data::Bool as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.hasRival,
                    )
                    + <alloy::sol_types::sol_data::Bool as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.isLayerZero,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.edgeId,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.mutualId,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.originId,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.claimId,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.length,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.level,
                    out,
                );
                <alloy::sol_types::sol_data::Bool as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.hasRival,
                    out,
                );
                <alloy::sol_types::sol_data::Bool as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.isLayerZero,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct ExecutionContext { uint256 maxInboxMessagesRead; address bridge; bytes32 initialWasmModuleRoot; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ExecutionContext {
        #[allow(missing_docs)]
        pub maxInboxMessagesRead: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub bridge: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub initialWasmModuleRoot: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ExecutionContext> for UnderlyingRustTuple<'_> {
            fn from(value: ExecutionContext) -> Self {
                (value.maxInboxMessagesRead, value.bridge, value.initialWasmModuleRoot)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ExecutionContext {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    maxInboxMessagesRead: tuple.0,
                    bridge: tuple.1,
                    initialWasmModuleRoot: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for ExecutionContext {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for ExecutionContext {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.maxInboxMessagesRead),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.bridge,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.initialWasmModuleRoot),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ExecutionContext {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for ExecutionContext {
            const NAME: &'static str = "ExecutionContext";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "ExecutionContext(uint256 maxInboxMessagesRead,address bridge,bytes32 initialWasmModuleRoot)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.maxInboxMessagesRead,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.bridge,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.initialWasmModuleRoot,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ExecutionContext {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.maxInboxMessagesRead,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.bridge,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.initialWasmModuleRoot,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.maxInboxMessagesRead,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.bridge,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.initialWasmModuleRoot,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct GlobalState { bytes32[2] bytes32Vals; uint64[2] u64Vals; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct GlobalState {
        #[allow(missing_docs)]
        pub bytes32Vals: [alloy::sol_types::private::FixedBytes<32>; 2usize],
        #[allow(missing_docs)]
        pub u64Vals: [u64; 2usize],
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::FixedArray<
                alloy::sol_types::sol_data::FixedBytes<32>,
                2usize,
            >,
            alloy::sol_types::sol_data::FixedArray<
                alloy::sol_types::sol_data::Uint<64>,
                2usize,
            >,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            [alloy::sol_types::private::FixedBytes<32>; 2usize],
            [u64; 2usize],
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<GlobalState> for UnderlyingRustTuple<'_> {
            fn from(value: GlobalState) -> Self {
                (value.bytes32Vals, value.u64Vals)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for GlobalState {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    bytes32Vals: tuple.0,
                    u64Vals: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for GlobalState {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for GlobalState {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedArray<
                        alloy::sol_types::sol_data::FixedBytes<32>,
                        2usize,
                    > as alloy_sol_types::SolType>::tokenize(&self.bytes32Vals),
                    <alloy::sol_types::sol_data::FixedArray<
                        alloy::sol_types::sol_data::Uint<64>,
                        2usize,
                    > as alloy_sol_types::SolType>::tokenize(&self.u64Vals),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for GlobalState {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for GlobalState {
            const NAME: &'static str = "GlobalState";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "GlobalState(bytes32[2] bytes32Vals,uint64[2] u64Vals)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::FixedArray<
                        alloy::sol_types::sol_data::FixedBytes<32>,
                        2usize,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.bytes32Vals)
                        .0,
                    <alloy::sol_types::sol_data::FixedArray<
                        alloy::sol_types::sol_data::Uint<64>,
                        2usize,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.u64Vals)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for GlobalState {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::FixedArray<
                        alloy::sol_types::sol_data::FixedBytes<32>,
                        2usize,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.bytes32Vals,
                    )
                    + <alloy::sol_types::sol_data::FixedArray<
                        alloy::sol_types::sol_data::Uint<64>,
                        2usize,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.u64Vals,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::FixedArray<
                    alloy::sol_types::sol_data::FixedBytes<32>,
                    2usize,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.bytes32Vals,
                    out,
                );
                <alloy::sol_types::sol_data::FixedArray<
                    alloy::sol_types::sol_data::Uint<64>,
                    2usize,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.u64Vals,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct OneStepData { bytes32 beforeHash; bytes proof; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OneStepData {
        #[allow(missing_docs)]
        pub beforeHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub proof: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::Bytes,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::Bytes,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OneStepData> for UnderlyingRustTuple<'_> {
            fn from(value: OneStepData) -> Self {
                (value.beforeHash, value.proof)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for OneStepData {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    beforeHash: tuple.0,
                    proof: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for OneStepData {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for OneStepData {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.beforeHash),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.proof,
                    ),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for OneStepData {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for OneStepData {
            const NAME: &'static str = "OneStepData";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "OneStepData(bytes32 beforeHash,bytes proof)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.beforeHash)
                        .0,
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::eip712_data_word(
                            &self.proof,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for OneStepData {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.beforeHash,
                    )
                    + <alloy::sol_types::sol_data::Bytes as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.proof,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.beforeHash,
                    out,
                );
                <alloy::sol_types::sol_data::Bytes as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.proof,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**Custom error with signature `AccountHasMadeLayerZeroRival(address,bytes32)` and selector `0x5a46ac3a`.
```solidity
error AccountHasMadeLayerZeroRival(address account, bytes32 mutualId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AccountHasMadeLayerZeroRival {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub mutualId: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AccountHasMadeLayerZeroRival>
        for UnderlyingRustTuple<'_> {
            fn from(value: AccountHasMadeLayerZeroRival) -> Self {
                (value.account, value.mutualId)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for AccountHasMadeLayerZeroRival {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    account: tuple.0,
                    mutualId: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AccountHasMadeLayerZeroRival {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AccountHasMadeLayerZeroRival(address,bytes32)";
            const SELECTOR: [u8; 4] = [90u8, 70u8, 172u8, 58u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.mutualId),
                )
            }
        }
    };
    /**Custom error with signature `AssertionHashEmpty()` and selector `0xe96bc61a`.
```solidity
error AssertionHashEmpty();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AssertionHashEmpty {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AssertionHashEmpty> for UnderlyingRustTuple<'_> {
            fn from(value: AssertionHashEmpty) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AssertionHashEmpty {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AssertionHashEmpty {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AssertionHashEmpty()";
            const SELECTOR: [u8; 4] = [233u8, 107u8, 198u8, 26u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `AssertionHashMismatch(bytes32,bytes32)` and selector `0x5b177a3c`.
```solidity
error AssertionHashMismatch(bytes32 h1, bytes32 h2);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AssertionHashMismatch {
        #[allow(missing_docs)]
        pub h1: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub h2: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AssertionHashMismatch> for UnderlyingRustTuple<'_> {
            fn from(value: AssertionHashMismatch) -> Self {
                (value.h1, value.h2)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AssertionHashMismatch {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { h1: tuple.0, h2: tuple.1 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AssertionHashMismatch {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AssertionHashMismatch(bytes32,bytes32)";
            const SELECTOR: [u8; 4] = [91u8, 23u8, 122u8, 60u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.h1),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.h2),
                )
            }
        }
    };
    /**Custom error with signature `AssertionNoSibling()` and selector `0xb45d1c3a`.
```solidity
error AssertionNoSibling();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AssertionNoSibling {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AssertionNoSibling> for UnderlyingRustTuple<'_> {
            fn from(value: AssertionNoSibling) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AssertionNoSibling {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AssertionNoSibling {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AssertionNoSibling()";
            const SELECTOR: [u8; 4] = [180u8, 93u8, 28u8, 58u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `AssertionNotPending()` and selector `0xc1692436`.
```solidity
error AssertionNotPending();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AssertionNotPending {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AssertionNotPending> for UnderlyingRustTuple<'_> {
            fn from(value: AssertionNotPending) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AssertionNotPending {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AssertionNotPending {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AssertionNotPending()";
            const SELECTOR: [u8; 4] = [193u8, 105u8, 36u8, 54u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `CachedTimeSufficient(uint256,uint256)` and selector `0xd1f59281`.
```solidity
error CachedTimeSufficient(uint256 actual, uint256 expected);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CachedTimeSufficient {
        #[allow(missing_docs)]
        pub actual: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub expected: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<CachedTimeSufficient> for UnderlyingRustTuple<'_> {
            fn from(value: CachedTimeSufficient) -> Self {
                (value.actual, value.expected)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for CachedTimeSufficient {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    actual: tuple.0,
                    expected: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for CachedTimeSufficient {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "CachedTimeSufficient(uint256,uint256)";
            const SELECTOR: [u8; 4] = [209u8, 245u8, 146u8, 129u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.actual),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.expected),
                )
            }
        }
    };
    /**Custom error with signature `ChildrenAlreadySet(bytes32,bytes32,bytes32)` and selector `0x8b0e71d0`.
```solidity
error ChildrenAlreadySet(bytes32 edgeId, bytes32 lowerChildId, bytes32 upperChildId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ChildrenAlreadySet {
        #[allow(missing_docs)]
        pub edgeId: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub lowerChildId: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub upperChildId: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ChildrenAlreadySet> for UnderlyingRustTuple<'_> {
            fn from(value: ChildrenAlreadySet) -> Self {
                (value.edgeId, value.lowerChildId, value.upperChildId)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ChildrenAlreadySet {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    edgeId: tuple.0,
                    lowerChildId: tuple.1,
                    upperChildId: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ChildrenAlreadySet {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ChildrenAlreadySet(bytes32,bytes32,bytes32)";
            const SELECTOR: [u8; 4] = [139u8, 14u8, 113u8, 208u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.edgeId),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.lowerChildId),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.upperChildId),
                )
            }
        }
    };
    /**Custom error with signature `ClaimEdgeInvalidLevel(uint8,uint8)` and selector `0xac9e6116`.
```solidity
error ClaimEdgeInvalidLevel(uint8 argLevel, uint8 claimLevel);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ClaimEdgeInvalidLevel {
        #[allow(missing_docs)]
        pub argLevel: u8,
        #[allow(missing_docs)]
        pub claimLevel: u8,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<8>,
            alloy::sol_types::sol_data::Uint<8>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (u8, u8);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ClaimEdgeInvalidLevel> for UnderlyingRustTuple<'_> {
            fn from(value: ClaimEdgeInvalidLevel) -> Self {
                (value.argLevel, value.claimLevel)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ClaimEdgeInvalidLevel {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    argLevel: tuple.0,
                    claimLevel: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ClaimEdgeInvalidLevel {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ClaimEdgeInvalidLevel(uint8,uint8)";
            const SELECTOR: [u8; 4] = [172u8, 158u8, 97u8, 22u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::SolType>::tokenize(&self.argLevel),
                    <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::SolType>::tokenize(&self.claimLevel),
                )
            }
        }
    };
    /**Custom error with signature `ClaimEdgeNotLengthOneRival(bytes32)` and selector `0xff6d9bd7`.
```solidity
error ClaimEdgeNotLengthOneRival(bytes32 claimId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ClaimEdgeNotLengthOneRival {
        #[allow(missing_docs)]
        pub claimId: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ClaimEdgeNotLengthOneRival>
        for UnderlyingRustTuple<'_> {
            fn from(value: ClaimEdgeNotLengthOneRival) -> Self {
                (value.claimId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for ClaimEdgeNotLengthOneRival {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { claimId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ClaimEdgeNotLengthOneRival {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ClaimEdgeNotLengthOneRival(bytes32)";
            const SELECTOR: [u8; 4] = [255u8, 109u8, 155u8, 215u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.claimId),
                )
            }
        }
    };
    /**Custom error with signature `ClaimEdgeNotPending()` and selector `0x12459ffd`.
```solidity
error ClaimEdgeNotPending();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ClaimEdgeNotPending {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ClaimEdgeNotPending> for UnderlyingRustTuple<'_> {
            fn from(value: ClaimEdgeNotPending) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ClaimEdgeNotPending {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ClaimEdgeNotPending {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ClaimEdgeNotPending()";
            const SELECTOR: [u8; 4] = [18u8, 69u8, 159u8, 253u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `EdgeAlreadyExists(bytes32)` and selector `0xbcedf3de`.
```solidity
error EdgeAlreadyExists(bytes32 edgeId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct EdgeAlreadyExists {
        #[allow(missing_docs)]
        pub edgeId: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<EdgeAlreadyExists> for UnderlyingRustTuple<'_> {
            fn from(value: EdgeAlreadyExists) -> Self {
                (value.edgeId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for EdgeAlreadyExists {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { edgeId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for EdgeAlreadyExists {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "EdgeAlreadyExists(bytes32)";
            const SELECTOR: [u8; 4] = [188u8, 237u8, 243u8, 222u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.edgeId),
                )
            }
        }
    };
    /**Custom error with signature `EdgeNotExists(bytes32)` and selector `0x00a7b02b`.
```solidity
error EdgeNotExists(bytes32 edgeId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct EdgeNotExists {
        #[allow(missing_docs)]
        pub edgeId: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<EdgeNotExists> for UnderlyingRustTuple<'_> {
            fn from(value: EdgeNotExists) -> Self {
                (value.edgeId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for EdgeNotExists {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { edgeId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for EdgeNotExists {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "EdgeNotExists(bytes32)";
            const SELECTOR: [u8; 4] = [0u8, 167u8, 176u8, 43u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.edgeId),
                )
            }
        }
    };
    /**Custom error with signature `EdgeNotLengthOne(uint256)` and selector `0x6b595e50`.
```solidity
error EdgeNotLengthOne(uint256 length);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct EdgeNotLengthOne {
        #[allow(missing_docs)]
        pub length: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<EdgeNotLengthOne> for UnderlyingRustTuple<'_> {
            fn from(value: EdgeNotLengthOne) -> Self {
                (value.length,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for EdgeNotLengthOne {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { length: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for EdgeNotLengthOne {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "EdgeNotLengthOne(uint256)";
            const SELECTOR: [u8; 4] = [107u8, 89u8, 94u8, 80u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.length),
                )
            }
        }
    };
    /**Custom error with signature `EdgeNotPending(bytes32,uint8)` and selector `0x23f8405d`.
```solidity
error EdgeNotPending(bytes32 edgeId, EdgeStatus status);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct EdgeNotPending {
        #[allow(missing_docs)]
        pub edgeId: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub status: <EdgeStatus as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::FixedBytes<32>,
            EdgeStatus,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::FixedBytes<32>,
            <EdgeStatus as alloy::sol_types::SolType>::RustType,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<EdgeNotPending> for UnderlyingRustTuple<'_> {
            fn from(value: EdgeNotPending) -> Self {
                (value.edgeId, value.status)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for EdgeNotPending {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    edgeId: tuple.0,
                    status: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for EdgeNotPending {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "EdgeNotPending(bytes32,uint8)";
            const SELECTOR: [u8; 4] = [35u8, 248u8, 64u8, 93u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.edgeId),
                    <EdgeStatus as alloy_sol_types::SolType>::tokenize(&self.status),
                )
            }
        }
    };
    /**Custom error with signature `EdgeTypeNotSmallStep(uint8)` and selector `0x348aefdf`.
```solidity
error EdgeTypeNotSmallStep(uint8 level);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct EdgeTypeNotSmallStep {
        #[allow(missing_docs)]
        pub level: u8,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<8>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (u8,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<EdgeTypeNotSmallStep> for UnderlyingRustTuple<'_> {
            fn from(value: EdgeTypeNotSmallStep) -> Self {
                (value.level,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for EdgeTypeNotSmallStep {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { level: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for EdgeTypeNotSmallStep {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "EdgeTypeNotSmallStep(uint8)";
            const SELECTOR: [u8; 4] = [52u8, 138u8, 239u8, 223u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::SolType>::tokenize(&self.level),
                )
            }
        }
    };
    /**Custom error with signature `EdgeUnrivaled(bytes32)` and selector `0x80e07e45`.
```solidity
error EdgeUnrivaled(bytes32 edgeId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct EdgeUnrivaled {
        #[allow(missing_docs)]
        pub edgeId: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<EdgeUnrivaled> for UnderlyingRustTuple<'_> {
            fn from(value: EdgeUnrivaled) -> Self {
                (value.edgeId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for EdgeUnrivaled {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { edgeId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for EdgeUnrivaled {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "EdgeUnrivaled(bytes32)";
            const SELECTOR: [u8; 4] = [128u8, 224u8, 126u8, 69u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.edgeId),
                )
            }
        }
    };
    /**Custom error with signature `EmptyClaimId()` and selector `0x6932bcfd`.
```solidity
error EmptyClaimId();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct EmptyClaimId {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<EmptyClaimId> for UnderlyingRustTuple<'_> {
            fn from(value: EmptyClaimId) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for EmptyClaimId {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for EmptyClaimId {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "EmptyClaimId()";
            const SELECTOR: [u8; 4] = [105u8, 50u8, 188u8, 253u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `EmptyEdgeSpecificProof()` and selector `0xc9ccac50`.
```solidity
error EmptyEdgeSpecificProof();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct EmptyEdgeSpecificProof {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<EmptyEdgeSpecificProof> for UnderlyingRustTuple<'_> {
            fn from(value: EmptyEdgeSpecificProof) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for EmptyEdgeSpecificProof {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for EmptyEdgeSpecificProof {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "EmptyEdgeSpecificProof()";
            const SELECTOR: [u8; 4] = [201u8, 204u8, 172u8, 80u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `EmptyEndMachineStatus()` and selector `0x8999857d`.
```solidity
error EmptyEndMachineStatus();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct EmptyEndMachineStatus {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<EmptyEndMachineStatus> for UnderlyingRustTuple<'_> {
            fn from(value: EmptyEndMachineStatus) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for EmptyEndMachineStatus {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for EmptyEndMachineStatus {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "EmptyEndMachineStatus()";
            const SELECTOR: [u8; 4] = [137u8, 153u8, 133u8, 125u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `EmptyEndRoot()` and selector `0x5cb6e5bb`.
```solidity
error EmptyEndRoot();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct EmptyEndRoot {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<EmptyEndRoot> for UnderlyingRustTuple<'_> {
            fn from(value: EmptyEndRoot) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for EmptyEndRoot {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for EmptyEndRoot {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "EmptyEndRoot()";
            const SELECTOR: [u8; 4] = [92u8, 182u8, 229u8, 187u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `EmptyFirstRival()` and selector `0xda10f67c`.
```solidity
error EmptyFirstRival();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct EmptyFirstRival {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<EmptyFirstRival> for UnderlyingRustTuple<'_> {
            fn from(value: EmptyFirstRival) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for EmptyFirstRival {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for EmptyFirstRival {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "EmptyFirstRival()";
            const SELECTOR: [u8; 4] = [218u8, 16u8, 246u8, 124u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `EmptyOriginId()` and selector `0x8d79dbbc`.
```solidity
error EmptyOriginId();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct EmptyOriginId {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<EmptyOriginId> for UnderlyingRustTuple<'_> {
            fn from(value: EmptyOriginId) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for EmptyOriginId {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for EmptyOriginId {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "EmptyOriginId()";
            const SELECTOR: [u8; 4] = [141u8, 121u8, 219u8, 188u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `EmptyPrefixProof()` and selector `0x342a0752`.
```solidity
error EmptyPrefixProof();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct EmptyPrefixProof {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<EmptyPrefixProof> for UnderlyingRustTuple<'_> {
            fn from(value: EmptyPrefixProof) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for EmptyPrefixProof {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for EmptyPrefixProof {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "EmptyPrefixProof()";
            const SELECTOR: [u8; 4] = [52u8, 42u8, 7u8, 82u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `EmptyStaker()` and selector `0xf289e657`.
```solidity
error EmptyStaker();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct EmptyStaker {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<EmptyStaker> for UnderlyingRustTuple<'_> {
            fn from(value: EmptyStaker) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for EmptyStaker {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for EmptyStaker {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "EmptyStaker()";
            const SELECTOR: [u8; 4] = [242u8, 137u8, 230u8, 87u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `EmptyStartMachineStatus()` and selector `0x46365e52`.
```solidity
error EmptyStartMachineStatus();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct EmptyStartMachineStatus {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<EmptyStartMachineStatus> for UnderlyingRustTuple<'_> {
            fn from(value: EmptyStartMachineStatus) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for EmptyStartMachineStatus {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for EmptyStartMachineStatus {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "EmptyStartMachineStatus()";
            const SELECTOR: [u8; 4] = [70u8, 54u8, 94u8, 82u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `EmptyStartRoot()` and selector `0x83c683e4`.
```solidity
error EmptyStartRoot();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct EmptyStartRoot {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<EmptyStartRoot> for UnderlyingRustTuple<'_> {
            fn from(value: EmptyStartRoot) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for EmptyStartRoot {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for EmptyStartRoot {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "EmptyStartRoot()";
            const SELECTOR: [u8; 4] = [131u8, 198u8, 131u8, 228u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `HeightDiffLtTwo(uint256,uint256)` and selector `0x90298594`.
```solidity
error HeightDiffLtTwo(uint256 h1, uint256 h2);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct HeightDiffLtTwo {
        #[allow(missing_docs)]
        pub h1: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub h2: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<HeightDiffLtTwo> for UnderlyingRustTuple<'_> {
            fn from(value: HeightDiffLtTwo) -> Self {
                (value.h1, value.h2)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for HeightDiffLtTwo {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { h1: tuple.0, h2: tuple.1 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for HeightDiffLtTwo {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "HeightDiffLtTwo(uint256,uint256)";
            const SELECTOR: [u8; 4] = [144u8, 41u8, 133u8, 148u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.h1),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.h2),
                )
            }
        }
    };
    /**Custom error with signature `InsufficientConfirmationBlocks(uint256,uint256)` and selector `0x11a8d4d0`.
```solidity
error InsufficientConfirmationBlocks(uint256 totalBlocks, uint256 thresholdBlocks);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InsufficientConfirmationBlocks {
        #[allow(missing_docs)]
        pub totalBlocks: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub thresholdBlocks: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InsufficientConfirmationBlocks>
        for UnderlyingRustTuple<'_> {
            fn from(value: InsufficientConfirmationBlocks) -> Self {
                (value.totalBlocks, value.thresholdBlocks)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for InsufficientConfirmationBlocks {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    totalBlocks: tuple.0,
                    thresholdBlocks: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InsufficientConfirmationBlocks {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InsufficientConfirmationBlocks(uint256,uint256)";
            const SELECTOR: [u8; 4] = [17u8, 168u8, 212u8, 208u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.totalBlocks),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.thresholdBlocks),
                )
            }
        }
    };
    /**Custom error with signature `InvalidEndHeight(uint256,uint256)` and selector `0xdfcc62bc`.
```solidity
error InvalidEndHeight(uint256 actualHeight, uint256 expectedHeight);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidEndHeight {
        #[allow(missing_docs)]
        pub actualHeight: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub expectedHeight: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidEndHeight> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidEndHeight) -> Self {
                (value.actualHeight, value.expectedHeight)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidEndHeight {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    actualHeight: tuple.0,
                    expectedHeight: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidEndHeight {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidEndHeight(uint256,uint256)";
            const SELECTOR: [u8; 4] = [223u8, 204u8, 98u8, 188u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.actualHeight),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.expectedHeight),
                )
            }
        }
    };
    /**Custom error with signature `InvalidHeights(uint256,uint256)` and selector `0x2060faf4`.
```solidity
error InvalidHeights(uint256 start, uint256 end);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidHeights {
        #[allow(missing_docs)]
        pub start: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub end: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidHeights> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidHeights) -> Self {
                (value.start, value.end)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidHeights {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    start: tuple.0,
                    end: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidHeights {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidHeights(uint256,uint256)";
            const SELECTOR: [u8; 4] = [32u8, 96u8, 250u8, 244u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.start),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.end),
                )
            }
        }
    };
    /**Custom error with signature `LevelTooHigh(uint8,uint8)` and selector `0xae0da578`.
```solidity
error LevelTooHigh(uint8 level, uint8 numBigStepLevels);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct LevelTooHigh {
        #[allow(missing_docs)]
        pub level: u8,
        #[allow(missing_docs)]
        pub numBigStepLevels: u8,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<8>,
            alloy::sol_types::sol_data::Uint<8>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (u8, u8);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<LevelTooHigh> for UnderlyingRustTuple<'_> {
            fn from(value: LevelTooHigh) -> Self {
                (value.level, value.numBigStepLevels)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for LevelTooHigh {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    level: tuple.0,
                    numBigStepLevels: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for LevelTooHigh {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "LevelTooHigh(uint8,uint8)";
            const SELECTOR: [u8; 4] = [174u8, 13u8, 165u8, 120u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::SolType>::tokenize(&self.level),
                    <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::SolType>::tokenize(&self.numBigStepLevels),
                )
            }
        }
    };
    /**Custom error with signature `MerkleProofTooLong(uint256,uint256)` and selector `0xfdac331e`.
```solidity
error MerkleProofTooLong(uint256 actualLength, uint256 maxProofLength);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MerkleProofTooLong {
        #[allow(missing_docs)]
        pub actualLength: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub maxProofLength: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<MerkleProofTooLong> for UnderlyingRustTuple<'_> {
            fn from(value: MerkleProofTooLong) -> Self {
                (value.actualLength, value.maxProofLength)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for MerkleProofTooLong {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    actualLength: tuple.0,
                    maxProofLength: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for MerkleProofTooLong {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "MerkleProofTooLong(uint256,uint256)";
            const SELECTOR: [u8; 4] = [253u8, 172u8, 51u8, 30u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.actualLength),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.maxProofLength),
                )
            }
        }
    };
    /**Custom error with signature `NotPowerOfTwo(uint256)` and selector `0xeafedbfc`.
```solidity
error NotPowerOfTwo(uint256 val);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotPowerOfTwo {
        #[allow(missing_docs)]
        pub val: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotPowerOfTwo> for UnderlyingRustTuple<'_> {
            fn from(value: NotPowerOfTwo) -> Self {
                (value.val,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotPowerOfTwo {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { val: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotPowerOfTwo {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotPowerOfTwo(uint256)";
            const SELECTOR: [u8; 4] = [234u8, 254u8, 219u8, 252u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.val),
                )
            }
        }
    };
    /**Custom error with signature `RivalEdgeConfirmed(bytes32,bytes32)` and selector `0xdd7028f0`.
```solidity
error RivalEdgeConfirmed(bytes32 edgeId, bytes32 confirmedRivalId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct RivalEdgeConfirmed {
        #[allow(missing_docs)]
        pub edgeId: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub confirmedRivalId: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<RivalEdgeConfirmed> for UnderlyingRustTuple<'_> {
            fn from(value: RivalEdgeConfirmed) -> Self {
                (value.edgeId, value.confirmedRivalId)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for RivalEdgeConfirmed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    edgeId: tuple.0,
                    confirmedRivalId: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for RivalEdgeConfirmed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "RivalEdgeConfirmed(bytes32,bytes32)";
            const SELECTOR: [u8; 4] = [221u8, 112u8, 40u8, 240u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.edgeId),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.confirmedRivalId),
                )
            }
        }
    };
    /**Function with signature `add((bytes32,bytes32,uint256,bytes32,uint256,bytes32,bytes32,bytes32,address,uint64,uint64,uint8,uint8,bool,uint64))` and selector `0xcd2860ac`.
```solidity
function add(ChallengeEdge memory edge) external returns (EdgeAddedData memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addCall {
        #[allow(missing_docs)]
        pub edge: <ChallengeEdge as alloy::sol_types::SolType>::RustType,
    }
    ///Container type for the return parameters of the [`add((bytes32,bytes32,uint256,bytes32,uint256,bytes32,bytes32,bytes32,address,uint64,uint64,uint8,uint8,bool,uint64))`](addCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addReturn {
        #[allow(missing_docs)]
        pub _0: <EdgeAddedData as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (ChallengeEdge,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <ChallengeEdge as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addCall> for UnderlyingRustTuple<'_> {
                fn from(value: addCall) -> Self {
                    (value.edge,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for addCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { edge: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (EdgeAddedData,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <EdgeAddedData as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addReturn> for UnderlyingRustTuple<'_> {
                fn from(value: addReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for addReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for addCall {
            type Parameters<'a> = (ChallengeEdge,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = addReturn;
            type ReturnTuple<'a> = (EdgeAddedData,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "add((bytes32,bytes32,uint256,bytes32,uint256,bytes32,bytes32,bytes32,address,uint64,uint64,uint8,uint8,bool,uint64))";
            const SELECTOR: [u8; 4] = [205u8, 40u8, 96u8, 172u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (<ChallengeEdge as alloy_sol_types::SolType>::tokenize(&self.edge),)
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `bisectEdge(bytes32,bytes32,bytes)` and selector `0xc8bc4e43`.
```solidity
function bisectEdge(bytes32 edgeId, bytes32 bisectionHistoryRoot, bytes memory prefixProof) external returns (bytes32, EdgeAddedData memory, EdgeAddedData memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bisectEdgeCall {
        #[allow(missing_docs)]
        pub edgeId: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub bisectionHistoryRoot: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub prefixProof: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`bisectEdge(bytes32,bytes32,bytes)`](bisectEdgeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bisectEdgeReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub _1: <EdgeAddedData as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub _2: <EdgeAddedData as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bisectEdgeCall> for UnderlyingRustTuple<'_> {
                fn from(value: bisectEdgeCall) -> Self {
                    (value.edgeId, value.bisectionHistoryRoot, value.prefixProof)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for bisectEdgeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        edgeId: tuple.0,
                        bisectionHistoryRoot: tuple.1,
                        prefixProof: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                EdgeAddedData,
                EdgeAddedData,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                <EdgeAddedData as alloy::sol_types::SolType>::RustType,
                <EdgeAddedData as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bisectEdgeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: bisectEdgeReturn) -> Self {
                    (value._0, value._1, value._2)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for bisectEdgeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _0: tuple.0,
                        _1: tuple.1,
                        _2: tuple.2,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for bisectEdgeCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bisectEdgeReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                EdgeAddedData,
                EdgeAddedData,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "bisectEdge(bytes32,bytes32,bytes)";
            const SELECTOR: [u8; 4] = [200u8, 188u8, 78u8, 67u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.edgeId),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.bisectionHistoryRoot),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.prefixProof,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `confirmEdgeByOneStepProof(bytes32,address,(bytes32,bytes),(uint256,address,bytes32),bytes32[],bytes32[],uint8,uint256,uint256)` and selector `0xe7faf63e`.
```solidity
function confirmEdgeByOneStepProof(bytes32 edgeId, address oneStepProofEntry, OneStepData memory oneStepData, ExecutionContext memory execCtx, bytes32[] memory beforeHistoryInclusionProof, bytes32[] memory afterHistoryInclusionProof, uint8 numBigStepLevel, uint256 bigStepHeight, uint256 smallStepHeight) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct confirmEdgeByOneStepProofCall {
        #[allow(missing_docs)]
        pub edgeId: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub oneStepProofEntry: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub oneStepData: <OneStepData as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub execCtx: <ExecutionContext as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub beforeHistoryInclusionProof: alloy::sol_types::private::Vec<
            alloy::sol_types::private::FixedBytes<32>,
        >,
        #[allow(missing_docs)]
        pub afterHistoryInclusionProof: alloy::sol_types::private::Vec<
            alloy::sol_types::private::FixedBytes<32>,
        >,
        #[allow(missing_docs)]
        pub numBigStepLevel: u8,
        #[allow(missing_docs)]
        pub bigStepHeight: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub smallStepHeight: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`confirmEdgeByOneStepProof(bytes32,address,(bytes32,bytes),(uint256,address,bytes32),bytes32[],bytes32[],uint8,uint256,uint256)`](confirmEdgeByOneStepProofCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct confirmEdgeByOneStepProofReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                OneStepData,
                ExecutionContext,
                alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::FixedBytes<32>,
                >,
                alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::FixedBytes<32>,
                >,
                alloy::sol_types::sol_data::Uint<8>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
                <OneStepData as alloy::sol_types::SolType>::RustType,
                <ExecutionContext as alloy::sol_types::SolType>::RustType,
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::FixedBytes<32>,
                >,
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::FixedBytes<32>,
                >,
                u8,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<confirmEdgeByOneStepProofCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: confirmEdgeByOneStepProofCall) -> Self {
                    (
                        value.edgeId,
                        value.oneStepProofEntry,
                        value.oneStepData,
                        value.execCtx,
                        value.beforeHistoryInclusionProof,
                        value.afterHistoryInclusionProof,
                        value.numBigStepLevel,
                        value.bigStepHeight,
                        value.smallStepHeight,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for confirmEdgeByOneStepProofCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        edgeId: tuple.0,
                        oneStepProofEntry: tuple.1,
                        oneStepData: tuple.2,
                        execCtx: tuple.3,
                        beforeHistoryInclusionProof: tuple.4,
                        afterHistoryInclusionProof: tuple.5,
                        numBigStepLevel: tuple.6,
                        bigStepHeight: tuple.7,
                        smallStepHeight: tuple.8,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<confirmEdgeByOneStepProofReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: confirmEdgeByOneStepProofReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for confirmEdgeByOneStepProofReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for confirmEdgeByOneStepProofCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                OneStepData,
                ExecutionContext,
                alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::FixedBytes<32>,
                >,
                alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::FixedBytes<32>,
                >,
                alloy::sol_types::sol_data::Uint<8>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = confirmEdgeByOneStepProofReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "confirmEdgeByOneStepProof(bytes32,address,(bytes32,bytes),(uint256,address,bytes32),bytes32[],bytes32[],uint8,uint256,uint256)";
            const SELECTOR: [u8; 4] = [231u8, 250u8, 246u8, 62u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.edgeId),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.oneStepProofEntry,
                    ),
                    <OneStepData as alloy_sol_types::SolType>::tokenize(
                        &self.oneStepData,
                    ),
                    <ExecutionContext as alloy_sol_types::SolType>::tokenize(
                        &self.execCtx,
                    ),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::FixedBytes<32>,
                    > as alloy_sol_types::SolType>::tokenize(
                        &self.beforeHistoryInclusionProof,
                    ),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::FixedBytes<32>,
                    > as alloy_sol_types::SolType>::tokenize(
                        &self.afterHistoryInclusionProof,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::SolType>::tokenize(&self.numBigStepLevel),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.bigStepHeight),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.smallStepHeight),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `confirmEdgeByTime(bytes32,uint64,uint64)` and selector `0x610df39e`.
```solidity
function confirmEdgeByTime(bytes32 edgeId, uint64 claimedAssertionUnrivaledBlocks, uint64 confirmationThresholdBlock) external returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct confirmEdgeByTimeCall {
        #[allow(missing_docs)]
        pub edgeId: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub claimedAssertionUnrivaledBlocks: u64,
        #[allow(missing_docs)]
        pub confirmationThresholdBlock: u64,
    }
    ///Container type for the return parameters of the [`confirmEdgeByTime(bytes32,uint64,uint64)`](confirmEdgeByTimeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct confirmEdgeByTimeReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<64>,
                alloy::sol_types::sol_data::Uint<64>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                u64,
                u64,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<confirmEdgeByTimeCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: confirmEdgeByTimeCall) -> Self {
                    (
                        value.edgeId,
                        value.claimedAssertionUnrivaledBlocks,
                        value.confirmationThresholdBlock,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for confirmEdgeByTimeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        edgeId: tuple.0,
                        claimedAssertionUnrivaledBlocks: tuple.1,
                        confirmationThresholdBlock: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<confirmEdgeByTimeReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: confirmEdgeByTimeReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for confirmEdgeByTimeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for confirmEdgeByTimeCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<64>,
                alloy::sol_types::sol_data::Uint<64>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = confirmEdgeByTimeReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "confirmEdgeByTime(bytes32,uint64,uint64)";
            const SELECTOR: [u8; 4] = [97u8, 13u8, 243u8, 158u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.edgeId),
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(
                        &self.claimedAssertionUnrivaledBlocks,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(
                        &self.confirmationThresholdBlock,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `confirmedRivals(bytes32)` and selector `0xb292a8ee`.
```solidity
function confirmedRivals(bytes32 mutualId) external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct confirmedRivalsCall {
        #[allow(missing_docs)]
        pub mutualId: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`confirmedRivals(bytes32)`](confirmedRivalsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct confirmedRivalsReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<confirmedRivalsCall> for UnderlyingRustTuple<'_> {
                fn from(value: confirmedRivalsCall) -> Self {
                    (value.mutualId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for confirmedRivalsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { mutualId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<confirmedRivalsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: confirmedRivalsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for confirmedRivalsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for confirmedRivalsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = confirmedRivalsReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "confirmedRivals(bytes32)";
            const SELECTOR: [u8; 4] = [178u8, 146u8, 168u8, 238u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.mutualId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `createLayerZeroEdge((uint8,bytes32,uint256,bytes32,bytes,bytes),(bytes32,bytes32,bool,bool,((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)),address,uint256,uint8,bool)` and selector `0xf9a239f5`.
```solidity
function createLayerZeroEdge(CreateEdgeArgs memory args, AssertionReferenceData memory ard, address oneStepProofEntry, uint256 expectedEndHeight, uint8 numBigStepLevel, bool whitelistEnabled) external returns (EdgeAddedData memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct createLayerZeroEdgeCall {
        #[allow(missing_docs)]
        pub args: <CreateEdgeArgs as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub ard: <AssertionReferenceData as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub oneStepProofEntry: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub expectedEndHeight: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub numBigStepLevel: u8,
        #[allow(missing_docs)]
        pub whitelistEnabled: bool,
    }
    ///Container type for the return parameters of the [`createLayerZeroEdge((uint8,bytes32,uint256,bytes32,bytes,bytes),(bytes32,bytes32,bool,bool,((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)),address,uint256,uint8,bool)`](createLayerZeroEdgeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct createLayerZeroEdgeReturn {
        #[allow(missing_docs)]
        pub _0: <EdgeAddedData as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                CreateEdgeArgs,
                AssertionReferenceData,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<8>,
                alloy::sol_types::sol_data::Bool,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <CreateEdgeArgs as alloy::sol_types::SolType>::RustType,
                <AssertionReferenceData as alloy::sol_types::SolType>::RustType,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                u8,
                bool,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<createLayerZeroEdgeCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: createLayerZeroEdgeCall) -> Self {
                    (
                        value.args,
                        value.ard,
                        value.oneStepProofEntry,
                        value.expectedEndHeight,
                        value.numBigStepLevel,
                        value.whitelistEnabled,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for createLayerZeroEdgeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        args: tuple.0,
                        ard: tuple.1,
                        oneStepProofEntry: tuple.2,
                        expectedEndHeight: tuple.3,
                        numBigStepLevel: tuple.4,
                        whitelistEnabled: tuple.5,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (EdgeAddedData,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <EdgeAddedData as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<createLayerZeroEdgeReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: createLayerZeroEdgeReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for createLayerZeroEdgeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for createLayerZeroEdgeCall {
            type Parameters<'a> = (
                CreateEdgeArgs,
                AssertionReferenceData,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<8>,
                alloy::sol_types::sol_data::Bool,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = createLayerZeroEdgeReturn;
            type ReturnTuple<'a> = (EdgeAddedData,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "createLayerZeroEdge((uint8,bytes32,uint256,bytes32,bytes,bytes),(bytes32,bytes32,bool,bool,((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)),address,uint256,uint8,bool)";
            const SELECTOR: [u8; 4] = [249u8, 162u8, 57u8, 245u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <CreateEdgeArgs as alloy_sol_types::SolType>::tokenize(&self.args),
                    <AssertionReferenceData as alloy_sol_types::SolType>::tokenize(
                        &self.ard,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.oneStepProofEntry,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.expectedEndHeight),
                    <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::SolType>::tokenize(&self.numBigStepLevel),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.whitelistEnabled,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `exists(bytes32)` and selector `0x38a699a4`.
```solidity
function exists(bytes32 edgeId) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct existsCall {
        #[allow(missing_docs)]
        pub edgeId: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`exists(bytes32)`](existsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct existsReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<existsCall> for UnderlyingRustTuple<'_> {
                fn from(value: existsCall) -> Self {
                    (value.edgeId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for existsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { edgeId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<existsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: existsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for existsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for existsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = existsReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "exists(bytes32)";
            const SELECTOR: [u8; 4] = [56u8, 166u8, 153u8, 164u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.edgeId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `firstRivals(bytes32)` and selector `0x4c478bb7`.
```solidity
function firstRivals(bytes32 mutualId) external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct firstRivalsCall {
        #[allow(missing_docs)]
        pub mutualId: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`firstRivals(bytes32)`](firstRivalsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct firstRivalsReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<firstRivalsCall> for UnderlyingRustTuple<'_> {
                fn from(value: firstRivalsCall) -> Self {
                    (value.mutualId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for firstRivalsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { mutualId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<firstRivalsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: firstRivalsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for firstRivalsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for firstRivalsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = firstRivalsReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "firstRivals(bytes32)";
            const SELECTOR: [u8; 4] = [76u8, 71u8, 139u8, 183u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.mutualId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `get(bytes32)` and selector `0x8eaa6ac0`.
```solidity
function get(bytes32 edgeId) external view returns (ChallengeEdge memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCall {
        #[allow(missing_docs)]
        pub edgeId: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`get(bytes32)`](getCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getReturn {
        #[allow(missing_docs)]
        pub _0: <ChallengeEdge as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCall> for UnderlyingRustTuple<'_> {
                fn from(value: getCall) -> Self {
                    (value.edgeId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { edgeId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (ChallengeEdge,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <ChallengeEdge as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getReturn;
            type ReturnTuple<'a> = (ChallengeEdge,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "get(bytes32)";
            const SELECTOR: [u8; 4] = [142u8, 170u8, 106u8, 192u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.edgeId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getConfirmedRival(bytes32)` and selector `0xc89a166c`.
```solidity
function getConfirmedRival(bytes32 mutualId) external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getConfirmedRivalCall {
        #[allow(missing_docs)]
        pub mutualId: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`getConfirmedRival(bytes32)`](getConfirmedRivalCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getConfirmedRivalReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getConfirmedRivalCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getConfirmedRivalCall) -> Self {
                    (value.mutualId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getConfirmedRivalCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { mutualId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getConfirmedRivalReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getConfirmedRivalReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getConfirmedRivalReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getConfirmedRivalCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getConfirmedRivalReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getConfirmedRival(bytes32)";
            const SELECTOR: [u8; 4] = [200u8, 154u8, 22u8, 108u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.mutualId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getNoCheck(bytes32)` and selector `0x8fb7d65e`.
```solidity
function getNoCheck(bytes32 edgeId) external view returns (ChallengeEdge memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getNoCheckCall {
        #[allow(missing_docs)]
        pub edgeId: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`getNoCheck(bytes32)`](getNoCheckCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getNoCheckReturn {
        #[allow(missing_docs)]
        pub _0: <ChallengeEdge as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getNoCheckCall> for UnderlyingRustTuple<'_> {
                fn from(value: getNoCheckCall) -> Self {
                    (value.edgeId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getNoCheckCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { edgeId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (ChallengeEdge,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <ChallengeEdge as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getNoCheckReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getNoCheckReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getNoCheckReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getNoCheckCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getNoCheckReturn;
            type ReturnTuple<'a> = (ChallengeEdge,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getNoCheck(bytes32)";
            const SELECTOR: [u8; 4] = [143u8, 183u8, 214u8, 94u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.edgeId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getPrevAssertionHash(bytes32)` and selector `0x5a48e0f4`.
```solidity
function getPrevAssertionHash(bytes32 edgeId) external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getPrevAssertionHashCall {
        #[allow(missing_docs)]
        pub edgeId: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`getPrevAssertionHash(bytes32)`](getPrevAssertionHashCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getPrevAssertionHashReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getPrevAssertionHashCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getPrevAssertionHashCall) -> Self {
                    (value.edgeId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getPrevAssertionHashCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { edgeId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getPrevAssertionHashReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getPrevAssertionHashReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getPrevAssertionHashReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getPrevAssertionHashCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getPrevAssertionHashReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getPrevAssertionHash(bytes32)";
            const SELECTOR: [u8; 4] = [90u8, 72u8, 224u8, 244u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.edgeId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `hasLengthOneRival(bytes32)` and selector `0x54b64151`.
```solidity
function hasLengthOneRival(bytes32 edgeId) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hasLengthOneRivalCall {
        #[allow(missing_docs)]
        pub edgeId: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`hasLengthOneRival(bytes32)`](hasLengthOneRivalCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hasLengthOneRivalReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hasLengthOneRivalCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: hasLengthOneRivalCall) -> Self {
                    (value.edgeId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for hasLengthOneRivalCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { edgeId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hasLengthOneRivalReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: hasLengthOneRivalReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for hasLengthOneRivalReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for hasLengthOneRivalCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = hasLengthOneRivalReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "hasLengthOneRival(bytes32)";
            const SELECTOR: [u8; 4] = [84u8, 182u8, 65u8, 81u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.edgeId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `hasMadeLayerZeroRival(address,bytes32)` and selector `0x655b42f3`.
```solidity
function hasMadeLayerZeroRival(address account, bytes32 mutualId) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hasMadeLayerZeroRivalCall {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub mutualId: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`hasMadeLayerZeroRival(address,bytes32)`](hasMadeLayerZeroRivalCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hasMadeLayerZeroRivalReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hasMadeLayerZeroRivalCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: hasMadeLayerZeroRivalCall) -> Self {
                    (value.account, value.mutualId)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for hasMadeLayerZeroRivalCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        account: tuple.0,
                        mutualId: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hasMadeLayerZeroRivalReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: hasMadeLayerZeroRivalReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for hasMadeLayerZeroRivalReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for hasMadeLayerZeroRivalCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = hasMadeLayerZeroRivalReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "hasMadeLayerZeroRival(address,bytes32)";
            const SELECTOR: [u8; 4] = [101u8, 91u8, 66u8, 243u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.mutualId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `hasRival(bytes32)` and selector `0x908517e9`.
```solidity
function hasRival(bytes32 edgeId) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hasRivalCall {
        #[allow(missing_docs)]
        pub edgeId: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`hasRival(bytes32)`](hasRivalCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hasRivalReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hasRivalCall> for UnderlyingRustTuple<'_> {
                fn from(value: hasRivalCall) -> Self {
                    (value.edgeId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for hasRivalCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { edgeId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hasRivalReturn> for UnderlyingRustTuple<'_> {
                fn from(value: hasRivalReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for hasRivalReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for hasRivalCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = hasRivalReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "hasRival(bytes32)";
            const SELECTOR: [u8; 4] = [144u8, 133u8, 23u8, 233u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.edgeId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isPowerOfTwo(uint256)` and selector `0x06388dd6`.
```solidity
function isPowerOfTwo(uint256 x) external pure returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isPowerOfTwoCall {
        #[allow(missing_docs)]
        pub x: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`isPowerOfTwo(uint256)`](isPowerOfTwoCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isPowerOfTwoReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isPowerOfTwoCall> for UnderlyingRustTuple<'_> {
                fn from(value: isPowerOfTwoCall) -> Self {
                    (value.x,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isPowerOfTwoCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { x: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isPowerOfTwoReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isPowerOfTwoReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isPowerOfTwoReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isPowerOfTwoCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isPowerOfTwoReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isPowerOfTwo(uint256)";
            const SELECTOR: [u8; 4] = [6u8, 56u8, 141u8, 214u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.x),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `mandatoryBisectionHeight(uint256,uint256)` and selector `0xcd8fc677`.
```solidity
function mandatoryBisectionHeight(uint256 start, uint256 end) external pure returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct mandatoryBisectionHeightCall {
        #[allow(missing_docs)]
        pub start: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub end: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`mandatoryBisectionHeight(uint256,uint256)`](mandatoryBisectionHeightCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct mandatoryBisectionHeightReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<mandatoryBisectionHeightCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: mandatoryBisectionHeightCall) -> Self {
                    (value.start, value.end)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for mandatoryBisectionHeightCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        start: tuple.0,
                        end: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<mandatoryBisectionHeightReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: mandatoryBisectionHeightReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for mandatoryBisectionHeightReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for mandatoryBisectionHeightCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = mandatoryBisectionHeightReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "mandatoryBisectionHeight(uint256,uint256)";
            const SELECTOR: [u8; 4] = [205u8, 143u8, 198u8, 119u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.start),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.end),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `nextEdgeLevel(uint8,uint8)` and selector `0x7e4098d7`.
```solidity
function nextEdgeLevel(uint8 level, uint8 numBigStepLevel) external pure returns (uint8);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct nextEdgeLevelCall {
        #[allow(missing_docs)]
        pub level: u8,
        #[allow(missing_docs)]
        pub numBigStepLevel: u8,
    }
    ///Container type for the return parameters of the [`nextEdgeLevel(uint8,uint8)`](nextEdgeLevelCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct nextEdgeLevelReturn {
        #[allow(missing_docs)]
        pub _0: u8,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<8>,
                alloy::sol_types::sol_data::Uint<8>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u8, u8);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<nextEdgeLevelCall> for UnderlyingRustTuple<'_> {
                fn from(value: nextEdgeLevelCall) -> Self {
                    (value.level, value.numBigStepLevel)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for nextEdgeLevelCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        level: tuple.0,
                        numBigStepLevel: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<8>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u8,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<nextEdgeLevelReturn> for UnderlyingRustTuple<'_> {
                fn from(value: nextEdgeLevelReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for nextEdgeLevelReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for nextEdgeLevelCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<8>,
                alloy::sol_types::sol_data::Uint<8>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = nextEdgeLevelReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<8>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "nextEdgeLevel(uint8,uint8)";
            const SELECTOR: [u8; 4] = [126u8, 64u8, 152u8, 215u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::SolType>::tokenize(&self.level),
                    <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::SolType>::tokenize(&self.numBigStepLevel),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `remove(bytes32)` and selector `0x95bc2673`.
```solidity
function remove(bytes32 edgeId) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct removeCall {
        #[allow(missing_docs)]
        pub edgeId: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`remove(bytes32)`](removeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct removeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<removeCall> for UnderlyingRustTuple<'_> {
                fn from(value: removeCall) -> Self {
                    (value.edgeId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for removeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { edgeId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<removeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: removeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for removeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for removeCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = removeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "remove(bytes32)";
            const SELECTOR: [u8; 4] = [149u8, 188u8, 38u8, 115u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.edgeId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setClaimId(bytes32,bytes32)` and selector `0xc40e425e`.
```solidity
function setClaimId(bytes32 edgeId, bytes32 claimId) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setClaimIdCall {
        #[allow(missing_docs)]
        pub edgeId: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub claimId: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`setClaimId(bytes32,bytes32)`](setClaimIdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setClaimIdReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setClaimIdCall> for UnderlyingRustTuple<'_> {
                fn from(value: setClaimIdCall) -> Self {
                    (value.edgeId, value.claimId)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setClaimIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        edgeId: tuple.0,
                        claimId: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setClaimIdReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setClaimIdReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setClaimIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setClaimIdCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setClaimIdReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setClaimId(bytes32,bytes32)";
            const SELECTOR: [u8; 4] = [196u8, 14u8, 66u8, 94u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.edgeId),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.claimId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setConfirmed(bytes32)` and selector `0xa50c2361`.
```solidity
function setConfirmed(bytes32 id) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setConfirmedCall {
        #[allow(missing_docs)]
        pub id: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`setConfirmed(bytes32)`](setConfirmedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setConfirmedReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setConfirmedCall> for UnderlyingRustTuple<'_> {
                fn from(value: setConfirmedCall) -> Self {
                    (value.id,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setConfirmedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { id: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setConfirmedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setConfirmedReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setConfirmedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setConfirmedCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setConfirmedReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setConfirmed(bytes32)";
            const SELECTOR: [u8; 4] = [165u8, 12u8, 35u8, 97u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.id),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setConfirmedRival(bytes32)` and selector `0x05718ffe`.
```solidity
function setConfirmedRival(bytes32 edgeId) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setConfirmedRivalCall {
        #[allow(missing_docs)]
        pub edgeId: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`setConfirmedRival(bytes32)`](setConfirmedRivalCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setConfirmedRivalReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setConfirmedRivalCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setConfirmedRivalCall) -> Self {
                    (value.edgeId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setConfirmedRivalCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { edgeId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setConfirmedRivalReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setConfirmedRivalReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setConfirmedRivalReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setConfirmedRivalCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setConfirmedRivalReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setConfirmedRival(bytes32)";
            const SELECTOR: [u8; 4] = [5u8, 113u8, 143u8, 254u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.edgeId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setFirstRival(bytes32,bytes32)` and selector `0x4666e7bc`.
```solidity
function setFirstRival(bytes32 edgeId, bytes32 firstRival) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setFirstRivalCall {
        #[allow(missing_docs)]
        pub edgeId: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub firstRival: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`setFirstRival(bytes32,bytes32)`](setFirstRivalCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setFirstRivalReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setFirstRivalCall> for UnderlyingRustTuple<'_> {
                fn from(value: setFirstRivalCall) -> Self {
                    (value.edgeId, value.firstRival)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setFirstRivalCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        edgeId: tuple.0,
                        firstRival: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setFirstRivalReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setFirstRivalReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setFirstRivalReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setFirstRivalCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setFirstRivalReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setFirstRival(bytes32,bytes32)";
            const SELECTOR: [u8; 4] = [70u8, 102u8, 231u8, 188u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.edgeId),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.firstRival),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setHasMadeLayerZeroRival(address,bytes32,bool)` and selector `0x4c1f245c`.
```solidity
function setHasMadeLayerZeroRival(address account, bytes32 mutualId, bool x) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setHasMadeLayerZeroRivalCall {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub mutualId: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub x: bool,
    }
    ///Container type for the return parameters of the [`setHasMadeLayerZeroRival(address,bytes32,bool)`](setHasMadeLayerZeroRivalCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setHasMadeLayerZeroRivalReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Bool,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::FixedBytes<32>,
                bool,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setHasMadeLayerZeroRivalCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setHasMadeLayerZeroRivalCall) -> Self {
                    (value.account, value.mutualId, value.x)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setHasMadeLayerZeroRivalCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        account: tuple.0,
                        mutualId: tuple.1,
                        x: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setHasMadeLayerZeroRivalReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setHasMadeLayerZeroRivalReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setHasMadeLayerZeroRivalReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setHasMadeLayerZeroRivalCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Bool,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setHasMadeLayerZeroRivalReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setHasMadeLayerZeroRival(address,bytes32,bool)";
            const SELECTOR: [u8; 4] = [76u8, 31u8, 36u8, 92u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.mutualId),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.x,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setLevel(bytes32,uint8)` and selector `0x0e1ed1f5`.
```solidity
function setLevel(bytes32 edgeId, uint8 level) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setLevelCall {
        #[allow(missing_docs)]
        pub edgeId: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub level: u8,
    }
    ///Container type for the return parameters of the [`setLevel(bytes32,uint8)`](setLevelCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setLevelReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<8>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                u8,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setLevelCall> for UnderlyingRustTuple<'_> {
                fn from(value: setLevelCall) -> Self {
                    (value.edgeId, value.level)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setLevelCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        edgeId: tuple.0,
                        level: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setLevelReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setLevelReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setLevelReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setLevelCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<8>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setLevelReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setLevel(bytes32,uint8)";
            const SELECTOR: [u8; 4] = [14u8, 30u8, 209u8, 245u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.edgeId),
                    <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::SolType>::tokenize(&self.level),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `timeUnrivaled(bytes32)` and selector `0x3e35f5e8`.
```solidity
function timeUnrivaled(bytes32 edgeId) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct timeUnrivaledCall {
        #[allow(missing_docs)]
        pub edgeId: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`timeUnrivaled(bytes32)`](timeUnrivaledCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct timeUnrivaledReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<timeUnrivaledCall> for UnderlyingRustTuple<'_> {
                fn from(value: timeUnrivaledCall) -> Self {
                    (value.edgeId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for timeUnrivaledCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { edgeId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<timeUnrivaledReturn> for UnderlyingRustTuple<'_> {
                fn from(value: timeUnrivaledReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for timeUnrivaledReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for timeUnrivaledCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = timeUnrivaledReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "timeUnrivaled(bytes32)";
            const SELECTOR: [u8; 4] = [62u8, 53u8, 245u8, 232u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.edgeId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `timeUnrivaledTotal(bytes32)` and selector `0xe4cfe2aa`.
```solidity
function timeUnrivaledTotal(bytes32 edgeId) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct timeUnrivaledTotalCall {
        #[allow(missing_docs)]
        pub edgeId: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`timeUnrivaledTotal(bytes32)`](timeUnrivaledTotalCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct timeUnrivaledTotalReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<timeUnrivaledTotalCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: timeUnrivaledTotalCall) -> Self {
                    (value.edgeId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for timeUnrivaledTotalCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { edgeId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<timeUnrivaledTotalReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: timeUnrivaledTotalReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for timeUnrivaledTotalReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for timeUnrivaledTotalCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = timeUnrivaledTotalReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "timeUnrivaledTotal(bytes32)";
            const SELECTOR: [u8; 4] = [228u8, 207u8, 226u8, 170u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.edgeId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `updateTimerCacheByChildren(bytes32,uint256)` and selector `0xedaab54a`.
```solidity
function updateTimerCacheByChildren(bytes32 edgeId, uint256 maximumCachedTime) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateTimerCacheByChildrenCall {
        #[allow(missing_docs)]
        pub edgeId: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub maximumCachedTime: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`updateTimerCacheByChildren(bytes32,uint256)`](updateTimerCacheByChildrenCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateTimerCacheByChildrenReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateTimerCacheByChildrenCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateTimerCacheByChildrenCall) -> Self {
                    (value.edgeId, value.maximumCachedTime)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateTimerCacheByChildrenCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        edgeId: tuple.0,
                        maximumCachedTime: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateTimerCacheByChildrenReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateTimerCacheByChildrenReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateTimerCacheByChildrenReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for updateTimerCacheByChildrenCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = updateTimerCacheByChildrenReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "updateTimerCacheByChildren(bytes32,uint256)";
            const SELECTOR: [u8; 4] = [237u8, 170u8, 181u8, 74u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.edgeId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.maximumCachedTime),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`EdgeChallengeManagerLibAccess`](self) function calls.
    pub enum EdgeChallengeManagerLibAccessCalls {
        #[allow(missing_docs)]
        add(addCall),
        #[allow(missing_docs)]
        bisectEdge(bisectEdgeCall),
        #[allow(missing_docs)]
        confirmEdgeByOneStepProof(confirmEdgeByOneStepProofCall),
        #[allow(missing_docs)]
        confirmEdgeByTime(confirmEdgeByTimeCall),
        #[allow(missing_docs)]
        confirmedRivals(confirmedRivalsCall),
        #[allow(missing_docs)]
        createLayerZeroEdge(createLayerZeroEdgeCall),
        #[allow(missing_docs)]
        exists(existsCall),
        #[allow(missing_docs)]
        firstRivals(firstRivalsCall),
        #[allow(missing_docs)]
        get(getCall),
        #[allow(missing_docs)]
        getConfirmedRival(getConfirmedRivalCall),
        #[allow(missing_docs)]
        getNoCheck(getNoCheckCall),
        #[allow(missing_docs)]
        getPrevAssertionHash(getPrevAssertionHashCall),
        #[allow(missing_docs)]
        hasLengthOneRival(hasLengthOneRivalCall),
        #[allow(missing_docs)]
        hasMadeLayerZeroRival(hasMadeLayerZeroRivalCall),
        #[allow(missing_docs)]
        hasRival(hasRivalCall),
        #[allow(missing_docs)]
        isPowerOfTwo(isPowerOfTwoCall),
        #[allow(missing_docs)]
        mandatoryBisectionHeight(mandatoryBisectionHeightCall),
        #[allow(missing_docs)]
        nextEdgeLevel(nextEdgeLevelCall),
        #[allow(missing_docs)]
        remove(removeCall),
        #[allow(missing_docs)]
        setClaimId(setClaimIdCall),
        #[allow(missing_docs)]
        setConfirmed(setConfirmedCall),
        #[allow(missing_docs)]
        setConfirmedRival(setConfirmedRivalCall),
        #[allow(missing_docs)]
        setFirstRival(setFirstRivalCall),
        #[allow(missing_docs)]
        setHasMadeLayerZeroRival(setHasMadeLayerZeroRivalCall),
        #[allow(missing_docs)]
        setLevel(setLevelCall),
        #[allow(missing_docs)]
        timeUnrivaled(timeUnrivaledCall),
        #[allow(missing_docs)]
        timeUnrivaledTotal(timeUnrivaledTotalCall),
        #[allow(missing_docs)]
        updateTimerCacheByChildren(updateTimerCacheByChildrenCall),
    }
    #[automatically_derived]
    impl EdgeChallengeManagerLibAccessCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [5u8, 113u8, 143u8, 254u8],
            [6u8, 56u8, 141u8, 214u8],
            [14u8, 30u8, 209u8, 245u8],
            [56u8, 166u8, 153u8, 164u8],
            [62u8, 53u8, 245u8, 232u8],
            [70u8, 102u8, 231u8, 188u8],
            [76u8, 31u8, 36u8, 92u8],
            [76u8, 71u8, 139u8, 183u8],
            [84u8, 182u8, 65u8, 81u8],
            [90u8, 72u8, 224u8, 244u8],
            [97u8, 13u8, 243u8, 158u8],
            [101u8, 91u8, 66u8, 243u8],
            [126u8, 64u8, 152u8, 215u8],
            [142u8, 170u8, 106u8, 192u8],
            [143u8, 183u8, 214u8, 94u8],
            [144u8, 133u8, 23u8, 233u8],
            [149u8, 188u8, 38u8, 115u8],
            [165u8, 12u8, 35u8, 97u8],
            [178u8, 146u8, 168u8, 238u8],
            [196u8, 14u8, 66u8, 94u8],
            [200u8, 154u8, 22u8, 108u8],
            [200u8, 188u8, 78u8, 67u8],
            [205u8, 40u8, 96u8, 172u8],
            [205u8, 143u8, 198u8, 119u8],
            [228u8, 207u8, 226u8, 170u8],
            [231u8, 250u8, 246u8, 62u8],
            [237u8, 170u8, 181u8, 74u8],
            [249u8, 162u8, 57u8, 245u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for EdgeChallengeManagerLibAccessCalls {
        const NAME: &'static str = "EdgeChallengeManagerLibAccessCalls";
        const MIN_DATA_LENGTH: usize = 32usize;
        const COUNT: usize = 28usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::add(_) => <addCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::bisectEdge(_) => {
                    <bisectEdgeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::confirmEdgeByOneStepProof(_) => {
                    <confirmEdgeByOneStepProofCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::confirmEdgeByTime(_) => {
                    <confirmEdgeByTimeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::confirmedRivals(_) => {
                    <confirmedRivalsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::createLayerZeroEdge(_) => {
                    <createLayerZeroEdgeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::exists(_) => <existsCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::firstRivals(_) => {
                    <firstRivalsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::get(_) => <getCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::getConfirmedRival(_) => {
                    <getConfirmedRivalCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getNoCheck(_) => {
                    <getNoCheckCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getPrevAssertionHash(_) => {
                    <getPrevAssertionHashCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::hasLengthOneRival(_) => {
                    <hasLengthOneRivalCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::hasMadeLayerZeroRival(_) => {
                    <hasMadeLayerZeroRivalCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::hasRival(_) => <hasRivalCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::isPowerOfTwo(_) => {
                    <isPowerOfTwoCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::mandatoryBisectionHeight(_) => {
                    <mandatoryBisectionHeightCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::nextEdgeLevel(_) => {
                    <nextEdgeLevelCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::remove(_) => <removeCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::setClaimId(_) => {
                    <setClaimIdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setConfirmed(_) => {
                    <setConfirmedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setConfirmedRival(_) => {
                    <setConfirmedRivalCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setFirstRival(_) => {
                    <setFirstRivalCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setHasMadeLayerZeroRival(_) => {
                    <setHasMadeLayerZeroRivalCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setLevel(_) => <setLevelCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::timeUnrivaled(_) => {
                    <timeUnrivaledCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::timeUnrivaledTotal(_) => {
                    <timeUnrivaledTotalCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::updateTimerCacheByChildren(_) => {
                    <updateTimerCacheByChildrenCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessCalls>] = &[
                {
                    fn setConfirmedRival(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessCalls> {
                        <setConfirmedRivalCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(EdgeChallengeManagerLibAccessCalls::setConfirmedRival)
                    }
                    setConfirmedRival
                },
                {
                    fn isPowerOfTwo(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessCalls> {
                        <isPowerOfTwoCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(EdgeChallengeManagerLibAccessCalls::isPowerOfTwo)
                    }
                    isPowerOfTwo
                },
                {
                    fn setLevel(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessCalls> {
                        <setLevelCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(EdgeChallengeManagerLibAccessCalls::setLevel)
                    }
                    setLevel
                },
                {
                    fn exists(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessCalls> {
                        <existsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(EdgeChallengeManagerLibAccessCalls::exists)
                    }
                    exists
                },
                {
                    fn timeUnrivaled(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessCalls> {
                        <timeUnrivaledCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(EdgeChallengeManagerLibAccessCalls::timeUnrivaled)
                    }
                    timeUnrivaled
                },
                {
                    fn setFirstRival(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessCalls> {
                        <setFirstRivalCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(EdgeChallengeManagerLibAccessCalls::setFirstRival)
                    }
                    setFirstRival
                },
                {
                    fn setHasMadeLayerZeroRival(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessCalls> {
                        <setHasMadeLayerZeroRivalCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                EdgeChallengeManagerLibAccessCalls::setHasMadeLayerZeroRival,
                            )
                    }
                    setHasMadeLayerZeroRival
                },
                {
                    fn firstRivals(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessCalls> {
                        <firstRivalsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(EdgeChallengeManagerLibAccessCalls::firstRivals)
                    }
                    firstRivals
                },
                {
                    fn hasLengthOneRival(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessCalls> {
                        <hasLengthOneRivalCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(EdgeChallengeManagerLibAccessCalls::hasLengthOneRival)
                    }
                    hasLengthOneRival
                },
                {
                    fn getPrevAssertionHash(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessCalls> {
                        <getPrevAssertionHashCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                EdgeChallengeManagerLibAccessCalls::getPrevAssertionHash,
                            )
                    }
                    getPrevAssertionHash
                },
                {
                    fn confirmEdgeByTime(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessCalls> {
                        <confirmEdgeByTimeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(EdgeChallengeManagerLibAccessCalls::confirmEdgeByTime)
                    }
                    confirmEdgeByTime
                },
                {
                    fn hasMadeLayerZeroRival(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessCalls> {
                        <hasMadeLayerZeroRivalCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                EdgeChallengeManagerLibAccessCalls::hasMadeLayerZeroRival,
                            )
                    }
                    hasMadeLayerZeroRival
                },
                {
                    fn nextEdgeLevel(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessCalls> {
                        <nextEdgeLevelCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(EdgeChallengeManagerLibAccessCalls::nextEdgeLevel)
                    }
                    nextEdgeLevel
                },
                {
                    fn get(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessCalls> {
                        <getCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(EdgeChallengeManagerLibAccessCalls::get)
                    }
                    get
                },
                {
                    fn getNoCheck(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessCalls> {
                        <getNoCheckCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(EdgeChallengeManagerLibAccessCalls::getNoCheck)
                    }
                    getNoCheck
                },
                {
                    fn hasRival(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessCalls> {
                        <hasRivalCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(EdgeChallengeManagerLibAccessCalls::hasRival)
                    }
                    hasRival
                },
                {
                    fn remove(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessCalls> {
                        <removeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(EdgeChallengeManagerLibAccessCalls::remove)
                    }
                    remove
                },
                {
                    fn setConfirmed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessCalls> {
                        <setConfirmedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(EdgeChallengeManagerLibAccessCalls::setConfirmed)
                    }
                    setConfirmed
                },
                {
                    fn confirmedRivals(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessCalls> {
                        <confirmedRivalsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(EdgeChallengeManagerLibAccessCalls::confirmedRivals)
                    }
                    confirmedRivals
                },
                {
                    fn setClaimId(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessCalls> {
                        <setClaimIdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(EdgeChallengeManagerLibAccessCalls::setClaimId)
                    }
                    setClaimId
                },
                {
                    fn getConfirmedRival(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessCalls> {
                        <getConfirmedRivalCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(EdgeChallengeManagerLibAccessCalls::getConfirmedRival)
                    }
                    getConfirmedRival
                },
                {
                    fn bisectEdge(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessCalls> {
                        <bisectEdgeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(EdgeChallengeManagerLibAccessCalls::bisectEdge)
                    }
                    bisectEdge
                },
                {
                    fn add(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessCalls> {
                        <addCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(EdgeChallengeManagerLibAccessCalls::add)
                    }
                    add
                },
                {
                    fn mandatoryBisectionHeight(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessCalls> {
                        <mandatoryBisectionHeightCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                EdgeChallengeManagerLibAccessCalls::mandatoryBisectionHeight,
                            )
                    }
                    mandatoryBisectionHeight
                },
                {
                    fn timeUnrivaledTotal(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessCalls> {
                        <timeUnrivaledTotalCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(EdgeChallengeManagerLibAccessCalls::timeUnrivaledTotal)
                    }
                    timeUnrivaledTotal
                },
                {
                    fn confirmEdgeByOneStepProof(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessCalls> {
                        <confirmEdgeByOneStepProofCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                EdgeChallengeManagerLibAccessCalls::confirmEdgeByOneStepProof,
                            )
                    }
                    confirmEdgeByOneStepProof
                },
                {
                    fn updateTimerCacheByChildren(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessCalls> {
                        <updateTimerCacheByChildrenCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                EdgeChallengeManagerLibAccessCalls::updateTimerCacheByChildren,
                            )
                    }
                    updateTimerCacheByChildren
                },
                {
                    fn createLayerZeroEdge(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessCalls> {
                        <createLayerZeroEdgeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(EdgeChallengeManagerLibAccessCalls::createLayerZeroEdge)
                    }
                    createLayerZeroEdge
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::add(inner) => {
                    <addCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::bisectEdge(inner) => {
                    <bisectEdgeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::confirmEdgeByOneStepProof(inner) => {
                    <confirmEdgeByOneStepProofCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::confirmEdgeByTime(inner) => {
                    <confirmEdgeByTimeCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::confirmedRivals(inner) => {
                    <confirmedRivalsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::createLayerZeroEdge(inner) => {
                    <createLayerZeroEdgeCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::exists(inner) => {
                    <existsCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::firstRivals(inner) => {
                    <firstRivalsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::get(inner) => {
                    <getCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::getConfirmedRival(inner) => {
                    <getConfirmedRivalCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getNoCheck(inner) => {
                    <getNoCheckCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::getPrevAssertionHash(inner) => {
                    <getPrevAssertionHashCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::hasLengthOneRival(inner) => {
                    <hasLengthOneRivalCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::hasMadeLayerZeroRival(inner) => {
                    <hasMadeLayerZeroRivalCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::hasRival(inner) => {
                    <hasRivalCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isPowerOfTwo(inner) => {
                    <isPowerOfTwoCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::mandatoryBisectionHeight(inner) => {
                    <mandatoryBisectionHeightCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::nextEdgeLevel(inner) => {
                    <nextEdgeLevelCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::remove(inner) => {
                    <removeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::setClaimId(inner) => {
                    <setClaimIdCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::setConfirmed(inner) => {
                    <setConfirmedCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setConfirmedRival(inner) => {
                    <setConfirmedRivalCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setFirstRival(inner) => {
                    <setFirstRivalCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setHasMadeLayerZeroRival(inner) => {
                    <setHasMadeLayerZeroRivalCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setLevel(inner) => {
                    <setLevelCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::timeUnrivaled(inner) => {
                    <timeUnrivaledCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::timeUnrivaledTotal(inner) => {
                    <timeUnrivaledTotalCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::updateTimerCacheByChildren(inner) => {
                    <updateTimerCacheByChildrenCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::add(inner) => {
                    <addCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::bisectEdge(inner) => {
                    <bisectEdgeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::confirmEdgeByOneStepProof(inner) => {
                    <confirmEdgeByOneStepProofCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::confirmEdgeByTime(inner) => {
                    <confirmEdgeByTimeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::confirmedRivals(inner) => {
                    <confirmedRivalsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::createLayerZeroEdge(inner) => {
                    <createLayerZeroEdgeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::exists(inner) => {
                    <existsCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::firstRivals(inner) => {
                    <firstRivalsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::get(inner) => {
                    <getCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::getConfirmedRival(inner) => {
                    <getConfirmedRivalCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getNoCheck(inner) => {
                    <getNoCheckCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getPrevAssertionHash(inner) => {
                    <getPrevAssertionHashCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::hasLengthOneRival(inner) => {
                    <hasLengthOneRivalCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::hasMadeLayerZeroRival(inner) => {
                    <hasMadeLayerZeroRivalCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::hasRival(inner) => {
                    <hasRivalCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isPowerOfTwo(inner) => {
                    <isPowerOfTwoCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::mandatoryBisectionHeight(inner) => {
                    <mandatoryBisectionHeightCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::nextEdgeLevel(inner) => {
                    <nextEdgeLevelCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::remove(inner) => {
                    <removeCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::setClaimId(inner) => {
                    <setClaimIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setConfirmed(inner) => {
                    <setConfirmedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setConfirmedRival(inner) => {
                    <setConfirmedRivalCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setFirstRival(inner) => {
                    <setFirstRivalCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setHasMadeLayerZeroRival(inner) => {
                    <setHasMadeLayerZeroRivalCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setLevel(inner) => {
                    <setLevelCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::timeUnrivaled(inner) => {
                    <timeUnrivaledCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::timeUnrivaledTotal(inner) => {
                    <timeUnrivaledTotalCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::updateTimerCacheByChildren(inner) => {
                    <updateTimerCacheByChildrenCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`EdgeChallengeManagerLibAccess`](self) custom errors.
    pub enum EdgeChallengeManagerLibAccessErrors {
        #[allow(missing_docs)]
        AccountHasMadeLayerZeroRival(AccountHasMadeLayerZeroRival),
        #[allow(missing_docs)]
        AssertionHashEmpty(AssertionHashEmpty),
        #[allow(missing_docs)]
        AssertionHashMismatch(AssertionHashMismatch),
        #[allow(missing_docs)]
        AssertionNoSibling(AssertionNoSibling),
        #[allow(missing_docs)]
        AssertionNotPending(AssertionNotPending),
        #[allow(missing_docs)]
        CachedTimeSufficient(CachedTimeSufficient),
        #[allow(missing_docs)]
        ChildrenAlreadySet(ChildrenAlreadySet),
        #[allow(missing_docs)]
        ClaimEdgeInvalidLevel(ClaimEdgeInvalidLevel),
        #[allow(missing_docs)]
        ClaimEdgeNotLengthOneRival(ClaimEdgeNotLengthOneRival),
        #[allow(missing_docs)]
        ClaimEdgeNotPending(ClaimEdgeNotPending),
        #[allow(missing_docs)]
        EdgeAlreadyExists(EdgeAlreadyExists),
        #[allow(missing_docs)]
        EdgeNotExists(EdgeNotExists),
        #[allow(missing_docs)]
        EdgeNotLengthOne(EdgeNotLengthOne),
        #[allow(missing_docs)]
        EdgeNotPending(EdgeNotPending),
        #[allow(missing_docs)]
        EdgeTypeNotSmallStep(EdgeTypeNotSmallStep),
        #[allow(missing_docs)]
        EdgeUnrivaled(EdgeUnrivaled),
        #[allow(missing_docs)]
        EmptyClaimId(EmptyClaimId),
        #[allow(missing_docs)]
        EmptyEdgeSpecificProof(EmptyEdgeSpecificProof),
        #[allow(missing_docs)]
        EmptyEndMachineStatus(EmptyEndMachineStatus),
        #[allow(missing_docs)]
        EmptyEndRoot(EmptyEndRoot),
        #[allow(missing_docs)]
        EmptyFirstRival(EmptyFirstRival),
        #[allow(missing_docs)]
        EmptyOriginId(EmptyOriginId),
        #[allow(missing_docs)]
        EmptyPrefixProof(EmptyPrefixProof),
        #[allow(missing_docs)]
        EmptyStaker(EmptyStaker),
        #[allow(missing_docs)]
        EmptyStartMachineStatus(EmptyStartMachineStatus),
        #[allow(missing_docs)]
        EmptyStartRoot(EmptyStartRoot),
        #[allow(missing_docs)]
        HeightDiffLtTwo(HeightDiffLtTwo),
        #[allow(missing_docs)]
        InsufficientConfirmationBlocks(InsufficientConfirmationBlocks),
        #[allow(missing_docs)]
        InvalidEndHeight(InvalidEndHeight),
        #[allow(missing_docs)]
        InvalidHeights(InvalidHeights),
        #[allow(missing_docs)]
        LevelTooHigh(LevelTooHigh),
        #[allow(missing_docs)]
        MerkleProofTooLong(MerkleProofTooLong),
        #[allow(missing_docs)]
        NotPowerOfTwo(NotPowerOfTwo),
        #[allow(missing_docs)]
        RivalEdgeConfirmed(RivalEdgeConfirmed),
    }
    #[automatically_derived]
    impl EdgeChallengeManagerLibAccessErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [0u8, 167u8, 176u8, 43u8],
            [17u8, 168u8, 212u8, 208u8],
            [18u8, 69u8, 159u8, 253u8],
            [32u8, 96u8, 250u8, 244u8],
            [35u8, 248u8, 64u8, 93u8],
            [52u8, 42u8, 7u8, 82u8],
            [52u8, 138u8, 239u8, 223u8],
            [70u8, 54u8, 94u8, 82u8],
            [90u8, 70u8, 172u8, 58u8],
            [91u8, 23u8, 122u8, 60u8],
            [92u8, 182u8, 229u8, 187u8],
            [105u8, 50u8, 188u8, 253u8],
            [107u8, 89u8, 94u8, 80u8],
            [128u8, 224u8, 126u8, 69u8],
            [131u8, 198u8, 131u8, 228u8],
            [137u8, 153u8, 133u8, 125u8],
            [139u8, 14u8, 113u8, 208u8],
            [141u8, 121u8, 219u8, 188u8],
            [144u8, 41u8, 133u8, 148u8],
            [172u8, 158u8, 97u8, 22u8],
            [174u8, 13u8, 165u8, 120u8],
            [180u8, 93u8, 28u8, 58u8],
            [188u8, 237u8, 243u8, 222u8],
            [193u8, 105u8, 36u8, 54u8],
            [201u8, 204u8, 172u8, 80u8],
            [209u8, 245u8, 146u8, 129u8],
            [218u8, 16u8, 246u8, 124u8],
            [221u8, 112u8, 40u8, 240u8],
            [223u8, 204u8, 98u8, 188u8],
            [233u8, 107u8, 198u8, 26u8],
            [234u8, 254u8, 219u8, 252u8],
            [242u8, 137u8, 230u8, 87u8],
            [253u8, 172u8, 51u8, 30u8],
            [255u8, 109u8, 155u8, 215u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for EdgeChallengeManagerLibAccessErrors {
        const NAME: &'static str = "EdgeChallengeManagerLibAccessErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 34usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AccountHasMadeLayerZeroRival(_) => {
                    <AccountHasMadeLayerZeroRival as alloy_sol_types::SolError>::SELECTOR
                }
                Self::AssertionHashEmpty(_) => {
                    <AssertionHashEmpty as alloy_sol_types::SolError>::SELECTOR
                }
                Self::AssertionHashMismatch(_) => {
                    <AssertionHashMismatch as alloy_sol_types::SolError>::SELECTOR
                }
                Self::AssertionNoSibling(_) => {
                    <AssertionNoSibling as alloy_sol_types::SolError>::SELECTOR
                }
                Self::AssertionNotPending(_) => {
                    <AssertionNotPending as alloy_sol_types::SolError>::SELECTOR
                }
                Self::CachedTimeSufficient(_) => {
                    <CachedTimeSufficient as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ChildrenAlreadySet(_) => {
                    <ChildrenAlreadySet as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ClaimEdgeInvalidLevel(_) => {
                    <ClaimEdgeInvalidLevel as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ClaimEdgeNotLengthOneRival(_) => {
                    <ClaimEdgeNotLengthOneRival as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ClaimEdgeNotPending(_) => {
                    <ClaimEdgeNotPending as alloy_sol_types::SolError>::SELECTOR
                }
                Self::EdgeAlreadyExists(_) => {
                    <EdgeAlreadyExists as alloy_sol_types::SolError>::SELECTOR
                }
                Self::EdgeNotExists(_) => {
                    <EdgeNotExists as alloy_sol_types::SolError>::SELECTOR
                }
                Self::EdgeNotLengthOne(_) => {
                    <EdgeNotLengthOne as alloy_sol_types::SolError>::SELECTOR
                }
                Self::EdgeNotPending(_) => {
                    <EdgeNotPending as alloy_sol_types::SolError>::SELECTOR
                }
                Self::EdgeTypeNotSmallStep(_) => {
                    <EdgeTypeNotSmallStep as alloy_sol_types::SolError>::SELECTOR
                }
                Self::EdgeUnrivaled(_) => {
                    <EdgeUnrivaled as alloy_sol_types::SolError>::SELECTOR
                }
                Self::EmptyClaimId(_) => {
                    <EmptyClaimId as alloy_sol_types::SolError>::SELECTOR
                }
                Self::EmptyEdgeSpecificProof(_) => {
                    <EmptyEdgeSpecificProof as alloy_sol_types::SolError>::SELECTOR
                }
                Self::EmptyEndMachineStatus(_) => {
                    <EmptyEndMachineStatus as alloy_sol_types::SolError>::SELECTOR
                }
                Self::EmptyEndRoot(_) => {
                    <EmptyEndRoot as alloy_sol_types::SolError>::SELECTOR
                }
                Self::EmptyFirstRival(_) => {
                    <EmptyFirstRival as alloy_sol_types::SolError>::SELECTOR
                }
                Self::EmptyOriginId(_) => {
                    <EmptyOriginId as alloy_sol_types::SolError>::SELECTOR
                }
                Self::EmptyPrefixProof(_) => {
                    <EmptyPrefixProof as alloy_sol_types::SolError>::SELECTOR
                }
                Self::EmptyStaker(_) => {
                    <EmptyStaker as alloy_sol_types::SolError>::SELECTOR
                }
                Self::EmptyStartMachineStatus(_) => {
                    <EmptyStartMachineStatus as alloy_sol_types::SolError>::SELECTOR
                }
                Self::EmptyStartRoot(_) => {
                    <EmptyStartRoot as alloy_sol_types::SolError>::SELECTOR
                }
                Self::HeightDiffLtTwo(_) => {
                    <HeightDiffLtTwo as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InsufficientConfirmationBlocks(_) => {
                    <InsufficientConfirmationBlocks as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidEndHeight(_) => {
                    <InvalidEndHeight as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidHeights(_) => {
                    <InvalidHeights as alloy_sol_types::SolError>::SELECTOR
                }
                Self::LevelTooHigh(_) => {
                    <LevelTooHigh as alloy_sol_types::SolError>::SELECTOR
                }
                Self::MerkleProofTooLong(_) => {
                    <MerkleProofTooLong as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotPowerOfTwo(_) => {
                    <NotPowerOfTwo as alloy_sol_types::SolError>::SELECTOR
                }
                Self::RivalEdgeConfirmed(_) => {
                    <RivalEdgeConfirmed as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessErrors>] = &[
                {
                    fn EdgeNotExists(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessErrors> {
                        <EdgeNotExists as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(EdgeChallengeManagerLibAccessErrors::EdgeNotExists)
                    }
                    EdgeNotExists
                },
                {
                    fn InsufficientConfirmationBlocks(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessErrors> {
                        <InsufficientConfirmationBlocks as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                EdgeChallengeManagerLibAccessErrors::InsufficientConfirmationBlocks,
                            )
                    }
                    InsufficientConfirmationBlocks
                },
                {
                    fn ClaimEdgeNotPending(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessErrors> {
                        <ClaimEdgeNotPending as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                EdgeChallengeManagerLibAccessErrors::ClaimEdgeNotPending,
                            )
                    }
                    ClaimEdgeNotPending
                },
                {
                    fn InvalidHeights(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessErrors> {
                        <InvalidHeights as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(EdgeChallengeManagerLibAccessErrors::InvalidHeights)
                    }
                    InvalidHeights
                },
                {
                    fn EdgeNotPending(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessErrors> {
                        <EdgeNotPending as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(EdgeChallengeManagerLibAccessErrors::EdgeNotPending)
                    }
                    EdgeNotPending
                },
                {
                    fn EmptyPrefixProof(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessErrors> {
                        <EmptyPrefixProof as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(EdgeChallengeManagerLibAccessErrors::EmptyPrefixProof)
                    }
                    EmptyPrefixProof
                },
                {
                    fn EdgeTypeNotSmallStep(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessErrors> {
                        <EdgeTypeNotSmallStep as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                EdgeChallengeManagerLibAccessErrors::EdgeTypeNotSmallStep,
                            )
                    }
                    EdgeTypeNotSmallStep
                },
                {
                    fn EmptyStartMachineStatus(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessErrors> {
                        <EmptyStartMachineStatus as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                EdgeChallengeManagerLibAccessErrors::EmptyStartMachineStatus,
                            )
                    }
                    EmptyStartMachineStatus
                },
                {
                    fn AccountHasMadeLayerZeroRival(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessErrors> {
                        <AccountHasMadeLayerZeroRival as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                EdgeChallengeManagerLibAccessErrors::AccountHasMadeLayerZeroRival,
                            )
                    }
                    AccountHasMadeLayerZeroRival
                },
                {
                    fn AssertionHashMismatch(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessErrors> {
                        <AssertionHashMismatch as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                EdgeChallengeManagerLibAccessErrors::AssertionHashMismatch,
                            )
                    }
                    AssertionHashMismatch
                },
                {
                    fn EmptyEndRoot(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessErrors> {
                        <EmptyEndRoot as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(EdgeChallengeManagerLibAccessErrors::EmptyEndRoot)
                    }
                    EmptyEndRoot
                },
                {
                    fn EmptyClaimId(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessErrors> {
                        <EmptyClaimId as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(EdgeChallengeManagerLibAccessErrors::EmptyClaimId)
                    }
                    EmptyClaimId
                },
                {
                    fn EdgeNotLengthOne(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessErrors> {
                        <EdgeNotLengthOne as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(EdgeChallengeManagerLibAccessErrors::EdgeNotLengthOne)
                    }
                    EdgeNotLengthOne
                },
                {
                    fn EdgeUnrivaled(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessErrors> {
                        <EdgeUnrivaled as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(EdgeChallengeManagerLibAccessErrors::EdgeUnrivaled)
                    }
                    EdgeUnrivaled
                },
                {
                    fn EmptyStartRoot(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessErrors> {
                        <EmptyStartRoot as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(EdgeChallengeManagerLibAccessErrors::EmptyStartRoot)
                    }
                    EmptyStartRoot
                },
                {
                    fn EmptyEndMachineStatus(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessErrors> {
                        <EmptyEndMachineStatus as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                EdgeChallengeManagerLibAccessErrors::EmptyEndMachineStatus,
                            )
                    }
                    EmptyEndMachineStatus
                },
                {
                    fn ChildrenAlreadySet(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessErrors> {
                        <ChildrenAlreadySet as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(EdgeChallengeManagerLibAccessErrors::ChildrenAlreadySet)
                    }
                    ChildrenAlreadySet
                },
                {
                    fn EmptyOriginId(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessErrors> {
                        <EmptyOriginId as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(EdgeChallengeManagerLibAccessErrors::EmptyOriginId)
                    }
                    EmptyOriginId
                },
                {
                    fn HeightDiffLtTwo(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessErrors> {
                        <HeightDiffLtTwo as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(EdgeChallengeManagerLibAccessErrors::HeightDiffLtTwo)
                    }
                    HeightDiffLtTwo
                },
                {
                    fn ClaimEdgeInvalidLevel(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessErrors> {
                        <ClaimEdgeInvalidLevel as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                EdgeChallengeManagerLibAccessErrors::ClaimEdgeInvalidLevel,
                            )
                    }
                    ClaimEdgeInvalidLevel
                },
                {
                    fn LevelTooHigh(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessErrors> {
                        <LevelTooHigh as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(EdgeChallengeManagerLibAccessErrors::LevelTooHigh)
                    }
                    LevelTooHigh
                },
                {
                    fn AssertionNoSibling(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessErrors> {
                        <AssertionNoSibling as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(EdgeChallengeManagerLibAccessErrors::AssertionNoSibling)
                    }
                    AssertionNoSibling
                },
                {
                    fn EdgeAlreadyExists(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessErrors> {
                        <EdgeAlreadyExists as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(EdgeChallengeManagerLibAccessErrors::EdgeAlreadyExists)
                    }
                    EdgeAlreadyExists
                },
                {
                    fn AssertionNotPending(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessErrors> {
                        <AssertionNotPending as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                EdgeChallengeManagerLibAccessErrors::AssertionNotPending,
                            )
                    }
                    AssertionNotPending
                },
                {
                    fn EmptyEdgeSpecificProof(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessErrors> {
                        <EmptyEdgeSpecificProof as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                EdgeChallengeManagerLibAccessErrors::EmptyEdgeSpecificProof,
                            )
                    }
                    EmptyEdgeSpecificProof
                },
                {
                    fn CachedTimeSufficient(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessErrors> {
                        <CachedTimeSufficient as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                EdgeChallengeManagerLibAccessErrors::CachedTimeSufficient,
                            )
                    }
                    CachedTimeSufficient
                },
                {
                    fn EmptyFirstRival(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessErrors> {
                        <EmptyFirstRival as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(EdgeChallengeManagerLibAccessErrors::EmptyFirstRival)
                    }
                    EmptyFirstRival
                },
                {
                    fn RivalEdgeConfirmed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessErrors> {
                        <RivalEdgeConfirmed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(EdgeChallengeManagerLibAccessErrors::RivalEdgeConfirmed)
                    }
                    RivalEdgeConfirmed
                },
                {
                    fn InvalidEndHeight(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessErrors> {
                        <InvalidEndHeight as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(EdgeChallengeManagerLibAccessErrors::InvalidEndHeight)
                    }
                    InvalidEndHeight
                },
                {
                    fn AssertionHashEmpty(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessErrors> {
                        <AssertionHashEmpty as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(EdgeChallengeManagerLibAccessErrors::AssertionHashEmpty)
                    }
                    AssertionHashEmpty
                },
                {
                    fn NotPowerOfTwo(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessErrors> {
                        <NotPowerOfTwo as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(EdgeChallengeManagerLibAccessErrors::NotPowerOfTwo)
                    }
                    NotPowerOfTwo
                },
                {
                    fn EmptyStaker(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessErrors> {
                        <EmptyStaker as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(EdgeChallengeManagerLibAccessErrors::EmptyStaker)
                    }
                    EmptyStaker
                },
                {
                    fn MerkleProofTooLong(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessErrors> {
                        <MerkleProofTooLong as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(EdgeChallengeManagerLibAccessErrors::MerkleProofTooLong)
                    }
                    MerkleProofTooLong
                },
                {
                    fn ClaimEdgeNotLengthOneRival(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeChallengeManagerLibAccessErrors> {
                        <ClaimEdgeNotLengthOneRival as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                EdgeChallengeManagerLibAccessErrors::ClaimEdgeNotLengthOneRival,
                            )
                    }
                    ClaimEdgeNotLengthOneRival
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AccountHasMadeLayerZeroRival(inner) => {
                    <AccountHasMadeLayerZeroRival as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::AssertionHashEmpty(inner) => {
                    <AssertionHashEmpty as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::AssertionHashMismatch(inner) => {
                    <AssertionHashMismatch as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::AssertionNoSibling(inner) => {
                    <AssertionNoSibling as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::AssertionNotPending(inner) => {
                    <AssertionNotPending as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::CachedTimeSufficient(inner) => {
                    <CachedTimeSufficient as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ChildrenAlreadySet(inner) => {
                    <ChildrenAlreadySet as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ClaimEdgeInvalidLevel(inner) => {
                    <ClaimEdgeInvalidLevel as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ClaimEdgeNotLengthOneRival(inner) => {
                    <ClaimEdgeNotLengthOneRival as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ClaimEdgeNotPending(inner) => {
                    <ClaimEdgeNotPending as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::EdgeAlreadyExists(inner) => {
                    <EdgeAlreadyExists as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::EdgeNotExists(inner) => {
                    <EdgeNotExists as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::EdgeNotLengthOne(inner) => {
                    <EdgeNotLengthOne as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::EdgeNotPending(inner) => {
                    <EdgeNotPending as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::EdgeTypeNotSmallStep(inner) => {
                    <EdgeTypeNotSmallStep as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::EdgeUnrivaled(inner) => {
                    <EdgeUnrivaled as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::EmptyClaimId(inner) => {
                    <EmptyClaimId as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::EmptyEdgeSpecificProof(inner) => {
                    <EmptyEdgeSpecificProof as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::EmptyEndMachineStatus(inner) => {
                    <EmptyEndMachineStatus as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::EmptyEndRoot(inner) => {
                    <EmptyEndRoot as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::EmptyFirstRival(inner) => {
                    <EmptyFirstRival as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::EmptyOriginId(inner) => {
                    <EmptyOriginId as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::EmptyPrefixProof(inner) => {
                    <EmptyPrefixProof as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::EmptyStaker(inner) => {
                    <EmptyStaker as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::EmptyStartMachineStatus(inner) => {
                    <EmptyStartMachineStatus as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::EmptyStartRoot(inner) => {
                    <EmptyStartRoot as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::HeightDiffLtTwo(inner) => {
                    <HeightDiffLtTwo as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InsufficientConfirmationBlocks(inner) => {
                    <InsufficientConfirmationBlocks as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidEndHeight(inner) => {
                    <InvalidEndHeight as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidHeights(inner) => {
                    <InvalidHeights as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::LevelTooHigh(inner) => {
                    <LevelTooHigh as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::MerkleProofTooLong(inner) => {
                    <MerkleProofTooLong as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotPowerOfTwo(inner) => {
                    <NotPowerOfTwo as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::RivalEdgeConfirmed(inner) => {
                    <RivalEdgeConfirmed as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AccountHasMadeLayerZeroRival(inner) => {
                    <AccountHasMadeLayerZeroRival as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::AssertionHashEmpty(inner) => {
                    <AssertionHashEmpty as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::AssertionHashMismatch(inner) => {
                    <AssertionHashMismatch as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::AssertionNoSibling(inner) => {
                    <AssertionNoSibling as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::AssertionNotPending(inner) => {
                    <AssertionNotPending as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::CachedTimeSufficient(inner) => {
                    <CachedTimeSufficient as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ChildrenAlreadySet(inner) => {
                    <ChildrenAlreadySet as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ClaimEdgeInvalidLevel(inner) => {
                    <ClaimEdgeInvalidLevel as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ClaimEdgeNotLengthOneRival(inner) => {
                    <ClaimEdgeNotLengthOneRival as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ClaimEdgeNotPending(inner) => {
                    <ClaimEdgeNotPending as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::EdgeAlreadyExists(inner) => {
                    <EdgeAlreadyExists as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::EdgeNotExists(inner) => {
                    <EdgeNotExists as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::EdgeNotLengthOne(inner) => {
                    <EdgeNotLengthOne as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::EdgeNotPending(inner) => {
                    <EdgeNotPending as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::EdgeTypeNotSmallStep(inner) => {
                    <EdgeTypeNotSmallStep as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::EdgeUnrivaled(inner) => {
                    <EdgeUnrivaled as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::EmptyClaimId(inner) => {
                    <EmptyClaimId as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::EmptyEdgeSpecificProof(inner) => {
                    <EmptyEdgeSpecificProof as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::EmptyEndMachineStatus(inner) => {
                    <EmptyEndMachineStatus as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::EmptyEndRoot(inner) => {
                    <EmptyEndRoot as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::EmptyFirstRival(inner) => {
                    <EmptyFirstRival as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::EmptyOriginId(inner) => {
                    <EmptyOriginId as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::EmptyPrefixProof(inner) => {
                    <EmptyPrefixProof as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::EmptyStaker(inner) => {
                    <EmptyStaker as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::EmptyStartMachineStatus(inner) => {
                    <EmptyStartMachineStatus as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::EmptyStartRoot(inner) => {
                    <EmptyStartRoot as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::HeightDiffLtTwo(inner) => {
                    <HeightDiffLtTwo as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InsufficientConfirmationBlocks(inner) => {
                    <InsufficientConfirmationBlocks as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidEndHeight(inner) => {
                    <InvalidEndHeight as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidHeights(inner) => {
                    <InvalidHeights as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::LevelTooHigh(inner) => {
                    <LevelTooHigh as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::MerkleProofTooLong(inner) => {
                    <MerkleProofTooLong as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotPowerOfTwo(inner) => {
                    <NotPowerOfTwo as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::RivalEdgeConfirmed(inner) => {
                    <RivalEdgeConfirmed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`EdgeChallengeManagerLibAccess`](self) contract instance.

See the [wrapper's documentation](`EdgeChallengeManagerLibAccessInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> EdgeChallengeManagerLibAccessInstance<T, P, N> {
        EdgeChallengeManagerLibAccessInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<EdgeChallengeManagerLibAccessInstance<T, P, N>>,
    > {
        EdgeChallengeManagerLibAccessInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        EdgeChallengeManagerLibAccessInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`EdgeChallengeManagerLibAccess`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`EdgeChallengeManagerLibAccess`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct EdgeChallengeManagerLibAccessInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for EdgeChallengeManagerLibAccessInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("EdgeChallengeManagerLibAccessInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > EdgeChallengeManagerLibAccessInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`EdgeChallengeManagerLibAccess`](self) contract instance.

See the [wrapper's documentation](`EdgeChallengeManagerLibAccessInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<EdgeChallengeManagerLibAccessInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> EdgeChallengeManagerLibAccessInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(
            self,
        ) -> EdgeChallengeManagerLibAccessInstance<T, P, N> {
            EdgeChallengeManagerLibAccessInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > EdgeChallengeManagerLibAccessInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`add`] function.
        pub fn add(
            &self,
            edge: <ChallengeEdge as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::SolCallBuilder<T, &P, addCall, N> {
            self.call_builder(&addCall { edge })
        }
        ///Creates a new call builder for the [`bisectEdge`] function.
        pub fn bisectEdge(
            &self,
            edgeId: alloy::sol_types::private::FixedBytes<32>,
            bisectionHistoryRoot: alloy::sol_types::private::FixedBytes<32>,
            prefixProof: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, bisectEdgeCall, N> {
            self.call_builder(
                &bisectEdgeCall {
                    edgeId,
                    bisectionHistoryRoot,
                    prefixProof,
                },
            )
        }
        ///Creates a new call builder for the [`confirmEdgeByOneStepProof`] function.
        pub fn confirmEdgeByOneStepProof(
            &self,
            edgeId: alloy::sol_types::private::FixedBytes<32>,
            oneStepProofEntry: alloy::sol_types::private::Address,
            oneStepData: <OneStepData as alloy::sol_types::SolType>::RustType,
            execCtx: <ExecutionContext as alloy::sol_types::SolType>::RustType,
            beforeHistoryInclusionProof: alloy::sol_types::private::Vec<
                alloy::sol_types::private::FixedBytes<32>,
            >,
            afterHistoryInclusionProof: alloy::sol_types::private::Vec<
                alloy::sol_types::private::FixedBytes<32>,
            >,
            numBigStepLevel: u8,
            bigStepHeight: alloy::sol_types::private::primitives::aliases::U256,
            smallStepHeight: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, confirmEdgeByOneStepProofCall, N> {
            self.call_builder(
                &confirmEdgeByOneStepProofCall {
                    edgeId,
                    oneStepProofEntry,
                    oneStepData,
                    execCtx,
                    beforeHistoryInclusionProof,
                    afterHistoryInclusionProof,
                    numBigStepLevel,
                    bigStepHeight,
                    smallStepHeight,
                },
            )
        }
        ///Creates a new call builder for the [`confirmEdgeByTime`] function.
        pub fn confirmEdgeByTime(
            &self,
            edgeId: alloy::sol_types::private::FixedBytes<32>,
            claimedAssertionUnrivaledBlocks: u64,
            confirmationThresholdBlock: u64,
        ) -> alloy_contract::SolCallBuilder<T, &P, confirmEdgeByTimeCall, N> {
            self.call_builder(
                &confirmEdgeByTimeCall {
                    edgeId,
                    claimedAssertionUnrivaledBlocks,
                    confirmationThresholdBlock,
                },
            )
        }
        ///Creates a new call builder for the [`confirmedRivals`] function.
        pub fn confirmedRivals(
            &self,
            mutualId: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, confirmedRivalsCall, N> {
            self.call_builder(&confirmedRivalsCall { mutualId })
        }
        ///Creates a new call builder for the [`createLayerZeroEdge`] function.
        pub fn createLayerZeroEdge(
            &self,
            args: <CreateEdgeArgs as alloy::sol_types::SolType>::RustType,
            ard: <AssertionReferenceData as alloy::sol_types::SolType>::RustType,
            oneStepProofEntry: alloy::sol_types::private::Address,
            expectedEndHeight: alloy::sol_types::private::primitives::aliases::U256,
            numBigStepLevel: u8,
            whitelistEnabled: bool,
        ) -> alloy_contract::SolCallBuilder<T, &P, createLayerZeroEdgeCall, N> {
            self.call_builder(
                &createLayerZeroEdgeCall {
                    args,
                    ard,
                    oneStepProofEntry,
                    expectedEndHeight,
                    numBigStepLevel,
                    whitelistEnabled,
                },
            )
        }
        ///Creates a new call builder for the [`exists`] function.
        pub fn exists(
            &self,
            edgeId: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, existsCall, N> {
            self.call_builder(&existsCall { edgeId })
        }
        ///Creates a new call builder for the [`firstRivals`] function.
        pub fn firstRivals(
            &self,
            mutualId: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, firstRivalsCall, N> {
            self.call_builder(&firstRivalsCall { mutualId })
        }
        ///Creates a new call builder for the [`get`] function.
        pub fn get(
            &self,
            edgeId: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, getCall, N> {
            self.call_builder(&getCall { edgeId })
        }
        ///Creates a new call builder for the [`getConfirmedRival`] function.
        pub fn getConfirmedRival(
            &self,
            mutualId: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, getConfirmedRivalCall, N> {
            self.call_builder(&getConfirmedRivalCall { mutualId })
        }
        ///Creates a new call builder for the [`getNoCheck`] function.
        pub fn getNoCheck(
            &self,
            edgeId: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, getNoCheckCall, N> {
            self.call_builder(&getNoCheckCall { edgeId })
        }
        ///Creates a new call builder for the [`getPrevAssertionHash`] function.
        pub fn getPrevAssertionHash(
            &self,
            edgeId: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, getPrevAssertionHashCall, N> {
            self.call_builder(&getPrevAssertionHashCall { edgeId })
        }
        ///Creates a new call builder for the [`hasLengthOneRival`] function.
        pub fn hasLengthOneRival(
            &self,
            edgeId: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, hasLengthOneRivalCall, N> {
            self.call_builder(&hasLengthOneRivalCall { edgeId })
        }
        ///Creates a new call builder for the [`hasMadeLayerZeroRival`] function.
        pub fn hasMadeLayerZeroRival(
            &self,
            account: alloy::sol_types::private::Address,
            mutualId: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, hasMadeLayerZeroRivalCall, N> {
            self.call_builder(
                &hasMadeLayerZeroRivalCall {
                    account,
                    mutualId,
                },
            )
        }
        ///Creates a new call builder for the [`hasRival`] function.
        pub fn hasRival(
            &self,
            edgeId: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, hasRivalCall, N> {
            self.call_builder(&hasRivalCall { edgeId })
        }
        ///Creates a new call builder for the [`isPowerOfTwo`] function.
        pub fn isPowerOfTwo(
            &self,
            x: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, isPowerOfTwoCall, N> {
            self.call_builder(&isPowerOfTwoCall { x })
        }
        ///Creates a new call builder for the [`mandatoryBisectionHeight`] function.
        pub fn mandatoryBisectionHeight(
            &self,
            start: alloy::sol_types::private::primitives::aliases::U256,
            end: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, mandatoryBisectionHeightCall, N> {
            self.call_builder(
                &mandatoryBisectionHeightCall {
                    start,
                    end,
                },
            )
        }
        ///Creates a new call builder for the [`nextEdgeLevel`] function.
        pub fn nextEdgeLevel(
            &self,
            level: u8,
            numBigStepLevel: u8,
        ) -> alloy_contract::SolCallBuilder<T, &P, nextEdgeLevelCall, N> {
            self.call_builder(
                &nextEdgeLevelCall {
                    level,
                    numBigStepLevel,
                },
            )
        }
        ///Creates a new call builder for the [`remove`] function.
        pub fn remove(
            &self,
            edgeId: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, removeCall, N> {
            self.call_builder(&removeCall { edgeId })
        }
        ///Creates a new call builder for the [`setClaimId`] function.
        pub fn setClaimId(
            &self,
            edgeId: alloy::sol_types::private::FixedBytes<32>,
            claimId: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, setClaimIdCall, N> {
            self.call_builder(&setClaimIdCall { edgeId, claimId })
        }
        ///Creates a new call builder for the [`setConfirmed`] function.
        pub fn setConfirmed(
            &self,
            id: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, setConfirmedCall, N> {
            self.call_builder(&setConfirmedCall { id })
        }
        ///Creates a new call builder for the [`setConfirmedRival`] function.
        pub fn setConfirmedRival(
            &self,
            edgeId: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, setConfirmedRivalCall, N> {
            self.call_builder(&setConfirmedRivalCall { edgeId })
        }
        ///Creates a new call builder for the [`setFirstRival`] function.
        pub fn setFirstRival(
            &self,
            edgeId: alloy::sol_types::private::FixedBytes<32>,
            firstRival: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, setFirstRivalCall, N> {
            self.call_builder(
                &setFirstRivalCall {
                    edgeId,
                    firstRival,
                },
            )
        }
        ///Creates a new call builder for the [`setHasMadeLayerZeroRival`] function.
        pub fn setHasMadeLayerZeroRival(
            &self,
            account: alloy::sol_types::private::Address,
            mutualId: alloy::sol_types::private::FixedBytes<32>,
            x: bool,
        ) -> alloy_contract::SolCallBuilder<T, &P, setHasMadeLayerZeroRivalCall, N> {
            self.call_builder(
                &setHasMadeLayerZeroRivalCall {
                    account,
                    mutualId,
                    x,
                },
            )
        }
        ///Creates a new call builder for the [`setLevel`] function.
        pub fn setLevel(
            &self,
            edgeId: alloy::sol_types::private::FixedBytes<32>,
            level: u8,
        ) -> alloy_contract::SolCallBuilder<T, &P, setLevelCall, N> {
            self.call_builder(&setLevelCall { edgeId, level })
        }
        ///Creates a new call builder for the [`timeUnrivaled`] function.
        pub fn timeUnrivaled(
            &self,
            edgeId: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, timeUnrivaledCall, N> {
            self.call_builder(&timeUnrivaledCall { edgeId })
        }
        ///Creates a new call builder for the [`timeUnrivaledTotal`] function.
        pub fn timeUnrivaledTotal(
            &self,
            edgeId: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, timeUnrivaledTotalCall, N> {
            self.call_builder(&timeUnrivaledTotalCall { edgeId })
        }
        ///Creates a new call builder for the [`updateTimerCacheByChildren`] function.
        pub fn updateTimerCacheByChildren(
            &self,
            edgeId: alloy::sol_types::private::FixedBytes<32>,
            maximumCachedTime: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, updateTimerCacheByChildrenCall, N> {
            self.call_builder(
                &updateTimerCacheByChildrenCall {
                    edgeId,
                    maximumCachedTime,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > EdgeChallengeManagerLibAccessInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
