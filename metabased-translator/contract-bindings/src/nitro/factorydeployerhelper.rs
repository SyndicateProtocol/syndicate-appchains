/**

Generated by the following Solidity interface...
```solidity
interface FactoryDeployerHelper {
    function DEPLOY_HELPER() external view returns (address);
    function MAX_FEE_PER_GAS() external view returns (uint256);
    function deploy(address inbox, uint256 maxFeePerGas) external;
    function deploy(address inbox) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "DEPLOY_HELPER",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "MAX_FEE_PER_GAS",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "deploy",
    "inputs": [
      {
        "name": "inbox",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "maxFeePerGas",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "deploy",
    "inputs": [
      {
        "name": "inbox",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod FactoryDeployerHelper {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052348015600e575f5ffd5b506104a88061001c5f395ff3fe608060405234801561000f575f5ffd5b506004361061004a575f3560e01c806313a694a91461004e5780634956eaf01461006c5780634c96a389146100815780636d739b4214610094575b5f5ffd5b6100596305f5e10081565b6040519081526020015b60405180910390f35b61007f61007a3660046103d5565b6100d4565b005b61007f61008f3660046103ff565b6103a3565b6100af7390d68b056c411015eae3ec0b98ad94e2c91419f181565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610063565b5f8273ffffffffffffffffffffffffffffffffffffffff1663e78cea926040518163ffffffff1660e01b8152600401602060405180830381865afa15801561011e573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101429190610421565b90505f8173ffffffffffffffffffffffffffffffffffffffff1663e1758bd86040518163ffffffff1660e01b8152600401602060405180830381865afa15801561018e573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101b29190610421565b6040517facd7d02a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86166004820152602481018590529091505f907390d68b056c411015eae3ec0b98ad94e2c91419f19063acd7d02a90604401602060405180830381865afa15801561023a573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061025e919061043c565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff878116602483015260448201839052919250908316906323b872dd906064016020604051808303815f875af11580156102da573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102fe9190610453565b506040517fd7c641e700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808716600483015283166024820152604481018590527390d68b056c411015eae3ec0b98ad94e2c91419f19063d7c641e7906064015f604051808303815f87803b158015610386575f5ffd5b505af1158015610398573d5f5f3e3d5ffd5b505050505050505050565b6103b1816305f5e1006100d4565b50565b73ffffffffffffffffffffffffffffffffffffffff811681146103b1575f5ffd5b5f5f604083850312156103e6575f5ffd5b82356103f1816103b4565b946020939093013593505050565b5f6020828403121561040f575f5ffd5b813561041a816103b4565b9392505050565b5f60208284031215610431575f5ffd5b815161041a816103b4565b5f6020828403121561044c575f5ffd5b5051919050565b5f60208284031215610463575f5ffd5b8151801515811461041a575f5ffdfea2646970667358221220b48500b11dcbbe1425920be275dc488c802ab4ce96062809266d12b511c0b40564736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15`\x0EW__\xFD[Pa\x04\xA8\x80a\0\x1C_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0JW_5`\xE0\x1C\x80c\x13\xA6\x94\xA9\x14a\0NW\x80cIV\xEA\xF0\x14a\0lW\x80cL\x96\xA3\x89\x14a\0\x81W\x80cms\x9BB\x14a\0\x94W[__\xFD[a\0Yc\x05\xF5\xE1\0\x81V[`@Q\x90\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\0\x7Fa\0z6`\x04a\x03\xD5V[a\0\xD4V[\0[a\0\x7Fa\0\x8F6`\x04a\x03\xFFV[a\x03\xA3V[a\0\xAFs\x90\xD6\x8B\x05lA\x10\x15\xEA\xE3\xEC\x0B\x98\xAD\x94\xE2\xC9\x14\x19\xF1\x81V[`@Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16\x81R` \x01a\0cV[_\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xE7\x8C\xEA\x92`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01\x1EW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01B\x91\x90a\x04!V[\x90P_\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xE1u\x8B\xD8`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01\x8EW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01\xB2\x91\x90a\x04!V[`@Q\x7F\xAC\xD7\xD0*\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x86\x16`\x04\x82\x01R`$\x81\x01\x85\x90R\x90\x91P_\x90s\x90\xD6\x8B\x05lA\x10\x15\xEA\xE3\xEC\x0B\x98\xAD\x94\xE2\xC9\x14\x19\xF1\x90c\xAC\xD7\xD0*\x90`D\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x02:W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x02^\x91\x90a\x04<V[`@Q\x7F#\xB8r\xDD\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R3`\x04\x82\x01Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x87\x81\x16`$\x83\x01R`D\x82\x01\x83\x90R\x91\x92P\x90\x83\x16\x90c#\xB8r\xDD\x90`d\x01` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x02\xDAW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x02\xFE\x91\x90a\x04SV[P`@Q\x7F\xD7\xC6A\xE7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x87\x16`\x04\x83\x01R\x83\x16`$\x82\x01R`D\x81\x01\x85\x90Rs\x90\xD6\x8B\x05lA\x10\x15\xEA\xE3\xEC\x0B\x98\xAD\x94\xE2\xC9\x14\x19\xF1\x90c\xD7\xC6A\xE7\x90`d\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x03\x86W__\xFD[PZ\xF1\x15\x80\x15a\x03\x98W=__>=_\xFD[PPPPPPPPPV[a\x03\xB1\x81c\x05\xF5\xE1\0a\0\xD4V[PV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x03\xB1W__\xFD[__`@\x83\x85\x03\x12\x15a\x03\xE6W__\xFD[\x825a\x03\xF1\x81a\x03\xB4V[\x94` \x93\x90\x93\x015\x93PPPV[_` \x82\x84\x03\x12\x15a\x04\x0FW__\xFD[\x815a\x04\x1A\x81a\x03\xB4V[\x93\x92PPPV[_` \x82\x84\x03\x12\x15a\x041W__\xFD[\x81Qa\x04\x1A\x81a\x03\xB4V[_` \x82\x84\x03\x12\x15a\x04LW__\xFD[PQ\x91\x90PV[_` \x82\x84\x03\x12\x15a\x04cW__\xFD[\x81Q\x80\x15\x15\x81\x14a\x04\x1AW__\xFD\xFE\xA2dipfsX\"\x12 \xB4\x85\0\xB1\x1D\xCB\xBE\x14%\x92\x0B\xE2u\xDCH\x8C\x80*\xB4\xCE\x96\x06(\t&m\x12\xB5\x11\xC0\xB4\x05dsolcC\0\x08\x1C\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f5ffd5b506004361061004a575f3560e01c806313a694a91461004e5780634956eaf01461006c5780634c96a389146100815780636d739b4214610094575b5f5ffd5b6100596305f5e10081565b6040519081526020015b60405180910390f35b61007f61007a3660046103d5565b6100d4565b005b61007f61008f3660046103ff565b6103a3565b6100af7390d68b056c411015eae3ec0b98ad94e2c91419f181565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610063565b5f8273ffffffffffffffffffffffffffffffffffffffff1663e78cea926040518163ffffffff1660e01b8152600401602060405180830381865afa15801561011e573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101429190610421565b90505f8173ffffffffffffffffffffffffffffffffffffffff1663e1758bd86040518163ffffffff1660e01b8152600401602060405180830381865afa15801561018e573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101b29190610421565b6040517facd7d02a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86166004820152602481018590529091505f907390d68b056c411015eae3ec0b98ad94e2c91419f19063acd7d02a90604401602060405180830381865afa15801561023a573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061025e919061043c565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff878116602483015260448201839052919250908316906323b872dd906064016020604051808303815f875af11580156102da573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102fe9190610453565b506040517fd7c641e700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808716600483015283166024820152604481018590527390d68b056c411015eae3ec0b98ad94e2c91419f19063d7c641e7906064015f604051808303815f87803b158015610386575f5ffd5b505af1158015610398573d5f5f3e3d5ffd5b505050505050505050565b6103b1816305f5e1006100d4565b50565b73ffffffffffffffffffffffffffffffffffffffff811681146103b1575f5ffd5b5f5f604083850312156103e6575f5ffd5b82356103f1816103b4565b946020939093013593505050565b5f6020828403121561040f575f5ffd5b813561041a816103b4565b9392505050565b5f60208284031215610431575f5ffd5b815161041a816103b4565b5f6020828403121561044c575f5ffd5b5051919050565b5f60208284031215610463575f5ffd5b8151801515811461041a575f5ffdfea2646970667358221220b48500b11dcbbe1425920be275dc488c802ab4ce96062809266d12b511c0b40564736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0JW_5`\xE0\x1C\x80c\x13\xA6\x94\xA9\x14a\0NW\x80cIV\xEA\xF0\x14a\0lW\x80cL\x96\xA3\x89\x14a\0\x81W\x80cms\x9BB\x14a\0\x94W[__\xFD[a\0Yc\x05\xF5\xE1\0\x81V[`@Q\x90\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\0\x7Fa\0z6`\x04a\x03\xD5V[a\0\xD4V[\0[a\0\x7Fa\0\x8F6`\x04a\x03\xFFV[a\x03\xA3V[a\0\xAFs\x90\xD6\x8B\x05lA\x10\x15\xEA\xE3\xEC\x0B\x98\xAD\x94\xE2\xC9\x14\x19\xF1\x81V[`@Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16\x81R` \x01a\0cV[_\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xE7\x8C\xEA\x92`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01\x1EW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01B\x91\x90a\x04!V[\x90P_\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xE1u\x8B\xD8`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01\x8EW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01\xB2\x91\x90a\x04!V[`@Q\x7F\xAC\xD7\xD0*\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x86\x16`\x04\x82\x01R`$\x81\x01\x85\x90R\x90\x91P_\x90s\x90\xD6\x8B\x05lA\x10\x15\xEA\xE3\xEC\x0B\x98\xAD\x94\xE2\xC9\x14\x19\xF1\x90c\xAC\xD7\xD0*\x90`D\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x02:W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x02^\x91\x90a\x04<V[`@Q\x7F#\xB8r\xDD\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R3`\x04\x82\x01Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x87\x81\x16`$\x83\x01R`D\x82\x01\x83\x90R\x91\x92P\x90\x83\x16\x90c#\xB8r\xDD\x90`d\x01` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x02\xDAW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x02\xFE\x91\x90a\x04SV[P`@Q\x7F\xD7\xC6A\xE7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x87\x16`\x04\x83\x01R\x83\x16`$\x82\x01R`D\x81\x01\x85\x90Rs\x90\xD6\x8B\x05lA\x10\x15\xEA\xE3\xEC\x0B\x98\xAD\x94\xE2\xC9\x14\x19\xF1\x90c\xD7\xC6A\xE7\x90`d\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x03\x86W__\xFD[PZ\xF1\x15\x80\x15a\x03\x98W=__>=_\xFD[PPPPPPPPPV[a\x03\xB1\x81c\x05\xF5\xE1\0a\0\xD4V[PV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x03\xB1W__\xFD[__`@\x83\x85\x03\x12\x15a\x03\xE6W__\xFD[\x825a\x03\xF1\x81a\x03\xB4V[\x94` \x93\x90\x93\x015\x93PPPV[_` \x82\x84\x03\x12\x15a\x04\x0FW__\xFD[\x815a\x04\x1A\x81a\x03\xB4V[\x93\x92PPPV[_` \x82\x84\x03\x12\x15a\x041W__\xFD[\x81Qa\x04\x1A\x81a\x03\xB4V[_` \x82\x84\x03\x12\x15a\x04LW__\xFD[PQ\x91\x90PV[_` \x82\x84\x03\x12\x15a\x04cW__\xFD[\x81Q\x80\x15\x15\x81\x14a\x04\x1AW__\xFD\xFE\xA2dipfsX\"\x12 \xB4\x85\0\xB1\x1D\xCB\xBE\x14%\x92\x0B\xE2u\xDCH\x8C\x80*\xB4\xCE\x96\x06(\t&m\x12\xB5\x11\xC0\xB4\x05dsolcC\0\x08\x1C\x003",
    );
    /**Function with signature `DEPLOY_HELPER()` and selector `0x6d739b42`.
```solidity
function DEPLOY_HELPER() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEPLOY_HELPERCall {}
    ///Container type for the return parameters of the [`DEPLOY_HELPER()`](DEPLOY_HELPERCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEPLOY_HELPERReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEPLOY_HELPERCall> for UnderlyingRustTuple<'_> {
                fn from(value: DEPLOY_HELPERCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for DEPLOY_HELPERCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEPLOY_HELPERReturn> for UnderlyingRustTuple<'_> {
                fn from(value: DEPLOY_HELPERReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for DEPLOY_HELPERReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for DEPLOY_HELPERCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = DEPLOY_HELPERReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "DEPLOY_HELPER()";
            const SELECTOR: [u8; 4] = [109u8, 115u8, 155u8, 66u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `MAX_FEE_PER_GAS()` and selector `0x13a694a9`.
```solidity
function MAX_FEE_PER_GAS() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MAX_FEE_PER_GASCall {}
    ///Container type for the return parameters of the [`MAX_FEE_PER_GAS()`](MAX_FEE_PER_GASCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MAX_FEE_PER_GASReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<MAX_FEE_PER_GASCall> for UnderlyingRustTuple<'_> {
                fn from(value: MAX_FEE_PER_GASCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for MAX_FEE_PER_GASCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<MAX_FEE_PER_GASReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: MAX_FEE_PER_GASReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for MAX_FEE_PER_GASReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for MAX_FEE_PER_GASCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = MAX_FEE_PER_GASReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "MAX_FEE_PER_GAS()";
            const SELECTOR: [u8; 4] = [19u8, 166u8, 148u8, 169u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `deploy(address,uint256)` and selector `0x4956eaf0`.
```solidity
function deploy(address inbox, uint256 maxFeePerGas) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct deploy_0Call {
        #[allow(missing_docs)]
        pub inbox: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub maxFeePerGas: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`deploy(address,uint256)`](deploy_0Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct deploy_0Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<deploy_0Call> for UnderlyingRustTuple<'_> {
                fn from(value: deploy_0Call) -> Self {
                    (value.inbox, value.maxFeePerGas)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for deploy_0Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        inbox: tuple.0,
                        maxFeePerGas: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<deploy_0Return> for UnderlyingRustTuple<'_> {
                fn from(value: deploy_0Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for deploy_0Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for deploy_0Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = deploy_0Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "deploy(address,uint256)";
            const SELECTOR: [u8; 4] = [73u8, 86u8, 234u8, 240u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.inbox,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.maxFeePerGas),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `deploy(address)` and selector `0x4c96a389`.
```solidity
function deploy(address inbox) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct deploy_1Call {
        #[allow(missing_docs)]
        pub inbox: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`deploy(address)`](deploy_1Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct deploy_1Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<deploy_1Call> for UnderlyingRustTuple<'_> {
                fn from(value: deploy_1Call) -> Self {
                    (value.inbox,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for deploy_1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { inbox: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<deploy_1Return> for UnderlyingRustTuple<'_> {
                fn from(value: deploy_1Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for deploy_1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for deploy_1Call {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = deploy_1Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "deploy(address)";
            const SELECTOR: [u8; 4] = [76u8, 150u8, 163u8, 137u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.inbox,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`FactoryDeployerHelper`](self) function calls.
    pub enum FactoryDeployerHelperCalls {
        #[allow(missing_docs)]
        DEPLOY_HELPER(DEPLOY_HELPERCall),
        #[allow(missing_docs)]
        MAX_FEE_PER_GAS(MAX_FEE_PER_GASCall),
        #[allow(missing_docs)]
        deploy_0(deploy_0Call),
        #[allow(missing_docs)]
        deploy_1(deploy_1Call),
    }
    #[automatically_derived]
    impl FactoryDeployerHelperCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [19u8, 166u8, 148u8, 169u8],
            [73u8, 86u8, 234u8, 240u8],
            [76u8, 150u8, 163u8, 137u8],
            [109u8, 115u8, 155u8, 66u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for FactoryDeployerHelperCalls {
        const NAME: &'static str = "FactoryDeployerHelperCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 4usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::DEPLOY_HELPER(_) => {
                    <DEPLOY_HELPERCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::MAX_FEE_PER_GAS(_) => {
                    <MAX_FEE_PER_GASCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::deploy_0(_) => <deploy_0Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::deploy_1(_) => <deploy_1Call as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<FactoryDeployerHelperCalls>] = &[
                {
                    fn MAX_FEE_PER_GAS(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<FactoryDeployerHelperCalls> {
                        <MAX_FEE_PER_GASCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(FactoryDeployerHelperCalls::MAX_FEE_PER_GAS)
                    }
                    MAX_FEE_PER_GAS
                },
                {
                    fn deploy_0(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<FactoryDeployerHelperCalls> {
                        <deploy_0Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(FactoryDeployerHelperCalls::deploy_0)
                    }
                    deploy_0
                },
                {
                    fn deploy_1(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<FactoryDeployerHelperCalls> {
                        <deploy_1Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(FactoryDeployerHelperCalls::deploy_1)
                    }
                    deploy_1
                },
                {
                    fn DEPLOY_HELPER(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<FactoryDeployerHelperCalls> {
                        <DEPLOY_HELPERCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(FactoryDeployerHelperCalls::DEPLOY_HELPER)
                    }
                    DEPLOY_HELPER
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::DEPLOY_HELPER(inner) => {
                    <DEPLOY_HELPERCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::MAX_FEE_PER_GAS(inner) => {
                    <MAX_FEE_PER_GASCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::deploy_0(inner) => {
                    <deploy_0Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::deploy_1(inner) => {
                    <deploy_1Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::DEPLOY_HELPER(inner) => {
                    <DEPLOY_HELPERCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::MAX_FEE_PER_GAS(inner) => {
                    <MAX_FEE_PER_GASCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::deploy_0(inner) => {
                    <deploy_0Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::deploy_1(inner) => {
                    <deploy_1Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`FactoryDeployerHelper`](self) contract instance.

See the [wrapper's documentation](`FactoryDeployerHelperInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> FactoryDeployerHelperInstance<T, P, N> {
        FactoryDeployerHelperInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<FactoryDeployerHelperInstance<T, P, N>>,
    > {
        FactoryDeployerHelperInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        FactoryDeployerHelperInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`FactoryDeployerHelper`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`FactoryDeployerHelper`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct FactoryDeployerHelperInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for FactoryDeployerHelperInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("FactoryDeployerHelperInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > FactoryDeployerHelperInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`FactoryDeployerHelper`](self) contract instance.

See the [wrapper's documentation](`FactoryDeployerHelperInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<FactoryDeployerHelperInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> FactoryDeployerHelperInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> FactoryDeployerHelperInstance<T, P, N> {
            FactoryDeployerHelperInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > FactoryDeployerHelperInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`DEPLOY_HELPER`] function.
        pub fn DEPLOY_HELPER(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, DEPLOY_HELPERCall, N> {
            self.call_builder(&DEPLOY_HELPERCall {})
        }
        ///Creates a new call builder for the [`MAX_FEE_PER_GAS`] function.
        pub fn MAX_FEE_PER_GAS(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, MAX_FEE_PER_GASCall, N> {
            self.call_builder(&MAX_FEE_PER_GASCall {})
        }
        ///Creates a new call builder for the [`deploy_0`] function.
        pub fn deploy_0(
            &self,
            inbox: alloy::sol_types::private::Address,
            maxFeePerGas: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, deploy_0Call, N> {
            self.call_builder(
                &deploy_0Call {
                    inbox,
                    maxFeePerGas,
                },
            )
        }
        ///Creates a new call builder for the [`deploy_1`] function.
        pub fn deploy_1(
            &self,
            inbox: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, deploy_1Call, N> {
            self.call_builder(&deploy_1Call { inbox })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > FactoryDeployerHelperInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
