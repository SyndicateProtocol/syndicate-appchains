/**

Generated by the following Solidity interface...
```solidity
interface EdgeStakingPoolCreator {
    error PoolDoesntExist();

    event NewEdgeStakingPoolCreated(address indexed challengeManager, bytes32 indexed edgeId);

    function createPool(address challengeManager, bytes32 edgeId) external returns (address);
    function getPool(address challengeManager, bytes32 edgeId) external view returns (address);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "createPool",
    "inputs": [
      {
        "name": "challengeManager",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "edgeId",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract IEdgeStakingPool"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "getPool",
    "inputs": [
      {
        "name": "challengeManager",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "edgeId",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract IEdgeStakingPool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "event",
    "name": "NewEdgeStakingPoolCreated",
    "inputs": [
      {
        "name": "challengeManager",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "edgeId",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "PoolDoesntExist",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod EdgeStakingPoolCreator {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052348015600e575f5ffd5b506111d38061001c5f395ff3fe608060405234801561000f575f5ffd5b5060043610610034575f3560e01c80639b505aa114610038578063dc082ad314610074575b5f5ffd5b61004b61004636600461029e565b610087565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b61004b61008236600461029e565b610129565b5f5f5f5f1b848460405161009a90610291565b73ffffffffffffffffffffffffffffffffffffffff909216825260208201526040018190604051809103905ff59050801580156100d9573d5f5f3e3d5ffd5b509050828473ffffffffffffffffffffffffffffffffffffffff167f15e71db3d71eb3b7985105d763101e1d6c1c491ab3e6a0d682558c12cc0bb8d660405160405180910390a390505b92915050565b5f61018a6040518060200161013d90610291565b601f1982820381018352601f90910116604081815273ffffffffffffffffffffffffffffffffffffffff871660208301528101859052606001604051602081830303815290604052610191565b9392505050565b5f5f83836040516020016101a69291906102f7565b60408051808303601f1901815282825280516020918201207fff00000000000000000000000000000000000000000000000000000000000000828501523060601b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660218501525f60358501526055808501829052835180860390910181526075909401909252825192019190912090915073ffffffffffffffffffffffffffffffffffffffff81163b1561025f5791506101239050565b6040517f215db33100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610e8a8061031483390190565b5f5f604083850312156102af575f5ffd5b823573ffffffffffffffffffffffffffffffffffffffff811681146102d2575f5ffd5b946020939093013593505050565b5f81518060208401855e5f93019283525090919050565b5f61030b61030583866102e0565b846102e0565b94935050505056fe60e060405234801561000f575f5ffd5b50604051610e8a380380610e8a83398101604081905261002e916100e4565b816001600160a01b03166351ed6a306040518163ffffffff1660e01b8152600401602060405180830381865afa15801561006a573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061008e9190610110565b6001600160a01b0316608052806100b757604051620d29f560e71b815260040160405180910390fd5b6001600160a01b0390911660a05260c052610132565b6001600160a01b03811681146100e1575f5ffd5b50565b5f5f604083850312156100f5575f5ffd5b8251610100816100cd565b6020939093015192949293505050565b5f60208284031215610120575f5ffd5b815161012b816100cd565b9392505050565b60805160a05160c051610cf86101925f395f818161015601528181610546015261059a01525f8181608e0152818161039b0152818161047601526104cd01525f818160ef0152818161025e0152818161033001526104540152610cf85ff3fe608060405234801561000f575f5ffd5b5060043610610085575f3560e01c80637476083b116100585780637476083b14610111578063956501bb146101245780639cfa2a2a14610151578063bd3eec7d14610178575f5ffd5b8063023a96fe1461008957806326c0e5c5146100cd57806330fc43ed146100d757806351ed6a30146100ea575b5f5ffd5b6100b07f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100d561018b565b005b6100d56100e5366004610a25565b6101a5565b6100b07f000000000000000000000000000000000000000000000000000000000000000081565b6100d561011f366004610a25565b6102c6565b610143610132366004610a3c565b5f6020819052908152604090205481565b6040519081526020016100c4565b6101437f000000000000000000000000000000000000000000000000000000000000000081565b6100d5610186366004610a62565b610390565b335f908152602081905260409020546101a3906101a5565b565b805f036101de576040517f1f2a200500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b335f908152602081905260409020548082111561023c576040517fa47b7c6500000000000000000000000000000000000000000000000000000000815233600482015260248101839052604481018290526064015b60405180910390fd5b6102468282610ac6565b335f8181526020819052604090209190915561028d907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690846105cb565b60405182815233907f8108595eb6bad3acefa9da467d90cc2217686d5c5ac85460f8b7849c840645fc9060200160405180910390a25050565b805f036102ff576040517f1f2a200500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b335f908152602081905260408120805483929061031d908490610adf565b9091555061035890506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333084610674565b60405181815233907f0a7bb2e28cc4698aac06db79cf9163bfcc20719286cf59fa7d492ceda1b8edc29060200160405180910390a250565b5f6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016631c1b4f3a6103cd6020850185610b07565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815260ff9091166004820152602401602060405180830381865afa158015610421573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104459190610b20565b905061049b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000836106cb565b6040517f05fae1410000000000000000000000000000000000000000000000000000000081525f906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906305fae14190610502908690600401610bc7565b6020604051808303815f875af115801561051e573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105429190610b20565b90507f000000000000000000000000000000000000000000000000000000000000000081146105c6576040517f75c0811b000000000000000000000000000000000000000000000000000000008152600481018290527f00000000000000000000000000000000000000000000000000000000000000006024820152604401610233565b505050565b6040516001600160a01b0383166024820152604481018290526105c69084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526107ac565b6040516001600160a01b03808516602483015283166044820152606481018290526106c59085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401610610565b50505050565b6040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0383811660248301525f91839186169063dd62ed3e90604401602060405180830381865afa158015610732573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107569190610b20565b6107609190610adf565b6040516001600160a01b0385166024820152604481018290529091506106c59085907f095ea7b30000000000000000000000000000000000000000000000000000000090606401610610565b5f610800826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166108909092919063ffffffff16565b8051909150156105c6578080602001905181019061081e9190610c58565b6105c65760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610233565b606061089e84845f856108a8565b90505b9392505050565b6060824710156109205760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610233565b6001600160a01b0385163b6109775760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610233565b5f5f866001600160a01b031685876040516109929190610c77565b5f6040518083038185875af1925050503d805f81146109cc576040519150601f19603f3d011682016040523d82523d5f602084013e6109d1565b606091505b50915091506109e18282866109ec565b979650505050505050565b606083156109fb5750816108a1565b825115610a0b5782518084602001fd5b8160405162461bcd60e51b81526004016102339190610c8d565b5f60208284031215610a35575f5ffd5b5035919050565b5f60208284031215610a4c575f5ffd5b81356001600160a01b03811681146108a1575f5ffd5b5f60208284031215610a72575f5ffd5b813567ffffffffffffffff811115610a88575f5ffd5b820160c081850312156108a1575f5ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b81810381811115610ad957610ad9610a99565b92915050565b80820180821115610ad957610ad9610a99565b803560ff81168114610b02575f5ffd5b919050565b5f60208284031215610b17575f5ffd5b6108a182610af2565b5f60208284031215610b30575f5ffd5b5051919050565b5f5f83357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610b6a575f5ffd5b830160208101925035905067ffffffffffffffff811115610b89575f5ffd5b803603821315610b97575f5ffd5b9250929050565b81835281816020850137505f602082840101525f6020601f19601f840116840101905092915050565b6020815260ff610bd683610af2565b166020828101919091528201356040808301919091528201356060808301919091528201356080808301919091525f90610c1290840184610b37565b60c060a0850152610c2760e085018284610b9e565b915050610c3760a0850185610b37565b601f198584030160c0860152610c4e838284610b9e565b9695505050505050565b5f60208284031215610c68575f5ffd5b815180151581146108a1575f5ffd5b5f82518060208501845e5f920191825250919050565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f8301168401019150509291505056fea264697066735822122019cfb4c6758a176a0d97e3d63136d1e02437747fc9c541abe0e39165b9da42d764736f6c634300081c0033a2646970667358221220b51e4d54b4baf2fd4647a9658b65c8d62c06fa9f038b13e8da2e95e4c8b180a364736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15`\x0EW__\xFD[Pa\x11\xD3\x80a\0\x1C_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\x004W_5`\xE0\x1C\x80c\x9BPZ\xA1\x14a\08W\x80c\xDC\x08*\xD3\x14a\0tW[__\xFD[a\0Ka\0F6`\x04a\x02\x9EV[a\0\x87V[`@Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16\x81R` \x01`@Q\x80\x91\x03\x90\xF3[a\0Ka\0\x826`\x04a\x02\x9EV[a\x01)V[____\x1B\x84\x84`@Qa\0\x9A\x90a\x02\x91V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x92\x16\x82R` \x82\x01R`@\x01\x81\x90`@Q\x80\x91\x03\x90_\xF5\x90P\x80\x15\x80\x15a\0\xD9W=__>=_\xFD[P\x90P\x82\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\x15\xE7\x1D\xB3\xD7\x1E\xB3\xB7\x98Q\x05\xD7c\x10\x1E\x1Dl\x1CI\x1A\xB3\xE6\xA0\xD6\x82U\x8C\x12\xCC\x0B\xB8\xD6`@Q`@Q\x80\x91\x03\x90\xA3\x90P[\x92\x91PPV[_a\x01\x8A`@Q\x80` \x01a\x01=\x90a\x02\x91V[`\x1F\x19\x82\x82\x03\x81\x01\x83R`\x1F\x90\x91\x01\x16`@\x81\x81Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x87\x16` \x83\x01R\x81\x01\x85\x90R``\x01`@Q` \x81\x83\x03\x03\x81R\x90`@Ra\x01\x91V[\x93\x92PPPV[__\x83\x83`@Q` \x01a\x01\xA6\x92\x91\x90a\x02\xF7V[`@\x80Q\x80\x83\x03`\x1F\x19\x01\x81R\x82\x82R\x80Q` \x91\x82\x01 \x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82\x85\x01R0``\x1B\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\x16`!\x85\x01R_`5\x85\x01R`U\x80\x85\x01\x82\x90R\x83Q\x80\x86\x03\x90\x91\x01\x81R`u\x90\x94\x01\x90\x92R\x82Q\x92\x01\x91\x90\x91 \x90\x91Ps\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16;\x15a\x02_W\x91Pa\x01#\x90PV[`@Q\x7F!]\xB31\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a\x0E\x8A\x80a\x03\x14\x839\x01\x90V[__`@\x83\x85\x03\x12\x15a\x02\xAFW__\xFD[\x825s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x02\xD2W__\xFD[\x94` \x93\x90\x93\x015\x93PPPV[_\x81Q\x80` \x84\x01\x85^_\x93\x01\x92\x83RP\x90\x91\x90PV[_a\x03\x0Ba\x03\x05\x83\x86a\x02\xE0V[\x84a\x02\xE0V[\x94\x93PPPPV\xFE`\xE0`@R4\x80\x15a\0\x0FW__\xFD[P`@Qa\x0E\x8A8\x03\x80a\x0E\x8A\x839\x81\x01`@\x81\x90Ra\0.\x91a\0\xE4V[\x81`\x01`\x01`\xA0\x1B\x03\x16cQ\xEDj0`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\0jW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\0\x8E\x91\x90a\x01\x10V[`\x01`\x01`\xA0\x1B\x03\x16`\x80R\x80a\0\xB7W`@Qb\r)\xF5`\xE7\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x01`\x01`\xA0\x1B\x03\x90\x91\x16`\xA0R`\xC0Ra\x012V[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\0\xE1W__\xFD[PV[__`@\x83\x85\x03\x12\x15a\0\xF5W__\xFD[\x82Qa\x01\0\x81a\0\xCDV[` \x93\x90\x93\x01Q\x92\x94\x92\x93PPPV[_` \x82\x84\x03\x12\x15a\x01 W__\xFD[\x81Qa\x01+\x81a\0\xCDV[\x93\x92PPPV[`\x80Q`\xA0Q`\xC0Qa\x0C\xF8a\x01\x92_9_\x81\x81a\x01V\x01R\x81\x81a\x05F\x01Ra\x05\x9A\x01R_\x81\x81`\x8E\x01R\x81\x81a\x03\x9B\x01R\x81\x81a\x04v\x01Ra\x04\xCD\x01R_\x81\x81`\xEF\x01R\x81\x81a\x02^\x01R\x81\x81a\x030\x01Ra\x04T\x01Ra\x0C\xF8_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0\x85W_5`\xE0\x1C\x80ctv\x08;\x11a\0XW\x80ctv\x08;\x14a\x01\x11W\x80c\x95e\x01\xBB\x14a\x01$W\x80c\x9C\xFA**\x14a\x01QW\x80c\xBD>\xEC}\x14a\x01xW__\xFD[\x80c\x02:\x96\xFE\x14a\0\x89W\x80c&\xC0\xE5\xC5\x14a\0\xCDW\x80c0\xFCC\xED\x14a\0\xD7W\x80cQ\xEDj0\x14a\0\xEAW[__\xFD[a\0\xB0\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\0\xD5a\x01\x8BV[\0[a\0\xD5a\0\xE56`\x04a\n%V[a\x01\xA5V[a\0\xB0\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81V[a\0\xD5a\x01\x1F6`\x04a\n%V[a\x02\xC6V[a\x01Ca\x0126`\x04a\n<V[_` \x81\x90R\x90\x81R`@\x90 T\x81V[`@Q\x90\x81R` \x01a\0\xC4V[a\x01C\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81V[a\0\xD5a\x01\x866`\x04a\nbV[a\x03\x90V[3_\x90\x81R` \x81\x90R`@\x90 Ta\x01\xA3\x90a\x01\xA5V[V[\x80_\x03a\x01\xDEW`@Q\x7F\x1F* \x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[3_\x90\x81R` \x81\x90R`@\x90 T\x80\x82\x11\x15a\x02<W`@Q\x7F\xA4{|e\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R3`\x04\x82\x01R`$\x81\x01\x83\x90R`D\x81\x01\x82\x90R`d\x01[`@Q\x80\x91\x03\x90\xFD[a\x02F\x82\x82a\n\xC6V[3_\x81\x81R` \x81\x90R`@\x90 \x91\x90\x91Ua\x02\x8D\x90\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x01`\x01`\xA0\x1B\x03\x16\x90\x84a\x05\xCBV[`@Q\x82\x81R3\x90\x7F\x81\x08Y^\xB6\xBA\xD3\xAC\xEF\xA9\xDAF}\x90\xCC\"\x17hm\\Z\xC8T`\xF8\xB7\x84\x9C\x84\x06E\xFC\x90` \x01`@Q\x80\x91\x03\x90\xA2PPV[\x80_\x03a\x02\xFFW`@Q\x7F\x1F* \x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[3_\x90\x81R` \x81\x90R`@\x81 \x80T\x83\x92\x90a\x03\x1D\x90\x84\x90a\n\xDFV[\x90\x91UPa\x03X\x90P`\x01`\x01`\xA0\x1B\x03\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1630\x84a\x06tV[`@Q\x81\x81R3\x90\x7F\n{\xB2\xE2\x8C\xC4i\x8A\xAC\x06\xDBy\xCF\x91c\xBF\xCC q\x92\x86\xCFY\xFA}I,\xED\xA1\xB8\xED\xC2\x90` \x01`@Q\x80\x91\x03\x90\xA2PV[_`\x01`\x01`\xA0\x1B\x03\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16c\x1C\x1BO:a\x03\xCD` \x85\x01\x85a\x0B\x07V[`@Q\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xE0\x84\x90\x1B\x16\x81R`\xFF\x90\x91\x16`\x04\x82\x01R`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x04!W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04E\x91\x90a\x0B V[\x90Pa\x04\x9B`\x01`\x01`\xA0\x1B\x03\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83a\x06\xCBV[`@Q\x7F\x05\xFA\xE1A\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R_\x90`\x01`\x01`\xA0\x1B\x03\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x90c\x05\xFA\xE1A\x90a\x05\x02\x90\x86\x90`\x04\x01a\x0B\xC7V[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x05\x1EW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x05B\x91\x90a\x0B V[\x90P\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81\x14a\x05\xC6W`@Q\x7Fu\xC0\x81\x1B\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x82\x90R\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`$\x82\x01R`D\x01a\x023V[PPPV[`@Q`\x01`\x01`\xA0\x1B\x03\x83\x16`$\x82\x01R`D\x81\x01\x82\x90Ra\x05\xC6\x90\x84\x90\x7F\xA9\x05\x9C\xBB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90`d\x01[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x93\x16\x92\x90\x92\x17\x90\x91Ra\x07\xACV[`@Q`\x01`\x01`\xA0\x1B\x03\x80\x85\x16`$\x83\x01R\x83\x16`D\x82\x01R`d\x81\x01\x82\x90Ra\x06\xC5\x90\x85\x90\x7F#\xB8r\xDD\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90`\x84\x01a\x06\x10V[PPPPV[`@Q\x7F\xDDb\xED>\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R0`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x83\x81\x16`$\x83\x01R_\x91\x83\x91\x86\x16\x90c\xDDb\xED>\x90`D\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x072W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x07V\x91\x90a\x0B V[a\x07`\x91\x90a\n\xDFV[`@Q`\x01`\x01`\xA0\x1B\x03\x85\x16`$\x82\x01R`D\x81\x01\x82\x90R\x90\x91Pa\x06\xC5\x90\x85\x90\x7F\t^\xA7\xB3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90`d\x01a\x06\x10V[_a\x08\0\x82`@Q\x80`@\x01`@R\x80` \x81R` \x01\x7FSafeERC20: low-level call failed\x81RP\x85`\x01`\x01`\xA0\x1B\x03\x16a\x08\x90\x90\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[\x80Q\x90\x91P\x15a\x05\xC6W\x80\x80` \x01\x90Q\x81\x01\x90a\x08\x1E\x91\x90a\x0CXV[a\x05\xC6W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`*`$\x82\x01R\x7FSafeERC20: ERC20 operation did n`D\x82\x01R\x7Fot succeed\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x023V[``a\x08\x9E\x84\x84_\x85a\x08\xA8V[\x90P[\x93\x92PPPV[``\x82G\x10\x15a\t W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FAddress: insufficient balance fo`D\x82\x01R\x7Fr call\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x023V[`\x01`\x01`\xA0\x1B\x03\x85\x16;a\twW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1D`$\x82\x01R\x7FAddress: call to non-contract\0\0\0`D\x82\x01R`d\x01a\x023V[__\x86`\x01`\x01`\xA0\x1B\x03\x16\x85\x87`@Qa\t\x92\x91\x90a\x0CwV[_`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80_\x81\x14a\t\xCCW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\t\xD1V[``\x91P[P\x91P\x91Pa\t\xE1\x82\x82\x86a\t\xECV[\x97\x96PPPPPPPV[``\x83\x15a\t\xFBWP\x81a\x08\xA1V[\x82Q\x15a\n\x0BW\x82Q\x80\x84` \x01\xFD[\x81`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x023\x91\x90a\x0C\x8DV[_` \x82\x84\x03\x12\x15a\n5W__\xFD[P5\x91\x90PV[_` \x82\x84\x03\x12\x15a\nLW__\xFD[\x815`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x08\xA1W__\xFD[_` \x82\x84\x03\x12\x15a\nrW__\xFD[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\n\x88W__\xFD[\x82\x01`\xC0\x81\x85\x03\x12\x15a\x08\xA1W__\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[\x81\x81\x03\x81\x81\x11\x15a\n\xD9Wa\n\xD9a\n\x99V[\x92\x91PPV[\x80\x82\x01\x80\x82\x11\x15a\n\xD9Wa\n\xD9a\n\x99V[\x805`\xFF\x81\x16\x81\x14a\x0B\x02W__\xFD[\x91\x90PV[_` \x82\x84\x03\x12\x15a\x0B\x17W__\xFD[a\x08\xA1\x82a\n\xF2V[_` \x82\x84\x03\x12\x15a\x0B0W__\xFD[PQ\x91\x90PV[__\x835\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE1\x846\x03\x01\x81\x12a\x0BjW__\xFD[\x83\x01` \x81\x01\x92P5\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0B\x89W__\xFD[\x806\x03\x82\x13\x15a\x0B\x97W__\xFD[\x92P\x92\x90PV[\x81\x83R\x81\x81` \x85\x017P_` \x82\x84\x01\x01R_` `\x1F\x19`\x1F\x84\x01\x16\x84\x01\x01\x90P\x92\x91PPV[` \x81R`\xFFa\x0B\xD6\x83a\n\xF2V[\x16` \x82\x81\x01\x91\x90\x91R\x82\x015`@\x80\x83\x01\x91\x90\x91R\x82\x015``\x80\x83\x01\x91\x90\x91R\x82\x015`\x80\x80\x83\x01\x91\x90\x91R_\x90a\x0C\x12\x90\x84\x01\x84a\x0B7V[`\xC0`\xA0\x85\x01Ra\x0C'`\xE0\x85\x01\x82\x84a\x0B\x9EV[\x91PPa\x0C7`\xA0\x85\x01\x85a\x0B7V[`\x1F\x19\x85\x84\x03\x01`\xC0\x86\x01Ra\x0CN\x83\x82\x84a\x0B\x9EV[\x96\x95PPPPPPV[_` \x82\x84\x03\x12\x15a\x0ChW__\xFD[\x81Q\x80\x15\x15\x81\x14a\x08\xA1W__\xFD[_\x82Q\x80` \x85\x01\x84^_\x92\x01\x91\x82RP\x91\x90PV[` \x81R_\x82Q\x80` \x84\x01R\x80` \x85\x01`@\x85\x01^_`@\x82\x85\x01\x01R`@`\x1F\x19`\x1F\x83\x01\x16\x84\x01\x01\x91PP\x92\x91PPV\xFE\xA2dipfsX\"\x12 \x19\xCF\xB4\xC6u\x8A\x17j\r\x97\xE3\xD616\xD1\xE0$7t\x7F\xC9\xC5A\xAB\xE0\xE3\x91e\xB9\xDAB\xD7dsolcC\0\x08\x1C\x003\xA2dipfsX\"\x12 \xB5\x1EMT\xB4\xBA\xF2\xFDFG\xA9e\x8Be\xC8\xD6,\x06\xFA\x9F\x03\x8B\x13\xE8\xDA.\x95\xE4\xC8\xB1\x80\xA3dsolcC\0\x08\x1C\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f5ffd5b5060043610610034575f3560e01c80639b505aa114610038578063dc082ad314610074575b5f5ffd5b61004b61004636600461029e565b610087565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b61004b61008236600461029e565b610129565b5f5f5f5f1b848460405161009a90610291565b73ffffffffffffffffffffffffffffffffffffffff909216825260208201526040018190604051809103905ff59050801580156100d9573d5f5f3e3d5ffd5b509050828473ffffffffffffffffffffffffffffffffffffffff167f15e71db3d71eb3b7985105d763101e1d6c1c491ab3e6a0d682558c12cc0bb8d660405160405180910390a390505b92915050565b5f61018a6040518060200161013d90610291565b601f1982820381018352601f90910116604081815273ffffffffffffffffffffffffffffffffffffffff871660208301528101859052606001604051602081830303815290604052610191565b9392505050565b5f5f83836040516020016101a69291906102f7565b60408051808303601f1901815282825280516020918201207fff00000000000000000000000000000000000000000000000000000000000000828501523060601b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660218501525f60358501526055808501829052835180860390910181526075909401909252825192019190912090915073ffffffffffffffffffffffffffffffffffffffff81163b1561025f5791506101239050565b6040517f215db33100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610e8a8061031483390190565b5f5f604083850312156102af575f5ffd5b823573ffffffffffffffffffffffffffffffffffffffff811681146102d2575f5ffd5b946020939093013593505050565b5f81518060208401855e5f93019283525090919050565b5f61030b61030583866102e0565b846102e0565b94935050505056fe60e060405234801561000f575f5ffd5b50604051610e8a380380610e8a83398101604081905261002e916100e4565b816001600160a01b03166351ed6a306040518163ffffffff1660e01b8152600401602060405180830381865afa15801561006a573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061008e9190610110565b6001600160a01b0316608052806100b757604051620d29f560e71b815260040160405180910390fd5b6001600160a01b0390911660a05260c052610132565b6001600160a01b03811681146100e1575f5ffd5b50565b5f5f604083850312156100f5575f5ffd5b8251610100816100cd565b6020939093015192949293505050565b5f60208284031215610120575f5ffd5b815161012b816100cd565b9392505050565b60805160a05160c051610cf86101925f395f818161015601528181610546015261059a01525f8181608e0152818161039b0152818161047601526104cd01525f818160ef0152818161025e0152818161033001526104540152610cf85ff3fe608060405234801561000f575f5ffd5b5060043610610085575f3560e01c80637476083b116100585780637476083b14610111578063956501bb146101245780639cfa2a2a14610151578063bd3eec7d14610178575f5ffd5b8063023a96fe1461008957806326c0e5c5146100cd57806330fc43ed146100d757806351ed6a30146100ea575b5f5ffd5b6100b07f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100d561018b565b005b6100d56100e5366004610a25565b6101a5565b6100b07f000000000000000000000000000000000000000000000000000000000000000081565b6100d561011f366004610a25565b6102c6565b610143610132366004610a3c565b5f6020819052908152604090205481565b6040519081526020016100c4565b6101437f000000000000000000000000000000000000000000000000000000000000000081565b6100d5610186366004610a62565b610390565b335f908152602081905260409020546101a3906101a5565b565b805f036101de576040517f1f2a200500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b335f908152602081905260409020548082111561023c576040517fa47b7c6500000000000000000000000000000000000000000000000000000000815233600482015260248101839052604481018290526064015b60405180910390fd5b6102468282610ac6565b335f8181526020819052604090209190915561028d907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690846105cb565b60405182815233907f8108595eb6bad3acefa9da467d90cc2217686d5c5ac85460f8b7849c840645fc9060200160405180910390a25050565b805f036102ff576040517f1f2a200500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b335f908152602081905260408120805483929061031d908490610adf565b9091555061035890506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333084610674565b60405181815233907f0a7bb2e28cc4698aac06db79cf9163bfcc20719286cf59fa7d492ceda1b8edc29060200160405180910390a250565b5f6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016631c1b4f3a6103cd6020850185610b07565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815260ff9091166004820152602401602060405180830381865afa158015610421573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104459190610b20565b905061049b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000836106cb565b6040517f05fae1410000000000000000000000000000000000000000000000000000000081525f906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906305fae14190610502908690600401610bc7565b6020604051808303815f875af115801561051e573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105429190610b20565b90507f000000000000000000000000000000000000000000000000000000000000000081146105c6576040517f75c0811b000000000000000000000000000000000000000000000000000000008152600481018290527f00000000000000000000000000000000000000000000000000000000000000006024820152604401610233565b505050565b6040516001600160a01b0383166024820152604481018290526105c69084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526107ac565b6040516001600160a01b03808516602483015283166044820152606481018290526106c59085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401610610565b50505050565b6040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0383811660248301525f91839186169063dd62ed3e90604401602060405180830381865afa158015610732573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107569190610b20565b6107609190610adf565b6040516001600160a01b0385166024820152604481018290529091506106c59085907f095ea7b30000000000000000000000000000000000000000000000000000000090606401610610565b5f610800826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166108909092919063ffffffff16565b8051909150156105c6578080602001905181019061081e9190610c58565b6105c65760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610233565b606061089e84845f856108a8565b90505b9392505050565b6060824710156109205760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610233565b6001600160a01b0385163b6109775760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610233565b5f5f866001600160a01b031685876040516109929190610c77565b5f6040518083038185875af1925050503d805f81146109cc576040519150601f19603f3d011682016040523d82523d5f602084013e6109d1565b606091505b50915091506109e18282866109ec565b979650505050505050565b606083156109fb5750816108a1565b825115610a0b5782518084602001fd5b8160405162461bcd60e51b81526004016102339190610c8d565b5f60208284031215610a35575f5ffd5b5035919050565b5f60208284031215610a4c575f5ffd5b81356001600160a01b03811681146108a1575f5ffd5b5f60208284031215610a72575f5ffd5b813567ffffffffffffffff811115610a88575f5ffd5b820160c081850312156108a1575f5ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b81810381811115610ad957610ad9610a99565b92915050565b80820180821115610ad957610ad9610a99565b803560ff81168114610b02575f5ffd5b919050565b5f60208284031215610b17575f5ffd5b6108a182610af2565b5f60208284031215610b30575f5ffd5b5051919050565b5f5f83357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610b6a575f5ffd5b830160208101925035905067ffffffffffffffff811115610b89575f5ffd5b803603821315610b97575f5ffd5b9250929050565b81835281816020850137505f602082840101525f6020601f19601f840116840101905092915050565b6020815260ff610bd683610af2565b166020828101919091528201356040808301919091528201356060808301919091528201356080808301919091525f90610c1290840184610b37565b60c060a0850152610c2760e085018284610b9e565b915050610c3760a0850185610b37565b601f198584030160c0860152610c4e838284610b9e565b9695505050505050565b5f60208284031215610c68575f5ffd5b815180151581146108a1575f5ffd5b5f82518060208501845e5f920191825250919050565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f8301168401019150509291505056fea264697066735822122019cfb4c6758a176a0d97e3d63136d1e02437747fc9c541abe0e39165b9da42d764736f6c634300081c0033a2646970667358221220b51e4d54b4baf2fd4647a9658b65c8d62c06fa9f038b13e8da2e95e4c8b180a364736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\x004W_5`\xE0\x1C\x80c\x9BPZ\xA1\x14a\08W\x80c\xDC\x08*\xD3\x14a\0tW[__\xFD[a\0Ka\0F6`\x04a\x02\x9EV[a\0\x87V[`@Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16\x81R` \x01`@Q\x80\x91\x03\x90\xF3[a\0Ka\0\x826`\x04a\x02\x9EV[a\x01)V[____\x1B\x84\x84`@Qa\0\x9A\x90a\x02\x91V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x92\x16\x82R` \x82\x01R`@\x01\x81\x90`@Q\x80\x91\x03\x90_\xF5\x90P\x80\x15\x80\x15a\0\xD9W=__>=_\xFD[P\x90P\x82\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\x15\xE7\x1D\xB3\xD7\x1E\xB3\xB7\x98Q\x05\xD7c\x10\x1E\x1Dl\x1CI\x1A\xB3\xE6\xA0\xD6\x82U\x8C\x12\xCC\x0B\xB8\xD6`@Q`@Q\x80\x91\x03\x90\xA3\x90P[\x92\x91PPV[_a\x01\x8A`@Q\x80` \x01a\x01=\x90a\x02\x91V[`\x1F\x19\x82\x82\x03\x81\x01\x83R`\x1F\x90\x91\x01\x16`@\x81\x81Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x87\x16` \x83\x01R\x81\x01\x85\x90R``\x01`@Q` \x81\x83\x03\x03\x81R\x90`@Ra\x01\x91V[\x93\x92PPPV[__\x83\x83`@Q` \x01a\x01\xA6\x92\x91\x90a\x02\xF7V[`@\x80Q\x80\x83\x03`\x1F\x19\x01\x81R\x82\x82R\x80Q` \x91\x82\x01 \x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82\x85\x01R0``\x1B\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\x16`!\x85\x01R_`5\x85\x01R`U\x80\x85\x01\x82\x90R\x83Q\x80\x86\x03\x90\x91\x01\x81R`u\x90\x94\x01\x90\x92R\x82Q\x92\x01\x91\x90\x91 \x90\x91Ps\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16;\x15a\x02_W\x91Pa\x01#\x90PV[`@Q\x7F!]\xB31\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a\x0E\x8A\x80a\x03\x14\x839\x01\x90V[__`@\x83\x85\x03\x12\x15a\x02\xAFW__\xFD[\x825s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x02\xD2W__\xFD[\x94` \x93\x90\x93\x015\x93PPPV[_\x81Q\x80` \x84\x01\x85^_\x93\x01\x92\x83RP\x90\x91\x90PV[_a\x03\x0Ba\x03\x05\x83\x86a\x02\xE0V[\x84a\x02\xE0V[\x94\x93PPPPV\xFE`\xE0`@R4\x80\x15a\0\x0FW__\xFD[P`@Qa\x0E\x8A8\x03\x80a\x0E\x8A\x839\x81\x01`@\x81\x90Ra\0.\x91a\0\xE4V[\x81`\x01`\x01`\xA0\x1B\x03\x16cQ\xEDj0`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\0jW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\0\x8E\x91\x90a\x01\x10V[`\x01`\x01`\xA0\x1B\x03\x16`\x80R\x80a\0\xB7W`@Qb\r)\xF5`\xE7\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x01`\x01`\xA0\x1B\x03\x90\x91\x16`\xA0R`\xC0Ra\x012V[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\0\xE1W__\xFD[PV[__`@\x83\x85\x03\x12\x15a\0\xF5W__\xFD[\x82Qa\x01\0\x81a\0\xCDV[` \x93\x90\x93\x01Q\x92\x94\x92\x93PPPV[_` \x82\x84\x03\x12\x15a\x01 W__\xFD[\x81Qa\x01+\x81a\0\xCDV[\x93\x92PPPV[`\x80Q`\xA0Q`\xC0Qa\x0C\xF8a\x01\x92_9_\x81\x81a\x01V\x01R\x81\x81a\x05F\x01Ra\x05\x9A\x01R_\x81\x81`\x8E\x01R\x81\x81a\x03\x9B\x01R\x81\x81a\x04v\x01Ra\x04\xCD\x01R_\x81\x81`\xEF\x01R\x81\x81a\x02^\x01R\x81\x81a\x030\x01Ra\x04T\x01Ra\x0C\xF8_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0\x85W_5`\xE0\x1C\x80ctv\x08;\x11a\0XW\x80ctv\x08;\x14a\x01\x11W\x80c\x95e\x01\xBB\x14a\x01$W\x80c\x9C\xFA**\x14a\x01QW\x80c\xBD>\xEC}\x14a\x01xW__\xFD[\x80c\x02:\x96\xFE\x14a\0\x89W\x80c&\xC0\xE5\xC5\x14a\0\xCDW\x80c0\xFCC\xED\x14a\0\xD7W\x80cQ\xEDj0\x14a\0\xEAW[__\xFD[a\0\xB0\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\0\xD5a\x01\x8BV[\0[a\0\xD5a\0\xE56`\x04a\n%V[a\x01\xA5V[a\0\xB0\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81V[a\0\xD5a\x01\x1F6`\x04a\n%V[a\x02\xC6V[a\x01Ca\x0126`\x04a\n<V[_` \x81\x90R\x90\x81R`@\x90 T\x81V[`@Q\x90\x81R` \x01a\0\xC4V[a\x01C\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81V[a\0\xD5a\x01\x866`\x04a\nbV[a\x03\x90V[3_\x90\x81R` \x81\x90R`@\x90 Ta\x01\xA3\x90a\x01\xA5V[V[\x80_\x03a\x01\xDEW`@Q\x7F\x1F* \x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[3_\x90\x81R` \x81\x90R`@\x90 T\x80\x82\x11\x15a\x02<W`@Q\x7F\xA4{|e\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R3`\x04\x82\x01R`$\x81\x01\x83\x90R`D\x81\x01\x82\x90R`d\x01[`@Q\x80\x91\x03\x90\xFD[a\x02F\x82\x82a\n\xC6V[3_\x81\x81R` \x81\x90R`@\x90 \x91\x90\x91Ua\x02\x8D\x90\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x01`\x01`\xA0\x1B\x03\x16\x90\x84a\x05\xCBV[`@Q\x82\x81R3\x90\x7F\x81\x08Y^\xB6\xBA\xD3\xAC\xEF\xA9\xDAF}\x90\xCC\"\x17hm\\Z\xC8T`\xF8\xB7\x84\x9C\x84\x06E\xFC\x90` \x01`@Q\x80\x91\x03\x90\xA2PPV[\x80_\x03a\x02\xFFW`@Q\x7F\x1F* \x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[3_\x90\x81R` \x81\x90R`@\x81 \x80T\x83\x92\x90a\x03\x1D\x90\x84\x90a\n\xDFV[\x90\x91UPa\x03X\x90P`\x01`\x01`\xA0\x1B\x03\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1630\x84a\x06tV[`@Q\x81\x81R3\x90\x7F\n{\xB2\xE2\x8C\xC4i\x8A\xAC\x06\xDBy\xCF\x91c\xBF\xCC q\x92\x86\xCFY\xFA}I,\xED\xA1\xB8\xED\xC2\x90` \x01`@Q\x80\x91\x03\x90\xA2PV[_`\x01`\x01`\xA0\x1B\x03\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16c\x1C\x1BO:a\x03\xCD` \x85\x01\x85a\x0B\x07V[`@Q\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xE0\x84\x90\x1B\x16\x81R`\xFF\x90\x91\x16`\x04\x82\x01R`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x04!W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04E\x91\x90a\x0B V[\x90Pa\x04\x9B`\x01`\x01`\xA0\x1B\x03\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83a\x06\xCBV[`@Q\x7F\x05\xFA\xE1A\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R_\x90`\x01`\x01`\xA0\x1B\x03\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x90c\x05\xFA\xE1A\x90a\x05\x02\x90\x86\x90`\x04\x01a\x0B\xC7V[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x05\x1EW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x05B\x91\x90a\x0B V[\x90P\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81\x14a\x05\xC6W`@Q\x7Fu\xC0\x81\x1B\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x82\x90R\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`$\x82\x01R`D\x01a\x023V[PPPV[`@Q`\x01`\x01`\xA0\x1B\x03\x83\x16`$\x82\x01R`D\x81\x01\x82\x90Ra\x05\xC6\x90\x84\x90\x7F\xA9\x05\x9C\xBB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90`d\x01[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x93\x16\x92\x90\x92\x17\x90\x91Ra\x07\xACV[`@Q`\x01`\x01`\xA0\x1B\x03\x80\x85\x16`$\x83\x01R\x83\x16`D\x82\x01R`d\x81\x01\x82\x90Ra\x06\xC5\x90\x85\x90\x7F#\xB8r\xDD\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90`\x84\x01a\x06\x10V[PPPPV[`@Q\x7F\xDDb\xED>\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R0`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x83\x81\x16`$\x83\x01R_\x91\x83\x91\x86\x16\x90c\xDDb\xED>\x90`D\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x072W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x07V\x91\x90a\x0B V[a\x07`\x91\x90a\n\xDFV[`@Q`\x01`\x01`\xA0\x1B\x03\x85\x16`$\x82\x01R`D\x81\x01\x82\x90R\x90\x91Pa\x06\xC5\x90\x85\x90\x7F\t^\xA7\xB3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90`d\x01a\x06\x10V[_a\x08\0\x82`@Q\x80`@\x01`@R\x80` \x81R` \x01\x7FSafeERC20: low-level call failed\x81RP\x85`\x01`\x01`\xA0\x1B\x03\x16a\x08\x90\x90\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[\x80Q\x90\x91P\x15a\x05\xC6W\x80\x80` \x01\x90Q\x81\x01\x90a\x08\x1E\x91\x90a\x0CXV[a\x05\xC6W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`*`$\x82\x01R\x7FSafeERC20: ERC20 operation did n`D\x82\x01R\x7Fot succeed\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x023V[``a\x08\x9E\x84\x84_\x85a\x08\xA8V[\x90P[\x93\x92PPPV[``\x82G\x10\x15a\t W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FAddress: insufficient balance fo`D\x82\x01R\x7Fr call\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x023V[`\x01`\x01`\xA0\x1B\x03\x85\x16;a\twW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1D`$\x82\x01R\x7FAddress: call to non-contract\0\0\0`D\x82\x01R`d\x01a\x023V[__\x86`\x01`\x01`\xA0\x1B\x03\x16\x85\x87`@Qa\t\x92\x91\x90a\x0CwV[_`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80_\x81\x14a\t\xCCW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\t\xD1V[``\x91P[P\x91P\x91Pa\t\xE1\x82\x82\x86a\t\xECV[\x97\x96PPPPPPPV[``\x83\x15a\t\xFBWP\x81a\x08\xA1V[\x82Q\x15a\n\x0BW\x82Q\x80\x84` \x01\xFD[\x81`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x023\x91\x90a\x0C\x8DV[_` \x82\x84\x03\x12\x15a\n5W__\xFD[P5\x91\x90PV[_` \x82\x84\x03\x12\x15a\nLW__\xFD[\x815`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x08\xA1W__\xFD[_` \x82\x84\x03\x12\x15a\nrW__\xFD[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\n\x88W__\xFD[\x82\x01`\xC0\x81\x85\x03\x12\x15a\x08\xA1W__\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[\x81\x81\x03\x81\x81\x11\x15a\n\xD9Wa\n\xD9a\n\x99V[\x92\x91PPV[\x80\x82\x01\x80\x82\x11\x15a\n\xD9Wa\n\xD9a\n\x99V[\x805`\xFF\x81\x16\x81\x14a\x0B\x02W__\xFD[\x91\x90PV[_` \x82\x84\x03\x12\x15a\x0B\x17W__\xFD[a\x08\xA1\x82a\n\xF2V[_` \x82\x84\x03\x12\x15a\x0B0W__\xFD[PQ\x91\x90PV[__\x835\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE1\x846\x03\x01\x81\x12a\x0BjW__\xFD[\x83\x01` \x81\x01\x92P5\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0B\x89W__\xFD[\x806\x03\x82\x13\x15a\x0B\x97W__\xFD[\x92P\x92\x90PV[\x81\x83R\x81\x81` \x85\x017P_` \x82\x84\x01\x01R_` `\x1F\x19`\x1F\x84\x01\x16\x84\x01\x01\x90P\x92\x91PPV[` \x81R`\xFFa\x0B\xD6\x83a\n\xF2V[\x16` \x82\x81\x01\x91\x90\x91R\x82\x015`@\x80\x83\x01\x91\x90\x91R\x82\x015``\x80\x83\x01\x91\x90\x91R\x82\x015`\x80\x80\x83\x01\x91\x90\x91R_\x90a\x0C\x12\x90\x84\x01\x84a\x0B7V[`\xC0`\xA0\x85\x01Ra\x0C'`\xE0\x85\x01\x82\x84a\x0B\x9EV[\x91PPa\x0C7`\xA0\x85\x01\x85a\x0B7V[`\x1F\x19\x85\x84\x03\x01`\xC0\x86\x01Ra\x0CN\x83\x82\x84a\x0B\x9EV[\x96\x95PPPPPPV[_` \x82\x84\x03\x12\x15a\x0ChW__\xFD[\x81Q\x80\x15\x15\x81\x14a\x08\xA1W__\xFD[_\x82Q\x80` \x85\x01\x84^_\x92\x01\x91\x82RP\x91\x90PV[` \x81R_\x82Q\x80` \x84\x01R\x80` \x85\x01`@\x85\x01^_`@\x82\x85\x01\x01R`@`\x1F\x19`\x1F\x83\x01\x16\x84\x01\x01\x91PP\x92\x91PPV\xFE\xA2dipfsX\"\x12 \x19\xCF\xB4\xC6u\x8A\x17j\r\x97\xE3\xD616\xD1\xE0$7t\x7F\xC9\xC5A\xAB\xE0\xE3\x91e\xB9\xDAB\xD7dsolcC\0\x08\x1C\x003\xA2dipfsX\"\x12 \xB5\x1EMT\xB4\xBA\xF2\xFDFG\xA9e\x8Be\xC8\xD6,\x06\xFA\x9F\x03\x8B\x13\xE8\xDA.\x95\xE4\xC8\xB1\x80\xA3dsolcC\0\x08\x1C\x003",
    );
    /**Custom error with signature `PoolDoesntExist()` and selector `0x215db331`.
```solidity
error PoolDoesntExist();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct PoolDoesntExist {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<PoolDoesntExist> for UnderlyingRustTuple<'_> {
            fn from(value: PoolDoesntExist) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for PoolDoesntExist {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for PoolDoesntExist {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "PoolDoesntExist()";
            const SELECTOR: [u8; 4] = [33u8, 93u8, 179u8, 49u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Event with signature `NewEdgeStakingPoolCreated(address,bytes32)` and selector `0x15e71db3d71eb3b7985105d763101e1d6c1c491ab3e6a0d682558c12cc0bb8d6`.
```solidity
event NewEdgeStakingPoolCreated(address indexed challengeManager, bytes32 indexed edgeId);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct NewEdgeStakingPoolCreated {
        #[allow(missing_docs)]
        pub challengeManager: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub edgeId: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for NewEdgeStakingPoolCreated {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            const SIGNATURE: &'static str = "NewEdgeStakingPoolCreated(address,bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                21u8,
                231u8,
                29u8,
                179u8,
                215u8,
                30u8,
                179u8,
                183u8,
                152u8,
                81u8,
                5u8,
                215u8,
                99u8,
                16u8,
                30u8,
                29u8,
                108u8,
                28u8,
                73u8,
                26u8,
                179u8,
                230u8,
                160u8,
                214u8,
                130u8,
                85u8,
                140u8,
                18u8,
                204u8,
                11u8,
                184u8,
                214u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    challengeManager: topics.1,
                    edgeId: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.challengeManager.clone(),
                    self.edgeId.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.challengeManager,
                );
                out[2usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.edgeId);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for NewEdgeStakingPoolCreated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&NewEdgeStakingPoolCreated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &NewEdgeStakingPoolCreated,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Function with signature `createPool(address,bytes32)` and selector `0x9b505aa1`.
```solidity
function createPool(address challengeManager, bytes32 edgeId) external returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct createPoolCall {
        #[allow(missing_docs)]
        pub challengeManager: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub edgeId: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`createPool(address,bytes32)`](createPoolCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct createPoolReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<createPoolCall> for UnderlyingRustTuple<'_> {
                fn from(value: createPoolCall) -> Self {
                    (value.challengeManager, value.edgeId)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for createPoolCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        challengeManager: tuple.0,
                        edgeId: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<createPoolReturn> for UnderlyingRustTuple<'_> {
                fn from(value: createPoolReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for createPoolReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for createPoolCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = createPoolReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "createPool(address,bytes32)";
            const SELECTOR: [u8; 4] = [155u8, 80u8, 90u8, 161u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.challengeManager,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.edgeId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getPool(address,bytes32)` and selector `0xdc082ad3`.
```solidity
function getPool(address challengeManager, bytes32 edgeId) external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getPoolCall {
        #[allow(missing_docs)]
        pub challengeManager: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub edgeId: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`getPool(address,bytes32)`](getPoolCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getPoolReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getPoolCall> for UnderlyingRustTuple<'_> {
                fn from(value: getPoolCall) -> Self {
                    (value.challengeManager, value.edgeId)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getPoolCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        challengeManager: tuple.0,
                        edgeId: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getPoolReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getPoolReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getPoolReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getPoolCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getPoolReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getPool(address,bytes32)";
            const SELECTOR: [u8; 4] = [220u8, 8u8, 42u8, 211u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.challengeManager,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.edgeId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`EdgeStakingPoolCreator`](self) function calls.
    pub enum EdgeStakingPoolCreatorCalls {
        #[allow(missing_docs)]
        createPool(createPoolCall),
        #[allow(missing_docs)]
        getPool(getPoolCall),
    }
    #[automatically_derived]
    impl EdgeStakingPoolCreatorCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [155u8, 80u8, 90u8, 161u8],
            [220u8, 8u8, 42u8, 211u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for EdgeStakingPoolCreatorCalls {
        const NAME: &'static str = "EdgeStakingPoolCreatorCalls";
        const MIN_DATA_LENGTH: usize = 64usize;
        const COUNT: usize = 2usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::createPool(_) => {
                    <createPoolCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getPool(_) => <getPoolCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<EdgeStakingPoolCreatorCalls>] = &[
                {
                    fn createPool(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeStakingPoolCreatorCalls> {
                        <createPoolCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(EdgeStakingPoolCreatorCalls::createPool)
                    }
                    createPool
                },
                {
                    fn getPool(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeStakingPoolCreatorCalls> {
                        <getPoolCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(EdgeStakingPoolCreatorCalls::getPool)
                    }
                    getPool
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::createPool(inner) => {
                    <createPoolCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::getPool(inner) => {
                    <getPoolCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::createPool(inner) => {
                    <createPoolCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getPool(inner) => {
                    <getPoolCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    ///Container for all the [`EdgeStakingPoolCreator`](self) custom errors.
    pub enum EdgeStakingPoolCreatorErrors {
        #[allow(missing_docs)]
        PoolDoesntExist(PoolDoesntExist),
    }
    #[automatically_derived]
    impl EdgeStakingPoolCreatorErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[[33u8, 93u8, 179u8, 49u8]];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for EdgeStakingPoolCreatorErrors {
        const NAME: &'static str = "EdgeStakingPoolCreatorErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 1usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::PoolDoesntExist(_) => {
                    <PoolDoesntExist as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<EdgeStakingPoolCreatorErrors>] = &[
                {
                    fn PoolDoesntExist(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<EdgeStakingPoolCreatorErrors> {
                        <PoolDoesntExist as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(EdgeStakingPoolCreatorErrors::PoolDoesntExist)
                    }
                    PoolDoesntExist
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::PoolDoesntExist(inner) => {
                    <PoolDoesntExist as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::PoolDoesntExist(inner) => {
                    <PoolDoesntExist as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`EdgeStakingPoolCreator`](self) events.
    pub enum EdgeStakingPoolCreatorEvents {
        #[allow(missing_docs)]
        NewEdgeStakingPoolCreated(NewEdgeStakingPoolCreated),
    }
    #[automatically_derived]
    impl EdgeStakingPoolCreatorEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                21u8,
                231u8,
                29u8,
                179u8,
                215u8,
                30u8,
                179u8,
                183u8,
                152u8,
                81u8,
                5u8,
                215u8,
                99u8,
                16u8,
                30u8,
                29u8,
                108u8,
                28u8,
                73u8,
                26u8,
                179u8,
                230u8,
                160u8,
                214u8,
                130u8,
                85u8,
                140u8,
                18u8,
                204u8,
                11u8,
                184u8,
                214u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for EdgeStakingPoolCreatorEvents {
        const NAME: &'static str = "EdgeStakingPoolCreatorEvents";
        const COUNT: usize = 1usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <NewEdgeStakingPoolCreated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <NewEdgeStakingPoolCreated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::NewEdgeStakingPoolCreated)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for EdgeStakingPoolCreatorEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::NewEdgeStakingPoolCreated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::NewEdgeStakingPoolCreated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`EdgeStakingPoolCreator`](self) contract instance.

See the [wrapper's documentation](`EdgeStakingPoolCreatorInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> EdgeStakingPoolCreatorInstance<T, P, N> {
        EdgeStakingPoolCreatorInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<EdgeStakingPoolCreatorInstance<T, P, N>>,
    > {
        EdgeStakingPoolCreatorInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        EdgeStakingPoolCreatorInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`EdgeStakingPoolCreator`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`EdgeStakingPoolCreator`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct EdgeStakingPoolCreatorInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for EdgeStakingPoolCreatorInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("EdgeStakingPoolCreatorInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > EdgeStakingPoolCreatorInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`EdgeStakingPoolCreator`](self) contract instance.

See the [wrapper's documentation](`EdgeStakingPoolCreatorInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<EdgeStakingPoolCreatorInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> EdgeStakingPoolCreatorInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> EdgeStakingPoolCreatorInstance<T, P, N> {
            EdgeStakingPoolCreatorInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > EdgeStakingPoolCreatorInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`createPool`] function.
        pub fn createPool(
            &self,
            challengeManager: alloy::sol_types::private::Address,
            edgeId: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, createPoolCall, N> {
            self.call_builder(
                &createPoolCall {
                    challengeManager,
                    edgeId,
                },
            )
        }
        ///Creates a new call builder for the [`getPool`] function.
        pub fn getPool(
            &self,
            challengeManager: alloy::sol_types::private::Address,
            edgeId: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, getPoolCall, N> {
            self.call_builder(
                &getPoolCall {
                    challengeManager,
                    edgeId,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > EdgeStakingPoolCreatorInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`NewEdgeStakingPoolCreated`] event.
        pub fn NewEdgeStakingPoolCreated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, NewEdgeStakingPoolCreated, N> {
            self.event_filter::<NewEdgeStakingPoolCreated>()
        }
    }
}
