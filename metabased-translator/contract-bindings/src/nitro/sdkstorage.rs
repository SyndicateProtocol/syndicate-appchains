/**

Generated by the following Solidity interface...
```solidity
interface SdkStorage {
    function populate() external;
    function remove() external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "populate",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "remove",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod SdkStorage {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052348015600e575f5ffd5b506114628061001c5f395ff3fe608060405234801561000f575f5ffd5b5060043610610034575f3560e01c8063a7f4377914610038578063f809f20514610042575b5f5ffd5b61004061004a565b005b61004061042c565b6007805461005790611157565b159050610118576007805461006b81611157565b8061008457634e487b7160e01b5f52603160045260245ffd5b601f8111801561009b57600181146100bd5761010f565b6001826021036101000a0360018303925060028302848219161793505061010f565b835f5260205f2082602081146100fd5760205f19808601828104949094018054601f959095169092036101000a011990921682556001199094019361010c565b81545f835560ff1916603e1794505b50505b5050905561004a565b60106008805461012790611157565b905011156101e9576008805461013c81611157565b8061015557634e487b7160e01b5f52603160045260245ffd5b601f8111801561016c576001811461018e576101e0565b6001826021036101000a036001830392506002830284821916179350506101e0565b835f5260205f2082602081146101ce5760205f19808601828104949094018054601f959095169092036101000a01199092168255600119909401936101dd565b81545f835560ff1916603e1794505b50505b50509055610118565b60408051808201909152600f81527f7761736d2069732063757465203c330000000000000000000000000000000000602082015260099061022a90826111ef565b505b6005541561027a576005805480610245576102456112c8565b5f8281526020902060045f1990920191820401805467ffffffffffffffff600860038516026101000a0219169055905561022c565b600654600110156102b6576006805480610296576102966112c8565b600190038181905f5260205f20015f6102af9190610e6f565b905561027a565b5f5b60088110156102f1575f818152600a60205260409020805473ffffffffffffffffffffffffffffffffffffffff191690556001016102b8565b5060085f908152600a60209081527f2c1fd36ba11b13b555f58753742999069764391f450ca8727fe8a3eeffe67775805473ffffffffffffffffffffffffffffffffffffffff191690911790555b60048173ffffffffffffffffffffffffffffffffffffffff1610156103935773ffffffffffffffffffffffffffffffffffffffff81165f908152600b6020526040812061038b91610e91565b60010161033f565b5060048054806103a5576103a56112c8565b5f8281526020812060025f199390930192830201805465ffffffffffff19168155600101819055915560188190556019819055601a819055601b556103eb601c5f610eb3565b6103f6601d5f610ed1565b6021805465ffffffffffff199081169091555f60228190556023805483169055602481905560258054909216909155602655565b565b5f80547fffffffffffffffffffffff0000000000000000000000000000000000000000001661700117815560018054603073ffffffffffffffffffffffffffffffffffffffff199091161790556002805465ffffffffffff1916657fffffff002017905560406003555b60208167ffffffffffffffff16101561050d5760058054600180820183555f929092527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db06004820401805460039092166008026101000a67ffffffffffffffff818102199093169285160291909117905501610496565b50604d6005600781548110610524576105246112dc565b905f5260205f2090600491828204019190066008026101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505f5f90505b600a8110156106555760068167ffffffffffffffff8111156105865761058661118f565b6040519080825280602002602001820160405280156105af578160200160208202803683370190505b5081546001810183555f92835260209283902082516105d49491909201920190610f09565b505f5b8181101561064c5780600683815481106105f3576105f36112dc565b905f5260205f2001828154811061060c5761060c6112dc565b905f5260205f2090600691828204019190066005026101000a81548164ffffffffff021916908364ffffffffff16021790555080806001019150506105d7565b50600101610562565b505f5b600a811015610701575f5b818110156106f857600260068381548110610680576106806112dc565b905f5260205f20018281548110610699576106996112dc565b905f5260205f2090600691828204019190066005028282829054906101000a900464ffffffffff166106cb9190611304565b92506101000a81548164ffffffffff021916908364ffffffffff1602179055508080600101915050610663565b50600101610658565b505f5b601f8160ff16101561074a5760078160405160200161072492919061132b565b6040516020818303038152906040526007908161074191906111ef565b50600101610704565b505f5b60508160ff1610156107935760088160405160200161076d92919061132b565b6040516020818303038152906040526008908161078a91906111ef565b5060010161074d565b5060408051808201909152600f81527f617262697472756d207374796c7573000000000000000000000000000000000060208201526009906107d590826111ef565b505f5b6010811015610829575f818152600a60205260409020805473ffffffffffffffffffffffffffffffffffffffff191673ffffffffffffffffffffffffffffffffffffffff83161790556001016107d8565b505f5b60048173ffffffffffffffffffffffffffffffffffffffff16101561091357604080515f808252602080830180855273ffffffffffffffffffffffffffffffffffffffff86168352600b90915292902090516108889290610fb8565b505f5b8173ffffffffffffffffffffffffffffffffffffffff16811161090a5773ffffffffffffffffffffffffffffffffffffffff82165f908152600b60209081526040822080546001810182559083529181902090820401805460ff601f9093166101000a9283021916909117905580610902816113c8565b91505061088b565b5060010161082c565b505f5b60048160030b12156109a357600c80546001018082555f82905263ffffffff8316919082908110610949576109496112dc565b5f9182526020808320600386900b845291909101905260409020805473ffffffffffffffffffffffffffffffffffffffff191673ffffffffffffffffffffffffffffffffffffffff92909216919091179055600101610916565b505f5b60048160ff161015610a20576109bd8160016113e0565b7fff0000000000000000000000000000000000000000000000000000000000000060f883901b165f908152600d6020526040812060ff929092169190610a046002856113ff565b60ff1615815260208101919091526040015f20556001016109a6565b506040517f7374796c757300000000000000000000000000000000000000000000000000008152600290600e906006019081526040519081900360200190208154815461ffff19811661ffff9092169182178355835463ffffffff6201000091829004160265ffffffffffff199091169091171781556001918201549101555f5b6004811015610b495760048054600180820183555f92909252600280547f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b928202928301805461ffff90921661ffff19831681178255925465ffffffffffff19909216909217620100009182900463ffffffff169091021790556003547f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c9091015501610aa1565b5060408051808201909152600e81527f4c3220697320666f7220796f75210000000000000000000000000000000000006020820152601190610b8b90826111ef565b505f5b6005811015610bdf578060148160058110610bab57610bab6112dc565b600a91828204019190066003026101000a81548162ffffff021916908362ffffff1602179055508080600101915050610b8e565b505f5b6002811015610c40578060168160028110610bff57610bff6112dc565b01805473ffffffffffffffffffffffffffffffffffffffff191673ffffffffffffffffffffffffffffffffffffffff92909216919091179055600101610be2565b505f5b6004811015610ce8578060188160048110610c6057610c606112dc565b01805460ff191660ff9290921691909117905560188160048110610c8657610c866112dc565b0154610c969060ff1660016113e0565b60188260048110610ca957610ca96112dc565b01805460ff92909216610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909216919091179055600101610c43565b505f5b6003811015610d7a57610cfc611046565b5f5b6004811215610d2f5780828260048110610d1a57610d1a6112dc565b600b9290920b60209092020152600101610cfe565b50601c80546001810182555f91909152610d70906002027f0e4562a10381dec21b205ed72637e6b1b523bdd0e4d4d50af5cd23dd4500a21101826004611064565b5050600101610ceb565b505f5b6004811015610df8575f5b600481600b0b1215610def57601d8260048110610da757610da76112dc565b018054600180820183555f928352602090922060028204018054918316600c026101000a6bffffffffffffffffffffffff818102199093169285160291909117905501610d88565b50600101610d7d565b505f5b6003811015610e6c57600260218260038110610e1957610e196112dc565b825460029190910291909101805461ffff90921661ffff19831681178255835465ffffffffffff1990931617620100009283900463ffffffff169092029190911781556001918201549082015501610dfb565b50565b5080545f825560050160069004905f5260205f2090810190610e6c9190611108565b5080545f8255601f0160209004905f5260205f2090810190610e6c9190611108565b5080545f8255600202905f5260205f2090810190610e6c919061111c565b505f610edd8282611135565b506001015f610eec8282611135565b506001015f610efb8282611135565b5061042a906001015f611135565b828054828255905f5260205f2090600501600690048101928215610fa8579160200282015f5b83821115610f7557835183826101000a81548164ffffffffff021916908364ffffffffff1602179055509260200192600501602081600401049283019260010302610f2f565b8015610fa65782816101000a81549064ffffffffff0219169055600501602081600401049283019260010302610f75565b505b50610fb4929150611108565b5090565b828054828255905f5260205f2090601f01602090048101928215610fa8579160200282015f5b8382111561101a57835183826101000a81548160ff02191690831515021790555092602001926001016020815f01049283019260010302610fde565b8015610fa65782816101000a81549060ff02191690556001016020815f0104928301926001030261101a565b60405180608001604052806004906020820280368337509192915050565b600283019183908215610fa8579160200282015f5b838211156110d057835183826101000a8154816bffffffffffffffffffffffff0219169083600b0b6bffffffffffffffffffffffff1602179055509260200192600c01602081600b01049283019260010302611079565b8015610fa65782816101000a8154906bffffffffffffffffffffffff0219169055600c01602081600b010492830192600103026110d0565b5b80821115610fb4575f8155600101611109565b80821115610fb4575f808255600182015560020161111c565b5080545f825560010160029004905f5260205f2090810190610e6c9190611108565b600181811c9082168061116b57607f821691505b60208210810361118957634e487b7160e01b5f52602260045260245ffd5b50919050565b634e487b7160e01b5f52604160045260245ffd5b601f8211156111ea57805f5260205f20601f840160051c810160208510156111c85750805b601f840160051c820191505b818110156111e7575f81556001016111d4565b50505b505050565b815167ffffffffffffffff8111156112095761120961118f565b61121d816112178454611157565b846111a3565b6020601f82116001811461124f575f83156112385750848201515b5f19600385901b1c1916600184901b1784556111e7565b5f848152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08516915b8281101561129c578785015182556020948501946001909201910161127c565b50848210156112b957868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b634e487b7160e01b5f52603160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b64ffffffffff8181168382160290811690818114611324576113246112f0565b5092915050565b5f5f845461133881611157565b60018216801561134f576001811461136457611391565b60ff1983168652811515820286019350611391565b875f5260205f205f5b838110156113895781548882015260019091019060200161136d565b505081860193505b50505060f89390931b7fff000000000000000000000000000000000000000000000000000000000000001683525050600101919050565b5f600182016113d9576113d96112f0565b5060010190565b60ff81811683821601908111156113f9576113f96112f0565b92915050565b5f60ff83168061141d57634e487b7160e01b5f52601260045260245ffd5b8060ff8416069150509291505056fea2646970667358221220fa6b4fb7c5fd766cf03ef80d7131a73af0dfb436b990966f1414c782b27ed57864736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15`\x0EW__\xFD[Pa\x14b\x80a\0\x1C_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\x004W_5`\xE0\x1C\x80c\xA7\xF47y\x14a\08W\x80c\xF8\t\xF2\x05\x14a\0BW[__\xFD[a\0@a\0JV[\0[a\0@a\x04,V[`\x07\x80Ta\0W\x90a\x11WV[\x15\x90Pa\x01\x18W`\x07\x80Ta\0k\x81a\x11WV[\x80a\0\x84WcNH{q`\xE0\x1B_R`1`\x04R`$_\xFD[`\x1F\x81\x11\x80\x15a\0\x9BW`\x01\x81\x14a\0\xBDWa\x01\x0FV[`\x01\x82`!\x03a\x01\0\n\x03`\x01\x83\x03\x92P`\x02\x83\x02\x84\x82\x19\x16\x17\x93PPa\x01\x0FV[\x83_R` _ \x82` \x81\x14a\0\xFDW` _\x19\x80\x86\x01\x82\x81\x04\x94\x90\x94\x01\x80T`\x1F\x95\x90\x95\x16\x90\x92\x03a\x01\0\n\x01\x19\x90\x92\x16\x82U`\x01\x19\x90\x94\x01\x93a\x01\x0CV[\x81T_\x83U`\xFF\x19\x16`>\x17\x94P[PP[PP\x90Ua\0JV[`\x10`\x08\x80Ta\x01'\x90a\x11WV[\x90P\x11\x15a\x01\xE9W`\x08\x80Ta\x01<\x81a\x11WV[\x80a\x01UWcNH{q`\xE0\x1B_R`1`\x04R`$_\xFD[`\x1F\x81\x11\x80\x15a\x01lW`\x01\x81\x14a\x01\x8EWa\x01\xE0V[`\x01\x82`!\x03a\x01\0\n\x03`\x01\x83\x03\x92P`\x02\x83\x02\x84\x82\x19\x16\x17\x93PPa\x01\xE0V[\x83_R` _ \x82` \x81\x14a\x01\xCEW` _\x19\x80\x86\x01\x82\x81\x04\x94\x90\x94\x01\x80T`\x1F\x95\x90\x95\x16\x90\x92\x03a\x01\0\n\x01\x19\x90\x92\x16\x82U`\x01\x19\x90\x94\x01\x93a\x01\xDDV[\x81T_\x83U`\xFF\x19\x16`>\x17\x94P[PP[PP\x90Ua\x01\x18V[`@\x80Q\x80\x82\x01\x90\x91R`\x0F\x81R\x7Fwasm is cute <3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`\t\x90a\x02*\x90\x82a\x11\xEFV[P[`\x05T\x15a\x02zW`\x05\x80T\x80a\x02EWa\x02Ea\x12\xC8V[_\x82\x81R` \x90 `\x04_\x19\x90\x92\x01\x91\x82\x04\x01\x80Tg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x08`\x03\x85\x16\x02a\x01\0\n\x02\x19\x16\x90U\x90Ua\x02,V[`\x06T`\x01\x10\x15a\x02\xB6W`\x06\x80T\x80a\x02\x96Wa\x02\x96a\x12\xC8V[`\x01\x90\x03\x81\x81\x90_R` _ \x01_a\x02\xAF\x91\x90a\x0EoV[\x90Ua\x02zV[_[`\x08\x81\x10\x15a\x02\xF1W_\x81\x81R`\n` R`@\x90 \x80Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16\x90U`\x01\x01a\x02\xB8V[P`\x08_\x90\x81R`\n` \x90\x81R\x7F,\x1F\xD3k\xA1\x1B\x13\xB5U\xF5\x87St)\x99\x06\x97d9\x1FE\x0C\xA8r\x7F\xE8\xA3\xEE\xFF\xE6wu\x80Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16\x90\x91\x17\x90U[`\x04\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x10\x15a\x03\x93Ws\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16_\x90\x81R`\x0B` R`@\x81 a\x03\x8B\x91a\x0E\x91V[`\x01\x01a\x03?V[P`\x04\x80T\x80a\x03\xA5Wa\x03\xA5a\x12\xC8V[_\x82\x81R` \x81 `\x02_\x19\x93\x90\x93\x01\x92\x83\x02\x01\x80Te\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16\x81U`\x01\x01\x81\x90U\x91U`\x18\x81\x90U`\x19\x81\x90U`\x1A\x81\x90U`\x1BUa\x03\xEB`\x1C_a\x0E\xB3V[a\x03\xF6`\x1D_a\x0E\xD1V[`!\x80Te\xFF\xFF\xFF\xFF\xFF\xFF\x19\x90\x81\x16\x90\x91U_`\"\x81\x90U`#\x80T\x83\x16\x90U`$\x81\x90U`%\x80T\x90\x92\x16\x90\x91U`&UV[V[_\x80T\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16ap\x01\x17\x81U`\x01\x80T`0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x90\x91\x16\x17\x90U`\x02\x80Te\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16e\x7F\xFF\xFF\xFF\0 \x17\x90U`@`\x03U[` \x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x10\x15a\x05\rW`\x05\x80T`\x01\x80\x82\x01\x83U_\x92\x90\x92R\x7F\x03kc\x84\xB5\xEC\xA7\x91\xC6'a\x15-\x0Cy\xBB\x06\x04\xC1\x04\xA5\xFBoN\xB0p?1T\xBB=\xB0`\x04\x82\x04\x01\x80T`\x03\x90\x92\x16`\x08\x02a\x01\0\ng\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x81\x02\x19\x90\x93\x16\x92\x85\x16\x02\x91\x90\x91\x17\x90U\x01a\x04\x96V[P`M`\x05`\x07\x81T\x81\x10a\x05$Wa\x05$a\x12\xDCV[\x90_R` _ \x90`\x04\x91\x82\x82\x04\x01\x91\x90\x06`\x08\x02a\x01\0\n\x81T\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP__\x90P[`\n\x81\x10\x15a\x06UW`\x06\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x05\x86Wa\x05\x86a\x11\x8FV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x05\xAFW\x81` \x01` \x82\x02\x806\x837\x01\x90P[P\x81T`\x01\x81\x01\x83U_\x92\x83R` \x92\x83\x90 \x82Qa\x05\xD4\x94\x91\x90\x92\x01\x92\x01\x90a\x0F\tV[P_[\x81\x81\x10\x15a\x06LW\x80`\x06\x83\x81T\x81\x10a\x05\xF3Wa\x05\xF3a\x12\xDCV[\x90_R` _ \x01\x82\x81T\x81\x10a\x06\x0CWa\x06\x0Ca\x12\xDCV[\x90_R` _ \x90`\x06\x91\x82\x82\x04\x01\x91\x90\x06`\x05\x02a\x01\0\n\x81T\x81d\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83d\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP\x80\x80`\x01\x01\x91PPa\x05\xD7V[P`\x01\x01a\x05bV[P_[`\n\x81\x10\x15a\x07\x01W_[\x81\x81\x10\x15a\x06\xF8W`\x02`\x06\x83\x81T\x81\x10a\x06\x80Wa\x06\x80a\x12\xDCV[\x90_R` _ \x01\x82\x81T\x81\x10a\x06\x99Wa\x06\x99a\x12\xDCV[\x90_R` _ \x90`\x06\x91\x82\x82\x04\x01\x91\x90\x06`\x05\x02\x82\x82\x82\x90T\x90a\x01\0\n\x90\x04d\xFF\xFF\xFF\xFF\xFF\x16a\x06\xCB\x91\x90a\x13\x04V[\x92Pa\x01\0\n\x81T\x81d\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83d\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP\x80\x80`\x01\x01\x91PPa\x06cV[P`\x01\x01a\x06XV[P_[`\x1F\x81`\xFF\x16\x10\x15a\x07JW`\x07\x81`@Q` \x01a\x07$\x92\x91\x90a\x13+V[`@Q` \x81\x83\x03\x03\x81R\x90`@R`\x07\x90\x81a\x07A\x91\x90a\x11\xEFV[P`\x01\x01a\x07\x04V[P_[`P\x81`\xFF\x16\x10\x15a\x07\x93W`\x08\x81`@Q` \x01a\x07m\x92\x91\x90a\x13+V[`@Q` \x81\x83\x03\x03\x81R\x90`@R`\x08\x90\x81a\x07\x8A\x91\x90a\x11\xEFV[P`\x01\x01a\x07MV[P`@\x80Q\x80\x82\x01\x90\x91R`\x0F\x81R\x7Farbitrum stylus\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`\t\x90a\x07\xD5\x90\x82a\x11\xEFV[P_[`\x10\x81\x10\x15a\x08)W_\x81\x81R`\n` R`@\x90 \x80Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16\x17\x90U`\x01\x01a\x07\xD8V[P_[`\x04\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x10\x15a\t\x13W`@\x80Q_\x80\x82R` \x80\x83\x01\x80\x85Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x86\x16\x83R`\x0B\x90\x91R\x92\x90 \x90Qa\x08\x88\x92\x90a\x0F\xB8V[P_[\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81\x11a\t\nWs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16_\x90\x81R`\x0B` \x90\x81R`@\x82 \x80T`\x01\x81\x01\x82U\x90\x83R\x91\x81\x90 \x90\x82\x04\x01\x80T`\xFF`\x1F\x90\x93\x16a\x01\0\n\x92\x83\x02\x19\x16\x90\x91\x17\x90U\x80a\t\x02\x81a\x13\xC8V[\x91PPa\x08\x8BV[P`\x01\x01a\x08,V[P_[`\x04\x81`\x03\x0B\x12\x15a\t\xA3W`\x0C\x80T`\x01\x01\x80\x82U_\x82\x90Rc\xFF\xFF\xFF\xFF\x83\x16\x91\x90\x82\x90\x81\x10a\tIWa\tIa\x12\xDCV[_\x91\x82R` \x80\x83 `\x03\x86\x90\x0B\x84R\x91\x90\x91\x01\x90R`@\x90 \x80Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x92\x90\x92\x16\x91\x90\x91\x17\x90U`\x01\x01a\t\x16V[P_[`\x04\x81`\xFF\x16\x10\x15a\n Wa\t\xBD\x81`\x01a\x13\xE0V[\x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xF8\x83\x90\x1B\x16_\x90\x81R`\r` R`@\x81 `\xFF\x92\x90\x92\x16\x91\x90a\n\x04`\x02\x85a\x13\xFFV[`\xFF\x16\x15\x81R` \x81\x01\x91\x90\x91R`@\x01_ U`\x01\x01a\t\xA6V[P`@Q\x7Fstylus\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x02\x90`\x0E\x90`\x06\x01\x90\x81R`@Q\x90\x81\x90\x03` \x01\x90 \x81T\x81Ta\xFF\xFF\x19\x81\x16a\xFF\xFF\x90\x92\x16\x91\x82\x17\x83U\x83Tc\xFF\xFF\xFF\xFFb\x01\0\0\x91\x82\x90\x04\x16\x02e\xFF\xFF\xFF\xFF\xFF\xFF\x19\x90\x91\x16\x90\x91\x17\x17\x81U`\x01\x91\x82\x01T\x91\x01U_[`\x04\x81\x10\x15a\x0BIW`\x04\x80T`\x01\x80\x82\x01\x83U_\x92\x90\x92R`\x02\x80T\x7F\x8A5\xAC\xFB\xC1_\xF8\x1A9\xAE}4O\xD7\t\xF2\x8E\x86\0\xB4\xAA\x8Ce\xC6\xB6K\xFE\x7F\xE3k\xD1\x9B\x92\x82\x02\x92\x83\x01\x80Ta\xFF\xFF\x90\x92\x16a\xFF\xFF\x19\x83\x16\x81\x17\x82U\x92Te\xFF\xFF\xFF\xFF\xFF\xFF\x19\x90\x92\x16\x90\x92\x17b\x01\0\0\x91\x82\x90\x04c\xFF\xFF\xFF\xFF\x16\x90\x91\x02\x17\x90U`\x03T\x7F\x8A5\xAC\xFB\xC1_\xF8\x1A9\xAE}4O\xD7\t\xF2\x8E\x86\0\xB4\xAA\x8Ce\xC6\xB6K\xFE\x7F\xE3k\xD1\x9C\x90\x91\x01U\x01a\n\xA1V[P`@\x80Q\x80\x82\x01\x90\x91R`\x0E\x81R\x7FL2 is for you!\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`\x11\x90a\x0B\x8B\x90\x82a\x11\xEFV[P_[`\x05\x81\x10\x15a\x0B\xDFW\x80`\x14\x81`\x05\x81\x10a\x0B\xABWa\x0B\xABa\x12\xDCV[`\n\x91\x82\x82\x04\x01\x91\x90\x06`\x03\x02a\x01\0\n\x81T\x81b\xFF\xFF\xFF\x02\x19\x16\x90\x83b\xFF\xFF\xFF\x16\x02\x17\x90UP\x80\x80`\x01\x01\x91PPa\x0B\x8EV[P_[`\x02\x81\x10\x15a\x0C@W\x80`\x16\x81`\x02\x81\x10a\x0B\xFFWa\x0B\xFFa\x12\xDCV[\x01\x80Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x92\x90\x92\x16\x91\x90\x91\x17\x90U`\x01\x01a\x0B\xE2V[P_[`\x04\x81\x10\x15a\x0C\xE8W\x80`\x18\x81`\x04\x81\x10a\x0C`Wa\x0C`a\x12\xDCV[\x01\x80T`\xFF\x19\x16`\xFF\x92\x90\x92\x16\x91\x90\x91\x17\x90U`\x18\x81`\x04\x81\x10a\x0C\x86Wa\x0C\x86a\x12\xDCV[\x01Ta\x0C\x96\x90`\xFF\x16`\x01a\x13\xE0V[`\x18\x82`\x04\x81\x10a\x0C\xA9Wa\x0C\xA9a\x12\xDCV[\x01\x80T`\xFF\x92\x90\x92\x16a\x01\0\x02\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\xFF\x90\x92\x16\x91\x90\x91\x17\x90U`\x01\x01a\x0CCV[P_[`\x03\x81\x10\x15a\rzWa\x0C\xFCa\x10FV[_[`\x04\x81\x12\x15a\r/W\x80\x82\x82`\x04\x81\x10a\r\x1AWa\r\x1Aa\x12\xDCV[`\x0B\x92\x90\x92\x0B` \x90\x92\x02\x01R`\x01\x01a\x0C\xFEV[P`\x1C\x80T`\x01\x81\x01\x82U_\x91\x90\x91Ra\rp\x90`\x02\x02\x7F\x0EEb\xA1\x03\x81\xDE\xC2\x1B ^\xD7&7\xE6\xB1\xB5#\xBD\xD0\xE4\xD4\xD5\n\xF5\xCD#\xDDE\0\xA2\x11\x01\x82`\x04a\x10dV[PP`\x01\x01a\x0C\xEBV[P_[`\x04\x81\x10\x15a\r\xF8W_[`\x04\x81`\x0B\x0B\x12\x15a\r\xEFW`\x1D\x82`\x04\x81\x10a\r\xA7Wa\r\xA7a\x12\xDCV[\x01\x80T`\x01\x80\x82\x01\x83U_\x92\x83R` \x90\x92 `\x02\x82\x04\x01\x80T\x91\x83\x16`\x0C\x02a\x01\0\nk\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x81\x02\x19\x90\x93\x16\x92\x85\x16\x02\x91\x90\x91\x17\x90U\x01a\r\x88V[P`\x01\x01a\r}V[P_[`\x03\x81\x10\x15a\x0ElW`\x02`!\x82`\x03\x81\x10a\x0E\x19Wa\x0E\x19a\x12\xDCV[\x82T`\x02\x91\x90\x91\x02\x91\x90\x91\x01\x80Ta\xFF\xFF\x90\x92\x16a\xFF\xFF\x19\x83\x16\x81\x17\x82U\x83Te\xFF\xFF\xFF\xFF\xFF\xFF\x19\x90\x93\x16\x17b\x01\0\0\x92\x83\x90\x04c\xFF\xFF\xFF\xFF\x16\x90\x92\x02\x91\x90\x91\x17\x81U`\x01\x91\x82\x01T\x90\x82\x01U\x01a\r\xFBV[PV[P\x80T_\x82U`\x05\x01`\x06\x90\x04\x90_R` _ \x90\x81\x01\x90a\x0El\x91\x90a\x11\x08V[P\x80T_\x82U`\x1F\x01` \x90\x04\x90_R` _ \x90\x81\x01\x90a\x0El\x91\x90a\x11\x08V[P\x80T_\x82U`\x02\x02\x90_R` _ \x90\x81\x01\x90a\x0El\x91\x90a\x11\x1CV[P_a\x0E\xDD\x82\x82a\x115V[P`\x01\x01_a\x0E\xEC\x82\x82a\x115V[P`\x01\x01_a\x0E\xFB\x82\x82a\x115V[Pa\x04*\x90`\x01\x01_a\x115V[\x82\x80T\x82\x82U\x90_R` _ \x90`\x05\x01`\x06\x90\x04\x81\x01\x92\x82\x15a\x0F\xA8W\x91` \x02\x82\x01_[\x83\x82\x11\x15a\x0FuW\x83Q\x83\x82a\x01\0\n\x81T\x81d\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83d\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP\x92` \x01\x92`\x05\x01` \x81`\x04\x01\x04\x92\x83\x01\x92`\x01\x03\x02a\x0F/V[\x80\x15a\x0F\xA6W\x82\x81a\x01\0\n\x81T\x90d\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90U`\x05\x01` \x81`\x04\x01\x04\x92\x83\x01\x92`\x01\x03\x02a\x0FuV[P[Pa\x0F\xB4\x92\x91Pa\x11\x08V[P\x90V[\x82\x80T\x82\x82U\x90_R` _ \x90`\x1F\x01` \x90\x04\x81\x01\x92\x82\x15a\x0F\xA8W\x91` \x02\x82\x01_[\x83\x82\x11\x15a\x10\x1AW\x83Q\x83\x82a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x92` \x01\x92`\x01\x01` \x81_\x01\x04\x92\x83\x01\x92`\x01\x03\x02a\x0F\xDEV[\x80\x15a\x0F\xA6W\x82\x81a\x01\0\n\x81T\x90`\xFF\x02\x19\x16\x90U`\x01\x01` \x81_\x01\x04\x92\x83\x01\x92`\x01\x03\x02a\x10\x1AV[`@Q\x80`\x80\x01`@R\x80`\x04\x90` \x82\x02\x806\x837P\x91\x92\x91PPV[`\x02\x83\x01\x91\x83\x90\x82\x15a\x0F\xA8W\x91` \x02\x82\x01_[\x83\x82\x11\x15a\x10\xD0W\x83Q\x83\x82a\x01\0\n\x81T\x81k\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83`\x0B\x0Bk\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP\x92` \x01\x92`\x0C\x01` \x81`\x0B\x01\x04\x92\x83\x01\x92`\x01\x03\x02a\x10yV[\x80\x15a\x0F\xA6W\x82\x81a\x01\0\n\x81T\x90k\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90U`\x0C\x01` \x81`\x0B\x01\x04\x92\x83\x01\x92`\x01\x03\x02a\x10\xD0V[[\x80\x82\x11\x15a\x0F\xB4W_\x81U`\x01\x01a\x11\tV[\x80\x82\x11\x15a\x0F\xB4W_\x80\x82U`\x01\x82\x01U`\x02\x01a\x11\x1CV[P\x80T_\x82U`\x01\x01`\x02\x90\x04\x90_R` _ \x90\x81\x01\x90a\x0El\x91\x90a\x11\x08V[`\x01\x81\x81\x1C\x90\x82\x16\x80a\x11kW`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a\x11\x89WcNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[P\x91\x90PV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`\x1F\x82\x11\x15a\x11\xEAW\x80_R` _ `\x1F\x84\x01`\x05\x1C\x81\x01` \x85\x10\x15a\x11\xC8WP\x80[`\x1F\x84\x01`\x05\x1C\x82\x01\x91P[\x81\x81\x10\x15a\x11\xE7W_\x81U`\x01\x01a\x11\xD4V[PP[PPPV[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x12\tWa\x12\ta\x11\x8FV[a\x12\x1D\x81a\x12\x17\x84Ta\x11WV[\x84a\x11\xA3V[` `\x1F\x82\x11`\x01\x81\x14a\x12OW_\x83\x15a\x128WP\x84\x82\x01Q[_\x19`\x03\x85\x90\x1B\x1C\x19\x16`\x01\x84\x90\x1B\x17\x84Ua\x11\xE7V[_\x84\x81R` \x81 \x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x85\x16\x91[\x82\x81\x10\x15a\x12\x9CW\x87\x85\x01Q\x82U` \x94\x85\x01\x94`\x01\x90\x92\x01\x91\x01a\x12|V[P\x84\x82\x10\x15a\x12\xB9W\x86\x84\x01Q_\x19`\x03\x87\x90\x1B`\xF8\x16\x1C\x19\x16\x81U[PPPP`\x01\x90\x81\x1B\x01\x90UPV[cNH{q`\xE0\x1B_R`1`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[d\xFF\xFF\xFF\xFF\xFF\x81\x81\x16\x83\x82\x16\x02\x90\x81\x16\x90\x81\x81\x14a\x13$Wa\x13$a\x12\xF0V[P\x92\x91PPV[__\x84Ta\x138\x81a\x11WV[`\x01\x82\x16\x80\x15a\x13OW`\x01\x81\x14a\x13dWa\x13\x91V[`\xFF\x19\x83\x16\x86R\x81\x15\x15\x82\x02\x86\x01\x93Pa\x13\x91V[\x87_R` _ _[\x83\x81\x10\x15a\x13\x89W\x81T\x88\x82\x01R`\x01\x90\x91\x01\x90` \x01a\x13mV[PP\x81\x86\x01\x93P[PPP`\xF8\x93\x90\x93\x1B\x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x83RPP`\x01\x01\x91\x90PV[_`\x01\x82\x01a\x13\xD9Wa\x13\xD9a\x12\xF0V[P`\x01\x01\x90V[`\xFF\x81\x81\x16\x83\x82\x16\x01\x90\x81\x11\x15a\x13\xF9Wa\x13\xF9a\x12\xF0V[\x92\x91PPV[_`\xFF\x83\x16\x80a\x14\x1DWcNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[\x80`\xFF\x84\x16\x06\x91PP\x92\x91PPV\xFE\xA2dipfsX\"\x12 \xFAkO\xB7\xC5\xFDvl\xF0>\xF8\rq1\xA7:\xF0\xDF\xB46\xB9\x90\x96o\x14\x14\xC7\x82\xB2~\xD5xdsolcC\0\x08\x1C\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\x004W_5`\xE0\x1C\x80c\xA7\xF47y\x14a\08W\x80c\xF8\t\xF2\x05\x14a\0BW[__\xFD[a\0@a\0JV[\0[a\0@a\x04,V[`\x07\x80Ta\0W\x90a\x11WV[\x15\x90Pa\x01\x18W`\x07\x80Ta\0k\x81a\x11WV[\x80a\0\x84WcNH{q`\xE0\x1B_R`1`\x04R`$_\xFD[`\x1F\x81\x11\x80\x15a\0\x9BW`\x01\x81\x14a\0\xBDWa\x01\x0FV[`\x01\x82`!\x03a\x01\0\n\x03`\x01\x83\x03\x92P`\x02\x83\x02\x84\x82\x19\x16\x17\x93PPa\x01\x0FV[\x83_R` _ \x82` \x81\x14a\0\xFDW` _\x19\x80\x86\x01\x82\x81\x04\x94\x90\x94\x01\x80T`\x1F\x95\x90\x95\x16\x90\x92\x03a\x01\0\n\x01\x19\x90\x92\x16\x82U`\x01\x19\x90\x94\x01\x93a\x01\x0CV[\x81T_\x83U`\xFF\x19\x16`>\x17\x94P[PP[PP\x90Ua\0JV[`\x10`\x08\x80Ta\x01'\x90a\x11WV[\x90P\x11\x15a\x01\xE9W`\x08\x80Ta\x01<\x81a\x11WV[\x80a\x01UWcNH{q`\xE0\x1B_R`1`\x04R`$_\xFD[`\x1F\x81\x11\x80\x15a\x01lW`\x01\x81\x14a\x01\x8EWa\x01\xE0V[`\x01\x82`!\x03a\x01\0\n\x03`\x01\x83\x03\x92P`\x02\x83\x02\x84\x82\x19\x16\x17\x93PPa\x01\xE0V[\x83_R` _ \x82` \x81\x14a\x01\xCEW` _\x19\x80\x86\x01\x82\x81\x04\x94\x90\x94\x01\x80T`\x1F\x95\x90\x95\x16\x90\x92\x03a\x01\0\n\x01\x19\x90\x92\x16\x82U`\x01\x19\x90\x94\x01\x93a\x01\xDDV[\x81T_\x83U`\xFF\x19\x16`>\x17\x94P[PP[PP\x90Ua\x01\x18V[`@\x80Q\x80\x82\x01\x90\x91R`\x0F\x81R\x7Fwasm is cute <3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`\t\x90a\x02*\x90\x82a\x11\xEFV[P[`\x05T\x15a\x02zW`\x05\x80T\x80a\x02EWa\x02Ea\x12\xC8V[_\x82\x81R` \x90 `\x04_\x19\x90\x92\x01\x91\x82\x04\x01\x80Tg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x08`\x03\x85\x16\x02a\x01\0\n\x02\x19\x16\x90U\x90Ua\x02,V[`\x06T`\x01\x10\x15a\x02\xB6W`\x06\x80T\x80a\x02\x96Wa\x02\x96a\x12\xC8V[`\x01\x90\x03\x81\x81\x90_R` _ \x01_a\x02\xAF\x91\x90a\x0EoV[\x90Ua\x02zV[_[`\x08\x81\x10\x15a\x02\xF1W_\x81\x81R`\n` R`@\x90 \x80Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16\x90U`\x01\x01a\x02\xB8V[P`\x08_\x90\x81R`\n` \x90\x81R\x7F,\x1F\xD3k\xA1\x1B\x13\xB5U\xF5\x87St)\x99\x06\x97d9\x1FE\x0C\xA8r\x7F\xE8\xA3\xEE\xFF\xE6wu\x80Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16\x90\x91\x17\x90U[`\x04\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x10\x15a\x03\x93Ws\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16_\x90\x81R`\x0B` R`@\x81 a\x03\x8B\x91a\x0E\x91V[`\x01\x01a\x03?V[P`\x04\x80T\x80a\x03\xA5Wa\x03\xA5a\x12\xC8V[_\x82\x81R` \x81 `\x02_\x19\x93\x90\x93\x01\x92\x83\x02\x01\x80Te\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16\x81U`\x01\x01\x81\x90U\x91U`\x18\x81\x90U`\x19\x81\x90U`\x1A\x81\x90U`\x1BUa\x03\xEB`\x1C_a\x0E\xB3V[a\x03\xF6`\x1D_a\x0E\xD1V[`!\x80Te\xFF\xFF\xFF\xFF\xFF\xFF\x19\x90\x81\x16\x90\x91U_`\"\x81\x90U`#\x80T\x83\x16\x90U`$\x81\x90U`%\x80T\x90\x92\x16\x90\x91U`&UV[V[_\x80T\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16ap\x01\x17\x81U`\x01\x80T`0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x90\x91\x16\x17\x90U`\x02\x80Te\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16e\x7F\xFF\xFF\xFF\0 \x17\x90U`@`\x03U[` \x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x10\x15a\x05\rW`\x05\x80T`\x01\x80\x82\x01\x83U_\x92\x90\x92R\x7F\x03kc\x84\xB5\xEC\xA7\x91\xC6'a\x15-\x0Cy\xBB\x06\x04\xC1\x04\xA5\xFBoN\xB0p?1T\xBB=\xB0`\x04\x82\x04\x01\x80T`\x03\x90\x92\x16`\x08\x02a\x01\0\ng\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x81\x02\x19\x90\x93\x16\x92\x85\x16\x02\x91\x90\x91\x17\x90U\x01a\x04\x96V[P`M`\x05`\x07\x81T\x81\x10a\x05$Wa\x05$a\x12\xDCV[\x90_R` _ \x90`\x04\x91\x82\x82\x04\x01\x91\x90\x06`\x08\x02a\x01\0\n\x81T\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP__\x90P[`\n\x81\x10\x15a\x06UW`\x06\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x05\x86Wa\x05\x86a\x11\x8FV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x05\xAFW\x81` \x01` \x82\x02\x806\x837\x01\x90P[P\x81T`\x01\x81\x01\x83U_\x92\x83R` \x92\x83\x90 \x82Qa\x05\xD4\x94\x91\x90\x92\x01\x92\x01\x90a\x0F\tV[P_[\x81\x81\x10\x15a\x06LW\x80`\x06\x83\x81T\x81\x10a\x05\xF3Wa\x05\xF3a\x12\xDCV[\x90_R` _ \x01\x82\x81T\x81\x10a\x06\x0CWa\x06\x0Ca\x12\xDCV[\x90_R` _ \x90`\x06\x91\x82\x82\x04\x01\x91\x90\x06`\x05\x02a\x01\0\n\x81T\x81d\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83d\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP\x80\x80`\x01\x01\x91PPa\x05\xD7V[P`\x01\x01a\x05bV[P_[`\n\x81\x10\x15a\x07\x01W_[\x81\x81\x10\x15a\x06\xF8W`\x02`\x06\x83\x81T\x81\x10a\x06\x80Wa\x06\x80a\x12\xDCV[\x90_R` _ \x01\x82\x81T\x81\x10a\x06\x99Wa\x06\x99a\x12\xDCV[\x90_R` _ \x90`\x06\x91\x82\x82\x04\x01\x91\x90\x06`\x05\x02\x82\x82\x82\x90T\x90a\x01\0\n\x90\x04d\xFF\xFF\xFF\xFF\xFF\x16a\x06\xCB\x91\x90a\x13\x04V[\x92Pa\x01\0\n\x81T\x81d\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83d\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP\x80\x80`\x01\x01\x91PPa\x06cV[P`\x01\x01a\x06XV[P_[`\x1F\x81`\xFF\x16\x10\x15a\x07JW`\x07\x81`@Q` \x01a\x07$\x92\x91\x90a\x13+V[`@Q` \x81\x83\x03\x03\x81R\x90`@R`\x07\x90\x81a\x07A\x91\x90a\x11\xEFV[P`\x01\x01a\x07\x04V[P_[`P\x81`\xFF\x16\x10\x15a\x07\x93W`\x08\x81`@Q` \x01a\x07m\x92\x91\x90a\x13+V[`@Q` \x81\x83\x03\x03\x81R\x90`@R`\x08\x90\x81a\x07\x8A\x91\x90a\x11\xEFV[P`\x01\x01a\x07MV[P`@\x80Q\x80\x82\x01\x90\x91R`\x0F\x81R\x7Farbitrum stylus\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`\t\x90a\x07\xD5\x90\x82a\x11\xEFV[P_[`\x10\x81\x10\x15a\x08)W_\x81\x81R`\n` R`@\x90 \x80Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16\x17\x90U`\x01\x01a\x07\xD8V[P_[`\x04\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x10\x15a\t\x13W`@\x80Q_\x80\x82R` \x80\x83\x01\x80\x85Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x86\x16\x83R`\x0B\x90\x91R\x92\x90 \x90Qa\x08\x88\x92\x90a\x0F\xB8V[P_[\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81\x11a\t\nWs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16_\x90\x81R`\x0B` \x90\x81R`@\x82 \x80T`\x01\x81\x01\x82U\x90\x83R\x91\x81\x90 \x90\x82\x04\x01\x80T`\xFF`\x1F\x90\x93\x16a\x01\0\n\x92\x83\x02\x19\x16\x90\x91\x17\x90U\x80a\t\x02\x81a\x13\xC8V[\x91PPa\x08\x8BV[P`\x01\x01a\x08,V[P_[`\x04\x81`\x03\x0B\x12\x15a\t\xA3W`\x0C\x80T`\x01\x01\x80\x82U_\x82\x90Rc\xFF\xFF\xFF\xFF\x83\x16\x91\x90\x82\x90\x81\x10a\tIWa\tIa\x12\xDCV[_\x91\x82R` \x80\x83 `\x03\x86\x90\x0B\x84R\x91\x90\x91\x01\x90R`@\x90 \x80Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x92\x90\x92\x16\x91\x90\x91\x17\x90U`\x01\x01a\t\x16V[P_[`\x04\x81`\xFF\x16\x10\x15a\n Wa\t\xBD\x81`\x01a\x13\xE0V[\x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xF8\x83\x90\x1B\x16_\x90\x81R`\r` R`@\x81 `\xFF\x92\x90\x92\x16\x91\x90a\n\x04`\x02\x85a\x13\xFFV[`\xFF\x16\x15\x81R` \x81\x01\x91\x90\x91R`@\x01_ U`\x01\x01a\t\xA6V[P`@Q\x7Fstylus\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x02\x90`\x0E\x90`\x06\x01\x90\x81R`@Q\x90\x81\x90\x03` \x01\x90 \x81T\x81Ta\xFF\xFF\x19\x81\x16a\xFF\xFF\x90\x92\x16\x91\x82\x17\x83U\x83Tc\xFF\xFF\xFF\xFFb\x01\0\0\x91\x82\x90\x04\x16\x02e\xFF\xFF\xFF\xFF\xFF\xFF\x19\x90\x91\x16\x90\x91\x17\x17\x81U`\x01\x91\x82\x01T\x91\x01U_[`\x04\x81\x10\x15a\x0BIW`\x04\x80T`\x01\x80\x82\x01\x83U_\x92\x90\x92R`\x02\x80T\x7F\x8A5\xAC\xFB\xC1_\xF8\x1A9\xAE}4O\xD7\t\xF2\x8E\x86\0\xB4\xAA\x8Ce\xC6\xB6K\xFE\x7F\xE3k\xD1\x9B\x92\x82\x02\x92\x83\x01\x80Ta\xFF\xFF\x90\x92\x16a\xFF\xFF\x19\x83\x16\x81\x17\x82U\x92Te\xFF\xFF\xFF\xFF\xFF\xFF\x19\x90\x92\x16\x90\x92\x17b\x01\0\0\x91\x82\x90\x04c\xFF\xFF\xFF\xFF\x16\x90\x91\x02\x17\x90U`\x03T\x7F\x8A5\xAC\xFB\xC1_\xF8\x1A9\xAE}4O\xD7\t\xF2\x8E\x86\0\xB4\xAA\x8Ce\xC6\xB6K\xFE\x7F\xE3k\xD1\x9C\x90\x91\x01U\x01a\n\xA1V[P`@\x80Q\x80\x82\x01\x90\x91R`\x0E\x81R\x7FL2 is for you!\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`\x11\x90a\x0B\x8B\x90\x82a\x11\xEFV[P_[`\x05\x81\x10\x15a\x0B\xDFW\x80`\x14\x81`\x05\x81\x10a\x0B\xABWa\x0B\xABa\x12\xDCV[`\n\x91\x82\x82\x04\x01\x91\x90\x06`\x03\x02a\x01\0\n\x81T\x81b\xFF\xFF\xFF\x02\x19\x16\x90\x83b\xFF\xFF\xFF\x16\x02\x17\x90UP\x80\x80`\x01\x01\x91PPa\x0B\x8EV[P_[`\x02\x81\x10\x15a\x0C@W\x80`\x16\x81`\x02\x81\x10a\x0B\xFFWa\x0B\xFFa\x12\xDCV[\x01\x80Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x92\x90\x92\x16\x91\x90\x91\x17\x90U`\x01\x01a\x0B\xE2V[P_[`\x04\x81\x10\x15a\x0C\xE8W\x80`\x18\x81`\x04\x81\x10a\x0C`Wa\x0C`a\x12\xDCV[\x01\x80T`\xFF\x19\x16`\xFF\x92\x90\x92\x16\x91\x90\x91\x17\x90U`\x18\x81`\x04\x81\x10a\x0C\x86Wa\x0C\x86a\x12\xDCV[\x01Ta\x0C\x96\x90`\xFF\x16`\x01a\x13\xE0V[`\x18\x82`\x04\x81\x10a\x0C\xA9Wa\x0C\xA9a\x12\xDCV[\x01\x80T`\xFF\x92\x90\x92\x16a\x01\0\x02\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\xFF\x90\x92\x16\x91\x90\x91\x17\x90U`\x01\x01a\x0CCV[P_[`\x03\x81\x10\x15a\rzWa\x0C\xFCa\x10FV[_[`\x04\x81\x12\x15a\r/W\x80\x82\x82`\x04\x81\x10a\r\x1AWa\r\x1Aa\x12\xDCV[`\x0B\x92\x90\x92\x0B` \x90\x92\x02\x01R`\x01\x01a\x0C\xFEV[P`\x1C\x80T`\x01\x81\x01\x82U_\x91\x90\x91Ra\rp\x90`\x02\x02\x7F\x0EEb\xA1\x03\x81\xDE\xC2\x1B ^\xD7&7\xE6\xB1\xB5#\xBD\xD0\xE4\xD4\xD5\n\xF5\xCD#\xDDE\0\xA2\x11\x01\x82`\x04a\x10dV[PP`\x01\x01a\x0C\xEBV[P_[`\x04\x81\x10\x15a\r\xF8W_[`\x04\x81`\x0B\x0B\x12\x15a\r\xEFW`\x1D\x82`\x04\x81\x10a\r\xA7Wa\r\xA7a\x12\xDCV[\x01\x80T`\x01\x80\x82\x01\x83U_\x92\x83R` \x90\x92 `\x02\x82\x04\x01\x80T\x91\x83\x16`\x0C\x02a\x01\0\nk\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x81\x02\x19\x90\x93\x16\x92\x85\x16\x02\x91\x90\x91\x17\x90U\x01a\r\x88V[P`\x01\x01a\r}V[P_[`\x03\x81\x10\x15a\x0ElW`\x02`!\x82`\x03\x81\x10a\x0E\x19Wa\x0E\x19a\x12\xDCV[\x82T`\x02\x91\x90\x91\x02\x91\x90\x91\x01\x80Ta\xFF\xFF\x90\x92\x16a\xFF\xFF\x19\x83\x16\x81\x17\x82U\x83Te\xFF\xFF\xFF\xFF\xFF\xFF\x19\x90\x93\x16\x17b\x01\0\0\x92\x83\x90\x04c\xFF\xFF\xFF\xFF\x16\x90\x92\x02\x91\x90\x91\x17\x81U`\x01\x91\x82\x01T\x90\x82\x01U\x01a\r\xFBV[PV[P\x80T_\x82U`\x05\x01`\x06\x90\x04\x90_R` _ \x90\x81\x01\x90a\x0El\x91\x90a\x11\x08V[P\x80T_\x82U`\x1F\x01` \x90\x04\x90_R` _ \x90\x81\x01\x90a\x0El\x91\x90a\x11\x08V[P\x80T_\x82U`\x02\x02\x90_R` _ \x90\x81\x01\x90a\x0El\x91\x90a\x11\x1CV[P_a\x0E\xDD\x82\x82a\x115V[P`\x01\x01_a\x0E\xEC\x82\x82a\x115V[P`\x01\x01_a\x0E\xFB\x82\x82a\x115V[Pa\x04*\x90`\x01\x01_a\x115V[\x82\x80T\x82\x82U\x90_R` _ \x90`\x05\x01`\x06\x90\x04\x81\x01\x92\x82\x15a\x0F\xA8W\x91` \x02\x82\x01_[\x83\x82\x11\x15a\x0FuW\x83Q\x83\x82a\x01\0\n\x81T\x81d\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83d\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP\x92` \x01\x92`\x05\x01` \x81`\x04\x01\x04\x92\x83\x01\x92`\x01\x03\x02a\x0F/V[\x80\x15a\x0F\xA6W\x82\x81a\x01\0\n\x81T\x90d\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90U`\x05\x01` \x81`\x04\x01\x04\x92\x83\x01\x92`\x01\x03\x02a\x0FuV[P[Pa\x0F\xB4\x92\x91Pa\x11\x08V[P\x90V[\x82\x80T\x82\x82U\x90_R` _ \x90`\x1F\x01` \x90\x04\x81\x01\x92\x82\x15a\x0F\xA8W\x91` \x02\x82\x01_[\x83\x82\x11\x15a\x10\x1AW\x83Q\x83\x82a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x92` \x01\x92`\x01\x01` \x81_\x01\x04\x92\x83\x01\x92`\x01\x03\x02a\x0F\xDEV[\x80\x15a\x0F\xA6W\x82\x81a\x01\0\n\x81T\x90`\xFF\x02\x19\x16\x90U`\x01\x01` \x81_\x01\x04\x92\x83\x01\x92`\x01\x03\x02a\x10\x1AV[`@Q\x80`\x80\x01`@R\x80`\x04\x90` \x82\x02\x806\x837P\x91\x92\x91PPV[`\x02\x83\x01\x91\x83\x90\x82\x15a\x0F\xA8W\x91` \x02\x82\x01_[\x83\x82\x11\x15a\x10\xD0W\x83Q\x83\x82a\x01\0\n\x81T\x81k\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83`\x0B\x0Bk\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP\x92` \x01\x92`\x0C\x01` \x81`\x0B\x01\x04\x92\x83\x01\x92`\x01\x03\x02a\x10yV[\x80\x15a\x0F\xA6W\x82\x81a\x01\0\n\x81T\x90k\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90U`\x0C\x01` \x81`\x0B\x01\x04\x92\x83\x01\x92`\x01\x03\x02a\x10\xD0V[[\x80\x82\x11\x15a\x0F\xB4W_\x81U`\x01\x01a\x11\tV[\x80\x82\x11\x15a\x0F\xB4W_\x80\x82U`\x01\x82\x01U`\x02\x01a\x11\x1CV[P\x80T_\x82U`\x01\x01`\x02\x90\x04\x90_R` _ \x90\x81\x01\x90a\x0El\x91\x90a\x11\x08V[`\x01\x81\x81\x1C\x90\x82\x16\x80a\x11kW`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a\x11\x89WcNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[P\x91\x90PV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`\x1F\x82\x11\x15a\x11\xEAW\x80_R` _ `\x1F\x84\x01`\x05\x1C\x81\x01` \x85\x10\x15a\x11\xC8WP\x80[`\x1F\x84\x01`\x05\x1C\x82\x01\x91P[\x81\x81\x10\x15a\x11\xE7W_\x81U`\x01\x01a\x11\xD4V[PP[PPPV[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x12\tWa\x12\ta\x11\x8FV[a\x12\x1D\x81a\x12\x17\x84Ta\x11WV[\x84a\x11\xA3V[` `\x1F\x82\x11`\x01\x81\x14a\x12OW_\x83\x15a\x128WP\x84\x82\x01Q[_\x19`\x03\x85\x90\x1B\x1C\x19\x16`\x01\x84\x90\x1B\x17\x84Ua\x11\xE7V[_\x84\x81R` \x81 \x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x85\x16\x91[\x82\x81\x10\x15a\x12\x9CW\x87\x85\x01Q\x82U` \x94\x85\x01\x94`\x01\x90\x92\x01\x91\x01a\x12|V[P\x84\x82\x10\x15a\x12\xB9W\x86\x84\x01Q_\x19`\x03\x87\x90\x1B`\xF8\x16\x1C\x19\x16\x81U[PPPP`\x01\x90\x81\x1B\x01\x90UPV[cNH{q`\xE0\x1B_R`1`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[d\xFF\xFF\xFF\xFF\xFF\x81\x81\x16\x83\x82\x16\x02\x90\x81\x16\x90\x81\x81\x14a\x13$Wa\x13$a\x12\xF0V[P\x92\x91PPV[__\x84Ta\x138\x81a\x11WV[`\x01\x82\x16\x80\x15a\x13OW`\x01\x81\x14a\x13dWa\x13\x91V[`\xFF\x19\x83\x16\x86R\x81\x15\x15\x82\x02\x86\x01\x93Pa\x13\x91V[\x87_R` _ _[\x83\x81\x10\x15a\x13\x89W\x81T\x88\x82\x01R`\x01\x90\x91\x01\x90` \x01a\x13mV[PP\x81\x86\x01\x93P[PPP`\xF8\x93\x90\x93\x1B\x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x83RPP`\x01\x01\x91\x90PV[_`\x01\x82\x01a\x13\xD9Wa\x13\xD9a\x12\xF0V[P`\x01\x01\x90V[`\xFF\x81\x81\x16\x83\x82\x16\x01\x90\x81\x11\x15a\x13\xF9Wa\x13\xF9a\x12\xF0V[\x92\x91PPV[_`\xFF\x83\x16\x80a\x14\x1DWcNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[\x80`\xFF\x84\x16\x06\x91PP\x92\x91PPV\xFE\xA2dipfsX\"\x12 \xFAkO\xB7\xC5\xFDvl\xF0>\xF8\rq1\xA7:\xF0\xDF\xB46\xB9\x90\x96o\x14\x14\xC7\x82\xB2~\xD5xdsolcC\0\x08\x1C\x003",
    );
    /**Function with signature `populate()` and selector `0xf809f205`.
```solidity
function populate() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct populateCall {}
    ///Container type for the return parameters of the [`populate()`](populateCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct populateReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<populateCall> for UnderlyingRustTuple<'_> {
                fn from(value: populateCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for populateCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<populateReturn> for UnderlyingRustTuple<'_> {
                fn from(value: populateReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for populateReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for populateCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = populateReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "populate()";
            const SELECTOR: [u8; 4] = [248u8, 9u8, 242u8, 5u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `remove()` and selector `0xa7f43779`.
```solidity
function remove() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct removeCall {}
    ///Container type for the return parameters of the [`remove()`](removeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct removeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<removeCall> for UnderlyingRustTuple<'_> {
                fn from(value: removeCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for removeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<removeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: removeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for removeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for removeCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = removeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "remove()";
            const SELECTOR: [u8; 4] = [167u8, 244u8, 55u8, 121u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`SdkStorage`](self) function calls.
    pub enum SdkStorageCalls {
        #[allow(missing_docs)]
        populate(populateCall),
        #[allow(missing_docs)]
        remove(removeCall),
    }
    #[automatically_derived]
    impl SdkStorageCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [167u8, 244u8, 55u8, 121u8],
            [248u8, 9u8, 242u8, 5u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for SdkStorageCalls {
        const NAME: &'static str = "SdkStorageCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 2usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::populate(_) => <populateCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::remove(_) => <removeCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<SdkStorageCalls>] = &[
                {
                    fn remove(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SdkStorageCalls> {
                        <removeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SdkStorageCalls::remove)
                    }
                    remove
                },
                {
                    fn populate(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SdkStorageCalls> {
                        <populateCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SdkStorageCalls::populate)
                    }
                    populate
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::populate(inner) => {
                    <populateCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::remove(inner) => {
                    <removeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::populate(inner) => {
                    <populateCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::remove(inner) => {
                    <removeCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`SdkStorage`](self) contract instance.

See the [wrapper's documentation](`SdkStorageInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> SdkStorageInstance<T, P, N> {
        SdkStorageInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<SdkStorageInstance<T, P, N>>,
    > {
        SdkStorageInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        SdkStorageInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`SdkStorage`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`SdkStorage`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct SdkStorageInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for SdkStorageInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("SdkStorageInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SdkStorageInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`SdkStorage`](self) contract instance.

See the [wrapper's documentation](`SdkStorageInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<SdkStorageInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> SdkStorageInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> SdkStorageInstance<T, P, N> {
            SdkStorageInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SdkStorageInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`populate`] function.
        pub fn populate(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, populateCall, N> {
            self.call_builder(&populateCall {})
        }
        ///Creates a new call builder for the [`remove`] function.
        pub fn remove(&self) -> alloy_contract::SolCallBuilder<T, &P, removeCall, N> {
            self.call_builder(&removeCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SdkStorageInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
