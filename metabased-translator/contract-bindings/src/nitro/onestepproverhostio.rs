/**

Generated by the following Solidity interface...
```solidity
interface OneStepProverHostIo {
    type MachineStatus is uint8;
    type ValueType is uint8;
    struct ExecutionContext {
        uint256 maxInboxMessagesRead;
        address bridge;
        bytes32 initialWasmModuleRoot;
    }
    struct Instruction {
        uint16 opcode;
        uint256 argumentData;
    }
    struct Machine {
        MachineStatus status;
        ValueStack valueStack;
        MultiStack valueMultiStack;
        ValueStack internalStack;
        StackFrameWindow frameStack;
        MultiStack frameMultiStack;
        bytes32 globalStateHash;
        uint32 moduleIdx;
        uint32 functionIdx;
        uint32 functionPc;
        bytes32 recoveryPc;
        bytes32 modulesRoot;
    }
    struct Module {
        bytes32 globalsMerkleRoot;
        ModuleMemory moduleMemory;
        bytes32 tablesMerkleRoot;
        bytes32 functionsMerkleRoot;
        bytes32 extraHash;
        uint32 internalsOffset;
    }
    struct ModuleMemory {
        uint64 size;
        uint64 maxSize;
        bytes32 merkleRoot;
    }
    struct MultiStack {
        bytes32 inactiveStackHash;
        bytes32 remainingHash;
    }
    struct StackFrame {
        Value returnPc;
        bytes32 localsMerkleRoot;
        uint32 callerModule;
        uint32 callerModuleInternals;
    }
    struct StackFrameWindow {
        StackFrame[] proved;
        bytes32 remainingHash;
    }
    struct Value {
        ValueType valueType;
        uint256 contents;
    }
    struct ValueArray {
        Value[] inner;
    }
    struct ValueStack {
        ValueArray proved;
        bytes32 remainingHash;
    }

    function executeOneStep(ExecutionContext memory execCtx, Machine memory startMach, Module memory startMod, Instruction memory inst, bytes memory proof) external view returns (Machine memory mach, Module memory mod);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "executeOneStep",
    "inputs": [
      {
        "name": "execCtx",
        "type": "tuple",
        "internalType": "struct ExecutionContext",
        "components": [
          {
            "name": "maxInboxMessagesRead",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "bridge",
            "type": "address",
            "internalType": "contract IBridge"
          },
          {
            "name": "initialWasmModuleRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          }
        ]
      },
      {
        "name": "startMach",
        "type": "tuple",
        "internalType": "struct Machine",
        "components": [
          {
            "name": "status",
            "type": "uint8",
            "internalType": "enum MachineStatus"
          },
          {
            "name": "valueStack",
            "type": "tuple",
            "internalType": "struct ValueStack",
            "components": [
              {
                "name": "proved",
                "type": "tuple",
                "internalType": "struct ValueArray",
                "components": [
                  {
                    "name": "inner",
                    "type": "tuple[]",
                    "internalType": "struct Value[]",
                    "components": [
                      {
                        "name": "valueType",
                        "type": "uint8",
                        "internalType": "enum ValueType"
                      },
                      {
                        "name": "contents",
                        "type": "uint256",
                        "internalType": "uint256"
                      }
                    ]
                  }
                ]
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "valueMultiStack",
            "type": "tuple",
            "internalType": "struct MultiStack",
            "components": [
              {
                "name": "inactiveStackHash",
                "type": "bytes32",
                "internalType": "bytes32"
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "internalStack",
            "type": "tuple",
            "internalType": "struct ValueStack",
            "components": [
              {
                "name": "proved",
                "type": "tuple",
                "internalType": "struct ValueArray",
                "components": [
                  {
                    "name": "inner",
                    "type": "tuple[]",
                    "internalType": "struct Value[]",
                    "components": [
                      {
                        "name": "valueType",
                        "type": "uint8",
                        "internalType": "enum ValueType"
                      },
                      {
                        "name": "contents",
                        "type": "uint256",
                        "internalType": "uint256"
                      }
                    ]
                  }
                ]
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "frameStack",
            "type": "tuple",
            "internalType": "struct StackFrameWindow",
            "components": [
              {
                "name": "proved",
                "type": "tuple[]",
                "internalType": "struct StackFrame[]",
                "components": [
                  {
                    "name": "returnPc",
                    "type": "tuple",
                    "internalType": "struct Value",
                    "components": [
                      {
                        "name": "valueType",
                        "type": "uint8",
                        "internalType": "enum ValueType"
                      },
                      {
                        "name": "contents",
                        "type": "uint256",
                        "internalType": "uint256"
                      }
                    ]
                  },
                  {
                    "name": "localsMerkleRoot",
                    "type": "bytes32",
                    "internalType": "bytes32"
                  },
                  {
                    "name": "callerModule",
                    "type": "uint32",
                    "internalType": "uint32"
                  },
                  {
                    "name": "callerModuleInternals",
                    "type": "uint32",
                    "internalType": "uint32"
                  }
                ]
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "frameMultiStack",
            "type": "tuple",
            "internalType": "struct MultiStack",
            "components": [
              {
                "name": "inactiveStackHash",
                "type": "bytes32",
                "internalType": "bytes32"
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "globalStateHash",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "moduleIdx",
            "type": "uint32",
            "internalType": "uint32"
          },
          {
            "name": "functionIdx",
            "type": "uint32",
            "internalType": "uint32"
          },
          {
            "name": "functionPc",
            "type": "uint32",
            "internalType": "uint32"
          },
          {
            "name": "recoveryPc",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "modulesRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          }
        ]
      },
      {
        "name": "startMod",
        "type": "tuple",
        "internalType": "struct Module",
        "components": [
          {
            "name": "globalsMerkleRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "moduleMemory",
            "type": "tuple",
            "internalType": "struct ModuleMemory",
            "components": [
              {
                "name": "size",
                "type": "uint64",
                "internalType": "uint64"
              },
              {
                "name": "maxSize",
                "type": "uint64",
                "internalType": "uint64"
              },
              {
                "name": "merkleRoot",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "tablesMerkleRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "functionsMerkleRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "extraHash",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "internalsOffset",
            "type": "uint32",
            "internalType": "uint32"
          }
        ]
      },
      {
        "name": "inst",
        "type": "tuple",
        "internalType": "struct Instruction",
        "components": [
          {
            "name": "opcode",
            "type": "uint16",
            "internalType": "uint16"
          },
          {
            "name": "argumentData",
            "type": "uint256",
            "internalType": "uint256"
          }
        ]
      },
      {
        "name": "proof",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "mach",
        "type": "tuple",
        "internalType": "struct Machine",
        "components": [
          {
            "name": "status",
            "type": "uint8",
            "internalType": "enum MachineStatus"
          },
          {
            "name": "valueStack",
            "type": "tuple",
            "internalType": "struct ValueStack",
            "components": [
              {
                "name": "proved",
                "type": "tuple",
                "internalType": "struct ValueArray",
                "components": [
                  {
                    "name": "inner",
                    "type": "tuple[]",
                    "internalType": "struct Value[]",
                    "components": [
                      {
                        "name": "valueType",
                        "type": "uint8",
                        "internalType": "enum ValueType"
                      },
                      {
                        "name": "contents",
                        "type": "uint256",
                        "internalType": "uint256"
                      }
                    ]
                  }
                ]
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "valueMultiStack",
            "type": "tuple",
            "internalType": "struct MultiStack",
            "components": [
              {
                "name": "inactiveStackHash",
                "type": "bytes32",
                "internalType": "bytes32"
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "internalStack",
            "type": "tuple",
            "internalType": "struct ValueStack",
            "components": [
              {
                "name": "proved",
                "type": "tuple",
                "internalType": "struct ValueArray",
                "components": [
                  {
                    "name": "inner",
                    "type": "tuple[]",
                    "internalType": "struct Value[]",
                    "components": [
                      {
                        "name": "valueType",
                        "type": "uint8",
                        "internalType": "enum ValueType"
                      },
                      {
                        "name": "contents",
                        "type": "uint256",
                        "internalType": "uint256"
                      }
                    ]
                  }
                ]
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "frameStack",
            "type": "tuple",
            "internalType": "struct StackFrameWindow",
            "components": [
              {
                "name": "proved",
                "type": "tuple[]",
                "internalType": "struct StackFrame[]",
                "components": [
                  {
                    "name": "returnPc",
                    "type": "tuple",
                    "internalType": "struct Value",
                    "components": [
                      {
                        "name": "valueType",
                        "type": "uint8",
                        "internalType": "enum ValueType"
                      },
                      {
                        "name": "contents",
                        "type": "uint256",
                        "internalType": "uint256"
                      }
                    ]
                  },
                  {
                    "name": "localsMerkleRoot",
                    "type": "bytes32",
                    "internalType": "bytes32"
                  },
                  {
                    "name": "callerModule",
                    "type": "uint32",
                    "internalType": "uint32"
                  },
                  {
                    "name": "callerModuleInternals",
                    "type": "uint32",
                    "internalType": "uint32"
                  }
                ]
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "frameMultiStack",
            "type": "tuple",
            "internalType": "struct MultiStack",
            "components": [
              {
                "name": "inactiveStackHash",
                "type": "bytes32",
                "internalType": "bytes32"
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "globalStateHash",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "moduleIdx",
            "type": "uint32",
            "internalType": "uint32"
          },
          {
            "name": "functionIdx",
            "type": "uint32",
            "internalType": "uint32"
          },
          {
            "name": "functionPc",
            "type": "uint32",
            "internalType": "uint32"
          },
          {
            "name": "recoveryPc",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "modulesRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          }
        ]
      },
      {
        "name": "mod",
        "type": "tuple",
        "internalType": "struct Module",
        "components": [
          {
            "name": "globalsMerkleRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "moduleMemory",
            "type": "tuple",
            "internalType": "struct ModuleMemory",
            "components": [
              {
                "name": "size",
                "type": "uint64",
                "internalType": "uint64"
              },
              {
                "name": "maxSize",
                "type": "uint64",
                "internalType": "uint64"
              },
              {
                "name": "merkleRoot",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "tablesMerkleRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "functionsMerkleRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "extraHash",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "internalsOffset",
            "type": "uint32",
            "internalType": "uint32"
          }
        ]
      }
    ],
    "stateMutability": "view"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod OneStepProverHostIo {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052348015600e575f80fd5b506140b58061001c5f395ff3fe608060405234801561000f575f80fd5b5060043610610029575f3560e01c8063a92cb5011461002d575b5f80fd5b61004061003b3660046133e4565b610057565b60405161004e92919061360e565b60405180910390f35b61005f613277565b6040805160c0810182525f80825282516060808201855282825260208083018490528286018490528401919091529282018190529181018290526080810182905260a08101919091526100b187613b45565b91506100c236879003870187613c7d565b90505f6100d26020870187613d1c565b905061335261801061ffff8316108015906100f3575061801361ffff831611155b15610101575061030d6102ee565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7fe061ffff831601610135575061049a6102ee565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7fdf61ffff8316016101695750610c926102ee565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7fde61ffff83160161019d57506110086102ee565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7fdd61ffff8316016101d157506110146102ee565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7fdc61ffff83160161020557506111686102ee565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7fd061ffff83160161023957506112176102ee565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7fcf61ffff83160161026d575061125d6102ee565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7fce61ffff8316016102a157506112b16102ee565b60405162461bcd60e51b815260206004820152601560248201527f494e56414c49445f4d454d4f52595f4f50434f4445000000000000000000000060448201526064015b60405180910390fd5b6103008a85858a8a8a8763ffffffff16565b5050965096945050505050565b5f61031b6020850185613d1c565b905061032561335c565b5f610331858583611321565b60c08a01519193509150610344836113fb565b146103915760405162461bcd60e51b815260206004820152601060248201527f4241445f474c4f42414c5f53544154450000000000000000000000000000000060448201526064016102e5565b61ffff831661801014806103aa575061ffff8316618011145b156103cc576103c7888884896103c28987818d613d3d565b6114a3565b61047e565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7fee61ffff841601610401576103c78883611627565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7fed61ffff841601610436576103c788836116d4565b60405162461bcd60e51b815260206004820152601a60248201527f494e56414c49445f474c4f42414c53544154455f4f50434f444500000000000060448201526064016102e5565b610487826113fb565b60c0909801979097525050505050505050565b5f6104b06104ab8760200151611749565b61176d565b63ffffffff1690505f6104c96104ab8860200151611749565b63ffffffff1690506104dc602083613d78565b15158061050357506020808701515167ffffffffffffffff1690610501908390613d9f565b115b806105175750610514602082613d78565b15155b1561053e578660025b90816002811115610533576105336134db565b815250505050610c8a565b5f61054a602083613db2565b90505f806105646040518060200160405280606081525090565b60208a015161057690858a8a87611829565b909450909250905060605f89898681811061059357610593613dc5565b919091013560f81c91508590506105a981613dd9565b9550508a602001355f036106e5578060ff165f0361069d57365f6105cf8b88818f613d3d565b915091508582826040516105e4929190613df1565b6040518091039020146106395760405162461bcd60e51b815260206004820152600c60248201527f4241445f505245494d414745000000000000000000000000000000000000000060448201526064016102e5565b5f6106458b6020613d9f565b9050818111156106525750805b61065e818c8486613d3d565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250929750610bf695505050505050565b60405162461bcd60e51b815260206004820152601660248201527f554e4b4e4f574e5f505245494d4147455f50524f4f460000000000000000000060448201526064016102e5565b8a602001356001036107f25760ff8116156107425760405162461bcd60e51b815260206004820152601660248201527f554e4b4e4f574e5f505245494d4147455f50524f4f460000000000000000000060448201526064016102e5565b365f6107508b88818f613d3d565b915091508560028383604051610767929190613df1565b602060405180830381855afa158015610782573d5f803e3d5ffd5b5050506040513d601f19601f820116820180604052508101906107a59190613e00565b146106395760405162461bcd60e51b815260206004820152600c60248201527f4241445f505245494d414745000000000000000000000000000000000000000060448201526064016102e5565b8a60200135600203610bae5760ff81161561084f5760405162461bcd60e51b815260206004820152601660248201527f554e4b4e4f574e5f505245494d4147455f50524f4f460000000000000000000060448201526064016102e5565b365f61085d8b88818f613d3d565b90925090508561087060205f8486613d3d565b61087991613e17565b146108c65760405162461bcd60e51b815260206004820152601460248201527f4b5a475f50524f4f465f57524f4e475f4841534800000000000000000000000060448201526064016102e5565b5f805f80600a73ffffffffffffffffffffffffffffffffffffffff1686866040516108f2929190613df1565b5f60405180830381855afa9150503d805f811461092a576040519150601f19603f3d011682016040523d82523d5f602084013e61092f565b606091505b5091509150816109815760405162461bcd60e51b815260206004820152601160248201527f494e56414c49445f4b5a475f50524f4f4600000000000000000000000000000060448201526064016102e5565b5f8151116109d15760405162461bcd60e51b815260206004820152601660248201527f4b5a475f505245434f4d50494c455f4d495353494e470000000000000000000060448201526064016102e5565b808060200190518101906109e59190613e34565b9094509250507f73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff0000000182149050610a5c5760405162461bcd60e51b815260206004820152601360248201527f554e4b4e4f574e5f424c535f4d4f44554c55530000000000000000000000000060448201526064016102e5565b610a67826020613e56565b8c1015610ba5575f80610a7b60208f613db2565b905060015b84811015610aaa57600192831b928281169003610a9e576001831792505b600191821c911b610a80565b505f610abb85640100000000613db2565b9050610ac78382613e56565b90505f610af57f16a2a19edfe81f20d09b681922c813b4b63683508c2280b93829971f439f0d2b83876118d0565b905080610b06604060208a8c613d3d565b610b0f91613e17565b14610b5c5760405162461bcd60e51b815260206004820152601160248201527f4b5a475f50524f4f465f57524f4e475f5a00000000000000000000000000000060448201526064016102e5565b610b6a60606040898b613d3d565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250929c50505050505050505b50505050610bf6565b60405162461bcd60e51b815260206004820152601560248201527f554e4b4e4f574e5f505245494d4147455f54595045000000000000000000000060448201526064016102e5565b5f5b8251811015610c2f57610c258582858481518110610c1857610c18613dc5565b016020015160f81c611a1a565b9450600101610bf8565b50610c3b838786611aa5565b60208d8101516040908101929092528351825180840184525f8082529083018190528351808501909452835263ffffffff1690820152610c81905b60208f015190611b3e565b50505050505050505b505050505050565b5f610ca36104ab8760200151611749565b63ffffffff1690505f610cbc6104ab8860200151611749565b63ffffffff1690505f610cda610cd58960200151611749565b611b4e565b67ffffffffffffffff1690506020860135158015610cf9575088358110155b15610d21578760025b90816002811115610d1557610d156134db565b81525050505050610c8a565b6020808801515167ffffffffffffffff1690610d3e908490613d9f565b1180610d535750610d50602083613d78565b15155b15610d6057876002610d02565b5f610d6c602084613db2565b90505f80610d866040518060200160405280606081525090565b60208b0151610d9890858b8b87611829565b9094509092509050888884818110610db257610db2613dc5565b909101357fff0000000000000000000000000000000000000000000000000000000000000016159050610e275760405162461bcd60e51b815260206004820152601360248201527f554e4b4e4f574e5f494e424f585f50524f4f460000000000000000000000000060448201526064016102e5565b82610e3181613dd9565b935061335290505f60208c0135610e4c57611c0f9150610e8b565b60018c6020013503610e6257611f619150610e8b565b8d60025b90816002811115610e7957610e796134db565b81525050505050505050505050610c8a565b610eab8f888d8d89908092610ea293929190613d3d565b8663ffffffff16565b905080610eba578d6002610e66565b505082881015610f0c5760405162461bcd60e51b815260206004820152601160248201527f4241445f4d4553534147455f50524f4f4600000000000000000000000000000060448201526064016102e5565b5f610f17848a613e6d565b90505f5b60208163ffffffff16108015610f3f575081610f3d63ffffffff83168b613d9f565b105b15610f9857610f848463ffffffff83168d8d82610f5c8f8c613d9f565b610f669190613d9f565b818110610f7557610f75613dc5565b919091013560f81c9050611a1a565b935080610f9081613e80565b915050610f1b565b610fa3838786611aa5565b60208e015160400152610ff7610fe482604080518082019091525f808252602082015250604080518082019091525f815263ffffffff909116602082015290565b8f60200151611b3e90919063ffffffff16565b505050505050505050505050505050565b50506001909252505050565b5f6040518060400160405280601381526020017f4d6f64756c65206d65726b6c6520747265653a0000000000000000000000000081525090505f86610160015190505f6110676104ab8960200151611749565b63ffffffff16905061108681886020015161223e90919063ffffffff16565b61109257876002610d02565b5f806110b06110a2602085613db2565b60208b01519089895f611829565b50915091505f806110c38c848b8b612273565b92505091505f6110de8360016110d99190613d9f565b6124c7565b90508015611108576110fd876110f5856001613d9f565b875f8c6124e6565b6101608e0152611126565b61111f611116846001613d9f565b8390878b61258f565b6101608e01525b610c81610c76611137856001613d9f565b604080518082019091525f808252602082015250604080518082019091525f815263ffffffff909116602082015290565b60408051808201909152601381527f4d6f64756c65206d65726b6c6520747265653a0000000000000000000000000060208201525f806111aa88828787612273565b50915091505f6111b9836124c7565b905080156111f857815180516111d190600190613e6d565b815181106111e1576111e1613dc5565b60200260200101518961016001818152505061120b565b61120482845f8761258f565b6101608a01525b50505050505050505050565b6101408501515f1914611243578460025b9081600281111561123b5761123b6134db565b905250610c8a565b6112508560a00151612699565b610c8a8560400151612699565b6101408501515f191461127257846002611228565b60a08501515160010161128757846002611228565b6112968560400151838361270b565b60a0850151610c8a906112ac8360408187613d3d565b61270b565b60a0850151516001016112c657846002611228565b82602001355f036112f3576101408501516001016112e657846002611228565b5f19610140860152611318565b6101408501515f191461130857846002611228565b611316856020850135612892565b505b610c8a85612901565b61132961335c565b81611332613381565b61133a613381565b5f5b600260ff8216101561138457611353888886612983565b848360ff166002811061136857611368613dc5565b602002019190915293508061137c81613ea2565b91505061133c565b505f5b600260ff821610156113de5761139e88888661299e565b838360ff16600281106113b3576113b3613dc5565b67ffffffffffffffff90931660209390930201919091529350806113d681613ea2565b915050611387565b506040805180820190915291825260208201529590945092505050565b80518051602091820151828401518051908401516040517f476c6f62616c2073746174653a0000000000000000000000000000000000000095810195909552602d850193909352604d8401919091527fffffffffffffffff00000000000000000000000000000000000000000000000060c091821b8116606d85015291901b1660758201525f90607d015b604051602081830303815290604052805190602001209050919050565b5f6114b46104ab8860200151611749565b63ffffffff1690505f6114cd6104ab8960200151611749565b9050600263ffffffff8216106114e557876002610520565b60208701516114f4908361223e565b61150057876002610520565b5f61150c602084613db2565b90505f806115266040518060200160405280606081525090565b60208b015161153890858a8a87611829565b909450909250905061801061155060208b018b613d1c565b61ffff160361159357611585848b5f01518763ffffffff166002811061157857611578613dc5565b6020020151839190611aa5565b60208c015160400152611619565b6180116115a360208b018b613d1c565b61ffff16036115d1578951829063ffffffff8716600281106115c7576115c7613dc5565b6020020152611619565b60405162461bcd60e51b815260206004820152601760248201527f4241445f474c4f42414c5f53544154455f4f50434f444500000000000000000060448201526064016102e5565b505050505050505050505050565b5f6116386104ab8460200151611749565b9050600263ffffffff821610611667578260025b9081600281111561165f5761165f6134db565b905250505050565b6116cf6116c483602001518363ffffffff166002811061168957611689613dc5565b6020020151604080518082019091525f808252602082015250604080518082019091526001815267ffffffffffffffff909116602082015290565b602085015190611b3e565b505050565b5f6116e5610cd58460200151611749565b90505f6116f86104ab8560200151611749565b9050600263ffffffff821610611712575050600290915250565b8183602001518263ffffffff166002811061172f5761172f613dc5565b67ffffffffffffffff909216602092909202015250505050565b604080518082019091525f80825260208201528151611767906129fa565b92915050565b60208101515f908183516006811115611788576117886134db565b146117d55760405162461bcd60e51b815260206004820152600760248201527f4e4f545f4933320000000000000000000000000000000000000000000000000060448201526064016102e5565b64010000000081106117675760405162461bcd60e51b815260206004820152600760248201527f4241445f4933320000000000000000000000000000000000000000000000000060448201526064016102e5565b5f806118416040518060200160405280606081525090565b83915061184f868684612983565b909350915061185f868684612afb565b925090505f61186f828986611aa5565b9050886040015181146118c45760405162461bcd60e51b815260206004820152600e60248201527f57524f4e475f4d454d5f524f4f5400000000000000000000000000000000000060448201526064016102e5565b50955095509592505050565b60408051602080820181905281830181905260608201526080810185905260a0810184905260c08082018490528251808303909101815260e0909101918290525f9182908190600590611924908590613ed7565b5f60405180830381855afa9150503d805f811461195c576040519150601f19603f3d011682016040523d82523d5f602084013e611961565b606091505b5091509150816119b35760405162461bcd60e51b815260206004820152600d60248201527f4d4f444558505f4641494c45440000000000000000000000000000000000000060448201526064016102e5565b8051602014611a045760405162461bcd60e51b815260206004820152601360248201527f4d4f444558505f57524f4e475f4c454e4754480000000000000000000000000060448201526064016102e5565b611a0d81613ee2565b93505050505b9392505050565b5f60208310611a6b5760405162461bcd60e51b815260206004820152601560248201527f4241445f5345545f4c4541465f425954455f494458000000000000000000000060448201526064016102e5565b5f83611a7960016020613e6d565b611a839190613e6d565b611a8e906008613e56565b60ff848116821b911b198616179150509392505050565b6040517f4d656d6f7279206c6561663a00000000000000000000000000000000000000006020820152602c81018290525f908190604c01604051602081830303815290604052805190602001209050611b358585836040518060400160405280601381526020017f4d656d6f7279206d65726b6c6520747265653a0000000000000000000000000081525061258f565b95945050505050565b8151611b4a9082612bc8565b5050565b60208101515f90600183516006811115611b6a57611b6a6134db565b14611bb75760405162461bcd60e51b815260206004820152600760248201527f4e4f545f4936340000000000000000000000000000000000000000000000000060448201526064016102e5565b6801000000000000000081106117675760405162461bcd60e51b815260206004820152600760248201527f4241445f4936340000000000000000000000000000000000000000000000000060448201526064016102e5565b5f6028821015611c615760405162461bcd60e51b815260206004820152601260248201527f4241445f534551494e424f585f50524f4f46000000000000000000000000000060448201526064016102e5565b5f611c6e8484602061299e565b50809150505f8484604051611c84929190613df1565b60405190819003902090505f8067ffffffffffffffff881615611d5957611cb160408a0160208b01613f05565b73ffffffffffffffffffffffffffffffffffffffff166316bf5579611cd760018b613f38565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815267ffffffffffffffff9091166004820152602401602060405180830381865afa158015611d32573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611d569190613e00565b91505b67ffffffffffffffff841615611e2157611d7960408a0160208b01613f05565b73ffffffffffffffffffffffffffffffffffffffff1663d5719dc2611d9f600187613f38565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815267ffffffffffffffff9091166004820152602401602060405180830381865afa158015611dfa573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611e1e9190613e00565b90505b6040805160208101849052908101849052606081018290525f90608001604051602081830303815290604052805190602001209050896020016020810190611e699190613f05565b6040517f16bf557900000000000000000000000000000000000000000000000000000000815267ffffffffffffffff8b16600482015273ffffffffffffffffffffffffffffffffffffffff91909116906316bf557990602401602060405180830381865afa158015611edd573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611f019190613e00565b8114611f4f5760405162461bcd60e51b815260206004820152601460248201527f4241445f534551494e424f585f4d45535341474500000000000000000000000060448201526064016102e5565b6001955050505050505b949350505050565b5f6071821015611fb35760405162461bcd60e51b815260206004820152601160248201527f4241445f44454c415945445f50524f4f4600000000000000000000000000000060448201526064016102e5565b5f67ffffffffffffffff85161561207c57611fd46040870160208801613f05565b73ffffffffffffffffffffffffffffffffffffffff1663d5719dc2611ffa600188613f38565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815267ffffffffffffffff9091166004820152602401602060405180830381865afa158015612055573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906120799190613e00565b90505b5f61208a8460718188613d3d565b604051612098929190613df1565b604051809103902090505f85855f8181106120b5576120b5613dc5565b9050013560f81c60f81b90505f6120ce87876001612cad565b5090505f82826120e2607160218b8d613d3d565b876040516020016120f7959493929190613f60565b60408051601f1981840301815282825280516020918201208382018990528383018190528251808503840181526060909401909252825192019190912090915061214760408c0160208d01613f05565b6040517fd5719dc200000000000000000000000000000000000000000000000000000000815267ffffffffffffffff8c16600482015273ffffffffffffffffffffffffffffffffffffffff919091169063d5719dc290602401602060405180830381865afa1580156121bb573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906121df9190613e00565b811461222d5760405162461bcd60e51b815260206004820152601360248201527f4241445f44454c415945445f4d4553534147450000000000000000000000000060448201526064016102e5565b5060019a9950505050505050505050565b81515f9067ffffffffffffffff16612257836020613d9f565b11158015611a13575061226b602083613d78565b159392505050565b5f61228a6040518060200160405280606081525090565b60408051602081019091526060815260408051808201909152601381527f4d6f64756c65206d65726b6c6520747265653a0000000000000000000000000060208201526101608801516123246040805160c0810182525f8082528251606081018452818152602081810183905293810191909152909182019081525f60208201819052604082018190526060820181905260809091015290565b5f61233089898c612cf6565b9a50915061233f89898c612df8565b9a50905061234e89898c612afb565b9a5063ffffffff80831698509096505f9061236f9088908a908690612e4716565b90508381146123c05760405162461bcd60e51b815260206004820152601360248201527f57524f4e475f524f4f545f464f525f4c4541460000000000000000000000000060448201526064016102e5565b5050505f6123d48660016110d99190613d9f565b90508015612440576123e7866001613d9f565b8551516001901b1461243b5760405162461bcd60e51b815260206004820152600a60248201527f57524f4e475f4c4541460000000000000000000000000000000000000000000060448201526064016102e5565b6124ba565b61244b88888b612afb565b995093505f61246761245e886001613d9f565b86905f8761258f565b90508281146124b85760405162461bcd60e51b815260206004820152601360248201527f57524f4e475f524f4f545f464f525f5a45524f0000000000000000000000000060448201526064016102e5565b505b5050509450945094915050565b5f811580159061176757506124dd600183613e6d565b82161592915050565b5f83855b60018111156125575783828660405160200161250893929190613fc9565b60405160208183030381529060405280519060200120915083858660405160200161253593929190613fc9565b60408051601f198184030181529190528051602090910120945060011c6124ea565b83888360405160200161256c93929190613fc9565b604051602081830303815290604052805190602001209250505095945050505050565b815f5b85515181101561264a57846001165f036125f4578282875f015183815181106125bd576125bd613dc5565b60200260200101516040516020016125d793929190613fc9565b60405160208183030381529060405280519060200120915061263e565b82865f0151828151811061260a5761260a613dc5565b60200260200101518360405160200161262593929190613fc9565b6040516020818303038152906040528051906020012091505b600194851c9401612592565b508315611f595760405162461bcd60e51b815260206004820152600f60248201527f50524f4f465f544f4f5f53484f5254000000000000000000000000000000000060448201526064016102e5565b80515f19146127065780516020808301516040516126e99392017f636f7468726561643a000000000000000000000000000000000000000000000081526009810192909252602982015260490190565b60408051601f198184030181529190528051602091820120908201525b5f9052565b5f8080612719858585612983565b93509150612728858585612983565b93509050600182016127d95780156127825760405162461bcd60e51b815260206004820152601460248201527f57524f4e475f434f5448524541445f454d50545900000000000000000000000060448201526064016102e5565b6020860151156127d45760405162461bcd60e51b815260206004820152601460248201527f57524f4e475f434f5448524541445f454d50545900000000000000000000000060448201526064016102e5565b612885565b856020015182826040516020016128229291907f636f7468726561643a000000000000000000000000000000000000000000000081526009810192909252602982015260490190565b60405160208183030381529060405280519060200120146128855760405162461bcd60e51b815260206004820152601260248201527f57524f4e475f434f5448524541445f504f50000000000000000000000000000060448201526064016102e5565b6020860152909352505050565b6101408201515f905f19146128a857505f611767565b5f60408460e0015163ffffffff16901b9050602084610100015163ffffffff16901b811790506001838561012001516128e19190613fe6565b6128eb9190614003565b63ffffffff161761014084015250600192915050565b60408101515160a0820151515f1981148061291c57505f1982145b156129295782600261164c565b6129368360800151612e91565b60a084015152602083015161294a90612f2a565b60408401515260808301516129659082602082015260609052565b50602091820151808301919091526040805192830190526060825252565b5f8181612991868684612cad565b9097909650945050505050565b5f81815b60088110156129f15760088367ffffffffffffffff16901b92508585838181106129ce576129ce613dc5565b919091013560f81c939093179250816129e681613dd9565b9250506001016129a2565b50935093915050565b604080518082019091525f808252602082015281518051612a1d90600190613e6d565b81518110612a2d57612a2d613dc5565b602002602001015190505f6001835f015151612a499190613e6d565b67ffffffffffffffff811115612a6157612a616137a3565b604051908082528060200260200182016040528015612aa557816020015b604080518082019091525f8082526020820152815260200190600190039081612a7f5790505b5090505f5b8151811015612af4578351805182908110612ac757612ac7613dc5565b6020026020010151828281518110612ae157612ae1613dc5565b6020908102919091010152600101612aaa565b5090915290565b604080516020810190915260608152815f612b17868684612fb6565b925090505f60ff821667ffffffffffffffff811115612b3857612b386137a3565b604051908082528060200260200182016040528015612b61578160200160208202803683370190505b5090505f5b8260ff168160ff161015612bac57612b7f888886612983565b838360ff1681518110612b9457612b94613dc5565b60209081029190910101919091529350600101612b66565b5060405180602001604052808281525093505050935093915050565b8151515f90612bd8906001613d9f565b67ffffffffffffffff811115612bf057612bf06137a3565b604051908082528060200260200182016040528015612c3457816020015b604080518082019091525f8082526020820152815260200190600190039081612c0e5790505b5090505f5b835151811015612c84578351805182908110612c5757612c57613dc5565b6020026020010151828281518110612c7157612c71613dc5565b6020908102919091010152600101612c39565b508181845f01515181518110612c9c57612c9c613dc5565b602090810291909101015290915250565b5f81815b60208110156129f157600883901b9250858583818110612cd357612cd3613dc5565b919091013560f81c93909317925081612ceb81613dd9565b925050600101612cb1565b6040805160c0810182525f80825282516060808201855282825260208083018490528286018490528401919091529282018190529181018290526080810182905260a0810191909152604080516060810182525f808252602082018190529181018290528391905f805f80612d6c8b8b89612983565b97509550612d7b8b8b89612feb565b97509450612d8a8b8b89612983565b97509350612d998b8b89612983565b97509250612da88b8b89612983565b97509150612db78b8b89612df8565b6040805160c081018252988952602089019790975295870194909452506060850191909152608084015263ffffffff1660a083015290969095509350505050565b5f81815b60048110156129f15760088363ffffffff16901b9250858583818110612e2457612e24613dc5565b919091013560f81c93909317925081612e3c81613dd9565b925050600101612dfc565b5f611f598484612e5685613065565b6040518060400160405280601381526020017f4d6f64756c65206d65726b6c6520747265653a0000000000000000000000000081525061258f565b60208101515f5b825151811015612f2457612ec7835f01518281518110612eba57612eba613dc5565b602002602001015161310d565b6040517f537461636b206672616d6520737461636b3a0000000000000000000000000000602082015260328101919091526052810183905260720160408051601f1981840301815291905280516020909101209150600101612e98565b50919050565b6020810151815151515f5b81811015612faf578351612f5290612f4d90836131a4565b6131db565b6040517f56616c756520737461636b3a00000000000000000000000000000000000000006020820152602c810191909152604c8101849052606c0160408051601f1981840301815291905280516020909101209250600101612f35565b5050919050565b5f81848482818110612fca57612fca613dc5565b919091013560f81c9250819050612fe081613dd9565b915050935093915050565b604080516060810182525f8082526020820181905291810191909152815f808061301688888661299e565b9450925061302588888661299e565b94509150613034888886612983565b6040805160608101825267ffffffffffffffff96871681529490951660208501529383015250969095509350505050565b5f815f015161307783602001516131f6565b6040808501516060860151608087015160a08801519351611486969594906020017f4d6f64756c653a0000000000000000000000000000000000000000000000000081526007810196909652602786019490945260478501929092526067840152608783015260e01b7fffffffff000000000000000000000000000000000000000000000000000000001660a782015260ab0190565b5f61311a825f01516131db565b602080840151604080860151606087015191517f537461636b206672616d653a000000000000000000000000000000000000000094810194909452602c840194909452604c8301919091527fffffffff0000000000000000000000000000000000000000000000000000000060e093841b8116606c840152921b9091166070820152607401611486565b604080518082019091525f808252602082015282518051839081106131cb576131cb613dc5565b6020026020010151905092915050565b5f815f01518260200151604051602001611486929190614020565b805160208083015160408085015190517f4d656d6f72793a00000000000000000000000000000000000000000000000000938101939093527fffffffffffffffff00000000000000000000000000000000000000000000000060c094851b811660278501529190931b16602f82015260378101919091525f90605701611486565b604080516101808101909152805f81526020016132aa60408051606080820183529181019182529081525f602082015290565b81526040805180820182525f808252602080830191909152830152016132e660408051606080820183529181019182529081525f602082015290565b815260200161330a6040518060400160405280606081526020015f80191681525090565b81526040805180820182525f8082526020808301829052840191909152908201819052606082018190526080820181905260a0820181905260c0820181905260e09091015290565b61335a61406b565b565b604051806040016040528061336f613381565b815260200161337c613381565b905290565b60405180604001604052806002906020820280368337509192915050565b5f8083601f8401126133af575f80fd5b50813567ffffffffffffffff8111156133c6575f80fd5b6020830191508360208285010111156133dd575f80fd5b9250929050565b5f805f805f808688036101e08112156133fb575f80fd5b6060811215613408575f80fd5b879650606088013567ffffffffffffffff80821115613425575f80fd5b818a0191506101c080838d03121561343b575f80fd5b8298506101007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808501121561346e575f80fd5b60808b01975060407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe80850112156134a3575f80fd5b6101808b0196508a01359250808311156134bb575f80fd5b50506134c989828a0161339f565b979a9699509497509295939492505050565b634e487b7160e01b5f52602160045260245ffd5b600381106134ff576134ff6134db565b9052565b805160078110613515576135156134db565b8252602090810151910152565b80516040808452905160208483018190528151606086018190525f9392820191849160808801905b808410156135715761355d828651613503565b93820193600193909301929085019061354a565b5060208701516020890152809550505050505092915050565b8051604080845281518482018190525f926060916020918201918388019190865b828110156135f45784516135c0858251613503565b80830151858901528781015163ffffffff90811688870152908701511660808501529381019360a0909301926001016135ab565b505050602086015160208801528094505050505092915050565b5f61012080835261362281840186516134ef565b60208501516101c061014081818701526136406102e0870184613522565b925060408801516101606136608189018380518252602090810151910152565b60608a015191507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee080898703016101a08a015261369d8684613522565b955060808b015192508089870301858a0152506136ba858361358a565b60a08b015180516101e08b015260208101516102008b0152909550935060c08a015161022089015260e08a015163ffffffff81166102408a015293506101008a015163ffffffff81166102608a015293509489015163ffffffff811661028089015294918901516102a0880152508701516102c0860152509150611a139050602083018480518252602081015167ffffffffffffffff80825116602085015280602083015116604085015250604081015160608401525060408101516080830152606081015160a0830152608081015160c083015263ffffffff60a08201511660e08301525050565b634e487b7160e01b5f52604160045260245ffd5b6040805190810167ffffffffffffffff811182821017156137da576137da6137a3565b60405290565b6040516020810167ffffffffffffffff811182821017156137da576137da6137a3565b6040516080810167ffffffffffffffff811182821017156137da576137da6137a3565b604051610180810167ffffffffffffffff811182821017156137da576137da6137a3565b60405160c0810167ffffffffffffffff811182821017156137da576137da6137a3565b6040516060810167ffffffffffffffff811182821017156137da576137da6137a3565b604051601f8201601f1916810167ffffffffffffffff811182821017156138b9576138b96137a3565b604052919050565b8035600381106138cf575f80fd5b919050565b5f67ffffffffffffffff8211156138ed576138ed6137a3565b5060051b60200190565b5f60408284031215613907575f80fd5b61390f6137b7565b905081356007811061391f575f80fd5b808252506020820135602082015292915050565b5f6040808385031215613944575f80fd5b61394c6137b7565b9150823567ffffffffffffffff80821115613965575f80fd5b8185019150602080838803121561397a575f80fd5b6139826137e0565b833583811115613990575f80fd5b80850194505087601f8501126139a4575f80fd5b833592506139b96139b4846138d4565b613890565b83815260069390931b840182019282810190898511156139d7575f80fd5b948301945b848610156139fd576139ee8a876138f7565b825294860194908301906139dc565b8252508552948501359484019490945250909392505050565b5f60408284031215613a26575f80fd5b613a2e6137b7565b9050813581526020820135602082015292915050565b803563ffffffff811681146138cf575f80fd5b5f6040808385031215613a68575f80fd5b613a706137b7565b9150823567ffffffffffffffff811115613a88575f80fd5b8301601f81018513613a98575f80fd5b80356020613aa86139b4836138d4565b82815260a09283028401820192828201919089851115613ac6575f80fd5b948301945b84861015613b2d5780868b031215613ae1575f80fd5b613ae9613803565b613af38b886138f7565b815287870135858201526060613b0a818901613a44565b89830152613b1a60808901613a44565b9082015283529485019491830191613acb565b50808752505080860135818601525050505092915050565b5f6101c08236031215613b56575f80fd5b613b5e613826565b613b67836138c1565b8152602083013567ffffffffffffffff80821115613b83575f80fd5b613b8f36838701613933565b6020840152613ba13660408701613a16565b60408401526080850135915080821115613bb9575f80fd5b613bc536838701613933565b606084015260a0850135915080821115613bdd575f80fd5b50613bea36828601613a57565b608083015250613bfd3660c08501613a16565b60a08201526101008084013560c0830152610120613c1c818601613a44565b60e0840152610140613c2f818701613a44565b838501526101609250613c43838701613a44565b91840191909152610180850135908301526101a090930135928101929092525090565b803567ffffffffffffffff811681146138cf575f80fd5b5f818303610100811215613c8f575f80fd5b613c9761384a565b833581526060601f1983011215613cac575f80fd5b613cb461386d565b9150613cc260208501613c66565b8252613cd060408501613c66565b6020830152606084013560408301528160208201526080840135604082015260a0840135606082015260c08401356080820152613d0f60e08501613a44565b60a0820152949350505050565b5f60208284031215613d2c575f80fd5b813561ffff81168114611a13575f80fd5b5f8085851115613d4b575f80fd5b83861115613d57575f80fd5b5050820193919092039150565b634e487b7160e01b5f52601260045260245ffd5b5f82613d8657613d86613d64565b500690565b634e487b7160e01b5f52601160045260245ffd5b8082018082111561176757611767613d8b565b5f82613dc057613dc0613d64565b500490565b634e487b7160e01b5f52603260045260245ffd5b5f5f198203613dea57613dea613d8b565b5060010190565b818382375f9101908152919050565b5f60208284031215613e10575f80fd5b5051919050565b80356020831015611767575f19602084900360031b1b1692915050565b5f8060408385031215613e45575f80fd5b505080516020909101519092909150565b808202811582820484141761176757611767613d8b565b8181038181111561176757611767613d8b565b5f63ffffffff808316818103613e9857613e98613d8b565b6001019392505050565b5f60ff821660ff8103613eb757613eb7613d8b565b60010192915050565b5f81518060208401855e5f93019283525090919050565b5f611a138284613ec0565b80516020808301519190811015612f24575f1960209190910360031b1b16919050565b5f60208284031215613f15575f80fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114611a13575f80fd5b67ffffffffffffffff828116828216039080821115613f5957613f59613d8b565b5092915050565b7fff00000000000000000000000000000000000000000000000000000000000000861681527fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008560601b1660018201528284601583013760159201918201526035019392505050565b5f613fd48286613ec0565b93845250506020820152604001919050565b63ffffffff818116838216019080821115613f5957613f59613d8b565b63ffffffff828116828216039080821115613f5957613f59613d8b565b7f56616c75653a000000000000000000000000000000000000000000000000000081525f60078410614054576140546134db565b5060f89290921b6006830152600782015260270190565b634e487b7160e01b5f52605160045260245ffdfea2646970667358221220c003bba72a8b946dbd7e3e4876b1b5365cb4cd0117251b65bd045b5324c869f664736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15`\x0EW_\x80\xFD[Pa@\xB5\x80a\0\x1C_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\0)W_5`\xE0\x1C\x80c\xA9,\xB5\x01\x14a\0-W[_\x80\xFD[a\0@a\0;6`\x04a3\xE4V[a\0WV[`@Qa\0N\x92\x91\x90a6\x0EV[`@Q\x80\x91\x03\x90\xF3[a\0_a2wV[`@\x80Q`\xC0\x81\x01\x82R_\x80\x82R\x82Q``\x80\x82\x01\x85R\x82\x82R` \x80\x83\x01\x84\x90R\x82\x86\x01\x84\x90R\x84\x01\x91\x90\x91R\x92\x82\x01\x81\x90R\x91\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x91\x90\x91Ra\0\xB1\x87a;EV[\x91Pa\0\xC26\x87\x90\x03\x87\x01\x87a<}V[\x90P_a\0\xD2` \x87\x01\x87a=\x1CV[\x90Pa3Ra\x80\x10a\xFF\xFF\x83\x16\x10\x80\x15\x90a\0\xF3WPa\x80\x13a\xFF\xFF\x83\x16\x11\x15[\x15a\x01\x01WPa\x03\ra\x02\xEEV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xE0a\xFF\xFF\x83\x16\x01a\x015WPa\x04\x9Aa\x02\xEEV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xDFa\xFF\xFF\x83\x16\x01a\x01iWPa\x0C\x92a\x02\xEEV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xDEa\xFF\xFF\x83\x16\x01a\x01\x9DWPa\x10\x08a\x02\xEEV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xDDa\xFF\xFF\x83\x16\x01a\x01\xD1WPa\x10\x14a\x02\xEEV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xDCa\xFF\xFF\x83\x16\x01a\x02\x05WPa\x11ha\x02\xEEV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xD0a\xFF\xFF\x83\x16\x01a\x029WPa\x12\x17a\x02\xEEV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xCFa\xFF\xFF\x83\x16\x01a\x02mWPa\x12]a\x02\xEEV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xCEa\xFF\xFF\x83\x16\x01a\x02\xA1WPa\x12\xB1a\x02\xEEV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x15`$\x82\x01R\x7FINVALID_MEMORY_OPCODE\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01[`@Q\x80\x91\x03\x90\xFD[a\x03\0\x8A\x85\x85\x8A\x8A\x8A\x87c\xFF\xFF\xFF\xFF\x16V[PP\x96P\x96\x94PPPPPV[_a\x03\x1B` \x85\x01\x85a=\x1CV[\x90Pa\x03%a3\\V[_a\x031\x85\x85\x83a\x13!V[`\xC0\x8A\x01Q\x91\x93P\x91Pa\x03D\x83a\x13\xFBV[\x14a\x03\x91W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x10`$\x82\x01R\x7FBAD_GLOBAL_STATE\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[a\xFF\xFF\x83\x16a\x80\x10\x14\x80a\x03\xAAWPa\xFF\xFF\x83\x16a\x80\x11\x14[\x15a\x03\xCCWa\x03\xC7\x88\x88\x84\x89a\x03\xC2\x89\x87\x81\x8Da==V[a\x14\xA3V[a\x04~V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xEEa\xFF\xFF\x84\x16\x01a\x04\x01Wa\x03\xC7\x88\x83a\x16'V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xEDa\xFF\xFF\x84\x16\x01a\x046Wa\x03\xC7\x88\x83a\x16\xD4V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1A`$\x82\x01R\x7FINVALID_GLOBALSTATE_OPCODE\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[a\x04\x87\x82a\x13\xFBV[`\xC0\x90\x98\x01\x97\x90\x97RPPPPPPPPV[_a\x04\xB0a\x04\xAB\x87` \x01Qa\x17IV[a\x17mV[c\xFF\xFF\xFF\xFF\x16\x90P_a\x04\xC9a\x04\xAB\x88` \x01Qa\x17IV[c\xFF\xFF\xFF\xFF\x16\x90Pa\x04\xDC` \x83a=xV[\x15\x15\x80a\x05\x03WP` \x80\x87\x01QQg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90a\x05\x01\x90\x83\x90a=\x9FV[\x11[\x80a\x05\x17WPa\x05\x14` \x82a=xV[\x15\x15[\x15a\x05>W\x86`\x02[\x90\x81`\x02\x81\x11\x15a\x053Wa\x053a4\xDBV[\x81RPPPPa\x0C\x8AV[_a\x05J` \x83a=\xB2V[\x90P_\x80a\x05d`@Q\x80` \x01`@R\x80``\x81RP\x90V[` \x8A\x01Qa\x05v\x90\x85\x8A\x8A\x87a\x18)V[\x90\x94P\x90\x92P\x90P``_\x89\x89\x86\x81\x81\x10a\x05\x93Wa\x05\x93a=\xC5V[\x91\x90\x91\x015`\xF8\x1C\x91P\x85\x90Pa\x05\xA9\x81a=\xD9V[\x95PP\x8A` \x015_\x03a\x06\xE5W\x80`\xFF\x16_\x03a\x06\x9DW6_a\x05\xCF\x8B\x88\x81\x8Fa==V[\x91P\x91P\x85\x82\x82`@Qa\x05\xE4\x92\x91\x90a=\xF1V[`@Q\x80\x91\x03\x90 \x14a\x069W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0C`$\x82\x01R\x7FBAD_PREIMAGE\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[_a\x06E\x8B` a=\x9FV[\x90P\x81\x81\x11\x15a\x06RWP\x80[a\x06^\x81\x8C\x84\x86a==V[\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RP\x92\x97Pa\x0B\xF6\x95PPPPPPV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x16`$\x82\x01R\x7FUNKNOWN_PREIMAGE_PROOF\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[\x8A` \x015`\x01\x03a\x07\xF2W`\xFF\x81\x16\x15a\x07BW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x16`$\x82\x01R\x7FUNKNOWN_PREIMAGE_PROOF\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[6_a\x07P\x8B\x88\x81\x8Fa==V[\x91P\x91P\x85`\x02\x83\x83`@Qa\x07g\x92\x91\x90a=\xF1V[` `@Q\x80\x83\x03\x81\x85Z\xFA\x15\x80\x15a\x07\x82W=_\x80>=_\xFD[PPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x07\xA5\x91\x90a>\0V[\x14a\x069W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0C`$\x82\x01R\x7FBAD_PREIMAGE\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[\x8A` \x015`\x02\x03a\x0B\xAEW`\xFF\x81\x16\x15a\x08OW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x16`$\x82\x01R\x7FUNKNOWN_PREIMAGE_PROOF\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[6_a\x08]\x8B\x88\x81\x8Fa==V[\x90\x92P\x90P\x85a\x08p` _\x84\x86a==V[a\x08y\x91a>\x17V[\x14a\x08\xC6W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x14`$\x82\x01R\x7FKZG_PROOF_WRONG_HASH\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[_\x80_\x80`\ns\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x86\x86`@Qa\x08\xF2\x92\x91\x90a=\xF1V[_`@Q\x80\x83\x03\x81\x85Z\xFA\x91PP=\x80_\x81\x14a\t*W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\t/V[``\x91P[P\x91P\x91P\x81a\t\x81W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x11`$\x82\x01R\x7FINVALID_KZG_PROOF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[_\x81Q\x11a\t\xD1W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x16`$\x82\x01R\x7FKZG_PRECOMPILE_MISSING\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[\x80\x80` \x01\x90Q\x81\x01\x90a\t\xE5\x91\x90a>4V[\x90\x94P\x92PP\x7Fs\xED\xA7S)\x9D}H39\xD8\x08\t\xA1\xD8\x05S\xBD\xA4\x02\xFF\xFE[\xFE\xFF\xFF\xFF\xFF\0\0\0\x01\x82\x14\x90Pa\n\\W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x13`$\x82\x01R\x7FUNKNOWN_BLS_MODULUS\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[a\ng\x82` a>VV[\x8C\x10\x15a\x0B\xA5W_\x80a\n{` \x8Fa=\xB2V[\x90P`\x01[\x84\x81\x10\x15a\n\xAAW`\x01\x92\x83\x1B\x92\x82\x81\x16\x90\x03a\n\x9EW`\x01\x83\x17\x92P[`\x01\x91\x82\x1C\x91\x1Ba\n\x80V[P_a\n\xBB\x85d\x01\0\0\0\0a=\xB2V[\x90Pa\n\xC7\x83\x82a>VV[\x90P_a\n\xF5\x7F\x16\xA2\xA1\x9E\xDF\xE8\x1F \xD0\x9Bh\x19\"\xC8\x13\xB4\xB66\x83P\x8C\"\x80\xB98)\x97\x1FC\x9F\r+\x83\x87a\x18\xD0V[\x90P\x80a\x0B\x06`@` \x8A\x8Ca==V[a\x0B\x0F\x91a>\x17V[\x14a\x0B\\W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x11`$\x82\x01R\x7FKZG_PROOF_WRONG_Z\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[a\x0Bj```@\x89\x8Ba==V[\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RP\x92\x9CPPPPPPPP[PPPPa\x0B\xF6V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x15`$\x82\x01R\x7FUNKNOWN_PREIMAGE_TYPE\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[_[\x82Q\x81\x10\x15a\x0C/Wa\x0C%\x85\x82\x85\x84\x81Q\x81\x10a\x0C\x18Wa\x0C\x18a=\xC5V[\x01` \x01Q`\xF8\x1Ca\x1A\x1AV[\x94P`\x01\x01a\x0B\xF8V[Pa\x0C;\x83\x87\x86a\x1A\xA5V[` \x8D\x81\x01Q`@\x90\x81\x01\x92\x90\x92R\x83Q\x82Q\x80\x84\x01\x84R_\x80\x82R\x90\x83\x01\x81\x90R\x83Q\x80\x85\x01\x90\x94R\x83Rc\xFF\xFF\xFF\xFF\x16\x90\x82\x01Ra\x0C\x81\x90[` \x8F\x01Q\x90a\x1B>V[PPPPPPPP[PPPPPPV[_a\x0C\xA3a\x04\xAB\x87` \x01Qa\x17IV[c\xFF\xFF\xFF\xFF\x16\x90P_a\x0C\xBCa\x04\xAB\x88` \x01Qa\x17IV[c\xFF\xFF\xFF\xFF\x16\x90P_a\x0C\xDAa\x0C\xD5\x89` \x01Qa\x17IV[a\x1BNV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P` \x86\x015\x15\x80\x15a\x0C\xF9WP\x885\x81\x10\x15[\x15a\r!W\x87`\x02[\x90\x81`\x02\x81\x11\x15a\r\x15Wa\r\x15a4\xDBV[\x81RPPPPPa\x0C\x8AV[` \x80\x88\x01QQg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90a\r>\x90\x84\x90a=\x9FV[\x11\x80a\rSWPa\rP` \x83a=xV[\x15\x15[\x15a\r`W\x87`\x02a\r\x02V[_a\rl` \x84a=\xB2V[\x90P_\x80a\r\x86`@Q\x80` \x01`@R\x80``\x81RP\x90V[` \x8B\x01Qa\r\x98\x90\x85\x8B\x8B\x87a\x18)V[\x90\x94P\x90\x92P\x90P\x88\x88\x84\x81\x81\x10a\r\xB2Wa\r\xB2a=\xC5V[\x90\x91\x015\x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x15\x90Pa\x0E'W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x13`$\x82\x01R\x7FUNKNOWN_INBOX_PROOF\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[\x82a\x0E1\x81a=\xD9V[\x93Pa3R\x90P_` \x8C\x015a\x0ELWa\x1C\x0F\x91Pa\x0E\x8BV[`\x01\x8C` \x015\x03a\x0EbWa\x1Fa\x91Pa\x0E\x8BV[\x8D`\x02[\x90\x81`\x02\x81\x11\x15a\x0EyWa\x0Eya4\xDBV[\x81RPPPPPPPPPPPa\x0C\x8AV[a\x0E\xAB\x8F\x88\x8D\x8D\x89\x90\x80\x92a\x0E\xA2\x93\x92\x91\x90a==V[\x86c\xFF\xFF\xFF\xFF\x16V[\x90P\x80a\x0E\xBAW\x8D`\x02a\x0EfV[PP\x82\x88\x10\x15a\x0F\x0CW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x11`$\x82\x01R\x7FBAD_MESSAGE_PROOF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[_a\x0F\x17\x84\x8Aa>mV[\x90P_[` \x81c\xFF\xFF\xFF\xFF\x16\x10\x80\x15a\x0F?WP\x81a\x0F=c\xFF\xFF\xFF\xFF\x83\x16\x8Ba=\x9FV[\x10[\x15a\x0F\x98Wa\x0F\x84\x84c\xFF\xFF\xFF\xFF\x83\x16\x8D\x8D\x82a\x0F\\\x8F\x8Ca=\x9FV[a\x0Ff\x91\x90a=\x9FV[\x81\x81\x10a\x0FuWa\x0Fua=\xC5V[\x91\x90\x91\x015`\xF8\x1C\x90Pa\x1A\x1AV[\x93P\x80a\x0F\x90\x81a>\x80V[\x91PPa\x0F\x1BV[a\x0F\xA3\x83\x87\x86a\x1A\xA5V[` \x8E\x01Q`@\x01Ra\x0F\xF7a\x0F\xE4\x82`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01RP`@\x80Q\x80\x82\x01\x90\x91R_\x81Rc\xFF\xFF\xFF\xFF\x90\x91\x16` \x82\x01R\x90V[\x8F` \x01Qa\x1B>\x90\x91\x90c\xFF\xFF\xFF\xFF\x16V[PPPPPPPPPPPPPPPV[PP`\x01\x90\x92RPPPV[_`@Q\x80`@\x01`@R\x80`\x13\x81R` \x01\x7FModule merkle tree:\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x90P_\x86a\x01`\x01Q\x90P_a\x10ga\x04\xAB\x89` \x01Qa\x17IV[c\xFF\xFF\xFF\xFF\x16\x90Pa\x10\x86\x81\x88` \x01Qa\">\x90\x91\x90c\xFF\xFF\xFF\xFF\x16V[a\x10\x92W\x87`\x02a\r\x02V[_\x80a\x10\xB0a\x10\xA2` \x85a=\xB2V[` \x8B\x01Q\x90\x89\x89_a\x18)V[P\x91P\x91P_\x80a\x10\xC3\x8C\x84\x8B\x8Ba\"sV[\x92PP\x91P_a\x10\xDE\x83`\x01a\x10\xD9\x91\x90a=\x9FV[a$\xC7V[\x90P\x80\x15a\x11\x08Wa\x10\xFD\x87a\x10\xF5\x85`\x01a=\x9FV[\x87_\x8Ca$\xE6V[a\x01`\x8E\x01Ra\x11&V[a\x11\x1Fa\x11\x16\x84`\x01a=\x9FV[\x83\x90\x87\x8Ba%\x8FV[a\x01`\x8E\x01R[a\x0C\x81a\x0Cva\x117\x85`\x01a=\x9FV[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01RP`@\x80Q\x80\x82\x01\x90\x91R_\x81Rc\xFF\xFF\xFF\xFF\x90\x91\x16` \x82\x01R\x90V[`@\x80Q\x80\x82\x01\x90\x91R`\x13\x81R\x7FModule merkle tree:\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R_\x80a\x11\xAA\x88\x82\x87\x87a\"sV[P\x91P\x91P_a\x11\xB9\x83a$\xC7V[\x90P\x80\x15a\x11\xF8W\x81Q\x80Qa\x11\xD1\x90`\x01\x90a>mV[\x81Q\x81\x10a\x11\xE1Wa\x11\xE1a=\xC5V[` \x02` \x01\x01Q\x89a\x01`\x01\x81\x81RPPa\x12\x0BV[a\x12\x04\x82\x84_\x87a%\x8FV[a\x01`\x8A\x01R[PPPPPPPPPPV[a\x01@\x85\x01Q_\x19\x14a\x12CW\x84`\x02[\x90\x81`\x02\x81\x11\x15a\x12;Wa\x12;a4\xDBV[\x90RPa\x0C\x8AV[a\x12P\x85`\xA0\x01Qa&\x99V[a\x0C\x8A\x85`@\x01Qa&\x99V[a\x01@\x85\x01Q_\x19\x14a\x12rW\x84`\x02a\x12(V[`\xA0\x85\x01QQ`\x01\x01a\x12\x87W\x84`\x02a\x12(V[a\x12\x96\x85`@\x01Q\x83\x83a'\x0BV[`\xA0\x85\x01Qa\x0C\x8A\x90a\x12\xAC\x83`@\x81\x87a==V[a'\x0BV[`\xA0\x85\x01QQ`\x01\x01a\x12\xC6W\x84`\x02a\x12(V[\x82` \x015_\x03a\x12\xF3Wa\x01@\x85\x01Q`\x01\x01a\x12\xE6W\x84`\x02a\x12(V[_\x19a\x01@\x86\x01Ra\x13\x18V[a\x01@\x85\x01Q_\x19\x14a\x13\x08W\x84`\x02a\x12(V[a\x13\x16\x85` \x85\x015a(\x92V[P[a\x0C\x8A\x85a)\x01V[a\x13)a3\\V[\x81a\x132a3\x81V[a\x13:a3\x81V[_[`\x02`\xFF\x82\x16\x10\x15a\x13\x84Wa\x13S\x88\x88\x86a)\x83V[\x84\x83`\xFF\x16`\x02\x81\x10a\x13hWa\x13ha=\xC5V[` \x02\x01\x91\x90\x91R\x93P\x80a\x13|\x81a>\xA2V[\x91PPa\x13<V[P_[`\x02`\xFF\x82\x16\x10\x15a\x13\xDEWa\x13\x9E\x88\x88\x86a)\x9EV[\x83\x83`\xFF\x16`\x02\x81\x10a\x13\xB3Wa\x13\xB3a=\xC5V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x93\x16` \x93\x90\x93\x02\x01\x91\x90\x91R\x93P\x80a\x13\xD6\x81a>\xA2V[\x91PPa\x13\x87V[P`@\x80Q\x80\x82\x01\x90\x91R\x91\x82R` \x82\x01R\x95\x90\x94P\x92PPPV[\x80Q\x80Q` \x91\x82\x01Q\x82\x84\x01Q\x80Q\x90\x84\x01Q`@Q\x7FGlobal state:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x95\x81\x01\x95\x90\x95R`-\x85\x01\x93\x90\x93R`M\x84\x01\x91\x90\x91R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xC0\x91\x82\x1B\x81\x16`m\x85\x01R\x91\x90\x1B\x16`u\x82\x01R_\x90`}\x01[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P\x91\x90PV[_a\x14\xB4a\x04\xAB\x88` \x01Qa\x17IV[c\xFF\xFF\xFF\xFF\x16\x90P_a\x14\xCDa\x04\xAB\x89` \x01Qa\x17IV[\x90P`\x02c\xFF\xFF\xFF\xFF\x82\x16\x10a\x14\xE5W\x87`\x02a\x05 V[` \x87\x01Qa\x14\xF4\x90\x83a\">V[a\x15\0W\x87`\x02a\x05 V[_a\x15\x0C` \x84a=\xB2V[\x90P_\x80a\x15&`@Q\x80` \x01`@R\x80``\x81RP\x90V[` \x8B\x01Qa\x158\x90\x85\x8A\x8A\x87a\x18)V[\x90\x94P\x90\x92P\x90Pa\x80\x10a\x15P` \x8B\x01\x8Ba=\x1CV[a\xFF\xFF\x16\x03a\x15\x93Wa\x15\x85\x84\x8B_\x01Q\x87c\xFF\xFF\xFF\xFF\x16`\x02\x81\x10a\x15xWa\x15xa=\xC5V[` \x02\x01Q\x83\x91\x90a\x1A\xA5V[` \x8C\x01Q`@\x01Ra\x16\x19V[a\x80\x11a\x15\xA3` \x8B\x01\x8Ba=\x1CV[a\xFF\xFF\x16\x03a\x15\xD1W\x89Q\x82\x90c\xFF\xFF\xFF\xFF\x87\x16`\x02\x81\x10a\x15\xC7Wa\x15\xC7a=\xC5V[` \x02\x01Ra\x16\x19V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x17`$\x82\x01R\x7FBAD_GLOBAL_STATE_OPCODE\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[PPPPPPPPPPPPV[_a\x168a\x04\xAB\x84` \x01Qa\x17IV[\x90P`\x02c\xFF\xFF\xFF\xFF\x82\x16\x10a\x16gW\x82`\x02[\x90\x81`\x02\x81\x11\x15a\x16_Wa\x16_a4\xDBV[\x90RPPPPV[a\x16\xCFa\x16\xC4\x83` \x01Q\x83c\xFF\xFF\xFF\xFF\x16`\x02\x81\x10a\x16\x89Wa\x16\x89a=\xC5V[` \x02\x01Q`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01RP`@\x80Q\x80\x82\x01\x90\x91R`\x01\x81Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16` \x82\x01R\x90V[` \x85\x01Q\x90a\x1B>V[PPPV[_a\x16\xE5a\x0C\xD5\x84` \x01Qa\x17IV[\x90P_a\x16\xF8a\x04\xAB\x85` \x01Qa\x17IV[\x90P`\x02c\xFF\xFF\xFF\xFF\x82\x16\x10a\x17\x12WPP`\x02\x90\x91RPV[\x81\x83` \x01Q\x82c\xFF\xFF\xFF\xFF\x16`\x02\x81\x10a\x17/Wa\x17/a=\xC5V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x92\x16` \x92\x90\x92\x02\x01RPPPPV[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x81Qa\x17g\x90a)\xFAV[\x92\x91PPV[` \x81\x01Q_\x90\x81\x83Q`\x06\x81\x11\x15a\x17\x88Wa\x17\x88a4\xDBV[\x14a\x17\xD5W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FNOT_I32\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[d\x01\0\0\0\0\x81\x10a\x17gW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FBAD_I32\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[_\x80a\x18A`@Q\x80` \x01`@R\x80``\x81RP\x90V[\x83\x91Pa\x18O\x86\x86\x84a)\x83V[\x90\x93P\x91Pa\x18_\x86\x86\x84a*\xFBV[\x92P\x90P_a\x18o\x82\x89\x86a\x1A\xA5V[\x90P\x88`@\x01Q\x81\x14a\x18\xC4W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0E`$\x82\x01R\x7FWRONG_MEM_ROOT\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[P\x95P\x95P\x95\x92PPPV[`@\x80Q` \x80\x82\x01\x81\x90R\x81\x83\x01\x81\x90R``\x82\x01R`\x80\x81\x01\x85\x90R`\xA0\x81\x01\x84\x90R`\xC0\x80\x82\x01\x84\x90R\x82Q\x80\x83\x03\x90\x91\x01\x81R`\xE0\x90\x91\x01\x91\x82\x90R_\x91\x82\x90\x81\x90`\x05\x90a\x19$\x90\x85\x90a>\xD7V[_`@Q\x80\x83\x03\x81\x85Z\xFA\x91PP=\x80_\x81\x14a\x19\\W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x19aV[``\x91P[P\x91P\x91P\x81a\x19\xB3W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\r`$\x82\x01R\x7FMODEXP_FAILED\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[\x80Q` \x14a\x1A\x04W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x13`$\x82\x01R\x7FMODEXP_WRONG_LENGTH\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[a\x1A\r\x81a>\xE2V[\x93PPPP[\x93\x92PPPV[_` \x83\x10a\x1AkW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x15`$\x82\x01R\x7FBAD_SET_LEAF_BYTE_IDX\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[_\x83a\x1Ay`\x01` a>mV[a\x1A\x83\x91\x90a>mV[a\x1A\x8E\x90`\x08a>VV[`\xFF\x84\x81\x16\x82\x1B\x91\x1B\x19\x86\x16\x17\x91PP\x93\x92PPPV[`@Q\x7FMemory leaf:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`,\x81\x01\x82\x90R_\x90\x81\x90`L\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90Pa\x1B5\x85\x85\x83`@Q\x80`@\x01`@R\x80`\x13\x81R` \x01\x7FMemory merkle tree:\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RPa%\x8FV[\x95\x94PPPPPV[\x81Qa\x1BJ\x90\x82a+\xC8V[PPV[` \x81\x01Q_\x90`\x01\x83Q`\x06\x81\x11\x15a\x1BjWa\x1Bja4\xDBV[\x14a\x1B\xB7W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FNOT_I64\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[h\x01\0\0\0\0\0\0\0\0\x81\x10a\x17gW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FBAD_I64\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[_`(\x82\x10\x15a\x1CaW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x12`$\x82\x01R\x7FBAD_SEQINBOX_PROOF\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[_a\x1Cn\x84\x84` a)\x9EV[P\x80\x91PP_\x84\x84`@Qa\x1C\x84\x92\x91\x90a=\xF1V[`@Q\x90\x81\x90\x03\x90 \x90P_\x80g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x88\x16\x15a\x1DYWa\x1C\xB1`@\x8A\x01` \x8B\x01a?\x05V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x16\xBFUya\x1C\xD7`\x01\x8Ba?8V[`@Q\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xE0\x84\x90\x1B\x16\x81Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16`\x04\x82\x01R`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x1D2W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x1DV\x91\x90a>\0V[\x91P[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x16\x15a\x1E!Wa\x1Dy`@\x8A\x01` \x8B\x01a?\x05V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xD5q\x9D\xC2a\x1D\x9F`\x01\x87a?8V[`@Q\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xE0\x84\x90\x1B\x16\x81Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16`\x04\x82\x01R`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x1D\xFAW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x1E\x1E\x91\x90a>\0V[\x90P[`@\x80Q` \x81\x01\x84\x90R\x90\x81\x01\x84\x90R``\x81\x01\x82\x90R_\x90`\x80\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P\x89` \x01` \x81\x01\x90a\x1Ei\x91\x90a?\x05V[`@Q\x7F\x16\xBFUy\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x8B\x16`\x04\x82\x01Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91\x90\x91\x16\x90c\x16\xBFUy\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x1E\xDDW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x1F\x01\x91\x90a>\0V[\x81\x14a\x1FOW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x14`$\x82\x01R\x7FBAD_SEQINBOX_MESSAGE\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[`\x01\x95PPPPPP[\x94\x93PPPPV[_`q\x82\x10\x15a\x1F\xB3W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x11`$\x82\x01R\x7FBAD_DELAYED_PROOF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x85\x16\x15a |Wa\x1F\xD4`@\x87\x01` \x88\x01a?\x05V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xD5q\x9D\xC2a\x1F\xFA`\x01\x88a?8V[`@Q\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xE0\x84\x90\x1B\x16\x81Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16`\x04\x82\x01R`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a UW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a y\x91\x90a>\0V[\x90P[_a \x8A\x84`q\x81\x88a==V[`@Qa \x98\x92\x91\x90a=\xF1V[`@Q\x80\x91\x03\x90 \x90P_\x85\x85_\x81\x81\x10a \xB5Wa \xB5a=\xC5V[\x90P\x015`\xF8\x1C`\xF8\x1B\x90P_a \xCE\x87\x87`\x01a,\xADV[P\x90P_\x82\x82a \xE2`q`!\x8B\x8Da==V[\x87`@Q` \x01a \xF7\x95\x94\x93\x92\x91\x90a?`V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x82\x82R\x80Q` \x91\x82\x01 \x83\x82\x01\x89\x90R\x83\x83\x01\x81\x90R\x82Q\x80\x85\x03\x84\x01\x81R``\x90\x94\x01\x90\x92R\x82Q\x92\x01\x91\x90\x91 \x90\x91Pa!G`@\x8C\x01` \x8D\x01a?\x05V[`@Q\x7F\xD5q\x9D\xC2\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x8C\x16`\x04\x82\x01Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91\x90\x91\x16\x90c\xD5q\x9D\xC2\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a!\xBBW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a!\xDF\x91\x90a>\0V[\x81\x14a\"-W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x13`$\x82\x01R\x7FBAD_DELAYED_MESSAGE\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[P`\x01\x9A\x99PPPPPPPPPPV[\x81Q_\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\"W\x83` a=\x9FV[\x11\x15\x80\x15a\x1A\x13WPa\"k` \x83a=xV[\x15\x93\x92PPPV[_a\"\x8A`@Q\x80` \x01`@R\x80``\x81RP\x90V[`@\x80Q` \x81\x01\x90\x91R``\x81R`@\x80Q\x80\x82\x01\x90\x91R`\x13\x81R\x7FModule merkle tree:\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01Ra\x01`\x88\x01Qa#$`@\x80Q`\xC0\x81\x01\x82R_\x80\x82R\x82Q``\x81\x01\x84R\x81\x81R` \x81\x81\x01\x83\x90R\x93\x81\x01\x91\x90\x91R\x90\x91\x82\x01\x90\x81R_` \x82\x01\x81\x90R`@\x82\x01\x81\x90R``\x82\x01\x81\x90R`\x80\x90\x91\x01R\x90V[_a#0\x89\x89\x8Ca,\xF6V[\x9AP\x91Pa#?\x89\x89\x8Ca-\xF8V[\x9AP\x90Pa#N\x89\x89\x8Ca*\xFBV[\x9APc\xFF\xFF\xFF\xFF\x80\x83\x16\x98P\x90\x96P_\x90a#o\x90\x88\x90\x8A\x90\x86\x90a.G\x16V[\x90P\x83\x81\x14a#\xC0W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x13`$\x82\x01R\x7FWRONG_ROOT_FOR_LEAF\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[PPP_a#\xD4\x86`\x01a\x10\xD9\x91\x90a=\x9FV[\x90P\x80\x15a$@Wa#\xE7\x86`\x01a=\x9FV[\x85QQ`\x01\x90\x1B\x14a$;W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\n`$\x82\x01R\x7FWRONG_LEAF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[a$\xBAV[a$K\x88\x88\x8Ba*\xFBV[\x99P\x93P_a$ga$^\x88`\x01a=\x9FV[\x86\x90_\x87a%\x8FV[\x90P\x82\x81\x14a$\xB8W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x13`$\x82\x01R\x7FWRONG_ROOT_FOR_ZERO\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[P[PPP\x94P\x94P\x94\x91PPV[_\x81\x15\x80\x15\x90a\x17gWPa$\xDD`\x01\x83a>mV[\x82\x16\x15\x92\x91PPV[_\x83\x85[`\x01\x81\x11\x15a%WW\x83\x82\x86`@Q` \x01a%\x08\x93\x92\x91\x90a?\xC9V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x91P\x83\x85\x86`@Q` \x01a%5\x93\x92\x91\x90a?\xC9V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R\x80Q` \x90\x91\x01 \x94P`\x01\x1Ca$\xEAV[\x83\x88\x83`@Q` \x01a%l\x93\x92\x91\x90a?\xC9V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x92PPP\x95\x94PPPPPV[\x81_[\x85QQ\x81\x10\x15a&JW\x84`\x01\x16_\x03a%\xF4W\x82\x82\x87_\x01Q\x83\x81Q\x81\x10a%\xBDWa%\xBDa=\xC5V[` \x02` \x01\x01Q`@Q` \x01a%\xD7\x93\x92\x91\x90a?\xC9V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x91Pa&>V[\x82\x86_\x01Q\x82\x81Q\x81\x10a&\nWa&\na=\xC5V[` \x02` \x01\x01Q\x83`@Q` \x01a&%\x93\x92\x91\x90a?\xC9V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x91P[`\x01\x94\x85\x1C\x94\x01a%\x92V[P\x83\x15a\x1FYW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0F`$\x82\x01R\x7FPROOF_TOO_SHORT\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[\x80Q_\x19\x14a'\x06W\x80Q` \x80\x83\x01Q`@Qa&\xE9\x93\x92\x01\x7Fcothread:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\t\x81\x01\x92\x90\x92R`)\x82\x01R`I\x01\x90V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R\x80Q` \x91\x82\x01 \x90\x82\x01R[_\x90RV[_\x80\x80a'\x19\x85\x85\x85a)\x83V[\x93P\x91Pa'(\x85\x85\x85a)\x83V[\x93P\x90P`\x01\x82\x01a'\xD9W\x80\x15a'\x82W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x14`$\x82\x01R\x7FWRONG_COTHREAD_EMPTY\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[` \x86\x01Q\x15a'\xD4W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x14`$\x82\x01R\x7FWRONG_COTHREAD_EMPTY\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[a(\x85V[\x85` \x01Q\x82\x82`@Q` \x01a(\"\x92\x91\x90\x7Fcothread:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\t\x81\x01\x92\x90\x92R`)\x82\x01R`I\x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x14a(\x85W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x12`$\x82\x01R\x7FWRONG_COTHREAD_POP\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[` \x86\x01R\x90\x93RPPPV[a\x01@\x82\x01Q_\x90_\x19\x14a(\xA8WP_a\x17gV[_`@\x84`\xE0\x01Qc\xFF\xFF\xFF\xFF\x16\x90\x1B\x90P` \x84a\x01\0\x01Qc\xFF\xFF\xFF\xFF\x16\x90\x1B\x81\x17\x90P`\x01\x83\x85a\x01 \x01Qa(\xE1\x91\x90a?\xE6V[a(\xEB\x91\x90a@\x03V[c\xFF\xFF\xFF\xFF\x16\x17a\x01@\x84\x01RP`\x01\x92\x91PPV[`@\x81\x01QQ`\xA0\x82\x01QQ_\x19\x81\x14\x80a)\x1CWP_\x19\x82\x14[\x15a))W\x82`\x02a\x16LV[a)6\x83`\x80\x01Qa.\x91V[`\xA0\x84\x01QR` \x83\x01Qa)J\x90a/*V[`@\x84\x01QR`\x80\x83\x01Qa)e\x90\x82` \x82\x01R``\x90RV[P` \x91\x82\x01Q\x80\x83\x01\x91\x90\x91R`@\x80Q\x92\x83\x01\x90R``\x82RRV[_\x81\x81a)\x91\x86\x86\x84a,\xADV[\x90\x97\x90\x96P\x94PPPPPV[_\x81\x81[`\x08\x81\x10\x15a)\xF1W`\x08\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x1B\x92P\x85\x85\x83\x81\x81\x10a)\xCEWa)\xCEa=\xC5V[\x91\x90\x91\x015`\xF8\x1C\x93\x90\x93\x17\x92P\x81a)\xE6\x81a=\xD9V[\x92PP`\x01\x01a)\xA2V[P\x93P\x93\x91PPV[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x81Q\x80Qa*\x1D\x90`\x01\x90a>mV[\x81Q\x81\x10a*-Wa*-a=\xC5V[` \x02` \x01\x01Q\x90P_`\x01\x83_\x01QQa*I\x91\x90a>mV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a*aWa*aa7\xA3V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a*\xA5W\x81` \x01[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x81R` \x01\x90`\x01\x90\x03\x90\x81a*\x7FW\x90P[P\x90P_[\x81Q\x81\x10\x15a*\xF4W\x83Q\x80Q\x82\x90\x81\x10a*\xC7Wa*\xC7a=\xC5V[` \x02` \x01\x01Q\x82\x82\x81Q\x81\x10a*\xE1Wa*\xE1a=\xC5V[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a*\xAAV[P\x90\x91R\x90V[`@\x80Q` \x81\x01\x90\x91R``\x81R\x81_a+\x17\x86\x86\x84a/\xB6V[\x92P\x90P_`\xFF\x82\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a+8Wa+8a7\xA3V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a+aW\x81` \x01` \x82\x02\x806\x837\x01\x90P[P\x90P_[\x82`\xFF\x16\x81`\xFF\x16\x10\x15a+\xACWa+\x7F\x88\x88\x86a)\x83V[\x83\x83`\xFF\x16\x81Q\x81\x10a+\x94Wa+\x94a=\xC5V[` \x90\x81\x02\x91\x90\x91\x01\x01\x91\x90\x91R\x93P`\x01\x01a+fV[P`@Q\x80` \x01`@R\x80\x82\x81RP\x93PPP\x93P\x93\x91PPV[\x81QQ_\x90a+\xD8\x90`\x01a=\x9FV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a+\xF0Wa+\xF0a7\xA3V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a,4W\x81` \x01[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x81R` \x01\x90`\x01\x90\x03\x90\x81a,\x0EW\x90P[P\x90P_[\x83QQ\x81\x10\x15a,\x84W\x83Q\x80Q\x82\x90\x81\x10a,WWa,Wa=\xC5V[` \x02` \x01\x01Q\x82\x82\x81Q\x81\x10a,qWa,qa=\xC5V[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a,9V[P\x81\x81\x84_\x01QQ\x81Q\x81\x10a,\x9CWa,\x9Ca=\xC5V[` \x90\x81\x02\x91\x90\x91\x01\x01R\x90\x91RPV[_\x81\x81[` \x81\x10\x15a)\xF1W`\x08\x83\x90\x1B\x92P\x85\x85\x83\x81\x81\x10a,\xD3Wa,\xD3a=\xC5V[\x91\x90\x91\x015`\xF8\x1C\x93\x90\x93\x17\x92P\x81a,\xEB\x81a=\xD9V[\x92PP`\x01\x01a,\xB1V[`@\x80Q`\xC0\x81\x01\x82R_\x80\x82R\x82Q``\x80\x82\x01\x85R\x82\x82R` \x80\x83\x01\x84\x90R\x82\x86\x01\x84\x90R\x84\x01\x91\x90\x91R\x92\x82\x01\x81\x90R\x91\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x91\x90\x91R`@\x80Q``\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R\x83\x91\x90_\x80_\x80a-l\x8B\x8B\x89a)\x83V[\x97P\x95Pa-{\x8B\x8B\x89a/\xEBV[\x97P\x94Pa-\x8A\x8B\x8B\x89a)\x83V[\x97P\x93Pa-\x99\x8B\x8B\x89a)\x83V[\x97P\x92Pa-\xA8\x8B\x8B\x89a)\x83V[\x97P\x91Pa-\xB7\x8B\x8B\x89a-\xF8V[`@\x80Q`\xC0\x81\x01\x82R\x98\x89R` \x89\x01\x97\x90\x97R\x95\x87\x01\x94\x90\x94RP``\x85\x01\x91\x90\x91R`\x80\x84\x01Rc\xFF\xFF\xFF\xFF\x16`\xA0\x83\x01R\x90\x96\x90\x95P\x93PPPPV[_\x81\x81[`\x04\x81\x10\x15a)\xF1W`\x08\x83c\xFF\xFF\xFF\xFF\x16\x90\x1B\x92P\x85\x85\x83\x81\x81\x10a.$Wa.$a=\xC5V[\x91\x90\x91\x015`\xF8\x1C\x93\x90\x93\x17\x92P\x81a.<\x81a=\xD9V[\x92PP`\x01\x01a-\xFCV[_a\x1FY\x84\x84a.V\x85a0eV[`@Q\x80`@\x01`@R\x80`\x13\x81R` \x01\x7FModule merkle tree:\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RPa%\x8FV[` \x81\x01Q_[\x82QQ\x81\x10\x15a/$Wa.\xC7\x83_\x01Q\x82\x81Q\x81\x10a.\xBAWa.\xBAa=\xC5V[` \x02` \x01\x01Qa1\rV[`@Q\x7FStack frame stack:\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`2\x81\x01\x91\x90\x91R`R\x81\x01\x83\x90R`r\x01`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R\x80Q` \x90\x91\x01 \x91P`\x01\x01a.\x98V[P\x91\x90PV[` \x81\x01Q\x81QQQ_[\x81\x81\x10\x15a/\xAFW\x83Qa/R\x90a/M\x90\x83a1\xA4V[a1\xDBV[`@Q\x7FValue stack:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`,\x81\x01\x91\x90\x91R`L\x81\x01\x84\x90R`l\x01`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R\x80Q` \x90\x91\x01 \x92P`\x01\x01a/5V[PP\x91\x90PV[_\x81\x84\x84\x82\x81\x81\x10a/\xCAWa/\xCAa=\xC5V[\x91\x90\x91\x015`\xF8\x1C\x92P\x81\x90Pa/\xE0\x81a=\xD9V[\x91PP\x93P\x93\x91PPV[`@\x80Q``\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x91\x90\x91R\x81_\x80\x80a0\x16\x88\x88\x86a)\x9EV[\x94P\x92Pa0%\x88\x88\x86a)\x9EV[\x94P\x91Pa04\x88\x88\x86a)\x83V[`@\x80Q``\x81\x01\x82Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x96\x87\x16\x81R\x94\x90\x95\x16` \x85\x01R\x93\x83\x01RP\x96\x90\x95P\x93PPPPV[_\x81_\x01Qa0w\x83` \x01Qa1\xF6V[`@\x80\x85\x01Q``\x86\x01Q`\x80\x87\x01Q`\xA0\x88\x01Q\x93Qa\x14\x86\x96\x95\x94\x90` \x01\x7FModule:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x07\x81\x01\x96\x90\x96R`'\x86\x01\x94\x90\x94R`G\x85\x01\x92\x90\x92R`g\x84\x01R`\x87\x83\x01R`\xE0\x1B\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16`\xA7\x82\x01R`\xAB\x01\x90V[_a1\x1A\x82_\x01Qa1\xDBV[` \x80\x84\x01Q`@\x80\x86\x01Q``\x87\x01Q\x91Q\x7FStack frame:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x94\x81\x01\x94\x90\x94R`,\x84\x01\x94\x90\x94R`L\x83\x01\x91\x90\x91R\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xE0\x93\x84\x1B\x81\x16`l\x84\x01R\x92\x1B\x90\x91\x16`p\x82\x01R`t\x01a\x14\x86V[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x82Q\x80Q\x83\x90\x81\x10a1\xCBWa1\xCBa=\xC5V[` \x02` \x01\x01Q\x90P\x92\x91PPV[_\x81_\x01Q\x82` \x01Q`@Q` \x01a\x14\x86\x92\x91\x90a@ V[\x80Q` \x80\x83\x01Q`@\x80\x85\x01Q\x90Q\x7FMemory:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x93\x81\x01\x93\x90\x93R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xC0\x94\x85\x1B\x81\x16`'\x85\x01R\x91\x90\x93\x1B\x16`/\x82\x01R`7\x81\x01\x91\x90\x91R_\x90`W\x01a\x14\x86V[`@\x80Qa\x01\x80\x81\x01\x90\x91R\x80_\x81R` \x01a2\xAA`@\x80Q``\x80\x82\x01\x83R\x91\x81\x01\x91\x82R\x90\x81R_` \x82\x01R\x90V[\x81R`@\x80Q\x80\x82\x01\x82R_\x80\x82R` \x80\x83\x01\x91\x90\x91R\x83\x01R\x01a2\xE6`@\x80Q``\x80\x82\x01\x83R\x91\x81\x01\x91\x82R\x90\x81R_` \x82\x01R\x90V[\x81R` \x01a3\n`@Q\x80`@\x01`@R\x80``\x81R` \x01_\x80\x19\x16\x81RP\x90V[\x81R`@\x80Q\x80\x82\x01\x82R_\x80\x82R` \x80\x83\x01\x82\x90R\x84\x01\x91\x90\x91R\x90\x82\x01\x81\x90R``\x82\x01\x81\x90R`\x80\x82\x01\x81\x90R`\xA0\x82\x01\x81\x90R`\xC0\x82\x01\x81\x90R`\xE0\x90\x91\x01R\x90V[a3Za@kV[V[`@Q\x80`@\x01`@R\x80a3oa3\x81V[\x81R` \x01a3|a3\x81V[\x90R\x90V[`@Q\x80`@\x01`@R\x80`\x02\x90` \x82\x02\x806\x837P\x91\x92\x91PPV[_\x80\x83`\x1F\x84\x01\x12a3\xAFW_\x80\xFD[P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a3\xC6W_\x80\xFD[` \x83\x01\x91P\x83` \x82\x85\x01\x01\x11\x15a3\xDDW_\x80\xFD[\x92P\x92\x90PV[_\x80_\x80_\x80\x86\x88\x03a\x01\xE0\x81\x12\x15a3\xFBW_\x80\xFD[``\x81\x12\x15a4\x08W_\x80\xFD[\x87\x96P``\x88\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a4%W_\x80\xFD[\x81\x8A\x01\x91Pa\x01\xC0\x80\x83\x8D\x03\x12\x15a4;W_\x80\xFD[\x82\x98Pa\x01\0\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x85\x01\x12\x15a4nW_\x80\xFD[`\x80\x8B\x01\x97P`@\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFE\x80\x85\x01\x12\x15a4\xA3W_\x80\xFD[a\x01\x80\x8B\x01\x96P\x8A\x015\x92P\x80\x83\x11\x15a4\xBBW_\x80\xFD[PPa4\xC9\x89\x82\x8A\x01a3\x9FV[\x97\x9A\x96\x99P\x94\x97P\x92\x95\x93\x94\x92PPPV[cNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[`\x03\x81\x10a4\xFFWa4\xFFa4\xDBV[\x90RV[\x80Q`\x07\x81\x10a5\x15Wa5\x15a4\xDBV[\x82R` \x90\x81\x01Q\x91\x01RV[\x80Q`@\x80\x84R\x90Q` \x84\x83\x01\x81\x90R\x81Q``\x86\x01\x81\x90R_\x93\x92\x82\x01\x91\x84\x91`\x80\x88\x01\x90[\x80\x84\x10\x15a5qWa5]\x82\x86Qa5\x03V[\x93\x82\x01\x93`\x01\x93\x90\x93\x01\x92\x90\x85\x01\x90a5JV[P` \x87\x01Q` \x89\x01R\x80\x95PPPPPP\x92\x91PPV[\x80Q`@\x80\x84R\x81Q\x84\x82\x01\x81\x90R_\x92``\x91` \x91\x82\x01\x91\x83\x88\x01\x91\x90\x86[\x82\x81\x10\x15a5\xF4W\x84Qa5\xC0\x85\x82Qa5\x03V[\x80\x83\x01Q\x85\x89\x01R\x87\x81\x01Qc\xFF\xFF\xFF\xFF\x90\x81\x16\x88\x87\x01R\x90\x87\x01Q\x16`\x80\x85\x01R\x93\x81\x01\x93`\xA0\x90\x93\x01\x92`\x01\x01a5\xABV[PPP` \x86\x01Q` \x88\x01R\x80\x94PPPPP\x92\x91PPV[_a\x01 \x80\x83Ra6\"\x81\x84\x01\x86Qa4\xEFV[` \x85\x01Qa\x01\xC0a\x01@\x81\x81\x87\x01Ra6@a\x02\xE0\x87\x01\x84a5\"V[\x92P`@\x88\x01Qa\x01`a6`\x81\x89\x01\x83\x80Q\x82R` \x90\x81\x01Q\x91\x01RV[``\x8A\x01Q\x91P\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFE\xE0\x80\x89\x87\x03\x01a\x01\xA0\x8A\x01Ra6\x9D\x86\x84a5\"V[\x95P`\x80\x8B\x01Q\x92P\x80\x89\x87\x03\x01\x85\x8A\x01RPa6\xBA\x85\x83a5\x8AV[`\xA0\x8B\x01Q\x80Qa\x01\xE0\x8B\x01R` \x81\x01Qa\x02\0\x8B\x01R\x90\x95P\x93P`\xC0\x8A\x01Qa\x02 \x89\x01R`\xE0\x8A\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x02@\x8A\x01R\x93Pa\x01\0\x8A\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x02`\x8A\x01R\x93P\x94\x89\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x02\x80\x89\x01R\x94\x91\x89\x01Qa\x02\xA0\x88\x01RP\x87\x01Qa\x02\xC0\x86\x01RP\x91Pa\x1A\x13\x90P` \x83\x01\x84\x80Q\x82R` \x81\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82Q\x16` \x85\x01R\x80` \x83\x01Q\x16`@\x85\x01RP`@\x81\x01Q``\x84\x01RP`@\x81\x01Q`\x80\x83\x01R``\x81\x01Q`\xA0\x83\x01R`\x80\x81\x01Q`\xC0\x83\x01Rc\xFF\xFF\xFF\xFF`\xA0\x82\x01Q\x16`\xE0\x83\x01RPPV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@\x80Q\x90\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a7\xDAWa7\xDAa7\xA3V[`@R\x90V[`@Q` \x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a7\xDAWa7\xDAa7\xA3V[`@Q`\x80\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a7\xDAWa7\xDAa7\xA3V[`@Qa\x01\x80\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a7\xDAWa7\xDAa7\xA3V[`@Q`\xC0\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a7\xDAWa7\xDAa7\xA3V[`@Q``\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a7\xDAWa7\xDAa7\xA3V[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a8\xB9Wa8\xB9a7\xA3V[`@R\x91\x90PV[\x805`\x03\x81\x10a8\xCFW_\x80\xFD[\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a8\xEDWa8\xEDa7\xA3V[P`\x05\x1B` \x01\x90V[_`@\x82\x84\x03\x12\x15a9\x07W_\x80\xFD[a9\x0Fa7\xB7V[\x90P\x815`\x07\x81\x10a9\x1FW_\x80\xFD[\x80\x82RP` \x82\x015` \x82\x01R\x92\x91PPV[_`@\x80\x83\x85\x03\x12\x15a9DW_\x80\xFD[a9La7\xB7V[\x91P\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a9eW_\x80\xFD[\x81\x85\x01\x91P` \x80\x83\x88\x03\x12\x15a9zW_\x80\xFD[a9\x82a7\xE0V[\x835\x83\x81\x11\x15a9\x90W_\x80\xFD[\x80\x85\x01\x94PP\x87`\x1F\x85\x01\x12a9\xA4W_\x80\xFD[\x835\x92Pa9\xB9a9\xB4\x84a8\xD4V[a8\x90V[\x83\x81R`\x06\x93\x90\x93\x1B\x84\x01\x82\x01\x92\x82\x81\x01\x90\x89\x85\x11\x15a9\xD7W_\x80\xFD[\x94\x83\x01\x94[\x84\x86\x10\x15a9\xFDWa9\xEE\x8A\x87a8\xF7V[\x82R\x94\x86\x01\x94\x90\x83\x01\x90a9\xDCV[\x82RP\x85R\x94\x85\x015\x94\x84\x01\x94\x90\x94RP\x90\x93\x92PPPV[_`@\x82\x84\x03\x12\x15a:&W_\x80\xFD[a:.a7\xB7V[\x90P\x815\x81R` \x82\x015` \x82\x01R\x92\x91PPV[\x805c\xFF\xFF\xFF\xFF\x81\x16\x81\x14a8\xCFW_\x80\xFD[_`@\x80\x83\x85\x03\x12\x15a:hW_\x80\xFD[a:pa7\xB7V[\x91P\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a:\x88W_\x80\xFD[\x83\x01`\x1F\x81\x01\x85\x13a:\x98W_\x80\xFD[\x805` a:\xA8a9\xB4\x83a8\xD4V[\x82\x81R`\xA0\x92\x83\x02\x84\x01\x82\x01\x92\x82\x82\x01\x91\x90\x89\x85\x11\x15a:\xC6W_\x80\xFD[\x94\x83\x01\x94[\x84\x86\x10\x15a;-W\x80\x86\x8B\x03\x12\x15a:\xE1W_\x80\xFD[a:\xE9a8\x03V[a:\xF3\x8B\x88a8\xF7V[\x81R\x87\x87\x015\x85\x82\x01R``a;\n\x81\x89\x01a:DV[\x89\x83\x01Ra;\x1A`\x80\x89\x01a:DV[\x90\x82\x01R\x83R\x94\x85\x01\x94\x91\x83\x01\x91a:\xCBV[P\x80\x87RPP\x80\x86\x015\x81\x86\x01RPPPP\x92\x91PPV[_a\x01\xC0\x826\x03\x12\x15a;VW_\x80\xFD[a;^a8&V[a;g\x83a8\xC1V[\x81R` \x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a;\x83W_\x80\xFD[a;\x8F6\x83\x87\x01a93V[` \x84\x01Ra;\xA16`@\x87\x01a:\x16V[`@\x84\x01R`\x80\x85\x015\x91P\x80\x82\x11\x15a;\xB9W_\x80\xFD[a;\xC56\x83\x87\x01a93V[``\x84\x01R`\xA0\x85\x015\x91P\x80\x82\x11\x15a;\xDDW_\x80\xFD[Pa;\xEA6\x82\x86\x01a:WV[`\x80\x83\x01RPa;\xFD6`\xC0\x85\x01a:\x16V[`\xA0\x82\x01Ra\x01\0\x80\x84\x015`\xC0\x83\x01Ra\x01 a<\x1C\x81\x86\x01a:DV[`\xE0\x84\x01Ra\x01@a</\x81\x87\x01a:DV[\x83\x85\x01Ra\x01`\x92Pa<C\x83\x87\x01a:DV[\x91\x84\x01\x91\x90\x91Ra\x01\x80\x85\x015\x90\x83\x01Ra\x01\xA0\x90\x93\x015\x92\x81\x01\x92\x90\x92RP\x90V[\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a8\xCFW_\x80\xFD[_\x81\x83\x03a\x01\0\x81\x12\x15a<\x8FW_\x80\xFD[a<\x97a8JV[\x835\x81R```\x1F\x19\x83\x01\x12\x15a<\xACW_\x80\xFD[a<\xB4a8mV[\x91Pa<\xC2` \x85\x01a<fV[\x82Ra<\xD0`@\x85\x01a<fV[` \x83\x01R``\x84\x015`@\x83\x01R\x81` \x82\x01R`\x80\x84\x015`@\x82\x01R`\xA0\x84\x015``\x82\x01R`\xC0\x84\x015`\x80\x82\x01Ra=\x0F`\xE0\x85\x01a:DV[`\xA0\x82\x01R\x94\x93PPPPV[_` \x82\x84\x03\x12\x15a=,W_\x80\xFD[\x815a\xFF\xFF\x81\x16\x81\x14a\x1A\x13W_\x80\xFD[_\x80\x85\x85\x11\x15a=KW_\x80\xFD[\x83\x86\x11\x15a=WW_\x80\xFD[PP\x82\x01\x93\x91\x90\x92\x03\x91PV[cNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[_\x82a=\x86Wa=\x86a=dV[P\x06\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[\x80\x82\x01\x80\x82\x11\x15a\x17gWa\x17ga=\x8BV[_\x82a=\xC0Wa=\xC0a=dV[P\x04\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[__\x19\x82\x03a=\xEAWa=\xEAa=\x8BV[P`\x01\x01\x90V[\x81\x83\x827_\x91\x01\x90\x81R\x91\x90PV[_` \x82\x84\x03\x12\x15a>\x10W_\x80\xFD[PQ\x91\x90PV[\x805` \x83\x10\x15a\x17gW_\x19` \x84\x90\x03`\x03\x1B\x1B\x16\x92\x91PPV[_\x80`@\x83\x85\x03\x12\x15a>EW_\x80\xFD[PP\x80Q` \x90\x91\x01Q\x90\x92\x90\x91PV[\x80\x82\x02\x81\x15\x82\x82\x04\x84\x14\x17a\x17gWa\x17ga=\x8BV[\x81\x81\x03\x81\x81\x11\x15a\x17gWa\x17ga=\x8BV[_c\xFF\xFF\xFF\xFF\x80\x83\x16\x81\x81\x03a>\x98Wa>\x98a=\x8BV[`\x01\x01\x93\x92PPPV[_`\xFF\x82\x16`\xFF\x81\x03a>\xB7Wa>\xB7a=\x8BV[`\x01\x01\x92\x91PPV[_\x81Q\x80` \x84\x01\x85^_\x93\x01\x92\x83RP\x90\x91\x90PV[_a\x1A\x13\x82\x84a>\xC0V[\x80Q` \x80\x83\x01Q\x91\x90\x81\x10\x15a/$W_\x19` \x91\x90\x91\x03`\x03\x1B\x1B\x16\x91\x90PV[_` \x82\x84\x03\x12\x15a?\x15W_\x80\xFD[\x815s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x1A\x13W_\x80\xFD[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x81\x16\x82\x82\x16\x03\x90\x80\x82\x11\x15a?YWa?Ya=\x8BV[P\x92\x91PPV[\x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x86\x16\x81R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\x85``\x1B\x16`\x01\x82\x01R\x82\x84`\x15\x83\x017`\x15\x92\x01\x91\x82\x01R`5\x01\x93\x92PPPV[_a?\xD4\x82\x86a>\xC0V[\x93\x84RPP` \x82\x01R`@\x01\x91\x90PV[c\xFF\xFF\xFF\xFF\x81\x81\x16\x83\x82\x16\x01\x90\x80\x82\x11\x15a?YWa?Ya=\x8BV[c\xFF\xFF\xFF\xFF\x82\x81\x16\x82\x82\x16\x03\x90\x80\x82\x11\x15a?YWa?Ya=\x8BV[\x7FValue:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R_`\x07\x84\x10a@TWa@Ta4\xDBV[P`\xF8\x92\x90\x92\x1B`\x06\x83\x01R`\x07\x82\x01R`'\x01\x90V[cNH{q`\xE0\x1B_R`Q`\x04R`$_\xFD\xFE\xA2dipfsX\"\x12 \xC0\x03\xBB\xA7*\x8B\x94m\xBD~>Hv\xB1\xB56\\\xB4\xCD\x01\x17%\x1Be\xBD\x04[S$\xC8i\xF6dsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f80fd5b5060043610610029575f3560e01c8063a92cb5011461002d575b5f80fd5b61004061003b3660046133e4565b610057565b60405161004e92919061360e565b60405180910390f35b61005f613277565b6040805160c0810182525f80825282516060808201855282825260208083018490528286018490528401919091529282018190529181018290526080810182905260a08101919091526100b187613b45565b91506100c236879003870187613c7d565b90505f6100d26020870187613d1c565b905061335261801061ffff8316108015906100f3575061801361ffff831611155b15610101575061030d6102ee565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7fe061ffff831601610135575061049a6102ee565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7fdf61ffff8316016101695750610c926102ee565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7fde61ffff83160161019d57506110086102ee565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7fdd61ffff8316016101d157506110146102ee565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7fdc61ffff83160161020557506111686102ee565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7fd061ffff83160161023957506112176102ee565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7fcf61ffff83160161026d575061125d6102ee565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7fce61ffff8316016102a157506112b16102ee565b60405162461bcd60e51b815260206004820152601560248201527f494e56414c49445f4d454d4f52595f4f50434f4445000000000000000000000060448201526064015b60405180910390fd5b6103008a85858a8a8a8763ffffffff16565b5050965096945050505050565b5f61031b6020850185613d1c565b905061032561335c565b5f610331858583611321565b60c08a01519193509150610344836113fb565b146103915760405162461bcd60e51b815260206004820152601060248201527f4241445f474c4f42414c5f53544154450000000000000000000000000000000060448201526064016102e5565b61ffff831661801014806103aa575061ffff8316618011145b156103cc576103c7888884896103c28987818d613d3d565b6114a3565b61047e565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7fee61ffff841601610401576103c78883611627565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7fed61ffff841601610436576103c788836116d4565b60405162461bcd60e51b815260206004820152601a60248201527f494e56414c49445f474c4f42414c53544154455f4f50434f444500000000000060448201526064016102e5565b610487826113fb565b60c0909801979097525050505050505050565b5f6104b06104ab8760200151611749565b61176d565b63ffffffff1690505f6104c96104ab8860200151611749565b63ffffffff1690506104dc602083613d78565b15158061050357506020808701515167ffffffffffffffff1690610501908390613d9f565b115b806105175750610514602082613d78565b15155b1561053e578660025b90816002811115610533576105336134db565b815250505050610c8a565b5f61054a602083613db2565b90505f806105646040518060200160405280606081525090565b60208a015161057690858a8a87611829565b909450909250905060605f89898681811061059357610593613dc5565b919091013560f81c91508590506105a981613dd9565b9550508a602001355f036106e5578060ff165f0361069d57365f6105cf8b88818f613d3d565b915091508582826040516105e4929190613df1565b6040518091039020146106395760405162461bcd60e51b815260206004820152600c60248201527f4241445f505245494d414745000000000000000000000000000000000000000060448201526064016102e5565b5f6106458b6020613d9f565b9050818111156106525750805b61065e818c8486613d3d565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250929750610bf695505050505050565b60405162461bcd60e51b815260206004820152601660248201527f554e4b4e4f574e5f505245494d4147455f50524f4f460000000000000000000060448201526064016102e5565b8a602001356001036107f25760ff8116156107425760405162461bcd60e51b815260206004820152601660248201527f554e4b4e4f574e5f505245494d4147455f50524f4f460000000000000000000060448201526064016102e5565b365f6107508b88818f613d3d565b915091508560028383604051610767929190613df1565b602060405180830381855afa158015610782573d5f803e3d5ffd5b5050506040513d601f19601f820116820180604052508101906107a59190613e00565b146106395760405162461bcd60e51b815260206004820152600c60248201527f4241445f505245494d414745000000000000000000000000000000000000000060448201526064016102e5565b8a60200135600203610bae5760ff81161561084f5760405162461bcd60e51b815260206004820152601660248201527f554e4b4e4f574e5f505245494d4147455f50524f4f460000000000000000000060448201526064016102e5565b365f61085d8b88818f613d3d565b90925090508561087060205f8486613d3d565b61087991613e17565b146108c65760405162461bcd60e51b815260206004820152601460248201527f4b5a475f50524f4f465f57524f4e475f4841534800000000000000000000000060448201526064016102e5565b5f805f80600a73ffffffffffffffffffffffffffffffffffffffff1686866040516108f2929190613df1565b5f60405180830381855afa9150503d805f811461092a576040519150601f19603f3d011682016040523d82523d5f602084013e61092f565b606091505b5091509150816109815760405162461bcd60e51b815260206004820152601160248201527f494e56414c49445f4b5a475f50524f4f4600000000000000000000000000000060448201526064016102e5565b5f8151116109d15760405162461bcd60e51b815260206004820152601660248201527f4b5a475f505245434f4d50494c455f4d495353494e470000000000000000000060448201526064016102e5565b808060200190518101906109e59190613e34565b9094509250507f73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff0000000182149050610a5c5760405162461bcd60e51b815260206004820152601360248201527f554e4b4e4f574e5f424c535f4d4f44554c55530000000000000000000000000060448201526064016102e5565b610a67826020613e56565b8c1015610ba5575f80610a7b60208f613db2565b905060015b84811015610aaa57600192831b928281169003610a9e576001831792505b600191821c911b610a80565b505f610abb85640100000000613db2565b9050610ac78382613e56565b90505f610af57f16a2a19edfe81f20d09b681922c813b4b63683508c2280b93829971f439f0d2b83876118d0565b905080610b06604060208a8c613d3d565b610b0f91613e17565b14610b5c5760405162461bcd60e51b815260206004820152601160248201527f4b5a475f50524f4f465f57524f4e475f5a00000000000000000000000000000060448201526064016102e5565b610b6a60606040898b613d3d565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250929c50505050505050505b50505050610bf6565b60405162461bcd60e51b815260206004820152601560248201527f554e4b4e4f574e5f505245494d4147455f54595045000000000000000000000060448201526064016102e5565b5f5b8251811015610c2f57610c258582858481518110610c1857610c18613dc5565b016020015160f81c611a1a565b9450600101610bf8565b50610c3b838786611aa5565b60208d8101516040908101929092528351825180840184525f8082529083018190528351808501909452835263ffffffff1690820152610c81905b60208f015190611b3e565b50505050505050505b505050505050565b5f610ca36104ab8760200151611749565b63ffffffff1690505f610cbc6104ab8860200151611749565b63ffffffff1690505f610cda610cd58960200151611749565b611b4e565b67ffffffffffffffff1690506020860135158015610cf9575088358110155b15610d21578760025b90816002811115610d1557610d156134db565b81525050505050610c8a565b6020808801515167ffffffffffffffff1690610d3e908490613d9f565b1180610d535750610d50602083613d78565b15155b15610d6057876002610d02565b5f610d6c602084613db2565b90505f80610d866040518060200160405280606081525090565b60208b0151610d9890858b8b87611829565b9094509092509050888884818110610db257610db2613dc5565b909101357fff0000000000000000000000000000000000000000000000000000000000000016159050610e275760405162461bcd60e51b815260206004820152601360248201527f554e4b4e4f574e5f494e424f585f50524f4f460000000000000000000000000060448201526064016102e5565b82610e3181613dd9565b935061335290505f60208c0135610e4c57611c0f9150610e8b565b60018c6020013503610e6257611f619150610e8b565b8d60025b90816002811115610e7957610e796134db565b81525050505050505050505050610c8a565b610eab8f888d8d89908092610ea293929190613d3d565b8663ffffffff16565b905080610eba578d6002610e66565b505082881015610f0c5760405162461bcd60e51b815260206004820152601160248201527f4241445f4d4553534147455f50524f4f4600000000000000000000000000000060448201526064016102e5565b5f610f17848a613e6d565b90505f5b60208163ffffffff16108015610f3f575081610f3d63ffffffff83168b613d9f565b105b15610f9857610f848463ffffffff83168d8d82610f5c8f8c613d9f565b610f669190613d9f565b818110610f7557610f75613dc5565b919091013560f81c9050611a1a565b935080610f9081613e80565b915050610f1b565b610fa3838786611aa5565b60208e015160400152610ff7610fe482604080518082019091525f808252602082015250604080518082019091525f815263ffffffff909116602082015290565b8f60200151611b3e90919063ffffffff16565b505050505050505050505050505050565b50506001909252505050565b5f6040518060400160405280601381526020017f4d6f64756c65206d65726b6c6520747265653a0000000000000000000000000081525090505f86610160015190505f6110676104ab8960200151611749565b63ffffffff16905061108681886020015161223e90919063ffffffff16565b61109257876002610d02565b5f806110b06110a2602085613db2565b60208b01519089895f611829565b50915091505f806110c38c848b8b612273565b92505091505f6110de8360016110d99190613d9f565b6124c7565b90508015611108576110fd876110f5856001613d9f565b875f8c6124e6565b6101608e0152611126565b61111f611116846001613d9f565b8390878b61258f565b6101608e01525b610c81610c76611137856001613d9f565b604080518082019091525f808252602082015250604080518082019091525f815263ffffffff909116602082015290565b60408051808201909152601381527f4d6f64756c65206d65726b6c6520747265653a0000000000000000000000000060208201525f806111aa88828787612273565b50915091505f6111b9836124c7565b905080156111f857815180516111d190600190613e6d565b815181106111e1576111e1613dc5565b60200260200101518961016001818152505061120b565b61120482845f8761258f565b6101608a01525b50505050505050505050565b6101408501515f1914611243578460025b9081600281111561123b5761123b6134db565b905250610c8a565b6112508560a00151612699565b610c8a8560400151612699565b6101408501515f191461127257846002611228565b60a08501515160010161128757846002611228565b6112968560400151838361270b565b60a0850151610c8a906112ac8360408187613d3d565b61270b565b60a0850151516001016112c657846002611228565b82602001355f036112f3576101408501516001016112e657846002611228565b5f19610140860152611318565b6101408501515f191461130857846002611228565b611316856020850135612892565b505b610c8a85612901565b61132961335c565b81611332613381565b61133a613381565b5f5b600260ff8216101561138457611353888886612983565b848360ff166002811061136857611368613dc5565b602002019190915293508061137c81613ea2565b91505061133c565b505f5b600260ff821610156113de5761139e88888661299e565b838360ff16600281106113b3576113b3613dc5565b67ffffffffffffffff90931660209390930201919091529350806113d681613ea2565b915050611387565b506040805180820190915291825260208201529590945092505050565b80518051602091820151828401518051908401516040517f476c6f62616c2073746174653a0000000000000000000000000000000000000095810195909552602d850193909352604d8401919091527fffffffffffffffff00000000000000000000000000000000000000000000000060c091821b8116606d85015291901b1660758201525f90607d015b604051602081830303815290604052805190602001209050919050565b5f6114b46104ab8860200151611749565b63ffffffff1690505f6114cd6104ab8960200151611749565b9050600263ffffffff8216106114e557876002610520565b60208701516114f4908361223e565b61150057876002610520565b5f61150c602084613db2565b90505f806115266040518060200160405280606081525090565b60208b015161153890858a8a87611829565b909450909250905061801061155060208b018b613d1c565b61ffff160361159357611585848b5f01518763ffffffff166002811061157857611578613dc5565b6020020151839190611aa5565b60208c015160400152611619565b6180116115a360208b018b613d1c565b61ffff16036115d1578951829063ffffffff8716600281106115c7576115c7613dc5565b6020020152611619565b60405162461bcd60e51b815260206004820152601760248201527f4241445f474c4f42414c5f53544154455f4f50434f444500000000000000000060448201526064016102e5565b505050505050505050505050565b5f6116386104ab8460200151611749565b9050600263ffffffff821610611667578260025b9081600281111561165f5761165f6134db565b905250505050565b6116cf6116c483602001518363ffffffff166002811061168957611689613dc5565b6020020151604080518082019091525f808252602082015250604080518082019091526001815267ffffffffffffffff909116602082015290565b602085015190611b3e565b505050565b5f6116e5610cd58460200151611749565b90505f6116f86104ab8560200151611749565b9050600263ffffffff821610611712575050600290915250565b8183602001518263ffffffff166002811061172f5761172f613dc5565b67ffffffffffffffff909216602092909202015250505050565b604080518082019091525f80825260208201528151611767906129fa565b92915050565b60208101515f908183516006811115611788576117886134db565b146117d55760405162461bcd60e51b815260206004820152600760248201527f4e4f545f4933320000000000000000000000000000000000000000000000000060448201526064016102e5565b64010000000081106117675760405162461bcd60e51b815260206004820152600760248201527f4241445f4933320000000000000000000000000000000000000000000000000060448201526064016102e5565b5f806118416040518060200160405280606081525090565b83915061184f868684612983565b909350915061185f868684612afb565b925090505f61186f828986611aa5565b9050886040015181146118c45760405162461bcd60e51b815260206004820152600e60248201527f57524f4e475f4d454d5f524f4f5400000000000000000000000000000000000060448201526064016102e5565b50955095509592505050565b60408051602080820181905281830181905260608201526080810185905260a0810184905260c08082018490528251808303909101815260e0909101918290525f9182908190600590611924908590613ed7565b5f60405180830381855afa9150503d805f811461195c576040519150601f19603f3d011682016040523d82523d5f602084013e611961565b606091505b5091509150816119b35760405162461bcd60e51b815260206004820152600d60248201527f4d4f444558505f4641494c45440000000000000000000000000000000000000060448201526064016102e5565b8051602014611a045760405162461bcd60e51b815260206004820152601360248201527f4d4f444558505f57524f4e475f4c454e4754480000000000000000000000000060448201526064016102e5565b611a0d81613ee2565b93505050505b9392505050565b5f60208310611a6b5760405162461bcd60e51b815260206004820152601560248201527f4241445f5345545f4c4541465f425954455f494458000000000000000000000060448201526064016102e5565b5f83611a7960016020613e6d565b611a839190613e6d565b611a8e906008613e56565b60ff848116821b911b198616179150509392505050565b6040517f4d656d6f7279206c6561663a00000000000000000000000000000000000000006020820152602c81018290525f908190604c01604051602081830303815290604052805190602001209050611b358585836040518060400160405280601381526020017f4d656d6f7279206d65726b6c6520747265653a0000000000000000000000000081525061258f565b95945050505050565b8151611b4a9082612bc8565b5050565b60208101515f90600183516006811115611b6a57611b6a6134db565b14611bb75760405162461bcd60e51b815260206004820152600760248201527f4e4f545f4936340000000000000000000000000000000000000000000000000060448201526064016102e5565b6801000000000000000081106117675760405162461bcd60e51b815260206004820152600760248201527f4241445f4936340000000000000000000000000000000000000000000000000060448201526064016102e5565b5f6028821015611c615760405162461bcd60e51b815260206004820152601260248201527f4241445f534551494e424f585f50524f4f46000000000000000000000000000060448201526064016102e5565b5f611c6e8484602061299e565b50809150505f8484604051611c84929190613df1565b60405190819003902090505f8067ffffffffffffffff881615611d5957611cb160408a0160208b01613f05565b73ffffffffffffffffffffffffffffffffffffffff166316bf5579611cd760018b613f38565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815267ffffffffffffffff9091166004820152602401602060405180830381865afa158015611d32573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611d569190613e00565b91505b67ffffffffffffffff841615611e2157611d7960408a0160208b01613f05565b73ffffffffffffffffffffffffffffffffffffffff1663d5719dc2611d9f600187613f38565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815267ffffffffffffffff9091166004820152602401602060405180830381865afa158015611dfa573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611e1e9190613e00565b90505b6040805160208101849052908101849052606081018290525f90608001604051602081830303815290604052805190602001209050896020016020810190611e699190613f05565b6040517f16bf557900000000000000000000000000000000000000000000000000000000815267ffffffffffffffff8b16600482015273ffffffffffffffffffffffffffffffffffffffff91909116906316bf557990602401602060405180830381865afa158015611edd573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611f019190613e00565b8114611f4f5760405162461bcd60e51b815260206004820152601460248201527f4241445f534551494e424f585f4d45535341474500000000000000000000000060448201526064016102e5565b6001955050505050505b949350505050565b5f6071821015611fb35760405162461bcd60e51b815260206004820152601160248201527f4241445f44454c415945445f50524f4f4600000000000000000000000000000060448201526064016102e5565b5f67ffffffffffffffff85161561207c57611fd46040870160208801613f05565b73ffffffffffffffffffffffffffffffffffffffff1663d5719dc2611ffa600188613f38565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815267ffffffffffffffff9091166004820152602401602060405180830381865afa158015612055573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906120799190613e00565b90505b5f61208a8460718188613d3d565b604051612098929190613df1565b604051809103902090505f85855f8181106120b5576120b5613dc5565b9050013560f81c60f81b90505f6120ce87876001612cad565b5090505f82826120e2607160218b8d613d3d565b876040516020016120f7959493929190613f60565b60408051601f1981840301815282825280516020918201208382018990528383018190528251808503840181526060909401909252825192019190912090915061214760408c0160208d01613f05565b6040517fd5719dc200000000000000000000000000000000000000000000000000000000815267ffffffffffffffff8c16600482015273ffffffffffffffffffffffffffffffffffffffff919091169063d5719dc290602401602060405180830381865afa1580156121bb573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906121df9190613e00565b811461222d5760405162461bcd60e51b815260206004820152601360248201527f4241445f44454c415945445f4d4553534147450000000000000000000000000060448201526064016102e5565b5060019a9950505050505050505050565b81515f9067ffffffffffffffff16612257836020613d9f565b11158015611a13575061226b602083613d78565b159392505050565b5f61228a6040518060200160405280606081525090565b60408051602081019091526060815260408051808201909152601381527f4d6f64756c65206d65726b6c6520747265653a0000000000000000000000000060208201526101608801516123246040805160c0810182525f8082528251606081018452818152602081810183905293810191909152909182019081525f60208201819052604082018190526060820181905260809091015290565b5f61233089898c612cf6565b9a50915061233f89898c612df8565b9a50905061234e89898c612afb565b9a5063ffffffff80831698509096505f9061236f9088908a908690612e4716565b90508381146123c05760405162461bcd60e51b815260206004820152601360248201527f57524f4e475f524f4f545f464f525f4c4541460000000000000000000000000060448201526064016102e5565b5050505f6123d48660016110d99190613d9f565b90508015612440576123e7866001613d9f565b8551516001901b1461243b5760405162461bcd60e51b815260206004820152600a60248201527f57524f4e475f4c4541460000000000000000000000000000000000000000000060448201526064016102e5565b6124ba565b61244b88888b612afb565b995093505f61246761245e886001613d9f565b86905f8761258f565b90508281146124b85760405162461bcd60e51b815260206004820152601360248201527f57524f4e475f524f4f545f464f525f5a45524f0000000000000000000000000060448201526064016102e5565b505b5050509450945094915050565b5f811580159061176757506124dd600183613e6d565b82161592915050565b5f83855b60018111156125575783828660405160200161250893929190613fc9565b60405160208183030381529060405280519060200120915083858660405160200161253593929190613fc9565b60408051601f198184030181529190528051602090910120945060011c6124ea565b83888360405160200161256c93929190613fc9565b604051602081830303815290604052805190602001209250505095945050505050565b815f5b85515181101561264a57846001165f036125f4578282875f015183815181106125bd576125bd613dc5565b60200260200101516040516020016125d793929190613fc9565b60405160208183030381529060405280519060200120915061263e565b82865f0151828151811061260a5761260a613dc5565b60200260200101518360405160200161262593929190613fc9565b6040516020818303038152906040528051906020012091505b600194851c9401612592565b508315611f595760405162461bcd60e51b815260206004820152600f60248201527f50524f4f465f544f4f5f53484f5254000000000000000000000000000000000060448201526064016102e5565b80515f19146127065780516020808301516040516126e99392017f636f7468726561643a000000000000000000000000000000000000000000000081526009810192909252602982015260490190565b60408051601f198184030181529190528051602091820120908201525b5f9052565b5f8080612719858585612983565b93509150612728858585612983565b93509050600182016127d95780156127825760405162461bcd60e51b815260206004820152601460248201527f57524f4e475f434f5448524541445f454d50545900000000000000000000000060448201526064016102e5565b6020860151156127d45760405162461bcd60e51b815260206004820152601460248201527f57524f4e475f434f5448524541445f454d50545900000000000000000000000060448201526064016102e5565b612885565b856020015182826040516020016128229291907f636f7468726561643a000000000000000000000000000000000000000000000081526009810192909252602982015260490190565b60405160208183030381529060405280519060200120146128855760405162461bcd60e51b815260206004820152601260248201527f57524f4e475f434f5448524541445f504f50000000000000000000000000000060448201526064016102e5565b6020860152909352505050565b6101408201515f905f19146128a857505f611767565b5f60408460e0015163ffffffff16901b9050602084610100015163ffffffff16901b811790506001838561012001516128e19190613fe6565b6128eb9190614003565b63ffffffff161761014084015250600192915050565b60408101515160a0820151515f1981148061291c57505f1982145b156129295782600261164c565b6129368360800151612e91565b60a084015152602083015161294a90612f2a565b60408401515260808301516129659082602082015260609052565b50602091820151808301919091526040805192830190526060825252565b5f8181612991868684612cad565b9097909650945050505050565b5f81815b60088110156129f15760088367ffffffffffffffff16901b92508585838181106129ce576129ce613dc5565b919091013560f81c939093179250816129e681613dd9565b9250506001016129a2565b50935093915050565b604080518082019091525f808252602082015281518051612a1d90600190613e6d565b81518110612a2d57612a2d613dc5565b602002602001015190505f6001835f015151612a499190613e6d565b67ffffffffffffffff811115612a6157612a616137a3565b604051908082528060200260200182016040528015612aa557816020015b604080518082019091525f8082526020820152815260200190600190039081612a7f5790505b5090505f5b8151811015612af4578351805182908110612ac757612ac7613dc5565b6020026020010151828281518110612ae157612ae1613dc5565b6020908102919091010152600101612aaa565b5090915290565b604080516020810190915260608152815f612b17868684612fb6565b925090505f60ff821667ffffffffffffffff811115612b3857612b386137a3565b604051908082528060200260200182016040528015612b61578160200160208202803683370190505b5090505f5b8260ff168160ff161015612bac57612b7f888886612983565b838360ff1681518110612b9457612b94613dc5565b60209081029190910101919091529350600101612b66565b5060405180602001604052808281525093505050935093915050565b8151515f90612bd8906001613d9f565b67ffffffffffffffff811115612bf057612bf06137a3565b604051908082528060200260200182016040528015612c3457816020015b604080518082019091525f8082526020820152815260200190600190039081612c0e5790505b5090505f5b835151811015612c84578351805182908110612c5757612c57613dc5565b6020026020010151828281518110612c7157612c71613dc5565b6020908102919091010152600101612c39565b508181845f01515181518110612c9c57612c9c613dc5565b602090810291909101015290915250565b5f81815b60208110156129f157600883901b9250858583818110612cd357612cd3613dc5565b919091013560f81c93909317925081612ceb81613dd9565b925050600101612cb1565b6040805160c0810182525f80825282516060808201855282825260208083018490528286018490528401919091529282018190529181018290526080810182905260a0810191909152604080516060810182525f808252602082018190529181018290528391905f805f80612d6c8b8b89612983565b97509550612d7b8b8b89612feb565b97509450612d8a8b8b89612983565b97509350612d998b8b89612983565b97509250612da88b8b89612983565b97509150612db78b8b89612df8565b6040805160c081018252988952602089019790975295870194909452506060850191909152608084015263ffffffff1660a083015290969095509350505050565b5f81815b60048110156129f15760088363ffffffff16901b9250858583818110612e2457612e24613dc5565b919091013560f81c93909317925081612e3c81613dd9565b925050600101612dfc565b5f611f598484612e5685613065565b6040518060400160405280601381526020017f4d6f64756c65206d65726b6c6520747265653a0000000000000000000000000081525061258f565b60208101515f5b825151811015612f2457612ec7835f01518281518110612eba57612eba613dc5565b602002602001015161310d565b6040517f537461636b206672616d6520737461636b3a0000000000000000000000000000602082015260328101919091526052810183905260720160408051601f1981840301815291905280516020909101209150600101612e98565b50919050565b6020810151815151515f5b81811015612faf578351612f5290612f4d90836131a4565b6131db565b6040517f56616c756520737461636b3a00000000000000000000000000000000000000006020820152602c810191909152604c8101849052606c0160408051601f1981840301815291905280516020909101209250600101612f35565b5050919050565b5f81848482818110612fca57612fca613dc5565b919091013560f81c9250819050612fe081613dd9565b915050935093915050565b604080516060810182525f8082526020820181905291810191909152815f808061301688888661299e565b9450925061302588888661299e565b94509150613034888886612983565b6040805160608101825267ffffffffffffffff96871681529490951660208501529383015250969095509350505050565b5f815f015161307783602001516131f6565b6040808501516060860151608087015160a08801519351611486969594906020017f4d6f64756c653a0000000000000000000000000000000000000000000000000081526007810196909652602786019490945260478501929092526067840152608783015260e01b7fffffffff000000000000000000000000000000000000000000000000000000001660a782015260ab0190565b5f61311a825f01516131db565b602080840151604080860151606087015191517f537461636b206672616d653a000000000000000000000000000000000000000094810194909452602c840194909452604c8301919091527fffffffff0000000000000000000000000000000000000000000000000000000060e093841b8116606c840152921b9091166070820152607401611486565b604080518082019091525f808252602082015282518051839081106131cb576131cb613dc5565b6020026020010151905092915050565b5f815f01518260200151604051602001611486929190614020565b805160208083015160408085015190517f4d656d6f72793a00000000000000000000000000000000000000000000000000938101939093527fffffffffffffffff00000000000000000000000000000000000000000000000060c094851b811660278501529190931b16602f82015260378101919091525f90605701611486565b604080516101808101909152805f81526020016132aa60408051606080820183529181019182529081525f602082015290565b81526040805180820182525f808252602080830191909152830152016132e660408051606080820183529181019182529081525f602082015290565b815260200161330a6040518060400160405280606081526020015f80191681525090565b81526040805180820182525f8082526020808301829052840191909152908201819052606082018190526080820181905260a0820181905260c0820181905260e09091015290565b61335a61406b565b565b604051806040016040528061336f613381565b815260200161337c613381565b905290565b60405180604001604052806002906020820280368337509192915050565b5f8083601f8401126133af575f80fd5b50813567ffffffffffffffff8111156133c6575f80fd5b6020830191508360208285010111156133dd575f80fd5b9250929050565b5f805f805f808688036101e08112156133fb575f80fd5b6060811215613408575f80fd5b879650606088013567ffffffffffffffff80821115613425575f80fd5b818a0191506101c080838d03121561343b575f80fd5b8298506101007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808501121561346e575f80fd5b60808b01975060407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe80850112156134a3575f80fd5b6101808b0196508a01359250808311156134bb575f80fd5b50506134c989828a0161339f565b979a9699509497509295939492505050565b634e487b7160e01b5f52602160045260245ffd5b600381106134ff576134ff6134db565b9052565b805160078110613515576135156134db565b8252602090810151910152565b80516040808452905160208483018190528151606086018190525f9392820191849160808801905b808410156135715761355d828651613503565b93820193600193909301929085019061354a565b5060208701516020890152809550505050505092915050565b8051604080845281518482018190525f926060916020918201918388019190865b828110156135f45784516135c0858251613503565b80830151858901528781015163ffffffff90811688870152908701511660808501529381019360a0909301926001016135ab565b505050602086015160208801528094505050505092915050565b5f61012080835261362281840186516134ef565b60208501516101c061014081818701526136406102e0870184613522565b925060408801516101606136608189018380518252602090810151910152565b60608a015191507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee080898703016101a08a015261369d8684613522565b955060808b015192508089870301858a0152506136ba858361358a565b60a08b015180516101e08b015260208101516102008b0152909550935060c08a015161022089015260e08a015163ffffffff81166102408a015293506101008a015163ffffffff81166102608a015293509489015163ffffffff811661028089015294918901516102a0880152508701516102c0860152509150611a139050602083018480518252602081015167ffffffffffffffff80825116602085015280602083015116604085015250604081015160608401525060408101516080830152606081015160a0830152608081015160c083015263ffffffff60a08201511660e08301525050565b634e487b7160e01b5f52604160045260245ffd5b6040805190810167ffffffffffffffff811182821017156137da576137da6137a3565b60405290565b6040516020810167ffffffffffffffff811182821017156137da576137da6137a3565b6040516080810167ffffffffffffffff811182821017156137da576137da6137a3565b604051610180810167ffffffffffffffff811182821017156137da576137da6137a3565b60405160c0810167ffffffffffffffff811182821017156137da576137da6137a3565b6040516060810167ffffffffffffffff811182821017156137da576137da6137a3565b604051601f8201601f1916810167ffffffffffffffff811182821017156138b9576138b96137a3565b604052919050565b8035600381106138cf575f80fd5b919050565b5f67ffffffffffffffff8211156138ed576138ed6137a3565b5060051b60200190565b5f60408284031215613907575f80fd5b61390f6137b7565b905081356007811061391f575f80fd5b808252506020820135602082015292915050565b5f6040808385031215613944575f80fd5b61394c6137b7565b9150823567ffffffffffffffff80821115613965575f80fd5b8185019150602080838803121561397a575f80fd5b6139826137e0565b833583811115613990575f80fd5b80850194505087601f8501126139a4575f80fd5b833592506139b96139b4846138d4565b613890565b83815260069390931b840182019282810190898511156139d7575f80fd5b948301945b848610156139fd576139ee8a876138f7565b825294860194908301906139dc565b8252508552948501359484019490945250909392505050565b5f60408284031215613a26575f80fd5b613a2e6137b7565b9050813581526020820135602082015292915050565b803563ffffffff811681146138cf575f80fd5b5f6040808385031215613a68575f80fd5b613a706137b7565b9150823567ffffffffffffffff811115613a88575f80fd5b8301601f81018513613a98575f80fd5b80356020613aa86139b4836138d4565b82815260a09283028401820192828201919089851115613ac6575f80fd5b948301945b84861015613b2d5780868b031215613ae1575f80fd5b613ae9613803565b613af38b886138f7565b815287870135858201526060613b0a818901613a44565b89830152613b1a60808901613a44565b9082015283529485019491830191613acb565b50808752505080860135818601525050505092915050565b5f6101c08236031215613b56575f80fd5b613b5e613826565b613b67836138c1565b8152602083013567ffffffffffffffff80821115613b83575f80fd5b613b8f36838701613933565b6020840152613ba13660408701613a16565b60408401526080850135915080821115613bb9575f80fd5b613bc536838701613933565b606084015260a0850135915080821115613bdd575f80fd5b50613bea36828601613a57565b608083015250613bfd3660c08501613a16565b60a08201526101008084013560c0830152610120613c1c818601613a44565b60e0840152610140613c2f818701613a44565b838501526101609250613c43838701613a44565b91840191909152610180850135908301526101a090930135928101929092525090565b803567ffffffffffffffff811681146138cf575f80fd5b5f818303610100811215613c8f575f80fd5b613c9761384a565b833581526060601f1983011215613cac575f80fd5b613cb461386d565b9150613cc260208501613c66565b8252613cd060408501613c66565b6020830152606084013560408301528160208201526080840135604082015260a0840135606082015260c08401356080820152613d0f60e08501613a44565b60a0820152949350505050565b5f60208284031215613d2c575f80fd5b813561ffff81168114611a13575f80fd5b5f8085851115613d4b575f80fd5b83861115613d57575f80fd5b5050820193919092039150565b634e487b7160e01b5f52601260045260245ffd5b5f82613d8657613d86613d64565b500690565b634e487b7160e01b5f52601160045260245ffd5b8082018082111561176757611767613d8b565b5f82613dc057613dc0613d64565b500490565b634e487b7160e01b5f52603260045260245ffd5b5f5f198203613dea57613dea613d8b565b5060010190565b818382375f9101908152919050565b5f60208284031215613e10575f80fd5b5051919050565b80356020831015611767575f19602084900360031b1b1692915050565b5f8060408385031215613e45575f80fd5b505080516020909101519092909150565b808202811582820484141761176757611767613d8b565b8181038181111561176757611767613d8b565b5f63ffffffff808316818103613e9857613e98613d8b565b6001019392505050565b5f60ff821660ff8103613eb757613eb7613d8b565b60010192915050565b5f81518060208401855e5f93019283525090919050565b5f611a138284613ec0565b80516020808301519190811015612f24575f1960209190910360031b1b16919050565b5f60208284031215613f15575f80fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114611a13575f80fd5b67ffffffffffffffff828116828216039080821115613f5957613f59613d8b565b5092915050565b7fff00000000000000000000000000000000000000000000000000000000000000861681527fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008560601b1660018201528284601583013760159201918201526035019392505050565b5f613fd48286613ec0565b93845250506020820152604001919050565b63ffffffff818116838216019080821115613f5957613f59613d8b565b63ffffffff828116828216039080821115613f5957613f59613d8b565b7f56616c75653a000000000000000000000000000000000000000000000000000081525f60078410614054576140546134db565b5060f89290921b6006830152600782015260270190565b634e487b7160e01b5f52605160045260245ffdfea2646970667358221220c003bba72a8b946dbd7e3e4876b1b5365cb4cd0117251b65bd045b5324c869f664736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\0)W_5`\xE0\x1C\x80c\xA9,\xB5\x01\x14a\0-W[_\x80\xFD[a\0@a\0;6`\x04a3\xE4V[a\0WV[`@Qa\0N\x92\x91\x90a6\x0EV[`@Q\x80\x91\x03\x90\xF3[a\0_a2wV[`@\x80Q`\xC0\x81\x01\x82R_\x80\x82R\x82Q``\x80\x82\x01\x85R\x82\x82R` \x80\x83\x01\x84\x90R\x82\x86\x01\x84\x90R\x84\x01\x91\x90\x91R\x92\x82\x01\x81\x90R\x91\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x91\x90\x91Ra\0\xB1\x87a;EV[\x91Pa\0\xC26\x87\x90\x03\x87\x01\x87a<}V[\x90P_a\0\xD2` \x87\x01\x87a=\x1CV[\x90Pa3Ra\x80\x10a\xFF\xFF\x83\x16\x10\x80\x15\x90a\0\xF3WPa\x80\x13a\xFF\xFF\x83\x16\x11\x15[\x15a\x01\x01WPa\x03\ra\x02\xEEV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xE0a\xFF\xFF\x83\x16\x01a\x015WPa\x04\x9Aa\x02\xEEV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xDFa\xFF\xFF\x83\x16\x01a\x01iWPa\x0C\x92a\x02\xEEV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xDEa\xFF\xFF\x83\x16\x01a\x01\x9DWPa\x10\x08a\x02\xEEV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xDDa\xFF\xFF\x83\x16\x01a\x01\xD1WPa\x10\x14a\x02\xEEV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xDCa\xFF\xFF\x83\x16\x01a\x02\x05WPa\x11ha\x02\xEEV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xD0a\xFF\xFF\x83\x16\x01a\x029WPa\x12\x17a\x02\xEEV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xCFa\xFF\xFF\x83\x16\x01a\x02mWPa\x12]a\x02\xEEV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xCEa\xFF\xFF\x83\x16\x01a\x02\xA1WPa\x12\xB1a\x02\xEEV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x15`$\x82\x01R\x7FINVALID_MEMORY_OPCODE\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01[`@Q\x80\x91\x03\x90\xFD[a\x03\0\x8A\x85\x85\x8A\x8A\x8A\x87c\xFF\xFF\xFF\xFF\x16V[PP\x96P\x96\x94PPPPPV[_a\x03\x1B` \x85\x01\x85a=\x1CV[\x90Pa\x03%a3\\V[_a\x031\x85\x85\x83a\x13!V[`\xC0\x8A\x01Q\x91\x93P\x91Pa\x03D\x83a\x13\xFBV[\x14a\x03\x91W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x10`$\x82\x01R\x7FBAD_GLOBAL_STATE\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[a\xFF\xFF\x83\x16a\x80\x10\x14\x80a\x03\xAAWPa\xFF\xFF\x83\x16a\x80\x11\x14[\x15a\x03\xCCWa\x03\xC7\x88\x88\x84\x89a\x03\xC2\x89\x87\x81\x8Da==V[a\x14\xA3V[a\x04~V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xEEa\xFF\xFF\x84\x16\x01a\x04\x01Wa\x03\xC7\x88\x83a\x16'V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xEDa\xFF\xFF\x84\x16\x01a\x046Wa\x03\xC7\x88\x83a\x16\xD4V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1A`$\x82\x01R\x7FINVALID_GLOBALSTATE_OPCODE\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[a\x04\x87\x82a\x13\xFBV[`\xC0\x90\x98\x01\x97\x90\x97RPPPPPPPPV[_a\x04\xB0a\x04\xAB\x87` \x01Qa\x17IV[a\x17mV[c\xFF\xFF\xFF\xFF\x16\x90P_a\x04\xC9a\x04\xAB\x88` \x01Qa\x17IV[c\xFF\xFF\xFF\xFF\x16\x90Pa\x04\xDC` \x83a=xV[\x15\x15\x80a\x05\x03WP` \x80\x87\x01QQg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90a\x05\x01\x90\x83\x90a=\x9FV[\x11[\x80a\x05\x17WPa\x05\x14` \x82a=xV[\x15\x15[\x15a\x05>W\x86`\x02[\x90\x81`\x02\x81\x11\x15a\x053Wa\x053a4\xDBV[\x81RPPPPa\x0C\x8AV[_a\x05J` \x83a=\xB2V[\x90P_\x80a\x05d`@Q\x80` \x01`@R\x80``\x81RP\x90V[` \x8A\x01Qa\x05v\x90\x85\x8A\x8A\x87a\x18)V[\x90\x94P\x90\x92P\x90P``_\x89\x89\x86\x81\x81\x10a\x05\x93Wa\x05\x93a=\xC5V[\x91\x90\x91\x015`\xF8\x1C\x91P\x85\x90Pa\x05\xA9\x81a=\xD9V[\x95PP\x8A` \x015_\x03a\x06\xE5W\x80`\xFF\x16_\x03a\x06\x9DW6_a\x05\xCF\x8B\x88\x81\x8Fa==V[\x91P\x91P\x85\x82\x82`@Qa\x05\xE4\x92\x91\x90a=\xF1V[`@Q\x80\x91\x03\x90 \x14a\x069W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0C`$\x82\x01R\x7FBAD_PREIMAGE\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[_a\x06E\x8B` a=\x9FV[\x90P\x81\x81\x11\x15a\x06RWP\x80[a\x06^\x81\x8C\x84\x86a==V[\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RP\x92\x97Pa\x0B\xF6\x95PPPPPPV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x16`$\x82\x01R\x7FUNKNOWN_PREIMAGE_PROOF\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[\x8A` \x015`\x01\x03a\x07\xF2W`\xFF\x81\x16\x15a\x07BW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x16`$\x82\x01R\x7FUNKNOWN_PREIMAGE_PROOF\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[6_a\x07P\x8B\x88\x81\x8Fa==V[\x91P\x91P\x85`\x02\x83\x83`@Qa\x07g\x92\x91\x90a=\xF1V[` `@Q\x80\x83\x03\x81\x85Z\xFA\x15\x80\x15a\x07\x82W=_\x80>=_\xFD[PPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x07\xA5\x91\x90a>\0V[\x14a\x069W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0C`$\x82\x01R\x7FBAD_PREIMAGE\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[\x8A` \x015`\x02\x03a\x0B\xAEW`\xFF\x81\x16\x15a\x08OW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x16`$\x82\x01R\x7FUNKNOWN_PREIMAGE_PROOF\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[6_a\x08]\x8B\x88\x81\x8Fa==V[\x90\x92P\x90P\x85a\x08p` _\x84\x86a==V[a\x08y\x91a>\x17V[\x14a\x08\xC6W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x14`$\x82\x01R\x7FKZG_PROOF_WRONG_HASH\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[_\x80_\x80`\ns\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x86\x86`@Qa\x08\xF2\x92\x91\x90a=\xF1V[_`@Q\x80\x83\x03\x81\x85Z\xFA\x91PP=\x80_\x81\x14a\t*W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\t/V[``\x91P[P\x91P\x91P\x81a\t\x81W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x11`$\x82\x01R\x7FINVALID_KZG_PROOF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[_\x81Q\x11a\t\xD1W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x16`$\x82\x01R\x7FKZG_PRECOMPILE_MISSING\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[\x80\x80` \x01\x90Q\x81\x01\x90a\t\xE5\x91\x90a>4V[\x90\x94P\x92PP\x7Fs\xED\xA7S)\x9D}H39\xD8\x08\t\xA1\xD8\x05S\xBD\xA4\x02\xFF\xFE[\xFE\xFF\xFF\xFF\xFF\0\0\0\x01\x82\x14\x90Pa\n\\W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x13`$\x82\x01R\x7FUNKNOWN_BLS_MODULUS\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[a\ng\x82` a>VV[\x8C\x10\x15a\x0B\xA5W_\x80a\n{` \x8Fa=\xB2V[\x90P`\x01[\x84\x81\x10\x15a\n\xAAW`\x01\x92\x83\x1B\x92\x82\x81\x16\x90\x03a\n\x9EW`\x01\x83\x17\x92P[`\x01\x91\x82\x1C\x91\x1Ba\n\x80V[P_a\n\xBB\x85d\x01\0\0\0\0a=\xB2V[\x90Pa\n\xC7\x83\x82a>VV[\x90P_a\n\xF5\x7F\x16\xA2\xA1\x9E\xDF\xE8\x1F \xD0\x9Bh\x19\"\xC8\x13\xB4\xB66\x83P\x8C\"\x80\xB98)\x97\x1FC\x9F\r+\x83\x87a\x18\xD0V[\x90P\x80a\x0B\x06`@` \x8A\x8Ca==V[a\x0B\x0F\x91a>\x17V[\x14a\x0B\\W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x11`$\x82\x01R\x7FKZG_PROOF_WRONG_Z\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[a\x0Bj```@\x89\x8Ba==V[\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RP\x92\x9CPPPPPPPP[PPPPa\x0B\xF6V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x15`$\x82\x01R\x7FUNKNOWN_PREIMAGE_TYPE\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[_[\x82Q\x81\x10\x15a\x0C/Wa\x0C%\x85\x82\x85\x84\x81Q\x81\x10a\x0C\x18Wa\x0C\x18a=\xC5V[\x01` \x01Q`\xF8\x1Ca\x1A\x1AV[\x94P`\x01\x01a\x0B\xF8V[Pa\x0C;\x83\x87\x86a\x1A\xA5V[` \x8D\x81\x01Q`@\x90\x81\x01\x92\x90\x92R\x83Q\x82Q\x80\x84\x01\x84R_\x80\x82R\x90\x83\x01\x81\x90R\x83Q\x80\x85\x01\x90\x94R\x83Rc\xFF\xFF\xFF\xFF\x16\x90\x82\x01Ra\x0C\x81\x90[` \x8F\x01Q\x90a\x1B>V[PPPPPPPP[PPPPPPV[_a\x0C\xA3a\x04\xAB\x87` \x01Qa\x17IV[c\xFF\xFF\xFF\xFF\x16\x90P_a\x0C\xBCa\x04\xAB\x88` \x01Qa\x17IV[c\xFF\xFF\xFF\xFF\x16\x90P_a\x0C\xDAa\x0C\xD5\x89` \x01Qa\x17IV[a\x1BNV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P` \x86\x015\x15\x80\x15a\x0C\xF9WP\x885\x81\x10\x15[\x15a\r!W\x87`\x02[\x90\x81`\x02\x81\x11\x15a\r\x15Wa\r\x15a4\xDBV[\x81RPPPPPa\x0C\x8AV[` \x80\x88\x01QQg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90a\r>\x90\x84\x90a=\x9FV[\x11\x80a\rSWPa\rP` \x83a=xV[\x15\x15[\x15a\r`W\x87`\x02a\r\x02V[_a\rl` \x84a=\xB2V[\x90P_\x80a\r\x86`@Q\x80` \x01`@R\x80``\x81RP\x90V[` \x8B\x01Qa\r\x98\x90\x85\x8B\x8B\x87a\x18)V[\x90\x94P\x90\x92P\x90P\x88\x88\x84\x81\x81\x10a\r\xB2Wa\r\xB2a=\xC5V[\x90\x91\x015\x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x15\x90Pa\x0E'W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x13`$\x82\x01R\x7FUNKNOWN_INBOX_PROOF\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[\x82a\x0E1\x81a=\xD9V[\x93Pa3R\x90P_` \x8C\x015a\x0ELWa\x1C\x0F\x91Pa\x0E\x8BV[`\x01\x8C` \x015\x03a\x0EbWa\x1Fa\x91Pa\x0E\x8BV[\x8D`\x02[\x90\x81`\x02\x81\x11\x15a\x0EyWa\x0Eya4\xDBV[\x81RPPPPPPPPPPPa\x0C\x8AV[a\x0E\xAB\x8F\x88\x8D\x8D\x89\x90\x80\x92a\x0E\xA2\x93\x92\x91\x90a==V[\x86c\xFF\xFF\xFF\xFF\x16V[\x90P\x80a\x0E\xBAW\x8D`\x02a\x0EfV[PP\x82\x88\x10\x15a\x0F\x0CW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x11`$\x82\x01R\x7FBAD_MESSAGE_PROOF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[_a\x0F\x17\x84\x8Aa>mV[\x90P_[` \x81c\xFF\xFF\xFF\xFF\x16\x10\x80\x15a\x0F?WP\x81a\x0F=c\xFF\xFF\xFF\xFF\x83\x16\x8Ba=\x9FV[\x10[\x15a\x0F\x98Wa\x0F\x84\x84c\xFF\xFF\xFF\xFF\x83\x16\x8D\x8D\x82a\x0F\\\x8F\x8Ca=\x9FV[a\x0Ff\x91\x90a=\x9FV[\x81\x81\x10a\x0FuWa\x0Fua=\xC5V[\x91\x90\x91\x015`\xF8\x1C\x90Pa\x1A\x1AV[\x93P\x80a\x0F\x90\x81a>\x80V[\x91PPa\x0F\x1BV[a\x0F\xA3\x83\x87\x86a\x1A\xA5V[` \x8E\x01Q`@\x01Ra\x0F\xF7a\x0F\xE4\x82`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01RP`@\x80Q\x80\x82\x01\x90\x91R_\x81Rc\xFF\xFF\xFF\xFF\x90\x91\x16` \x82\x01R\x90V[\x8F` \x01Qa\x1B>\x90\x91\x90c\xFF\xFF\xFF\xFF\x16V[PPPPPPPPPPPPPPPV[PP`\x01\x90\x92RPPPV[_`@Q\x80`@\x01`@R\x80`\x13\x81R` \x01\x7FModule merkle tree:\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x90P_\x86a\x01`\x01Q\x90P_a\x10ga\x04\xAB\x89` \x01Qa\x17IV[c\xFF\xFF\xFF\xFF\x16\x90Pa\x10\x86\x81\x88` \x01Qa\">\x90\x91\x90c\xFF\xFF\xFF\xFF\x16V[a\x10\x92W\x87`\x02a\r\x02V[_\x80a\x10\xB0a\x10\xA2` \x85a=\xB2V[` \x8B\x01Q\x90\x89\x89_a\x18)V[P\x91P\x91P_\x80a\x10\xC3\x8C\x84\x8B\x8Ba\"sV[\x92PP\x91P_a\x10\xDE\x83`\x01a\x10\xD9\x91\x90a=\x9FV[a$\xC7V[\x90P\x80\x15a\x11\x08Wa\x10\xFD\x87a\x10\xF5\x85`\x01a=\x9FV[\x87_\x8Ca$\xE6V[a\x01`\x8E\x01Ra\x11&V[a\x11\x1Fa\x11\x16\x84`\x01a=\x9FV[\x83\x90\x87\x8Ba%\x8FV[a\x01`\x8E\x01R[a\x0C\x81a\x0Cva\x117\x85`\x01a=\x9FV[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01RP`@\x80Q\x80\x82\x01\x90\x91R_\x81Rc\xFF\xFF\xFF\xFF\x90\x91\x16` \x82\x01R\x90V[`@\x80Q\x80\x82\x01\x90\x91R`\x13\x81R\x7FModule merkle tree:\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R_\x80a\x11\xAA\x88\x82\x87\x87a\"sV[P\x91P\x91P_a\x11\xB9\x83a$\xC7V[\x90P\x80\x15a\x11\xF8W\x81Q\x80Qa\x11\xD1\x90`\x01\x90a>mV[\x81Q\x81\x10a\x11\xE1Wa\x11\xE1a=\xC5V[` \x02` \x01\x01Q\x89a\x01`\x01\x81\x81RPPa\x12\x0BV[a\x12\x04\x82\x84_\x87a%\x8FV[a\x01`\x8A\x01R[PPPPPPPPPPV[a\x01@\x85\x01Q_\x19\x14a\x12CW\x84`\x02[\x90\x81`\x02\x81\x11\x15a\x12;Wa\x12;a4\xDBV[\x90RPa\x0C\x8AV[a\x12P\x85`\xA0\x01Qa&\x99V[a\x0C\x8A\x85`@\x01Qa&\x99V[a\x01@\x85\x01Q_\x19\x14a\x12rW\x84`\x02a\x12(V[`\xA0\x85\x01QQ`\x01\x01a\x12\x87W\x84`\x02a\x12(V[a\x12\x96\x85`@\x01Q\x83\x83a'\x0BV[`\xA0\x85\x01Qa\x0C\x8A\x90a\x12\xAC\x83`@\x81\x87a==V[a'\x0BV[`\xA0\x85\x01QQ`\x01\x01a\x12\xC6W\x84`\x02a\x12(V[\x82` \x015_\x03a\x12\xF3Wa\x01@\x85\x01Q`\x01\x01a\x12\xE6W\x84`\x02a\x12(V[_\x19a\x01@\x86\x01Ra\x13\x18V[a\x01@\x85\x01Q_\x19\x14a\x13\x08W\x84`\x02a\x12(V[a\x13\x16\x85` \x85\x015a(\x92V[P[a\x0C\x8A\x85a)\x01V[a\x13)a3\\V[\x81a\x132a3\x81V[a\x13:a3\x81V[_[`\x02`\xFF\x82\x16\x10\x15a\x13\x84Wa\x13S\x88\x88\x86a)\x83V[\x84\x83`\xFF\x16`\x02\x81\x10a\x13hWa\x13ha=\xC5V[` \x02\x01\x91\x90\x91R\x93P\x80a\x13|\x81a>\xA2V[\x91PPa\x13<V[P_[`\x02`\xFF\x82\x16\x10\x15a\x13\xDEWa\x13\x9E\x88\x88\x86a)\x9EV[\x83\x83`\xFF\x16`\x02\x81\x10a\x13\xB3Wa\x13\xB3a=\xC5V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x93\x16` \x93\x90\x93\x02\x01\x91\x90\x91R\x93P\x80a\x13\xD6\x81a>\xA2V[\x91PPa\x13\x87V[P`@\x80Q\x80\x82\x01\x90\x91R\x91\x82R` \x82\x01R\x95\x90\x94P\x92PPPV[\x80Q\x80Q` \x91\x82\x01Q\x82\x84\x01Q\x80Q\x90\x84\x01Q`@Q\x7FGlobal state:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x95\x81\x01\x95\x90\x95R`-\x85\x01\x93\x90\x93R`M\x84\x01\x91\x90\x91R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xC0\x91\x82\x1B\x81\x16`m\x85\x01R\x91\x90\x1B\x16`u\x82\x01R_\x90`}\x01[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P\x91\x90PV[_a\x14\xB4a\x04\xAB\x88` \x01Qa\x17IV[c\xFF\xFF\xFF\xFF\x16\x90P_a\x14\xCDa\x04\xAB\x89` \x01Qa\x17IV[\x90P`\x02c\xFF\xFF\xFF\xFF\x82\x16\x10a\x14\xE5W\x87`\x02a\x05 V[` \x87\x01Qa\x14\xF4\x90\x83a\">V[a\x15\0W\x87`\x02a\x05 V[_a\x15\x0C` \x84a=\xB2V[\x90P_\x80a\x15&`@Q\x80` \x01`@R\x80``\x81RP\x90V[` \x8B\x01Qa\x158\x90\x85\x8A\x8A\x87a\x18)V[\x90\x94P\x90\x92P\x90Pa\x80\x10a\x15P` \x8B\x01\x8Ba=\x1CV[a\xFF\xFF\x16\x03a\x15\x93Wa\x15\x85\x84\x8B_\x01Q\x87c\xFF\xFF\xFF\xFF\x16`\x02\x81\x10a\x15xWa\x15xa=\xC5V[` \x02\x01Q\x83\x91\x90a\x1A\xA5V[` \x8C\x01Q`@\x01Ra\x16\x19V[a\x80\x11a\x15\xA3` \x8B\x01\x8Ba=\x1CV[a\xFF\xFF\x16\x03a\x15\xD1W\x89Q\x82\x90c\xFF\xFF\xFF\xFF\x87\x16`\x02\x81\x10a\x15\xC7Wa\x15\xC7a=\xC5V[` \x02\x01Ra\x16\x19V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x17`$\x82\x01R\x7FBAD_GLOBAL_STATE_OPCODE\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[PPPPPPPPPPPPV[_a\x168a\x04\xAB\x84` \x01Qa\x17IV[\x90P`\x02c\xFF\xFF\xFF\xFF\x82\x16\x10a\x16gW\x82`\x02[\x90\x81`\x02\x81\x11\x15a\x16_Wa\x16_a4\xDBV[\x90RPPPPV[a\x16\xCFa\x16\xC4\x83` \x01Q\x83c\xFF\xFF\xFF\xFF\x16`\x02\x81\x10a\x16\x89Wa\x16\x89a=\xC5V[` \x02\x01Q`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01RP`@\x80Q\x80\x82\x01\x90\x91R`\x01\x81Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16` \x82\x01R\x90V[` \x85\x01Q\x90a\x1B>V[PPPV[_a\x16\xE5a\x0C\xD5\x84` \x01Qa\x17IV[\x90P_a\x16\xF8a\x04\xAB\x85` \x01Qa\x17IV[\x90P`\x02c\xFF\xFF\xFF\xFF\x82\x16\x10a\x17\x12WPP`\x02\x90\x91RPV[\x81\x83` \x01Q\x82c\xFF\xFF\xFF\xFF\x16`\x02\x81\x10a\x17/Wa\x17/a=\xC5V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x92\x16` \x92\x90\x92\x02\x01RPPPPV[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x81Qa\x17g\x90a)\xFAV[\x92\x91PPV[` \x81\x01Q_\x90\x81\x83Q`\x06\x81\x11\x15a\x17\x88Wa\x17\x88a4\xDBV[\x14a\x17\xD5W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FNOT_I32\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[d\x01\0\0\0\0\x81\x10a\x17gW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FBAD_I32\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[_\x80a\x18A`@Q\x80` \x01`@R\x80``\x81RP\x90V[\x83\x91Pa\x18O\x86\x86\x84a)\x83V[\x90\x93P\x91Pa\x18_\x86\x86\x84a*\xFBV[\x92P\x90P_a\x18o\x82\x89\x86a\x1A\xA5V[\x90P\x88`@\x01Q\x81\x14a\x18\xC4W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0E`$\x82\x01R\x7FWRONG_MEM_ROOT\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[P\x95P\x95P\x95\x92PPPV[`@\x80Q` \x80\x82\x01\x81\x90R\x81\x83\x01\x81\x90R``\x82\x01R`\x80\x81\x01\x85\x90R`\xA0\x81\x01\x84\x90R`\xC0\x80\x82\x01\x84\x90R\x82Q\x80\x83\x03\x90\x91\x01\x81R`\xE0\x90\x91\x01\x91\x82\x90R_\x91\x82\x90\x81\x90`\x05\x90a\x19$\x90\x85\x90a>\xD7V[_`@Q\x80\x83\x03\x81\x85Z\xFA\x91PP=\x80_\x81\x14a\x19\\W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x19aV[``\x91P[P\x91P\x91P\x81a\x19\xB3W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\r`$\x82\x01R\x7FMODEXP_FAILED\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[\x80Q` \x14a\x1A\x04W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x13`$\x82\x01R\x7FMODEXP_WRONG_LENGTH\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[a\x1A\r\x81a>\xE2V[\x93PPPP[\x93\x92PPPV[_` \x83\x10a\x1AkW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x15`$\x82\x01R\x7FBAD_SET_LEAF_BYTE_IDX\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[_\x83a\x1Ay`\x01` a>mV[a\x1A\x83\x91\x90a>mV[a\x1A\x8E\x90`\x08a>VV[`\xFF\x84\x81\x16\x82\x1B\x91\x1B\x19\x86\x16\x17\x91PP\x93\x92PPPV[`@Q\x7FMemory leaf:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`,\x81\x01\x82\x90R_\x90\x81\x90`L\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90Pa\x1B5\x85\x85\x83`@Q\x80`@\x01`@R\x80`\x13\x81R` \x01\x7FMemory merkle tree:\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RPa%\x8FV[\x95\x94PPPPPV[\x81Qa\x1BJ\x90\x82a+\xC8V[PPV[` \x81\x01Q_\x90`\x01\x83Q`\x06\x81\x11\x15a\x1BjWa\x1Bja4\xDBV[\x14a\x1B\xB7W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FNOT_I64\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[h\x01\0\0\0\0\0\0\0\0\x81\x10a\x17gW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FBAD_I64\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[_`(\x82\x10\x15a\x1CaW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x12`$\x82\x01R\x7FBAD_SEQINBOX_PROOF\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[_a\x1Cn\x84\x84` a)\x9EV[P\x80\x91PP_\x84\x84`@Qa\x1C\x84\x92\x91\x90a=\xF1V[`@Q\x90\x81\x90\x03\x90 \x90P_\x80g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x88\x16\x15a\x1DYWa\x1C\xB1`@\x8A\x01` \x8B\x01a?\x05V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x16\xBFUya\x1C\xD7`\x01\x8Ba?8V[`@Q\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xE0\x84\x90\x1B\x16\x81Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16`\x04\x82\x01R`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x1D2W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x1DV\x91\x90a>\0V[\x91P[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x16\x15a\x1E!Wa\x1Dy`@\x8A\x01` \x8B\x01a?\x05V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xD5q\x9D\xC2a\x1D\x9F`\x01\x87a?8V[`@Q\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xE0\x84\x90\x1B\x16\x81Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16`\x04\x82\x01R`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x1D\xFAW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x1E\x1E\x91\x90a>\0V[\x90P[`@\x80Q` \x81\x01\x84\x90R\x90\x81\x01\x84\x90R``\x81\x01\x82\x90R_\x90`\x80\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P\x89` \x01` \x81\x01\x90a\x1Ei\x91\x90a?\x05V[`@Q\x7F\x16\xBFUy\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x8B\x16`\x04\x82\x01Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91\x90\x91\x16\x90c\x16\xBFUy\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x1E\xDDW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x1F\x01\x91\x90a>\0V[\x81\x14a\x1FOW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x14`$\x82\x01R\x7FBAD_SEQINBOX_MESSAGE\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[`\x01\x95PPPPPP[\x94\x93PPPPV[_`q\x82\x10\x15a\x1F\xB3W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x11`$\x82\x01R\x7FBAD_DELAYED_PROOF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x85\x16\x15a |Wa\x1F\xD4`@\x87\x01` \x88\x01a?\x05V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xD5q\x9D\xC2a\x1F\xFA`\x01\x88a?8V[`@Q\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xE0\x84\x90\x1B\x16\x81Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16`\x04\x82\x01R`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a UW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a y\x91\x90a>\0V[\x90P[_a \x8A\x84`q\x81\x88a==V[`@Qa \x98\x92\x91\x90a=\xF1V[`@Q\x80\x91\x03\x90 \x90P_\x85\x85_\x81\x81\x10a \xB5Wa \xB5a=\xC5V[\x90P\x015`\xF8\x1C`\xF8\x1B\x90P_a \xCE\x87\x87`\x01a,\xADV[P\x90P_\x82\x82a \xE2`q`!\x8B\x8Da==V[\x87`@Q` \x01a \xF7\x95\x94\x93\x92\x91\x90a?`V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x82\x82R\x80Q` \x91\x82\x01 \x83\x82\x01\x89\x90R\x83\x83\x01\x81\x90R\x82Q\x80\x85\x03\x84\x01\x81R``\x90\x94\x01\x90\x92R\x82Q\x92\x01\x91\x90\x91 \x90\x91Pa!G`@\x8C\x01` \x8D\x01a?\x05V[`@Q\x7F\xD5q\x9D\xC2\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x8C\x16`\x04\x82\x01Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91\x90\x91\x16\x90c\xD5q\x9D\xC2\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a!\xBBW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a!\xDF\x91\x90a>\0V[\x81\x14a\"-W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x13`$\x82\x01R\x7FBAD_DELAYED_MESSAGE\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[P`\x01\x9A\x99PPPPPPPPPPV[\x81Q_\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\"W\x83` a=\x9FV[\x11\x15\x80\x15a\x1A\x13WPa\"k` \x83a=xV[\x15\x93\x92PPPV[_a\"\x8A`@Q\x80` \x01`@R\x80``\x81RP\x90V[`@\x80Q` \x81\x01\x90\x91R``\x81R`@\x80Q\x80\x82\x01\x90\x91R`\x13\x81R\x7FModule merkle tree:\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01Ra\x01`\x88\x01Qa#$`@\x80Q`\xC0\x81\x01\x82R_\x80\x82R\x82Q``\x81\x01\x84R\x81\x81R` \x81\x81\x01\x83\x90R\x93\x81\x01\x91\x90\x91R\x90\x91\x82\x01\x90\x81R_` \x82\x01\x81\x90R`@\x82\x01\x81\x90R``\x82\x01\x81\x90R`\x80\x90\x91\x01R\x90V[_a#0\x89\x89\x8Ca,\xF6V[\x9AP\x91Pa#?\x89\x89\x8Ca-\xF8V[\x9AP\x90Pa#N\x89\x89\x8Ca*\xFBV[\x9APc\xFF\xFF\xFF\xFF\x80\x83\x16\x98P\x90\x96P_\x90a#o\x90\x88\x90\x8A\x90\x86\x90a.G\x16V[\x90P\x83\x81\x14a#\xC0W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x13`$\x82\x01R\x7FWRONG_ROOT_FOR_LEAF\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[PPP_a#\xD4\x86`\x01a\x10\xD9\x91\x90a=\x9FV[\x90P\x80\x15a$@Wa#\xE7\x86`\x01a=\x9FV[\x85QQ`\x01\x90\x1B\x14a$;W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\n`$\x82\x01R\x7FWRONG_LEAF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[a$\xBAV[a$K\x88\x88\x8Ba*\xFBV[\x99P\x93P_a$ga$^\x88`\x01a=\x9FV[\x86\x90_\x87a%\x8FV[\x90P\x82\x81\x14a$\xB8W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x13`$\x82\x01R\x7FWRONG_ROOT_FOR_ZERO\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[P[PPP\x94P\x94P\x94\x91PPV[_\x81\x15\x80\x15\x90a\x17gWPa$\xDD`\x01\x83a>mV[\x82\x16\x15\x92\x91PPV[_\x83\x85[`\x01\x81\x11\x15a%WW\x83\x82\x86`@Q` \x01a%\x08\x93\x92\x91\x90a?\xC9V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x91P\x83\x85\x86`@Q` \x01a%5\x93\x92\x91\x90a?\xC9V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R\x80Q` \x90\x91\x01 \x94P`\x01\x1Ca$\xEAV[\x83\x88\x83`@Q` \x01a%l\x93\x92\x91\x90a?\xC9V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x92PPP\x95\x94PPPPPV[\x81_[\x85QQ\x81\x10\x15a&JW\x84`\x01\x16_\x03a%\xF4W\x82\x82\x87_\x01Q\x83\x81Q\x81\x10a%\xBDWa%\xBDa=\xC5V[` \x02` \x01\x01Q`@Q` \x01a%\xD7\x93\x92\x91\x90a?\xC9V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x91Pa&>V[\x82\x86_\x01Q\x82\x81Q\x81\x10a&\nWa&\na=\xC5V[` \x02` \x01\x01Q\x83`@Q` \x01a&%\x93\x92\x91\x90a?\xC9V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x91P[`\x01\x94\x85\x1C\x94\x01a%\x92V[P\x83\x15a\x1FYW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0F`$\x82\x01R\x7FPROOF_TOO_SHORT\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[\x80Q_\x19\x14a'\x06W\x80Q` \x80\x83\x01Q`@Qa&\xE9\x93\x92\x01\x7Fcothread:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\t\x81\x01\x92\x90\x92R`)\x82\x01R`I\x01\x90V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R\x80Q` \x91\x82\x01 \x90\x82\x01R[_\x90RV[_\x80\x80a'\x19\x85\x85\x85a)\x83V[\x93P\x91Pa'(\x85\x85\x85a)\x83V[\x93P\x90P`\x01\x82\x01a'\xD9W\x80\x15a'\x82W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x14`$\x82\x01R\x7FWRONG_COTHREAD_EMPTY\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[` \x86\x01Q\x15a'\xD4W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x14`$\x82\x01R\x7FWRONG_COTHREAD_EMPTY\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[a(\x85V[\x85` \x01Q\x82\x82`@Q` \x01a(\"\x92\x91\x90\x7Fcothread:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\t\x81\x01\x92\x90\x92R`)\x82\x01R`I\x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x14a(\x85W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x12`$\x82\x01R\x7FWRONG_COTHREAD_POP\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE5V[` \x86\x01R\x90\x93RPPPV[a\x01@\x82\x01Q_\x90_\x19\x14a(\xA8WP_a\x17gV[_`@\x84`\xE0\x01Qc\xFF\xFF\xFF\xFF\x16\x90\x1B\x90P` \x84a\x01\0\x01Qc\xFF\xFF\xFF\xFF\x16\x90\x1B\x81\x17\x90P`\x01\x83\x85a\x01 \x01Qa(\xE1\x91\x90a?\xE6V[a(\xEB\x91\x90a@\x03V[c\xFF\xFF\xFF\xFF\x16\x17a\x01@\x84\x01RP`\x01\x92\x91PPV[`@\x81\x01QQ`\xA0\x82\x01QQ_\x19\x81\x14\x80a)\x1CWP_\x19\x82\x14[\x15a))W\x82`\x02a\x16LV[a)6\x83`\x80\x01Qa.\x91V[`\xA0\x84\x01QR` \x83\x01Qa)J\x90a/*V[`@\x84\x01QR`\x80\x83\x01Qa)e\x90\x82` \x82\x01R``\x90RV[P` \x91\x82\x01Q\x80\x83\x01\x91\x90\x91R`@\x80Q\x92\x83\x01\x90R``\x82RRV[_\x81\x81a)\x91\x86\x86\x84a,\xADV[\x90\x97\x90\x96P\x94PPPPPV[_\x81\x81[`\x08\x81\x10\x15a)\xF1W`\x08\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x1B\x92P\x85\x85\x83\x81\x81\x10a)\xCEWa)\xCEa=\xC5V[\x91\x90\x91\x015`\xF8\x1C\x93\x90\x93\x17\x92P\x81a)\xE6\x81a=\xD9V[\x92PP`\x01\x01a)\xA2V[P\x93P\x93\x91PPV[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x81Q\x80Qa*\x1D\x90`\x01\x90a>mV[\x81Q\x81\x10a*-Wa*-a=\xC5V[` \x02` \x01\x01Q\x90P_`\x01\x83_\x01QQa*I\x91\x90a>mV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a*aWa*aa7\xA3V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a*\xA5W\x81` \x01[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x81R` \x01\x90`\x01\x90\x03\x90\x81a*\x7FW\x90P[P\x90P_[\x81Q\x81\x10\x15a*\xF4W\x83Q\x80Q\x82\x90\x81\x10a*\xC7Wa*\xC7a=\xC5V[` \x02` \x01\x01Q\x82\x82\x81Q\x81\x10a*\xE1Wa*\xE1a=\xC5V[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a*\xAAV[P\x90\x91R\x90V[`@\x80Q` \x81\x01\x90\x91R``\x81R\x81_a+\x17\x86\x86\x84a/\xB6V[\x92P\x90P_`\xFF\x82\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a+8Wa+8a7\xA3V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a+aW\x81` \x01` \x82\x02\x806\x837\x01\x90P[P\x90P_[\x82`\xFF\x16\x81`\xFF\x16\x10\x15a+\xACWa+\x7F\x88\x88\x86a)\x83V[\x83\x83`\xFF\x16\x81Q\x81\x10a+\x94Wa+\x94a=\xC5V[` \x90\x81\x02\x91\x90\x91\x01\x01\x91\x90\x91R\x93P`\x01\x01a+fV[P`@Q\x80` \x01`@R\x80\x82\x81RP\x93PPP\x93P\x93\x91PPV[\x81QQ_\x90a+\xD8\x90`\x01a=\x9FV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a+\xF0Wa+\xF0a7\xA3V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a,4W\x81` \x01[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x81R` \x01\x90`\x01\x90\x03\x90\x81a,\x0EW\x90P[P\x90P_[\x83QQ\x81\x10\x15a,\x84W\x83Q\x80Q\x82\x90\x81\x10a,WWa,Wa=\xC5V[` \x02` \x01\x01Q\x82\x82\x81Q\x81\x10a,qWa,qa=\xC5V[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a,9V[P\x81\x81\x84_\x01QQ\x81Q\x81\x10a,\x9CWa,\x9Ca=\xC5V[` \x90\x81\x02\x91\x90\x91\x01\x01R\x90\x91RPV[_\x81\x81[` \x81\x10\x15a)\xF1W`\x08\x83\x90\x1B\x92P\x85\x85\x83\x81\x81\x10a,\xD3Wa,\xD3a=\xC5V[\x91\x90\x91\x015`\xF8\x1C\x93\x90\x93\x17\x92P\x81a,\xEB\x81a=\xD9V[\x92PP`\x01\x01a,\xB1V[`@\x80Q`\xC0\x81\x01\x82R_\x80\x82R\x82Q``\x80\x82\x01\x85R\x82\x82R` \x80\x83\x01\x84\x90R\x82\x86\x01\x84\x90R\x84\x01\x91\x90\x91R\x92\x82\x01\x81\x90R\x91\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x91\x90\x91R`@\x80Q``\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R\x83\x91\x90_\x80_\x80a-l\x8B\x8B\x89a)\x83V[\x97P\x95Pa-{\x8B\x8B\x89a/\xEBV[\x97P\x94Pa-\x8A\x8B\x8B\x89a)\x83V[\x97P\x93Pa-\x99\x8B\x8B\x89a)\x83V[\x97P\x92Pa-\xA8\x8B\x8B\x89a)\x83V[\x97P\x91Pa-\xB7\x8B\x8B\x89a-\xF8V[`@\x80Q`\xC0\x81\x01\x82R\x98\x89R` \x89\x01\x97\x90\x97R\x95\x87\x01\x94\x90\x94RP``\x85\x01\x91\x90\x91R`\x80\x84\x01Rc\xFF\xFF\xFF\xFF\x16`\xA0\x83\x01R\x90\x96\x90\x95P\x93PPPPV[_\x81\x81[`\x04\x81\x10\x15a)\xF1W`\x08\x83c\xFF\xFF\xFF\xFF\x16\x90\x1B\x92P\x85\x85\x83\x81\x81\x10a.$Wa.$a=\xC5V[\x91\x90\x91\x015`\xF8\x1C\x93\x90\x93\x17\x92P\x81a.<\x81a=\xD9V[\x92PP`\x01\x01a-\xFCV[_a\x1FY\x84\x84a.V\x85a0eV[`@Q\x80`@\x01`@R\x80`\x13\x81R` \x01\x7FModule merkle tree:\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RPa%\x8FV[` \x81\x01Q_[\x82QQ\x81\x10\x15a/$Wa.\xC7\x83_\x01Q\x82\x81Q\x81\x10a.\xBAWa.\xBAa=\xC5V[` \x02` \x01\x01Qa1\rV[`@Q\x7FStack frame stack:\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`2\x81\x01\x91\x90\x91R`R\x81\x01\x83\x90R`r\x01`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R\x80Q` \x90\x91\x01 \x91P`\x01\x01a.\x98V[P\x91\x90PV[` \x81\x01Q\x81QQQ_[\x81\x81\x10\x15a/\xAFW\x83Qa/R\x90a/M\x90\x83a1\xA4V[a1\xDBV[`@Q\x7FValue stack:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`,\x81\x01\x91\x90\x91R`L\x81\x01\x84\x90R`l\x01`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R\x80Q` \x90\x91\x01 \x92P`\x01\x01a/5V[PP\x91\x90PV[_\x81\x84\x84\x82\x81\x81\x10a/\xCAWa/\xCAa=\xC5V[\x91\x90\x91\x015`\xF8\x1C\x92P\x81\x90Pa/\xE0\x81a=\xD9V[\x91PP\x93P\x93\x91PPV[`@\x80Q``\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x91\x90\x91R\x81_\x80\x80a0\x16\x88\x88\x86a)\x9EV[\x94P\x92Pa0%\x88\x88\x86a)\x9EV[\x94P\x91Pa04\x88\x88\x86a)\x83V[`@\x80Q``\x81\x01\x82Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x96\x87\x16\x81R\x94\x90\x95\x16` \x85\x01R\x93\x83\x01RP\x96\x90\x95P\x93PPPPV[_\x81_\x01Qa0w\x83` \x01Qa1\xF6V[`@\x80\x85\x01Q``\x86\x01Q`\x80\x87\x01Q`\xA0\x88\x01Q\x93Qa\x14\x86\x96\x95\x94\x90` \x01\x7FModule:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x07\x81\x01\x96\x90\x96R`'\x86\x01\x94\x90\x94R`G\x85\x01\x92\x90\x92R`g\x84\x01R`\x87\x83\x01R`\xE0\x1B\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16`\xA7\x82\x01R`\xAB\x01\x90V[_a1\x1A\x82_\x01Qa1\xDBV[` \x80\x84\x01Q`@\x80\x86\x01Q``\x87\x01Q\x91Q\x7FStack frame:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x94\x81\x01\x94\x90\x94R`,\x84\x01\x94\x90\x94R`L\x83\x01\x91\x90\x91R\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xE0\x93\x84\x1B\x81\x16`l\x84\x01R\x92\x1B\x90\x91\x16`p\x82\x01R`t\x01a\x14\x86V[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x82Q\x80Q\x83\x90\x81\x10a1\xCBWa1\xCBa=\xC5V[` \x02` \x01\x01Q\x90P\x92\x91PPV[_\x81_\x01Q\x82` \x01Q`@Q` \x01a\x14\x86\x92\x91\x90a@ V[\x80Q` \x80\x83\x01Q`@\x80\x85\x01Q\x90Q\x7FMemory:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x93\x81\x01\x93\x90\x93R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xC0\x94\x85\x1B\x81\x16`'\x85\x01R\x91\x90\x93\x1B\x16`/\x82\x01R`7\x81\x01\x91\x90\x91R_\x90`W\x01a\x14\x86V[`@\x80Qa\x01\x80\x81\x01\x90\x91R\x80_\x81R` \x01a2\xAA`@\x80Q``\x80\x82\x01\x83R\x91\x81\x01\x91\x82R\x90\x81R_` \x82\x01R\x90V[\x81R`@\x80Q\x80\x82\x01\x82R_\x80\x82R` \x80\x83\x01\x91\x90\x91R\x83\x01R\x01a2\xE6`@\x80Q``\x80\x82\x01\x83R\x91\x81\x01\x91\x82R\x90\x81R_` \x82\x01R\x90V[\x81R` \x01a3\n`@Q\x80`@\x01`@R\x80``\x81R` \x01_\x80\x19\x16\x81RP\x90V[\x81R`@\x80Q\x80\x82\x01\x82R_\x80\x82R` \x80\x83\x01\x82\x90R\x84\x01\x91\x90\x91R\x90\x82\x01\x81\x90R``\x82\x01\x81\x90R`\x80\x82\x01\x81\x90R`\xA0\x82\x01\x81\x90R`\xC0\x82\x01\x81\x90R`\xE0\x90\x91\x01R\x90V[a3Za@kV[V[`@Q\x80`@\x01`@R\x80a3oa3\x81V[\x81R` \x01a3|a3\x81V[\x90R\x90V[`@Q\x80`@\x01`@R\x80`\x02\x90` \x82\x02\x806\x837P\x91\x92\x91PPV[_\x80\x83`\x1F\x84\x01\x12a3\xAFW_\x80\xFD[P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a3\xC6W_\x80\xFD[` \x83\x01\x91P\x83` \x82\x85\x01\x01\x11\x15a3\xDDW_\x80\xFD[\x92P\x92\x90PV[_\x80_\x80_\x80\x86\x88\x03a\x01\xE0\x81\x12\x15a3\xFBW_\x80\xFD[``\x81\x12\x15a4\x08W_\x80\xFD[\x87\x96P``\x88\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a4%W_\x80\xFD[\x81\x8A\x01\x91Pa\x01\xC0\x80\x83\x8D\x03\x12\x15a4;W_\x80\xFD[\x82\x98Pa\x01\0\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x85\x01\x12\x15a4nW_\x80\xFD[`\x80\x8B\x01\x97P`@\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFE\x80\x85\x01\x12\x15a4\xA3W_\x80\xFD[a\x01\x80\x8B\x01\x96P\x8A\x015\x92P\x80\x83\x11\x15a4\xBBW_\x80\xFD[PPa4\xC9\x89\x82\x8A\x01a3\x9FV[\x97\x9A\x96\x99P\x94\x97P\x92\x95\x93\x94\x92PPPV[cNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[`\x03\x81\x10a4\xFFWa4\xFFa4\xDBV[\x90RV[\x80Q`\x07\x81\x10a5\x15Wa5\x15a4\xDBV[\x82R` \x90\x81\x01Q\x91\x01RV[\x80Q`@\x80\x84R\x90Q` \x84\x83\x01\x81\x90R\x81Q``\x86\x01\x81\x90R_\x93\x92\x82\x01\x91\x84\x91`\x80\x88\x01\x90[\x80\x84\x10\x15a5qWa5]\x82\x86Qa5\x03V[\x93\x82\x01\x93`\x01\x93\x90\x93\x01\x92\x90\x85\x01\x90a5JV[P` \x87\x01Q` \x89\x01R\x80\x95PPPPPP\x92\x91PPV[\x80Q`@\x80\x84R\x81Q\x84\x82\x01\x81\x90R_\x92``\x91` \x91\x82\x01\x91\x83\x88\x01\x91\x90\x86[\x82\x81\x10\x15a5\xF4W\x84Qa5\xC0\x85\x82Qa5\x03V[\x80\x83\x01Q\x85\x89\x01R\x87\x81\x01Qc\xFF\xFF\xFF\xFF\x90\x81\x16\x88\x87\x01R\x90\x87\x01Q\x16`\x80\x85\x01R\x93\x81\x01\x93`\xA0\x90\x93\x01\x92`\x01\x01a5\xABV[PPP` \x86\x01Q` \x88\x01R\x80\x94PPPPP\x92\x91PPV[_a\x01 \x80\x83Ra6\"\x81\x84\x01\x86Qa4\xEFV[` \x85\x01Qa\x01\xC0a\x01@\x81\x81\x87\x01Ra6@a\x02\xE0\x87\x01\x84a5\"V[\x92P`@\x88\x01Qa\x01`a6`\x81\x89\x01\x83\x80Q\x82R` \x90\x81\x01Q\x91\x01RV[``\x8A\x01Q\x91P\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFE\xE0\x80\x89\x87\x03\x01a\x01\xA0\x8A\x01Ra6\x9D\x86\x84a5\"V[\x95P`\x80\x8B\x01Q\x92P\x80\x89\x87\x03\x01\x85\x8A\x01RPa6\xBA\x85\x83a5\x8AV[`\xA0\x8B\x01Q\x80Qa\x01\xE0\x8B\x01R` \x81\x01Qa\x02\0\x8B\x01R\x90\x95P\x93P`\xC0\x8A\x01Qa\x02 \x89\x01R`\xE0\x8A\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x02@\x8A\x01R\x93Pa\x01\0\x8A\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x02`\x8A\x01R\x93P\x94\x89\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x02\x80\x89\x01R\x94\x91\x89\x01Qa\x02\xA0\x88\x01RP\x87\x01Qa\x02\xC0\x86\x01RP\x91Pa\x1A\x13\x90P` \x83\x01\x84\x80Q\x82R` \x81\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82Q\x16` \x85\x01R\x80` \x83\x01Q\x16`@\x85\x01RP`@\x81\x01Q``\x84\x01RP`@\x81\x01Q`\x80\x83\x01R``\x81\x01Q`\xA0\x83\x01R`\x80\x81\x01Q`\xC0\x83\x01Rc\xFF\xFF\xFF\xFF`\xA0\x82\x01Q\x16`\xE0\x83\x01RPPV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@\x80Q\x90\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a7\xDAWa7\xDAa7\xA3V[`@R\x90V[`@Q` \x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a7\xDAWa7\xDAa7\xA3V[`@Q`\x80\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a7\xDAWa7\xDAa7\xA3V[`@Qa\x01\x80\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a7\xDAWa7\xDAa7\xA3V[`@Q`\xC0\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a7\xDAWa7\xDAa7\xA3V[`@Q``\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a7\xDAWa7\xDAa7\xA3V[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a8\xB9Wa8\xB9a7\xA3V[`@R\x91\x90PV[\x805`\x03\x81\x10a8\xCFW_\x80\xFD[\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a8\xEDWa8\xEDa7\xA3V[P`\x05\x1B` \x01\x90V[_`@\x82\x84\x03\x12\x15a9\x07W_\x80\xFD[a9\x0Fa7\xB7V[\x90P\x815`\x07\x81\x10a9\x1FW_\x80\xFD[\x80\x82RP` \x82\x015` \x82\x01R\x92\x91PPV[_`@\x80\x83\x85\x03\x12\x15a9DW_\x80\xFD[a9La7\xB7V[\x91P\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a9eW_\x80\xFD[\x81\x85\x01\x91P` \x80\x83\x88\x03\x12\x15a9zW_\x80\xFD[a9\x82a7\xE0V[\x835\x83\x81\x11\x15a9\x90W_\x80\xFD[\x80\x85\x01\x94PP\x87`\x1F\x85\x01\x12a9\xA4W_\x80\xFD[\x835\x92Pa9\xB9a9\xB4\x84a8\xD4V[a8\x90V[\x83\x81R`\x06\x93\x90\x93\x1B\x84\x01\x82\x01\x92\x82\x81\x01\x90\x89\x85\x11\x15a9\xD7W_\x80\xFD[\x94\x83\x01\x94[\x84\x86\x10\x15a9\xFDWa9\xEE\x8A\x87a8\xF7V[\x82R\x94\x86\x01\x94\x90\x83\x01\x90a9\xDCV[\x82RP\x85R\x94\x85\x015\x94\x84\x01\x94\x90\x94RP\x90\x93\x92PPPV[_`@\x82\x84\x03\x12\x15a:&W_\x80\xFD[a:.a7\xB7V[\x90P\x815\x81R` \x82\x015` \x82\x01R\x92\x91PPV[\x805c\xFF\xFF\xFF\xFF\x81\x16\x81\x14a8\xCFW_\x80\xFD[_`@\x80\x83\x85\x03\x12\x15a:hW_\x80\xFD[a:pa7\xB7V[\x91P\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a:\x88W_\x80\xFD[\x83\x01`\x1F\x81\x01\x85\x13a:\x98W_\x80\xFD[\x805` a:\xA8a9\xB4\x83a8\xD4V[\x82\x81R`\xA0\x92\x83\x02\x84\x01\x82\x01\x92\x82\x82\x01\x91\x90\x89\x85\x11\x15a:\xC6W_\x80\xFD[\x94\x83\x01\x94[\x84\x86\x10\x15a;-W\x80\x86\x8B\x03\x12\x15a:\xE1W_\x80\xFD[a:\xE9a8\x03V[a:\xF3\x8B\x88a8\xF7V[\x81R\x87\x87\x015\x85\x82\x01R``a;\n\x81\x89\x01a:DV[\x89\x83\x01Ra;\x1A`\x80\x89\x01a:DV[\x90\x82\x01R\x83R\x94\x85\x01\x94\x91\x83\x01\x91a:\xCBV[P\x80\x87RPP\x80\x86\x015\x81\x86\x01RPPPP\x92\x91PPV[_a\x01\xC0\x826\x03\x12\x15a;VW_\x80\xFD[a;^a8&V[a;g\x83a8\xC1V[\x81R` \x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a;\x83W_\x80\xFD[a;\x8F6\x83\x87\x01a93V[` \x84\x01Ra;\xA16`@\x87\x01a:\x16V[`@\x84\x01R`\x80\x85\x015\x91P\x80\x82\x11\x15a;\xB9W_\x80\xFD[a;\xC56\x83\x87\x01a93V[``\x84\x01R`\xA0\x85\x015\x91P\x80\x82\x11\x15a;\xDDW_\x80\xFD[Pa;\xEA6\x82\x86\x01a:WV[`\x80\x83\x01RPa;\xFD6`\xC0\x85\x01a:\x16V[`\xA0\x82\x01Ra\x01\0\x80\x84\x015`\xC0\x83\x01Ra\x01 a<\x1C\x81\x86\x01a:DV[`\xE0\x84\x01Ra\x01@a</\x81\x87\x01a:DV[\x83\x85\x01Ra\x01`\x92Pa<C\x83\x87\x01a:DV[\x91\x84\x01\x91\x90\x91Ra\x01\x80\x85\x015\x90\x83\x01Ra\x01\xA0\x90\x93\x015\x92\x81\x01\x92\x90\x92RP\x90V[\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a8\xCFW_\x80\xFD[_\x81\x83\x03a\x01\0\x81\x12\x15a<\x8FW_\x80\xFD[a<\x97a8JV[\x835\x81R```\x1F\x19\x83\x01\x12\x15a<\xACW_\x80\xFD[a<\xB4a8mV[\x91Pa<\xC2` \x85\x01a<fV[\x82Ra<\xD0`@\x85\x01a<fV[` \x83\x01R``\x84\x015`@\x83\x01R\x81` \x82\x01R`\x80\x84\x015`@\x82\x01R`\xA0\x84\x015``\x82\x01R`\xC0\x84\x015`\x80\x82\x01Ra=\x0F`\xE0\x85\x01a:DV[`\xA0\x82\x01R\x94\x93PPPPV[_` \x82\x84\x03\x12\x15a=,W_\x80\xFD[\x815a\xFF\xFF\x81\x16\x81\x14a\x1A\x13W_\x80\xFD[_\x80\x85\x85\x11\x15a=KW_\x80\xFD[\x83\x86\x11\x15a=WW_\x80\xFD[PP\x82\x01\x93\x91\x90\x92\x03\x91PV[cNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[_\x82a=\x86Wa=\x86a=dV[P\x06\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[\x80\x82\x01\x80\x82\x11\x15a\x17gWa\x17ga=\x8BV[_\x82a=\xC0Wa=\xC0a=dV[P\x04\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[__\x19\x82\x03a=\xEAWa=\xEAa=\x8BV[P`\x01\x01\x90V[\x81\x83\x827_\x91\x01\x90\x81R\x91\x90PV[_` \x82\x84\x03\x12\x15a>\x10W_\x80\xFD[PQ\x91\x90PV[\x805` \x83\x10\x15a\x17gW_\x19` \x84\x90\x03`\x03\x1B\x1B\x16\x92\x91PPV[_\x80`@\x83\x85\x03\x12\x15a>EW_\x80\xFD[PP\x80Q` \x90\x91\x01Q\x90\x92\x90\x91PV[\x80\x82\x02\x81\x15\x82\x82\x04\x84\x14\x17a\x17gWa\x17ga=\x8BV[\x81\x81\x03\x81\x81\x11\x15a\x17gWa\x17ga=\x8BV[_c\xFF\xFF\xFF\xFF\x80\x83\x16\x81\x81\x03a>\x98Wa>\x98a=\x8BV[`\x01\x01\x93\x92PPPV[_`\xFF\x82\x16`\xFF\x81\x03a>\xB7Wa>\xB7a=\x8BV[`\x01\x01\x92\x91PPV[_\x81Q\x80` \x84\x01\x85^_\x93\x01\x92\x83RP\x90\x91\x90PV[_a\x1A\x13\x82\x84a>\xC0V[\x80Q` \x80\x83\x01Q\x91\x90\x81\x10\x15a/$W_\x19` \x91\x90\x91\x03`\x03\x1B\x1B\x16\x91\x90PV[_` \x82\x84\x03\x12\x15a?\x15W_\x80\xFD[\x815s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x1A\x13W_\x80\xFD[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x81\x16\x82\x82\x16\x03\x90\x80\x82\x11\x15a?YWa?Ya=\x8BV[P\x92\x91PPV[\x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x86\x16\x81R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\x85``\x1B\x16`\x01\x82\x01R\x82\x84`\x15\x83\x017`\x15\x92\x01\x91\x82\x01R`5\x01\x93\x92PPPV[_a?\xD4\x82\x86a>\xC0V[\x93\x84RPP` \x82\x01R`@\x01\x91\x90PV[c\xFF\xFF\xFF\xFF\x81\x81\x16\x83\x82\x16\x01\x90\x80\x82\x11\x15a?YWa?Ya=\x8BV[c\xFF\xFF\xFF\xFF\x82\x81\x16\x82\x82\x16\x03\x90\x80\x82\x11\x15a?YWa?Ya=\x8BV[\x7FValue:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R_`\x07\x84\x10a@TWa@Ta4\xDBV[P`\xF8\x92\x90\x92\x1B`\x06\x83\x01R`\x07\x82\x01R`'\x01\x90V[cNH{q`\xE0\x1B_R`Q`\x04R`$_\xFD\xFE\xA2dipfsX\"\x12 \xC0\x03\xBB\xA7*\x8B\x94m\xBD~>Hv\xB1\xB56\\\xB4\xCD\x01\x17%\x1Be\xBD\x04[S$\xC8i\xF6dsolcC\0\x08\x19\x003",
    );
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MachineStatus(u8);
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<MachineStatus> for u8 {
            #[inline]
            fn stv_to_tokens(
                &self,
            ) -> <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'_> {
                alloy_sol_types::private::SolTypeValue::<
                    alloy::sol_types::sol_data::Uint<8>,
                >::stv_to_tokens(self)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::tokenize(self)
                    .0
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(self, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encoded_size(self)
            }
        }
        #[automatically_derived]
        impl MachineStatus {
            /// The Solidity type name.
            pub const NAME: &'static str = stringify!(@ name);
            /// Convert from the underlying value type.
            #[inline]
            pub const fn from(value: u8) -> Self {
                Self(value)
            }
            /// Return the underlying value.
            #[inline]
            pub const fn into(self) -> u8 {
                self.0
            }
            /// Return the single encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode(&self.0)
            }
            /// Return the packed encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode_packed(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode_packed(&self.0)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for MachineStatus {
            type RustType = u8;
            type Token<'a> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = Self::NAME;
            const ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                Self::type_check(token).is_ok()
            }
            #[inline]
            fn type_check(token: &Self::Token<'_>) -> alloy_sol_types::Result<()> {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::type_check(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::detokenize(token)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for MachineStatus {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::topic_preimage_length(rust)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(rust, out)
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic(rust)
            }
        }
    };
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ValueType(u8);
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<ValueType> for u8 {
            #[inline]
            fn stv_to_tokens(
                &self,
            ) -> <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'_> {
                alloy_sol_types::private::SolTypeValue::<
                    alloy::sol_types::sol_data::Uint<8>,
                >::stv_to_tokens(self)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::tokenize(self)
                    .0
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(self, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encoded_size(self)
            }
        }
        #[automatically_derived]
        impl ValueType {
            /// The Solidity type name.
            pub const NAME: &'static str = stringify!(@ name);
            /// Convert from the underlying value type.
            #[inline]
            pub const fn from(value: u8) -> Self {
                Self(value)
            }
            /// Return the underlying value.
            #[inline]
            pub const fn into(self) -> u8 {
                self.0
            }
            /// Return the single encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode(&self.0)
            }
            /// Return the packed encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode_packed(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode_packed(&self.0)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ValueType {
            type RustType = u8;
            type Token<'a> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = Self::NAME;
            const ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                Self::type_check(token).is_ok()
            }
            #[inline]
            fn type_check(token: &Self::Token<'_>) -> alloy_sol_types::Result<()> {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::type_check(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::detokenize(token)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ValueType {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::topic_preimage_length(rust)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(rust, out)
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic(rust)
            }
        }
    };
    /**```solidity
struct ExecutionContext { uint256 maxInboxMessagesRead; address bridge; bytes32 initialWasmModuleRoot; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ExecutionContext {
        #[allow(missing_docs)]
        pub maxInboxMessagesRead: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub bridge: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub initialWasmModuleRoot: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ExecutionContext> for UnderlyingRustTuple<'_> {
            fn from(value: ExecutionContext) -> Self {
                (value.maxInboxMessagesRead, value.bridge, value.initialWasmModuleRoot)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ExecutionContext {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    maxInboxMessagesRead: tuple.0,
                    bridge: tuple.1,
                    initialWasmModuleRoot: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for ExecutionContext {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for ExecutionContext {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.maxInboxMessagesRead),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.bridge,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.initialWasmModuleRoot),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ExecutionContext {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for ExecutionContext {
            const NAME: &'static str = "ExecutionContext";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "ExecutionContext(uint256 maxInboxMessagesRead,address bridge,bytes32 initialWasmModuleRoot)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.maxInboxMessagesRead,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.bridge,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.initialWasmModuleRoot,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ExecutionContext {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.maxInboxMessagesRead,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.bridge,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.initialWasmModuleRoot,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.maxInboxMessagesRead,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.bridge,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.initialWasmModuleRoot,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct Instruction { uint16 opcode; uint256 argumentData; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct Instruction {
        #[allow(missing_docs)]
        pub opcode: u16,
        #[allow(missing_docs)]
        pub argumentData: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<16>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            u16,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Instruction> for UnderlyingRustTuple<'_> {
            fn from(value: Instruction) -> Self {
                (value.opcode, value.argumentData)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Instruction {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    opcode: tuple.0,
                    argumentData: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Instruction {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Instruction {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        16,
                    > as alloy_sol_types::SolType>::tokenize(&self.opcode),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.argumentData),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Instruction {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Instruction {
            const NAME: &'static str = "Instruction";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "Instruction(uint16 opcode,uint256 argumentData)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        16,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.opcode)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.argumentData)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Instruction {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        16,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.opcode,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.argumentData,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    16,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.opcode,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.argumentData,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct Machine { MachineStatus status; ValueStack valueStack; MultiStack valueMultiStack; ValueStack internalStack; StackFrameWindow frameStack; MultiStack frameMultiStack; bytes32 globalStateHash; uint32 moduleIdx; uint32 functionIdx; uint32 functionPc; bytes32 recoveryPc; bytes32 modulesRoot; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct Machine {
        #[allow(missing_docs)]
        pub status: <MachineStatus as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub valueStack: <ValueStack as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub valueMultiStack: <MultiStack as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub internalStack: <ValueStack as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub frameStack: <StackFrameWindow as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub frameMultiStack: <MultiStack as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub globalStateHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub moduleIdx: u32,
        #[allow(missing_docs)]
        pub functionIdx: u32,
        #[allow(missing_docs)]
        pub functionPc: u32,
        #[allow(missing_docs)]
        pub recoveryPc: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub modulesRoot: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            MachineStatus,
            ValueStack,
            MultiStack,
            ValueStack,
            StackFrameWindow,
            MultiStack,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::Uint<32>,
            alloy::sol_types::sol_data::Uint<32>,
            alloy::sol_types::sol_data::Uint<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            <MachineStatus as alloy::sol_types::SolType>::RustType,
            <ValueStack as alloy::sol_types::SolType>::RustType,
            <MultiStack as alloy::sol_types::SolType>::RustType,
            <ValueStack as alloy::sol_types::SolType>::RustType,
            <StackFrameWindow as alloy::sol_types::SolType>::RustType,
            <MultiStack as alloy::sol_types::SolType>::RustType,
            alloy::sol_types::private::FixedBytes<32>,
            u32,
            u32,
            u32,
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Machine> for UnderlyingRustTuple<'_> {
            fn from(value: Machine) -> Self {
                (
                    value.status,
                    value.valueStack,
                    value.valueMultiStack,
                    value.internalStack,
                    value.frameStack,
                    value.frameMultiStack,
                    value.globalStateHash,
                    value.moduleIdx,
                    value.functionIdx,
                    value.functionPc,
                    value.recoveryPc,
                    value.modulesRoot,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Machine {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    status: tuple.0,
                    valueStack: tuple.1,
                    valueMultiStack: tuple.2,
                    internalStack: tuple.3,
                    frameStack: tuple.4,
                    frameMultiStack: tuple.5,
                    globalStateHash: tuple.6,
                    moduleIdx: tuple.7,
                    functionIdx: tuple.8,
                    functionPc: tuple.9,
                    recoveryPc: tuple.10,
                    modulesRoot: tuple.11,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Machine {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Machine {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <MachineStatus as alloy_sol_types::SolType>::tokenize(&self.status),
                    <ValueStack as alloy_sol_types::SolType>::tokenize(&self.valueStack),
                    <MultiStack as alloy_sol_types::SolType>::tokenize(
                        &self.valueMultiStack,
                    ),
                    <ValueStack as alloy_sol_types::SolType>::tokenize(
                        &self.internalStack,
                    ),
                    <StackFrameWindow as alloy_sol_types::SolType>::tokenize(
                        &self.frameStack,
                    ),
                    <MultiStack as alloy_sol_types::SolType>::tokenize(
                        &self.frameMultiStack,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.globalStateHash),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.moduleIdx),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.functionIdx),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.functionPc),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.recoveryPc),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.modulesRoot),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Machine {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Machine {
            const NAME: &'static str = "Machine";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "Machine(uint8 status,ValueStack valueStack,MultiStack valueMultiStack,ValueStack internalStack,StackFrameWindow frameStack,MultiStack frameMultiStack,bytes32 globalStateHash,uint32 moduleIdx,uint32 functionIdx,uint32 functionPc,bytes32 recoveryPc,bytes32 modulesRoot)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(5);
                components
                    .push(
                        <ValueStack as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <ValueStack as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
                    .push(
                        <MultiStack as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <MultiStack as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
                    .push(
                        <ValueStack as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <ValueStack as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
                    .push(
                        <StackFrameWindow as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <StackFrameWindow as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
                    .push(
                        <MultiStack as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <MultiStack as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <MachineStatus as alloy_sol_types::SolType>::eip712_data_word(
                            &self.status,
                        )
                        .0,
                    <ValueStack as alloy_sol_types::SolType>::eip712_data_word(
                            &self.valueStack,
                        )
                        .0,
                    <MultiStack as alloy_sol_types::SolType>::eip712_data_word(
                            &self.valueMultiStack,
                        )
                        .0,
                    <ValueStack as alloy_sol_types::SolType>::eip712_data_word(
                            &self.internalStack,
                        )
                        .0,
                    <StackFrameWindow as alloy_sol_types::SolType>::eip712_data_word(
                            &self.frameStack,
                        )
                        .0,
                    <MultiStack as alloy_sol_types::SolType>::eip712_data_word(
                            &self.frameMultiStack,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.globalStateHash,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.moduleIdx)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.functionIdx)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.functionPc)
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.recoveryPc)
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.modulesRoot)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Machine {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <MachineStatus as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.status,
                    )
                    + <ValueStack as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.valueStack,
                    )
                    + <MultiStack as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.valueMultiStack,
                    )
                    + <ValueStack as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.internalStack,
                    )
                    + <StackFrameWindow as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.frameStack,
                    )
                    + <MultiStack as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.frameMultiStack,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.globalStateHash,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.moduleIdx,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.functionIdx,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.functionPc,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.recoveryPc,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.modulesRoot,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <MachineStatus as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.status,
                    out,
                );
                <ValueStack as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.valueStack,
                    out,
                );
                <MultiStack as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.valueMultiStack,
                    out,
                );
                <ValueStack as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.internalStack,
                    out,
                );
                <StackFrameWindow as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.frameStack,
                    out,
                );
                <MultiStack as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.frameMultiStack,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.globalStateHash,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.moduleIdx,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.functionIdx,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.functionPc,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.recoveryPc,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.modulesRoot,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct Module { bytes32 globalsMerkleRoot; ModuleMemory moduleMemory; bytes32 tablesMerkleRoot; bytes32 functionsMerkleRoot; bytes32 extraHash; uint32 internalsOffset; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct Module {
        #[allow(missing_docs)]
        pub globalsMerkleRoot: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub moduleMemory: <ModuleMemory as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub tablesMerkleRoot: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub functionsMerkleRoot: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub extraHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub internalsOffset: u32,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::FixedBytes<32>,
            ModuleMemory,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::Uint<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::FixedBytes<32>,
            <ModuleMemory as alloy::sol_types::SolType>::RustType,
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::FixedBytes<32>,
            u32,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Module> for UnderlyingRustTuple<'_> {
            fn from(value: Module) -> Self {
                (
                    value.globalsMerkleRoot,
                    value.moduleMemory,
                    value.tablesMerkleRoot,
                    value.functionsMerkleRoot,
                    value.extraHash,
                    value.internalsOffset,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Module {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    globalsMerkleRoot: tuple.0,
                    moduleMemory: tuple.1,
                    tablesMerkleRoot: tuple.2,
                    functionsMerkleRoot: tuple.3,
                    extraHash: tuple.4,
                    internalsOffset: tuple.5,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Module {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Module {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.globalsMerkleRoot),
                    <ModuleMemory as alloy_sol_types::SolType>::tokenize(
                        &self.moduleMemory,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.tablesMerkleRoot),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.functionsMerkleRoot),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.extraHash),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.internalsOffset),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Module {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Module {
            const NAME: &'static str = "Module";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "Module(bytes32 globalsMerkleRoot,ModuleMemory moduleMemory,bytes32 tablesMerkleRoot,bytes32 functionsMerkleRoot,bytes32 extraHash,uint32 internalsOffset)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(1);
                components
                    .push(
                        <ModuleMemory as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <ModuleMemory as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.globalsMerkleRoot,
                        )
                        .0,
                    <ModuleMemory as alloy_sol_types::SolType>::eip712_data_word(
                            &self.moduleMemory,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.tablesMerkleRoot,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.functionsMerkleRoot,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.extraHash)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.internalsOffset,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Module {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.globalsMerkleRoot,
                    )
                    + <ModuleMemory as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.moduleMemory,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.tablesMerkleRoot,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.functionsMerkleRoot,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.extraHash,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.internalsOffset,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.globalsMerkleRoot,
                    out,
                );
                <ModuleMemory as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.moduleMemory,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.tablesMerkleRoot,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.functionsMerkleRoot,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.extraHash,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.internalsOffset,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct ModuleMemory { uint64 size; uint64 maxSize; bytes32 merkleRoot; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ModuleMemory {
        #[allow(missing_docs)]
        pub size: u64,
        #[allow(missing_docs)]
        pub maxSize: u64,
        #[allow(missing_docs)]
        pub merkleRoot: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<64>,
            alloy::sol_types::sol_data::Uint<64>,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            u64,
            u64,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ModuleMemory> for UnderlyingRustTuple<'_> {
            fn from(value: ModuleMemory) -> Self {
                (value.size, value.maxSize, value.merkleRoot)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ModuleMemory {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    size: tuple.0,
                    maxSize: tuple.1,
                    merkleRoot: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for ModuleMemory {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for ModuleMemory {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.size),
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.maxSize),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.merkleRoot),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ModuleMemory {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for ModuleMemory {
            const NAME: &'static str = "ModuleMemory";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "ModuleMemory(uint64 size,uint64 maxSize,bytes32 merkleRoot)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.size)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.maxSize)
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.merkleRoot)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ModuleMemory {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.size)
                    + <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.maxSize,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.merkleRoot,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    64,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.size,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    64,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.maxSize,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.merkleRoot,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct MultiStack { bytes32 inactiveStackHash; bytes32 remainingHash; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MultiStack {
        #[allow(missing_docs)]
        pub inactiveStackHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub remainingHash: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<MultiStack> for UnderlyingRustTuple<'_> {
            fn from(value: MultiStack) -> Self {
                (value.inactiveStackHash, value.remainingHash)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for MultiStack {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    inactiveStackHash: tuple.0,
                    remainingHash: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for MultiStack {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for MultiStack {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.inactiveStackHash),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.remainingHash),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for MultiStack {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for MultiStack {
            const NAME: &'static str = "MultiStack";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "MultiStack(bytes32 inactiveStackHash,bytes32 remainingHash)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.inactiveStackHash,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.remainingHash)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for MultiStack {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.inactiveStackHash,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.remainingHash,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.inactiveStackHash,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.remainingHash,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct StackFrame { Value returnPc; bytes32 localsMerkleRoot; uint32 callerModule; uint32 callerModuleInternals; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct StackFrame {
        #[allow(missing_docs)]
        pub returnPc: <Value as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub localsMerkleRoot: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub callerModule: u32,
        #[allow(missing_docs)]
        pub callerModuleInternals: u32,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            Value,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::Uint<32>,
            alloy::sol_types::sol_data::Uint<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            <Value as alloy::sol_types::SolType>::RustType,
            alloy::sol_types::private::FixedBytes<32>,
            u32,
            u32,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<StackFrame> for UnderlyingRustTuple<'_> {
            fn from(value: StackFrame) -> Self {
                (
                    value.returnPc,
                    value.localsMerkleRoot,
                    value.callerModule,
                    value.callerModuleInternals,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for StackFrame {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    returnPc: tuple.0,
                    localsMerkleRoot: tuple.1,
                    callerModule: tuple.2,
                    callerModuleInternals: tuple.3,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for StackFrame {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for StackFrame {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <Value as alloy_sol_types::SolType>::tokenize(&self.returnPc),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.localsMerkleRoot),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.callerModule),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.callerModuleInternals),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for StackFrame {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for StackFrame {
            const NAME: &'static str = "StackFrame";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "StackFrame(Value returnPc,bytes32 localsMerkleRoot,uint32 callerModule,uint32 callerModuleInternals)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(1);
                components
                    .push(<Value as alloy_sol_types::SolStruct>::eip712_root_type());
                components
                    .extend(<Value as alloy_sol_types::SolStruct>::eip712_components());
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <Value as alloy_sol_types::SolType>::eip712_data_word(&self.returnPc)
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.localsMerkleRoot,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.callerModule)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.callerModuleInternals,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for StackFrame {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <Value as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.returnPc,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.localsMerkleRoot,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.callerModule,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.callerModuleInternals,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <Value as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.returnPc,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.localsMerkleRoot,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.callerModule,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.callerModuleInternals,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct StackFrameWindow { StackFrame[] proved; bytes32 remainingHash; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct StackFrameWindow {
        #[allow(missing_docs)]
        pub proved: alloy::sol_types::private::Vec<
            <StackFrame as alloy::sol_types::SolType>::RustType,
        >,
        #[allow(missing_docs)]
        pub remainingHash: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Array<StackFrame>,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Vec<
                <StackFrame as alloy::sol_types::SolType>::RustType,
            >,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<StackFrameWindow> for UnderlyingRustTuple<'_> {
            fn from(value: StackFrameWindow) -> Self {
                (value.proved, value.remainingHash)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for StackFrameWindow {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    proved: tuple.0,
                    remainingHash: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for StackFrameWindow {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for StackFrameWindow {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        StackFrame,
                    > as alloy_sol_types::SolType>::tokenize(&self.proved),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.remainingHash),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for StackFrameWindow {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for StackFrameWindow {
            const NAME: &'static str = "StackFrameWindow";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "StackFrameWindow(StackFrame[] proved,bytes32 remainingHash)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(1);
                components
                    .push(
                        <StackFrame as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <StackFrame as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Array<
                        StackFrame,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.proved)
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.remainingHash)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for StackFrameWindow {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Array<
                        StackFrame,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.proved,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.remainingHash,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Array<
                    StackFrame,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.proved,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.remainingHash,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct Value { ValueType valueType; uint256 contents; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct Value {
        #[allow(missing_docs)]
        pub valueType: <ValueType as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub contents: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (ValueType, alloy::sol_types::sol_data::Uint<256>);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            <ValueType as alloy::sol_types::SolType>::RustType,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Value> for UnderlyingRustTuple<'_> {
            fn from(value: Value) -> Self {
                (value.valueType, value.contents)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Value {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    valueType: tuple.0,
                    contents: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Value {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Value {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <ValueType as alloy_sol_types::SolType>::tokenize(&self.valueType),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contents),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Value {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Value {
            const NAME: &'static str = "Value";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "Value(uint8 valueType,uint256 contents)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <ValueType as alloy_sol_types::SolType>::eip712_data_word(
                            &self.valueType,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.contents)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Value {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <ValueType as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.valueType,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.contents,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <ValueType as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.valueType,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.contents,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct ValueArray { Value[] inner; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ValueArray {
        #[allow(missing_docs)]
        pub inner: alloy::sol_types::private::Vec<
            <Value as alloy::sol_types::SolType>::RustType,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Array<Value>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Vec<
                <Value as alloy::sol_types::SolType>::RustType,
            >,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ValueArray> for UnderlyingRustTuple<'_> {
            fn from(value: ValueArray) -> Self {
                (value.inner,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ValueArray {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { inner: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for ValueArray {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for ValueArray {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        Value,
                    > as alloy_sol_types::SolType>::tokenize(&self.inner),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ValueArray {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for ValueArray {
            const NAME: &'static str = "ValueArray";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed("ValueArray(Value[] inner)")
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(1);
                components
                    .push(<Value as alloy_sol_types::SolStruct>::eip712_root_type());
                components
                    .extend(<Value as alloy_sol_types::SolStruct>::eip712_components());
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                <alloy::sol_types::sol_data::Array<
                    Value,
                > as alloy_sol_types::SolType>::eip712_data_word(&self.inner)
                    .0
                    .to_vec()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ValueArray {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Array<
                        Value,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.inner)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Array<
                    Value,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.inner,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct ValueStack { ValueArray proved; bytes32 remainingHash; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ValueStack {
        #[allow(missing_docs)]
        pub proved: <ValueArray as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub remainingHash: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            ValueArray,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            <ValueArray as alloy::sol_types::SolType>::RustType,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ValueStack> for UnderlyingRustTuple<'_> {
            fn from(value: ValueStack) -> Self {
                (value.proved, value.remainingHash)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ValueStack {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    proved: tuple.0,
                    remainingHash: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for ValueStack {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for ValueStack {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <ValueArray as alloy_sol_types::SolType>::tokenize(&self.proved),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.remainingHash),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ValueStack {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for ValueStack {
            const NAME: &'static str = "ValueStack";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "ValueStack(ValueArray proved,bytes32 remainingHash)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(1);
                components
                    .push(
                        <ValueArray as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <ValueArray as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <ValueArray as alloy_sol_types::SolType>::eip712_data_word(
                            &self.proved,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.remainingHash)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ValueStack {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <ValueArray as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.proved,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.remainingHash,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <ValueArray as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.proved,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.remainingHash,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**Function with signature `executeOneStep((uint256,address,bytes32),(uint8,(((uint8,uint256)[]),bytes32),(bytes32,bytes32),(((uint8,uint256)[]),bytes32),(((uint8,uint256),bytes32,uint32,uint32)[],bytes32),(bytes32,bytes32),bytes32,uint32,uint32,uint32,bytes32,bytes32),(bytes32,(uint64,uint64,bytes32),bytes32,bytes32,bytes32,uint32),(uint16,uint256),bytes)` and selector `0xa92cb501`.
```solidity
function executeOneStep(ExecutionContext memory execCtx, Machine memory startMach, Module memory startMod, Instruction memory inst, bytes memory proof) external view returns (Machine memory mach, Module memory r#mod);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeOneStepCall {
        #[allow(missing_docs)]
        pub execCtx: <ExecutionContext as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub startMach: <Machine as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub startMod: <Module as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub inst: <Instruction as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub proof: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`executeOneStep((uint256,address,bytes32),(uint8,(((uint8,uint256)[]),bytes32),(bytes32,bytes32),(((uint8,uint256)[]),bytes32),(((uint8,uint256),bytes32,uint32,uint32)[],bytes32),(bytes32,bytes32),bytes32,uint32,uint32,uint32,bytes32,bytes32),(bytes32,(uint64,uint64,bytes32),bytes32,bytes32,bytes32,uint32),(uint16,uint256),bytes)`](executeOneStepCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeOneStepReturn {
        #[allow(missing_docs)]
        pub mach: <Machine as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub r#mod: <Module as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                ExecutionContext,
                Machine,
                Module,
                Instruction,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <ExecutionContext as alloy::sol_types::SolType>::RustType,
                <Machine as alloy::sol_types::SolType>::RustType,
                <Module as alloy::sol_types::SolType>::RustType,
                <Instruction as alloy::sol_types::SolType>::RustType,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeOneStepCall> for UnderlyingRustTuple<'_> {
                fn from(value: executeOneStepCall) -> Self {
                    (
                        value.execCtx,
                        value.startMach,
                        value.startMod,
                        value.inst,
                        value.proof,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for executeOneStepCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        execCtx: tuple.0,
                        startMach: tuple.1,
                        startMod: tuple.2,
                        inst: tuple.3,
                        proof: tuple.4,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (Machine, Module);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <Machine as alloy::sol_types::SolType>::RustType,
                <Module as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeOneStepReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: executeOneStepReturn) -> Self {
                    (value.mach, value.r#mod)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for executeOneStepReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        mach: tuple.0,
                        r#mod: tuple.1,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for executeOneStepCall {
            type Parameters<'a> = (
                ExecutionContext,
                Machine,
                Module,
                Instruction,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = executeOneStepReturn;
            type ReturnTuple<'a> = (Machine, Module);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "executeOneStep((uint256,address,bytes32),(uint8,(((uint8,uint256)[]),bytes32),(bytes32,bytes32),(((uint8,uint256)[]),bytes32),(((uint8,uint256),bytes32,uint32,uint32)[],bytes32),(bytes32,bytes32),bytes32,uint32,uint32,uint32,bytes32,bytes32),(bytes32,(uint64,uint64,bytes32),bytes32,bytes32,bytes32,uint32),(uint16,uint256),bytes)";
            const SELECTOR: [u8; 4] = [169u8, 44u8, 181u8, 1u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <ExecutionContext as alloy_sol_types::SolType>::tokenize(
                        &self.execCtx,
                    ),
                    <Machine as alloy_sol_types::SolType>::tokenize(&self.startMach),
                    <Module as alloy_sol_types::SolType>::tokenize(&self.startMod),
                    <Instruction as alloy_sol_types::SolType>::tokenize(&self.inst),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.proof,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`OneStepProverHostIo`](self) function calls.
    pub enum OneStepProverHostIoCalls {
        #[allow(missing_docs)]
        executeOneStep(executeOneStepCall),
    }
    #[automatically_derived]
    impl OneStepProverHostIoCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[[169u8, 44u8, 181u8, 1u8]];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for OneStepProverHostIoCalls {
        const NAME: &'static str = "OneStepProverHostIoCalls";
        const MIN_DATA_LENGTH: usize = 1120usize;
        const COUNT: usize = 1usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::executeOneStep(_) => {
                    <executeOneStepCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<OneStepProverHostIoCalls>] = &[
                {
                    fn executeOneStep(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OneStepProverHostIoCalls> {
                        <executeOneStepCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OneStepProverHostIoCalls::executeOneStep)
                    }
                    executeOneStep
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::executeOneStep(inner) => {
                    <executeOneStepCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::executeOneStep(inner) => {
                    <executeOneStepCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`OneStepProverHostIo`](self) contract instance.

See the [wrapper's documentation](`OneStepProverHostIoInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> OneStepProverHostIoInstance<T, P, N> {
        OneStepProverHostIoInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<OneStepProverHostIoInstance<T, P, N>>,
    > {
        OneStepProverHostIoInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        OneStepProverHostIoInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`OneStepProverHostIo`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`OneStepProverHostIo`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct OneStepProverHostIoInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for OneStepProverHostIoInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("OneStepProverHostIoInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > OneStepProverHostIoInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`OneStepProverHostIo`](self) contract instance.

See the [wrapper's documentation](`OneStepProverHostIoInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<OneStepProverHostIoInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> OneStepProverHostIoInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> OneStepProverHostIoInstance<T, P, N> {
            OneStepProverHostIoInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > OneStepProverHostIoInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`executeOneStep`] function.
        pub fn executeOneStep(
            &self,
            execCtx: <ExecutionContext as alloy::sol_types::SolType>::RustType,
            startMach: <Machine as alloy::sol_types::SolType>::RustType,
            startMod: <Module as alloy::sol_types::SolType>::RustType,
            inst: <Instruction as alloy::sol_types::SolType>::RustType,
            proof: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, executeOneStepCall, N> {
            self.call_builder(
                &executeOneStepCall {
                    execCtx,
                    startMach,
                    startMod,
                    inst,
                    proof,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > OneStepProverHostIoInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
