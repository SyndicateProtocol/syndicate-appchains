/**

Generated by the following Solidity interface...
```solidity
interface OneStepProverHostIo {
    type MachineStatus is uint8;
    type ValueType is uint8;
    struct ExecutionContext {
        uint256 maxInboxMessagesRead;
        address bridge;
        bytes32 initialWasmModuleRoot;
    }
    struct Instruction {
        uint16 opcode;
        uint256 argumentData;
    }
    struct Machine {
        MachineStatus status;
        ValueStack valueStack;
        MultiStack valueMultiStack;
        ValueStack internalStack;
        StackFrameWindow frameStack;
        MultiStack frameMultiStack;
        bytes32 globalStateHash;
        uint32 moduleIdx;
        uint32 functionIdx;
        uint32 functionPc;
        bytes32 recoveryPc;
        bytes32 modulesRoot;
    }
    struct Module {
        bytes32 globalsMerkleRoot;
        ModuleMemory moduleMemory;
        bytes32 tablesMerkleRoot;
        bytes32 functionsMerkleRoot;
        bytes32 extraHash;
        uint32 internalsOffset;
    }
    struct ModuleMemory {
        uint64 size;
        uint64 maxSize;
        bytes32 merkleRoot;
    }
    struct MultiStack {
        bytes32 inactiveStackHash;
        bytes32 remainingHash;
    }
    struct StackFrame {
        Value returnPc;
        bytes32 localsMerkleRoot;
        uint32 callerModule;
        uint32 callerModuleInternals;
    }
    struct StackFrameWindow {
        StackFrame[] proved;
        bytes32 remainingHash;
    }
    struct Value {
        ValueType valueType;
        uint256 contents;
    }
    struct ValueArray {
        Value[] inner;
    }
    struct ValueStack {
        ValueArray proved;
        bytes32 remainingHash;
    }

    function executeOneStep(ExecutionContext memory execCtx, Machine memory startMach, Module memory startMod, Instruction memory inst, bytes memory proof) external view returns (Machine memory mach, Module memory mod);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "executeOneStep",
    "inputs": [
      {
        "name": "execCtx",
        "type": "tuple",
        "internalType": "struct ExecutionContext",
        "components": [
          {
            "name": "maxInboxMessagesRead",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "bridge",
            "type": "address",
            "internalType": "contract IBridge"
          },
          {
            "name": "initialWasmModuleRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          }
        ]
      },
      {
        "name": "startMach",
        "type": "tuple",
        "internalType": "struct Machine",
        "components": [
          {
            "name": "status",
            "type": "uint8",
            "internalType": "enum MachineStatus"
          },
          {
            "name": "valueStack",
            "type": "tuple",
            "internalType": "struct ValueStack",
            "components": [
              {
                "name": "proved",
                "type": "tuple",
                "internalType": "struct ValueArray",
                "components": [
                  {
                    "name": "inner",
                    "type": "tuple[]",
                    "internalType": "struct Value[]",
                    "components": [
                      {
                        "name": "valueType",
                        "type": "uint8",
                        "internalType": "enum ValueType"
                      },
                      {
                        "name": "contents",
                        "type": "uint256",
                        "internalType": "uint256"
                      }
                    ]
                  }
                ]
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "valueMultiStack",
            "type": "tuple",
            "internalType": "struct MultiStack",
            "components": [
              {
                "name": "inactiveStackHash",
                "type": "bytes32",
                "internalType": "bytes32"
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "internalStack",
            "type": "tuple",
            "internalType": "struct ValueStack",
            "components": [
              {
                "name": "proved",
                "type": "tuple",
                "internalType": "struct ValueArray",
                "components": [
                  {
                    "name": "inner",
                    "type": "tuple[]",
                    "internalType": "struct Value[]",
                    "components": [
                      {
                        "name": "valueType",
                        "type": "uint8",
                        "internalType": "enum ValueType"
                      },
                      {
                        "name": "contents",
                        "type": "uint256",
                        "internalType": "uint256"
                      }
                    ]
                  }
                ]
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "frameStack",
            "type": "tuple",
            "internalType": "struct StackFrameWindow",
            "components": [
              {
                "name": "proved",
                "type": "tuple[]",
                "internalType": "struct StackFrame[]",
                "components": [
                  {
                    "name": "returnPc",
                    "type": "tuple",
                    "internalType": "struct Value",
                    "components": [
                      {
                        "name": "valueType",
                        "type": "uint8",
                        "internalType": "enum ValueType"
                      },
                      {
                        "name": "contents",
                        "type": "uint256",
                        "internalType": "uint256"
                      }
                    ]
                  },
                  {
                    "name": "localsMerkleRoot",
                    "type": "bytes32",
                    "internalType": "bytes32"
                  },
                  {
                    "name": "callerModule",
                    "type": "uint32",
                    "internalType": "uint32"
                  },
                  {
                    "name": "callerModuleInternals",
                    "type": "uint32",
                    "internalType": "uint32"
                  }
                ]
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "frameMultiStack",
            "type": "tuple",
            "internalType": "struct MultiStack",
            "components": [
              {
                "name": "inactiveStackHash",
                "type": "bytes32",
                "internalType": "bytes32"
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "globalStateHash",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "moduleIdx",
            "type": "uint32",
            "internalType": "uint32"
          },
          {
            "name": "functionIdx",
            "type": "uint32",
            "internalType": "uint32"
          },
          {
            "name": "functionPc",
            "type": "uint32",
            "internalType": "uint32"
          },
          {
            "name": "recoveryPc",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "modulesRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          }
        ]
      },
      {
        "name": "startMod",
        "type": "tuple",
        "internalType": "struct Module",
        "components": [
          {
            "name": "globalsMerkleRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "moduleMemory",
            "type": "tuple",
            "internalType": "struct ModuleMemory",
            "components": [
              {
                "name": "size",
                "type": "uint64",
                "internalType": "uint64"
              },
              {
                "name": "maxSize",
                "type": "uint64",
                "internalType": "uint64"
              },
              {
                "name": "merkleRoot",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "tablesMerkleRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "functionsMerkleRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "extraHash",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "internalsOffset",
            "type": "uint32",
            "internalType": "uint32"
          }
        ]
      },
      {
        "name": "inst",
        "type": "tuple",
        "internalType": "struct Instruction",
        "components": [
          {
            "name": "opcode",
            "type": "uint16",
            "internalType": "uint16"
          },
          {
            "name": "argumentData",
            "type": "uint256",
            "internalType": "uint256"
          }
        ]
      },
      {
        "name": "proof",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "mach",
        "type": "tuple",
        "internalType": "struct Machine",
        "components": [
          {
            "name": "status",
            "type": "uint8",
            "internalType": "enum MachineStatus"
          },
          {
            "name": "valueStack",
            "type": "tuple",
            "internalType": "struct ValueStack",
            "components": [
              {
                "name": "proved",
                "type": "tuple",
                "internalType": "struct ValueArray",
                "components": [
                  {
                    "name": "inner",
                    "type": "tuple[]",
                    "internalType": "struct Value[]",
                    "components": [
                      {
                        "name": "valueType",
                        "type": "uint8",
                        "internalType": "enum ValueType"
                      },
                      {
                        "name": "contents",
                        "type": "uint256",
                        "internalType": "uint256"
                      }
                    ]
                  }
                ]
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "valueMultiStack",
            "type": "tuple",
            "internalType": "struct MultiStack",
            "components": [
              {
                "name": "inactiveStackHash",
                "type": "bytes32",
                "internalType": "bytes32"
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "internalStack",
            "type": "tuple",
            "internalType": "struct ValueStack",
            "components": [
              {
                "name": "proved",
                "type": "tuple",
                "internalType": "struct ValueArray",
                "components": [
                  {
                    "name": "inner",
                    "type": "tuple[]",
                    "internalType": "struct Value[]",
                    "components": [
                      {
                        "name": "valueType",
                        "type": "uint8",
                        "internalType": "enum ValueType"
                      },
                      {
                        "name": "contents",
                        "type": "uint256",
                        "internalType": "uint256"
                      }
                    ]
                  }
                ]
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "frameStack",
            "type": "tuple",
            "internalType": "struct StackFrameWindow",
            "components": [
              {
                "name": "proved",
                "type": "tuple[]",
                "internalType": "struct StackFrame[]",
                "components": [
                  {
                    "name": "returnPc",
                    "type": "tuple",
                    "internalType": "struct Value",
                    "components": [
                      {
                        "name": "valueType",
                        "type": "uint8",
                        "internalType": "enum ValueType"
                      },
                      {
                        "name": "contents",
                        "type": "uint256",
                        "internalType": "uint256"
                      }
                    ]
                  },
                  {
                    "name": "localsMerkleRoot",
                    "type": "bytes32",
                    "internalType": "bytes32"
                  },
                  {
                    "name": "callerModule",
                    "type": "uint32",
                    "internalType": "uint32"
                  },
                  {
                    "name": "callerModuleInternals",
                    "type": "uint32",
                    "internalType": "uint32"
                  }
                ]
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "frameMultiStack",
            "type": "tuple",
            "internalType": "struct MultiStack",
            "components": [
              {
                "name": "inactiveStackHash",
                "type": "bytes32",
                "internalType": "bytes32"
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "globalStateHash",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "moduleIdx",
            "type": "uint32",
            "internalType": "uint32"
          },
          {
            "name": "functionIdx",
            "type": "uint32",
            "internalType": "uint32"
          },
          {
            "name": "functionPc",
            "type": "uint32",
            "internalType": "uint32"
          },
          {
            "name": "recoveryPc",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "modulesRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          }
        ]
      },
      {
        "name": "mod",
        "type": "tuple",
        "internalType": "struct Module",
        "components": [
          {
            "name": "globalsMerkleRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "moduleMemory",
            "type": "tuple",
            "internalType": "struct ModuleMemory",
            "components": [
              {
                "name": "size",
                "type": "uint64",
                "internalType": "uint64"
              },
              {
                "name": "maxSize",
                "type": "uint64",
                "internalType": "uint64"
              },
              {
                "name": "merkleRoot",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "tablesMerkleRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "functionsMerkleRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "extraHash",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "internalsOffset",
            "type": "uint32",
            "internalType": "uint32"
          }
        ]
      }
    ],
    "stateMutability": "view"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod OneStepProverHostIo {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052348015600e575f5ffd5b50613fa68061001c5f395ff3fe608060405234801561000f575f5ffd5b5060043610610029575f3560e01c8063a92cb5011461002d575b5f5ffd5b61004061003b366004613304565b610057565b60405161004e9291906134fb565b60405180910390f35b61005f61310e565b6100676131c6565b61007087613a2d565b915061008136879003870187613b6d565b90505f6100916020870187613c1e565b905061323061801061ffff8316108015906100b2575061801361ffff831611155b156100c057506102cc6102ad565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7fe061ffff8316016100f457506104596102ad565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7fdf61ffff8316016101285750610c2a6102ad565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7fde61ffff83160161015c5750610f706102ad565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7fdd61ffff8316016101905750610f7c6102ad565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7fdc61ffff8316016101c457506110a46102ad565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7fd061ffff8316016101f857506111536102ad565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7fcf61ffff83160161022c57506111996102ad565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7fce61ffff83160161026057506111ed6102ad565b60405162461bcd60e51b815260206004820152601560248201527f494e56414c49445f4d454d4f52595f4f50434f4445000000000000000000000060448201526064015b60405180910390fd5b6102bf8a85858a8a8a8763ffffffff16565b5050965096945050505050565b5f6102da6020850185613c1e565b90506102e461323a565b5f6102f085858361125d565b60c08a0151919350915061030383611337565b146103505760405162461bcd60e51b815260206004820152601060248201527f4241445f474c4f42414c5f53544154450000000000000000000000000000000060448201526064016102a4565b61ffff83166180101480610369575061ffff8316618011145b1561038b57610386888884896103818987818d613c3f565b6113df565b61043d565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7fee61ffff8416016103c057610386888361155f565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7fed61ffff8416016103f55761038688836115db565b60405162461bcd60e51b815260206004820152601a60248201527f494e56414c49445f474c4f42414c53544154455f4f50434f444500000000000060448201526064016102a4565b61044682611337565b60c0909801979097525050505050505050565b5f61046f61046a8760200151611650565b611669565b63ffffffff1690505f61048861046a8860200151611650565b63ffffffff16905061049b602083613c7a565b1515806104c257506020808701515167ffffffffffffffff16906104c0908390613ca1565b115b806104d657506104d3602082613c7a565b15155b156104fd578660025b908160028111156104f2576104f26133d7565b815250505050610c22565b5f610509602083613cb4565b6040805160208101909152606081529091505f90819060208a015161053190858a8a87611725565b909450909250905060605f89898681811061054e5761054e613cc7565b919091013560f81c915085905061056481613cdb565b9550508a602001355f036106a0578060ff165f0361065857365f61058a8b88818f613c3f565b9150915085828260405161059f929190613cf3565b6040518091039020146105f45760405162461bcd60e51b815260206004820152600c60248201527f4241445f505245494d414745000000000000000000000000000000000000000060448201526064016102a4565b5f6106008b6020613ca1565b90508181111561060d5750805b610619818c8486613c3f565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250929750610bb195505050505050565b60405162461bcd60e51b815260206004820152601660248201527f554e4b4e4f574e5f505245494d4147455f50524f4f460000000000000000000060448201526064016102a4565b8a602001356001036107ad5760ff8116156106fd5760405162461bcd60e51b815260206004820152601660248201527f554e4b4e4f574e5f505245494d4147455f50524f4f460000000000000000000060448201526064016102a4565b365f61070b8b88818f613c3f565b915091508560028383604051610722929190613cf3565b602060405180830381855afa15801561073d573d5f5f3e3d5ffd5b5050506040513d601f19601f820116820180604052508101906107609190613d02565b146105f45760405162461bcd60e51b815260206004820152600c60248201527f4241445f505245494d414745000000000000000000000000000000000000000060448201526064016102a4565b8a60200135600203610b695760ff81161561080a5760405162461bcd60e51b815260206004820152601660248201527f554e4b4e4f574e5f505245494d4147455f50524f4f460000000000000000000060448201526064016102a4565b365f6108188b88818f613c3f565b90925090508561082b60205f8486613c3f565b61083491613d19565b146108815760405162461bcd60e51b815260206004820152601460248201527f4b5a475f50524f4f465f57524f4e475f4841534800000000000000000000000060448201526064016102a4565b5f5f5f5f600a73ffffffffffffffffffffffffffffffffffffffff1686866040516108ad929190613cf3565b5f60405180830381855afa9150503d805f81146108e5576040519150601f19603f3d011682016040523d82523d5f602084013e6108ea565b606091505b50915091508161093c5760405162461bcd60e51b815260206004820152601160248201527f494e56414c49445f4b5a475f50524f4f4600000000000000000000000000000060448201526064016102a4565b5f81511161098c5760405162461bcd60e51b815260206004820152601660248201527f4b5a475f505245434f4d50494c455f4d495353494e470000000000000000000060448201526064016102a4565b808060200190518101906109a09190613d36565b9094509250507f73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff0000000182149050610a175760405162461bcd60e51b815260206004820152601360248201527f554e4b4e4f574e5f424c535f4d4f44554c55530000000000000000000000000060448201526064016102a4565b610a22826020613d58565b8c1015610b60575f80610a3660208f613cb4565b905060015b84811015610a6557600192831b928281169003610a59576001831792505b600191821c911b610a3b565b505f610a7685640100000000613cb4565b9050610a828382613d58565b90505f610ab07f16a2a19edfe81f20d09b681922c813b4b63683508c2280b93829971f439f0d2b83876117cc565b905080610ac1604060208a8c613c3f565b610aca91613d19565b14610b175760405162461bcd60e51b815260206004820152601160248201527f4b5a475f50524f4f465f57524f4e475f5a00000000000000000000000000000060448201526064016102a4565b610b2560606040898b613c3f565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250929c50505050505050505b50505050610bb1565b60405162461bcd60e51b815260206004820152601560248201527f554e4b4e4f574e5f505245494d4147455f54595045000000000000000000000060448201526064016102a4565b5f5b8251811015610bea57610be08582858481518110610bd357610bd3613cc7565b016020015160f81c611916565b9450600101610bb3565b50610bf68387866119a1565b60208d0151604001528151610c1990610c0e90611a3a565b60208f015190611a60565b50505050505050505b505050505050565b5f610c3b61046a8760200151611650565b63ffffffff1690505f610c5461046a8860200151611650565b63ffffffff1690505f610c72610c6d8960200151611650565b611a70565b67ffffffffffffffff1690506020860135158015610c91575088358110155b15610cb9578760025b90816002811115610cad57610cad6133d7565b81525050505050610c22565b6020808801515167ffffffffffffffff1690610cd6908490613ca1565b1180610ceb5750610ce8602083613c7a565b15155b15610cf857876002610c9a565b5f610d04602084613cb4565b6040805160208101909152606081529091505f90819060208b0151610d2c90858b8b87611725565b9094509092509050888884818110610d4657610d46613cc7565b909101357fff0000000000000000000000000000000000000000000000000000000000000016159050610dbb5760405162461bcd60e51b815260206004820152601360248201527f554e4b4e4f574e5f494e424f585f50524f4f460000000000000000000000000060448201526064016102a4565b82610dc581613cdb565b935061323090505f60208c0135610de057611b319150610e1f565b60018c6020013503610df657611e839150610e1f565b8d60025b90816002811115610e0d57610e0d6133d7565b81525050505050505050505050610c22565b610e3f8f888d8d89908092610e3693929190613c3f565b8663ffffffff16565b905080610e4e578d6002610dfa565b505082881015610ea05760405162461bcd60e51b815260206004820152601160248201527f4241445f4d4553534147455f50524f4f4600000000000000000000000000000060448201526064016102a4565b5f610eab848a613d6f565b90505f5b60208163ffffffff16108015610ed3575081610ed163ffffffff83168b613ca1565b105b15610f2c57610f188463ffffffff83168d8d82610ef08f8c613ca1565b610efa9190613ca1565b818110610f0957610f09613cc7565b919091013560f81c9050611916565b935080610f2481613d82565b915050610eaf565b610f378387866119a1565b60208e015160400152610f5f610f4c82611a3a565b8f60200151611a6090919063ffffffff16565b505050505050505050505050505050565b50506001909252505050565b5f6040518060400160405280601381526020017f4d6f64756c65206d65726b6c6520747265653a0000000000000000000000000081525090505f86610160015190505f610fcf61046a8960200151611650565b63ffffffff169050610fee81886020015161216090919063ffffffff16565b610ffa57876002610c9a565b5f8061101861100a602085613cb4565b60208b01519089895f611725565b50915091505f5f61102b8c848b8b612195565b92505091505f6110468360016110419190613ca1565b6123a0565b90508015611070576110658761105d856001613ca1565b875f8c6123bf565b6101608e015261108e565b61108761107e846001613ca1565b8390878b612468565b6101608e01525b610c19610c0e61109f856001613ca1565b611a3a565b60408051808201909152601381527f4d6f64756c65206d65726b6c6520747265653a0000000000000000000000000060208201525f806110e688828787612195565b50915091505f6110f5836123a0565b90508015611134578151805161110d90600190613d6f565b8151811061111d5761111d613cc7565b602002602001015189610160018181525050611147565b61114082845f87612468565b6101608a01525b50505050505050505050565b6101408501515f191461117f578460025b90816002811115611177576111776133d7565b905250610c22565b61118c8560a00151612572565b610c228560400151612572565b6101408501515f19146111ae57846002611164565b60a0850151516001016111c357846002611164565b6111d2856040015183836125e4565b60a0850151610c22906111e88360408187613c3f565b6125e4565b60a08501515160010161120257846002611164565b82602001355f0361122f5761014085015160010161122257846002611164565b5f19610140860152611254565b6101408501515f191461124457846002611164565b61125285602085013561276b565b505b610c22856127da565b61126561323a565b8161126e61325f565b61127661325f565b5f5b600260ff821610156112c05761128f88888661285c565b848360ff16600281106112a4576112a4613cc7565b60200201919091529350806112b881613da6565b915050611278565b505f5b600260ff8216101561131a576112da888886612877565b838360ff16600281106112ef576112ef613cc7565b67ffffffffffffffff909316602093909302019190915293508061131281613da6565b9150506112c3565b506040805180820190915291825260208201529590945092505050565b80518051602091820151828401518051908401516040517f476c6f62616c2073746174653a0000000000000000000000000000000000000095810195909552602d850193909352604d8401919091527fffffffffffffffff00000000000000000000000000000000000000000000000060c091821b8116606d85015291901b1660758201525f90607d015b604051602081830303815290604052805190602001209050919050565b5f6113f061046a8860200151611650565b63ffffffff1690505f61140961046a8960200151611650565b9050600263ffffffff821610611421578760026104df565b60208701516114309083612160565b61143c578760026104df565b5f611448602084613cb4565b6040805160208101909152606081529091505f90819060208b015161147090858a8a87611725565b909450909250905061801061148860208b018b613c1e565b61ffff16036114cb576114bd848b5f01518763ffffffff16600281106114b0576114b0613cc7565b60200201518391906119a1565b60208c015160400152611551565b6180116114db60208b018b613c1e565b61ffff1603611509578951829063ffffffff8716600281106114ff576114ff613cc7565b6020020152611551565b60405162461bcd60e51b815260206004820152601760248201527f4241445f474c4f42414c5f53544154455f4f50434f444500000000000000000060448201526064016102a4565b505050505050505050505050565b5f61157061046a8460200151611650565b9050600263ffffffff82161061159f578260025b90816002811115611597576115976133d7565b905250505050565b6115d66115cb83602001518363ffffffff16600281106115c1576115c1613cc7565b60200201516128d3565b602085015190611a60565b505050565b5f6115ec610c6d8460200151611650565b90505f6115ff61046a8560200151611650565b9050600263ffffffff821610611619575050600290915250565b8183602001518263ffffffff166002811061163657611636613cc7565b67ffffffffffffffff909216602092909202015250505050565b61165861327d565b8151611663906128fe565b92915050565b60208101515f908183516006811115611684576116846133d7565b146116d15760405162461bcd60e51b815260206004820152600760248201527f4e4f545f4933320000000000000000000000000000000000000000000000000060448201526064016102a4565b64010000000081106116635760405162461bcd60e51b815260206004820152600760248201527f4241445f4933320000000000000000000000000000000000000000000000000060448201526064016102a4565b5f5f61173d6040518060200160405280606081525090565b83915061174b86868461285c565b909350915061175b8686846129e9565b925090505f61176b8289866119a1565b9050886040015181146117c05760405162461bcd60e51b815260206004820152600e60248201527f57524f4e475f4d454d5f524f4f5400000000000000000000000000000000000060448201526064016102a4565b50955095509592505050565b60408051602080820181905281830181905260608201526080810185905260a0810184905260c08082018490528251808303909101815260e0909101918290525f9182908190600590611820908590613dd2565b5f60405180830381855afa9150503d805f8114611858576040519150601f19603f3d011682016040523d82523d5f602084013e61185d565b606091505b5091509150816118af5760405162461bcd60e51b815260206004820152600d60248201527f4d4f444558505f4641494c45440000000000000000000000000000000000000060448201526064016102a4565b80516020146119005760405162461bcd60e51b815260206004820152601360248201527f4d4f444558505f57524f4e475f4c454e4754480000000000000000000000000060448201526064016102a4565b61190981613ddd565b93505050505b9392505050565b5f602083106119675760405162461bcd60e51b815260206004820152601560248201527f4241445f5345545f4c4541465f425954455f494458000000000000000000000060448201526064016102a4565b5f8361197560016020613d6f565b61197f9190613d6f565b61198a906008613d58565b60ff848116821b911b198616179150509392505050565b6040517f4d656d6f7279206c6561663a00000000000000000000000000000000000000006020820152602c81018290525f908190604c01604051602081830303815290604052805190602001209050611a318585836040518060400160405280601381526020017f4d656d6f7279206d65726b6c6520747265653a00000000000000000000000000815250612468565b95945050505050565b611a4261327d565b50604080518082019091525f815263ffffffff909116602082015290565b8151611a6c9082612ab6565b5050565b60208101515f90600183516006811115611a8c57611a8c6133d7565b14611ad95760405162461bcd60e51b815260206004820152600760248201527f4e4f545f4936340000000000000000000000000000000000000000000000000060448201526064016102a4565b6801000000000000000081106116635760405162461bcd60e51b815260206004820152600760248201527f4241445f4936340000000000000000000000000000000000000000000000000060448201526064016102a4565b5f6028821015611b835760405162461bcd60e51b815260206004820152601260248201527f4241445f534551494e424f585f50524f4f46000000000000000000000000000060448201526064016102a4565b5f611b9084846020612877565b50809150505f8484604051611ba6929190613cf3565b60405190819003902090505f8067ffffffffffffffff881615611c7b57611bd360408a0160208b01613e00565b73ffffffffffffffffffffffffffffffffffffffff166316bf5579611bf960018b613e33565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815267ffffffffffffffff9091166004820152602401602060405180830381865afa158015611c54573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611c789190613d02565b91505b67ffffffffffffffff841615611d4357611c9b60408a0160208b01613e00565b73ffffffffffffffffffffffffffffffffffffffff1663d5719dc2611cc1600187613e33565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815267ffffffffffffffff9091166004820152602401602060405180830381865afa158015611d1c573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611d409190613d02565b90505b6040805160208101849052908101849052606081018290525f90608001604051602081830303815290604052805190602001209050896020016020810190611d8b9190613e00565b6040517f16bf557900000000000000000000000000000000000000000000000000000000815267ffffffffffffffff8b16600482015273ffffffffffffffffffffffffffffffffffffffff91909116906316bf557990602401602060405180830381865afa158015611dff573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611e239190613d02565b8114611e715760405162461bcd60e51b815260206004820152601460248201527f4241445f534551494e424f585f4d45535341474500000000000000000000000060448201526064016102a4565b6001955050505050505b949350505050565b5f6071821015611ed55760405162461bcd60e51b815260206004820152601160248201527f4241445f44454c415945445f50524f4f4600000000000000000000000000000060448201526064016102a4565b5f67ffffffffffffffff851615611f9e57611ef66040870160208801613e00565b73ffffffffffffffffffffffffffffffffffffffff1663d5719dc2611f1c600188613e33565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815267ffffffffffffffff9091166004820152602401602060405180830381865afa158015611f77573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611f9b9190613d02565b90505b5f611fac8460718188613c3f565b604051611fba929190613cf3565b604051809103902090505f85855f818110611fd757611fd7613cc7565b9050013560f81c60f81b90505f611ff087876001612b90565b5090505f8282612004607160218b8d613c3f565b87604051602001612019959493929190613e53565b60408051601f1981840301815282825280516020918201208382018990528383018190528251808503840181526060909401909252825192019190912090915061206960408c0160208d01613e00565b6040517fd5719dc200000000000000000000000000000000000000000000000000000000815267ffffffffffffffff8c16600482015273ffffffffffffffffffffffffffffffffffffffff919091169063d5719dc290602401602060405180830381865afa1580156120dd573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906121019190613d02565b811461214f5760405162461bcd60e51b815260206004820152601360248201527f4241445f44454c415945445f4d4553534147450000000000000000000000000060448201526064016102a4565b5060019a9950505050505050505050565b81515f9067ffffffffffffffff16612179836020613ca1565b1115801561190f575061218d602083613c7a565b159392505050565b5f6121ac6040518060200160405280606081525090565b60408051602081019091526060815260408051808201909152601381527f4d6f64756c65206d65726b6c6520747265653a0000000000000000000000000060208201526101608801516121fd6131c6565b5f61220989898c612bd9565b9a50915061221889898c612c9a565b9a50905061222789898c6129e9565b9a5063ffffffff80831698509096505f906122489088908a908690612ce916565b90508381146122995760405162461bcd60e51b815260206004820152601360248201527f57524f4e475f524f4f545f464f525f4c4541460000000000000000000000000060448201526064016102a4565b5050505f6122ad8660016110419190613ca1565b90508015612319576122c0866001613ca1565b8551516001901b146123145760405162461bcd60e51b815260206004820152600a60248201527f57524f4e475f4c4541460000000000000000000000000000000000000000000060448201526064016102a4565b612393565b61232488888b6129e9565b995093505f612340612337886001613ca1565b86905f87612468565b90508281146123915760405162461bcd60e51b815260206004820152601360248201527f57524f4e475f524f4f545f464f525f5a45524f0000000000000000000000000060448201526064016102a4565b505b5050509450945094915050565b5f811580159061166357506123b6600183613d6f565b82161592915050565b5f83855b6001811115612430578382866040516020016123e193929190613ebc565b60405160208183030381529060405280519060200120915083858660405160200161240e93929190613ebc565b60408051601f198184030181529190528051602090910120945060011c6123c3565b83888360405160200161244593929190613ebc565b604051602081830303815290604052805190602001209250505095945050505050565b815f5b85515181101561252357846001165f036124cd578282875f0151838151811061249657612496613cc7565b60200260200101516040516020016124b093929190613ebc565b604051602081830303815290604052805190602001209150612517565b82865f015182815181106124e3576124e3613cc7565b6020026020010151836040516020016124fe93929190613ebc565b6040516020818303038152906040528051906020012091505b600194851c940161246b565b508315611e7b5760405162461bcd60e51b815260206004820152600f60248201527f50524f4f465f544f4f5f53484f5254000000000000000000000000000000000060448201526064016102a4565b80515f19146125df5780516020808301516040516125c29392017f636f7468726561643a000000000000000000000000000000000000000000000081526009810192909252602982015260490190565b60408051601f198184030181529190528051602091820120908201525b5f9052565b5f80806125f285858361285c565b9350915061260185858561285c565b93509050600182016126b257801561265b5760405162461bcd60e51b815260206004820152601460248201527f57524f4e475f434f5448524541445f454d50545900000000000000000000000060448201526064016102a4565b6020860151156126ad5760405162461bcd60e51b815260206004820152601460248201527f57524f4e475f434f5448524541445f454d50545900000000000000000000000060448201526064016102a4565b61275e565b856020015182826040516020016126fb9291907f636f7468726561643a000000000000000000000000000000000000000000000081526009810192909252602982015260490190565b604051602081830303815290604052805190602001201461275e5760405162461bcd60e51b815260206004820152601260248201527f57524f4e475f434f5448524541445f504f50000000000000000000000000000060448201526064016102a4565b6020860152909352505050565b6101408201515f905f191461278157505f611663565b5f60408460e0015163ffffffff16901b9050602084610100015163ffffffff16901b811790506001838561012001516127ba9190613ed9565b6127c49190613ef5565b63ffffffff161761014084015250600192915050565b60408101515160a0820151515f198114806127f557505f1982145b1561280257826002611584565b61280f8360800151612d33565b60a084015152602083015161282390612dcc565b604084015152608083015161283e9082602082015260609052565b50602091820151808301919091526040805192830190526060825252565b5f818161286a868684612b90565b9097909650945050505050565b5f81815b60088110156128ca5760088367ffffffffffffffff16901b92508585838181106128a7576128a7613cc7565b919091013560f81c939093179250816128bf81613cdb565b92505060010161287b565b50935093915050565b6128db61327d565b50604080518082019091526001815267ffffffffffffffff909116602082015290565b61290661327d565b8151805161291690600190613d6f565b8151811061292657612926613cc7565b602002602001015190505f6001835f0151516129429190613d6f565b67ffffffffffffffff81111561295a5761295a613677565b60405190808252806020026020018201604052801561299357816020015b61298061327d565b8152602001906001900390816129785790505b5090505f5b81518110156129e25783518051829081106129b5576129b5613cc7565b60200260200101518282815181106129cf576129cf613cc7565b6020908102919091010152600101612998565b5090915290565b604080516020810190915260608152815f612a05868684612e58565b925090505f60ff821667ffffffffffffffff811115612a2657612a26613677565b604051908082528060200260200182016040528015612a4f578160200160208202803683370190505b5090505f5b8260ff168160ff161015612a9a57612a6d88888661285c565b838360ff1681518110612a8257612a82613cc7565b60209081029190910101919091529350600101612a54565b5060405180602001604052808281525093505050935093915050565b8151515f90612ac6906001613ca1565b67ffffffffffffffff811115612ade57612ade613677565b604051908082528060200260200182016040528015612b1757816020015b612b0461327d565b815260200190600190039081612afc5790505b5090505f5b835151811015612b67578351805182908110612b3a57612b3a613cc7565b6020026020010151828281518110612b5457612b54613cc7565b6020908102919091010152600101612b1c565b508181845f01515181518110612b7f57612b7f613cc7565b602090810291909101015290915250565b5f81815b60208110156128ca57600883901b9250858583818110612bb657612bb6613cc7565b919091013560f81c93909317925081612bce81613cdb565b925050600101612b94565b612be16131c6565b604080516060810182525f808252602082018190529181018290528391905f5f5f5f612c0e8b8b8961285c565b97509550612c1d8b8b89612e8d565b97509450612c2c8b8b8961285c565b97509350612c3b8b8b8961285c565b97509250612c4a8b8b8961285c565b97509150612c598b8b89612c9a565b6040805160c081018252988952602089019790975295870194909452506060850191909152608084015263ffffffff1660a083015290969095509350505050565b5f81815b60048110156128ca5760088363ffffffff16901b9250858583818110612cc657612cc6613cc7565b919091013560f81c93909317925081612cde81613cdb565b925050600101612c9e565b5f611e7b8484612cf885612f07565b6040518060400160405280601381526020017f4d6f64756c65206d65726b6c6520747265653a00000000000000000000000000815250612468565b60208101515f5b825151811015612dc657612d69835f01518281518110612d5c57612d5c613cc7565b6020026020010151612faf565b6040517f537461636b206672616d6520737461636b3a0000000000000000000000000000602082015260328101919091526052810183905260720160408051601f1981840301815291905280516020909101209150600101612d3a565b50919050565b6020810151815151515f5b81811015612e51578351612df490612def9083613046565b613072565b6040517f56616c756520737461636b3a00000000000000000000000000000000000000006020820152602c810191909152604c8101849052606c0160408051601f1981840301815291905280516020909101209250600101612dd7565b5050919050565b5f81848482818110612e6c57612e6c613cc7565b919091013560f81c9250819050612e8281613cdb565b915050935093915050565b604080516060810182525f8082526020820181905291810191909152815f8080612eb8888886612877565b94509250612ec7888886612877565b94509150612ed688888661285c565b6040805160608101825267ffffffffffffffff96871681529490951660208501529383015250969095509350505050565b5f815f0151612f19836020015161308d565b6040808501516060860151608087015160a088015193516113c2969594906020017f4d6f64756c653a0000000000000000000000000000000000000000000000000081526007810196909652602786019490945260478501929092526067840152608783015260e01b7fffffffff000000000000000000000000000000000000000000000000000000001660a782015260ab0190565b5f612fbc825f0151613072565b602080840151604080860151606087015191517f537461636b206672616d653a000000000000000000000000000000000000000094810194909452602c840194909452604c8301919091527fffffffff0000000000000000000000000000000000000000000000000000000060e093841b8116606c840152921b90911660708201526074016113c2565b61304e61327d565b825180518390811061306257613062613cc7565b6020026020010151905092915050565b5f815f015182602001516040516020016113c2929190613f11565b805160208083015160408085015190517f4d656d6f72793a00000000000000000000000000000000000000000000000000938101939093527fffffffffffffffff00000000000000000000000000000000000000000000000060c094851b811660278501529190931b16602f82015260378101919091525f906057016113c2565b604080516101808101909152805f8152602001613129613296565b815260200161314960405180604001604052805f81526020015f81525090565b8152602001613156613296565b81526020016131776040518060400160405280606081526020015f81525090565b815260200161319760405180604001604052805f81526020015f81525090565b81525f6020820181905260408201819052606082018190526080820181905260a0820181905260c09091015290565b6040518060c001604052805f815260200161320c60405180606001604052805f67ffffffffffffffff1681526020015f67ffffffffffffffff1681526020015f81525090565b81526020015f81526020015f81526020015f81526020015f63ffffffff1681525090565b613238613f5c565b565b604051806040016040528061324d61325f565b815260200161325a61325f565b905290565b60405180604001604052806002906020820280368337509192915050565b60408051808201909152805f5b81526020015f81525090565b604080516060808201835291810191825290819061328a565b5f60408284031215612dc6575f5ffd5b5f5f83601f8401126132cf575f5ffd5b50813567ffffffffffffffff8111156132e6575f5ffd5b6020830191508360208285010111156132fd575f5ffd5b9250929050565b5f5f5f5f5f5f8688036101e081121561331b575f5ffd5b6060811215613328575f5ffd5b879650606088013567ffffffffffffffff811115613344575f5ffd5b88016101c0818b031215613356575f5ffd5b95506101007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8082011215613388575f5ffd5b5060808701935061339d8861018089016132af565b92506101c087013567ffffffffffffffff8111156133b9575f5ffd5b6133c589828a016132bf565b979a9699509497509295939492505050565b634e487b7160e01b5f52602160045260245ffd5b600381106133fb576133fb6133d7565b9052565b805160078110613411576134116133d7565b8252602090810151910152565b80516040808452905160209184018290528051606085018190525f9290910190829060808601905b80831015613470576134598285516133ff565b604082019150602084019350600183019250613446565b506020850151602087015280935050505092915050565b8051604080845281519084018190525f9160200190829060608601905b808310156134705783516134b98382516133ff565b6020810151604084015263ffffffff604082015116606084015263ffffffff60608201511660808401525060a0820191506020840193506001830192506134a4565b610120815261350f610120820184516133eb565b5f60208401516101c061014084015261352c6102e084018261341e565b6040860151805161016086015260200151610180850152606086015184820361011f19016101a0860152909150613563828261341e565b915050608085015161011f19848303016101c08501526135838282613487565b91505060a08501516135a36101e085018280518252602090810151910152565b5060c085015161022084015260e085015163ffffffff81166102408501525061010085015163ffffffff81166102608501525061012085015163ffffffff8116610280850152506101408501516102a08401526101608501516102c0840152905061190f602083018480518252602081015167ffffffffffffffff815116602084015267ffffffffffffffff6020820151166040840152604081015160608401525060408101516080830152606081015160a0830152608081015160c083015263ffffffff60a08201511660e08301525050565b634e487b7160e01b5f52604160045260245ffd5b6040805190810167ffffffffffffffff811182821017156136ae576136ae613677565b60405290565b6040516020810167ffffffffffffffff811182821017156136ae576136ae613677565b6040516080810167ffffffffffffffff811182821017156136ae576136ae613677565b604051610180810167ffffffffffffffff811182821017156136ae576136ae613677565b60405160c0810167ffffffffffffffff811182821017156136ae576136ae613677565b6040516060810167ffffffffffffffff811182821017156136ae576136ae613677565b604051601f8201601f1916810167ffffffffffffffff8111828210171561378d5761378d613677565b604052919050565b8035600381106137a3575f5ffd5b919050565b5f67ffffffffffffffff8211156137c1576137c1613677565b5060051b60200190565b5f604082840312156137db575f5ffd5b6137e361368b565b90508135600781106137f3575f5ffd5b808252506020820135602082015292915050565b5f60408284031215613817575f5ffd5b61381f61368b565b9050813567ffffffffffffffff811115613837575f5ffd5b820160208185031215613848575f5ffd5b6138506136b4565b813567ffffffffffffffff811115613866575f5ffd5b80830192505084601f83011261387a575f5ffd5b813561388d613888826137a8565b613764565b8082825260208201915060208360061b8601019250878311156138ae575f5ffd5b6020850194505b828510156138da576138c788866137cb565b82526020820191506040850194506138b5565b8352505082525060209182013591810191909152919050565b5f60408284031215613903575f5ffd5b61390b61368b565b823581526020928301359281019290925250919050565b803563ffffffff811681146137a3575f5ffd5b5f60408284031215613945575f5ffd5b61394d61368b565b9050813567ffffffffffffffff811115613965575f5ffd5b8201601f81018413613975575f5ffd5b8035613983613888826137a8565b80828252602082019150602060a084028501019250868311156139a4575f5ffd5b6020840193505b82841015613a165760a084880312156139c2575f5ffd5b6139ca6136d7565b6139d488866137cb565b8152604085013560208201526139ec60608601613922565b60408201526139fd60808601613922565b6060820152825260a093909301926020909101906139ab565b845250505060209182013591810191909152919050565b5f6101c08236031215613a3e575f5ffd5b613a466136fa565b613a4f83613795565b8152602083013567ffffffffffffffff811115613a6a575f5ffd5b613a7636828601613807565b602083015250613a8936604085016138f3565b6040820152608083013567ffffffffffffffff811115613aa7575f5ffd5b613ab336828601613807565b60608301525060a083013567ffffffffffffffff811115613ad2575f5ffd5b613ade36828601613935565b608083015250613af13660c085016138f3565b60a082015261010083013560c0820152613b0e6101208401613922565b60e0820152613b206101408401613922565b610100820152613b336101608401613922565b6101208201526101808301356101408201526101a0909201356101608301525090565b803567ffffffffffffffff811681146137a3575f5ffd5b5f81830361010081128015613b80575f5ffd5b50613b8961371e565b833581526060601f1983011215613b9e575f5ffd5b613ba6613741565b9150613bb460208501613b56565b8252613bc260408501613b56565b602083810191909152606085810135604080860191909152918301939093526080808601359183019190915260a08501359282019290925260c0840135918101829052613c1160e08501613922565b60a0820152949350505050565b5f60208284031215613c2e575f5ffd5b813561ffff8116811461190f575f5ffd5b5f5f85851115613c4d575f5ffd5b83861115613c59575f5ffd5b5050820193919092039150565b634e487b7160e01b5f52601260045260245ffd5b5f82613c8857613c88613c66565b500690565b634e487b7160e01b5f52601160045260245ffd5b8082018082111561166357611663613c8d565b5f82613cc257613cc2613c66565b500490565b634e487b7160e01b5f52603260045260245ffd5b5f60018201613cec57613cec613c8d565b5060010190565b818382375f9101908152919050565b5f60208284031215613d12575f5ffd5b5051919050565b80356020831015611663575f19602084900360031b1b1692915050565b5f5f60408385031215613d47575f5ffd5b505080516020909101519092909150565b808202811582820484141761166357611663613c8d565b8181038181111561166357611663613c8d565b5f63ffffffff821663ffffffff8103613d9d57613d9d613c8d565b60010192915050565b5f60ff821660ff8103613d9d57613d9d613c8d565b5f81518060208401855e5f93019283525090919050565b5f61190f8284613dbb565b80516020808301519190811015612dc6575f1960209190910360031b1b16919050565b5f60208284031215613e10575f5ffd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461190f575f5ffd5b67ffffffffffffffff828116828216039081111561166357611663613c8d565b7fff00000000000000000000000000000000000000000000000000000000000000861681527fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008560601b1660018201528284601583013760159201918201526035019392505050565b5f613ec78286613dbb565b93845250506020820152604001919050565b63ffffffff818116838216019081111561166357611663613c8d565b63ffffffff828116828216039081111561166357611663613c8d565b7f56616c75653a000000000000000000000000000000000000000000000000000081525f60078410613f4557613f456133d7565b5060f89290921b6006830152600782015260270190565b634e487b7160e01b5f52605160045260245ffdfea2646970667358221220ee0f93a2e43cb3d641ba9c60813c64ea4317fb449ccc306db70d01e3938232ac64736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15`\x0EW__\xFD[Pa?\xA6\x80a\0\x1C_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0)W_5`\xE0\x1C\x80c\xA9,\xB5\x01\x14a\0-W[__\xFD[a\0@a\0;6`\x04a3\x04V[a\0WV[`@Qa\0N\x92\x91\x90a4\xFBV[`@Q\x80\x91\x03\x90\xF3[a\0_a1\x0EV[a\0ga1\xC6V[a\0p\x87a:-V[\x91Pa\0\x816\x87\x90\x03\x87\x01\x87a;mV[\x90P_a\0\x91` \x87\x01\x87a<\x1EV[\x90Pa20a\x80\x10a\xFF\xFF\x83\x16\x10\x80\x15\x90a\0\xB2WPa\x80\x13a\xFF\xFF\x83\x16\x11\x15[\x15a\0\xC0WPa\x02\xCCa\x02\xADV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xE0a\xFF\xFF\x83\x16\x01a\0\xF4WPa\x04Ya\x02\xADV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xDFa\xFF\xFF\x83\x16\x01a\x01(WPa\x0C*a\x02\xADV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xDEa\xFF\xFF\x83\x16\x01a\x01\\WPa\x0Fpa\x02\xADV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xDDa\xFF\xFF\x83\x16\x01a\x01\x90WPa\x0F|a\x02\xADV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xDCa\xFF\xFF\x83\x16\x01a\x01\xC4WPa\x10\xA4a\x02\xADV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xD0a\xFF\xFF\x83\x16\x01a\x01\xF8WPa\x11Sa\x02\xADV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xCFa\xFF\xFF\x83\x16\x01a\x02,WPa\x11\x99a\x02\xADV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xCEa\xFF\xFF\x83\x16\x01a\x02`WPa\x11\xEDa\x02\xADV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x15`$\x82\x01R\x7FINVALID_MEMORY_OPCODE\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01[`@Q\x80\x91\x03\x90\xFD[a\x02\xBF\x8A\x85\x85\x8A\x8A\x8A\x87c\xFF\xFF\xFF\xFF\x16V[PP\x96P\x96\x94PPPPPV[_a\x02\xDA` \x85\x01\x85a<\x1EV[\x90Pa\x02\xE4a2:V[_a\x02\xF0\x85\x85\x83a\x12]V[`\xC0\x8A\x01Q\x91\x93P\x91Pa\x03\x03\x83a\x137V[\x14a\x03PW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x10`$\x82\x01R\x7FBAD_GLOBAL_STATE\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[a\xFF\xFF\x83\x16a\x80\x10\x14\x80a\x03iWPa\xFF\xFF\x83\x16a\x80\x11\x14[\x15a\x03\x8BWa\x03\x86\x88\x88\x84\x89a\x03\x81\x89\x87\x81\x8Da<?V[a\x13\xDFV[a\x04=V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xEEa\xFF\xFF\x84\x16\x01a\x03\xC0Wa\x03\x86\x88\x83a\x15_V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xEDa\xFF\xFF\x84\x16\x01a\x03\xF5Wa\x03\x86\x88\x83a\x15\xDBV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1A`$\x82\x01R\x7FINVALID_GLOBALSTATE_OPCODE\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[a\x04F\x82a\x137V[`\xC0\x90\x98\x01\x97\x90\x97RPPPPPPPPV[_a\x04oa\x04j\x87` \x01Qa\x16PV[a\x16iV[c\xFF\xFF\xFF\xFF\x16\x90P_a\x04\x88a\x04j\x88` \x01Qa\x16PV[c\xFF\xFF\xFF\xFF\x16\x90Pa\x04\x9B` \x83a<zV[\x15\x15\x80a\x04\xC2WP` \x80\x87\x01QQg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90a\x04\xC0\x90\x83\x90a<\xA1V[\x11[\x80a\x04\xD6WPa\x04\xD3` \x82a<zV[\x15\x15[\x15a\x04\xFDW\x86`\x02[\x90\x81`\x02\x81\x11\x15a\x04\xF2Wa\x04\xF2a3\xD7V[\x81RPPPPa\x0C\"V[_a\x05\t` \x83a<\xB4V[`@\x80Q` \x81\x01\x90\x91R``\x81R\x90\x91P_\x90\x81\x90` \x8A\x01Qa\x051\x90\x85\x8A\x8A\x87a\x17%V[\x90\x94P\x90\x92P\x90P``_\x89\x89\x86\x81\x81\x10a\x05NWa\x05Na<\xC7V[\x91\x90\x91\x015`\xF8\x1C\x91P\x85\x90Pa\x05d\x81a<\xDBV[\x95PP\x8A` \x015_\x03a\x06\xA0W\x80`\xFF\x16_\x03a\x06XW6_a\x05\x8A\x8B\x88\x81\x8Fa<?V[\x91P\x91P\x85\x82\x82`@Qa\x05\x9F\x92\x91\x90a<\xF3V[`@Q\x80\x91\x03\x90 \x14a\x05\xF4W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0C`$\x82\x01R\x7FBAD_PREIMAGE\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[_a\x06\0\x8B` a<\xA1V[\x90P\x81\x81\x11\x15a\x06\rWP\x80[a\x06\x19\x81\x8C\x84\x86a<?V[\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RP\x92\x97Pa\x0B\xB1\x95PPPPPPV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x16`$\x82\x01R\x7FUNKNOWN_PREIMAGE_PROOF\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[\x8A` \x015`\x01\x03a\x07\xADW`\xFF\x81\x16\x15a\x06\xFDW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x16`$\x82\x01R\x7FUNKNOWN_PREIMAGE_PROOF\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[6_a\x07\x0B\x8B\x88\x81\x8Fa<?V[\x91P\x91P\x85`\x02\x83\x83`@Qa\x07\"\x92\x91\x90a<\xF3V[` `@Q\x80\x83\x03\x81\x85Z\xFA\x15\x80\x15a\x07=W=__>=_\xFD[PPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x07`\x91\x90a=\x02V[\x14a\x05\xF4W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0C`$\x82\x01R\x7FBAD_PREIMAGE\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[\x8A` \x015`\x02\x03a\x0BiW`\xFF\x81\x16\x15a\x08\nW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x16`$\x82\x01R\x7FUNKNOWN_PREIMAGE_PROOF\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[6_a\x08\x18\x8B\x88\x81\x8Fa<?V[\x90\x92P\x90P\x85a\x08+` _\x84\x86a<?V[a\x084\x91a=\x19V[\x14a\x08\x81W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x14`$\x82\x01R\x7FKZG_PROOF_WRONG_HASH\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[____`\ns\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x86\x86`@Qa\x08\xAD\x92\x91\x90a<\xF3V[_`@Q\x80\x83\x03\x81\x85Z\xFA\x91PP=\x80_\x81\x14a\x08\xE5W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x08\xEAV[``\x91P[P\x91P\x91P\x81a\t<W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x11`$\x82\x01R\x7FINVALID_KZG_PROOF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[_\x81Q\x11a\t\x8CW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x16`$\x82\x01R\x7FKZG_PRECOMPILE_MISSING\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[\x80\x80` \x01\x90Q\x81\x01\x90a\t\xA0\x91\x90a=6V[\x90\x94P\x92PP\x7Fs\xED\xA7S)\x9D}H39\xD8\x08\t\xA1\xD8\x05S\xBD\xA4\x02\xFF\xFE[\xFE\xFF\xFF\xFF\xFF\0\0\0\x01\x82\x14\x90Pa\n\x17W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x13`$\x82\x01R\x7FUNKNOWN_BLS_MODULUS\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[a\n\"\x82` a=XV[\x8C\x10\x15a\x0B`W_\x80a\n6` \x8Fa<\xB4V[\x90P`\x01[\x84\x81\x10\x15a\neW`\x01\x92\x83\x1B\x92\x82\x81\x16\x90\x03a\nYW`\x01\x83\x17\x92P[`\x01\x91\x82\x1C\x91\x1Ba\n;V[P_a\nv\x85d\x01\0\0\0\0a<\xB4V[\x90Pa\n\x82\x83\x82a=XV[\x90P_a\n\xB0\x7F\x16\xA2\xA1\x9E\xDF\xE8\x1F \xD0\x9Bh\x19\"\xC8\x13\xB4\xB66\x83P\x8C\"\x80\xB98)\x97\x1FC\x9F\r+\x83\x87a\x17\xCCV[\x90P\x80a\n\xC1`@` \x8A\x8Ca<?V[a\n\xCA\x91a=\x19V[\x14a\x0B\x17W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x11`$\x82\x01R\x7FKZG_PROOF_WRONG_Z\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[a\x0B%```@\x89\x8Ba<?V[\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RP\x92\x9CPPPPPPPP[PPPPa\x0B\xB1V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x15`$\x82\x01R\x7FUNKNOWN_PREIMAGE_TYPE\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[_[\x82Q\x81\x10\x15a\x0B\xEAWa\x0B\xE0\x85\x82\x85\x84\x81Q\x81\x10a\x0B\xD3Wa\x0B\xD3a<\xC7V[\x01` \x01Q`\xF8\x1Ca\x19\x16V[\x94P`\x01\x01a\x0B\xB3V[Pa\x0B\xF6\x83\x87\x86a\x19\xA1V[` \x8D\x01Q`@\x01R\x81Qa\x0C\x19\x90a\x0C\x0E\x90a\x1A:V[` \x8F\x01Q\x90a\x1A`V[PPPPPPPP[PPPPPPV[_a\x0C;a\x04j\x87` \x01Qa\x16PV[c\xFF\xFF\xFF\xFF\x16\x90P_a\x0CTa\x04j\x88` \x01Qa\x16PV[c\xFF\xFF\xFF\xFF\x16\x90P_a\x0Cra\x0Cm\x89` \x01Qa\x16PV[a\x1ApV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P` \x86\x015\x15\x80\x15a\x0C\x91WP\x885\x81\x10\x15[\x15a\x0C\xB9W\x87`\x02[\x90\x81`\x02\x81\x11\x15a\x0C\xADWa\x0C\xADa3\xD7V[\x81RPPPPPa\x0C\"V[` \x80\x88\x01QQg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90a\x0C\xD6\x90\x84\x90a<\xA1V[\x11\x80a\x0C\xEBWPa\x0C\xE8` \x83a<zV[\x15\x15[\x15a\x0C\xF8W\x87`\x02a\x0C\x9AV[_a\r\x04` \x84a<\xB4V[`@\x80Q` \x81\x01\x90\x91R``\x81R\x90\x91P_\x90\x81\x90` \x8B\x01Qa\r,\x90\x85\x8B\x8B\x87a\x17%V[\x90\x94P\x90\x92P\x90P\x88\x88\x84\x81\x81\x10a\rFWa\rFa<\xC7V[\x90\x91\x015\x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x15\x90Pa\r\xBBW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x13`$\x82\x01R\x7FUNKNOWN_INBOX_PROOF\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[\x82a\r\xC5\x81a<\xDBV[\x93Pa20\x90P_` \x8C\x015a\r\xE0Wa\x1B1\x91Pa\x0E\x1FV[`\x01\x8C` \x015\x03a\r\xF6Wa\x1E\x83\x91Pa\x0E\x1FV[\x8D`\x02[\x90\x81`\x02\x81\x11\x15a\x0E\rWa\x0E\ra3\xD7V[\x81RPPPPPPPPPPPa\x0C\"V[a\x0E?\x8F\x88\x8D\x8D\x89\x90\x80\x92a\x0E6\x93\x92\x91\x90a<?V[\x86c\xFF\xFF\xFF\xFF\x16V[\x90P\x80a\x0ENW\x8D`\x02a\r\xFAV[PP\x82\x88\x10\x15a\x0E\xA0W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x11`$\x82\x01R\x7FBAD_MESSAGE_PROOF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[_a\x0E\xAB\x84\x8Aa=oV[\x90P_[` \x81c\xFF\xFF\xFF\xFF\x16\x10\x80\x15a\x0E\xD3WP\x81a\x0E\xD1c\xFF\xFF\xFF\xFF\x83\x16\x8Ba<\xA1V[\x10[\x15a\x0F,Wa\x0F\x18\x84c\xFF\xFF\xFF\xFF\x83\x16\x8D\x8D\x82a\x0E\xF0\x8F\x8Ca<\xA1V[a\x0E\xFA\x91\x90a<\xA1V[\x81\x81\x10a\x0F\tWa\x0F\ta<\xC7V[\x91\x90\x91\x015`\xF8\x1C\x90Pa\x19\x16V[\x93P\x80a\x0F$\x81a=\x82V[\x91PPa\x0E\xAFV[a\x0F7\x83\x87\x86a\x19\xA1V[` \x8E\x01Q`@\x01Ra\x0F_a\x0FL\x82a\x1A:V[\x8F` \x01Qa\x1A`\x90\x91\x90c\xFF\xFF\xFF\xFF\x16V[PPPPPPPPPPPPPPPV[PP`\x01\x90\x92RPPPV[_`@Q\x80`@\x01`@R\x80`\x13\x81R` \x01\x7FModule merkle tree:\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x90P_\x86a\x01`\x01Q\x90P_a\x0F\xCFa\x04j\x89` \x01Qa\x16PV[c\xFF\xFF\xFF\xFF\x16\x90Pa\x0F\xEE\x81\x88` \x01Qa!`\x90\x91\x90c\xFF\xFF\xFF\xFF\x16V[a\x0F\xFAW\x87`\x02a\x0C\x9AV[_\x80a\x10\x18a\x10\n` \x85a<\xB4V[` \x8B\x01Q\x90\x89\x89_a\x17%V[P\x91P\x91P__a\x10+\x8C\x84\x8B\x8Ba!\x95V[\x92PP\x91P_a\x10F\x83`\x01a\x10A\x91\x90a<\xA1V[a#\xA0V[\x90P\x80\x15a\x10pWa\x10e\x87a\x10]\x85`\x01a<\xA1V[\x87_\x8Ca#\xBFV[a\x01`\x8E\x01Ra\x10\x8EV[a\x10\x87a\x10~\x84`\x01a<\xA1V[\x83\x90\x87\x8Ba$hV[a\x01`\x8E\x01R[a\x0C\x19a\x0C\x0Ea\x10\x9F\x85`\x01a<\xA1V[a\x1A:V[`@\x80Q\x80\x82\x01\x90\x91R`\x13\x81R\x7FModule merkle tree:\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R_\x80a\x10\xE6\x88\x82\x87\x87a!\x95V[P\x91P\x91P_a\x10\xF5\x83a#\xA0V[\x90P\x80\x15a\x114W\x81Q\x80Qa\x11\r\x90`\x01\x90a=oV[\x81Q\x81\x10a\x11\x1DWa\x11\x1Da<\xC7V[` \x02` \x01\x01Q\x89a\x01`\x01\x81\x81RPPa\x11GV[a\x11@\x82\x84_\x87a$hV[a\x01`\x8A\x01R[PPPPPPPPPPV[a\x01@\x85\x01Q_\x19\x14a\x11\x7FW\x84`\x02[\x90\x81`\x02\x81\x11\x15a\x11wWa\x11wa3\xD7V[\x90RPa\x0C\"V[a\x11\x8C\x85`\xA0\x01Qa%rV[a\x0C\"\x85`@\x01Qa%rV[a\x01@\x85\x01Q_\x19\x14a\x11\xAEW\x84`\x02a\x11dV[`\xA0\x85\x01QQ`\x01\x01a\x11\xC3W\x84`\x02a\x11dV[a\x11\xD2\x85`@\x01Q\x83\x83a%\xE4V[`\xA0\x85\x01Qa\x0C\"\x90a\x11\xE8\x83`@\x81\x87a<?V[a%\xE4V[`\xA0\x85\x01QQ`\x01\x01a\x12\x02W\x84`\x02a\x11dV[\x82` \x015_\x03a\x12/Wa\x01@\x85\x01Q`\x01\x01a\x12\"W\x84`\x02a\x11dV[_\x19a\x01@\x86\x01Ra\x12TV[a\x01@\x85\x01Q_\x19\x14a\x12DW\x84`\x02a\x11dV[a\x12R\x85` \x85\x015a'kV[P[a\x0C\"\x85a'\xDAV[a\x12ea2:V[\x81a\x12na2_V[a\x12va2_V[_[`\x02`\xFF\x82\x16\x10\x15a\x12\xC0Wa\x12\x8F\x88\x88\x86a(\\V[\x84\x83`\xFF\x16`\x02\x81\x10a\x12\xA4Wa\x12\xA4a<\xC7V[` \x02\x01\x91\x90\x91R\x93P\x80a\x12\xB8\x81a=\xA6V[\x91PPa\x12xV[P_[`\x02`\xFF\x82\x16\x10\x15a\x13\x1AWa\x12\xDA\x88\x88\x86a(wV[\x83\x83`\xFF\x16`\x02\x81\x10a\x12\xEFWa\x12\xEFa<\xC7V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x93\x16` \x93\x90\x93\x02\x01\x91\x90\x91R\x93P\x80a\x13\x12\x81a=\xA6V[\x91PPa\x12\xC3V[P`@\x80Q\x80\x82\x01\x90\x91R\x91\x82R` \x82\x01R\x95\x90\x94P\x92PPPV[\x80Q\x80Q` \x91\x82\x01Q\x82\x84\x01Q\x80Q\x90\x84\x01Q`@Q\x7FGlobal state:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x95\x81\x01\x95\x90\x95R`-\x85\x01\x93\x90\x93R`M\x84\x01\x91\x90\x91R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xC0\x91\x82\x1B\x81\x16`m\x85\x01R\x91\x90\x1B\x16`u\x82\x01R_\x90`}\x01[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P\x91\x90PV[_a\x13\xF0a\x04j\x88` \x01Qa\x16PV[c\xFF\xFF\xFF\xFF\x16\x90P_a\x14\ta\x04j\x89` \x01Qa\x16PV[\x90P`\x02c\xFF\xFF\xFF\xFF\x82\x16\x10a\x14!W\x87`\x02a\x04\xDFV[` \x87\x01Qa\x140\x90\x83a!`V[a\x14<W\x87`\x02a\x04\xDFV[_a\x14H` \x84a<\xB4V[`@\x80Q` \x81\x01\x90\x91R``\x81R\x90\x91P_\x90\x81\x90` \x8B\x01Qa\x14p\x90\x85\x8A\x8A\x87a\x17%V[\x90\x94P\x90\x92P\x90Pa\x80\x10a\x14\x88` \x8B\x01\x8Ba<\x1EV[a\xFF\xFF\x16\x03a\x14\xCBWa\x14\xBD\x84\x8B_\x01Q\x87c\xFF\xFF\xFF\xFF\x16`\x02\x81\x10a\x14\xB0Wa\x14\xB0a<\xC7V[` \x02\x01Q\x83\x91\x90a\x19\xA1V[` \x8C\x01Q`@\x01Ra\x15QV[a\x80\x11a\x14\xDB` \x8B\x01\x8Ba<\x1EV[a\xFF\xFF\x16\x03a\x15\tW\x89Q\x82\x90c\xFF\xFF\xFF\xFF\x87\x16`\x02\x81\x10a\x14\xFFWa\x14\xFFa<\xC7V[` \x02\x01Ra\x15QV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x17`$\x82\x01R\x7FBAD_GLOBAL_STATE_OPCODE\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[PPPPPPPPPPPPV[_a\x15pa\x04j\x84` \x01Qa\x16PV[\x90P`\x02c\xFF\xFF\xFF\xFF\x82\x16\x10a\x15\x9FW\x82`\x02[\x90\x81`\x02\x81\x11\x15a\x15\x97Wa\x15\x97a3\xD7V[\x90RPPPPV[a\x15\xD6a\x15\xCB\x83` \x01Q\x83c\xFF\xFF\xFF\xFF\x16`\x02\x81\x10a\x15\xC1Wa\x15\xC1a<\xC7V[` \x02\x01Qa(\xD3V[` \x85\x01Q\x90a\x1A`V[PPPV[_a\x15\xECa\x0Cm\x84` \x01Qa\x16PV[\x90P_a\x15\xFFa\x04j\x85` \x01Qa\x16PV[\x90P`\x02c\xFF\xFF\xFF\xFF\x82\x16\x10a\x16\x19WPP`\x02\x90\x91RPV[\x81\x83` \x01Q\x82c\xFF\xFF\xFF\xFF\x16`\x02\x81\x10a\x166Wa\x166a<\xC7V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x92\x16` \x92\x90\x92\x02\x01RPPPPV[a\x16Xa2}V[\x81Qa\x16c\x90a(\xFEV[\x92\x91PPV[` \x81\x01Q_\x90\x81\x83Q`\x06\x81\x11\x15a\x16\x84Wa\x16\x84a3\xD7V[\x14a\x16\xD1W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FNOT_I32\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[d\x01\0\0\0\0\x81\x10a\x16cW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FBAD_I32\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[__a\x17=`@Q\x80` \x01`@R\x80``\x81RP\x90V[\x83\x91Pa\x17K\x86\x86\x84a(\\V[\x90\x93P\x91Pa\x17[\x86\x86\x84a)\xE9V[\x92P\x90P_a\x17k\x82\x89\x86a\x19\xA1V[\x90P\x88`@\x01Q\x81\x14a\x17\xC0W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0E`$\x82\x01R\x7FWRONG_MEM_ROOT\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[P\x95P\x95P\x95\x92PPPV[`@\x80Q` \x80\x82\x01\x81\x90R\x81\x83\x01\x81\x90R``\x82\x01R`\x80\x81\x01\x85\x90R`\xA0\x81\x01\x84\x90R`\xC0\x80\x82\x01\x84\x90R\x82Q\x80\x83\x03\x90\x91\x01\x81R`\xE0\x90\x91\x01\x91\x82\x90R_\x91\x82\x90\x81\x90`\x05\x90a\x18 \x90\x85\x90a=\xD2V[_`@Q\x80\x83\x03\x81\x85Z\xFA\x91PP=\x80_\x81\x14a\x18XW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x18]V[``\x91P[P\x91P\x91P\x81a\x18\xAFW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\r`$\x82\x01R\x7FMODEXP_FAILED\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[\x80Q` \x14a\x19\0W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x13`$\x82\x01R\x7FMODEXP_WRONG_LENGTH\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[a\x19\t\x81a=\xDDV[\x93PPPP[\x93\x92PPPV[_` \x83\x10a\x19gW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x15`$\x82\x01R\x7FBAD_SET_LEAF_BYTE_IDX\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[_\x83a\x19u`\x01` a=oV[a\x19\x7F\x91\x90a=oV[a\x19\x8A\x90`\x08a=XV[`\xFF\x84\x81\x16\x82\x1B\x91\x1B\x19\x86\x16\x17\x91PP\x93\x92PPPV[`@Q\x7FMemory leaf:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`,\x81\x01\x82\x90R_\x90\x81\x90`L\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90Pa\x1A1\x85\x85\x83`@Q\x80`@\x01`@R\x80`\x13\x81R` \x01\x7FMemory merkle tree:\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RPa$hV[\x95\x94PPPPPV[a\x1ABa2}V[P`@\x80Q\x80\x82\x01\x90\x91R_\x81Rc\xFF\xFF\xFF\xFF\x90\x91\x16` \x82\x01R\x90V[\x81Qa\x1Al\x90\x82a*\xB6V[PPV[` \x81\x01Q_\x90`\x01\x83Q`\x06\x81\x11\x15a\x1A\x8CWa\x1A\x8Ca3\xD7V[\x14a\x1A\xD9W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FNOT_I64\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[h\x01\0\0\0\0\0\0\0\0\x81\x10a\x16cW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FBAD_I64\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[_`(\x82\x10\x15a\x1B\x83W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x12`$\x82\x01R\x7FBAD_SEQINBOX_PROOF\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[_a\x1B\x90\x84\x84` a(wV[P\x80\x91PP_\x84\x84`@Qa\x1B\xA6\x92\x91\x90a<\xF3V[`@Q\x90\x81\x90\x03\x90 \x90P_\x80g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x88\x16\x15a\x1C{Wa\x1B\xD3`@\x8A\x01` \x8B\x01a>\0V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x16\xBFUya\x1B\xF9`\x01\x8Ba>3V[`@Q\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xE0\x84\x90\x1B\x16\x81Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16`\x04\x82\x01R`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x1CTW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x1Cx\x91\x90a=\x02V[\x91P[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x16\x15a\x1DCWa\x1C\x9B`@\x8A\x01` \x8B\x01a>\0V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xD5q\x9D\xC2a\x1C\xC1`\x01\x87a>3V[`@Q\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xE0\x84\x90\x1B\x16\x81Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16`\x04\x82\x01R`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x1D\x1CW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x1D@\x91\x90a=\x02V[\x90P[`@\x80Q` \x81\x01\x84\x90R\x90\x81\x01\x84\x90R``\x81\x01\x82\x90R_\x90`\x80\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P\x89` \x01` \x81\x01\x90a\x1D\x8B\x91\x90a>\0V[`@Q\x7F\x16\xBFUy\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x8B\x16`\x04\x82\x01Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91\x90\x91\x16\x90c\x16\xBFUy\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x1D\xFFW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x1E#\x91\x90a=\x02V[\x81\x14a\x1EqW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x14`$\x82\x01R\x7FBAD_SEQINBOX_MESSAGE\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[`\x01\x95PPPPPP[\x94\x93PPPPV[_`q\x82\x10\x15a\x1E\xD5W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x11`$\x82\x01R\x7FBAD_DELAYED_PROOF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x85\x16\x15a\x1F\x9EWa\x1E\xF6`@\x87\x01` \x88\x01a>\0V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xD5q\x9D\xC2a\x1F\x1C`\x01\x88a>3V[`@Q\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xE0\x84\x90\x1B\x16\x81Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16`\x04\x82\x01R`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x1FwW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x1F\x9B\x91\x90a=\x02V[\x90P[_a\x1F\xAC\x84`q\x81\x88a<?V[`@Qa\x1F\xBA\x92\x91\x90a<\xF3V[`@Q\x80\x91\x03\x90 \x90P_\x85\x85_\x81\x81\x10a\x1F\xD7Wa\x1F\xD7a<\xC7V[\x90P\x015`\xF8\x1C`\xF8\x1B\x90P_a\x1F\xF0\x87\x87`\x01a+\x90V[P\x90P_\x82\x82a \x04`q`!\x8B\x8Da<?V[\x87`@Q` \x01a \x19\x95\x94\x93\x92\x91\x90a>SV[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x82\x82R\x80Q` \x91\x82\x01 \x83\x82\x01\x89\x90R\x83\x83\x01\x81\x90R\x82Q\x80\x85\x03\x84\x01\x81R``\x90\x94\x01\x90\x92R\x82Q\x92\x01\x91\x90\x91 \x90\x91Pa i`@\x8C\x01` \x8D\x01a>\0V[`@Q\x7F\xD5q\x9D\xC2\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x8C\x16`\x04\x82\x01Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91\x90\x91\x16\x90c\xD5q\x9D\xC2\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a \xDDW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a!\x01\x91\x90a=\x02V[\x81\x14a!OW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x13`$\x82\x01R\x7FBAD_DELAYED_MESSAGE\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[P`\x01\x9A\x99PPPPPPPPPPV[\x81Q_\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a!y\x83` a<\xA1V[\x11\x15\x80\x15a\x19\x0FWPa!\x8D` \x83a<zV[\x15\x93\x92PPPV[_a!\xAC`@Q\x80` \x01`@R\x80``\x81RP\x90V[`@\x80Q` \x81\x01\x90\x91R``\x81R`@\x80Q\x80\x82\x01\x90\x91R`\x13\x81R\x7FModule merkle tree:\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01Ra\x01`\x88\x01Qa!\xFDa1\xC6V[_a\"\t\x89\x89\x8Ca+\xD9V[\x9AP\x91Pa\"\x18\x89\x89\x8Ca,\x9AV[\x9AP\x90Pa\"'\x89\x89\x8Ca)\xE9V[\x9APc\xFF\xFF\xFF\xFF\x80\x83\x16\x98P\x90\x96P_\x90a\"H\x90\x88\x90\x8A\x90\x86\x90a,\xE9\x16V[\x90P\x83\x81\x14a\"\x99W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x13`$\x82\x01R\x7FWRONG_ROOT_FOR_LEAF\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[PPP_a\"\xAD\x86`\x01a\x10A\x91\x90a<\xA1V[\x90P\x80\x15a#\x19Wa\"\xC0\x86`\x01a<\xA1V[\x85QQ`\x01\x90\x1B\x14a#\x14W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\n`$\x82\x01R\x7FWRONG_LEAF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[a#\x93V[a#$\x88\x88\x8Ba)\xE9V[\x99P\x93P_a#@a#7\x88`\x01a<\xA1V[\x86\x90_\x87a$hV[\x90P\x82\x81\x14a#\x91W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x13`$\x82\x01R\x7FWRONG_ROOT_FOR_ZERO\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[P[PPP\x94P\x94P\x94\x91PPV[_\x81\x15\x80\x15\x90a\x16cWPa#\xB6`\x01\x83a=oV[\x82\x16\x15\x92\x91PPV[_\x83\x85[`\x01\x81\x11\x15a$0W\x83\x82\x86`@Q` \x01a#\xE1\x93\x92\x91\x90a>\xBCV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x91P\x83\x85\x86`@Q` \x01a$\x0E\x93\x92\x91\x90a>\xBCV[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R\x80Q` \x90\x91\x01 \x94P`\x01\x1Ca#\xC3V[\x83\x88\x83`@Q` \x01a$E\x93\x92\x91\x90a>\xBCV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x92PPP\x95\x94PPPPPV[\x81_[\x85QQ\x81\x10\x15a%#W\x84`\x01\x16_\x03a$\xCDW\x82\x82\x87_\x01Q\x83\x81Q\x81\x10a$\x96Wa$\x96a<\xC7V[` \x02` \x01\x01Q`@Q` \x01a$\xB0\x93\x92\x91\x90a>\xBCV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x91Pa%\x17V[\x82\x86_\x01Q\x82\x81Q\x81\x10a$\xE3Wa$\xE3a<\xC7V[` \x02` \x01\x01Q\x83`@Q` \x01a$\xFE\x93\x92\x91\x90a>\xBCV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x91P[`\x01\x94\x85\x1C\x94\x01a$kV[P\x83\x15a\x1E{W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0F`$\x82\x01R\x7FPROOF_TOO_SHORT\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[\x80Q_\x19\x14a%\xDFW\x80Q` \x80\x83\x01Q`@Qa%\xC2\x93\x92\x01\x7Fcothread:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\t\x81\x01\x92\x90\x92R`)\x82\x01R`I\x01\x90V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R\x80Q` \x91\x82\x01 \x90\x82\x01R[_\x90RV[_\x80\x80a%\xF2\x85\x85\x83a(\\V[\x93P\x91Pa&\x01\x85\x85\x85a(\\V[\x93P\x90P`\x01\x82\x01a&\xB2W\x80\x15a&[W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x14`$\x82\x01R\x7FWRONG_COTHREAD_EMPTY\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[` \x86\x01Q\x15a&\xADW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x14`$\x82\x01R\x7FWRONG_COTHREAD_EMPTY\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[a'^V[\x85` \x01Q\x82\x82`@Q` \x01a&\xFB\x92\x91\x90\x7Fcothread:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\t\x81\x01\x92\x90\x92R`)\x82\x01R`I\x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x14a'^W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x12`$\x82\x01R\x7FWRONG_COTHREAD_POP\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[` \x86\x01R\x90\x93RPPPV[a\x01@\x82\x01Q_\x90_\x19\x14a'\x81WP_a\x16cV[_`@\x84`\xE0\x01Qc\xFF\xFF\xFF\xFF\x16\x90\x1B\x90P` \x84a\x01\0\x01Qc\xFF\xFF\xFF\xFF\x16\x90\x1B\x81\x17\x90P`\x01\x83\x85a\x01 \x01Qa'\xBA\x91\x90a>\xD9V[a'\xC4\x91\x90a>\xF5V[c\xFF\xFF\xFF\xFF\x16\x17a\x01@\x84\x01RP`\x01\x92\x91PPV[`@\x81\x01QQ`\xA0\x82\x01QQ_\x19\x81\x14\x80a'\xF5WP_\x19\x82\x14[\x15a(\x02W\x82`\x02a\x15\x84V[a(\x0F\x83`\x80\x01Qa-3V[`\xA0\x84\x01QR` \x83\x01Qa(#\x90a-\xCCV[`@\x84\x01QR`\x80\x83\x01Qa(>\x90\x82` \x82\x01R``\x90RV[P` \x91\x82\x01Q\x80\x83\x01\x91\x90\x91R`@\x80Q\x92\x83\x01\x90R``\x82RRV[_\x81\x81a(j\x86\x86\x84a+\x90V[\x90\x97\x90\x96P\x94PPPPPV[_\x81\x81[`\x08\x81\x10\x15a(\xCAW`\x08\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x1B\x92P\x85\x85\x83\x81\x81\x10a(\xA7Wa(\xA7a<\xC7V[\x91\x90\x91\x015`\xF8\x1C\x93\x90\x93\x17\x92P\x81a(\xBF\x81a<\xDBV[\x92PP`\x01\x01a({V[P\x93P\x93\x91PPV[a(\xDBa2}V[P`@\x80Q\x80\x82\x01\x90\x91R`\x01\x81Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16` \x82\x01R\x90V[a)\x06a2}V[\x81Q\x80Qa)\x16\x90`\x01\x90a=oV[\x81Q\x81\x10a)&Wa)&a<\xC7V[` \x02` \x01\x01Q\x90P_`\x01\x83_\x01QQa)B\x91\x90a=oV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a)ZWa)Za6wV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a)\x93W\x81` \x01[a)\x80a2}V[\x81R` \x01\x90`\x01\x90\x03\x90\x81a)xW\x90P[P\x90P_[\x81Q\x81\x10\x15a)\xE2W\x83Q\x80Q\x82\x90\x81\x10a)\xB5Wa)\xB5a<\xC7V[` \x02` \x01\x01Q\x82\x82\x81Q\x81\x10a)\xCFWa)\xCFa<\xC7V[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a)\x98V[P\x90\x91R\x90V[`@\x80Q` \x81\x01\x90\x91R``\x81R\x81_a*\x05\x86\x86\x84a.XV[\x92P\x90P_`\xFF\x82\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a*&Wa*&a6wV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a*OW\x81` \x01` \x82\x02\x806\x837\x01\x90P[P\x90P_[\x82`\xFF\x16\x81`\xFF\x16\x10\x15a*\x9AWa*m\x88\x88\x86a(\\V[\x83\x83`\xFF\x16\x81Q\x81\x10a*\x82Wa*\x82a<\xC7V[` \x90\x81\x02\x91\x90\x91\x01\x01\x91\x90\x91R\x93P`\x01\x01a*TV[P`@Q\x80` \x01`@R\x80\x82\x81RP\x93PPP\x93P\x93\x91PPV[\x81QQ_\x90a*\xC6\x90`\x01a<\xA1V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a*\xDEWa*\xDEa6wV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a+\x17W\x81` \x01[a+\x04a2}V[\x81R` \x01\x90`\x01\x90\x03\x90\x81a*\xFCW\x90P[P\x90P_[\x83QQ\x81\x10\x15a+gW\x83Q\x80Q\x82\x90\x81\x10a+:Wa+:a<\xC7V[` \x02` \x01\x01Q\x82\x82\x81Q\x81\x10a+TWa+Ta<\xC7V[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a+\x1CV[P\x81\x81\x84_\x01QQ\x81Q\x81\x10a+\x7FWa+\x7Fa<\xC7V[` \x90\x81\x02\x91\x90\x91\x01\x01R\x90\x91RPV[_\x81\x81[` \x81\x10\x15a(\xCAW`\x08\x83\x90\x1B\x92P\x85\x85\x83\x81\x81\x10a+\xB6Wa+\xB6a<\xC7V[\x91\x90\x91\x015`\xF8\x1C\x93\x90\x93\x17\x92P\x81a+\xCE\x81a<\xDBV[\x92PP`\x01\x01a+\x94V[a+\xE1a1\xC6V[`@\x80Q``\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R\x83\x91\x90____a,\x0E\x8B\x8B\x89a(\\V[\x97P\x95Pa,\x1D\x8B\x8B\x89a.\x8DV[\x97P\x94Pa,,\x8B\x8B\x89a(\\V[\x97P\x93Pa,;\x8B\x8B\x89a(\\V[\x97P\x92Pa,J\x8B\x8B\x89a(\\V[\x97P\x91Pa,Y\x8B\x8B\x89a,\x9AV[`@\x80Q`\xC0\x81\x01\x82R\x98\x89R` \x89\x01\x97\x90\x97R\x95\x87\x01\x94\x90\x94RP``\x85\x01\x91\x90\x91R`\x80\x84\x01Rc\xFF\xFF\xFF\xFF\x16`\xA0\x83\x01R\x90\x96\x90\x95P\x93PPPPV[_\x81\x81[`\x04\x81\x10\x15a(\xCAW`\x08\x83c\xFF\xFF\xFF\xFF\x16\x90\x1B\x92P\x85\x85\x83\x81\x81\x10a,\xC6Wa,\xC6a<\xC7V[\x91\x90\x91\x015`\xF8\x1C\x93\x90\x93\x17\x92P\x81a,\xDE\x81a<\xDBV[\x92PP`\x01\x01a,\x9EV[_a\x1E{\x84\x84a,\xF8\x85a/\x07V[`@Q\x80`@\x01`@R\x80`\x13\x81R` \x01\x7FModule merkle tree:\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RPa$hV[` \x81\x01Q_[\x82QQ\x81\x10\x15a-\xC6Wa-i\x83_\x01Q\x82\x81Q\x81\x10a-\\Wa-\\a<\xC7V[` \x02` \x01\x01Qa/\xAFV[`@Q\x7FStack frame stack:\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`2\x81\x01\x91\x90\x91R`R\x81\x01\x83\x90R`r\x01`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R\x80Q` \x90\x91\x01 \x91P`\x01\x01a-:V[P\x91\x90PV[` \x81\x01Q\x81QQQ_[\x81\x81\x10\x15a.QW\x83Qa-\xF4\x90a-\xEF\x90\x83a0FV[a0rV[`@Q\x7FValue stack:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`,\x81\x01\x91\x90\x91R`L\x81\x01\x84\x90R`l\x01`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R\x80Q` \x90\x91\x01 \x92P`\x01\x01a-\xD7V[PP\x91\x90PV[_\x81\x84\x84\x82\x81\x81\x10a.lWa.la<\xC7V[\x91\x90\x91\x015`\xF8\x1C\x92P\x81\x90Pa.\x82\x81a<\xDBV[\x91PP\x93P\x93\x91PPV[`@\x80Q``\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x91\x90\x91R\x81_\x80\x80a.\xB8\x88\x88\x86a(wV[\x94P\x92Pa.\xC7\x88\x88\x86a(wV[\x94P\x91Pa.\xD6\x88\x88\x86a(\\V[`@\x80Q``\x81\x01\x82Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x96\x87\x16\x81R\x94\x90\x95\x16` \x85\x01R\x93\x83\x01RP\x96\x90\x95P\x93PPPPV[_\x81_\x01Qa/\x19\x83` \x01Qa0\x8DV[`@\x80\x85\x01Q``\x86\x01Q`\x80\x87\x01Q`\xA0\x88\x01Q\x93Qa\x13\xC2\x96\x95\x94\x90` \x01\x7FModule:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x07\x81\x01\x96\x90\x96R`'\x86\x01\x94\x90\x94R`G\x85\x01\x92\x90\x92R`g\x84\x01R`\x87\x83\x01R`\xE0\x1B\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16`\xA7\x82\x01R`\xAB\x01\x90V[_a/\xBC\x82_\x01Qa0rV[` \x80\x84\x01Q`@\x80\x86\x01Q``\x87\x01Q\x91Q\x7FStack frame:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x94\x81\x01\x94\x90\x94R`,\x84\x01\x94\x90\x94R`L\x83\x01\x91\x90\x91R\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xE0\x93\x84\x1B\x81\x16`l\x84\x01R\x92\x1B\x90\x91\x16`p\x82\x01R`t\x01a\x13\xC2V[a0Na2}V[\x82Q\x80Q\x83\x90\x81\x10a0bWa0ba<\xC7V[` \x02` \x01\x01Q\x90P\x92\x91PPV[_\x81_\x01Q\x82` \x01Q`@Q` \x01a\x13\xC2\x92\x91\x90a?\x11V[\x80Q` \x80\x83\x01Q`@\x80\x85\x01Q\x90Q\x7FMemory:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x93\x81\x01\x93\x90\x93R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xC0\x94\x85\x1B\x81\x16`'\x85\x01R\x91\x90\x93\x1B\x16`/\x82\x01R`7\x81\x01\x91\x90\x91R_\x90`W\x01a\x13\xC2V[`@\x80Qa\x01\x80\x81\x01\x90\x91R\x80_\x81R` \x01a1)a2\x96V[\x81R` \x01a1I`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a1Va2\x96V[\x81R` \x01a1w`@Q\x80`@\x01`@R\x80``\x81R` \x01_\x81RP\x90V[\x81R` \x01a1\x97`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R_` \x82\x01\x81\x90R`@\x82\x01\x81\x90R``\x82\x01\x81\x90R`\x80\x82\x01\x81\x90R`\xA0\x82\x01\x81\x90R`\xC0\x90\x91\x01R\x90V[`@Q\x80`\xC0\x01`@R\x80_\x81R` \x01a2\x0C`@Q\x80``\x01`@R\x80_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_\x81RP\x90V[\x81R` \x01_\x81R` \x01_\x81R` \x01_\x81R` \x01_c\xFF\xFF\xFF\xFF\x16\x81RP\x90V[a28a?\\V[V[`@Q\x80`@\x01`@R\x80a2Ma2_V[\x81R` \x01a2Za2_V[\x90R\x90V[`@Q\x80`@\x01`@R\x80`\x02\x90` \x82\x02\x806\x837P\x91\x92\x91PPV[`@\x80Q\x80\x82\x01\x90\x91R\x80_[\x81R` \x01_\x81RP\x90V[`@\x80Q``\x80\x82\x01\x83R\x91\x81\x01\x91\x82R\x90\x81\x90a2\x8AV[_`@\x82\x84\x03\x12\x15a-\xC6W__\xFD[__\x83`\x1F\x84\x01\x12a2\xCFW__\xFD[P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a2\xE6W__\xFD[` \x83\x01\x91P\x83` \x82\x85\x01\x01\x11\x15a2\xFDW__\xFD[\x92P\x92\x90PV[______\x86\x88\x03a\x01\xE0\x81\x12\x15a3\x1BW__\xFD[``\x81\x12\x15a3(W__\xFD[\x87\x96P``\x88\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a3DW__\xFD[\x88\x01a\x01\xC0\x81\x8B\x03\x12\x15a3VW__\xFD[\x95Pa\x01\0\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x01\x12\x15a3\x88W__\xFD[P`\x80\x87\x01\x93Pa3\x9D\x88a\x01\x80\x89\x01a2\xAFV[\x92Pa\x01\xC0\x87\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a3\xB9W__\xFD[a3\xC5\x89\x82\x8A\x01a2\xBFV[\x97\x9A\x96\x99P\x94\x97P\x92\x95\x93\x94\x92PPPV[cNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[`\x03\x81\x10a3\xFBWa3\xFBa3\xD7V[\x90RV[\x80Q`\x07\x81\x10a4\x11Wa4\x11a3\xD7V[\x82R` \x90\x81\x01Q\x91\x01RV[\x80Q`@\x80\x84R\x90Q` \x91\x84\x01\x82\x90R\x80Q``\x85\x01\x81\x90R_\x92\x90\x91\x01\x90\x82\x90`\x80\x86\x01\x90[\x80\x83\x10\x15a4pWa4Y\x82\x85Qa3\xFFV[`@\x82\x01\x91P` \x84\x01\x93P`\x01\x83\x01\x92Pa4FV[P` \x85\x01Q` \x87\x01R\x80\x93PPPP\x92\x91PPV[\x80Q`@\x80\x84R\x81Q\x90\x84\x01\x81\x90R_\x91` \x01\x90\x82\x90``\x86\x01\x90[\x80\x83\x10\x15a4pW\x83Qa4\xB9\x83\x82Qa3\xFFV[` \x81\x01Q`@\x84\x01Rc\xFF\xFF\xFF\xFF`@\x82\x01Q\x16``\x84\x01Rc\xFF\xFF\xFF\xFF``\x82\x01Q\x16`\x80\x84\x01RP`\xA0\x82\x01\x91P` \x84\x01\x93P`\x01\x83\x01\x92Pa4\xA4V[a\x01 \x81Ra5\x0Fa\x01 \x82\x01\x84Qa3\xEBV[_` \x84\x01Qa\x01\xC0a\x01@\x84\x01Ra5,a\x02\xE0\x84\x01\x82a4\x1EV[`@\x86\x01Q\x80Qa\x01`\x86\x01R` \x01Qa\x01\x80\x85\x01R``\x86\x01Q\x84\x82\x03a\x01\x1F\x19\x01a\x01\xA0\x86\x01R\x90\x91Pa5c\x82\x82a4\x1EV[\x91PP`\x80\x85\x01Qa\x01\x1F\x19\x84\x83\x03\x01a\x01\xC0\x85\x01Ra5\x83\x82\x82a4\x87V[\x91PP`\xA0\x85\x01Qa5\xA3a\x01\xE0\x85\x01\x82\x80Q\x82R` \x90\x81\x01Q\x91\x01RV[P`\xC0\x85\x01Qa\x02 \x84\x01R`\xE0\x85\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x02@\x85\x01RPa\x01\0\x85\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x02`\x85\x01RPa\x01 \x85\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x02\x80\x85\x01RPa\x01@\x85\x01Qa\x02\xA0\x84\x01Ra\x01`\x85\x01Qa\x02\xC0\x84\x01R\x90Pa\x19\x0F` \x83\x01\x84\x80Q\x82R` \x81\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81Q\x16` \x84\x01Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF` \x82\x01Q\x16`@\x84\x01R`@\x81\x01Q``\x84\x01RP`@\x81\x01Q`\x80\x83\x01R``\x81\x01Q`\xA0\x83\x01R`\x80\x81\x01Q`\xC0\x83\x01Rc\xFF\xFF\xFF\xFF`\xA0\x82\x01Q\x16`\xE0\x83\x01RPPV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@\x80Q\x90\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a6\xAEWa6\xAEa6wV[`@R\x90V[`@Q` \x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a6\xAEWa6\xAEa6wV[`@Q`\x80\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a6\xAEWa6\xAEa6wV[`@Qa\x01\x80\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a6\xAEWa6\xAEa6wV[`@Q`\xC0\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a6\xAEWa6\xAEa6wV[`@Q``\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a6\xAEWa6\xAEa6wV[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a7\x8DWa7\x8Da6wV[`@R\x91\x90PV[\x805`\x03\x81\x10a7\xA3W__\xFD[\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a7\xC1Wa7\xC1a6wV[P`\x05\x1B` \x01\x90V[_`@\x82\x84\x03\x12\x15a7\xDBW__\xFD[a7\xE3a6\x8BV[\x90P\x815`\x07\x81\x10a7\xF3W__\xFD[\x80\x82RP` \x82\x015` \x82\x01R\x92\x91PPV[_`@\x82\x84\x03\x12\x15a8\x17W__\xFD[a8\x1Fa6\x8BV[\x90P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a87W__\xFD[\x82\x01` \x81\x85\x03\x12\x15a8HW__\xFD[a8Pa6\xB4V[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a8fW__\xFD[\x80\x83\x01\x92PP\x84`\x1F\x83\x01\x12a8zW__\xFD[\x815a8\x8Da8\x88\x82a7\xA8V[a7dV[\x80\x82\x82R` \x82\x01\x91P` \x83`\x06\x1B\x86\x01\x01\x92P\x87\x83\x11\x15a8\xAEW__\xFD[` \x85\x01\x94P[\x82\x85\x10\x15a8\xDAWa8\xC7\x88\x86a7\xCBV[\x82R` \x82\x01\x91P`@\x85\x01\x94Pa8\xB5V[\x83RPP\x82RP` \x91\x82\x015\x91\x81\x01\x91\x90\x91R\x91\x90PV[_`@\x82\x84\x03\x12\x15a9\x03W__\xFD[a9\x0Ba6\x8BV[\x825\x81R` \x92\x83\x015\x92\x81\x01\x92\x90\x92RP\x91\x90PV[\x805c\xFF\xFF\xFF\xFF\x81\x16\x81\x14a7\xA3W__\xFD[_`@\x82\x84\x03\x12\x15a9EW__\xFD[a9Ma6\x8BV[\x90P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a9eW__\xFD[\x82\x01`\x1F\x81\x01\x84\x13a9uW__\xFD[\x805a9\x83a8\x88\x82a7\xA8V[\x80\x82\x82R` \x82\x01\x91P` `\xA0\x84\x02\x85\x01\x01\x92P\x86\x83\x11\x15a9\xA4W__\xFD[` \x84\x01\x93P[\x82\x84\x10\x15a:\x16W`\xA0\x84\x88\x03\x12\x15a9\xC2W__\xFD[a9\xCAa6\xD7V[a9\xD4\x88\x86a7\xCBV[\x81R`@\x85\x015` \x82\x01Ra9\xEC``\x86\x01a9\"V[`@\x82\x01Ra9\xFD`\x80\x86\x01a9\"V[``\x82\x01R\x82R`\xA0\x93\x90\x93\x01\x92` \x90\x91\x01\x90a9\xABV[\x84RPPP` \x91\x82\x015\x91\x81\x01\x91\x90\x91R\x91\x90PV[_a\x01\xC0\x826\x03\x12\x15a:>W__\xFD[a:Fa6\xFAV[a:O\x83a7\x95V[\x81R` \x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a:jW__\xFD[a:v6\x82\x86\x01a8\x07V[` \x83\x01RPa:\x896`@\x85\x01a8\xF3V[`@\x82\x01R`\x80\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a:\xA7W__\xFD[a:\xB36\x82\x86\x01a8\x07V[``\x83\x01RP`\xA0\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a:\xD2W__\xFD[a:\xDE6\x82\x86\x01a95V[`\x80\x83\x01RPa:\xF16`\xC0\x85\x01a8\xF3V[`\xA0\x82\x01Ra\x01\0\x83\x015`\xC0\x82\x01Ra;\x0Ea\x01 \x84\x01a9\"V[`\xE0\x82\x01Ra; a\x01@\x84\x01a9\"V[a\x01\0\x82\x01Ra;3a\x01`\x84\x01a9\"V[a\x01 \x82\x01Ra\x01\x80\x83\x015a\x01@\x82\x01Ra\x01\xA0\x90\x92\x015a\x01`\x83\x01RP\x90V[\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a7\xA3W__\xFD[_\x81\x83\x03a\x01\0\x81\x12\x80\x15a;\x80W__\xFD[Pa;\x89a7\x1EV[\x835\x81R```\x1F\x19\x83\x01\x12\x15a;\x9EW__\xFD[a;\xA6a7AV[\x91Pa;\xB4` \x85\x01a;VV[\x82Ra;\xC2`@\x85\x01a;VV[` \x83\x81\x01\x91\x90\x91R``\x85\x81\x015`@\x80\x86\x01\x91\x90\x91R\x91\x83\x01\x93\x90\x93R`\x80\x80\x86\x015\x91\x83\x01\x91\x90\x91R`\xA0\x85\x015\x92\x82\x01\x92\x90\x92R`\xC0\x84\x015\x91\x81\x01\x82\x90Ra<\x11`\xE0\x85\x01a9\"V[`\xA0\x82\x01R\x94\x93PPPPV[_` \x82\x84\x03\x12\x15a<.W__\xFD[\x815a\xFF\xFF\x81\x16\x81\x14a\x19\x0FW__\xFD[__\x85\x85\x11\x15a<MW__\xFD[\x83\x86\x11\x15a<YW__\xFD[PP\x82\x01\x93\x91\x90\x92\x03\x91PV[cNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[_\x82a<\x88Wa<\x88a<fV[P\x06\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[\x80\x82\x01\x80\x82\x11\x15a\x16cWa\x16ca<\x8DV[_\x82a<\xC2Wa<\xC2a<fV[P\x04\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_`\x01\x82\x01a<\xECWa<\xECa<\x8DV[P`\x01\x01\x90V[\x81\x83\x827_\x91\x01\x90\x81R\x91\x90PV[_` \x82\x84\x03\x12\x15a=\x12W__\xFD[PQ\x91\x90PV[\x805` \x83\x10\x15a\x16cW_\x19` \x84\x90\x03`\x03\x1B\x1B\x16\x92\x91PPV[__`@\x83\x85\x03\x12\x15a=GW__\xFD[PP\x80Q` \x90\x91\x01Q\x90\x92\x90\x91PV[\x80\x82\x02\x81\x15\x82\x82\x04\x84\x14\x17a\x16cWa\x16ca<\x8DV[\x81\x81\x03\x81\x81\x11\x15a\x16cWa\x16ca<\x8DV[_c\xFF\xFF\xFF\xFF\x82\x16c\xFF\xFF\xFF\xFF\x81\x03a=\x9DWa=\x9Da<\x8DV[`\x01\x01\x92\x91PPV[_`\xFF\x82\x16`\xFF\x81\x03a=\x9DWa=\x9Da<\x8DV[_\x81Q\x80` \x84\x01\x85^_\x93\x01\x92\x83RP\x90\x91\x90PV[_a\x19\x0F\x82\x84a=\xBBV[\x80Q` \x80\x83\x01Q\x91\x90\x81\x10\x15a-\xC6W_\x19` \x91\x90\x91\x03`\x03\x1B\x1B\x16\x91\x90PV[_` \x82\x84\x03\x12\x15a>\x10W__\xFD[\x815s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x19\x0FW__\xFD[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x81\x16\x82\x82\x16\x03\x90\x81\x11\x15a\x16cWa\x16ca<\x8DV[\x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x86\x16\x81R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\x85``\x1B\x16`\x01\x82\x01R\x82\x84`\x15\x83\x017`\x15\x92\x01\x91\x82\x01R`5\x01\x93\x92PPPV[_a>\xC7\x82\x86a=\xBBV[\x93\x84RPP` \x82\x01R`@\x01\x91\x90PV[c\xFF\xFF\xFF\xFF\x81\x81\x16\x83\x82\x16\x01\x90\x81\x11\x15a\x16cWa\x16ca<\x8DV[c\xFF\xFF\xFF\xFF\x82\x81\x16\x82\x82\x16\x03\x90\x81\x11\x15a\x16cWa\x16ca<\x8DV[\x7FValue:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R_`\x07\x84\x10a?EWa?Ea3\xD7V[P`\xF8\x92\x90\x92\x1B`\x06\x83\x01R`\x07\x82\x01R`'\x01\x90V[cNH{q`\xE0\x1B_R`Q`\x04R`$_\xFD\xFE\xA2dipfsX\"\x12 \xEE\x0F\x93\xA2\xE4<\xB3\xD6A\xBA\x9C`\x81<d\xEAC\x17\xFBD\x9C\xCC0m\xB7\r\x01\xE3\x93\x822\xACdsolcC\0\x08\x1C\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f5ffd5b5060043610610029575f3560e01c8063a92cb5011461002d575b5f5ffd5b61004061003b366004613304565b610057565b60405161004e9291906134fb565b60405180910390f35b61005f61310e565b6100676131c6565b61007087613a2d565b915061008136879003870187613b6d565b90505f6100916020870187613c1e565b905061323061801061ffff8316108015906100b2575061801361ffff831611155b156100c057506102cc6102ad565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7fe061ffff8316016100f457506104596102ad565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7fdf61ffff8316016101285750610c2a6102ad565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7fde61ffff83160161015c5750610f706102ad565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7fdd61ffff8316016101905750610f7c6102ad565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7fdc61ffff8316016101c457506110a46102ad565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7fd061ffff8316016101f857506111536102ad565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7fcf61ffff83160161022c57506111996102ad565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7fce61ffff83160161026057506111ed6102ad565b60405162461bcd60e51b815260206004820152601560248201527f494e56414c49445f4d454d4f52595f4f50434f4445000000000000000000000060448201526064015b60405180910390fd5b6102bf8a85858a8a8a8763ffffffff16565b5050965096945050505050565b5f6102da6020850185613c1e565b90506102e461323a565b5f6102f085858361125d565b60c08a0151919350915061030383611337565b146103505760405162461bcd60e51b815260206004820152601060248201527f4241445f474c4f42414c5f53544154450000000000000000000000000000000060448201526064016102a4565b61ffff83166180101480610369575061ffff8316618011145b1561038b57610386888884896103818987818d613c3f565b6113df565b61043d565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7fee61ffff8416016103c057610386888361155f565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7fed61ffff8416016103f55761038688836115db565b60405162461bcd60e51b815260206004820152601a60248201527f494e56414c49445f474c4f42414c53544154455f4f50434f444500000000000060448201526064016102a4565b61044682611337565b60c0909801979097525050505050505050565b5f61046f61046a8760200151611650565b611669565b63ffffffff1690505f61048861046a8860200151611650565b63ffffffff16905061049b602083613c7a565b1515806104c257506020808701515167ffffffffffffffff16906104c0908390613ca1565b115b806104d657506104d3602082613c7a565b15155b156104fd578660025b908160028111156104f2576104f26133d7565b815250505050610c22565b5f610509602083613cb4565b6040805160208101909152606081529091505f90819060208a015161053190858a8a87611725565b909450909250905060605f89898681811061054e5761054e613cc7565b919091013560f81c915085905061056481613cdb565b9550508a602001355f036106a0578060ff165f0361065857365f61058a8b88818f613c3f565b9150915085828260405161059f929190613cf3565b6040518091039020146105f45760405162461bcd60e51b815260206004820152600c60248201527f4241445f505245494d414745000000000000000000000000000000000000000060448201526064016102a4565b5f6106008b6020613ca1565b90508181111561060d5750805b610619818c8486613c3f565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250929750610bb195505050505050565b60405162461bcd60e51b815260206004820152601660248201527f554e4b4e4f574e5f505245494d4147455f50524f4f460000000000000000000060448201526064016102a4565b8a602001356001036107ad5760ff8116156106fd5760405162461bcd60e51b815260206004820152601660248201527f554e4b4e4f574e5f505245494d4147455f50524f4f460000000000000000000060448201526064016102a4565b365f61070b8b88818f613c3f565b915091508560028383604051610722929190613cf3565b602060405180830381855afa15801561073d573d5f5f3e3d5ffd5b5050506040513d601f19601f820116820180604052508101906107609190613d02565b146105f45760405162461bcd60e51b815260206004820152600c60248201527f4241445f505245494d414745000000000000000000000000000000000000000060448201526064016102a4565b8a60200135600203610b695760ff81161561080a5760405162461bcd60e51b815260206004820152601660248201527f554e4b4e4f574e5f505245494d4147455f50524f4f460000000000000000000060448201526064016102a4565b365f6108188b88818f613c3f565b90925090508561082b60205f8486613c3f565b61083491613d19565b146108815760405162461bcd60e51b815260206004820152601460248201527f4b5a475f50524f4f465f57524f4e475f4841534800000000000000000000000060448201526064016102a4565b5f5f5f5f600a73ffffffffffffffffffffffffffffffffffffffff1686866040516108ad929190613cf3565b5f60405180830381855afa9150503d805f81146108e5576040519150601f19603f3d011682016040523d82523d5f602084013e6108ea565b606091505b50915091508161093c5760405162461bcd60e51b815260206004820152601160248201527f494e56414c49445f4b5a475f50524f4f4600000000000000000000000000000060448201526064016102a4565b5f81511161098c5760405162461bcd60e51b815260206004820152601660248201527f4b5a475f505245434f4d50494c455f4d495353494e470000000000000000000060448201526064016102a4565b808060200190518101906109a09190613d36565b9094509250507f73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff0000000182149050610a175760405162461bcd60e51b815260206004820152601360248201527f554e4b4e4f574e5f424c535f4d4f44554c55530000000000000000000000000060448201526064016102a4565b610a22826020613d58565b8c1015610b60575f80610a3660208f613cb4565b905060015b84811015610a6557600192831b928281169003610a59576001831792505b600191821c911b610a3b565b505f610a7685640100000000613cb4565b9050610a828382613d58565b90505f610ab07f16a2a19edfe81f20d09b681922c813b4b63683508c2280b93829971f439f0d2b83876117cc565b905080610ac1604060208a8c613c3f565b610aca91613d19565b14610b175760405162461bcd60e51b815260206004820152601160248201527f4b5a475f50524f4f465f57524f4e475f5a00000000000000000000000000000060448201526064016102a4565b610b2560606040898b613c3f565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250929c50505050505050505b50505050610bb1565b60405162461bcd60e51b815260206004820152601560248201527f554e4b4e4f574e5f505245494d4147455f54595045000000000000000000000060448201526064016102a4565b5f5b8251811015610bea57610be08582858481518110610bd357610bd3613cc7565b016020015160f81c611916565b9450600101610bb3565b50610bf68387866119a1565b60208d0151604001528151610c1990610c0e90611a3a565b60208f015190611a60565b50505050505050505b505050505050565b5f610c3b61046a8760200151611650565b63ffffffff1690505f610c5461046a8860200151611650565b63ffffffff1690505f610c72610c6d8960200151611650565b611a70565b67ffffffffffffffff1690506020860135158015610c91575088358110155b15610cb9578760025b90816002811115610cad57610cad6133d7565b81525050505050610c22565b6020808801515167ffffffffffffffff1690610cd6908490613ca1565b1180610ceb5750610ce8602083613c7a565b15155b15610cf857876002610c9a565b5f610d04602084613cb4565b6040805160208101909152606081529091505f90819060208b0151610d2c90858b8b87611725565b9094509092509050888884818110610d4657610d46613cc7565b909101357fff0000000000000000000000000000000000000000000000000000000000000016159050610dbb5760405162461bcd60e51b815260206004820152601360248201527f554e4b4e4f574e5f494e424f585f50524f4f460000000000000000000000000060448201526064016102a4565b82610dc581613cdb565b935061323090505f60208c0135610de057611b319150610e1f565b60018c6020013503610df657611e839150610e1f565b8d60025b90816002811115610e0d57610e0d6133d7565b81525050505050505050505050610c22565b610e3f8f888d8d89908092610e3693929190613c3f565b8663ffffffff16565b905080610e4e578d6002610dfa565b505082881015610ea05760405162461bcd60e51b815260206004820152601160248201527f4241445f4d4553534147455f50524f4f4600000000000000000000000000000060448201526064016102a4565b5f610eab848a613d6f565b90505f5b60208163ffffffff16108015610ed3575081610ed163ffffffff83168b613ca1565b105b15610f2c57610f188463ffffffff83168d8d82610ef08f8c613ca1565b610efa9190613ca1565b818110610f0957610f09613cc7565b919091013560f81c9050611916565b935080610f2481613d82565b915050610eaf565b610f378387866119a1565b60208e015160400152610f5f610f4c82611a3a565b8f60200151611a6090919063ffffffff16565b505050505050505050505050505050565b50506001909252505050565b5f6040518060400160405280601381526020017f4d6f64756c65206d65726b6c6520747265653a0000000000000000000000000081525090505f86610160015190505f610fcf61046a8960200151611650565b63ffffffff169050610fee81886020015161216090919063ffffffff16565b610ffa57876002610c9a565b5f8061101861100a602085613cb4565b60208b01519089895f611725565b50915091505f5f61102b8c848b8b612195565b92505091505f6110468360016110419190613ca1565b6123a0565b90508015611070576110658761105d856001613ca1565b875f8c6123bf565b6101608e015261108e565b61108761107e846001613ca1565b8390878b612468565b6101608e01525b610c19610c0e61109f856001613ca1565b611a3a565b60408051808201909152601381527f4d6f64756c65206d65726b6c6520747265653a0000000000000000000000000060208201525f806110e688828787612195565b50915091505f6110f5836123a0565b90508015611134578151805161110d90600190613d6f565b8151811061111d5761111d613cc7565b602002602001015189610160018181525050611147565b61114082845f87612468565b6101608a01525b50505050505050505050565b6101408501515f191461117f578460025b90816002811115611177576111776133d7565b905250610c22565b61118c8560a00151612572565b610c228560400151612572565b6101408501515f19146111ae57846002611164565b60a0850151516001016111c357846002611164565b6111d2856040015183836125e4565b60a0850151610c22906111e88360408187613c3f565b6125e4565b60a08501515160010161120257846002611164565b82602001355f0361122f5761014085015160010161122257846002611164565b5f19610140860152611254565b6101408501515f191461124457846002611164565b61125285602085013561276b565b505b610c22856127da565b61126561323a565b8161126e61325f565b61127661325f565b5f5b600260ff821610156112c05761128f88888661285c565b848360ff16600281106112a4576112a4613cc7565b60200201919091529350806112b881613da6565b915050611278565b505f5b600260ff8216101561131a576112da888886612877565b838360ff16600281106112ef576112ef613cc7565b67ffffffffffffffff909316602093909302019190915293508061131281613da6565b9150506112c3565b506040805180820190915291825260208201529590945092505050565b80518051602091820151828401518051908401516040517f476c6f62616c2073746174653a0000000000000000000000000000000000000095810195909552602d850193909352604d8401919091527fffffffffffffffff00000000000000000000000000000000000000000000000060c091821b8116606d85015291901b1660758201525f90607d015b604051602081830303815290604052805190602001209050919050565b5f6113f061046a8860200151611650565b63ffffffff1690505f61140961046a8960200151611650565b9050600263ffffffff821610611421578760026104df565b60208701516114309083612160565b61143c578760026104df565b5f611448602084613cb4565b6040805160208101909152606081529091505f90819060208b015161147090858a8a87611725565b909450909250905061801061148860208b018b613c1e565b61ffff16036114cb576114bd848b5f01518763ffffffff16600281106114b0576114b0613cc7565b60200201518391906119a1565b60208c015160400152611551565b6180116114db60208b018b613c1e565b61ffff1603611509578951829063ffffffff8716600281106114ff576114ff613cc7565b6020020152611551565b60405162461bcd60e51b815260206004820152601760248201527f4241445f474c4f42414c5f53544154455f4f50434f444500000000000000000060448201526064016102a4565b505050505050505050505050565b5f61157061046a8460200151611650565b9050600263ffffffff82161061159f578260025b90816002811115611597576115976133d7565b905250505050565b6115d66115cb83602001518363ffffffff16600281106115c1576115c1613cc7565b60200201516128d3565b602085015190611a60565b505050565b5f6115ec610c6d8460200151611650565b90505f6115ff61046a8560200151611650565b9050600263ffffffff821610611619575050600290915250565b8183602001518263ffffffff166002811061163657611636613cc7565b67ffffffffffffffff909216602092909202015250505050565b61165861327d565b8151611663906128fe565b92915050565b60208101515f908183516006811115611684576116846133d7565b146116d15760405162461bcd60e51b815260206004820152600760248201527f4e4f545f4933320000000000000000000000000000000000000000000000000060448201526064016102a4565b64010000000081106116635760405162461bcd60e51b815260206004820152600760248201527f4241445f4933320000000000000000000000000000000000000000000000000060448201526064016102a4565b5f5f61173d6040518060200160405280606081525090565b83915061174b86868461285c565b909350915061175b8686846129e9565b925090505f61176b8289866119a1565b9050886040015181146117c05760405162461bcd60e51b815260206004820152600e60248201527f57524f4e475f4d454d5f524f4f5400000000000000000000000000000000000060448201526064016102a4565b50955095509592505050565b60408051602080820181905281830181905260608201526080810185905260a0810184905260c08082018490528251808303909101815260e0909101918290525f9182908190600590611820908590613dd2565b5f60405180830381855afa9150503d805f8114611858576040519150601f19603f3d011682016040523d82523d5f602084013e61185d565b606091505b5091509150816118af5760405162461bcd60e51b815260206004820152600d60248201527f4d4f444558505f4641494c45440000000000000000000000000000000000000060448201526064016102a4565b80516020146119005760405162461bcd60e51b815260206004820152601360248201527f4d4f444558505f57524f4e475f4c454e4754480000000000000000000000000060448201526064016102a4565b61190981613ddd565b93505050505b9392505050565b5f602083106119675760405162461bcd60e51b815260206004820152601560248201527f4241445f5345545f4c4541465f425954455f494458000000000000000000000060448201526064016102a4565b5f8361197560016020613d6f565b61197f9190613d6f565b61198a906008613d58565b60ff848116821b911b198616179150509392505050565b6040517f4d656d6f7279206c6561663a00000000000000000000000000000000000000006020820152602c81018290525f908190604c01604051602081830303815290604052805190602001209050611a318585836040518060400160405280601381526020017f4d656d6f7279206d65726b6c6520747265653a00000000000000000000000000815250612468565b95945050505050565b611a4261327d565b50604080518082019091525f815263ffffffff909116602082015290565b8151611a6c9082612ab6565b5050565b60208101515f90600183516006811115611a8c57611a8c6133d7565b14611ad95760405162461bcd60e51b815260206004820152600760248201527f4e4f545f4936340000000000000000000000000000000000000000000000000060448201526064016102a4565b6801000000000000000081106116635760405162461bcd60e51b815260206004820152600760248201527f4241445f4936340000000000000000000000000000000000000000000000000060448201526064016102a4565b5f6028821015611b835760405162461bcd60e51b815260206004820152601260248201527f4241445f534551494e424f585f50524f4f46000000000000000000000000000060448201526064016102a4565b5f611b9084846020612877565b50809150505f8484604051611ba6929190613cf3565b60405190819003902090505f8067ffffffffffffffff881615611c7b57611bd360408a0160208b01613e00565b73ffffffffffffffffffffffffffffffffffffffff166316bf5579611bf960018b613e33565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815267ffffffffffffffff9091166004820152602401602060405180830381865afa158015611c54573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611c789190613d02565b91505b67ffffffffffffffff841615611d4357611c9b60408a0160208b01613e00565b73ffffffffffffffffffffffffffffffffffffffff1663d5719dc2611cc1600187613e33565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815267ffffffffffffffff9091166004820152602401602060405180830381865afa158015611d1c573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611d409190613d02565b90505b6040805160208101849052908101849052606081018290525f90608001604051602081830303815290604052805190602001209050896020016020810190611d8b9190613e00565b6040517f16bf557900000000000000000000000000000000000000000000000000000000815267ffffffffffffffff8b16600482015273ffffffffffffffffffffffffffffffffffffffff91909116906316bf557990602401602060405180830381865afa158015611dff573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611e239190613d02565b8114611e715760405162461bcd60e51b815260206004820152601460248201527f4241445f534551494e424f585f4d45535341474500000000000000000000000060448201526064016102a4565b6001955050505050505b949350505050565b5f6071821015611ed55760405162461bcd60e51b815260206004820152601160248201527f4241445f44454c415945445f50524f4f4600000000000000000000000000000060448201526064016102a4565b5f67ffffffffffffffff851615611f9e57611ef66040870160208801613e00565b73ffffffffffffffffffffffffffffffffffffffff1663d5719dc2611f1c600188613e33565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815267ffffffffffffffff9091166004820152602401602060405180830381865afa158015611f77573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611f9b9190613d02565b90505b5f611fac8460718188613c3f565b604051611fba929190613cf3565b604051809103902090505f85855f818110611fd757611fd7613cc7565b9050013560f81c60f81b90505f611ff087876001612b90565b5090505f8282612004607160218b8d613c3f565b87604051602001612019959493929190613e53565b60408051601f1981840301815282825280516020918201208382018990528383018190528251808503840181526060909401909252825192019190912090915061206960408c0160208d01613e00565b6040517fd5719dc200000000000000000000000000000000000000000000000000000000815267ffffffffffffffff8c16600482015273ffffffffffffffffffffffffffffffffffffffff919091169063d5719dc290602401602060405180830381865afa1580156120dd573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906121019190613d02565b811461214f5760405162461bcd60e51b815260206004820152601360248201527f4241445f44454c415945445f4d4553534147450000000000000000000000000060448201526064016102a4565b5060019a9950505050505050505050565b81515f9067ffffffffffffffff16612179836020613ca1565b1115801561190f575061218d602083613c7a565b159392505050565b5f6121ac6040518060200160405280606081525090565b60408051602081019091526060815260408051808201909152601381527f4d6f64756c65206d65726b6c6520747265653a0000000000000000000000000060208201526101608801516121fd6131c6565b5f61220989898c612bd9565b9a50915061221889898c612c9a565b9a50905061222789898c6129e9565b9a5063ffffffff80831698509096505f906122489088908a908690612ce916565b90508381146122995760405162461bcd60e51b815260206004820152601360248201527f57524f4e475f524f4f545f464f525f4c4541460000000000000000000000000060448201526064016102a4565b5050505f6122ad8660016110419190613ca1565b90508015612319576122c0866001613ca1565b8551516001901b146123145760405162461bcd60e51b815260206004820152600a60248201527f57524f4e475f4c4541460000000000000000000000000000000000000000000060448201526064016102a4565b612393565b61232488888b6129e9565b995093505f612340612337886001613ca1565b86905f87612468565b90508281146123915760405162461bcd60e51b815260206004820152601360248201527f57524f4e475f524f4f545f464f525f5a45524f0000000000000000000000000060448201526064016102a4565b505b5050509450945094915050565b5f811580159061166357506123b6600183613d6f565b82161592915050565b5f83855b6001811115612430578382866040516020016123e193929190613ebc565b60405160208183030381529060405280519060200120915083858660405160200161240e93929190613ebc565b60408051601f198184030181529190528051602090910120945060011c6123c3565b83888360405160200161244593929190613ebc565b604051602081830303815290604052805190602001209250505095945050505050565b815f5b85515181101561252357846001165f036124cd578282875f0151838151811061249657612496613cc7565b60200260200101516040516020016124b093929190613ebc565b604051602081830303815290604052805190602001209150612517565b82865f015182815181106124e3576124e3613cc7565b6020026020010151836040516020016124fe93929190613ebc565b6040516020818303038152906040528051906020012091505b600194851c940161246b565b508315611e7b5760405162461bcd60e51b815260206004820152600f60248201527f50524f4f465f544f4f5f53484f5254000000000000000000000000000000000060448201526064016102a4565b80515f19146125df5780516020808301516040516125c29392017f636f7468726561643a000000000000000000000000000000000000000000000081526009810192909252602982015260490190565b60408051601f198184030181529190528051602091820120908201525b5f9052565b5f80806125f285858361285c565b9350915061260185858561285c565b93509050600182016126b257801561265b5760405162461bcd60e51b815260206004820152601460248201527f57524f4e475f434f5448524541445f454d50545900000000000000000000000060448201526064016102a4565b6020860151156126ad5760405162461bcd60e51b815260206004820152601460248201527f57524f4e475f434f5448524541445f454d50545900000000000000000000000060448201526064016102a4565b61275e565b856020015182826040516020016126fb9291907f636f7468726561643a000000000000000000000000000000000000000000000081526009810192909252602982015260490190565b604051602081830303815290604052805190602001201461275e5760405162461bcd60e51b815260206004820152601260248201527f57524f4e475f434f5448524541445f504f50000000000000000000000000000060448201526064016102a4565b6020860152909352505050565b6101408201515f905f191461278157505f611663565b5f60408460e0015163ffffffff16901b9050602084610100015163ffffffff16901b811790506001838561012001516127ba9190613ed9565b6127c49190613ef5565b63ffffffff161761014084015250600192915050565b60408101515160a0820151515f198114806127f557505f1982145b1561280257826002611584565b61280f8360800151612d33565b60a084015152602083015161282390612dcc565b604084015152608083015161283e9082602082015260609052565b50602091820151808301919091526040805192830190526060825252565b5f818161286a868684612b90565b9097909650945050505050565b5f81815b60088110156128ca5760088367ffffffffffffffff16901b92508585838181106128a7576128a7613cc7565b919091013560f81c939093179250816128bf81613cdb565b92505060010161287b565b50935093915050565b6128db61327d565b50604080518082019091526001815267ffffffffffffffff909116602082015290565b61290661327d565b8151805161291690600190613d6f565b8151811061292657612926613cc7565b602002602001015190505f6001835f0151516129429190613d6f565b67ffffffffffffffff81111561295a5761295a613677565b60405190808252806020026020018201604052801561299357816020015b61298061327d565b8152602001906001900390816129785790505b5090505f5b81518110156129e25783518051829081106129b5576129b5613cc7565b60200260200101518282815181106129cf576129cf613cc7565b6020908102919091010152600101612998565b5090915290565b604080516020810190915260608152815f612a05868684612e58565b925090505f60ff821667ffffffffffffffff811115612a2657612a26613677565b604051908082528060200260200182016040528015612a4f578160200160208202803683370190505b5090505f5b8260ff168160ff161015612a9a57612a6d88888661285c565b838360ff1681518110612a8257612a82613cc7565b60209081029190910101919091529350600101612a54565b5060405180602001604052808281525093505050935093915050565b8151515f90612ac6906001613ca1565b67ffffffffffffffff811115612ade57612ade613677565b604051908082528060200260200182016040528015612b1757816020015b612b0461327d565b815260200190600190039081612afc5790505b5090505f5b835151811015612b67578351805182908110612b3a57612b3a613cc7565b6020026020010151828281518110612b5457612b54613cc7565b6020908102919091010152600101612b1c565b508181845f01515181518110612b7f57612b7f613cc7565b602090810291909101015290915250565b5f81815b60208110156128ca57600883901b9250858583818110612bb657612bb6613cc7565b919091013560f81c93909317925081612bce81613cdb565b925050600101612b94565b612be16131c6565b604080516060810182525f808252602082018190529181018290528391905f5f5f5f612c0e8b8b8961285c565b97509550612c1d8b8b89612e8d565b97509450612c2c8b8b8961285c565b97509350612c3b8b8b8961285c565b97509250612c4a8b8b8961285c565b97509150612c598b8b89612c9a565b6040805160c081018252988952602089019790975295870194909452506060850191909152608084015263ffffffff1660a083015290969095509350505050565b5f81815b60048110156128ca5760088363ffffffff16901b9250858583818110612cc657612cc6613cc7565b919091013560f81c93909317925081612cde81613cdb565b925050600101612c9e565b5f611e7b8484612cf885612f07565b6040518060400160405280601381526020017f4d6f64756c65206d65726b6c6520747265653a00000000000000000000000000815250612468565b60208101515f5b825151811015612dc657612d69835f01518281518110612d5c57612d5c613cc7565b6020026020010151612faf565b6040517f537461636b206672616d6520737461636b3a0000000000000000000000000000602082015260328101919091526052810183905260720160408051601f1981840301815291905280516020909101209150600101612d3a565b50919050565b6020810151815151515f5b81811015612e51578351612df490612def9083613046565b613072565b6040517f56616c756520737461636b3a00000000000000000000000000000000000000006020820152602c810191909152604c8101849052606c0160408051601f1981840301815291905280516020909101209250600101612dd7565b5050919050565b5f81848482818110612e6c57612e6c613cc7565b919091013560f81c9250819050612e8281613cdb565b915050935093915050565b604080516060810182525f8082526020820181905291810191909152815f8080612eb8888886612877565b94509250612ec7888886612877565b94509150612ed688888661285c565b6040805160608101825267ffffffffffffffff96871681529490951660208501529383015250969095509350505050565b5f815f0151612f19836020015161308d565b6040808501516060860151608087015160a088015193516113c2969594906020017f4d6f64756c653a0000000000000000000000000000000000000000000000000081526007810196909652602786019490945260478501929092526067840152608783015260e01b7fffffffff000000000000000000000000000000000000000000000000000000001660a782015260ab0190565b5f612fbc825f0151613072565b602080840151604080860151606087015191517f537461636b206672616d653a000000000000000000000000000000000000000094810194909452602c840194909452604c8301919091527fffffffff0000000000000000000000000000000000000000000000000000000060e093841b8116606c840152921b90911660708201526074016113c2565b61304e61327d565b825180518390811061306257613062613cc7565b6020026020010151905092915050565b5f815f015182602001516040516020016113c2929190613f11565b805160208083015160408085015190517f4d656d6f72793a00000000000000000000000000000000000000000000000000938101939093527fffffffffffffffff00000000000000000000000000000000000000000000000060c094851b811660278501529190931b16602f82015260378101919091525f906057016113c2565b604080516101808101909152805f8152602001613129613296565b815260200161314960405180604001604052805f81526020015f81525090565b8152602001613156613296565b81526020016131776040518060400160405280606081526020015f81525090565b815260200161319760405180604001604052805f81526020015f81525090565b81525f6020820181905260408201819052606082018190526080820181905260a0820181905260c09091015290565b6040518060c001604052805f815260200161320c60405180606001604052805f67ffffffffffffffff1681526020015f67ffffffffffffffff1681526020015f81525090565b81526020015f81526020015f81526020015f81526020015f63ffffffff1681525090565b613238613f5c565b565b604051806040016040528061324d61325f565b815260200161325a61325f565b905290565b60405180604001604052806002906020820280368337509192915050565b60408051808201909152805f5b81526020015f81525090565b604080516060808201835291810191825290819061328a565b5f60408284031215612dc6575f5ffd5b5f5f83601f8401126132cf575f5ffd5b50813567ffffffffffffffff8111156132e6575f5ffd5b6020830191508360208285010111156132fd575f5ffd5b9250929050565b5f5f5f5f5f5f8688036101e081121561331b575f5ffd5b6060811215613328575f5ffd5b879650606088013567ffffffffffffffff811115613344575f5ffd5b88016101c0818b031215613356575f5ffd5b95506101007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8082011215613388575f5ffd5b5060808701935061339d8861018089016132af565b92506101c087013567ffffffffffffffff8111156133b9575f5ffd5b6133c589828a016132bf565b979a9699509497509295939492505050565b634e487b7160e01b5f52602160045260245ffd5b600381106133fb576133fb6133d7565b9052565b805160078110613411576134116133d7565b8252602090810151910152565b80516040808452905160209184018290528051606085018190525f9290910190829060808601905b80831015613470576134598285516133ff565b604082019150602084019350600183019250613446565b506020850151602087015280935050505092915050565b8051604080845281519084018190525f9160200190829060608601905b808310156134705783516134b98382516133ff565b6020810151604084015263ffffffff604082015116606084015263ffffffff60608201511660808401525060a0820191506020840193506001830192506134a4565b610120815261350f610120820184516133eb565b5f60208401516101c061014084015261352c6102e084018261341e565b6040860151805161016086015260200151610180850152606086015184820361011f19016101a0860152909150613563828261341e565b915050608085015161011f19848303016101c08501526135838282613487565b91505060a08501516135a36101e085018280518252602090810151910152565b5060c085015161022084015260e085015163ffffffff81166102408501525061010085015163ffffffff81166102608501525061012085015163ffffffff8116610280850152506101408501516102a08401526101608501516102c0840152905061190f602083018480518252602081015167ffffffffffffffff815116602084015267ffffffffffffffff6020820151166040840152604081015160608401525060408101516080830152606081015160a0830152608081015160c083015263ffffffff60a08201511660e08301525050565b634e487b7160e01b5f52604160045260245ffd5b6040805190810167ffffffffffffffff811182821017156136ae576136ae613677565b60405290565b6040516020810167ffffffffffffffff811182821017156136ae576136ae613677565b6040516080810167ffffffffffffffff811182821017156136ae576136ae613677565b604051610180810167ffffffffffffffff811182821017156136ae576136ae613677565b60405160c0810167ffffffffffffffff811182821017156136ae576136ae613677565b6040516060810167ffffffffffffffff811182821017156136ae576136ae613677565b604051601f8201601f1916810167ffffffffffffffff8111828210171561378d5761378d613677565b604052919050565b8035600381106137a3575f5ffd5b919050565b5f67ffffffffffffffff8211156137c1576137c1613677565b5060051b60200190565b5f604082840312156137db575f5ffd5b6137e361368b565b90508135600781106137f3575f5ffd5b808252506020820135602082015292915050565b5f60408284031215613817575f5ffd5b61381f61368b565b9050813567ffffffffffffffff811115613837575f5ffd5b820160208185031215613848575f5ffd5b6138506136b4565b813567ffffffffffffffff811115613866575f5ffd5b80830192505084601f83011261387a575f5ffd5b813561388d613888826137a8565b613764565b8082825260208201915060208360061b8601019250878311156138ae575f5ffd5b6020850194505b828510156138da576138c788866137cb565b82526020820191506040850194506138b5565b8352505082525060209182013591810191909152919050565b5f60408284031215613903575f5ffd5b61390b61368b565b823581526020928301359281019290925250919050565b803563ffffffff811681146137a3575f5ffd5b5f60408284031215613945575f5ffd5b61394d61368b565b9050813567ffffffffffffffff811115613965575f5ffd5b8201601f81018413613975575f5ffd5b8035613983613888826137a8565b80828252602082019150602060a084028501019250868311156139a4575f5ffd5b6020840193505b82841015613a165760a084880312156139c2575f5ffd5b6139ca6136d7565b6139d488866137cb565b8152604085013560208201526139ec60608601613922565b60408201526139fd60808601613922565b6060820152825260a093909301926020909101906139ab565b845250505060209182013591810191909152919050565b5f6101c08236031215613a3e575f5ffd5b613a466136fa565b613a4f83613795565b8152602083013567ffffffffffffffff811115613a6a575f5ffd5b613a7636828601613807565b602083015250613a8936604085016138f3565b6040820152608083013567ffffffffffffffff811115613aa7575f5ffd5b613ab336828601613807565b60608301525060a083013567ffffffffffffffff811115613ad2575f5ffd5b613ade36828601613935565b608083015250613af13660c085016138f3565b60a082015261010083013560c0820152613b0e6101208401613922565b60e0820152613b206101408401613922565b610100820152613b336101608401613922565b6101208201526101808301356101408201526101a0909201356101608301525090565b803567ffffffffffffffff811681146137a3575f5ffd5b5f81830361010081128015613b80575f5ffd5b50613b8961371e565b833581526060601f1983011215613b9e575f5ffd5b613ba6613741565b9150613bb460208501613b56565b8252613bc260408501613b56565b602083810191909152606085810135604080860191909152918301939093526080808601359183019190915260a08501359282019290925260c0840135918101829052613c1160e08501613922565b60a0820152949350505050565b5f60208284031215613c2e575f5ffd5b813561ffff8116811461190f575f5ffd5b5f5f85851115613c4d575f5ffd5b83861115613c59575f5ffd5b5050820193919092039150565b634e487b7160e01b5f52601260045260245ffd5b5f82613c8857613c88613c66565b500690565b634e487b7160e01b5f52601160045260245ffd5b8082018082111561166357611663613c8d565b5f82613cc257613cc2613c66565b500490565b634e487b7160e01b5f52603260045260245ffd5b5f60018201613cec57613cec613c8d565b5060010190565b818382375f9101908152919050565b5f60208284031215613d12575f5ffd5b5051919050565b80356020831015611663575f19602084900360031b1b1692915050565b5f5f60408385031215613d47575f5ffd5b505080516020909101519092909150565b808202811582820484141761166357611663613c8d565b8181038181111561166357611663613c8d565b5f63ffffffff821663ffffffff8103613d9d57613d9d613c8d565b60010192915050565b5f60ff821660ff8103613d9d57613d9d613c8d565b5f81518060208401855e5f93019283525090919050565b5f61190f8284613dbb565b80516020808301519190811015612dc6575f1960209190910360031b1b16919050565b5f60208284031215613e10575f5ffd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461190f575f5ffd5b67ffffffffffffffff828116828216039081111561166357611663613c8d565b7fff00000000000000000000000000000000000000000000000000000000000000861681527fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008560601b1660018201528284601583013760159201918201526035019392505050565b5f613ec78286613dbb565b93845250506020820152604001919050565b63ffffffff818116838216019081111561166357611663613c8d565b63ffffffff828116828216039081111561166357611663613c8d565b7f56616c75653a000000000000000000000000000000000000000000000000000081525f60078410613f4557613f456133d7565b5060f89290921b6006830152600782015260270190565b634e487b7160e01b5f52605160045260245ffdfea2646970667358221220ee0f93a2e43cb3d641ba9c60813c64ea4317fb449ccc306db70d01e3938232ac64736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0)W_5`\xE0\x1C\x80c\xA9,\xB5\x01\x14a\0-W[__\xFD[a\0@a\0;6`\x04a3\x04V[a\0WV[`@Qa\0N\x92\x91\x90a4\xFBV[`@Q\x80\x91\x03\x90\xF3[a\0_a1\x0EV[a\0ga1\xC6V[a\0p\x87a:-V[\x91Pa\0\x816\x87\x90\x03\x87\x01\x87a;mV[\x90P_a\0\x91` \x87\x01\x87a<\x1EV[\x90Pa20a\x80\x10a\xFF\xFF\x83\x16\x10\x80\x15\x90a\0\xB2WPa\x80\x13a\xFF\xFF\x83\x16\x11\x15[\x15a\0\xC0WPa\x02\xCCa\x02\xADV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xE0a\xFF\xFF\x83\x16\x01a\0\xF4WPa\x04Ya\x02\xADV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xDFa\xFF\xFF\x83\x16\x01a\x01(WPa\x0C*a\x02\xADV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xDEa\xFF\xFF\x83\x16\x01a\x01\\WPa\x0Fpa\x02\xADV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xDDa\xFF\xFF\x83\x16\x01a\x01\x90WPa\x0F|a\x02\xADV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xDCa\xFF\xFF\x83\x16\x01a\x01\xC4WPa\x10\xA4a\x02\xADV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xD0a\xFF\xFF\x83\x16\x01a\x01\xF8WPa\x11Sa\x02\xADV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xCFa\xFF\xFF\x83\x16\x01a\x02,WPa\x11\x99a\x02\xADV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xCEa\xFF\xFF\x83\x16\x01a\x02`WPa\x11\xEDa\x02\xADV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x15`$\x82\x01R\x7FINVALID_MEMORY_OPCODE\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01[`@Q\x80\x91\x03\x90\xFD[a\x02\xBF\x8A\x85\x85\x8A\x8A\x8A\x87c\xFF\xFF\xFF\xFF\x16V[PP\x96P\x96\x94PPPPPV[_a\x02\xDA` \x85\x01\x85a<\x1EV[\x90Pa\x02\xE4a2:V[_a\x02\xF0\x85\x85\x83a\x12]V[`\xC0\x8A\x01Q\x91\x93P\x91Pa\x03\x03\x83a\x137V[\x14a\x03PW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x10`$\x82\x01R\x7FBAD_GLOBAL_STATE\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[a\xFF\xFF\x83\x16a\x80\x10\x14\x80a\x03iWPa\xFF\xFF\x83\x16a\x80\x11\x14[\x15a\x03\x8BWa\x03\x86\x88\x88\x84\x89a\x03\x81\x89\x87\x81\x8Da<?V[a\x13\xDFV[a\x04=V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xEEa\xFF\xFF\x84\x16\x01a\x03\xC0Wa\x03\x86\x88\x83a\x15_V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xEDa\xFF\xFF\x84\x16\x01a\x03\xF5Wa\x03\x86\x88\x83a\x15\xDBV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1A`$\x82\x01R\x7FINVALID_GLOBALSTATE_OPCODE\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[a\x04F\x82a\x137V[`\xC0\x90\x98\x01\x97\x90\x97RPPPPPPPPV[_a\x04oa\x04j\x87` \x01Qa\x16PV[a\x16iV[c\xFF\xFF\xFF\xFF\x16\x90P_a\x04\x88a\x04j\x88` \x01Qa\x16PV[c\xFF\xFF\xFF\xFF\x16\x90Pa\x04\x9B` \x83a<zV[\x15\x15\x80a\x04\xC2WP` \x80\x87\x01QQg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90a\x04\xC0\x90\x83\x90a<\xA1V[\x11[\x80a\x04\xD6WPa\x04\xD3` \x82a<zV[\x15\x15[\x15a\x04\xFDW\x86`\x02[\x90\x81`\x02\x81\x11\x15a\x04\xF2Wa\x04\xF2a3\xD7V[\x81RPPPPa\x0C\"V[_a\x05\t` \x83a<\xB4V[`@\x80Q` \x81\x01\x90\x91R``\x81R\x90\x91P_\x90\x81\x90` \x8A\x01Qa\x051\x90\x85\x8A\x8A\x87a\x17%V[\x90\x94P\x90\x92P\x90P``_\x89\x89\x86\x81\x81\x10a\x05NWa\x05Na<\xC7V[\x91\x90\x91\x015`\xF8\x1C\x91P\x85\x90Pa\x05d\x81a<\xDBV[\x95PP\x8A` \x015_\x03a\x06\xA0W\x80`\xFF\x16_\x03a\x06XW6_a\x05\x8A\x8B\x88\x81\x8Fa<?V[\x91P\x91P\x85\x82\x82`@Qa\x05\x9F\x92\x91\x90a<\xF3V[`@Q\x80\x91\x03\x90 \x14a\x05\xF4W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0C`$\x82\x01R\x7FBAD_PREIMAGE\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[_a\x06\0\x8B` a<\xA1V[\x90P\x81\x81\x11\x15a\x06\rWP\x80[a\x06\x19\x81\x8C\x84\x86a<?V[\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RP\x92\x97Pa\x0B\xB1\x95PPPPPPV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x16`$\x82\x01R\x7FUNKNOWN_PREIMAGE_PROOF\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[\x8A` \x015`\x01\x03a\x07\xADW`\xFF\x81\x16\x15a\x06\xFDW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x16`$\x82\x01R\x7FUNKNOWN_PREIMAGE_PROOF\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[6_a\x07\x0B\x8B\x88\x81\x8Fa<?V[\x91P\x91P\x85`\x02\x83\x83`@Qa\x07\"\x92\x91\x90a<\xF3V[` `@Q\x80\x83\x03\x81\x85Z\xFA\x15\x80\x15a\x07=W=__>=_\xFD[PPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x07`\x91\x90a=\x02V[\x14a\x05\xF4W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0C`$\x82\x01R\x7FBAD_PREIMAGE\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[\x8A` \x015`\x02\x03a\x0BiW`\xFF\x81\x16\x15a\x08\nW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x16`$\x82\x01R\x7FUNKNOWN_PREIMAGE_PROOF\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[6_a\x08\x18\x8B\x88\x81\x8Fa<?V[\x90\x92P\x90P\x85a\x08+` _\x84\x86a<?V[a\x084\x91a=\x19V[\x14a\x08\x81W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x14`$\x82\x01R\x7FKZG_PROOF_WRONG_HASH\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[____`\ns\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x86\x86`@Qa\x08\xAD\x92\x91\x90a<\xF3V[_`@Q\x80\x83\x03\x81\x85Z\xFA\x91PP=\x80_\x81\x14a\x08\xE5W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x08\xEAV[``\x91P[P\x91P\x91P\x81a\t<W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x11`$\x82\x01R\x7FINVALID_KZG_PROOF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[_\x81Q\x11a\t\x8CW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x16`$\x82\x01R\x7FKZG_PRECOMPILE_MISSING\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[\x80\x80` \x01\x90Q\x81\x01\x90a\t\xA0\x91\x90a=6V[\x90\x94P\x92PP\x7Fs\xED\xA7S)\x9D}H39\xD8\x08\t\xA1\xD8\x05S\xBD\xA4\x02\xFF\xFE[\xFE\xFF\xFF\xFF\xFF\0\0\0\x01\x82\x14\x90Pa\n\x17W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x13`$\x82\x01R\x7FUNKNOWN_BLS_MODULUS\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[a\n\"\x82` a=XV[\x8C\x10\x15a\x0B`W_\x80a\n6` \x8Fa<\xB4V[\x90P`\x01[\x84\x81\x10\x15a\neW`\x01\x92\x83\x1B\x92\x82\x81\x16\x90\x03a\nYW`\x01\x83\x17\x92P[`\x01\x91\x82\x1C\x91\x1Ba\n;V[P_a\nv\x85d\x01\0\0\0\0a<\xB4V[\x90Pa\n\x82\x83\x82a=XV[\x90P_a\n\xB0\x7F\x16\xA2\xA1\x9E\xDF\xE8\x1F \xD0\x9Bh\x19\"\xC8\x13\xB4\xB66\x83P\x8C\"\x80\xB98)\x97\x1FC\x9F\r+\x83\x87a\x17\xCCV[\x90P\x80a\n\xC1`@` \x8A\x8Ca<?V[a\n\xCA\x91a=\x19V[\x14a\x0B\x17W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x11`$\x82\x01R\x7FKZG_PROOF_WRONG_Z\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[a\x0B%```@\x89\x8Ba<?V[\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RP\x92\x9CPPPPPPPP[PPPPa\x0B\xB1V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x15`$\x82\x01R\x7FUNKNOWN_PREIMAGE_TYPE\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[_[\x82Q\x81\x10\x15a\x0B\xEAWa\x0B\xE0\x85\x82\x85\x84\x81Q\x81\x10a\x0B\xD3Wa\x0B\xD3a<\xC7V[\x01` \x01Q`\xF8\x1Ca\x19\x16V[\x94P`\x01\x01a\x0B\xB3V[Pa\x0B\xF6\x83\x87\x86a\x19\xA1V[` \x8D\x01Q`@\x01R\x81Qa\x0C\x19\x90a\x0C\x0E\x90a\x1A:V[` \x8F\x01Q\x90a\x1A`V[PPPPPPPP[PPPPPPV[_a\x0C;a\x04j\x87` \x01Qa\x16PV[c\xFF\xFF\xFF\xFF\x16\x90P_a\x0CTa\x04j\x88` \x01Qa\x16PV[c\xFF\xFF\xFF\xFF\x16\x90P_a\x0Cra\x0Cm\x89` \x01Qa\x16PV[a\x1ApV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P` \x86\x015\x15\x80\x15a\x0C\x91WP\x885\x81\x10\x15[\x15a\x0C\xB9W\x87`\x02[\x90\x81`\x02\x81\x11\x15a\x0C\xADWa\x0C\xADa3\xD7V[\x81RPPPPPa\x0C\"V[` \x80\x88\x01QQg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90a\x0C\xD6\x90\x84\x90a<\xA1V[\x11\x80a\x0C\xEBWPa\x0C\xE8` \x83a<zV[\x15\x15[\x15a\x0C\xF8W\x87`\x02a\x0C\x9AV[_a\r\x04` \x84a<\xB4V[`@\x80Q` \x81\x01\x90\x91R``\x81R\x90\x91P_\x90\x81\x90` \x8B\x01Qa\r,\x90\x85\x8B\x8B\x87a\x17%V[\x90\x94P\x90\x92P\x90P\x88\x88\x84\x81\x81\x10a\rFWa\rFa<\xC7V[\x90\x91\x015\x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x15\x90Pa\r\xBBW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x13`$\x82\x01R\x7FUNKNOWN_INBOX_PROOF\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[\x82a\r\xC5\x81a<\xDBV[\x93Pa20\x90P_` \x8C\x015a\r\xE0Wa\x1B1\x91Pa\x0E\x1FV[`\x01\x8C` \x015\x03a\r\xF6Wa\x1E\x83\x91Pa\x0E\x1FV[\x8D`\x02[\x90\x81`\x02\x81\x11\x15a\x0E\rWa\x0E\ra3\xD7V[\x81RPPPPPPPPPPPa\x0C\"V[a\x0E?\x8F\x88\x8D\x8D\x89\x90\x80\x92a\x0E6\x93\x92\x91\x90a<?V[\x86c\xFF\xFF\xFF\xFF\x16V[\x90P\x80a\x0ENW\x8D`\x02a\r\xFAV[PP\x82\x88\x10\x15a\x0E\xA0W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x11`$\x82\x01R\x7FBAD_MESSAGE_PROOF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[_a\x0E\xAB\x84\x8Aa=oV[\x90P_[` \x81c\xFF\xFF\xFF\xFF\x16\x10\x80\x15a\x0E\xD3WP\x81a\x0E\xD1c\xFF\xFF\xFF\xFF\x83\x16\x8Ba<\xA1V[\x10[\x15a\x0F,Wa\x0F\x18\x84c\xFF\xFF\xFF\xFF\x83\x16\x8D\x8D\x82a\x0E\xF0\x8F\x8Ca<\xA1V[a\x0E\xFA\x91\x90a<\xA1V[\x81\x81\x10a\x0F\tWa\x0F\ta<\xC7V[\x91\x90\x91\x015`\xF8\x1C\x90Pa\x19\x16V[\x93P\x80a\x0F$\x81a=\x82V[\x91PPa\x0E\xAFV[a\x0F7\x83\x87\x86a\x19\xA1V[` \x8E\x01Q`@\x01Ra\x0F_a\x0FL\x82a\x1A:V[\x8F` \x01Qa\x1A`\x90\x91\x90c\xFF\xFF\xFF\xFF\x16V[PPPPPPPPPPPPPPPV[PP`\x01\x90\x92RPPPV[_`@Q\x80`@\x01`@R\x80`\x13\x81R` \x01\x7FModule merkle tree:\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x90P_\x86a\x01`\x01Q\x90P_a\x0F\xCFa\x04j\x89` \x01Qa\x16PV[c\xFF\xFF\xFF\xFF\x16\x90Pa\x0F\xEE\x81\x88` \x01Qa!`\x90\x91\x90c\xFF\xFF\xFF\xFF\x16V[a\x0F\xFAW\x87`\x02a\x0C\x9AV[_\x80a\x10\x18a\x10\n` \x85a<\xB4V[` \x8B\x01Q\x90\x89\x89_a\x17%V[P\x91P\x91P__a\x10+\x8C\x84\x8B\x8Ba!\x95V[\x92PP\x91P_a\x10F\x83`\x01a\x10A\x91\x90a<\xA1V[a#\xA0V[\x90P\x80\x15a\x10pWa\x10e\x87a\x10]\x85`\x01a<\xA1V[\x87_\x8Ca#\xBFV[a\x01`\x8E\x01Ra\x10\x8EV[a\x10\x87a\x10~\x84`\x01a<\xA1V[\x83\x90\x87\x8Ba$hV[a\x01`\x8E\x01R[a\x0C\x19a\x0C\x0Ea\x10\x9F\x85`\x01a<\xA1V[a\x1A:V[`@\x80Q\x80\x82\x01\x90\x91R`\x13\x81R\x7FModule merkle tree:\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R_\x80a\x10\xE6\x88\x82\x87\x87a!\x95V[P\x91P\x91P_a\x10\xF5\x83a#\xA0V[\x90P\x80\x15a\x114W\x81Q\x80Qa\x11\r\x90`\x01\x90a=oV[\x81Q\x81\x10a\x11\x1DWa\x11\x1Da<\xC7V[` \x02` \x01\x01Q\x89a\x01`\x01\x81\x81RPPa\x11GV[a\x11@\x82\x84_\x87a$hV[a\x01`\x8A\x01R[PPPPPPPPPPV[a\x01@\x85\x01Q_\x19\x14a\x11\x7FW\x84`\x02[\x90\x81`\x02\x81\x11\x15a\x11wWa\x11wa3\xD7V[\x90RPa\x0C\"V[a\x11\x8C\x85`\xA0\x01Qa%rV[a\x0C\"\x85`@\x01Qa%rV[a\x01@\x85\x01Q_\x19\x14a\x11\xAEW\x84`\x02a\x11dV[`\xA0\x85\x01QQ`\x01\x01a\x11\xC3W\x84`\x02a\x11dV[a\x11\xD2\x85`@\x01Q\x83\x83a%\xE4V[`\xA0\x85\x01Qa\x0C\"\x90a\x11\xE8\x83`@\x81\x87a<?V[a%\xE4V[`\xA0\x85\x01QQ`\x01\x01a\x12\x02W\x84`\x02a\x11dV[\x82` \x015_\x03a\x12/Wa\x01@\x85\x01Q`\x01\x01a\x12\"W\x84`\x02a\x11dV[_\x19a\x01@\x86\x01Ra\x12TV[a\x01@\x85\x01Q_\x19\x14a\x12DW\x84`\x02a\x11dV[a\x12R\x85` \x85\x015a'kV[P[a\x0C\"\x85a'\xDAV[a\x12ea2:V[\x81a\x12na2_V[a\x12va2_V[_[`\x02`\xFF\x82\x16\x10\x15a\x12\xC0Wa\x12\x8F\x88\x88\x86a(\\V[\x84\x83`\xFF\x16`\x02\x81\x10a\x12\xA4Wa\x12\xA4a<\xC7V[` \x02\x01\x91\x90\x91R\x93P\x80a\x12\xB8\x81a=\xA6V[\x91PPa\x12xV[P_[`\x02`\xFF\x82\x16\x10\x15a\x13\x1AWa\x12\xDA\x88\x88\x86a(wV[\x83\x83`\xFF\x16`\x02\x81\x10a\x12\xEFWa\x12\xEFa<\xC7V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x93\x16` \x93\x90\x93\x02\x01\x91\x90\x91R\x93P\x80a\x13\x12\x81a=\xA6V[\x91PPa\x12\xC3V[P`@\x80Q\x80\x82\x01\x90\x91R\x91\x82R` \x82\x01R\x95\x90\x94P\x92PPPV[\x80Q\x80Q` \x91\x82\x01Q\x82\x84\x01Q\x80Q\x90\x84\x01Q`@Q\x7FGlobal state:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x95\x81\x01\x95\x90\x95R`-\x85\x01\x93\x90\x93R`M\x84\x01\x91\x90\x91R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xC0\x91\x82\x1B\x81\x16`m\x85\x01R\x91\x90\x1B\x16`u\x82\x01R_\x90`}\x01[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P\x91\x90PV[_a\x13\xF0a\x04j\x88` \x01Qa\x16PV[c\xFF\xFF\xFF\xFF\x16\x90P_a\x14\ta\x04j\x89` \x01Qa\x16PV[\x90P`\x02c\xFF\xFF\xFF\xFF\x82\x16\x10a\x14!W\x87`\x02a\x04\xDFV[` \x87\x01Qa\x140\x90\x83a!`V[a\x14<W\x87`\x02a\x04\xDFV[_a\x14H` \x84a<\xB4V[`@\x80Q` \x81\x01\x90\x91R``\x81R\x90\x91P_\x90\x81\x90` \x8B\x01Qa\x14p\x90\x85\x8A\x8A\x87a\x17%V[\x90\x94P\x90\x92P\x90Pa\x80\x10a\x14\x88` \x8B\x01\x8Ba<\x1EV[a\xFF\xFF\x16\x03a\x14\xCBWa\x14\xBD\x84\x8B_\x01Q\x87c\xFF\xFF\xFF\xFF\x16`\x02\x81\x10a\x14\xB0Wa\x14\xB0a<\xC7V[` \x02\x01Q\x83\x91\x90a\x19\xA1V[` \x8C\x01Q`@\x01Ra\x15QV[a\x80\x11a\x14\xDB` \x8B\x01\x8Ba<\x1EV[a\xFF\xFF\x16\x03a\x15\tW\x89Q\x82\x90c\xFF\xFF\xFF\xFF\x87\x16`\x02\x81\x10a\x14\xFFWa\x14\xFFa<\xC7V[` \x02\x01Ra\x15QV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x17`$\x82\x01R\x7FBAD_GLOBAL_STATE_OPCODE\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[PPPPPPPPPPPPV[_a\x15pa\x04j\x84` \x01Qa\x16PV[\x90P`\x02c\xFF\xFF\xFF\xFF\x82\x16\x10a\x15\x9FW\x82`\x02[\x90\x81`\x02\x81\x11\x15a\x15\x97Wa\x15\x97a3\xD7V[\x90RPPPPV[a\x15\xD6a\x15\xCB\x83` \x01Q\x83c\xFF\xFF\xFF\xFF\x16`\x02\x81\x10a\x15\xC1Wa\x15\xC1a<\xC7V[` \x02\x01Qa(\xD3V[` \x85\x01Q\x90a\x1A`V[PPPV[_a\x15\xECa\x0Cm\x84` \x01Qa\x16PV[\x90P_a\x15\xFFa\x04j\x85` \x01Qa\x16PV[\x90P`\x02c\xFF\xFF\xFF\xFF\x82\x16\x10a\x16\x19WPP`\x02\x90\x91RPV[\x81\x83` \x01Q\x82c\xFF\xFF\xFF\xFF\x16`\x02\x81\x10a\x166Wa\x166a<\xC7V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x92\x16` \x92\x90\x92\x02\x01RPPPPV[a\x16Xa2}V[\x81Qa\x16c\x90a(\xFEV[\x92\x91PPV[` \x81\x01Q_\x90\x81\x83Q`\x06\x81\x11\x15a\x16\x84Wa\x16\x84a3\xD7V[\x14a\x16\xD1W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FNOT_I32\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[d\x01\0\0\0\0\x81\x10a\x16cW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FBAD_I32\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[__a\x17=`@Q\x80` \x01`@R\x80``\x81RP\x90V[\x83\x91Pa\x17K\x86\x86\x84a(\\V[\x90\x93P\x91Pa\x17[\x86\x86\x84a)\xE9V[\x92P\x90P_a\x17k\x82\x89\x86a\x19\xA1V[\x90P\x88`@\x01Q\x81\x14a\x17\xC0W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0E`$\x82\x01R\x7FWRONG_MEM_ROOT\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[P\x95P\x95P\x95\x92PPPV[`@\x80Q` \x80\x82\x01\x81\x90R\x81\x83\x01\x81\x90R``\x82\x01R`\x80\x81\x01\x85\x90R`\xA0\x81\x01\x84\x90R`\xC0\x80\x82\x01\x84\x90R\x82Q\x80\x83\x03\x90\x91\x01\x81R`\xE0\x90\x91\x01\x91\x82\x90R_\x91\x82\x90\x81\x90`\x05\x90a\x18 \x90\x85\x90a=\xD2V[_`@Q\x80\x83\x03\x81\x85Z\xFA\x91PP=\x80_\x81\x14a\x18XW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x18]V[``\x91P[P\x91P\x91P\x81a\x18\xAFW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\r`$\x82\x01R\x7FMODEXP_FAILED\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[\x80Q` \x14a\x19\0W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x13`$\x82\x01R\x7FMODEXP_WRONG_LENGTH\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[a\x19\t\x81a=\xDDV[\x93PPPP[\x93\x92PPPV[_` \x83\x10a\x19gW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x15`$\x82\x01R\x7FBAD_SET_LEAF_BYTE_IDX\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[_\x83a\x19u`\x01` a=oV[a\x19\x7F\x91\x90a=oV[a\x19\x8A\x90`\x08a=XV[`\xFF\x84\x81\x16\x82\x1B\x91\x1B\x19\x86\x16\x17\x91PP\x93\x92PPPV[`@Q\x7FMemory leaf:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`,\x81\x01\x82\x90R_\x90\x81\x90`L\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90Pa\x1A1\x85\x85\x83`@Q\x80`@\x01`@R\x80`\x13\x81R` \x01\x7FMemory merkle tree:\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RPa$hV[\x95\x94PPPPPV[a\x1ABa2}V[P`@\x80Q\x80\x82\x01\x90\x91R_\x81Rc\xFF\xFF\xFF\xFF\x90\x91\x16` \x82\x01R\x90V[\x81Qa\x1Al\x90\x82a*\xB6V[PPV[` \x81\x01Q_\x90`\x01\x83Q`\x06\x81\x11\x15a\x1A\x8CWa\x1A\x8Ca3\xD7V[\x14a\x1A\xD9W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FNOT_I64\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[h\x01\0\0\0\0\0\0\0\0\x81\x10a\x16cW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FBAD_I64\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[_`(\x82\x10\x15a\x1B\x83W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x12`$\x82\x01R\x7FBAD_SEQINBOX_PROOF\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[_a\x1B\x90\x84\x84` a(wV[P\x80\x91PP_\x84\x84`@Qa\x1B\xA6\x92\x91\x90a<\xF3V[`@Q\x90\x81\x90\x03\x90 \x90P_\x80g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x88\x16\x15a\x1C{Wa\x1B\xD3`@\x8A\x01` \x8B\x01a>\0V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x16\xBFUya\x1B\xF9`\x01\x8Ba>3V[`@Q\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xE0\x84\x90\x1B\x16\x81Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16`\x04\x82\x01R`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x1CTW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x1Cx\x91\x90a=\x02V[\x91P[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x16\x15a\x1DCWa\x1C\x9B`@\x8A\x01` \x8B\x01a>\0V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xD5q\x9D\xC2a\x1C\xC1`\x01\x87a>3V[`@Q\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xE0\x84\x90\x1B\x16\x81Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16`\x04\x82\x01R`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x1D\x1CW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x1D@\x91\x90a=\x02V[\x90P[`@\x80Q` \x81\x01\x84\x90R\x90\x81\x01\x84\x90R``\x81\x01\x82\x90R_\x90`\x80\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P\x89` \x01` \x81\x01\x90a\x1D\x8B\x91\x90a>\0V[`@Q\x7F\x16\xBFUy\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x8B\x16`\x04\x82\x01Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91\x90\x91\x16\x90c\x16\xBFUy\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x1D\xFFW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x1E#\x91\x90a=\x02V[\x81\x14a\x1EqW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x14`$\x82\x01R\x7FBAD_SEQINBOX_MESSAGE\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[`\x01\x95PPPPPP[\x94\x93PPPPV[_`q\x82\x10\x15a\x1E\xD5W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x11`$\x82\x01R\x7FBAD_DELAYED_PROOF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x85\x16\x15a\x1F\x9EWa\x1E\xF6`@\x87\x01` \x88\x01a>\0V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xD5q\x9D\xC2a\x1F\x1C`\x01\x88a>3V[`@Q\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xE0\x84\x90\x1B\x16\x81Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16`\x04\x82\x01R`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x1FwW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x1F\x9B\x91\x90a=\x02V[\x90P[_a\x1F\xAC\x84`q\x81\x88a<?V[`@Qa\x1F\xBA\x92\x91\x90a<\xF3V[`@Q\x80\x91\x03\x90 \x90P_\x85\x85_\x81\x81\x10a\x1F\xD7Wa\x1F\xD7a<\xC7V[\x90P\x015`\xF8\x1C`\xF8\x1B\x90P_a\x1F\xF0\x87\x87`\x01a+\x90V[P\x90P_\x82\x82a \x04`q`!\x8B\x8Da<?V[\x87`@Q` \x01a \x19\x95\x94\x93\x92\x91\x90a>SV[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x82\x82R\x80Q` \x91\x82\x01 \x83\x82\x01\x89\x90R\x83\x83\x01\x81\x90R\x82Q\x80\x85\x03\x84\x01\x81R``\x90\x94\x01\x90\x92R\x82Q\x92\x01\x91\x90\x91 \x90\x91Pa i`@\x8C\x01` \x8D\x01a>\0V[`@Q\x7F\xD5q\x9D\xC2\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x8C\x16`\x04\x82\x01Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91\x90\x91\x16\x90c\xD5q\x9D\xC2\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a \xDDW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a!\x01\x91\x90a=\x02V[\x81\x14a!OW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x13`$\x82\x01R\x7FBAD_DELAYED_MESSAGE\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[P`\x01\x9A\x99PPPPPPPPPPV[\x81Q_\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a!y\x83` a<\xA1V[\x11\x15\x80\x15a\x19\x0FWPa!\x8D` \x83a<zV[\x15\x93\x92PPPV[_a!\xAC`@Q\x80` \x01`@R\x80``\x81RP\x90V[`@\x80Q` \x81\x01\x90\x91R``\x81R`@\x80Q\x80\x82\x01\x90\x91R`\x13\x81R\x7FModule merkle tree:\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01Ra\x01`\x88\x01Qa!\xFDa1\xC6V[_a\"\t\x89\x89\x8Ca+\xD9V[\x9AP\x91Pa\"\x18\x89\x89\x8Ca,\x9AV[\x9AP\x90Pa\"'\x89\x89\x8Ca)\xE9V[\x9APc\xFF\xFF\xFF\xFF\x80\x83\x16\x98P\x90\x96P_\x90a\"H\x90\x88\x90\x8A\x90\x86\x90a,\xE9\x16V[\x90P\x83\x81\x14a\"\x99W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x13`$\x82\x01R\x7FWRONG_ROOT_FOR_LEAF\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[PPP_a\"\xAD\x86`\x01a\x10A\x91\x90a<\xA1V[\x90P\x80\x15a#\x19Wa\"\xC0\x86`\x01a<\xA1V[\x85QQ`\x01\x90\x1B\x14a#\x14W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\n`$\x82\x01R\x7FWRONG_LEAF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[a#\x93V[a#$\x88\x88\x8Ba)\xE9V[\x99P\x93P_a#@a#7\x88`\x01a<\xA1V[\x86\x90_\x87a$hV[\x90P\x82\x81\x14a#\x91W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x13`$\x82\x01R\x7FWRONG_ROOT_FOR_ZERO\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[P[PPP\x94P\x94P\x94\x91PPV[_\x81\x15\x80\x15\x90a\x16cWPa#\xB6`\x01\x83a=oV[\x82\x16\x15\x92\x91PPV[_\x83\x85[`\x01\x81\x11\x15a$0W\x83\x82\x86`@Q` \x01a#\xE1\x93\x92\x91\x90a>\xBCV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x91P\x83\x85\x86`@Q` \x01a$\x0E\x93\x92\x91\x90a>\xBCV[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R\x80Q` \x90\x91\x01 \x94P`\x01\x1Ca#\xC3V[\x83\x88\x83`@Q` \x01a$E\x93\x92\x91\x90a>\xBCV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x92PPP\x95\x94PPPPPV[\x81_[\x85QQ\x81\x10\x15a%#W\x84`\x01\x16_\x03a$\xCDW\x82\x82\x87_\x01Q\x83\x81Q\x81\x10a$\x96Wa$\x96a<\xC7V[` \x02` \x01\x01Q`@Q` \x01a$\xB0\x93\x92\x91\x90a>\xBCV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x91Pa%\x17V[\x82\x86_\x01Q\x82\x81Q\x81\x10a$\xE3Wa$\xE3a<\xC7V[` \x02` \x01\x01Q\x83`@Q` \x01a$\xFE\x93\x92\x91\x90a>\xBCV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x91P[`\x01\x94\x85\x1C\x94\x01a$kV[P\x83\x15a\x1E{W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0F`$\x82\x01R\x7FPROOF_TOO_SHORT\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[\x80Q_\x19\x14a%\xDFW\x80Q` \x80\x83\x01Q`@Qa%\xC2\x93\x92\x01\x7Fcothread:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\t\x81\x01\x92\x90\x92R`)\x82\x01R`I\x01\x90V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R\x80Q` \x91\x82\x01 \x90\x82\x01R[_\x90RV[_\x80\x80a%\xF2\x85\x85\x83a(\\V[\x93P\x91Pa&\x01\x85\x85\x85a(\\V[\x93P\x90P`\x01\x82\x01a&\xB2W\x80\x15a&[W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x14`$\x82\x01R\x7FWRONG_COTHREAD_EMPTY\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[` \x86\x01Q\x15a&\xADW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x14`$\x82\x01R\x7FWRONG_COTHREAD_EMPTY\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[a'^V[\x85` \x01Q\x82\x82`@Q` \x01a&\xFB\x92\x91\x90\x7Fcothread:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\t\x81\x01\x92\x90\x92R`)\x82\x01R`I\x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x14a'^W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x12`$\x82\x01R\x7FWRONG_COTHREAD_POP\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA4V[` \x86\x01R\x90\x93RPPPV[a\x01@\x82\x01Q_\x90_\x19\x14a'\x81WP_a\x16cV[_`@\x84`\xE0\x01Qc\xFF\xFF\xFF\xFF\x16\x90\x1B\x90P` \x84a\x01\0\x01Qc\xFF\xFF\xFF\xFF\x16\x90\x1B\x81\x17\x90P`\x01\x83\x85a\x01 \x01Qa'\xBA\x91\x90a>\xD9V[a'\xC4\x91\x90a>\xF5V[c\xFF\xFF\xFF\xFF\x16\x17a\x01@\x84\x01RP`\x01\x92\x91PPV[`@\x81\x01QQ`\xA0\x82\x01QQ_\x19\x81\x14\x80a'\xF5WP_\x19\x82\x14[\x15a(\x02W\x82`\x02a\x15\x84V[a(\x0F\x83`\x80\x01Qa-3V[`\xA0\x84\x01QR` \x83\x01Qa(#\x90a-\xCCV[`@\x84\x01QR`\x80\x83\x01Qa(>\x90\x82` \x82\x01R``\x90RV[P` \x91\x82\x01Q\x80\x83\x01\x91\x90\x91R`@\x80Q\x92\x83\x01\x90R``\x82RRV[_\x81\x81a(j\x86\x86\x84a+\x90V[\x90\x97\x90\x96P\x94PPPPPV[_\x81\x81[`\x08\x81\x10\x15a(\xCAW`\x08\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x1B\x92P\x85\x85\x83\x81\x81\x10a(\xA7Wa(\xA7a<\xC7V[\x91\x90\x91\x015`\xF8\x1C\x93\x90\x93\x17\x92P\x81a(\xBF\x81a<\xDBV[\x92PP`\x01\x01a({V[P\x93P\x93\x91PPV[a(\xDBa2}V[P`@\x80Q\x80\x82\x01\x90\x91R`\x01\x81Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16` \x82\x01R\x90V[a)\x06a2}V[\x81Q\x80Qa)\x16\x90`\x01\x90a=oV[\x81Q\x81\x10a)&Wa)&a<\xC7V[` \x02` \x01\x01Q\x90P_`\x01\x83_\x01QQa)B\x91\x90a=oV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a)ZWa)Za6wV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a)\x93W\x81` \x01[a)\x80a2}V[\x81R` \x01\x90`\x01\x90\x03\x90\x81a)xW\x90P[P\x90P_[\x81Q\x81\x10\x15a)\xE2W\x83Q\x80Q\x82\x90\x81\x10a)\xB5Wa)\xB5a<\xC7V[` \x02` \x01\x01Q\x82\x82\x81Q\x81\x10a)\xCFWa)\xCFa<\xC7V[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a)\x98V[P\x90\x91R\x90V[`@\x80Q` \x81\x01\x90\x91R``\x81R\x81_a*\x05\x86\x86\x84a.XV[\x92P\x90P_`\xFF\x82\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a*&Wa*&a6wV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a*OW\x81` \x01` \x82\x02\x806\x837\x01\x90P[P\x90P_[\x82`\xFF\x16\x81`\xFF\x16\x10\x15a*\x9AWa*m\x88\x88\x86a(\\V[\x83\x83`\xFF\x16\x81Q\x81\x10a*\x82Wa*\x82a<\xC7V[` \x90\x81\x02\x91\x90\x91\x01\x01\x91\x90\x91R\x93P`\x01\x01a*TV[P`@Q\x80` \x01`@R\x80\x82\x81RP\x93PPP\x93P\x93\x91PPV[\x81QQ_\x90a*\xC6\x90`\x01a<\xA1V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a*\xDEWa*\xDEa6wV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a+\x17W\x81` \x01[a+\x04a2}V[\x81R` \x01\x90`\x01\x90\x03\x90\x81a*\xFCW\x90P[P\x90P_[\x83QQ\x81\x10\x15a+gW\x83Q\x80Q\x82\x90\x81\x10a+:Wa+:a<\xC7V[` \x02` \x01\x01Q\x82\x82\x81Q\x81\x10a+TWa+Ta<\xC7V[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a+\x1CV[P\x81\x81\x84_\x01QQ\x81Q\x81\x10a+\x7FWa+\x7Fa<\xC7V[` \x90\x81\x02\x91\x90\x91\x01\x01R\x90\x91RPV[_\x81\x81[` \x81\x10\x15a(\xCAW`\x08\x83\x90\x1B\x92P\x85\x85\x83\x81\x81\x10a+\xB6Wa+\xB6a<\xC7V[\x91\x90\x91\x015`\xF8\x1C\x93\x90\x93\x17\x92P\x81a+\xCE\x81a<\xDBV[\x92PP`\x01\x01a+\x94V[a+\xE1a1\xC6V[`@\x80Q``\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R\x83\x91\x90____a,\x0E\x8B\x8B\x89a(\\V[\x97P\x95Pa,\x1D\x8B\x8B\x89a.\x8DV[\x97P\x94Pa,,\x8B\x8B\x89a(\\V[\x97P\x93Pa,;\x8B\x8B\x89a(\\V[\x97P\x92Pa,J\x8B\x8B\x89a(\\V[\x97P\x91Pa,Y\x8B\x8B\x89a,\x9AV[`@\x80Q`\xC0\x81\x01\x82R\x98\x89R` \x89\x01\x97\x90\x97R\x95\x87\x01\x94\x90\x94RP``\x85\x01\x91\x90\x91R`\x80\x84\x01Rc\xFF\xFF\xFF\xFF\x16`\xA0\x83\x01R\x90\x96\x90\x95P\x93PPPPV[_\x81\x81[`\x04\x81\x10\x15a(\xCAW`\x08\x83c\xFF\xFF\xFF\xFF\x16\x90\x1B\x92P\x85\x85\x83\x81\x81\x10a,\xC6Wa,\xC6a<\xC7V[\x91\x90\x91\x015`\xF8\x1C\x93\x90\x93\x17\x92P\x81a,\xDE\x81a<\xDBV[\x92PP`\x01\x01a,\x9EV[_a\x1E{\x84\x84a,\xF8\x85a/\x07V[`@Q\x80`@\x01`@R\x80`\x13\x81R` \x01\x7FModule merkle tree:\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RPa$hV[` \x81\x01Q_[\x82QQ\x81\x10\x15a-\xC6Wa-i\x83_\x01Q\x82\x81Q\x81\x10a-\\Wa-\\a<\xC7V[` \x02` \x01\x01Qa/\xAFV[`@Q\x7FStack frame stack:\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`2\x81\x01\x91\x90\x91R`R\x81\x01\x83\x90R`r\x01`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R\x80Q` \x90\x91\x01 \x91P`\x01\x01a-:V[P\x91\x90PV[` \x81\x01Q\x81QQQ_[\x81\x81\x10\x15a.QW\x83Qa-\xF4\x90a-\xEF\x90\x83a0FV[a0rV[`@Q\x7FValue stack:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`,\x81\x01\x91\x90\x91R`L\x81\x01\x84\x90R`l\x01`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R\x80Q` \x90\x91\x01 \x92P`\x01\x01a-\xD7V[PP\x91\x90PV[_\x81\x84\x84\x82\x81\x81\x10a.lWa.la<\xC7V[\x91\x90\x91\x015`\xF8\x1C\x92P\x81\x90Pa.\x82\x81a<\xDBV[\x91PP\x93P\x93\x91PPV[`@\x80Q``\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x91\x90\x91R\x81_\x80\x80a.\xB8\x88\x88\x86a(wV[\x94P\x92Pa.\xC7\x88\x88\x86a(wV[\x94P\x91Pa.\xD6\x88\x88\x86a(\\V[`@\x80Q``\x81\x01\x82Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x96\x87\x16\x81R\x94\x90\x95\x16` \x85\x01R\x93\x83\x01RP\x96\x90\x95P\x93PPPPV[_\x81_\x01Qa/\x19\x83` \x01Qa0\x8DV[`@\x80\x85\x01Q``\x86\x01Q`\x80\x87\x01Q`\xA0\x88\x01Q\x93Qa\x13\xC2\x96\x95\x94\x90` \x01\x7FModule:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x07\x81\x01\x96\x90\x96R`'\x86\x01\x94\x90\x94R`G\x85\x01\x92\x90\x92R`g\x84\x01R`\x87\x83\x01R`\xE0\x1B\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16`\xA7\x82\x01R`\xAB\x01\x90V[_a/\xBC\x82_\x01Qa0rV[` \x80\x84\x01Q`@\x80\x86\x01Q``\x87\x01Q\x91Q\x7FStack frame:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x94\x81\x01\x94\x90\x94R`,\x84\x01\x94\x90\x94R`L\x83\x01\x91\x90\x91R\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xE0\x93\x84\x1B\x81\x16`l\x84\x01R\x92\x1B\x90\x91\x16`p\x82\x01R`t\x01a\x13\xC2V[a0Na2}V[\x82Q\x80Q\x83\x90\x81\x10a0bWa0ba<\xC7V[` \x02` \x01\x01Q\x90P\x92\x91PPV[_\x81_\x01Q\x82` \x01Q`@Q` \x01a\x13\xC2\x92\x91\x90a?\x11V[\x80Q` \x80\x83\x01Q`@\x80\x85\x01Q\x90Q\x7FMemory:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x93\x81\x01\x93\x90\x93R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xC0\x94\x85\x1B\x81\x16`'\x85\x01R\x91\x90\x93\x1B\x16`/\x82\x01R`7\x81\x01\x91\x90\x91R_\x90`W\x01a\x13\xC2V[`@\x80Qa\x01\x80\x81\x01\x90\x91R\x80_\x81R` \x01a1)a2\x96V[\x81R` \x01a1I`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a1Va2\x96V[\x81R` \x01a1w`@Q\x80`@\x01`@R\x80``\x81R` \x01_\x81RP\x90V[\x81R` \x01a1\x97`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R_` \x82\x01\x81\x90R`@\x82\x01\x81\x90R``\x82\x01\x81\x90R`\x80\x82\x01\x81\x90R`\xA0\x82\x01\x81\x90R`\xC0\x90\x91\x01R\x90V[`@Q\x80`\xC0\x01`@R\x80_\x81R` \x01a2\x0C`@Q\x80``\x01`@R\x80_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_\x81RP\x90V[\x81R` \x01_\x81R` \x01_\x81R` \x01_\x81R` \x01_c\xFF\xFF\xFF\xFF\x16\x81RP\x90V[a28a?\\V[V[`@Q\x80`@\x01`@R\x80a2Ma2_V[\x81R` \x01a2Za2_V[\x90R\x90V[`@Q\x80`@\x01`@R\x80`\x02\x90` \x82\x02\x806\x837P\x91\x92\x91PPV[`@\x80Q\x80\x82\x01\x90\x91R\x80_[\x81R` \x01_\x81RP\x90V[`@\x80Q``\x80\x82\x01\x83R\x91\x81\x01\x91\x82R\x90\x81\x90a2\x8AV[_`@\x82\x84\x03\x12\x15a-\xC6W__\xFD[__\x83`\x1F\x84\x01\x12a2\xCFW__\xFD[P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a2\xE6W__\xFD[` \x83\x01\x91P\x83` \x82\x85\x01\x01\x11\x15a2\xFDW__\xFD[\x92P\x92\x90PV[______\x86\x88\x03a\x01\xE0\x81\x12\x15a3\x1BW__\xFD[``\x81\x12\x15a3(W__\xFD[\x87\x96P``\x88\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a3DW__\xFD[\x88\x01a\x01\xC0\x81\x8B\x03\x12\x15a3VW__\xFD[\x95Pa\x01\0\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x01\x12\x15a3\x88W__\xFD[P`\x80\x87\x01\x93Pa3\x9D\x88a\x01\x80\x89\x01a2\xAFV[\x92Pa\x01\xC0\x87\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a3\xB9W__\xFD[a3\xC5\x89\x82\x8A\x01a2\xBFV[\x97\x9A\x96\x99P\x94\x97P\x92\x95\x93\x94\x92PPPV[cNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[`\x03\x81\x10a3\xFBWa3\xFBa3\xD7V[\x90RV[\x80Q`\x07\x81\x10a4\x11Wa4\x11a3\xD7V[\x82R` \x90\x81\x01Q\x91\x01RV[\x80Q`@\x80\x84R\x90Q` \x91\x84\x01\x82\x90R\x80Q``\x85\x01\x81\x90R_\x92\x90\x91\x01\x90\x82\x90`\x80\x86\x01\x90[\x80\x83\x10\x15a4pWa4Y\x82\x85Qa3\xFFV[`@\x82\x01\x91P` \x84\x01\x93P`\x01\x83\x01\x92Pa4FV[P` \x85\x01Q` \x87\x01R\x80\x93PPPP\x92\x91PPV[\x80Q`@\x80\x84R\x81Q\x90\x84\x01\x81\x90R_\x91` \x01\x90\x82\x90``\x86\x01\x90[\x80\x83\x10\x15a4pW\x83Qa4\xB9\x83\x82Qa3\xFFV[` \x81\x01Q`@\x84\x01Rc\xFF\xFF\xFF\xFF`@\x82\x01Q\x16``\x84\x01Rc\xFF\xFF\xFF\xFF``\x82\x01Q\x16`\x80\x84\x01RP`\xA0\x82\x01\x91P` \x84\x01\x93P`\x01\x83\x01\x92Pa4\xA4V[a\x01 \x81Ra5\x0Fa\x01 \x82\x01\x84Qa3\xEBV[_` \x84\x01Qa\x01\xC0a\x01@\x84\x01Ra5,a\x02\xE0\x84\x01\x82a4\x1EV[`@\x86\x01Q\x80Qa\x01`\x86\x01R` \x01Qa\x01\x80\x85\x01R``\x86\x01Q\x84\x82\x03a\x01\x1F\x19\x01a\x01\xA0\x86\x01R\x90\x91Pa5c\x82\x82a4\x1EV[\x91PP`\x80\x85\x01Qa\x01\x1F\x19\x84\x83\x03\x01a\x01\xC0\x85\x01Ra5\x83\x82\x82a4\x87V[\x91PP`\xA0\x85\x01Qa5\xA3a\x01\xE0\x85\x01\x82\x80Q\x82R` \x90\x81\x01Q\x91\x01RV[P`\xC0\x85\x01Qa\x02 \x84\x01R`\xE0\x85\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x02@\x85\x01RPa\x01\0\x85\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x02`\x85\x01RPa\x01 \x85\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x02\x80\x85\x01RPa\x01@\x85\x01Qa\x02\xA0\x84\x01Ra\x01`\x85\x01Qa\x02\xC0\x84\x01R\x90Pa\x19\x0F` \x83\x01\x84\x80Q\x82R` \x81\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81Q\x16` \x84\x01Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF` \x82\x01Q\x16`@\x84\x01R`@\x81\x01Q``\x84\x01RP`@\x81\x01Q`\x80\x83\x01R``\x81\x01Q`\xA0\x83\x01R`\x80\x81\x01Q`\xC0\x83\x01Rc\xFF\xFF\xFF\xFF`\xA0\x82\x01Q\x16`\xE0\x83\x01RPPV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@\x80Q\x90\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a6\xAEWa6\xAEa6wV[`@R\x90V[`@Q` \x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a6\xAEWa6\xAEa6wV[`@Q`\x80\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a6\xAEWa6\xAEa6wV[`@Qa\x01\x80\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a6\xAEWa6\xAEa6wV[`@Q`\xC0\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a6\xAEWa6\xAEa6wV[`@Q``\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a6\xAEWa6\xAEa6wV[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a7\x8DWa7\x8Da6wV[`@R\x91\x90PV[\x805`\x03\x81\x10a7\xA3W__\xFD[\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a7\xC1Wa7\xC1a6wV[P`\x05\x1B` \x01\x90V[_`@\x82\x84\x03\x12\x15a7\xDBW__\xFD[a7\xE3a6\x8BV[\x90P\x815`\x07\x81\x10a7\xF3W__\xFD[\x80\x82RP` \x82\x015` \x82\x01R\x92\x91PPV[_`@\x82\x84\x03\x12\x15a8\x17W__\xFD[a8\x1Fa6\x8BV[\x90P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a87W__\xFD[\x82\x01` \x81\x85\x03\x12\x15a8HW__\xFD[a8Pa6\xB4V[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a8fW__\xFD[\x80\x83\x01\x92PP\x84`\x1F\x83\x01\x12a8zW__\xFD[\x815a8\x8Da8\x88\x82a7\xA8V[a7dV[\x80\x82\x82R` \x82\x01\x91P` \x83`\x06\x1B\x86\x01\x01\x92P\x87\x83\x11\x15a8\xAEW__\xFD[` \x85\x01\x94P[\x82\x85\x10\x15a8\xDAWa8\xC7\x88\x86a7\xCBV[\x82R` \x82\x01\x91P`@\x85\x01\x94Pa8\xB5V[\x83RPP\x82RP` \x91\x82\x015\x91\x81\x01\x91\x90\x91R\x91\x90PV[_`@\x82\x84\x03\x12\x15a9\x03W__\xFD[a9\x0Ba6\x8BV[\x825\x81R` \x92\x83\x015\x92\x81\x01\x92\x90\x92RP\x91\x90PV[\x805c\xFF\xFF\xFF\xFF\x81\x16\x81\x14a7\xA3W__\xFD[_`@\x82\x84\x03\x12\x15a9EW__\xFD[a9Ma6\x8BV[\x90P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a9eW__\xFD[\x82\x01`\x1F\x81\x01\x84\x13a9uW__\xFD[\x805a9\x83a8\x88\x82a7\xA8V[\x80\x82\x82R` \x82\x01\x91P` `\xA0\x84\x02\x85\x01\x01\x92P\x86\x83\x11\x15a9\xA4W__\xFD[` \x84\x01\x93P[\x82\x84\x10\x15a:\x16W`\xA0\x84\x88\x03\x12\x15a9\xC2W__\xFD[a9\xCAa6\xD7V[a9\xD4\x88\x86a7\xCBV[\x81R`@\x85\x015` \x82\x01Ra9\xEC``\x86\x01a9\"V[`@\x82\x01Ra9\xFD`\x80\x86\x01a9\"V[``\x82\x01R\x82R`\xA0\x93\x90\x93\x01\x92` \x90\x91\x01\x90a9\xABV[\x84RPPP` \x91\x82\x015\x91\x81\x01\x91\x90\x91R\x91\x90PV[_a\x01\xC0\x826\x03\x12\x15a:>W__\xFD[a:Fa6\xFAV[a:O\x83a7\x95V[\x81R` \x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a:jW__\xFD[a:v6\x82\x86\x01a8\x07V[` \x83\x01RPa:\x896`@\x85\x01a8\xF3V[`@\x82\x01R`\x80\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a:\xA7W__\xFD[a:\xB36\x82\x86\x01a8\x07V[``\x83\x01RP`\xA0\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a:\xD2W__\xFD[a:\xDE6\x82\x86\x01a95V[`\x80\x83\x01RPa:\xF16`\xC0\x85\x01a8\xF3V[`\xA0\x82\x01Ra\x01\0\x83\x015`\xC0\x82\x01Ra;\x0Ea\x01 \x84\x01a9\"V[`\xE0\x82\x01Ra; a\x01@\x84\x01a9\"V[a\x01\0\x82\x01Ra;3a\x01`\x84\x01a9\"V[a\x01 \x82\x01Ra\x01\x80\x83\x015a\x01@\x82\x01Ra\x01\xA0\x90\x92\x015a\x01`\x83\x01RP\x90V[\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a7\xA3W__\xFD[_\x81\x83\x03a\x01\0\x81\x12\x80\x15a;\x80W__\xFD[Pa;\x89a7\x1EV[\x835\x81R```\x1F\x19\x83\x01\x12\x15a;\x9EW__\xFD[a;\xA6a7AV[\x91Pa;\xB4` \x85\x01a;VV[\x82Ra;\xC2`@\x85\x01a;VV[` \x83\x81\x01\x91\x90\x91R``\x85\x81\x015`@\x80\x86\x01\x91\x90\x91R\x91\x83\x01\x93\x90\x93R`\x80\x80\x86\x015\x91\x83\x01\x91\x90\x91R`\xA0\x85\x015\x92\x82\x01\x92\x90\x92R`\xC0\x84\x015\x91\x81\x01\x82\x90Ra<\x11`\xE0\x85\x01a9\"V[`\xA0\x82\x01R\x94\x93PPPPV[_` \x82\x84\x03\x12\x15a<.W__\xFD[\x815a\xFF\xFF\x81\x16\x81\x14a\x19\x0FW__\xFD[__\x85\x85\x11\x15a<MW__\xFD[\x83\x86\x11\x15a<YW__\xFD[PP\x82\x01\x93\x91\x90\x92\x03\x91PV[cNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[_\x82a<\x88Wa<\x88a<fV[P\x06\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[\x80\x82\x01\x80\x82\x11\x15a\x16cWa\x16ca<\x8DV[_\x82a<\xC2Wa<\xC2a<fV[P\x04\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_`\x01\x82\x01a<\xECWa<\xECa<\x8DV[P`\x01\x01\x90V[\x81\x83\x827_\x91\x01\x90\x81R\x91\x90PV[_` \x82\x84\x03\x12\x15a=\x12W__\xFD[PQ\x91\x90PV[\x805` \x83\x10\x15a\x16cW_\x19` \x84\x90\x03`\x03\x1B\x1B\x16\x92\x91PPV[__`@\x83\x85\x03\x12\x15a=GW__\xFD[PP\x80Q` \x90\x91\x01Q\x90\x92\x90\x91PV[\x80\x82\x02\x81\x15\x82\x82\x04\x84\x14\x17a\x16cWa\x16ca<\x8DV[\x81\x81\x03\x81\x81\x11\x15a\x16cWa\x16ca<\x8DV[_c\xFF\xFF\xFF\xFF\x82\x16c\xFF\xFF\xFF\xFF\x81\x03a=\x9DWa=\x9Da<\x8DV[`\x01\x01\x92\x91PPV[_`\xFF\x82\x16`\xFF\x81\x03a=\x9DWa=\x9Da<\x8DV[_\x81Q\x80` \x84\x01\x85^_\x93\x01\x92\x83RP\x90\x91\x90PV[_a\x19\x0F\x82\x84a=\xBBV[\x80Q` \x80\x83\x01Q\x91\x90\x81\x10\x15a-\xC6W_\x19` \x91\x90\x91\x03`\x03\x1B\x1B\x16\x91\x90PV[_` \x82\x84\x03\x12\x15a>\x10W__\xFD[\x815s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x19\x0FW__\xFD[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x81\x16\x82\x82\x16\x03\x90\x81\x11\x15a\x16cWa\x16ca<\x8DV[\x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x86\x16\x81R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\x85``\x1B\x16`\x01\x82\x01R\x82\x84`\x15\x83\x017`\x15\x92\x01\x91\x82\x01R`5\x01\x93\x92PPPV[_a>\xC7\x82\x86a=\xBBV[\x93\x84RPP` \x82\x01R`@\x01\x91\x90PV[c\xFF\xFF\xFF\xFF\x81\x81\x16\x83\x82\x16\x01\x90\x81\x11\x15a\x16cWa\x16ca<\x8DV[c\xFF\xFF\xFF\xFF\x82\x81\x16\x82\x82\x16\x03\x90\x81\x11\x15a\x16cWa\x16ca<\x8DV[\x7FValue:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R_`\x07\x84\x10a?EWa?Ea3\xD7V[P`\xF8\x92\x90\x92\x1B`\x06\x83\x01R`\x07\x82\x01R`'\x01\x90V[cNH{q`\xE0\x1B_R`Q`\x04R`$_\xFD\xFE\xA2dipfsX\"\x12 \xEE\x0F\x93\xA2\xE4<\xB3\xD6A\xBA\x9C`\x81<d\xEAC\x17\xFBD\x9C\xCC0m\xB7\r\x01\xE3\x93\x822\xACdsolcC\0\x08\x1C\x003",
    );
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MachineStatus(u8);
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<MachineStatus> for u8 {
            #[inline]
            fn stv_to_tokens(
                &self,
            ) -> <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'_> {
                alloy_sol_types::private::SolTypeValue::<
                    alloy::sol_types::sol_data::Uint<8>,
                >::stv_to_tokens(self)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::tokenize(self)
                    .0
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(self, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encoded_size(self)
            }
        }
        #[automatically_derived]
        impl MachineStatus {
            /// The Solidity type name.
            pub const NAME: &'static str = stringify!(@ name);
            /// Convert from the underlying value type.
            #[inline]
            pub const fn from(value: u8) -> Self {
                Self(value)
            }
            /// Return the underlying value.
            #[inline]
            pub const fn into(self) -> u8 {
                self.0
            }
            /// Return the single encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode(&self.0)
            }
            /// Return the packed encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode_packed(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode_packed(&self.0)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for MachineStatus {
            type RustType = u8;
            type Token<'a> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = Self::NAME;
            const ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                Self::type_check(token).is_ok()
            }
            #[inline]
            fn type_check(token: &Self::Token<'_>) -> alloy_sol_types::Result<()> {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::type_check(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::detokenize(token)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for MachineStatus {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::topic_preimage_length(rust)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(rust, out)
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic(rust)
            }
        }
    };
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ValueType(u8);
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<ValueType> for u8 {
            #[inline]
            fn stv_to_tokens(
                &self,
            ) -> <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'_> {
                alloy_sol_types::private::SolTypeValue::<
                    alloy::sol_types::sol_data::Uint<8>,
                >::stv_to_tokens(self)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::tokenize(self)
                    .0
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(self, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encoded_size(self)
            }
        }
        #[automatically_derived]
        impl ValueType {
            /// The Solidity type name.
            pub const NAME: &'static str = stringify!(@ name);
            /// Convert from the underlying value type.
            #[inline]
            pub const fn from(value: u8) -> Self {
                Self(value)
            }
            /// Return the underlying value.
            #[inline]
            pub const fn into(self) -> u8 {
                self.0
            }
            /// Return the single encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode(&self.0)
            }
            /// Return the packed encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode_packed(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode_packed(&self.0)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ValueType {
            type RustType = u8;
            type Token<'a> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = Self::NAME;
            const ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                Self::type_check(token).is_ok()
            }
            #[inline]
            fn type_check(token: &Self::Token<'_>) -> alloy_sol_types::Result<()> {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::type_check(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::detokenize(token)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ValueType {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::topic_preimage_length(rust)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(rust, out)
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic(rust)
            }
        }
    };
    /**```solidity
struct ExecutionContext { uint256 maxInboxMessagesRead; address bridge; bytes32 initialWasmModuleRoot; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ExecutionContext {
        #[allow(missing_docs)]
        pub maxInboxMessagesRead: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub bridge: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub initialWasmModuleRoot: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ExecutionContext> for UnderlyingRustTuple<'_> {
            fn from(value: ExecutionContext) -> Self {
                (value.maxInboxMessagesRead, value.bridge, value.initialWasmModuleRoot)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ExecutionContext {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    maxInboxMessagesRead: tuple.0,
                    bridge: tuple.1,
                    initialWasmModuleRoot: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for ExecutionContext {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for ExecutionContext {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.maxInboxMessagesRead),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.bridge,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.initialWasmModuleRoot),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ExecutionContext {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for ExecutionContext {
            const NAME: &'static str = "ExecutionContext";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "ExecutionContext(uint256 maxInboxMessagesRead,address bridge,bytes32 initialWasmModuleRoot)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.maxInboxMessagesRead,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.bridge,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.initialWasmModuleRoot,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ExecutionContext {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.maxInboxMessagesRead,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.bridge,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.initialWasmModuleRoot,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.maxInboxMessagesRead,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.bridge,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.initialWasmModuleRoot,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct Instruction { uint16 opcode; uint256 argumentData; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct Instruction {
        #[allow(missing_docs)]
        pub opcode: u16,
        #[allow(missing_docs)]
        pub argumentData: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<16>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            u16,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Instruction> for UnderlyingRustTuple<'_> {
            fn from(value: Instruction) -> Self {
                (value.opcode, value.argumentData)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Instruction {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    opcode: tuple.0,
                    argumentData: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Instruction {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Instruction {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        16,
                    > as alloy_sol_types::SolType>::tokenize(&self.opcode),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.argumentData),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Instruction {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Instruction {
            const NAME: &'static str = "Instruction";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "Instruction(uint16 opcode,uint256 argumentData)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        16,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.opcode)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.argumentData)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Instruction {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        16,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.opcode,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.argumentData,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    16,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.opcode,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.argumentData,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct Machine { MachineStatus status; ValueStack valueStack; MultiStack valueMultiStack; ValueStack internalStack; StackFrameWindow frameStack; MultiStack frameMultiStack; bytes32 globalStateHash; uint32 moduleIdx; uint32 functionIdx; uint32 functionPc; bytes32 recoveryPc; bytes32 modulesRoot; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct Machine {
        #[allow(missing_docs)]
        pub status: <MachineStatus as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub valueStack: <ValueStack as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub valueMultiStack: <MultiStack as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub internalStack: <ValueStack as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub frameStack: <StackFrameWindow as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub frameMultiStack: <MultiStack as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub globalStateHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub moduleIdx: u32,
        #[allow(missing_docs)]
        pub functionIdx: u32,
        #[allow(missing_docs)]
        pub functionPc: u32,
        #[allow(missing_docs)]
        pub recoveryPc: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub modulesRoot: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            MachineStatus,
            ValueStack,
            MultiStack,
            ValueStack,
            StackFrameWindow,
            MultiStack,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::Uint<32>,
            alloy::sol_types::sol_data::Uint<32>,
            alloy::sol_types::sol_data::Uint<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            <MachineStatus as alloy::sol_types::SolType>::RustType,
            <ValueStack as alloy::sol_types::SolType>::RustType,
            <MultiStack as alloy::sol_types::SolType>::RustType,
            <ValueStack as alloy::sol_types::SolType>::RustType,
            <StackFrameWindow as alloy::sol_types::SolType>::RustType,
            <MultiStack as alloy::sol_types::SolType>::RustType,
            alloy::sol_types::private::FixedBytes<32>,
            u32,
            u32,
            u32,
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Machine> for UnderlyingRustTuple<'_> {
            fn from(value: Machine) -> Self {
                (
                    value.status,
                    value.valueStack,
                    value.valueMultiStack,
                    value.internalStack,
                    value.frameStack,
                    value.frameMultiStack,
                    value.globalStateHash,
                    value.moduleIdx,
                    value.functionIdx,
                    value.functionPc,
                    value.recoveryPc,
                    value.modulesRoot,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Machine {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    status: tuple.0,
                    valueStack: tuple.1,
                    valueMultiStack: tuple.2,
                    internalStack: tuple.3,
                    frameStack: tuple.4,
                    frameMultiStack: tuple.5,
                    globalStateHash: tuple.6,
                    moduleIdx: tuple.7,
                    functionIdx: tuple.8,
                    functionPc: tuple.9,
                    recoveryPc: tuple.10,
                    modulesRoot: tuple.11,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Machine {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Machine {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <MachineStatus as alloy_sol_types::SolType>::tokenize(&self.status),
                    <ValueStack as alloy_sol_types::SolType>::tokenize(&self.valueStack),
                    <MultiStack as alloy_sol_types::SolType>::tokenize(
                        &self.valueMultiStack,
                    ),
                    <ValueStack as alloy_sol_types::SolType>::tokenize(
                        &self.internalStack,
                    ),
                    <StackFrameWindow as alloy_sol_types::SolType>::tokenize(
                        &self.frameStack,
                    ),
                    <MultiStack as alloy_sol_types::SolType>::tokenize(
                        &self.frameMultiStack,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.globalStateHash),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.moduleIdx),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.functionIdx),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.functionPc),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.recoveryPc),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.modulesRoot),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Machine {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Machine {
            const NAME: &'static str = "Machine";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "Machine(uint8 status,ValueStack valueStack,MultiStack valueMultiStack,ValueStack internalStack,StackFrameWindow frameStack,MultiStack frameMultiStack,bytes32 globalStateHash,uint32 moduleIdx,uint32 functionIdx,uint32 functionPc,bytes32 recoveryPc,bytes32 modulesRoot)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(5);
                components
                    .push(
                        <ValueStack as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <ValueStack as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
                    .push(
                        <MultiStack as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <MultiStack as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
                    .push(
                        <ValueStack as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <ValueStack as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
                    .push(
                        <StackFrameWindow as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <StackFrameWindow as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
                    .push(
                        <MultiStack as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <MultiStack as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <MachineStatus as alloy_sol_types::SolType>::eip712_data_word(
                            &self.status,
                        )
                        .0,
                    <ValueStack as alloy_sol_types::SolType>::eip712_data_word(
                            &self.valueStack,
                        )
                        .0,
                    <MultiStack as alloy_sol_types::SolType>::eip712_data_word(
                            &self.valueMultiStack,
                        )
                        .0,
                    <ValueStack as alloy_sol_types::SolType>::eip712_data_word(
                            &self.internalStack,
                        )
                        .0,
                    <StackFrameWindow as alloy_sol_types::SolType>::eip712_data_word(
                            &self.frameStack,
                        )
                        .0,
                    <MultiStack as alloy_sol_types::SolType>::eip712_data_word(
                            &self.frameMultiStack,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.globalStateHash,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.moduleIdx)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.functionIdx)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.functionPc)
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.recoveryPc)
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.modulesRoot)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Machine {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <MachineStatus as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.status,
                    )
                    + <ValueStack as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.valueStack,
                    )
                    + <MultiStack as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.valueMultiStack,
                    )
                    + <ValueStack as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.internalStack,
                    )
                    + <StackFrameWindow as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.frameStack,
                    )
                    + <MultiStack as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.frameMultiStack,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.globalStateHash,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.moduleIdx,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.functionIdx,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.functionPc,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.recoveryPc,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.modulesRoot,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <MachineStatus as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.status,
                    out,
                );
                <ValueStack as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.valueStack,
                    out,
                );
                <MultiStack as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.valueMultiStack,
                    out,
                );
                <ValueStack as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.internalStack,
                    out,
                );
                <StackFrameWindow as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.frameStack,
                    out,
                );
                <MultiStack as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.frameMultiStack,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.globalStateHash,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.moduleIdx,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.functionIdx,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.functionPc,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.recoveryPc,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.modulesRoot,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct Module { bytes32 globalsMerkleRoot; ModuleMemory moduleMemory; bytes32 tablesMerkleRoot; bytes32 functionsMerkleRoot; bytes32 extraHash; uint32 internalsOffset; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct Module {
        #[allow(missing_docs)]
        pub globalsMerkleRoot: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub moduleMemory: <ModuleMemory as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub tablesMerkleRoot: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub functionsMerkleRoot: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub extraHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub internalsOffset: u32,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::FixedBytes<32>,
            ModuleMemory,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::Uint<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::FixedBytes<32>,
            <ModuleMemory as alloy::sol_types::SolType>::RustType,
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::FixedBytes<32>,
            u32,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Module> for UnderlyingRustTuple<'_> {
            fn from(value: Module) -> Self {
                (
                    value.globalsMerkleRoot,
                    value.moduleMemory,
                    value.tablesMerkleRoot,
                    value.functionsMerkleRoot,
                    value.extraHash,
                    value.internalsOffset,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Module {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    globalsMerkleRoot: tuple.0,
                    moduleMemory: tuple.1,
                    tablesMerkleRoot: tuple.2,
                    functionsMerkleRoot: tuple.3,
                    extraHash: tuple.4,
                    internalsOffset: tuple.5,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Module {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Module {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.globalsMerkleRoot),
                    <ModuleMemory as alloy_sol_types::SolType>::tokenize(
                        &self.moduleMemory,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.tablesMerkleRoot),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.functionsMerkleRoot),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.extraHash),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.internalsOffset),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Module {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Module {
            const NAME: &'static str = "Module";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "Module(bytes32 globalsMerkleRoot,ModuleMemory moduleMemory,bytes32 tablesMerkleRoot,bytes32 functionsMerkleRoot,bytes32 extraHash,uint32 internalsOffset)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(1);
                components
                    .push(
                        <ModuleMemory as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <ModuleMemory as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.globalsMerkleRoot,
                        )
                        .0,
                    <ModuleMemory as alloy_sol_types::SolType>::eip712_data_word(
                            &self.moduleMemory,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.tablesMerkleRoot,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.functionsMerkleRoot,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.extraHash)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.internalsOffset,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Module {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.globalsMerkleRoot,
                    )
                    + <ModuleMemory as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.moduleMemory,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.tablesMerkleRoot,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.functionsMerkleRoot,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.extraHash,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.internalsOffset,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.globalsMerkleRoot,
                    out,
                );
                <ModuleMemory as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.moduleMemory,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.tablesMerkleRoot,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.functionsMerkleRoot,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.extraHash,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.internalsOffset,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct ModuleMemory { uint64 size; uint64 maxSize; bytes32 merkleRoot; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ModuleMemory {
        #[allow(missing_docs)]
        pub size: u64,
        #[allow(missing_docs)]
        pub maxSize: u64,
        #[allow(missing_docs)]
        pub merkleRoot: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<64>,
            alloy::sol_types::sol_data::Uint<64>,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            u64,
            u64,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ModuleMemory> for UnderlyingRustTuple<'_> {
            fn from(value: ModuleMemory) -> Self {
                (value.size, value.maxSize, value.merkleRoot)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ModuleMemory {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    size: tuple.0,
                    maxSize: tuple.1,
                    merkleRoot: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for ModuleMemory {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for ModuleMemory {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.size),
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.maxSize),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.merkleRoot),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ModuleMemory {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for ModuleMemory {
            const NAME: &'static str = "ModuleMemory";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "ModuleMemory(uint64 size,uint64 maxSize,bytes32 merkleRoot)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.size)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.maxSize)
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.merkleRoot)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ModuleMemory {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.size)
                    + <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.maxSize,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.merkleRoot,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    64,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.size,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    64,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.maxSize,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.merkleRoot,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct MultiStack { bytes32 inactiveStackHash; bytes32 remainingHash; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MultiStack {
        #[allow(missing_docs)]
        pub inactiveStackHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub remainingHash: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<MultiStack> for UnderlyingRustTuple<'_> {
            fn from(value: MultiStack) -> Self {
                (value.inactiveStackHash, value.remainingHash)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for MultiStack {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    inactiveStackHash: tuple.0,
                    remainingHash: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for MultiStack {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for MultiStack {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.inactiveStackHash),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.remainingHash),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for MultiStack {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for MultiStack {
            const NAME: &'static str = "MultiStack";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "MultiStack(bytes32 inactiveStackHash,bytes32 remainingHash)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.inactiveStackHash,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.remainingHash)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for MultiStack {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.inactiveStackHash,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.remainingHash,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.inactiveStackHash,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.remainingHash,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct StackFrame { Value returnPc; bytes32 localsMerkleRoot; uint32 callerModule; uint32 callerModuleInternals; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct StackFrame {
        #[allow(missing_docs)]
        pub returnPc: <Value as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub localsMerkleRoot: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub callerModule: u32,
        #[allow(missing_docs)]
        pub callerModuleInternals: u32,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            Value,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::Uint<32>,
            alloy::sol_types::sol_data::Uint<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            <Value as alloy::sol_types::SolType>::RustType,
            alloy::sol_types::private::FixedBytes<32>,
            u32,
            u32,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<StackFrame> for UnderlyingRustTuple<'_> {
            fn from(value: StackFrame) -> Self {
                (
                    value.returnPc,
                    value.localsMerkleRoot,
                    value.callerModule,
                    value.callerModuleInternals,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for StackFrame {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    returnPc: tuple.0,
                    localsMerkleRoot: tuple.1,
                    callerModule: tuple.2,
                    callerModuleInternals: tuple.3,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for StackFrame {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for StackFrame {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <Value as alloy_sol_types::SolType>::tokenize(&self.returnPc),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.localsMerkleRoot),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.callerModule),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.callerModuleInternals),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for StackFrame {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for StackFrame {
            const NAME: &'static str = "StackFrame";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "StackFrame(Value returnPc,bytes32 localsMerkleRoot,uint32 callerModule,uint32 callerModuleInternals)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(1);
                components
                    .push(<Value as alloy_sol_types::SolStruct>::eip712_root_type());
                components
                    .extend(<Value as alloy_sol_types::SolStruct>::eip712_components());
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <Value as alloy_sol_types::SolType>::eip712_data_word(&self.returnPc)
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.localsMerkleRoot,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.callerModule)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.callerModuleInternals,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for StackFrame {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <Value as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.returnPc,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.localsMerkleRoot,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.callerModule,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.callerModuleInternals,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <Value as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.returnPc,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.localsMerkleRoot,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.callerModule,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.callerModuleInternals,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct StackFrameWindow { StackFrame[] proved; bytes32 remainingHash; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct StackFrameWindow {
        #[allow(missing_docs)]
        pub proved: alloy::sol_types::private::Vec<
            <StackFrame as alloy::sol_types::SolType>::RustType,
        >,
        #[allow(missing_docs)]
        pub remainingHash: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Array<StackFrame>,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Vec<
                <StackFrame as alloy::sol_types::SolType>::RustType,
            >,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<StackFrameWindow> for UnderlyingRustTuple<'_> {
            fn from(value: StackFrameWindow) -> Self {
                (value.proved, value.remainingHash)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for StackFrameWindow {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    proved: tuple.0,
                    remainingHash: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for StackFrameWindow {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for StackFrameWindow {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        StackFrame,
                    > as alloy_sol_types::SolType>::tokenize(&self.proved),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.remainingHash),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for StackFrameWindow {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for StackFrameWindow {
            const NAME: &'static str = "StackFrameWindow";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "StackFrameWindow(StackFrame[] proved,bytes32 remainingHash)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(1);
                components
                    .push(
                        <StackFrame as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <StackFrame as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Array<
                        StackFrame,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.proved)
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.remainingHash)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for StackFrameWindow {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Array<
                        StackFrame,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.proved,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.remainingHash,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Array<
                    StackFrame,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.proved,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.remainingHash,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct Value { ValueType valueType; uint256 contents; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct Value {
        #[allow(missing_docs)]
        pub valueType: <ValueType as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub contents: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (ValueType, alloy::sol_types::sol_data::Uint<256>);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            <ValueType as alloy::sol_types::SolType>::RustType,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Value> for UnderlyingRustTuple<'_> {
            fn from(value: Value) -> Self {
                (value.valueType, value.contents)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Value {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    valueType: tuple.0,
                    contents: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Value {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Value {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <ValueType as alloy_sol_types::SolType>::tokenize(&self.valueType),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contents),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Value {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Value {
            const NAME: &'static str = "Value";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "Value(uint8 valueType,uint256 contents)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <ValueType as alloy_sol_types::SolType>::eip712_data_word(
                            &self.valueType,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.contents)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Value {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <ValueType as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.valueType,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.contents,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <ValueType as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.valueType,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.contents,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct ValueArray { Value[] inner; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ValueArray {
        #[allow(missing_docs)]
        pub inner: alloy::sol_types::private::Vec<
            <Value as alloy::sol_types::SolType>::RustType,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Array<Value>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Vec<
                <Value as alloy::sol_types::SolType>::RustType,
            >,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ValueArray> for UnderlyingRustTuple<'_> {
            fn from(value: ValueArray) -> Self {
                (value.inner,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ValueArray {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { inner: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for ValueArray {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for ValueArray {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        Value,
                    > as alloy_sol_types::SolType>::tokenize(&self.inner),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ValueArray {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for ValueArray {
            const NAME: &'static str = "ValueArray";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed("ValueArray(Value[] inner)")
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(1);
                components
                    .push(<Value as alloy_sol_types::SolStruct>::eip712_root_type());
                components
                    .extend(<Value as alloy_sol_types::SolStruct>::eip712_components());
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                <alloy::sol_types::sol_data::Array<
                    Value,
                > as alloy_sol_types::SolType>::eip712_data_word(&self.inner)
                    .0
                    .to_vec()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ValueArray {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Array<
                        Value,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.inner)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Array<
                    Value,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.inner,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct ValueStack { ValueArray proved; bytes32 remainingHash; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ValueStack {
        #[allow(missing_docs)]
        pub proved: <ValueArray as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub remainingHash: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            ValueArray,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            <ValueArray as alloy::sol_types::SolType>::RustType,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ValueStack> for UnderlyingRustTuple<'_> {
            fn from(value: ValueStack) -> Self {
                (value.proved, value.remainingHash)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ValueStack {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    proved: tuple.0,
                    remainingHash: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for ValueStack {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for ValueStack {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <ValueArray as alloy_sol_types::SolType>::tokenize(&self.proved),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.remainingHash),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ValueStack {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for ValueStack {
            const NAME: &'static str = "ValueStack";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "ValueStack(ValueArray proved,bytes32 remainingHash)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(1);
                components
                    .push(
                        <ValueArray as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <ValueArray as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <ValueArray as alloy_sol_types::SolType>::eip712_data_word(
                            &self.proved,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.remainingHash)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ValueStack {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <ValueArray as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.proved,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.remainingHash,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <ValueArray as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.proved,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.remainingHash,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**Function with signature `executeOneStep((uint256,address,bytes32),(uint8,(((uint8,uint256)[]),bytes32),(bytes32,bytes32),(((uint8,uint256)[]),bytes32),(((uint8,uint256),bytes32,uint32,uint32)[],bytes32),(bytes32,bytes32),bytes32,uint32,uint32,uint32,bytes32,bytes32),(bytes32,(uint64,uint64,bytes32),bytes32,bytes32,bytes32,uint32),(uint16,uint256),bytes)` and selector `0xa92cb501`.
```solidity
function executeOneStep(ExecutionContext memory execCtx, Machine memory startMach, Module memory startMod, Instruction memory inst, bytes memory proof) external view returns (Machine memory mach, Module memory r#mod);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeOneStepCall {
        #[allow(missing_docs)]
        pub execCtx: <ExecutionContext as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub startMach: <Machine as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub startMod: <Module as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub inst: <Instruction as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub proof: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`executeOneStep((uint256,address,bytes32),(uint8,(((uint8,uint256)[]),bytes32),(bytes32,bytes32),(((uint8,uint256)[]),bytes32),(((uint8,uint256),bytes32,uint32,uint32)[],bytes32),(bytes32,bytes32),bytes32,uint32,uint32,uint32,bytes32,bytes32),(bytes32,(uint64,uint64,bytes32),bytes32,bytes32,bytes32,uint32),(uint16,uint256),bytes)`](executeOneStepCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeOneStepReturn {
        #[allow(missing_docs)]
        pub mach: <Machine as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub r#mod: <Module as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                ExecutionContext,
                Machine,
                Module,
                Instruction,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <ExecutionContext as alloy::sol_types::SolType>::RustType,
                <Machine as alloy::sol_types::SolType>::RustType,
                <Module as alloy::sol_types::SolType>::RustType,
                <Instruction as alloy::sol_types::SolType>::RustType,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeOneStepCall> for UnderlyingRustTuple<'_> {
                fn from(value: executeOneStepCall) -> Self {
                    (
                        value.execCtx,
                        value.startMach,
                        value.startMod,
                        value.inst,
                        value.proof,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for executeOneStepCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        execCtx: tuple.0,
                        startMach: tuple.1,
                        startMod: tuple.2,
                        inst: tuple.3,
                        proof: tuple.4,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (Machine, Module);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <Machine as alloy::sol_types::SolType>::RustType,
                <Module as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeOneStepReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: executeOneStepReturn) -> Self {
                    (value.mach, value.r#mod)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for executeOneStepReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        mach: tuple.0,
                        r#mod: tuple.1,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for executeOneStepCall {
            type Parameters<'a> = (
                ExecutionContext,
                Machine,
                Module,
                Instruction,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = executeOneStepReturn;
            type ReturnTuple<'a> = (Machine, Module);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "executeOneStep((uint256,address,bytes32),(uint8,(((uint8,uint256)[]),bytes32),(bytes32,bytes32),(((uint8,uint256)[]),bytes32),(((uint8,uint256),bytes32,uint32,uint32)[],bytes32),(bytes32,bytes32),bytes32,uint32,uint32,uint32,bytes32,bytes32),(bytes32,(uint64,uint64,bytes32),bytes32,bytes32,bytes32,uint32),(uint16,uint256),bytes)";
            const SELECTOR: [u8; 4] = [169u8, 44u8, 181u8, 1u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <ExecutionContext as alloy_sol_types::SolType>::tokenize(
                        &self.execCtx,
                    ),
                    <Machine as alloy_sol_types::SolType>::tokenize(&self.startMach),
                    <Module as alloy_sol_types::SolType>::tokenize(&self.startMod),
                    <Instruction as alloy_sol_types::SolType>::tokenize(&self.inst),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.proof,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`OneStepProverHostIo`](self) function calls.
    pub enum OneStepProverHostIoCalls {
        #[allow(missing_docs)]
        executeOneStep(executeOneStepCall),
    }
    #[automatically_derived]
    impl OneStepProverHostIoCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[[169u8, 44u8, 181u8, 1u8]];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for OneStepProverHostIoCalls {
        const NAME: &'static str = "OneStepProverHostIoCalls";
        const MIN_DATA_LENGTH: usize = 1120usize;
        const COUNT: usize = 1usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::executeOneStep(_) => {
                    <executeOneStepCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<OneStepProverHostIoCalls>] = &[
                {
                    fn executeOneStep(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OneStepProverHostIoCalls> {
                        <executeOneStepCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OneStepProverHostIoCalls::executeOneStep)
                    }
                    executeOneStep
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::executeOneStep(inner) => {
                    <executeOneStepCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::executeOneStep(inner) => {
                    <executeOneStepCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`OneStepProverHostIo`](self) contract instance.

See the [wrapper's documentation](`OneStepProverHostIoInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> OneStepProverHostIoInstance<T, P, N> {
        OneStepProverHostIoInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<OneStepProverHostIoInstance<T, P, N>>,
    > {
        OneStepProverHostIoInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        OneStepProverHostIoInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`OneStepProverHostIo`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`OneStepProverHostIo`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct OneStepProverHostIoInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for OneStepProverHostIoInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("OneStepProverHostIoInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > OneStepProverHostIoInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`OneStepProverHostIo`](self) contract instance.

See the [wrapper's documentation](`OneStepProverHostIoInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<OneStepProverHostIoInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> OneStepProverHostIoInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> OneStepProverHostIoInstance<T, P, N> {
            OneStepProverHostIoInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > OneStepProverHostIoInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`executeOneStep`] function.
        pub fn executeOneStep(
            &self,
            execCtx: <ExecutionContext as alloy::sol_types::SolType>::RustType,
            startMach: <Machine as alloy::sol_types::SolType>::RustType,
            startMod: <Module as alloy::sol_types::SolType>::RustType,
            inst: <Instruction as alloy::sol_types::SolType>::RustType,
            proof: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, executeOneStepCall, N> {
            self.call_builder(
                &executeOneStepCall {
                    execCtx,
                    startMach,
                    startMod,
                    inst,
                    proof,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > OneStepProverHostIoInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
