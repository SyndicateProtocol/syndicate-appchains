/**

Generated by the following Solidity interface...
```solidity
interface LatestELCRoundsImp {
    struct ELCRound {
        address expressLaneController;
        uint64 round;
    }

    error RoundAlreadyResolved(uint64 round);
    error RoundNotResolved(uint64 round);

    constructor(ELCRound[2] r);

    function latestELCRound() external view returns (ELCRound memory, uint8);
    function resolvedRound(uint64 round) external view returns (ELCRound memory);
    function rounds(uint256) external view returns (address expressLaneController, uint64 round);
    function setResolvedRound(uint64 round, address expressLaneController) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "r",
        "type": "tuple[2]",
        "internalType": "struct ELCRound[2]",
        "components": [
          {
            "name": "expressLaneController",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "round",
            "type": "uint64",
            "internalType": "uint64"
          }
        ]
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "latestELCRound",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "tuple",
        "internalType": "struct ELCRound",
        "components": [
          {
            "name": "expressLaneController",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "round",
            "type": "uint64",
            "internalType": "uint64"
          }
        ]
      },
      {
        "name": "",
        "type": "uint8",
        "internalType": "uint8"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "resolvedRound",
    "inputs": [
      {
        "name": "round",
        "type": "uint64",
        "internalType": "uint64"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "tuple",
        "internalType": "struct ELCRound",
        "components": [
          {
            "name": "expressLaneController",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "round",
            "type": "uint64",
            "internalType": "uint64"
          }
        ]
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "rounds",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "expressLaneController",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "round",
        "type": "uint64",
        "internalType": "uint64"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "setResolvedRound",
    "inputs": [
      {
        "name": "round",
        "type": "uint64",
        "internalType": "uint64"
      },
      {
        "name": "expressLaneController",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "error",
    "name": "RoundAlreadyResolved",
    "inputs": [
      {
        "name": "round",
        "type": "uint64",
        "internalType": "uint64"
      }
    ]
  },
  {
    "type": "error",
    "name": "RoundNotResolved",
    "inputs": [
      {
        "name": "round",
        "type": "uint64",
        "internalType": "uint64"
      }
    ]
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod LatestELCRoundsImp {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234801561000f575f80fd5b506040516106ea3803806106ea83398101604081905261002e916100c6565b805180515f80546020938401516001600160a01b039384166001600160e01b031992831617600160a01b6001600160401b0392831681029190911790935594840151805160018054929096015194169116179190931690920291909117905561016f565b604080519081016001600160401b03811182821017156100c057634e487b7160e01b5f52604160045260245ffd5b60405290565b5f608082840312156100d6575f80fd5b82601f8301126100e4575f80fd5b6100ec610092565b8060808401858111156100fd575f80fd5b845b818110156101645760408188031215610116575f80fd5b61011e610092565b81516001600160a01b0381168114610134575f80fd5b81526020828101516001600160401b0381168114610150575f80fd5b8282015290855293909301926040016100ff565b509095945050505050565b61056e8061017c5f395ff3fe608060405234801561000f575f80fd5b506004361061004a575f3560e01c806367f28c9f1461004e5780638c65c81f14610063578063db9ca335146100b0578063efc03485146100d0575b5f80fd5b61006161005c366004610450565b61011e565b005b61007661007136600461049d565b61012d565b6040805173ffffffffffffffffffffffffffffffffffffffff909316835267ffffffffffffffff9091166020830152015b60405180910390f35b6100c36100be3660046104b4565b61016a565b6040516100a791906104d4565b6100d86101c8565b60408051835173ffffffffffffffffffffffffffffffffffffffff16815260209384015167ffffffffffffffff169381019390935260ff909116908201526060016100a7565b6101295f8383610229565b5050565b5f816002811061013b575f80fd5b015473ffffffffffffffffffffffffffffffffffffffff81169150600160a01b900467ffffffffffffffff1682565b604080518082019091525f80825260208201526101875f8361034f565b60408051808201909152905473ffffffffffffffffffffffffffffffffffffffff81168252600160a01b900467ffffffffffffffff16602082015292915050565b604080518082019091525f80825260208201525f6101e55f6103f2565b60408051808201909152915473ffffffffffffffffffffffffffffffffffffffff81168352600160a01b900467ffffffffffffffff16602083015290939092509050565b5f80610234856103f2565b8154919350915067ffffffffffffffff808616600160a01b9092041610610298576040517f451f873400000000000000000000000000000000000000000000000000000000815267ffffffffffffffff851660048201526024015b60405180910390fd5b6040805180820190915273ffffffffffffffffffffffffffffffffffffffff8416815267ffffffffffffffff8516602082015260018218908660ff8316600281106102e5576102e561050b565b82519101805460209093015167ffffffffffffffff16600160a01b027fffffffff0000000000000000000000000000000000000000000000000000000090931673ffffffffffffffffffffffffffffffffffffffff90921691909117919091179055505050505050565b5f67ffffffffffffffff821683820154600160a01b900467ffffffffffffffff160361038057825f5b0190506103ec565b67ffffffffffffffff82168360010154600160a01b900467ffffffffffffffff16036103ae57826001610378565b6040517ffbb052d800000000000000000000000000000000000000000000000000000000815267ffffffffffffffff8316600482015260240161028f565b92915050565b5f808083810190505f8460010154825467ffffffffffffffff600160a01b9283900481169290910416101561042a5750506001808401905b9094909350915050565b803567ffffffffffffffff8116811461044b575f80fd5b919050565b5f8060408385031215610461575f80fd5b61046a83610434565b9150602083013573ffffffffffffffffffffffffffffffffffffffff81168114610492575f80fd5b809150509250929050565b5f602082840312156104ad575f80fd5b5035919050565b5f602082840312156104c4575f80fd5b6104cd82610434565b9392505050565b815173ffffffffffffffffffffffffffffffffffffffff16815260208083015167ffffffffffffffff1690820152604081016103ec565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffdfea2646970667358221220ce84df02e096a2d1798d8a5038c21ab3115c557a52cdc51f8dc674868fb80a4764736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`@Qa\x06\xEA8\x03\x80a\x06\xEA\x839\x81\x01`@\x81\x90Ra\0.\x91a\0\xC6V[\x80Q\x80Q_\x80T` \x93\x84\x01Q`\x01`\x01`\xA0\x1B\x03\x93\x84\x16`\x01`\x01`\xE0\x1B\x03\x19\x92\x83\x16\x17`\x01`\xA0\x1B`\x01`\x01`@\x1B\x03\x92\x83\x16\x81\x02\x91\x90\x91\x17\x90\x93U\x94\x84\x01Q\x80Q`\x01\x80T\x92\x90\x96\x01Q\x94\x16\x91\x16\x17\x91\x90\x93\x16\x90\x92\x02\x91\x90\x91\x17\x90Ua\x01oV[`@\x80Q\x90\x81\x01`\x01`\x01`@\x1B\x03\x81\x11\x82\x82\x10\x17\x15a\0\xC0WcNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@R\x90V[_`\x80\x82\x84\x03\x12\x15a\0\xD6W_\x80\xFD[\x82`\x1F\x83\x01\x12a\0\xE4W_\x80\xFD[a\0\xECa\0\x92V[\x80`\x80\x84\x01\x85\x81\x11\x15a\0\xFDW_\x80\xFD[\x84[\x81\x81\x10\x15a\x01dW`@\x81\x88\x03\x12\x15a\x01\x16W_\x80\xFD[a\x01\x1Ea\0\x92V[\x81Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x014W_\x80\xFD[\x81R` \x82\x81\x01Q`\x01`\x01`@\x1B\x03\x81\x16\x81\x14a\x01PW_\x80\xFD[\x82\x82\x01R\x90\x85R\x93\x90\x93\x01\x92`@\x01a\0\xFFV[P\x90\x95\x94PPPPPV[a\x05n\x80a\x01|_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\0JW_5`\xE0\x1C\x80cg\xF2\x8C\x9F\x14a\0NW\x80c\x8Ce\xC8\x1F\x14a\0cW\x80c\xDB\x9C\xA35\x14a\0\xB0W\x80c\xEF\xC04\x85\x14a\0\xD0W[_\x80\xFD[a\0aa\0\\6`\x04a\x04PV[a\x01\x1EV[\0[a\0va\0q6`\x04a\x04\x9DV[a\x01-V[`@\x80Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x93\x16\x83Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16` \x83\x01R\x01[`@Q\x80\x91\x03\x90\xF3[a\0\xC3a\0\xBE6`\x04a\x04\xB4V[a\x01jV[`@Qa\0\xA7\x91\x90a\x04\xD4V[a\0\xD8a\x01\xC8V[`@\x80Q\x83Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x93\x84\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x93\x81\x01\x93\x90\x93R`\xFF\x90\x91\x16\x90\x82\x01R``\x01a\0\xA7V[a\x01)_\x83\x83a\x02)V[PPV[_\x81`\x02\x81\x10a\x01;W_\x80\xFD[\x01Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x91P`\x01`\xA0\x1B\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82V[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01Ra\x01\x87_\x83a\x03OV[`@\x80Q\x80\x82\x01\x90\x91R\x90Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x82R`\x01`\xA0\x1B\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16` \x82\x01R\x92\x91PPV[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R_a\x01\xE5_a\x03\xF2V[`@\x80Q\x80\x82\x01\x90\x91R\x91Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x83R`\x01`\xA0\x1B\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16` \x83\x01R\x90\x93\x90\x92P\x90PV[_\x80a\x024\x85a\x03\xF2V[\x81T\x91\x93P\x91Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x86\x16`\x01`\xA0\x1B\x90\x92\x04\x16\x10a\x02\x98W`@Q\x7FE\x1F\x874\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x85\x16`\x04\x82\x01R`$\x01[`@Q\x80\x91\x03\x90\xFD[`@\x80Q\x80\x82\x01\x90\x91Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x16\x81Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x85\x16` \x82\x01R`\x01\x82\x18\x90\x86`\xFF\x83\x16`\x02\x81\x10a\x02\xE5Wa\x02\xE5a\x05\x0BV[\x82Q\x91\x01\x80T` \x90\x93\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\x01`\xA0\x1B\x02\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x93\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x92\x16\x91\x90\x91\x17\x91\x90\x91\x17\x90UPPPPPPV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x83\x82\x01T`\x01`\xA0\x1B\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a\x03\x80W\x82_[\x01\x90Pa\x03\xECV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x83`\x01\x01T`\x01`\xA0\x1B\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a\x03\xAEW\x82`\x01a\x03xV[`@Q\x7F\xFB\xB0R\xD8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16`\x04\x82\x01R`$\x01a\x02\x8FV[\x92\x91PPV[_\x80\x80\x83\x81\x01\x90P_\x84`\x01\x01T\x82Tg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x01`\xA0\x1B\x92\x83\x90\x04\x81\x16\x92\x90\x91\x04\x16\x10\x15a\x04*WPP`\x01\x80\x84\x01\x90[\x90\x94\x90\x93P\x91PPV[\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x04KW_\x80\xFD[\x91\x90PV[_\x80`@\x83\x85\x03\x12\x15a\x04aW_\x80\xFD[a\x04j\x83a\x044V[\x91P` \x83\x015s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x04\x92W_\x80\xFD[\x80\x91PP\x92P\x92\x90PV[_` \x82\x84\x03\x12\x15a\x04\xADW_\x80\xFD[P5\x91\x90PV[_` \x82\x84\x03\x12\x15a\x04\xC4W_\x80\xFD[a\x04\xCD\x82a\x044V[\x93\x92PPPV[\x81Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x80\x83\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x82\x01R`@\x81\x01a\x03\xECV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD\xFE\xA2dipfsX\"\x12 \xCE\x84\xDF\x02\xE0\x96\xA2\xD1y\x8D\x8AP8\xC2\x1A\xB3\x11\\UzR\xCD\xC5\x1F\x8D\xC6t\x86\x8F\xB8\nGdsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f80fd5b506004361061004a575f3560e01c806367f28c9f1461004e5780638c65c81f14610063578063db9ca335146100b0578063efc03485146100d0575b5f80fd5b61006161005c366004610450565b61011e565b005b61007661007136600461049d565b61012d565b6040805173ffffffffffffffffffffffffffffffffffffffff909316835267ffffffffffffffff9091166020830152015b60405180910390f35b6100c36100be3660046104b4565b61016a565b6040516100a791906104d4565b6100d86101c8565b60408051835173ffffffffffffffffffffffffffffffffffffffff16815260209384015167ffffffffffffffff169381019390935260ff909116908201526060016100a7565b6101295f8383610229565b5050565b5f816002811061013b575f80fd5b015473ffffffffffffffffffffffffffffffffffffffff81169150600160a01b900467ffffffffffffffff1682565b604080518082019091525f80825260208201526101875f8361034f565b60408051808201909152905473ffffffffffffffffffffffffffffffffffffffff81168252600160a01b900467ffffffffffffffff16602082015292915050565b604080518082019091525f80825260208201525f6101e55f6103f2565b60408051808201909152915473ffffffffffffffffffffffffffffffffffffffff81168352600160a01b900467ffffffffffffffff16602083015290939092509050565b5f80610234856103f2565b8154919350915067ffffffffffffffff808616600160a01b9092041610610298576040517f451f873400000000000000000000000000000000000000000000000000000000815267ffffffffffffffff851660048201526024015b60405180910390fd5b6040805180820190915273ffffffffffffffffffffffffffffffffffffffff8416815267ffffffffffffffff8516602082015260018218908660ff8316600281106102e5576102e561050b565b82519101805460209093015167ffffffffffffffff16600160a01b027fffffffff0000000000000000000000000000000000000000000000000000000090931673ffffffffffffffffffffffffffffffffffffffff90921691909117919091179055505050505050565b5f67ffffffffffffffff821683820154600160a01b900467ffffffffffffffff160361038057825f5b0190506103ec565b67ffffffffffffffff82168360010154600160a01b900467ffffffffffffffff16036103ae57826001610378565b6040517ffbb052d800000000000000000000000000000000000000000000000000000000815267ffffffffffffffff8316600482015260240161028f565b92915050565b5f808083810190505f8460010154825467ffffffffffffffff600160a01b9283900481169290910416101561042a5750506001808401905b9094909350915050565b803567ffffffffffffffff8116811461044b575f80fd5b919050565b5f8060408385031215610461575f80fd5b61046a83610434565b9150602083013573ffffffffffffffffffffffffffffffffffffffff81168114610492575f80fd5b809150509250929050565b5f602082840312156104ad575f80fd5b5035919050565b5f602082840312156104c4575f80fd5b6104cd82610434565b9392505050565b815173ffffffffffffffffffffffffffffffffffffffff16815260208083015167ffffffffffffffff1690820152604081016103ec565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffdfea2646970667358221220ce84df02e096a2d1798d8a5038c21ab3115c557a52cdc51f8dc674868fb80a4764736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\0JW_5`\xE0\x1C\x80cg\xF2\x8C\x9F\x14a\0NW\x80c\x8Ce\xC8\x1F\x14a\0cW\x80c\xDB\x9C\xA35\x14a\0\xB0W\x80c\xEF\xC04\x85\x14a\0\xD0W[_\x80\xFD[a\0aa\0\\6`\x04a\x04PV[a\x01\x1EV[\0[a\0va\0q6`\x04a\x04\x9DV[a\x01-V[`@\x80Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x93\x16\x83Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16` \x83\x01R\x01[`@Q\x80\x91\x03\x90\xF3[a\0\xC3a\0\xBE6`\x04a\x04\xB4V[a\x01jV[`@Qa\0\xA7\x91\x90a\x04\xD4V[a\0\xD8a\x01\xC8V[`@\x80Q\x83Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x93\x84\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x93\x81\x01\x93\x90\x93R`\xFF\x90\x91\x16\x90\x82\x01R``\x01a\0\xA7V[a\x01)_\x83\x83a\x02)V[PPV[_\x81`\x02\x81\x10a\x01;W_\x80\xFD[\x01Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x91P`\x01`\xA0\x1B\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82V[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01Ra\x01\x87_\x83a\x03OV[`@\x80Q\x80\x82\x01\x90\x91R\x90Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x82R`\x01`\xA0\x1B\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16` \x82\x01R\x92\x91PPV[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R_a\x01\xE5_a\x03\xF2V[`@\x80Q\x80\x82\x01\x90\x91R\x91Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x83R`\x01`\xA0\x1B\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16` \x83\x01R\x90\x93\x90\x92P\x90PV[_\x80a\x024\x85a\x03\xF2V[\x81T\x91\x93P\x91Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x86\x16`\x01`\xA0\x1B\x90\x92\x04\x16\x10a\x02\x98W`@Q\x7FE\x1F\x874\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x85\x16`\x04\x82\x01R`$\x01[`@Q\x80\x91\x03\x90\xFD[`@\x80Q\x80\x82\x01\x90\x91Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x16\x81Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x85\x16` \x82\x01R`\x01\x82\x18\x90\x86`\xFF\x83\x16`\x02\x81\x10a\x02\xE5Wa\x02\xE5a\x05\x0BV[\x82Q\x91\x01\x80T` \x90\x93\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\x01`\xA0\x1B\x02\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x93\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x92\x16\x91\x90\x91\x17\x91\x90\x91\x17\x90UPPPPPPV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x83\x82\x01T`\x01`\xA0\x1B\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a\x03\x80W\x82_[\x01\x90Pa\x03\xECV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x83`\x01\x01T`\x01`\xA0\x1B\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a\x03\xAEW\x82`\x01a\x03xV[`@Q\x7F\xFB\xB0R\xD8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16`\x04\x82\x01R`$\x01a\x02\x8FV[\x92\x91PPV[_\x80\x80\x83\x81\x01\x90P_\x84`\x01\x01T\x82Tg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x01`\xA0\x1B\x92\x83\x90\x04\x81\x16\x92\x90\x91\x04\x16\x10\x15a\x04*WPP`\x01\x80\x84\x01\x90[\x90\x94\x90\x93P\x91PPV[\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x04KW_\x80\xFD[\x91\x90PV[_\x80`@\x83\x85\x03\x12\x15a\x04aW_\x80\xFD[a\x04j\x83a\x044V[\x91P` \x83\x015s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x04\x92W_\x80\xFD[\x80\x91PP\x92P\x92\x90PV[_` \x82\x84\x03\x12\x15a\x04\xADW_\x80\xFD[P5\x91\x90PV[_` \x82\x84\x03\x12\x15a\x04\xC4W_\x80\xFD[a\x04\xCD\x82a\x044V[\x93\x92PPPV[\x81Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x80\x83\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x82\x01R`@\x81\x01a\x03\xECV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD\xFE\xA2dipfsX\"\x12 \xCE\x84\xDF\x02\xE0\x96\xA2\xD1y\x8D\x8AP8\xC2\x1A\xB3\x11\\UzR\xCD\xC5\x1F\x8D\xC6t\x86\x8F\xB8\nGdsolcC\0\x08\x19\x003",
    );
    /**```solidity
struct ELCRound { address expressLaneController; uint64 round; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ELCRound {
        #[allow(missing_docs)]
        pub expressLaneController: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub round: u64,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Uint<64>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address, u64);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ELCRound> for UnderlyingRustTuple<'_> {
            fn from(value: ELCRound) -> Self {
                (value.expressLaneController, value.round)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ELCRound {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    expressLaneController: tuple.0,
                    round: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for ELCRound {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for ELCRound {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.expressLaneController,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.round),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ELCRound {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for ELCRound {
            const NAME: &'static str = "ELCRound";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "ELCRound(address expressLaneController,uint64 round)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.expressLaneController,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.round)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ELCRound {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.expressLaneController,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.round)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.expressLaneController,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    64,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.round,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**Custom error with signature `RoundAlreadyResolved(uint64)` and selector `0x451f8734`.
```solidity
error RoundAlreadyResolved(uint64 round);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct RoundAlreadyResolved {
        #[allow(missing_docs)]
        pub round: u64,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (u64,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<RoundAlreadyResolved> for UnderlyingRustTuple<'_> {
            fn from(value: RoundAlreadyResolved) -> Self {
                (value.round,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for RoundAlreadyResolved {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { round: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for RoundAlreadyResolved {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "RoundAlreadyResolved(uint64)";
            const SELECTOR: [u8; 4] = [69u8, 31u8, 135u8, 52u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.round),
                )
            }
        }
    };
    /**Custom error with signature `RoundNotResolved(uint64)` and selector `0xfbb052d8`.
```solidity
error RoundNotResolved(uint64 round);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct RoundNotResolved {
        #[allow(missing_docs)]
        pub round: u64,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (u64,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<RoundNotResolved> for UnderlyingRustTuple<'_> {
            fn from(value: RoundNotResolved) -> Self {
                (value.round,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for RoundNotResolved {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { round: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for RoundNotResolved {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "RoundNotResolved(uint64)";
            const SELECTOR: [u8; 4] = [251u8, 176u8, 82u8, 216u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.round),
                )
            }
        }
    };
    /**Constructor`.
```solidity
constructor(ELCRound[2] r);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub r: [<ELCRound as alloy::sol_types::SolType>::RustType; 2usize],
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedArray<ELCRound, 2usize>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                [<ELCRound as alloy::sol_types::SolType>::RustType; 2usize],
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value.r,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { r: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedArray<ELCRound, 2usize>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedArray<
                        ELCRound,
                        2usize,
                    > as alloy_sol_types::SolType>::tokenize(&self.r),
                )
            }
        }
    };
    /**Function with signature `latestELCRound()` and selector `0xefc03485`.
```solidity
function latestELCRound() external view returns (ELCRound memory, uint8);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct latestELCRoundCall {}
    ///Container type for the return parameters of the [`latestELCRound()`](latestELCRoundCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct latestELCRoundReturn {
        #[allow(missing_docs)]
        pub _0: <ELCRound as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub _1: u8,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<latestELCRoundCall> for UnderlyingRustTuple<'_> {
                fn from(value: latestELCRoundCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for latestELCRoundCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                ELCRound,
                alloy::sol_types::sol_data::Uint<8>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <ELCRound as alloy::sol_types::SolType>::RustType,
                u8,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<latestELCRoundReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: latestELCRoundReturn) -> Self {
                    (value._0, value._1)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for latestELCRoundReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0, _1: tuple.1 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for latestELCRoundCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = latestELCRoundReturn;
            type ReturnTuple<'a> = (ELCRound, alloy::sol_types::sol_data::Uint<8>);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "latestELCRound()";
            const SELECTOR: [u8; 4] = [239u8, 192u8, 52u8, 133u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `resolvedRound(uint64)` and selector `0xdb9ca335`.
```solidity
function resolvedRound(uint64 round) external view returns (ELCRound memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct resolvedRoundCall {
        #[allow(missing_docs)]
        pub round: u64,
    }
    ///Container type for the return parameters of the [`resolvedRound(uint64)`](resolvedRoundCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct resolvedRoundReturn {
        #[allow(missing_docs)]
        pub _0: <ELCRound as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u64,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<resolvedRoundCall> for UnderlyingRustTuple<'_> {
                fn from(value: resolvedRoundCall) -> Self {
                    (value.round,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for resolvedRoundCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { round: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (ELCRound,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <ELCRound as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<resolvedRoundReturn> for UnderlyingRustTuple<'_> {
                fn from(value: resolvedRoundReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for resolvedRoundReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for resolvedRoundCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = resolvedRoundReturn;
            type ReturnTuple<'a> = (ELCRound,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "resolvedRound(uint64)";
            const SELECTOR: [u8; 4] = [219u8, 156u8, 163u8, 53u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.round),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `rounds(uint256)` and selector `0x8c65c81f`.
```solidity
function rounds(uint256) external view returns (address expressLaneController, uint64 round);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct roundsCall {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`rounds(uint256)`](roundsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct roundsReturn {
        #[allow(missing_docs)]
        pub expressLaneController: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub round: u64,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<roundsCall> for UnderlyingRustTuple<'_> {
                fn from(value: roundsCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for roundsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<64>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address, u64);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<roundsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: roundsReturn) -> Self {
                    (value.expressLaneController, value.round)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for roundsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        expressLaneController: tuple.0,
                        round: tuple.1,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for roundsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = roundsReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<64>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "rounds(uint256)";
            const SELECTOR: [u8; 4] = [140u8, 101u8, 200u8, 31u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._0),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setResolvedRound(uint64,address)` and selector `0x67f28c9f`.
```solidity
function setResolvedRound(uint64 round, address expressLaneController) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setResolvedRoundCall {
        #[allow(missing_docs)]
        pub round: u64,
        #[allow(missing_docs)]
        pub expressLaneController: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`setResolvedRound(uint64,address)`](setResolvedRoundCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setResolvedRoundReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<64>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u64, alloy::sol_types::private::Address);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setResolvedRoundCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setResolvedRoundCall) -> Self {
                    (value.round, value.expressLaneController)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setResolvedRoundCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        round: tuple.0,
                        expressLaneController: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setResolvedRoundReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setResolvedRoundReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setResolvedRoundReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setResolvedRoundCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<64>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setResolvedRoundReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setResolvedRound(uint64,address)";
            const SELECTOR: [u8; 4] = [103u8, 242u8, 140u8, 159u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.round),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.expressLaneController,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`LatestELCRoundsImp`](self) function calls.
    pub enum LatestELCRoundsImpCalls {
        #[allow(missing_docs)]
        latestELCRound(latestELCRoundCall),
        #[allow(missing_docs)]
        resolvedRound(resolvedRoundCall),
        #[allow(missing_docs)]
        rounds(roundsCall),
        #[allow(missing_docs)]
        setResolvedRound(setResolvedRoundCall),
    }
    #[automatically_derived]
    impl LatestELCRoundsImpCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [103u8, 242u8, 140u8, 159u8],
            [140u8, 101u8, 200u8, 31u8],
            [219u8, 156u8, 163u8, 53u8],
            [239u8, 192u8, 52u8, 133u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for LatestELCRoundsImpCalls {
        const NAME: &'static str = "LatestELCRoundsImpCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 4usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::latestELCRound(_) => {
                    <latestELCRoundCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::resolvedRound(_) => {
                    <resolvedRoundCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::rounds(_) => <roundsCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::setResolvedRound(_) => {
                    <setResolvedRoundCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<LatestELCRoundsImpCalls>] = &[
                {
                    fn setResolvedRound(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<LatestELCRoundsImpCalls> {
                        <setResolvedRoundCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(LatestELCRoundsImpCalls::setResolvedRound)
                    }
                    setResolvedRound
                },
                {
                    fn rounds(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<LatestELCRoundsImpCalls> {
                        <roundsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(LatestELCRoundsImpCalls::rounds)
                    }
                    rounds
                },
                {
                    fn resolvedRound(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<LatestELCRoundsImpCalls> {
                        <resolvedRoundCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(LatestELCRoundsImpCalls::resolvedRound)
                    }
                    resolvedRound
                },
                {
                    fn latestELCRound(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<LatestELCRoundsImpCalls> {
                        <latestELCRoundCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(LatestELCRoundsImpCalls::latestELCRound)
                    }
                    latestELCRound
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::latestELCRound(inner) => {
                    <latestELCRoundCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::resolvedRound(inner) => {
                    <resolvedRoundCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::rounds(inner) => {
                    <roundsCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::setResolvedRound(inner) => {
                    <setResolvedRoundCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::latestELCRound(inner) => {
                    <latestELCRoundCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::resolvedRound(inner) => {
                    <resolvedRoundCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::rounds(inner) => {
                    <roundsCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::setResolvedRound(inner) => {
                    <setResolvedRoundCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`LatestELCRoundsImp`](self) custom errors.
    pub enum LatestELCRoundsImpErrors {
        #[allow(missing_docs)]
        RoundAlreadyResolved(RoundAlreadyResolved),
        #[allow(missing_docs)]
        RoundNotResolved(RoundNotResolved),
    }
    #[automatically_derived]
    impl LatestELCRoundsImpErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [69u8, 31u8, 135u8, 52u8],
            [251u8, 176u8, 82u8, 216u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for LatestELCRoundsImpErrors {
        const NAME: &'static str = "LatestELCRoundsImpErrors";
        const MIN_DATA_LENGTH: usize = 32usize;
        const COUNT: usize = 2usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::RoundAlreadyResolved(_) => {
                    <RoundAlreadyResolved as alloy_sol_types::SolError>::SELECTOR
                }
                Self::RoundNotResolved(_) => {
                    <RoundNotResolved as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<LatestELCRoundsImpErrors>] = &[
                {
                    fn RoundAlreadyResolved(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<LatestELCRoundsImpErrors> {
                        <RoundAlreadyResolved as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(LatestELCRoundsImpErrors::RoundAlreadyResolved)
                    }
                    RoundAlreadyResolved
                },
                {
                    fn RoundNotResolved(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<LatestELCRoundsImpErrors> {
                        <RoundNotResolved as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(LatestELCRoundsImpErrors::RoundNotResolved)
                    }
                    RoundNotResolved
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::RoundAlreadyResolved(inner) => {
                    <RoundAlreadyResolved as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::RoundNotResolved(inner) => {
                    <RoundNotResolved as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::RoundAlreadyResolved(inner) => {
                    <RoundAlreadyResolved as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::RoundNotResolved(inner) => {
                    <RoundNotResolved as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`LatestELCRoundsImp`](self) contract instance.

See the [wrapper's documentation](`LatestELCRoundsImpInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> LatestELCRoundsImpInstance<T, P, N> {
        LatestELCRoundsImpInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        r: [<ELCRound as alloy::sol_types::SolType>::RustType; 2usize],
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<LatestELCRoundsImpInstance<T, P, N>>,
    > {
        LatestELCRoundsImpInstance::<T, P, N>::deploy(provider, r)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        r: [<ELCRound as alloy::sol_types::SolType>::RustType; 2usize],
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        LatestELCRoundsImpInstance::<T, P, N>::deploy_builder(provider, r)
    }
    /**A [`LatestELCRoundsImp`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`LatestELCRoundsImp`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct LatestELCRoundsImpInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for LatestELCRoundsImpInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("LatestELCRoundsImpInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > LatestELCRoundsImpInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`LatestELCRoundsImp`](self) contract instance.

See the [wrapper's documentation](`LatestELCRoundsImpInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            r: [<ELCRound as alloy::sol_types::SolType>::RustType; 2usize],
        ) -> alloy_contract::Result<LatestELCRoundsImpInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, r);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            r: [<ELCRound as alloy::sol_types::SolType>::RustType; 2usize],
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { r },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> LatestELCRoundsImpInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> LatestELCRoundsImpInstance<T, P, N> {
            LatestELCRoundsImpInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > LatestELCRoundsImpInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`latestELCRound`] function.
        pub fn latestELCRound(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, latestELCRoundCall, N> {
            self.call_builder(&latestELCRoundCall {})
        }
        ///Creates a new call builder for the [`resolvedRound`] function.
        pub fn resolvedRound(
            &self,
            round: u64,
        ) -> alloy_contract::SolCallBuilder<T, &P, resolvedRoundCall, N> {
            self.call_builder(&resolvedRoundCall { round })
        }
        ///Creates a new call builder for the [`rounds`] function.
        pub fn rounds(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, roundsCall, N> {
            self.call_builder(&roundsCall { _0 })
        }
        ///Creates a new call builder for the [`setResolvedRound`] function.
        pub fn setResolvedRound(
            &self,
            round: u64,
            expressLaneController: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, setResolvedRoundCall, N> {
            self.call_builder(
                &setResolvedRoundCall {
                    round,
                    expressLaneController,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > LatestELCRoundsImpInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
