/**

Generated by the following Solidity interface...
```solidity
interface OneStepProverMemory {
    type MachineStatus is uint8;
    type ValueType is uint8;
    struct ExecutionContext {
        uint256 maxInboxMessagesRead;
        address bridge;
        bytes32 initialWasmModuleRoot;
    }
    struct Instruction {
        uint16 opcode;
        uint256 argumentData;
    }
    struct Machine {
        MachineStatus status;
        ValueStack valueStack;
        MultiStack valueMultiStack;
        ValueStack internalStack;
        StackFrameWindow frameStack;
        MultiStack frameMultiStack;
        bytes32 globalStateHash;
        uint32 moduleIdx;
        uint32 functionIdx;
        uint32 functionPc;
        bytes32 recoveryPc;
        bytes32 modulesRoot;
    }
    struct Module {
        bytes32 globalsMerkleRoot;
        ModuleMemory moduleMemory;
        bytes32 tablesMerkleRoot;
        bytes32 functionsMerkleRoot;
        bytes32 extraHash;
        uint32 internalsOffset;
    }
    struct ModuleMemory {
        uint64 size;
        uint64 maxSize;
        bytes32 merkleRoot;
    }
    struct MultiStack {
        bytes32 inactiveStackHash;
        bytes32 remainingHash;
    }
    struct StackFrame {
        Value returnPc;
        bytes32 localsMerkleRoot;
        uint32 callerModule;
        uint32 callerModuleInternals;
    }
    struct StackFrameWindow {
        StackFrame[] proved;
        bytes32 remainingHash;
    }
    struct Value {
        ValueType valueType;
        uint256 contents;
    }
    struct ValueArray {
        Value[] inner;
    }
    struct ValueStack {
        ValueArray proved;
        bytes32 remainingHash;
    }

    function executeOneStep(ExecutionContext memory, Machine memory startMach, Module memory startMod, Instruction memory inst, bytes memory proof) external pure returns (Machine memory mach, Module memory mod);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "executeOneStep",
    "inputs": [
      {
        "name": "",
        "type": "tuple",
        "internalType": "struct ExecutionContext",
        "components": [
          {
            "name": "maxInboxMessagesRead",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "bridge",
            "type": "address",
            "internalType": "contract IBridge"
          },
          {
            "name": "initialWasmModuleRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          }
        ]
      },
      {
        "name": "startMach",
        "type": "tuple",
        "internalType": "struct Machine",
        "components": [
          {
            "name": "status",
            "type": "uint8",
            "internalType": "enum MachineStatus"
          },
          {
            "name": "valueStack",
            "type": "tuple",
            "internalType": "struct ValueStack",
            "components": [
              {
                "name": "proved",
                "type": "tuple",
                "internalType": "struct ValueArray",
                "components": [
                  {
                    "name": "inner",
                    "type": "tuple[]",
                    "internalType": "struct Value[]",
                    "components": [
                      {
                        "name": "valueType",
                        "type": "uint8",
                        "internalType": "enum ValueType"
                      },
                      {
                        "name": "contents",
                        "type": "uint256",
                        "internalType": "uint256"
                      }
                    ]
                  }
                ]
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "valueMultiStack",
            "type": "tuple",
            "internalType": "struct MultiStack",
            "components": [
              {
                "name": "inactiveStackHash",
                "type": "bytes32",
                "internalType": "bytes32"
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "internalStack",
            "type": "tuple",
            "internalType": "struct ValueStack",
            "components": [
              {
                "name": "proved",
                "type": "tuple",
                "internalType": "struct ValueArray",
                "components": [
                  {
                    "name": "inner",
                    "type": "tuple[]",
                    "internalType": "struct Value[]",
                    "components": [
                      {
                        "name": "valueType",
                        "type": "uint8",
                        "internalType": "enum ValueType"
                      },
                      {
                        "name": "contents",
                        "type": "uint256",
                        "internalType": "uint256"
                      }
                    ]
                  }
                ]
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "frameStack",
            "type": "tuple",
            "internalType": "struct StackFrameWindow",
            "components": [
              {
                "name": "proved",
                "type": "tuple[]",
                "internalType": "struct StackFrame[]",
                "components": [
                  {
                    "name": "returnPc",
                    "type": "tuple",
                    "internalType": "struct Value",
                    "components": [
                      {
                        "name": "valueType",
                        "type": "uint8",
                        "internalType": "enum ValueType"
                      },
                      {
                        "name": "contents",
                        "type": "uint256",
                        "internalType": "uint256"
                      }
                    ]
                  },
                  {
                    "name": "localsMerkleRoot",
                    "type": "bytes32",
                    "internalType": "bytes32"
                  },
                  {
                    "name": "callerModule",
                    "type": "uint32",
                    "internalType": "uint32"
                  },
                  {
                    "name": "callerModuleInternals",
                    "type": "uint32",
                    "internalType": "uint32"
                  }
                ]
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "frameMultiStack",
            "type": "tuple",
            "internalType": "struct MultiStack",
            "components": [
              {
                "name": "inactiveStackHash",
                "type": "bytes32",
                "internalType": "bytes32"
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "globalStateHash",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "moduleIdx",
            "type": "uint32",
            "internalType": "uint32"
          },
          {
            "name": "functionIdx",
            "type": "uint32",
            "internalType": "uint32"
          },
          {
            "name": "functionPc",
            "type": "uint32",
            "internalType": "uint32"
          },
          {
            "name": "recoveryPc",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "modulesRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          }
        ]
      },
      {
        "name": "startMod",
        "type": "tuple",
        "internalType": "struct Module",
        "components": [
          {
            "name": "globalsMerkleRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "moduleMemory",
            "type": "tuple",
            "internalType": "struct ModuleMemory",
            "components": [
              {
                "name": "size",
                "type": "uint64",
                "internalType": "uint64"
              },
              {
                "name": "maxSize",
                "type": "uint64",
                "internalType": "uint64"
              },
              {
                "name": "merkleRoot",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "tablesMerkleRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "functionsMerkleRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "extraHash",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "internalsOffset",
            "type": "uint32",
            "internalType": "uint32"
          }
        ]
      },
      {
        "name": "inst",
        "type": "tuple",
        "internalType": "struct Instruction",
        "components": [
          {
            "name": "opcode",
            "type": "uint16",
            "internalType": "uint16"
          },
          {
            "name": "argumentData",
            "type": "uint256",
            "internalType": "uint256"
          }
        ]
      },
      {
        "name": "proof",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "mach",
        "type": "tuple",
        "internalType": "struct Machine",
        "components": [
          {
            "name": "status",
            "type": "uint8",
            "internalType": "enum MachineStatus"
          },
          {
            "name": "valueStack",
            "type": "tuple",
            "internalType": "struct ValueStack",
            "components": [
              {
                "name": "proved",
                "type": "tuple",
                "internalType": "struct ValueArray",
                "components": [
                  {
                    "name": "inner",
                    "type": "tuple[]",
                    "internalType": "struct Value[]",
                    "components": [
                      {
                        "name": "valueType",
                        "type": "uint8",
                        "internalType": "enum ValueType"
                      },
                      {
                        "name": "contents",
                        "type": "uint256",
                        "internalType": "uint256"
                      }
                    ]
                  }
                ]
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "valueMultiStack",
            "type": "tuple",
            "internalType": "struct MultiStack",
            "components": [
              {
                "name": "inactiveStackHash",
                "type": "bytes32",
                "internalType": "bytes32"
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "internalStack",
            "type": "tuple",
            "internalType": "struct ValueStack",
            "components": [
              {
                "name": "proved",
                "type": "tuple",
                "internalType": "struct ValueArray",
                "components": [
                  {
                    "name": "inner",
                    "type": "tuple[]",
                    "internalType": "struct Value[]",
                    "components": [
                      {
                        "name": "valueType",
                        "type": "uint8",
                        "internalType": "enum ValueType"
                      },
                      {
                        "name": "contents",
                        "type": "uint256",
                        "internalType": "uint256"
                      }
                    ]
                  }
                ]
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "frameStack",
            "type": "tuple",
            "internalType": "struct StackFrameWindow",
            "components": [
              {
                "name": "proved",
                "type": "tuple[]",
                "internalType": "struct StackFrame[]",
                "components": [
                  {
                    "name": "returnPc",
                    "type": "tuple",
                    "internalType": "struct Value",
                    "components": [
                      {
                        "name": "valueType",
                        "type": "uint8",
                        "internalType": "enum ValueType"
                      },
                      {
                        "name": "contents",
                        "type": "uint256",
                        "internalType": "uint256"
                      }
                    ]
                  },
                  {
                    "name": "localsMerkleRoot",
                    "type": "bytes32",
                    "internalType": "bytes32"
                  },
                  {
                    "name": "callerModule",
                    "type": "uint32",
                    "internalType": "uint32"
                  },
                  {
                    "name": "callerModuleInternals",
                    "type": "uint32",
                    "internalType": "uint32"
                  }
                ]
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "frameMultiStack",
            "type": "tuple",
            "internalType": "struct MultiStack",
            "components": [
              {
                "name": "inactiveStackHash",
                "type": "bytes32",
                "internalType": "bytes32"
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "globalStateHash",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "moduleIdx",
            "type": "uint32",
            "internalType": "uint32"
          },
          {
            "name": "functionIdx",
            "type": "uint32",
            "internalType": "uint32"
          },
          {
            "name": "functionPc",
            "type": "uint32",
            "internalType": "uint32"
          },
          {
            "name": "recoveryPc",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "modulesRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          }
        ]
      },
      {
        "name": "mod",
        "type": "tuple",
        "internalType": "struct Module",
        "components": [
          {
            "name": "globalsMerkleRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "moduleMemory",
            "type": "tuple",
            "internalType": "struct ModuleMemory",
            "components": [
              {
                "name": "size",
                "type": "uint64",
                "internalType": "uint64"
              },
              {
                "name": "maxSize",
                "type": "uint64",
                "internalType": "uint64"
              },
              {
                "name": "merkleRoot",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "tablesMerkleRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "functionsMerkleRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "extraHash",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "internalsOffset",
            "type": "uint32",
            "internalType": "uint32"
          }
        ]
      }
    ],
    "stateMutability": "pure"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod OneStepProverMemory {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052348015600e575f5ffd5b50611f858061001c5f395ff3fe608060405234801561000f575f5ffd5b5060043610610029575f3560e01c8063a92cb5011461002d575b5f5ffd5b61004061003b3660046114b1565b610057565b60405161004e9291906116a8565b60405180910390f35b61005f6112f8565b6100676113b0565b61007087611bda565b915061008136879003870187611d1a565b90505f6100916020870187611dcb565b905061141a602861ffff8316108015906100b05750603561ffff831611155b156100be57506101b961019b565b603661ffff8316108015906100d85750603e61ffff831611155b156100e6575061060d61019b565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc161ffff83160161011a57506109b061019b565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc061ffff83160161014e57506109e761019b565b60405162461bcd60e51b815260206004820152601560248201527f494e56414c49445f4d454d4f52595f4f50434f4445000000000000000000000060448201526064015b60405180910390fd5b6101ac84848989898663ffffffff16565b5050965096945050505050565b5f808060286101cb6020880188611dcb565b61ffff16036101e257505f91506004905081610420565b60296101f16020880188611dcb565b61ffff1603610209575060019150600890505f610420565b602a6102186020880188611dcb565b61ffff1603610230575060029150600490505f610420565b602b61023f6020880188611dcb565b61ffff1603610257575060039150600890505f610420565b602c6102666020880188611dcb565b61ffff160361027d57505f91506001905080610420565b602d61028c6020880188611dcb565b61ffff16036102a357505f91506001905081610420565b602e6102b26020880188611dcb565b61ffff16036102ca57505f9150600290506001610420565b602f6102d96020880188611dcb565b61ffff16036102f057505f91506002905081610420565b60306102ff6020880188611dcb565b61ffff160361031657506001915081905080610420565b60316103256020880188611dcb565b61ffff160361033c5750600191508190505f610420565b603261034b6020880188611dcb565b61ffff16036103635750600191506002905081610420565b60336103726020880188611dcb565b61ffff160361038a575060019150600290505f610420565b60346103996020880188611dcb565b61ffff16036103b15750600191506004905081610420565b60356103c06020880188611dcb565b61ffff16036103d8575060019150600490505f610420565b60405162461bcd60e51b815260206004820152601a60248201527f494e56414c49445f4d454d4f52595f4c4f41445f4f50434f44450000000000006044820152606401610192565b5f6104366104318a60200151610a94565b610aad565b61044a9063ffffffff166020890135611e00565b60208901519091505f9081906104649084878b8b86610b69565b5091509150811561047f575050600289525061060692505050565b8084156105c2578560011480156104a657505f8760068111156104a4576104a4611584565b145b156104bb57805f0b63ffffffff1690506105c2565b8560011480156104dc575060018760068111156104da576104da611584565b145b156104e8575f0b6105c2565b85600214801561050857505f87600681111561050657610506611584565b145b1561051e578060010b63ffffffff1690506105c2565b85600214801561053f5750600187600681111561053d5761053d611584565b145b1561054c5760010b6105c2565b85600414801561056d5750600187600681111561056b5761056b611584565b145b1561057a5760030b6105c2565b60405162461bcd60e51b815260206004820152601560248201527f4241445f524541445f42595445535f5349474e454400000000000000000000006044820152606401610192565b6105fe60405180604001604052808960068111156105e2576105e2611584565b815267ffffffffffffffff84166020918201528e015190610c30565b505050505050505b5050505050565b5f8080603661061f6020880188611dcb565b61ffff16036106335750600491505f610798565b60376106426020880188611dcb565b61ffff16036106575750600891506001610798565b60386106666020880188611dcb565b61ffff160361067b5750600491506002610798565b603961068a6020880188611dcb565b61ffff160361069f5750600891506003610798565b603a6106ae6020880188611dcb565b61ffff16036106c25750600191505f610798565b603b6106d16020880188611dcb565b61ffff16036106e55750600291505f610798565b603c6106f46020880188611dcb565b61ffff160361070857506001915081610798565b603d6107176020880188611dcb565b61ffff160361072c5750600291506001610798565b603e61073b6020880188611dcb565b61ffff16036107505750600491506001610798565b60405162461bcd60e51b815260206004820152601b60248201527f494e56414c49445f4d454d4f52595f53544f52455f4f50434f444500000000006044820152606401610192565b5f6107a68960200151610a94565b90508160068111156107ba576107ba611584565b815160068111156107cd576107cd611584565b1461081a5760405162461bcd60e51b815260206004820152600e60248201527f4241445f53544f52455f545950450000000000000000000000000000000000006044820152606401610192565b8060200151925060088467ffffffffffffffff161015610868576001610841856008611e13565b67ffffffffffffffff16600167ffffffffffffffff16901b6108639190611e3d565b831692505b50505f61087b6104318960200151610a94565b61088f9063ffffffff166020880135611e00565b905086602001515f015167ffffffffffffffff168367ffffffffffffffff16826108b99190611e00565b11156108cb5750506002865250610606565b6040805160208101909152606081525f905f19905f805b8767ffffffffffffffff1681101561098d575f6108ff8288611e00565b90505f61090d602083611e71565b9050858114610951575f19861461093357610929858786610c40565b60208f0151604001525b6109448e60200151828e8e8b610cdb565b9098509196509094509250845b5f61095d602084611e84565b905061096a85828c610d82565b945060088a67ffffffffffffffff16901c995050505080806001019150506108e2565b50610999828483610c40565b60208c015160400152505050505050505050505050565b6020840151515f906109c6906201000090611e97565b90506109df6109d482610e0d565b602088015190610c30565b505050505050565b6020840151515f906109fd906201000090611e97565b90505f610a106104318860200151610a94565b90505f610a2663ffffffff808416908516611e00565b905086602001516020015167ffffffffffffffff168111610a7d57610a4e6201000082611ec6565b602088015167ffffffffffffffff9091169052610a78610a6d84610e0d565b60208a015190610c30565b610a8a565b610a8a610a6d5f19610e0d565b5050505050505050565b610a9c611424565b8151610aa790610e33565b92915050565b60208101515f908183516006811115610ac857610ac8611584565b14610b155760405162461bcd60e51b815260206004820152600760248201527f4e4f545f493332000000000000000000000000000000000000000000000000006044820152606401610192565b6401000000008110610aa75760405162461bcd60e51b815260206004820152600760248201527f4241445f493332000000000000000000000000000000000000000000000000006044820152606401610192565b85515f908190819067ffffffffffffffff16610b85888a611e00565b1115610b995750600191505f905082610c24565b5f195f80805b8a811015610c18575f610bb2828e611e00565b90505f610bc0602083611e71565b9050858114610be057610bd68f828e8e8e610cdb565b509a509095509350845b5f610bec602084611e84565b9050610bf9846008611ec6565b610c038783610f1e565b60ff16901b9490941793505050600101610b9f565b505f9550935085925050505b96509650969350505050565b8151610c3c9082610f9d565b5050565b6040517f4d656d6f7279206c6561663a00000000000000000000000000000000000000006020820152602c81018290525f908190604c01604051602081830303815290604052805190602001209050610cd08585836040518060400160405280601381526020017f4d656d6f7279206d65726b6c6520747265653a00000000000000000000000000815250611077565b9150505b9392505050565b5f5f610cf36040518060200160405280606081525090565b839150610d01868684611189565b9093509150610d118686846111a4565b925090505f610d21828986610c40565b905088604001518114610d765760405162461bcd60e51b815260206004820152600e60248201527f57524f4e475f4d454d5f524f4f540000000000000000000000000000000000006044820152606401610192565b50955095509592505050565b5f60208310610dd35760405162461bcd60e51b815260206004820152601560248201527f4241445f5345545f4c4541465f425954455f49445800000000000000000000006044820152606401610192565b5f83610de160016020611edd565b610deb9190611edd565b610df6906008611ec6565b60ff848116821b911b198616179150509392505050565b610e15611424565b50604080518082019091525f815263ffffffff909116602082015290565b610e3b611424565b81518051610e4b90600190611edd565b81518110610e5b57610e5b611ef0565b602002602001015190505f6001835f015151610e779190611edd565b67ffffffffffffffff811115610e8f57610e8f611824565b604051908082528060200260200182016040528015610ec857816020015b610eb5611424565b815260200190600190039081610ead5790505b5090505f5b8151811015610f17578351805182908110610eea57610eea611ef0565b6020026020010151828281518110610f0457610f04611ef0565b6020908102919091010152600101610ecd565b5090915290565b5f60208210610f6f5760405162461bcd60e51b815260206004820152601660248201527f4241445f50554c4c5f4c4541465f425954455f494458000000000000000000006044820152606401610192565b5f82610f7d60016020611edd565b610f879190611edd565b610f92906008611ec6565b9390931c9392505050565b8151515f90610fad906001611e00565b67ffffffffffffffff811115610fc557610fc5611824565b604051908082528060200260200182016040528015610ffe57816020015b610feb611424565b815260200190600190039081610fe35790505b5090505f5b83515181101561104e57835180518290811061102157611021611ef0565b602002602001015182828151811061103b5761103b611ef0565b6020908102919091010152600101611003565b508181845f0151518151811061106657611066611ef0565b602090810291909101015290915250565b815f5b85515181101561113257846001165f036110dc578282875f015183815181106110a5576110a5611ef0565b60200260200101516040516020016110bf93929190611f04565b604051602081830303815290604052805190602001209150611126565b82865f015182815181106110f2576110f2611ef0565b60200260200101518360405160200161110d93929190611f04565b6040516020818303038152906040528051906020012091505b600194851c940161107a565b5083156111815760405162461bcd60e51b815260206004820152600f60248201527f50524f4f465f544f4f5f53484f525400000000000000000000000000000000006044820152606401610192565b949350505050565b5f8181611197868684611271565b9097909650945050505050565b604080516020810190915260608152815f6111c08686846112c3565b925090505f60ff821667ffffffffffffffff8111156111e1576111e1611824565b60405190808252806020026020018201604052801561120a578160200160208202803683370190505b5090505f5b8260ff168160ff16101561125557611228888886611189565b838360ff168151811061123d5761123d611ef0565b6020908102919091010191909152935060010161120f565b5060405180602001604052808281525093505050935093915050565b5f81815b60208110156112ba57600883901b925085858381811061129757611297611ef0565b919091013560f81c939093179250816112af81611f23565b925050600101611275565b50935093915050565b5f818484828181106112d7576112d7611ef0565b919091013560f81c92508190506112ed81611f23565b915050935093915050565b604080516101808101909152805f815260200161131361143d565b815260200161133360405180604001604052805f81526020015f81525090565b815260200161134061143d565b81526020016113616040518060400160405280606081526020015f81525090565b815260200161138160405180604001604052805f81526020015f81525090565b81525f6020820181905260408201819052606082018190526080820181905260a0820181905260c09091015290565b6040518060c001604052805f81526020016113f660405180606001604052805f67ffffffffffffffff1681526020015f67ffffffffffffffff1681526020015f81525090565b81526020015f81526020015f81526020015f81526020015f63ffffffff1681525090565b611422611f3b565b565b60408051808201909152805f5b81526020015f81525090565b6040805160608082018352918101918252908190611431565b5f60408284031215611466575f5ffd5b50919050565b5f5f83601f84011261147c575f5ffd5b50813567ffffffffffffffff811115611493575f5ffd5b6020830191508360208285010111156114aa575f5ffd5b9250929050565b5f5f5f5f5f5f8688036101e08112156114c8575f5ffd5b60608112156114d5575f5ffd5b879650606088013567ffffffffffffffff8111156114f1575f5ffd5b88016101c0818b031215611503575f5ffd5b95506101007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8082011215611535575f5ffd5b5060808701935061154a886101808901611456565b92506101c087013567ffffffffffffffff811115611566575f5ffd5b61157289828a0161146c565b979a9699509497509295939492505050565b634e487b7160e01b5f52602160045260245ffd5b600381106115a8576115a8611584565b9052565b8051600781106115be576115be611584565b8252602090810151910152565b80516040808452905160209184018290528051606085018190525f9290910190829060808601905b8083101561161d576116068285516115ac565b6040820191506020840193506001830192506115f3565b506020850151602087015280935050505092915050565b8051604080845281519084018190525f9160200190829060608601905b8083101561161d5783516116668382516115ac565b6020810151604084015263ffffffff604082015116606084015263ffffffff60608201511660808401525060a082019150602084019350600183019250611651565b61012081526116bc61012082018451611598565b5f60208401516101c06101408401526116d96102e08401826115cb565b6040860151805161016086015260200151610180850152606086015184820361011f19016101a086015290915061171082826115cb565b915050608085015161011f19848303016101c08501526117308282611634565b91505060a08501516117506101e085018280518252602090810151910152565b5060c085015161022084015260e085015163ffffffff81166102408501525061010085015163ffffffff81166102608501525061012085015163ffffffff8116610280850152506101408501516102a08401526101608501516102c08401529050610cd4602083018480518252602081015167ffffffffffffffff815116602084015267ffffffffffffffff6020820151166040840152604081015160608401525060408101516080830152606081015160a0830152608081015160c083015263ffffffff60a08201511660e08301525050565b634e487b7160e01b5f52604160045260245ffd5b6040805190810167ffffffffffffffff8111828210171561185b5761185b611824565b60405290565b6040516020810167ffffffffffffffff8111828210171561185b5761185b611824565b6040516080810167ffffffffffffffff8111828210171561185b5761185b611824565b604051610180810167ffffffffffffffff8111828210171561185b5761185b611824565b60405160c0810167ffffffffffffffff8111828210171561185b5761185b611824565b6040516060810167ffffffffffffffff8111828210171561185b5761185b611824565b604051601f8201601f1916810167ffffffffffffffff8111828210171561193a5761193a611824565b604052919050565b803560038110611950575f5ffd5b919050565b5f67ffffffffffffffff82111561196e5761196e611824565b5060051b60200190565b5f60408284031215611988575f5ffd5b611990611838565b90508135600781106119a0575f5ffd5b808252506020820135602082015292915050565b5f604082840312156119c4575f5ffd5b6119cc611838565b9050813567ffffffffffffffff8111156119e4575f5ffd5b8201602081850312156119f5575f5ffd5b6119fd611861565b813567ffffffffffffffff811115611a13575f5ffd5b80830192505084601f830112611a27575f5ffd5b8135611a3a611a3582611955565b611911565b8082825260208201915060208360061b860101925087831115611a5b575f5ffd5b6020850194505b82851015611a8757611a748886611978565b8252602082019150604085019450611a62565b8352505082525060209182013591810191909152919050565b5f60408284031215611ab0575f5ffd5b611ab8611838565b823581526020928301359281019290925250919050565b803563ffffffff81168114611950575f5ffd5b5f60408284031215611af2575f5ffd5b611afa611838565b9050813567ffffffffffffffff811115611b12575f5ffd5b8201601f81018413611b22575f5ffd5b8035611b30611a3582611955565b80828252602082019150602060a08402850101925086831115611b51575f5ffd5b6020840193505b82841015611bc35760a08488031215611b6f575f5ffd5b611b77611884565b611b818886611978565b815260408501356020820152611b9960608601611acf565b6040820152611baa60808601611acf565b6060820152825260a09390930192602090910190611b58565b845250505060209182013591810191909152919050565b5f6101c08236031215611beb575f5ffd5b611bf36118a7565b611bfc83611942565b8152602083013567ffffffffffffffff811115611c17575f5ffd5b611c23368286016119b4565b602083015250611c363660408501611aa0565b6040820152608083013567ffffffffffffffff811115611c54575f5ffd5b611c60368286016119b4565b60608301525060a083013567ffffffffffffffff811115611c7f575f5ffd5b611c8b36828601611ae2565b608083015250611c9e3660c08501611aa0565b60a082015261010083013560c0820152611cbb6101208401611acf565b60e0820152611ccd6101408401611acf565b610100820152611ce06101608401611acf565b6101208201526101808301356101408201526101a0909201356101608301525090565b803567ffffffffffffffff81168114611950575f5ffd5b5f81830361010081128015611d2d575f5ffd5b50611d366118cb565b833581526060601f1983011215611d4b575f5ffd5b611d536118ee565b9150611d6160208501611d03565b8252611d6f60408501611d03565b602083810191909152606085810135604080860191909152918301939093526080808601359183019190915260a08501359282019290925260c0840135918101829052611dbe60e08501611acf565b60a0820152949350505050565b5f60208284031215611ddb575f5ffd5b813561ffff81168114610cd4575f5ffd5b634e487b7160e01b5f52601160045260245ffd5b80820180821115610aa757610aa7611dec565b67ffffffffffffffff8181168382160290811690818114611e3657611e36611dec565b5092915050565b67ffffffffffffffff8281168282160390811115610aa757610aa7611dec565b634e487b7160e01b5f52601260045260245ffd5b5f82611e7f57611e7f611e5d565b500490565b5f82611e9257611e92611e5d565b500690565b5f67ffffffffffffffff831680611eb057611eb0611e5d565b8067ffffffffffffffff84160491505092915050565b8082028115828204841417610aa757610aa7611dec565b81810381811115610aa757610aa7611dec565b634e487b7160e01b5f52603260045260245ffd5b5f84518060208701845e91909101928352506020820152604001919050565b5f60018201611f3457611f34611dec565b5060010190565b634e487b7160e01b5f52605160045260245ffdfea2646970667358221220356f76ae487436a183a168e5f5f9b24c0c0abb224d7b605784e44a10c3cfa84964736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15`\x0EW__\xFD[Pa\x1F\x85\x80a\0\x1C_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0)W_5`\xE0\x1C\x80c\xA9,\xB5\x01\x14a\0-W[__\xFD[a\0@a\0;6`\x04a\x14\xB1V[a\0WV[`@Qa\0N\x92\x91\x90a\x16\xA8V[`@Q\x80\x91\x03\x90\xF3[a\0_a\x12\xF8V[a\0ga\x13\xB0V[a\0p\x87a\x1B\xDAV[\x91Pa\0\x816\x87\x90\x03\x87\x01\x87a\x1D\x1AV[\x90P_a\0\x91` \x87\x01\x87a\x1D\xCBV[\x90Pa\x14\x1A`(a\xFF\xFF\x83\x16\x10\x80\x15\x90a\0\xB0WP`5a\xFF\xFF\x83\x16\x11\x15[\x15a\0\xBEWPa\x01\xB9a\x01\x9BV[`6a\xFF\xFF\x83\x16\x10\x80\x15\x90a\0\xD8WP`>a\xFF\xFF\x83\x16\x11\x15[\x15a\0\xE6WPa\x06\ra\x01\x9BV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xC1a\xFF\xFF\x83\x16\x01a\x01\x1AWPa\t\xB0a\x01\x9BV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xC0a\xFF\xFF\x83\x16\x01a\x01NWPa\t\xE7a\x01\x9BV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x15`$\x82\x01R\x7FINVALID_MEMORY_OPCODE\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01[`@Q\x80\x91\x03\x90\xFD[a\x01\xAC\x84\x84\x89\x89\x89\x86c\xFF\xFF\xFF\xFF\x16V[PP\x96P\x96\x94PPPPPV[_\x80\x80`(a\x01\xCB` \x88\x01\x88a\x1D\xCBV[a\xFF\xFF\x16\x03a\x01\xE2WP_\x91P`\x04\x90P\x81a\x04 V[`)a\x01\xF1` \x88\x01\x88a\x1D\xCBV[a\xFF\xFF\x16\x03a\x02\tWP`\x01\x91P`\x08\x90P_a\x04 V[`*a\x02\x18` \x88\x01\x88a\x1D\xCBV[a\xFF\xFF\x16\x03a\x020WP`\x02\x91P`\x04\x90P_a\x04 V[`+a\x02?` \x88\x01\x88a\x1D\xCBV[a\xFF\xFF\x16\x03a\x02WWP`\x03\x91P`\x08\x90P_a\x04 V[`,a\x02f` \x88\x01\x88a\x1D\xCBV[a\xFF\xFF\x16\x03a\x02}WP_\x91P`\x01\x90P\x80a\x04 V[`-a\x02\x8C` \x88\x01\x88a\x1D\xCBV[a\xFF\xFF\x16\x03a\x02\xA3WP_\x91P`\x01\x90P\x81a\x04 V[`.a\x02\xB2` \x88\x01\x88a\x1D\xCBV[a\xFF\xFF\x16\x03a\x02\xCAWP_\x91P`\x02\x90P`\x01a\x04 V[`/a\x02\xD9` \x88\x01\x88a\x1D\xCBV[a\xFF\xFF\x16\x03a\x02\xF0WP_\x91P`\x02\x90P\x81a\x04 V[`0a\x02\xFF` \x88\x01\x88a\x1D\xCBV[a\xFF\xFF\x16\x03a\x03\x16WP`\x01\x91P\x81\x90P\x80a\x04 V[`1a\x03%` \x88\x01\x88a\x1D\xCBV[a\xFF\xFF\x16\x03a\x03<WP`\x01\x91P\x81\x90P_a\x04 V[`2a\x03K` \x88\x01\x88a\x1D\xCBV[a\xFF\xFF\x16\x03a\x03cWP`\x01\x91P`\x02\x90P\x81a\x04 V[`3a\x03r` \x88\x01\x88a\x1D\xCBV[a\xFF\xFF\x16\x03a\x03\x8AWP`\x01\x91P`\x02\x90P_a\x04 V[`4a\x03\x99` \x88\x01\x88a\x1D\xCBV[a\xFF\xFF\x16\x03a\x03\xB1WP`\x01\x91P`\x04\x90P\x81a\x04 V[`5a\x03\xC0` \x88\x01\x88a\x1D\xCBV[a\xFF\xFF\x16\x03a\x03\xD8WP`\x01\x91P`\x04\x90P_a\x04 V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1A`$\x82\x01R\x7FINVALID_MEMORY_LOAD_OPCODE\0\0\0\0\0\0`D\x82\x01R`d\x01a\x01\x92V[_a\x046a\x041\x8A` \x01Qa\n\x94V[a\n\xADV[a\x04J\x90c\xFF\xFF\xFF\xFF\x16` \x89\x015a\x1E\0V[` \x89\x01Q\x90\x91P_\x90\x81\x90a\x04d\x90\x84\x87\x8B\x8B\x86a\x0BiV[P\x91P\x91P\x81\x15a\x04\x7FWPP`\x02\x89RPa\x06\x06\x92PPPV[\x80\x84\x15a\x05\xC2W\x85`\x01\x14\x80\x15a\x04\xA6WP_\x87`\x06\x81\x11\x15a\x04\xA4Wa\x04\xA4a\x15\x84V[\x14[\x15a\x04\xBBW\x80_\x0Bc\xFF\xFF\xFF\xFF\x16\x90Pa\x05\xC2V[\x85`\x01\x14\x80\x15a\x04\xDCWP`\x01\x87`\x06\x81\x11\x15a\x04\xDAWa\x04\xDAa\x15\x84V[\x14[\x15a\x04\xE8W_\x0Ba\x05\xC2V[\x85`\x02\x14\x80\x15a\x05\x08WP_\x87`\x06\x81\x11\x15a\x05\x06Wa\x05\x06a\x15\x84V[\x14[\x15a\x05\x1EW\x80`\x01\x0Bc\xFF\xFF\xFF\xFF\x16\x90Pa\x05\xC2V[\x85`\x02\x14\x80\x15a\x05?WP`\x01\x87`\x06\x81\x11\x15a\x05=Wa\x05=a\x15\x84V[\x14[\x15a\x05LW`\x01\x0Ba\x05\xC2V[\x85`\x04\x14\x80\x15a\x05mWP`\x01\x87`\x06\x81\x11\x15a\x05kWa\x05ka\x15\x84V[\x14[\x15a\x05zW`\x03\x0Ba\x05\xC2V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x15`$\x82\x01R\x7FBAD_READ_BYTES_SIGNED\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x01\x92V[a\x05\xFE`@Q\x80`@\x01`@R\x80\x89`\x06\x81\x11\x15a\x05\xE2Wa\x05\xE2a\x15\x84V[\x81Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x16` \x91\x82\x01R\x8E\x01Q\x90a\x0C0V[PPPPPPP[PPPPPV[_\x80\x80`6a\x06\x1F` \x88\x01\x88a\x1D\xCBV[a\xFF\xFF\x16\x03a\x063WP`\x04\x91P_a\x07\x98V[`7a\x06B` \x88\x01\x88a\x1D\xCBV[a\xFF\xFF\x16\x03a\x06WWP`\x08\x91P`\x01a\x07\x98V[`8a\x06f` \x88\x01\x88a\x1D\xCBV[a\xFF\xFF\x16\x03a\x06{WP`\x04\x91P`\x02a\x07\x98V[`9a\x06\x8A` \x88\x01\x88a\x1D\xCBV[a\xFF\xFF\x16\x03a\x06\x9FWP`\x08\x91P`\x03a\x07\x98V[`:a\x06\xAE` \x88\x01\x88a\x1D\xCBV[a\xFF\xFF\x16\x03a\x06\xC2WP`\x01\x91P_a\x07\x98V[`;a\x06\xD1` \x88\x01\x88a\x1D\xCBV[a\xFF\xFF\x16\x03a\x06\xE5WP`\x02\x91P_a\x07\x98V[`<a\x06\xF4` \x88\x01\x88a\x1D\xCBV[a\xFF\xFF\x16\x03a\x07\x08WP`\x01\x91P\x81a\x07\x98V[`=a\x07\x17` \x88\x01\x88a\x1D\xCBV[a\xFF\xFF\x16\x03a\x07,WP`\x02\x91P`\x01a\x07\x98V[`>a\x07;` \x88\x01\x88a\x1D\xCBV[a\xFF\xFF\x16\x03a\x07PWP`\x04\x91P`\x01a\x07\x98V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1B`$\x82\x01R\x7FINVALID_MEMORY_STORE_OPCODE\0\0\0\0\0`D\x82\x01R`d\x01a\x01\x92V[_a\x07\xA6\x89` \x01Qa\n\x94V[\x90P\x81`\x06\x81\x11\x15a\x07\xBAWa\x07\xBAa\x15\x84V[\x81Q`\x06\x81\x11\x15a\x07\xCDWa\x07\xCDa\x15\x84V[\x14a\x08\x1AW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0E`$\x82\x01R\x7FBAD_STORE_TYPE\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x01\x92V[\x80` \x01Q\x92P`\x08\x84g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x10\x15a\x08hW`\x01a\x08A\x85`\x08a\x1E\x13V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x1Ba\x08c\x91\x90a\x1E=V[\x83\x16\x92P[PP_a\x08{a\x041\x89` \x01Qa\n\x94V[a\x08\x8F\x90c\xFF\xFF\xFF\xFF\x16` \x88\x015a\x1E\0V[\x90P\x86` \x01Q_\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82a\x08\xB9\x91\x90a\x1E\0V[\x11\x15a\x08\xCBWPP`\x02\x86RPa\x06\x06V[`@\x80Q` \x81\x01\x90\x91R``\x81R_\x90_\x19\x90_\x80[\x87g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81\x10\x15a\t\x8DW_a\x08\xFF\x82\x88a\x1E\0V[\x90P_a\t\r` \x83a\x1EqV[\x90P\x85\x81\x14a\tQW_\x19\x86\x14a\t3Wa\t)\x85\x87\x86a\x0C@V[` \x8F\x01Q`@\x01R[a\tD\x8E` \x01Q\x82\x8E\x8E\x8Ba\x0C\xDBV[\x90\x98P\x91\x96P\x90\x94P\x92P\x84[_a\t]` \x84a\x1E\x84V[\x90Pa\tj\x85\x82\x8Ca\r\x82V[\x94P`\x08\x8Ag\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x1C\x99PPPP\x80\x80`\x01\x01\x91PPa\x08\xE2V[Pa\t\x99\x82\x84\x83a\x0C@V[` \x8C\x01Q`@\x01RPPPPPPPPPPPPV[` \x84\x01QQ_\x90a\t\xC6\x90b\x01\0\0\x90a\x1E\x97V[\x90Pa\t\xDFa\t\xD4\x82a\x0E\rV[` \x88\x01Q\x90a\x0C0V[PPPPPPV[` \x84\x01QQ_\x90a\t\xFD\x90b\x01\0\0\x90a\x1E\x97V[\x90P_a\n\x10a\x041\x88` \x01Qa\n\x94V[\x90P_a\n&c\xFF\xFF\xFF\xFF\x80\x84\x16\x90\x85\x16a\x1E\0V[\x90P\x86` \x01Q` \x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81\x11a\n}Wa\nNb\x01\0\0\x82a\x1E\xC6V[` \x88\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16\x90Ra\nxa\nm\x84a\x0E\rV[` \x8A\x01Q\x90a\x0C0V[a\n\x8AV[a\n\x8Aa\nm_\x19a\x0E\rV[PPPPPPPPV[a\n\x9Ca\x14$V[\x81Qa\n\xA7\x90a\x0E3V[\x92\x91PPV[` \x81\x01Q_\x90\x81\x83Q`\x06\x81\x11\x15a\n\xC8Wa\n\xC8a\x15\x84V[\x14a\x0B\x15W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FNOT_I32\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x01\x92V[d\x01\0\0\0\0\x81\x10a\n\xA7W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FBAD_I32\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x01\x92V[\x85Q_\x90\x81\x90\x81\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x0B\x85\x88\x8Aa\x1E\0V[\x11\x15a\x0B\x99WP`\x01\x91P_\x90P\x82a\x0C$V[_\x19_\x80\x80[\x8A\x81\x10\x15a\x0C\x18W_a\x0B\xB2\x82\x8Ea\x1E\0V[\x90P_a\x0B\xC0` \x83a\x1EqV[\x90P\x85\x81\x14a\x0B\xE0Wa\x0B\xD6\x8F\x82\x8E\x8E\x8Ea\x0C\xDBV[P\x9AP\x90\x95P\x93P\x84[_a\x0B\xEC` \x84a\x1E\x84V[\x90Pa\x0B\xF9\x84`\x08a\x1E\xC6V[a\x0C\x03\x87\x83a\x0F\x1EV[`\xFF\x16\x90\x1B\x94\x90\x94\x17\x93PPP`\x01\x01a\x0B\x9FV[P_\x95P\x93P\x85\x92PPP[\x96P\x96P\x96\x93PPPPV[\x81Qa\x0C<\x90\x82a\x0F\x9DV[PPV[`@Q\x7FMemory leaf:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`,\x81\x01\x82\x90R_\x90\x81\x90`L\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90Pa\x0C\xD0\x85\x85\x83`@Q\x80`@\x01`@R\x80`\x13\x81R` \x01\x7FMemory merkle tree:\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RPa\x10wV[\x91PP[\x93\x92PPPV[__a\x0C\xF3`@Q\x80` \x01`@R\x80``\x81RP\x90V[\x83\x91Pa\r\x01\x86\x86\x84a\x11\x89V[\x90\x93P\x91Pa\r\x11\x86\x86\x84a\x11\xA4V[\x92P\x90P_a\r!\x82\x89\x86a\x0C@V[\x90P\x88`@\x01Q\x81\x14a\rvW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0E`$\x82\x01R\x7FWRONG_MEM_ROOT\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x01\x92V[P\x95P\x95P\x95\x92PPPV[_` \x83\x10a\r\xD3W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x15`$\x82\x01R\x7FBAD_SET_LEAF_BYTE_IDX\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x01\x92V[_\x83a\r\xE1`\x01` a\x1E\xDDV[a\r\xEB\x91\x90a\x1E\xDDV[a\r\xF6\x90`\x08a\x1E\xC6V[`\xFF\x84\x81\x16\x82\x1B\x91\x1B\x19\x86\x16\x17\x91PP\x93\x92PPPV[a\x0E\x15a\x14$V[P`@\x80Q\x80\x82\x01\x90\x91R_\x81Rc\xFF\xFF\xFF\xFF\x90\x91\x16` \x82\x01R\x90V[a\x0E;a\x14$V[\x81Q\x80Qa\x0EK\x90`\x01\x90a\x1E\xDDV[\x81Q\x81\x10a\x0E[Wa\x0E[a\x1E\xF0V[` \x02` \x01\x01Q\x90P_`\x01\x83_\x01QQa\x0Ew\x91\x90a\x1E\xDDV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0E\x8FWa\x0E\x8Fa\x18$V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x0E\xC8W\x81` \x01[a\x0E\xB5a\x14$V[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x0E\xADW\x90P[P\x90P_[\x81Q\x81\x10\x15a\x0F\x17W\x83Q\x80Q\x82\x90\x81\x10a\x0E\xEAWa\x0E\xEAa\x1E\xF0V[` \x02` \x01\x01Q\x82\x82\x81Q\x81\x10a\x0F\x04Wa\x0F\x04a\x1E\xF0V[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a\x0E\xCDV[P\x90\x91R\x90V[_` \x82\x10a\x0FoW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x16`$\x82\x01R\x7FBAD_PULL_LEAF_BYTE_IDX\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x01\x92V[_\x82a\x0F}`\x01` a\x1E\xDDV[a\x0F\x87\x91\x90a\x1E\xDDV[a\x0F\x92\x90`\x08a\x1E\xC6V[\x93\x90\x93\x1C\x93\x92PPPV[\x81QQ_\x90a\x0F\xAD\x90`\x01a\x1E\0V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0F\xC5Wa\x0F\xC5a\x18$V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x0F\xFEW\x81` \x01[a\x0F\xEBa\x14$V[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x0F\xE3W\x90P[P\x90P_[\x83QQ\x81\x10\x15a\x10NW\x83Q\x80Q\x82\x90\x81\x10a\x10!Wa\x10!a\x1E\xF0V[` \x02` \x01\x01Q\x82\x82\x81Q\x81\x10a\x10;Wa\x10;a\x1E\xF0V[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a\x10\x03V[P\x81\x81\x84_\x01QQ\x81Q\x81\x10a\x10fWa\x10fa\x1E\xF0V[` \x90\x81\x02\x91\x90\x91\x01\x01R\x90\x91RPV[\x81_[\x85QQ\x81\x10\x15a\x112W\x84`\x01\x16_\x03a\x10\xDCW\x82\x82\x87_\x01Q\x83\x81Q\x81\x10a\x10\xA5Wa\x10\xA5a\x1E\xF0V[` \x02` \x01\x01Q`@Q` \x01a\x10\xBF\x93\x92\x91\x90a\x1F\x04V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x91Pa\x11&V[\x82\x86_\x01Q\x82\x81Q\x81\x10a\x10\xF2Wa\x10\xF2a\x1E\xF0V[` \x02` \x01\x01Q\x83`@Q` \x01a\x11\r\x93\x92\x91\x90a\x1F\x04V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x91P[`\x01\x94\x85\x1C\x94\x01a\x10zV[P\x83\x15a\x11\x81W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0F`$\x82\x01R\x7FPROOF_TOO_SHORT\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x01\x92V[\x94\x93PPPPV[_\x81\x81a\x11\x97\x86\x86\x84a\x12qV[\x90\x97\x90\x96P\x94PPPPPV[`@\x80Q` \x81\x01\x90\x91R``\x81R\x81_a\x11\xC0\x86\x86\x84a\x12\xC3V[\x92P\x90P_`\xFF\x82\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x11\xE1Wa\x11\xE1a\x18$V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x12\nW\x81` \x01` \x82\x02\x806\x837\x01\x90P[P\x90P_[\x82`\xFF\x16\x81`\xFF\x16\x10\x15a\x12UWa\x12(\x88\x88\x86a\x11\x89V[\x83\x83`\xFF\x16\x81Q\x81\x10a\x12=Wa\x12=a\x1E\xF0V[` \x90\x81\x02\x91\x90\x91\x01\x01\x91\x90\x91R\x93P`\x01\x01a\x12\x0FV[P`@Q\x80` \x01`@R\x80\x82\x81RP\x93PPP\x93P\x93\x91PPV[_\x81\x81[` \x81\x10\x15a\x12\xBAW`\x08\x83\x90\x1B\x92P\x85\x85\x83\x81\x81\x10a\x12\x97Wa\x12\x97a\x1E\xF0V[\x91\x90\x91\x015`\xF8\x1C\x93\x90\x93\x17\x92P\x81a\x12\xAF\x81a\x1F#V[\x92PP`\x01\x01a\x12uV[P\x93P\x93\x91PPV[_\x81\x84\x84\x82\x81\x81\x10a\x12\xD7Wa\x12\xD7a\x1E\xF0V[\x91\x90\x91\x015`\xF8\x1C\x92P\x81\x90Pa\x12\xED\x81a\x1F#V[\x91PP\x93P\x93\x91PPV[`@\x80Qa\x01\x80\x81\x01\x90\x91R\x80_\x81R` \x01a\x13\x13a\x14=V[\x81R` \x01a\x133`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a\x13@a\x14=V[\x81R` \x01a\x13a`@Q\x80`@\x01`@R\x80``\x81R` \x01_\x81RP\x90V[\x81R` \x01a\x13\x81`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R_` \x82\x01\x81\x90R`@\x82\x01\x81\x90R``\x82\x01\x81\x90R`\x80\x82\x01\x81\x90R`\xA0\x82\x01\x81\x90R`\xC0\x90\x91\x01R\x90V[`@Q\x80`\xC0\x01`@R\x80_\x81R` \x01a\x13\xF6`@Q\x80``\x01`@R\x80_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_\x81RP\x90V[\x81R` \x01_\x81R` \x01_\x81R` \x01_\x81R` \x01_c\xFF\xFF\xFF\xFF\x16\x81RP\x90V[a\x14\"a\x1F;V[V[`@\x80Q\x80\x82\x01\x90\x91R\x80_[\x81R` \x01_\x81RP\x90V[`@\x80Q``\x80\x82\x01\x83R\x91\x81\x01\x91\x82R\x90\x81\x90a\x141V[_`@\x82\x84\x03\x12\x15a\x14fW__\xFD[P\x91\x90PV[__\x83`\x1F\x84\x01\x12a\x14|W__\xFD[P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x14\x93W__\xFD[` \x83\x01\x91P\x83` \x82\x85\x01\x01\x11\x15a\x14\xAAW__\xFD[\x92P\x92\x90PV[______\x86\x88\x03a\x01\xE0\x81\x12\x15a\x14\xC8W__\xFD[``\x81\x12\x15a\x14\xD5W__\xFD[\x87\x96P``\x88\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x14\xF1W__\xFD[\x88\x01a\x01\xC0\x81\x8B\x03\x12\x15a\x15\x03W__\xFD[\x95Pa\x01\0\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x01\x12\x15a\x155W__\xFD[P`\x80\x87\x01\x93Pa\x15J\x88a\x01\x80\x89\x01a\x14VV[\x92Pa\x01\xC0\x87\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x15fW__\xFD[a\x15r\x89\x82\x8A\x01a\x14lV[\x97\x9A\x96\x99P\x94\x97P\x92\x95\x93\x94\x92PPPV[cNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[`\x03\x81\x10a\x15\xA8Wa\x15\xA8a\x15\x84V[\x90RV[\x80Q`\x07\x81\x10a\x15\xBEWa\x15\xBEa\x15\x84V[\x82R` \x90\x81\x01Q\x91\x01RV[\x80Q`@\x80\x84R\x90Q` \x91\x84\x01\x82\x90R\x80Q``\x85\x01\x81\x90R_\x92\x90\x91\x01\x90\x82\x90`\x80\x86\x01\x90[\x80\x83\x10\x15a\x16\x1DWa\x16\x06\x82\x85Qa\x15\xACV[`@\x82\x01\x91P` \x84\x01\x93P`\x01\x83\x01\x92Pa\x15\xF3V[P` \x85\x01Q` \x87\x01R\x80\x93PPPP\x92\x91PPV[\x80Q`@\x80\x84R\x81Q\x90\x84\x01\x81\x90R_\x91` \x01\x90\x82\x90``\x86\x01\x90[\x80\x83\x10\x15a\x16\x1DW\x83Qa\x16f\x83\x82Qa\x15\xACV[` \x81\x01Q`@\x84\x01Rc\xFF\xFF\xFF\xFF`@\x82\x01Q\x16``\x84\x01Rc\xFF\xFF\xFF\xFF``\x82\x01Q\x16`\x80\x84\x01RP`\xA0\x82\x01\x91P` \x84\x01\x93P`\x01\x83\x01\x92Pa\x16QV[a\x01 \x81Ra\x16\xBCa\x01 \x82\x01\x84Qa\x15\x98V[_` \x84\x01Qa\x01\xC0a\x01@\x84\x01Ra\x16\xD9a\x02\xE0\x84\x01\x82a\x15\xCBV[`@\x86\x01Q\x80Qa\x01`\x86\x01R` \x01Qa\x01\x80\x85\x01R``\x86\x01Q\x84\x82\x03a\x01\x1F\x19\x01a\x01\xA0\x86\x01R\x90\x91Pa\x17\x10\x82\x82a\x15\xCBV[\x91PP`\x80\x85\x01Qa\x01\x1F\x19\x84\x83\x03\x01a\x01\xC0\x85\x01Ra\x170\x82\x82a\x164V[\x91PP`\xA0\x85\x01Qa\x17Pa\x01\xE0\x85\x01\x82\x80Q\x82R` \x90\x81\x01Q\x91\x01RV[P`\xC0\x85\x01Qa\x02 \x84\x01R`\xE0\x85\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x02@\x85\x01RPa\x01\0\x85\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x02`\x85\x01RPa\x01 \x85\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x02\x80\x85\x01RPa\x01@\x85\x01Qa\x02\xA0\x84\x01Ra\x01`\x85\x01Qa\x02\xC0\x84\x01R\x90Pa\x0C\xD4` \x83\x01\x84\x80Q\x82R` \x81\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81Q\x16` \x84\x01Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF` \x82\x01Q\x16`@\x84\x01R`@\x81\x01Q``\x84\x01RP`@\x81\x01Q`\x80\x83\x01R``\x81\x01Q`\xA0\x83\x01R`\x80\x81\x01Q`\xC0\x83\x01Rc\xFF\xFF\xFF\xFF`\xA0\x82\x01Q\x16`\xE0\x83\x01RPPV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@\x80Q\x90\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x18[Wa\x18[a\x18$V[`@R\x90V[`@Q` \x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x18[Wa\x18[a\x18$V[`@Q`\x80\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x18[Wa\x18[a\x18$V[`@Qa\x01\x80\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x18[Wa\x18[a\x18$V[`@Q`\xC0\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x18[Wa\x18[a\x18$V[`@Q``\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x18[Wa\x18[a\x18$V[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x19:Wa\x19:a\x18$V[`@R\x91\x90PV[\x805`\x03\x81\x10a\x19PW__\xFD[\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x19nWa\x19na\x18$V[P`\x05\x1B` \x01\x90V[_`@\x82\x84\x03\x12\x15a\x19\x88W__\xFD[a\x19\x90a\x188V[\x90P\x815`\x07\x81\x10a\x19\xA0W__\xFD[\x80\x82RP` \x82\x015` \x82\x01R\x92\x91PPV[_`@\x82\x84\x03\x12\x15a\x19\xC4W__\xFD[a\x19\xCCa\x188V[\x90P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x19\xE4W__\xFD[\x82\x01` \x81\x85\x03\x12\x15a\x19\xF5W__\xFD[a\x19\xFDa\x18aV[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1A\x13W__\xFD[\x80\x83\x01\x92PP\x84`\x1F\x83\x01\x12a\x1A'W__\xFD[\x815a\x1A:a\x1A5\x82a\x19UV[a\x19\x11V[\x80\x82\x82R` \x82\x01\x91P` \x83`\x06\x1B\x86\x01\x01\x92P\x87\x83\x11\x15a\x1A[W__\xFD[` \x85\x01\x94P[\x82\x85\x10\x15a\x1A\x87Wa\x1At\x88\x86a\x19xV[\x82R` \x82\x01\x91P`@\x85\x01\x94Pa\x1AbV[\x83RPP\x82RP` \x91\x82\x015\x91\x81\x01\x91\x90\x91R\x91\x90PV[_`@\x82\x84\x03\x12\x15a\x1A\xB0W__\xFD[a\x1A\xB8a\x188V[\x825\x81R` \x92\x83\x015\x92\x81\x01\x92\x90\x92RP\x91\x90PV[\x805c\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x19PW__\xFD[_`@\x82\x84\x03\x12\x15a\x1A\xF2W__\xFD[a\x1A\xFAa\x188V[\x90P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1B\x12W__\xFD[\x82\x01`\x1F\x81\x01\x84\x13a\x1B\"W__\xFD[\x805a\x1B0a\x1A5\x82a\x19UV[\x80\x82\x82R` \x82\x01\x91P` `\xA0\x84\x02\x85\x01\x01\x92P\x86\x83\x11\x15a\x1BQW__\xFD[` \x84\x01\x93P[\x82\x84\x10\x15a\x1B\xC3W`\xA0\x84\x88\x03\x12\x15a\x1BoW__\xFD[a\x1Bwa\x18\x84V[a\x1B\x81\x88\x86a\x19xV[\x81R`@\x85\x015` \x82\x01Ra\x1B\x99``\x86\x01a\x1A\xCFV[`@\x82\x01Ra\x1B\xAA`\x80\x86\x01a\x1A\xCFV[``\x82\x01R\x82R`\xA0\x93\x90\x93\x01\x92` \x90\x91\x01\x90a\x1BXV[\x84RPPP` \x91\x82\x015\x91\x81\x01\x91\x90\x91R\x91\x90PV[_a\x01\xC0\x826\x03\x12\x15a\x1B\xEBW__\xFD[a\x1B\xF3a\x18\xA7V[a\x1B\xFC\x83a\x19BV[\x81R` \x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1C\x17W__\xFD[a\x1C#6\x82\x86\x01a\x19\xB4V[` \x83\x01RPa\x1C66`@\x85\x01a\x1A\xA0V[`@\x82\x01R`\x80\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1CTW__\xFD[a\x1C`6\x82\x86\x01a\x19\xB4V[``\x83\x01RP`\xA0\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1C\x7FW__\xFD[a\x1C\x8B6\x82\x86\x01a\x1A\xE2V[`\x80\x83\x01RPa\x1C\x9E6`\xC0\x85\x01a\x1A\xA0V[`\xA0\x82\x01Ra\x01\0\x83\x015`\xC0\x82\x01Ra\x1C\xBBa\x01 \x84\x01a\x1A\xCFV[`\xE0\x82\x01Ra\x1C\xCDa\x01@\x84\x01a\x1A\xCFV[a\x01\0\x82\x01Ra\x1C\xE0a\x01`\x84\x01a\x1A\xCFV[a\x01 \x82\x01Ra\x01\x80\x83\x015a\x01@\x82\x01Ra\x01\xA0\x90\x92\x015a\x01`\x83\x01RP\x90V[\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x19PW__\xFD[_\x81\x83\x03a\x01\0\x81\x12\x80\x15a\x1D-W__\xFD[Pa\x1D6a\x18\xCBV[\x835\x81R```\x1F\x19\x83\x01\x12\x15a\x1DKW__\xFD[a\x1DSa\x18\xEEV[\x91Pa\x1Da` \x85\x01a\x1D\x03V[\x82Ra\x1Do`@\x85\x01a\x1D\x03V[` \x83\x81\x01\x91\x90\x91R``\x85\x81\x015`@\x80\x86\x01\x91\x90\x91R\x91\x83\x01\x93\x90\x93R`\x80\x80\x86\x015\x91\x83\x01\x91\x90\x91R`\xA0\x85\x015\x92\x82\x01\x92\x90\x92R`\xC0\x84\x015\x91\x81\x01\x82\x90Ra\x1D\xBE`\xE0\x85\x01a\x1A\xCFV[`\xA0\x82\x01R\x94\x93PPPPV[_` \x82\x84\x03\x12\x15a\x1D\xDBW__\xFD[\x815a\xFF\xFF\x81\x16\x81\x14a\x0C\xD4W__\xFD[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[\x80\x82\x01\x80\x82\x11\x15a\n\xA7Wa\n\xA7a\x1D\xECV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x81\x16\x83\x82\x16\x02\x90\x81\x16\x90\x81\x81\x14a\x1E6Wa\x1E6a\x1D\xECV[P\x92\x91PPV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x81\x16\x82\x82\x16\x03\x90\x81\x11\x15a\n\xA7Wa\n\xA7a\x1D\xECV[cNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[_\x82a\x1E\x7FWa\x1E\x7Fa\x1E]V[P\x04\x90V[_\x82a\x1E\x92Wa\x1E\x92a\x1E]V[P\x06\x90V[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16\x80a\x1E\xB0Wa\x1E\xB0a\x1E]V[\x80g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x16\x04\x91PP\x92\x91PPV[\x80\x82\x02\x81\x15\x82\x82\x04\x84\x14\x17a\n\xA7Wa\n\xA7a\x1D\xECV[\x81\x81\x03\x81\x81\x11\x15a\n\xA7Wa\n\xA7a\x1D\xECV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_\x84Q\x80` \x87\x01\x84^\x91\x90\x91\x01\x92\x83RP` \x82\x01R`@\x01\x91\x90PV[_`\x01\x82\x01a\x1F4Wa\x1F4a\x1D\xECV[P`\x01\x01\x90V[cNH{q`\xE0\x1B_R`Q`\x04R`$_\xFD\xFE\xA2dipfsX\"\x12 5ov\xAEHt6\xA1\x83\xA1h\xE5\xF5\xF9\xB2L\x0C\n\xBB\"M{`W\x84\xE4J\x10\xC3\xCF\xA8IdsolcC\0\x08\x1C\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f5ffd5b5060043610610029575f3560e01c8063a92cb5011461002d575b5f5ffd5b61004061003b3660046114b1565b610057565b60405161004e9291906116a8565b60405180910390f35b61005f6112f8565b6100676113b0565b61007087611bda565b915061008136879003870187611d1a565b90505f6100916020870187611dcb565b905061141a602861ffff8316108015906100b05750603561ffff831611155b156100be57506101b961019b565b603661ffff8316108015906100d85750603e61ffff831611155b156100e6575061060d61019b565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc161ffff83160161011a57506109b061019b565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc061ffff83160161014e57506109e761019b565b60405162461bcd60e51b815260206004820152601560248201527f494e56414c49445f4d454d4f52595f4f50434f4445000000000000000000000060448201526064015b60405180910390fd5b6101ac84848989898663ffffffff16565b5050965096945050505050565b5f808060286101cb6020880188611dcb565b61ffff16036101e257505f91506004905081610420565b60296101f16020880188611dcb565b61ffff1603610209575060019150600890505f610420565b602a6102186020880188611dcb565b61ffff1603610230575060029150600490505f610420565b602b61023f6020880188611dcb565b61ffff1603610257575060039150600890505f610420565b602c6102666020880188611dcb565b61ffff160361027d57505f91506001905080610420565b602d61028c6020880188611dcb565b61ffff16036102a357505f91506001905081610420565b602e6102b26020880188611dcb565b61ffff16036102ca57505f9150600290506001610420565b602f6102d96020880188611dcb565b61ffff16036102f057505f91506002905081610420565b60306102ff6020880188611dcb565b61ffff160361031657506001915081905080610420565b60316103256020880188611dcb565b61ffff160361033c5750600191508190505f610420565b603261034b6020880188611dcb565b61ffff16036103635750600191506002905081610420565b60336103726020880188611dcb565b61ffff160361038a575060019150600290505f610420565b60346103996020880188611dcb565b61ffff16036103b15750600191506004905081610420565b60356103c06020880188611dcb565b61ffff16036103d8575060019150600490505f610420565b60405162461bcd60e51b815260206004820152601a60248201527f494e56414c49445f4d454d4f52595f4c4f41445f4f50434f44450000000000006044820152606401610192565b5f6104366104318a60200151610a94565b610aad565b61044a9063ffffffff166020890135611e00565b60208901519091505f9081906104649084878b8b86610b69565b5091509150811561047f575050600289525061060692505050565b8084156105c2578560011480156104a657505f8760068111156104a4576104a4611584565b145b156104bb57805f0b63ffffffff1690506105c2565b8560011480156104dc575060018760068111156104da576104da611584565b145b156104e8575f0b6105c2565b85600214801561050857505f87600681111561050657610506611584565b145b1561051e578060010b63ffffffff1690506105c2565b85600214801561053f5750600187600681111561053d5761053d611584565b145b1561054c5760010b6105c2565b85600414801561056d5750600187600681111561056b5761056b611584565b145b1561057a5760030b6105c2565b60405162461bcd60e51b815260206004820152601560248201527f4241445f524541445f42595445535f5349474e454400000000000000000000006044820152606401610192565b6105fe60405180604001604052808960068111156105e2576105e2611584565b815267ffffffffffffffff84166020918201528e015190610c30565b505050505050505b5050505050565b5f8080603661061f6020880188611dcb565b61ffff16036106335750600491505f610798565b60376106426020880188611dcb565b61ffff16036106575750600891506001610798565b60386106666020880188611dcb565b61ffff160361067b5750600491506002610798565b603961068a6020880188611dcb565b61ffff160361069f5750600891506003610798565b603a6106ae6020880188611dcb565b61ffff16036106c25750600191505f610798565b603b6106d16020880188611dcb565b61ffff16036106e55750600291505f610798565b603c6106f46020880188611dcb565b61ffff160361070857506001915081610798565b603d6107176020880188611dcb565b61ffff160361072c5750600291506001610798565b603e61073b6020880188611dcb565b61ffff16036107505750600491506001610798565b60405162461bcd60e51b815260206004820152601b60248201527f494e56414c49445f4d454d4f52595f53544f52455f4f50434f444500000000006044820152606401610192565b5f6107a68960200151610a94565b90508160068111156107ba576107ba611584565b815160068111156107cd576107cd611584565b1461081a5760405162461bcd60e51b815260206004820152600e60248201527f4241445f53544f52455f545950450000000000000000000000000000000000006044820152606401610192565b8060200151925060088467ffffffffffffffff161015610868576001610841856008611e13565b67ffffffffffffffff16600167ffffffffffffffff16901b6108639190611e3d565b831692505b50505f61087b6104318960200151610a94565b61088f9063ffffffff166020880135611e00565b905086602001515f015167ffffffffffffffff168367ffffffffffffffff16826108b99190611e00565b11156108cb5750506002865250610606565b6040805160208101909152606081525f905f19905f805b8767ffffffffffffffff1681101561098d575f6108ff8288611e00565b90505f61090d602083611e71565b9050858114610951575f19861461093357610929858786610c40565b60208f0151604001525b6109448e60200151828e8e8b610cdb565b9098509196509094509250845b5f61095d602084611e84565b905061096a85828c610d82565b945060088a67ffffffffffffffff16901c995050505080806001019150506108e2565b50610999828483610c40565b60208c015160400152505050505050505050505050565b6020840151515f906109c6906201000090611e97565b90506109df6109d482610e0d565b602088015190610c30565b505050505050565b6020840151515f906109fd906201000090611e97565b90505f610a106104318860200151610a94565b90505f610a2663ffffffff808416908516611e00565b905086602001516020015167ffffffffffffffff168111610a7d57610a4e6201000082611ec6565b602088015167ffffffffffffffff9091169052610a78610a6d84610e0d565b60208a015190610c30565b610a8a565b610a8a610a6d5f19610e0d565b5050505050505050565b610a9c611424565b8151610aa790610e33565b92915050565b60208101515f908183516006811115610ac857610ac8611584565b14610b155760405162461bcd60e51b815260206004820152600760248201527f4e4f545f493332000000000000000000000000000000000000000000000000006044820152606401610192565b6401000000008110610aa75760405162461bcd60e51b815260206004820152600760248201527f4241445f493332000000000000000000000000000000000000000000000000006044820152606401610192565b85515f908190819067ffffffffffffffff16610b85888a611e00565b1115610b995750600191505f905082610c24565b5f195f80805b8a811015610c18575f610bb2828e611e00565b90505f610bc0602083611e71565b9050858114610be057610bd68f828e8e8e610cdb565b509a509095509350845b5f610bec602084611e84565b9050610bf9846008611ec6565b610c038783610f1e565b60ff16901b9490941793505050600101610b9f565b505f9550935085925050505b96509650969350505050565b8151610c3c9082610f9d565b5050565b6040517f4d656d6f7279206c6561663a00000000000000000000000000000000000000006020820152602c81018290525f908190604c01604051602081830303815290604052805190602001209050610cd08585836040518060400160405280601381526020017f4d656d6f7279206d65726b6c6520747265653a00000000000000000000000000815250611077565b9150505b9392505050565b5f5f610cf36040518060200160405280606081525090565b839150610d01868684611189565b9093509150610d118686846111a4565b925090505f610d21828986610c40565b905088604001518114610d765760405162461bcd60e51b815260206004820152600e60248201527f57524f4e475f4d454d5f524f4f540000000000000000000000000000000000006044820152606401610192565b50955095509592505050565b5f60208310610dd35760405162461bcd60e51b815260206004820152601560248201527f4241445f5345545f4c4541465f425954455f49445800000000000000000000006044820152606401610192565b5f83610de160016020611edd565b610deb9190611edd565b610df6906008611ec6565b60ff848116821b911b198616179150509392505050565b610e15611424565b50604080518082019091525f815263ffffffff909116602082015290565b610e3b611424565b81518051610e4b90600190611edd565b81518110610e5b57610e5b611ef0565b602002602001015190505f6001835f015151610e779190611edd565b67ffffffffffffffff811115610e8f57610e8f611824565b604051908082528060200260200182016040528015610ec857816020015b610eb5611424565b815260200190600190039081610ead5790505b5090505f5b8151811015610f17578351805182908110610eea57610eea611ef0565b6020026020010151828281518110610f0457610f04611ef0565b6020908102919091010152600101610ecd565b5090915290565b5f60208210610f6f5760405162461bcd60e51b815260206004820152601660248201527f4241445f50554c4c5f4c4541465f425954455f494458000000000000000000006044820152606401610192565b5f82610f7d60016020611edd565b610f879190611edd565b610f92906008611ec6565b9390931c9392505050565b8151515f90610fad906001611e00565b67ffffffffffffffff811115610fc557610fc5611824565b604051908082528060200260200182016040528015610ffe57816020015b610feb611424565b815260200190600190039081610fe35790505b5090505f5b83515181101561104e57835180518290811061102157611021611ef0565b602002602001015182828151811061103b5761103b611ef0565b6020908102919091010152600101611003565b508181845f0151518151811061106657611066611ef0565b602090810291909101015290915250565b815f5b85515181101561113257846001165f036110dc578282875f015183815181106110a5576110a5611ef0565b60200260200101516040516020016110bf93929190611f04565b604051602081830303815290604052805190602001209150611126565b82865f015182815181106110f2576110f2611ef0565b60200260200101518360405160200161110d93929190611f04565b6040516020818303038152906040528051906020012091505b600194851c940161107a565b5083156111815760405162461bcd60e51b815260206004820152600f60248201527f50524f4f465f544f4f5f53484f525400000000000000000000000000000000006044820152606401610192565b949350505050565b5f8181611197868684611271565b9097909650945050505050565b604080516020810190915260608152815f6111c08686846112c3565b925090505f60ff821667ffffffffffffffff8111156111e1576111e1611824565b60405190808252806020026020018201604052801561120a578160200160208202803683370190505b5090505f5b8260ff168160ff16101561125557611228888886611189565b838360ff168151811061123d5761123d611ef0565b6020908102919091010191909152935060010161120f565b5060405180602001604052808281525093505050935093915050565b5f81815b60208110156112ba57600883901b925085858381811061129757611297611ef0565b919091013560f81c939093179250816112af81611f23565b925050600101611275565b50935093915050565b5f818484828181106112d7576112d7611ef0565b919091013560f81c92508190506112ed81611f23565b915050935093915050565b604080516101808101909152805f815260200161131361143d565b815260200161133360405180604001604052805f81526020015f81525090565b815260200161134061143d565b81526020016113616040518060400160405280606081526020015f81525090565b815260200161138160405180604001604052805f81526020015f81525090565b81525f6020820181905260408201819052606082018190526080820181905260a0820181905260c09091015290565b6040518060c001604052805f81526020016113f660405180606001604052805f67ffffffffffffffff1681526020015f67ffffffffffffffff1681526020015f81525090565b81526020015f81526020015f81526020015f81526020015f63ffffffff1681525090565b611422611f3b565b565b60408051808201909152805f5b81526020015f81525090565b6040805160608082018352918101918252908190611431565b5f60408284031215611466575f5ffd5b50919050565b5f5f83601f84011261147c575f5ffd5b50813567ffffffffffffffff811115611493575f5ffd5b6020830191508360208285010111156114aa575f5ffd5b9250929050565b5f5f5f5f5f5f8688036101e08112156114c8575f5ffd5b60608112156114d5575f5ffd5b879650606088013567ffffffffffffffff8111156114f1575f5ffd5b88016101c0818b031215611503575f5ffd5b95506101007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8082011215611535575f5ffd5b5060808701935061154a886101808901611456565b92506101c087013567ffffffffffffffff811115611566575f5ffd5b61157289828a0161146c565b979a9699509497509295939492505050565b634e487b7160e01b5f52602160045260245ffd5b600381106115a8576115a8611584565b9052565b8051600781106115be576115be611584565b8252602090810151910152565b80516040808452905160209184018290528051606085018190525f9290910190829060808601905b8083101561161d576116068285516115ac565b6040820191506020840193506001830192506115f3565b506020850151602087015280935050505092915050565b8051604080845281519084018190525f9160200190829060608601905b8083101561161d5783516116668382516115ac565b6020810151604084015263ffffffff604082015116606084015263ffffffff60608201511660808401525060a082019150602084019350600183019250611651565b61012081526116bc61012082018451611598565b5f60208401516101c06101408401526116d96102e08401826115cb565b6040860151805161016086015260200151610180850152606086015184820361011f19016101a086015290915061171082826115cb565b915050608085015161011f19848303016101c08501526117308282611634565b91505060a08501516117506101e085018280518252602090810151910152565b5060c085015161022084015260e085015163ffffffff81166102408501525061010085015163ffffffff81166102608501525061012085015163ffffffff8116610280850152506101408501516102a08401526101608501516102c08401529050610cd4602083018480518252602081015167ffffffffffffffff815116602084015267ffffffffffffffff6020820151166040840152604081015160608401525060408101516080830152606081015160a0830152608081015160c083015263ffffffff60a08201511660e08301525050565b634e487b7160e01b5f52604160045260245ffd5b6040805190810167ffffffffffffffff8111828210171561185b5761185b611824565b60405290565b6040516020810167ffffffffffffffff8111828210171561185b5761185b611824565b6040516080810167ffffffffffffffff8111828210171561185b5761185b611824565b604051610180810167ffffffffffffffff8111828210171561185b5761185b611824565b60405160c0810167ffffffffffffffff8111828210171561185b5761185b611824565b6040516060810167ffffffffffffffff8111828210171561185b5761185b611824565b604051601f8201601f1916810167ffffffffffffffff8111828210171561193a5761193a611824565b604052919050565b803560038110611950575f5ffd5b919050565b5f67ffffffffffffffff82111561196e5761196e611824565b5060051b60200190565b5f60408284031215611988575f5ffd5b611990611838565b90508135600781106119a0575f5ffd5b808252506020820135602082015292915050565b5f604082840312156119c4575f5ffd5b6119cc611838565b9050813567ffffffffffffffff8111156119e4575f5ffd5b8201602081850312156119f5575f5ffd5b6119fd611861565b813567ffffffffffffffff811115611a13575f5ffd5b80830192505084601f830112611a27575f5ffd5b8135611a3a611a3582611955565b611911565b8082825260208201915060208360061b860101925087831115611a5b575f5ffd5b6020850194505b82851015611a8757611a748886611978565b8252602082019150604085019450611a62565b8352505082525060209182013591810191909152919050565b5f60408284031215611ab0575f5ffd5b611ab8611838565b823581526020928301359281019290925250919050565b803563ffffffff81168114611950575f5ffd5b5f60408284031215611af2575f5ffd5b611afa611838565b9050813567ffffffffffffffff811115611b12575f5ffd5b8201601f81018413611b22575f5ffd5b8035611b30611a3582611955565b80828252602082019150602060a08402850101925086831115611b51575f5ffd5b6020840193505b82841015611bc35760a08488031215611b6f575f5ffd5b611b77611884565b611b818886611978565b815260408501356020820152611b9960608601611acf565b6040820152611baa60808601611acf565b6060820152825260a09390930192602090910190611b58565b845250505060209182013591810191909152919050565b5f6101c08236031215611beb575f5ffd5b611bf36118a7565b611bfc83611942565b8152602083013567ffffffffffffffff811115611c17575f5ffd5b611c23368286016119b4565b602083015250611c363660408501611aa0565b6040820152608083013567ffffffffffffffff811115611c54575f5ffd5b611c60368286016119b4565b60608301525060a083013567ffffffffffffffff811115611c7f575f5ffd5b611c8b36828601611ae2565b608083015250611c9e3660c08501611aa0565b60a082015261010083013560c0820152611cbb6101208401611acf565b60e0820152611ccd6101408401611acf565b610100820152611ce06101608401611acf565b6101208201526101808301356101408201526101a0909201356101608301525090565b803567ffffffffffffffff81168114611950575f5ffd5b5f81830361010081128015611d2d575f5ffd5b50611d366118cb565b833581526060601f1983011215611d4b575f5ffd5b611d536118ee565b9150611d6160208501611d03565b8252611d6f60408501611d03565b602083810191909152606085810135604080860191909152918301939093526080808601359183019190915260a08501359282019290925260c0840135918101829052611dbe60e08501611acf565b60a0820152949350505050565b5f60208284031215611ddb575f5ffd5b813561ffff81168114610cd4575f5ffd5b634e487b7160e01b5f52601160045260245ffd5b80820180821115610aa757610aa7611dec565b67ffffffffffffffff8181168382160290811690818114611e3657611e36611dec565b5092915050565b67ffffffffffffffff8281168282160390811115610aa757610aa7611dec565b634e487b7160e01b5f52601260045260245ffd5b5f82611e7f57611e7f611e5d565b500490565b5f82611e9257611e92611e5d565b500690565b5f67ffffffffffffffff831680611eb057611eb0611e5d565b8067ffffffffffffffff84160491505092915050565b8082028115828204841417610aa757610aa7611dec565b81810381811115610aa757610aa7611dec565b634e487b7160e01b5f52603260045260245ffd5b5f84518060208701845e91909101928352506020820152604001919050565b5f60018201611f3457611f34611dec565b5060010190565b634e487b7160e01b5f52605160045260245ffdfea2646970667358221220356f76ae487436a183a168e5f5f9b24c0c0abb224d7b605784e44a10c3cfa84964736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0)W_5`\xE0\x1C\x80c\xA9,\xB5\x01\x14a\0-W[__\xFD[a\0@a\0;6`\x04a\x14\xB1V[a\0WV[`@Qa\0N\x92\x91\x90a\x16\xA8V[`@Q\x80\x91\x03\x90\xF3[a\0_a\x12\xF8V[a\0ga\x13\xB0V[a\0p\x87a\x1B\xDAV[\x91Pa\0\x816\x87\x90\x03\x87\x01\x87a\x1D\x1AV[\x90P_a\0\x91` \x87\x01\x87a\x1D\xCBV[\x90Pa\x14\x1A`(a\xFF\xFF\x83\x16\x10\x80\x15\x90a\0\xB0WP`5a\xFF\xFF\x83\x16\x11\x15[\x15a\0\xBEWPa\x01\xB9a\x01\x9BV[`6a\xFF\xFF\x83\x16\x10\x80\x15\x90a\0\xD8WP`>a\xFF\xFF\x83\x16\x11\x15[\x15a\0\xE6WPa\x06\ra\x01\x9BV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xC1a\xFF\xFF\x83\x16\x01a\x01\x1AWPa\t\xB0a\x01\x9BV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xC0a\xFF\xFF\x83\x16\x01a\x01NWPa\t\xE7a\x01\x9BV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x15`$\x82\x01R\x7FINVALID_MEMORY_OPCODE\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01[`@Q\x80\x91\x03\x90\xFD[a\x01\xAC\x84\x84\x89\x89\x89\x86c\xFF\xFF\xFF\xFF\x16V[PP\x96P\x96\x94PPPPPV[_\x80\x80`(a\x01\xCB` \x88\x01\x88a\x1D\xCBV[a\xFF\xFF\x16\x03a\x01\xE2WP_\x91P`\x04\x90P\x81a\x04 V[`)a\x01\xF1` \x88\x01\x88a\x1D\xCBV[a\xFF\xFF\x16\x03a\x02\tWP`\x01\x91P`\x08\x90P_a\x04 V[`*a\x02\x18` \x88\x01\x88a\x1D\xCBV[a\xFF\xFF\x16\x03a\x020WP`\x02\x91P`\x04\x90P_a\x04 V[`+a\x02?` \x88\x01\x88a\x1D\xCBV[a\xFF\xFF\x16\x03a\x02WWP`\x03\x91P`\x08\x90P_a\x04 V[`,a\x02f` \x88\x01\x88a\x1D\xCBV[a\xFF\xFF\x16\x03a\x02}WP_\x91P`\x01\x90P\x80a\x04 V[`-a\x02\x8C` \x88\x01\x88a\x1D\xCBV[a\xFF\xFF\x16\x03a\x02\xA3WP_\x91P`\x01\x90P\x81a\x04 V[`.a\x02\xB2` \x88\x01\x88a\x1D\xCBV[a\xFF\xFF\x16\x03a\x02\xCAWP_\x91P`\x02\x90P`\x01a\x04 V[`/a\x02\xD9` \x88\x01\x88a\x1D\xCBV[a\xFF\xFF\x16\x03a\x02\xF0WP_\x91P`\x02\x90P\x81a\x04 V[`0a\x02\xFF` \x88\x01\x88a\x1D\xCBV[a\xFF\xFF\x16\x03a\x03\x16WP`\x01\x91P\x81\x90P\x80a\x04 V[`1a\x03%` \x88\x01\x88a\x1D\xCBV[a\xFF\xFF\x16\x03a\x03<WP`\x01\x91P\x81\x90P_a\x04 V[`2a\x03K` \x88\x01\x88a\x1D\xCBV[a\xFF\xFF\x16\x03a\x03cWP`\x01\x91P`\x02\x90P\x81a\x04 V[`3a\x03r` \x88\x01\x88a\x1D\xCBV[a\xFF\xFF\x16\x03a\x03\x8AWP`\x01\x91P`\x02\x90P_a\x04 V[`4a\x03\x99` \x88\x01\x88a\x1D\xCBV[a\xFF\xFF\x16\x03a\x03\xB1WP`\x01\x91P`\x04\x90P\x81a\x04 V[`5a\x03\xC0` \x88\x01\x88a\x1D\xCBV[a\xFF\xFF\x16\x03a\x03\xD8WP`\x01\x91P`\x04\x90P_a\x04 V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1A`$\x82\x01R\x7FINVALID_MEMORY_LOAD_OPCODE\0\0\0\0\0\0`D\x82\x01R`d\x01a\x01\x92V[_a\x046a\x041\x8A` \x01Qa\n\x94V[a\n\xADV[a\x04J\x90c\xFF\xFF\xFF\xFF\x16` \x89\x015a\x1E\0V[` \x89\x01Q\x90\x91P_\x90\x81\x90a\x04d\x90\x84\x87\x8B\x8B\x86a\x0BiV[P\x91P\x91P\x81\x15a\x04\x7FWPP`\x02\x89RPa\x06\x06\x92PPPV[\x80\x84\x15a\x05\xC2W\x85`\x01\x14\x80\x15a\x04\xA6WP_\x87`\x06\x81\x11\x15a\x04\xA4Wa\x04\xA4a\x15\x84V[\x14[\x15a\x04\xBBW\x80_\x0Bc\xFF\xFF\xFF\xFF\x16\x90Pa\x05\xC2V[\x85`\x01\x14\x80\x15a\x04\xDCWP`\x01\x87`\x06\x81\x11\x15a\x04\xDAWa\x04\xDAa\x15\x84V[\x14[\x15a\x04\xE8W_\x0Ba\x05\xC2V[\x85`\x02\x14\x80\x15a\x05\x08WP_\x87`\x06\x81\x11\x15a\x05\x06Wa\x05\x06a\x15\x84V[\x14[\x15a\x05\x1EW\x80`\x01\x0Bc\xFF\xFF\xFF\xFF\x16\x90Pa\x05\xC2V[\x85`\x02\x14\x80\x15a\x05?WP`\x01\x87`\x06\x81\x11\x15a\x05=Wa\x05=a\x15\x84V[\x14[\x15a\x05LW`\x01\x0Ba\x05\xC2V[\x85`\x04\x14\x80\x15a\x05mWP`\x01\x87`\x06\x81\x11\x15a\x05kWa\x05ka\x15\x84V[\x14[\x15a\x05zW`\x03\x0Ba\x05\xC2V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x15`$\x82\x01R\x7FBAD_READ_BYTES_SIGNED\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x01\x92V[a\x05\xFE`@Q\x80`@\x01`@R\x80\x89`\x06\x81\x11\x15a\x05\xE2Wa\x05\xE2a\x15\x84V[\x81Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x16` \x91\x82\x01R\x8E\x01Q\x90a\x0C0V[PPPPPPP[PPPPPV[_\x80\x80`6a\x06\x1F` \x88\x01\x88a\x1D\xCBV[a\xFF\xFF\x16\x03a\x063WP`\x04\x91P_a\x07\x98V[`7a\x06B` \x88\x01\x88a\x1D\xCBV[a\xFF\xFF\x16\x03a\x06WWP`\x08\x91P`\x01a\x07\x98V[`8a\x06f` \x88\x01\x88a\x1D\xCBV[a\xFF\xFF\x16\x03a\x06{WP`\x04\x91P`\x02a\x07\x98V[`9a\x06\x8A` \x88\x01\x88a\x1D\xCBV[a\xFF\xFF\x16\x03a\x06\x9FWP`\x08\x91P`\x03a\x07\x98V[`:a\x06\xAE` \x88\x01\x88a\x1D\xCBV[a\xFF\xFF\x16\x03a\x06\xC2WP`\x01\x91P_a\x07\x98V[`;a\x06\xD1` \x88\x01\x88a\x1D\xCBV[a\xFF\xFF\x16\x03a\x06\xE5WP`\x02\x91P_a\x07\x98V[`<a\x06\xF4` \x88\x01\x88a\x1D\xCBV[a\xFF\xFF\x16\x03a\x07\x08WP`\x01\x91P\x81a\x07\x98V[`=a\x07\x17` \x88\x01\x88a\x1D\xCBV[a\xFF\xFF\x16\x03a\x07,WP`\x02\x91P`\x01a\x07\x98V[`>a\x07;` \x88\x01\x88a\x1D\xCBV[a\xFF\xFF\x16\x03a\x07PWP`\x04\x91P`\x01a\x07\x98V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1B`$\x82\x01R\x7FINVALID_MEMORY_STORE_OPCODE\0\0\0\0\0`D\x82\x01R`d\x01a\x01\x92V[_a\x07\xA6\x89` \x01Qa\n\x94V[\x90P\x81`\x06\x81\x11\x15a\x07\xBAWa\x07\xBAa\x15\x84V[\x81Q`\x06\x81\x11\x15a\x07\xCDWa\x07\xCDa\x15\x84V[\x14a\x08\x1AW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0E`$\x82\x01R\x7FBAD_STORE_TYPE\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x01\x92V[\x80` \x01Q\x92P`\x08\x84g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x10\x15a\x08hW`\x01a\x08A\x85`\x08a\x1E\x13V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x1Ba\x08c\x91\x90a\x1E=V[\x83\x16\x92P[PP_a\x08{a\x041\x89` \x01Qa\n\x94V[a\x08\x8F\x90c\xFF\xFF\xFF\xFF\x16` \x88\x015a\x1E\0V[\x90P\x86` \x01Q_\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82a\x08\xB9\x91\x90a\x1E\0V[\x11\x15a\x08\xCBWPP`\x02\x86RPa\x06\x06V[`@\x80Q` \x81\x01\x90\x91R``\x81R_\x90_\x19\x90_\x80[\x87g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81\x10\x15a\t\x8DW_a\x08\xFF\x82\x88a\x1E\0V[\x90P_a\t\r` \x83a\x1EqV[\x90P\x85\x81\x14a\tQW_\x19\x86\x14a\t3Wa\t)\x85\x87\x86a\x0C@V[` \x8F\x01Q`@\x01R[a\tD\x8E` \x01Q\x82\x8E\x8E\x8Ba\x0C\xDBV[\x90\x98P\x91\x96P\x90\x94P\x92P\x84[_a\t]` \x84a\x1E\x84V[\x90Pa\tj\x85\x82\x8Ca\r\x82V[\x94P`\x08\x8Ag\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x1C\x99PPPP\x80\x80`\x01\x01\x91PPa\x08\xE2V[Pa\t\x99\x82\x84\x83a\x0C@V[` \x8C\x01Q`@\x01RPPPPPPPPPPPPV[` \x84\x01QQ_\x90a\t\xC6\x90b\x01\0\0\x90a\x1E\x97V[\x90Pa\t\xDFa\t\xD4\x82a\x0E\rV[` \x88\x01Q\x90a\x0C0V[PPPPPPV[` \x84\x01QQ_\x90a\t\xFD\x90b\x01\0\0\x90a\x1E\x97V[\x90P_a\n\x10a\x041\x88` \x01Qa\n\x94V[\x90P_a\n&c\xFF\xFF\xFF\xFF\x80\x84\x16\x90\x85\x16a\x1E\0V[\x90P\x86` \x01Q` \x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81\x11a\n}Wa\nNb\x01\0\0\x82a\x1E\xC6V[` \x88\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16\x90Ra\nxa\nm\x84a\x0E\rV[` \x8A\x01Q\x90a\x0C0V[a\n\x8AV[a\n\x8Aa\nm_\x19a\x0E\rV[PPPPPPPPV[a\n\x9Ca\x14$V[\x81Qa\n\xA7\x90a\x0E3V[\x92\x91PPV[` \x81\x01Q_\x90\x81\x83Q`\x06\x81\x11\x15a\n\xC8Wa\n\xC8a\x15\x84V[\x14a\x0B\x15W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FNOT_I32\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x01\x92V[d\x01\0\0\0\0\x81\x10a\n\xA7W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FBAD_I32\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x01\x92V[\x85Q_\x90\x81\x90\x81\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x0B\x85\x88\x8Aa\x1E\0V[\x11\x15a\x0B\x99WP`\x01\x91P_\x90P\x82a\x0C$V[_\x19_\x80\x80[\x8A\x81\x10\x15a\x0C\x18W_a\x0B\xB2\x82\x8Ea\x1E\0V[\x90P_a\x0B\xC0` \x83a\x1EqV[\x90P\x85\x81\x14a\x0B\xE0Wa\x0B\xD6\x8F\x82\x8E\x8E\x8Ea\x0C\xDBV[P\x9AP\x90\x95P\x93P\x84[_a\x0B\xEC` \x84a\x1E\x84V[\x90Pa\x0B\xF9\x84`\x08a\x1E\xC6V[a\x0C\x03\x87\x83a\x0F\x1EV[`\xFF\x16\x90\x1B\x94\x90\x94\x17\x93PPP`\x01\x01a\x0B\x9FV[P_\x95P\x93P\x85\x92PPP[\x96P\x96P\x96\x93PPPPV[\x81Qa\x0C<\x90\x82a\x0F\x9DV[PPV[`@Q\x7FMemory leaf:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`,\x81\x01\x82\x90R_\x90\x81\x90`L\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90Pa\x0C\xD0\x85\x85\x83`@Q\x80`@\x01`@R\x80`\x13\x81R` \x01\x7FMemory merkle tree:\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RPa\x10wV[\x91PP[\x93\x92PPPV[__a\x0C\xF3`@Q\x80` \x01`@R\x80``\x81RP\x90V[\x83\x91Pa\r\x01\x86\x86\x84a\x11\x89V[\x90\x93P\x91Pa\r\x11\x86\x86\x84a\x11\xA4V[\x92P\x90P_a\r!\x82\x89\x86a\x0C@V[\x90P\x88`@\x01Q\x81\x14a\rvW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0E`$\x82\x01R\x7FWRONG_MEM_ROOT\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x01\x92V[P\x95P\x95P\x95\x92PPPV[_` \x83\x10a\r\xD3W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x15`$\x82\x01R\x7FBAD_SET_LEAF_BYTE_IDX\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x01\x92V[_\x83a\r\xE1`\x01` a\x1E\xDDV[a\r\xEB\x91\x90a\x1E\xDDV[a\r\xF6\x90`\x08a\x1E\xC6V[`\xFF\x84\x81\x16\x82\x1B\x91\x1B\x19\x86\x16\x17\x91PP\x93\x92PPPV[a\x0E\x15a\x14$V[P`@\x80Q\x80\x82\x01\x90\x91R_\x81Rc\xFF\xFF\xFF\xFF\x90\x91\x16` \x82\x01R\x90V[a\x0E;a\x14$V[\x81Q\x80Qa\x0EK\x90`\x01\x90a\x1E\xDDV[\x81Q\x81\x10a\x0E[Wa\x0E[a\x1E\xF0V[` \x02` \x01\x01Q\x90P_`\x01\x83_\x01QQa\x0Ew\x91\x90a\x1E\xDDV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0E\x8FWa\x0E\x8Fa\x18$V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x0E\xC8W\x81` \x01[a\x0E\xB5a\x14$V[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x0E\xADW\x90P[P\x90P_[\x81Q\x81\x10\x15a\x0F\x17W\x83Q\x80Q\x82\x90\x81\x10a\x0E\xEAWa\x0E\xEAa\x1E\xF0V[` \x02` \x01\x01Q\x82\x82\x81Q\x81\x10a\x0F\x04Wa\x0F\x04a\x1E\xF0V[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a\x0E\xCDV[P\x90\x91R\x90V[_` \x82\x10a\x0FoW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x16`$\x82\x01R\x7FBAD_PULL_LEAF_BYTE_IDX\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x01\x92V[_\x82a\x0F}`\x01` a\x1E\xDDV[a\x0F\x87\x91\x90a\x1E\xDDV[a\x0F\x92\x90`\x08a\x1E\xC6V[\x93\x90\x93\x1C\x93\x92PPPV[\x81QQ_\x90a\x0F\xAD\x90`\x01a\x1E\0V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0F\xC5Wa\x0F\xC5a\x18$V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x0F\xFEW\x81` \x01[a\x0F\xEBa\x14$V[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x0F\xE3W\x90P[P\x90P_[\x83QQ\x81\x10\x15a\x10NW\x83Q\x80Q\x82\x90\x81\x10a\x10!Wa\x10!a\x1E\xF0V[` \x02` \x01\x01Q\x82\x82\x81Q\x81\x10a\x10;Wa\x10;a\x1E\xF0V[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a\x10\x03V[P\x81\x81\x84_\x01QQ\x81Q\x81\x10a\x10fWa\x10fa\x1E\xF0V[` \x90\x81\x02\x91\x90\x91\x01\x01R\x90\x91RPV[\x81_[\x85QQ\x81\x10\x15a\x112W\x84`\x01\x16_\x03a\x10\xDCW\x82\x82\x87_\x01Q\x83\x81Q\x81\x10a\x10\xA5Wa\x10\xA5a\x1E\xF0V[` \x02` \x01\x01Q`@Q` \x01a\x10\xBF\x93\x92\x91\x90a\x1F\x04V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x91Pa\x11&V[\x82\x86_\x01Q\x82\x81Q\x81\x10a\x10\xF2Wa\x10\xF2a\x1E\xF0V[` \x02` \x01\x01Q\x83`@Q` \x01a\x11\r\x93\x92\x91\x90a\x1F\x04V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x91P[`\x01\x94\x85\x1C\x94\x01a\x10zV[P\x83\x15a\x11\x81W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0F`$\x82\x01R\x7FPROOF_TOO_SHORT\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x01\x92V[\x94\x93PPPPV[_\x81\x81a\x11\x97\x86\x86\x84a\x12qV[\x90\x97\x90\x96P\x94PPPPPV[`@\x80Q` \x81\x01\x90\x91R``\x81R\x81_a\x11\xC0\x86\x86\x84a\x12\xC3V[\x92P\x90P_`\xFF\x82\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x11\xE1Wa\x11\xE1a\x18$V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x12\nW\x81` \x01` \x82\x02\x806\x837\x01\x90P[P\x90P_[\x82`\xFF\x16\x81`\xFF\x16\x10\x15a\x12UWa\x12(\x88\x88\x86a\x11\x89V[\x83\x83`\xFF\x16\x81Q\x81\x10a\x12=Wa\x12=a\x1E\xF0V[` \x90\x81\x02\x91\x90\x91\x01\x01\x91\x90\x91R\x93P`\x01\x01a\x12\x0FV[P`@Q\x80` \x01`@R\x80\x82\x81RP\x93PPP\x93P\x93\x91PPV[_\x81\x81[` \x81\x10\x15a\x12\xBAW`\x08\x83\x90\x1B\x92P\x85\x85\x83\x81\x81\x10a\x12\x97Wa\x12\x97a\x1E\xF0V[\x91\x90\x91\x015`\xF8\x1C\x93\x90\x93\x17\x92P\x81a\x12\xAF\x81a\x1F#V[\x92PP`\x01\x01a\x12uV[P\x93P\x93\x91PPV[_\x81\x84\x84\x82\x81\x81\x10a\x12\xD7Wa\x12\xD7a\x1E\xF0V[\x91\x90\x91\x015`\xF8\x1C\x92P\x81\x90Pa\x12\xED\x81a\x1F#V[\x91PP\x93P\x93\x91PPV[`@\x80Qa\x01\x80\x81\x01\x90\x91R\x80_\x81R` \x01a\x13\x13a\x14=V[\x81R` \x01a\x133`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a\x13@a\x14=V[\x81R` \x01a\x13a`@Q\x80`@\x01`@R\x80``\x81R` \x01_\x81RP\x90V[\x81R` \x01a\x13\x81`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R_` \x82\x01\x81\x90R`@\x82\x01\x81\x90R``\x82\x01\x81\x90R`\x80\x82\x01\x81\x90R`\xA0\x82\x01\x81\x90R`\xC0\x90\x91\x01R\x90V[`@Q\x80`\xC0\x01`@R\x80_\x81R` \x01a\x13\xF6`@Q\x80``\x01`@R\x80_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_\x81RP\x90V[\x81R` \x01_\x81R` \x01_\x81R` \x01_\x81R` \x01_c\xFF\xFF\xFF\xFF\x16\x81RP\x90V[a\x14\"a\x1F;V[V[`@\x80Q\x80\x82\x01\x90\x91R\x80_[\x81R` \x01_\x81RP\x90V[`@\x80Q``\x80\x82\x01\x83R\x91\x81\x01\x91\x82R\x90\x81\x90a\x141V[_`@\x82\x84\x03\x12\x15a\x14fW__\xFD[P\x91\x90PV[__\x83`\x1F\x84\x01\x12a\x14|W__\xFD[P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x14\x93W__\xFD[` \x83\x01\x91P\x83` \x82\x85\x01\x01\x11\x15a\x14\xAAW__\xFD[\x92P\x92\x90PV[______\x86\x88\x03a\x01\xE0\x81\x12\x15a\x14\xC8W__\xFD[``\x81\x12\x15a\x14\xD5W__\xFD[\x87\x96P``\x88\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x14\xF1W__\xFD[\x88\x01a\x01\xC0\x81\x8B\x03\x12\x15a\x15\x03W__\xFD[\x95Pa\x01\0\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x01\x12\x15a\x155W__\xFD[P`\x80\x87\x01\x93Pa\x15J\x88a\x01\x80\x89\x01a\x14VV[\x92Pa\x01\xC0\x87\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x15fW__\xFD[a\x15r\x89\x82\x8A\x01a\x14lV[\x97\x9A\x96\x99P\x94\x97P\x92\x95\x93\x94\x92PPPV[cNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[`\x03\x81\x10a\x15\xA8Wa\x15\xA8a\x15\x84V[\x90RV[\x80Q`\x07\x81\x10a\x15\xBEWa\x15\xBEa\x15\x84V[\x82R` \x90\x81\x01Q\x91\x01RV[\x80Q`@\x80\x84R\x90Q` \x91\x84\x01\x82\x90R\x80Q``\x85\x01\x81\x90R_\x92\x90\x91\x01\x90\x82\x90`\x80\x86\x01\x90[\x80\x83\x10\x15a\x16\x1DWa\x16\x06\x82\x85Qa\x15\xACV[`@\x82\x01\x91P` \x84\x01\x93P`\x01\x83\x01\x92Pa\x15\xF3V[P` \x85\x01Q` \x87\x01R\x80\x93PPPP\x92\x91PPV[\x80Q`@\x80\x84R\x81Q\x90\x84\x01\x81\x90R_\x91` \x01\x90\x82\x90``\x86\x01\x90[\x80\x83\x10\x15a\x16\x1DW\x83Qa\x16f\x83\x82Qa\x15\xACV[` \x81\x01Q`@\x84\x01Rc\xFF\xFF\xFF\xFF`@\x82\x01Q\x16``\x84\x01Rc\xFF\xFF\xFF\xFF``\x82\x01Q\x16`\x80\x84\x01RP`\xA0\x82\x01\x91P` \x84\x01\x93P`\x01\x83\x01\x92Pa\x16QV[a\x01 \x81Ra\x16\xBCa\x01 \x82\x01\x84Qa\x15\x98V[_` \x84\x01Qa\x01\xC0a\x01@\x84\x01Ra\x16\xD9a\x02\xE0\x84\x01\x82a\x15\xCBV[`@\x86\x01Q\x80Qa\x01`\x86\x01R` \x01Qa\x01\x80\x85\x01R``\x86\x01Q\x84\x82\x03a\x01\x1F\x19\x01a\x01\xA0\x86\x01R\x90\x91Pa\x17\x10\x82\x82a\x15\xCBV[\x91PP`\x80\x85\x01Qa\x01\x1F\x19\x84\x83\x03\x01a\x01\xC0\x85\x01Ra\x170\x82\x82a\x164V[\x91PP`\xA0\x85\x01Qa\x17Pa\x01\xE0\x85\x01\x82\x80Q\x82R` \x90\x81\x01Q\x91\x01RV[P`\xC0\x85\x01Qa\x02 \x84\x01R`\xE0\x85\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x02@\x85\x01RPa\x01\0\x85\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x02`\x85\x01RPa\x01 \x85\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x02\x80\x85\x01RPa\x01@\x85\x01Qa\x02\xA0\x84\x01Ra\x01`\x85\x01Qa\x02\xC0\x84\x01R\x90Pa\x0C\xD4` \x83\x01\x84\x80Q\x82R` \x81\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81Q\x16` \x84\x01Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF` \x82\x01Q\x16`@\x84\x01R`@\x81\x01Q``\x84\x01RP`@\x81\x01Q`\x80\x83\x01R``\x81\x01Q`\xA0\x83\x01R`\x80\x81\x01Q`\xC0\x83\x01Rc\xFF\xFF\xFF\xFF`\xA0\x82\x01Q\x16`\xE0\x83\x01RPPV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@\x80Q\x90\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x18[Wa\x18[a\x18$V[`@R\x90V[`@Q` \x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x18[Wa\x18[a\x18$V[`@Q`\x80\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x18[Wa\x18[a\x18$V[`@Qa\x01\x80\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x18[Wa\x18[a\x18$V[`@Q`\xC0\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x18[Wa\x18[a\x18$V[`@Q``\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x18[Wa\x18[a\x18$V[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x19:Wa\x19:a\x18$V[`@R\x91\x90PV[\x805`\x03\x81\x10a\x19PW__\xFD[\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x19nWa\x19na\x18$V[P`\x05\x1B` \x01\x90V[_`@\x82\x84\x03\x12\x15a\x19\x88W__\xFD[a\x19\x90a\x188V[\x90P\x815`\x07\x81\x10a\x19\xA0W__\xFD[\x80\x82RP` \x82\x015` \x82\x01R\x92\x91PPV[_`@\x82\x84\x03\x12\x15a\x19\xC4W__\xFD[a\x19\xCCa\x188V[\x90P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x19\xE4W__\xFD[\x82\x01` \x81\x85\x03\x12\x15a\x19\xF5W__\xFD[a\x19\xFDa\x18aV[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1A\x13W__\xFD[\x80\x83\x01\x92PP\x84`\x1F\x83\x01\x12a\x1A'W__\xFD[\x815a\x1A:a\x1A5\x82a\x19UV[a\x19\x11V[\x80\x82\x82R` \x82\x01\x91P` \x83`\x06\x1B\x86\x01\x01\x92P\x87\x83\x11\x15a\x1A[W__\xFD[` \x85\x01\x94P[\x82\x85\x10\x15a\x1A\x87Wa\x1At\x88\x86a\x19xV[\x82R` \x82\x01\x91P`@\x85\x01\x94Pa\x1AbV[\x83RPP\x82RP` \x91\x82\x015\x91\x81\x01\x91\x90\x91R\x91\x90PV[_`@\x82\x84\x03\x12\x15a\x1A\xB0W__\xFD[a\x1A\xB8a\x188V[\x825\x81R` \x92\x83\x015\x92\x81\x01\x92\x90\x92RP\x91\x90PV[\x805c\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x19PW__\xFD[_`@\x82\x84\x03\x12\x15a\x1A\xF2W__\xFD[a\x1A\xFAa\x188V[\x90P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1B\x12W__\xFD[\x82\x01`\x1F\x81\x01\x84\x13a\x1B\"W__\xFD[\x805a\x1B0a\x1A5\x82a\x19UV[\x80\x82\x82R` \x82\x01\x91P` `\xA0\x84\x02\x85\x01\x01\x92P\x86\x83\x11\x15a\x1BQW__\xFD[` \x84\x01\x93P[\x82\x84\x10\x15a\x1B\xC3W`\xA0\x84\x88\x03\x12\x15a\x1BoW__\xFD[a\x1Bwa\x18\x84V[a\x1B\x81\x88\x86a\x19xV[\x81R`@\x85\x015` \x82\x01Ra\x1B\x99``\x86\x01a\x1A\xCFV[`@\x82\x01Ra\x1B\xAA`\x80\x86\x01a\x1A\xCFV[``\x82\x01R\x82R`\xA0\x93\x90\x93\x01\x92` \x90\x91\x01\x90a\x1BXV[\x84RPPP` \x91\x82\x015\x91\x81\x01\x91\x90\x91R\x91\x90PV[_a\x01\xC0\x826\x03\x12\x15a\x1B\xEBW__\xFD[a\x1B\xF3a\x18\xA7V[a\x1B\xFC\x83a\x19BV[\x81R` \x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1C\x17W__\xFD[a\x1C#6\x82\x86\x01a\x19\xB4V[` \x83\x01RPa\x1C66`@\x85\x01a\x1A\xA0V[`@\x82\x01R`\x80\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1CTW__\xFD[a\x1C`6\x82\x86\x01a\x19\xB4V[``\x83\x01RP`\xA0\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1C\x7FW__\xFD[a\x1C\x8B6\x82\x86\x01a\x1A\xE2V[`\x80\x83\x01RPa\x1C\x9E6`\xC0\x85\x01a\x1A\xA0V[`\xA0\x82\x01Ra\x01\0\x83\x015`\xC0\x82\x01Ra\x1C\xBBa\x01 \x84\x01a\x1A\xCFV[`\xE0\x82\x01Ra\x1C\xCDa\x01@\x84\x01a\x1A\xCFV[a\x01\0\x82\x01Ra\x1C\xE0a\x01`\x84\x01a\x1A\xCFV[a\x01 \x82\x01Ra\x01\x80\x83\x015a\x01@\x82\x01Ra\x01\xA0\x90\x92\x015a\x01`\x83\x01RP\x90V[\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x19PW__\xFD[_\x81\x83\x03a\x01\0\x81\x12\x80\x15a\x1D-W__\xFD[Pa\x1D6a\x18\xCBV[\x835\x81R```\x1F\x19\x83\x01\x12\x15a\x1DKW__\xFD[a\x1DSa\x18\xEEV[\x91Pa\x1Da` \x85\x01a\x1D\x03V[\x82Ra\x1Do`@\x85\x01a\x1D\x03V[` \x83\x81\x01\x91\x90\x91R``\x85\x81\x015`@\x80\x86\x01\x91\x90\x91R\x91\x83\x01\x93\x90\x93R`\x80\x80\x86\x015\x91\x83\x01\x91\x90\x91R`\xA0\x85\x015\x92\x82\x01\x92\x90\x92R`\xC0\x84\x015\x91\x81\x01\x82\x90Ra\x1D\xBE`\xE0\x85\x01a\x1A\xCFV[`\xA0\x82\x01R\x94\x93PPPPV[_` \x82\x84\x03\x12\x15a\x1D\xDBW__\xFD[\x815a\xFF\xFF\x81\x16\x81\x14a\x0C\xD4W__\xFD[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[\x80\x82\x01\x80\x82\x11\x15a\n\xA7Wa\n\xA7a\x1D\xECV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x81\x16\x83\x82\x16\x02\x90\x81\x16\x90\x81\x81\x14a\x1E6Wa\x1E6a\x1D\xECV[P\x92\x91PPV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x81\x16\x82\x82\x16\x03\x90\x81\x11\x15a\n\xA7Wa\n\xA7a\x1D\xECV[cNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[_\x82a\x1E\x7FWa\x1E\x7Fa\x1E]V[P\x04\x90V[_\x82a\x1E\x92Wa\x1E\x92a\x1E]V[P\x06\x90V[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16\x80a\x1E\xB0Wa\x1E\xB0a\x1E]V[\x80g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x16\x04\x91PP\x92\x91PPV[\x80\x82\x02\x81\x15\x82\x82\x04\x84\x14\x17a\n\xA7Wa\n\xA7a\x1D\xECV[\x81\x81\x03\x81\x81\x11\x15a\n\xA7Wa\n\xA7a\x1D\xECV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_\x84Q\x80` \x87\x01\x84^\x91\x90\x91\x01\x92\x83RP` \x82\x01R`@\x01\x91\x90PV[_`\x01\x82\x01a\x1F4Wa\x1F4a\x1D\xECV[P`\x01\x01\x90V[cNH{q`\xE0\x1B_R`Q`\x04R`$_\xFD\xFE\xA2dipfsX\"\x12 5ov\xAEHt6\xA1\x83\xA1h\xE5\xF5\xF9\xB2L\x0C\n\xBB\"M{`W\x84\xE4J\x10\xC3\xCF\xA8IdsolcC\0\x08\x1C\x003",
    );
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MachineStatus(u8);
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<MachineStatus> for u8 {
            #[inline]
            fn stv_to_tokens(
                &self,
            ) -> <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'_> {
                alloy_sol_types::private::SolTypeValue::<
                    alloy::sol_types::sol_data::Uint<8>,
                >::stv_to_tokens(self)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::tokenize(self)
                    .0
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(self, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encoded_size(self)
            }
        }
        #[automatically_derived]
        impl MachineStatus {
            /// The Solidity type name.
            pub const NAME: &'static str = stringify!(@ name);
            /// Convert from the underlying value type.
            #[inline]
            pub const fn from(value: u8) -> Self {
                Self(value)
            }
            /// Return the underlying value.
            #[inline]
            pub const fn into(self) -> u8 {
                self.0
            }
            /// Return the single encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode(&self.0)
            }
            /// Return the packed encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode_packed(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode_packed(&self.0)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for MachineStatus {
            type RustType = u8;
            type Token<'a> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = Self::NAME;
            const ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                Self::type_check(token).is_ok()
            }
            #[inline]
            fn type_check(token: &Self::Token<'_>) -> alloy_sol_types::Result<()> {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::type_check(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::detokenize(token)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for MachineStatus {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::topic_preimage_length(rust)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(rust, out)
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic(rust)
            }
        }
    };
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ValueType(u8);
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<ValueType> for u8 {
            #[inline]
            fn stv_to_tokens(
                &self,
            ) -> <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'_> {
                alloy_sol_types::private::SolTypeValue::<
                    alloy::sol_types::sol_data::Uint<8>,
                >::stv_to_tokens(self)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::tokenize(self)
                    .0
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(self, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encoded_size(self)
            }
        }
        #[automatically_derived]
        impl ValueType {
            /// The Solidity type name.
            pub const NAME: &'static str = stringify!(@ name);
            /// Convert from the underlying value type.
            #[inline]
            pub const fn from(value: u8) -> Self {
                Self(value)
            }
            /// Return the underlying value.
            #[inline]
            pub const fn into(self) -> u8 {
                self.0
            }
            /// Return the single encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode(&self.0)
            }
            /// Return the packed encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode_packed(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode_packed(&self.0)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ValueType {
            type RustType = u8;
            type Token<'a> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = Self::NAME;
            const ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                Self::type_check(token).is_ok()
            }
            #[inline]
            fn type_check(token: &Self::Token<'_>) -> alloy_sol_types::Result<()> {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::type_check(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::detokenize(token)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ValueType {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::topic_preimage_length(rust)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(rust, out)
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic(rust)
            }
        }
    };
    /**```solidity
struct ExecutionContext { uint256 maxInboxMessagesRead; address bridge; bytes32 initialWasmModuleRoot; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ExecutionContext {
        #[allow(missing_docs)]
        pub maxInboxMessagesRead: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub bridge: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub initialWasmModuleRoot: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ExecutionContext> for UnderlyingRustTuple<'_> {
            fn from(value: ExecutionContext) -> Self {
                (value.maxInboxMessagesRead, value.bridge, value.initialWasmModuleRoot)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ExecutionContext {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    maxInboxMessagesRead: tuple.0,
                    bridge: tuple.1,
                    initialWasmModuleRoot: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for ExecutionContext {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for ExecutionContext {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.maxInboxMessagesRead),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.bridge,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.initialWasmModuleRoot),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ExecutionContext {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for ExecutionContext {
            const NAME: &'static str = "ExecutionContext";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "ExecutionContext(uint256 maxInboxMessagesRead,address bridge,bytes32 initialWasmModuleRoot)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.maxInboxMessagesRead,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.bridge,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.initialWasmModuleRoot,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ExecutionContext {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.maxInboxMessagesRead,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.bridge,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.initialWasmModuleRoot,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.maxInboxMessagesRead,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.bridge,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.initialWasmModuleRoot,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct Instruction { uint16 opcode; uint256 argumentData; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct Instruction {
        #[allow(missing_docs)]
        pub opcode: u16,
        #[allow(missing_docs)]
        pub argumentData: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<16>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            u16,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Instruction> for UnderlyingRustTuple<'_> {
            fn from(value: Instruction) -> Self {
                (value.opcode, value.argumentData)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Instruction {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    opcode: tuple.0,
                    argumentData: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Instruction {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Instruction {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        16,
                    > as alloy_sol_types::SolType>::tokenize(&self.opcode),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.argumentData),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Instruction {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Instruction {
            const NAME: &'static str = "Instruction";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "Instruction(uint16 opcode,uint256 argumentData)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        16,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.opcode)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.argumentData)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Instruction {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        16,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.opcode,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.argumentData,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    16,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.opcode,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.argumentData,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct Machine { MachineStatus status; ValueStack valueStack; MultiStack valueMultiStack; ValueStack internalStack; StackFrameWindow frameStack; MultiStack frameMultiStack; bytes32 globalStateHash; uint32 moduleIdx; uint32 functionIdx; uint32 functionPc; bytes32 recoveryPc; bytes32 modulesRoot; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct Machine {
        #[allow(missing_docs)]
        pub status: <MachineStatus as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub valueStack: <ValueStack as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub valueMultiStack: <MultiStack as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub internalStack: <ValueStack as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub frameStack: <StackFrameWindow as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub frameMultiStack: <MultiStack as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub globalStateHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub moduleIdx: u32,
        #[allow(missing_docs)]
        pub functionIdx: u32,
        #[allow(missing_docs)]
        pub functionPc: u32,
        #[allow(missing_docs)]
        pub recoveryPc: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub modulesRoot: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            MachineStatus,
            ValueStack,
            MultiStack,
            ValueStack,
            StackFrameWindow,
            MultiStack,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::Uint<32>,
            alloy::sol_types::sol_data::Uint<32>,
            alloy::sol_types::sol_data::Uint<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            <MachineStatus as alloy::sol_types::SolType>::RustType,
            <ValueStack as alloy::sol_types::SolType>::RustType,
            <MultiStack as alloy::sol_types::SolType>::RustType,
            <ValueStack as alloy::sol_types::SolType>::RustType,
            <StackFrameWindow as alloy::sol_types::SolType>::RustType,
            <MultiStack as alloy::sol_types::SolType>::RustType,
            alloy::sol_types::private::FixedBytes<32>,
            u32,
            u32,
            u32,
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Machine> for UnderlyingRustTuple<'_> {
            fn from(value: Machine) -> Self {
                (
                    value.status,
                    value.valueStack,
                    value.valueMultiStack,
                    value.internalStack,
                    value.frameStack,
                    value.frameMultiStack,
                    value.globalStateHash,
                    value.moduleIdx,
                    value.functionIdx,
                    value.functionPc,
                    value.recoveryPc,
                    value.modulesRoot,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Machine {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    status: tuple.0,
                    valueStack: tuple.1,
                    valueMultiStack: tuple.2,
                    internalStack: tuple.3,
                    frameStack: tuple.4,
                    frameMultiStack: tuple.5,
                    globalStateHash: tuple.6,
                    moduleIdx: tuple.7,
                    functionIdx: tuple.8,
                    functionPc: tuple.9,
                    recoveryPc: tuple.10,
                    modulesRoot: tuple.11,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Machine {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Machine {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <MachineStatus as alloy_sol_types::SolType>::tokenize(&self.status),
                    <ValueStack as alloy_sol_types::SolType>::tokenize(&self.valueStack),
                    <MultiStack as alloy_sol_types::SolType>::tokenize(
                        &self.valueMultiStack,
                    ),
                    <ValueStack as alloy_sol_types::SolType>::tokenize(
                        &self.internalStack,
                    ),
                    <StackFrameWindow as alloy_sol_types::SolType>::tokenize(
                        &self.frameStack,
                    ),
                    <MultiStack as alloy_sol_types::SolType>::tokenize(
                        &self.frameMultiStack,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.globalStateHash),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.moduleIdx),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.functionIdx),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.functionPc),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.recoveryPc),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.modulesRoot),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Machine {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Machine {
            const NAME: &'static str = "Machine";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "Machine(uint8 status,ValueStack valueStack,MultiStack valueMultiStack,ValueStack internalStack,StackFrameWindow frameStack,MultiStack frameMultiStack,bytes32 globalStateHash,uint32 moduleIdx,uint32 functionIdx,uint32 functionPc,bytes32 recoveryPc,bytes32 modulesRoot)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(5);
                components
                    .push(
                        <ValueStack as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <ValueStack as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
                    .push(
                        <MultiStack as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <MultiStack as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
                    .push(
                        <ValueStack as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <ValueStack as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
                    .push(
                        <StackFrameWindow as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <StackFrameWindow as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
                    .push(
                        <MultiStack as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <MultiStack as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <MachineStatus as alloy_sol_types::SolType>::eip712_data_word(
                            &self.status,
                        )
                        .0,
                    <ValueStack as alloy_sol_types::SolType>::eip712_data_word(
                            &self.valueStack,
                        )
                        .0,
                    <MultiStack as alloy_sol_types::SolType>::eip712_data_word(
                            &self.valueMultiStack,
                        )
                        .0,
                    <ValueStack as alloy_sol_types::SolType>::eip712_data_word(
                            &self.internalStack,
                        )
                        .0,
                    <StackFrameWindow as alloy_sol_types::SolType>::eip712_data_word(
                            &self.frameStack,
                        )
                        .0,
                    <MultiStack as alloy_sol_types::SolType>::eip712_data_word(
                            &self.frameMultiStack,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.globalStateHash,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.moduleIdx)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.functionIdx)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.functionPc)
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.recoveryPc)
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.modulesRoot)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Machine {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <MachineStatus as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.status,
                    )
                    + <ValueStack as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.valueStack,
                    )
                    + <MultiStack as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.valueMultiStack,
                    )
                    + <ValueStack as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.internalStack,
                    )
                    + <StackFrameWindow as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.frameStack,
                    )
                    + <MultiStack as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.frameMultiStack,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.globalStateHash,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.moduleIdx,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.functionIdx,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.functionPc,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.recoveryPc,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.modulesRoot,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <MachineStatus as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.status,
                    out,
                );
                <ValueStack as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.valueStack,
                    out,
                );
                <MultiStack as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.valueMultiStack,
                    out,
                );
                <ValueStack as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.internalStack,
                    out,
                );
                <StackFrameWindow as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.frameStack,
                    out,
                );
                <MultiStack as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.frameMultiStack,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.globalStateHash,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.moduleIdx,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.functionIdx,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.functionPc,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.recoveryPc,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.modulesRoot,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct Module { bytes32 globalsMerkleRoot; ModuleMemory moduleMemory; bytes32 tablesMerkleRoot; bytes32 functionsMerkleRoot; bytes32 extraHash; uint32 internalsOffset; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct Module {
        #[allow(missing_docs)]
        pub globalsMerkleRoot: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub moduleMemory: <ModuleMemory as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub tablesMerkleRoot: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub functionsMerkleRoot: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub extraHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub internalsOffset: u32,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::FixedBytes<32>,
            ModuleMemory,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::Uint<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::FixedBytes<32>,
            <ModuleMemory as alloy::sol_types::SolType>::RustType,
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::FixedBytes<32>,
            u32,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Module> for UnderlyingRustTuple<'_> {
            fn from(value: Module) -> Self {
                (
                    value.globalsMerkleRoot,
                    value.moduleMemory,
                    value.tablesMerkleRoot,
                    value.functionsMerkleRoot,
                    value.extraHash,
                    value.internalsOffset,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Module {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    globalsMerkleRoot: tuple.0,
                    moduleMemory: tuple.1,
                    tablesMerkleRoot: tuple.2,
                    functionsMerkleRoot: tuple.3,
                    extraHash: tuple.4,
                    internalsOffset: tuple.5,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Module {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Module {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.globalsMerkleRoot),
                    <ModuleMemory as alloy_sol_types::SolType>::tokenize(
                        &self.moduleMemory,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.tablesMerkleRoot),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.functionsMerkleRoot),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.extraHash),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.internalsOffset),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Module {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Module {
            const NAME: &'static str = "Module";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "Module(bytes32 globalsMerkleRoot,ModuleMemory moduleMemory,bytes32 tablesMerkleRoot,bytes32 functionsMerkleRoot,bytes32 extraHash,uint32 internalsOffset)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(1);
                components
                    .push(
                        <ModuleMemory as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <ModuleMemory as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.globalsMerkleRoot,
                        )
                        .0,
                    <ModuleMemory as alloy_sol_types::SolType>::eip712_data_word(
                            &self.moduleMemory,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.tablesMerkleRoot,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.functionsMerkleRoot,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.extraHash)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.internalsOffset,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Module {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.globalsMerkleRoot,
                    )
                    + <ModuleMemory as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.moduleMemory,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.tablesMerkleRoot,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.functionsMerkleRoot,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.extraHash,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.internalsOffset,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.globalsMerkleRoot,
                    out,
                );
                <ModuleMemory as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.moduleMemory,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.tablesMerkleRoot,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.functionsMerkleRoot,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.extraHash,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.internalsOffset,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct ModuleMemory { uint64 size; uint64 maxSize; bytes32 merkleRoot; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ModuleMemory {
        #[allow(missing_docs)]
        pub size: u64,
        #[allow(missing_docs)]
        pub maxSize: u64,
        #[allow(missing_docs)]
        pub merkleRoot: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<64>,
            alloy::sol_types::sol_data::Uint<64>,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            u64,
            u64,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ModuleMemory> for UnderlyingRustTuple<'_> {
            fn from(value: ModuleMemory) -> Self {
                (value.size, value.maxSize, value.merkleRoot)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ModuleMemory {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    size: tuple.0,
                    maxSize: tuple.1,
                    merkleRoot: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for ModuleMemory {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for ModuleMemory {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.size),
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.maxSize),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.merkleRoot),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ModuleMemory {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for ModuleMemory {
            const NAME: &'static str = "ModuleMemory";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "ModuleMemory(uint64 size,uint64 maxSize,bytes32 merkleRoot)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.size)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.maxSize)
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.merkleRoot)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ModuleMemory {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.size)
                    + <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.maxSize,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.merkleRoot,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    64,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.size,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    64,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.maxSize,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.merkleRoot,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct MultiStack { bytes32 inactiveStackHash; bytes32 remainingHash; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MultiStack {
        #[allow(missing_docs)]
        pub inactiveStackHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub remainingHash: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<MultiStack> for UnderlyingRustTuple<'_> {
            fn from(value: MultiStack) -> Self {
                (value.inactiveStackHash, value.remainingHash)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for MultiStack {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    inactiveStackHash: tuple.0,
                    remainingHash: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for MultiStack {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for MultiStack {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.inactiveStackHash),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.remainingHash),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for MultiStack {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for MultiStack {
            const NAME: &'static str = "MultiStack";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "MultiStack(bytes32 inactiveStackHash,bytes32 remainingHash)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.inactiveStackHash,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.remainingHash)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for MultiStack {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.inactiveStackHash,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.remainingHash,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.inactiveStackHash,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.remainingHash,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct StackFrame { Value returnPc; bytes32 localsMerkleRoot; uint32 callerModule; uint32 callerModuleInternals; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct StackFrame {
        #[allow(missing_docs)]
        pub returnPc: <Value as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub localsMerkleRoot: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub callerModule: u32,
        #[allow(missing_docs)]
        pub callerModuleInternals: u32,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            Value,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::Uint<32>,
            alloy::sol_types::sol_data::Uint<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            <Value as alloy::sol_types::SolType>::RustType,
            alloy::sol_types::private::FixedBytes<32>,
            u32,
            u32,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<StackFrame> for UnderlyingRustTuple<'_> {
            fn from(value: StackFrame) -> Self {
                (
                    value.returnPc,
                    value.localsMerkleRoot,
                    value.callerModule,
                    value.callerModuleInternals,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for StackFrame {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    returnPc: tuple.0,
                    localsMerkleRoot: tuple.1,
                    callerModule: tuple.2,
                    callerModuleInternals: tuple.3,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for StackFrame {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for StackFrame {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <Value as alloy_sol_types::SolType>::tokenize(&self.returnPc),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.localsMerkleRoot),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.callerModule),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.callerModuleInternals),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for StackFrame {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for StackFrame {
            const NAME: &'static str = "StackFrame";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "StackFrame(Value returnPc,bytes32 localsMerkleRoot,uint32 callerModule,uint32 callerModuleInternals)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(1);
                components
                    .push(<Value as alloy_sol_types::SolStruct>::eip712_root_type());
                components
                    .extend(<Value as alloy_sol_types::SolStruct>::eip712_components());
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <Value as alloy_sol_types::SolType>::eip712_data_word(&self.returnPc)
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.localsMerkleRoot,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.callerModule)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.callerModuleInternals,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for StackFrame {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <Value as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.returnPc,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.localsMerkleRoot,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.callerModule,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.callerModuleInternals,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <Value as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.returnPc,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.localsMerkleRoot,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.callerModule,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.callerModuleInternals,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct StackFrameWindow { StackFrame[] proved; bytes32 remainingHash; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct StackFrameWindow {
        #[allow(missing_docs)]
        pub proved: alloy::sol_types::private::Vec<
            <StackFrame as alloy::sol_types::SolType>::RustType,
        >,
        #[allow(missing_docs)]
        pub remainingHash: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Array<StackFrame>,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Vec<
                <StackFrame as alloy::sol_types::SolType>::RustType,
            >,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<StackFrameWindow> for UnderlyingRustTuple<'_> {
            fn from(value: StackFrameWindow) -> Self {
                (value.proved, value.remainingHash)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for StackFrameWindow {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    proved: tuple.0,
                    remainingHash: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for StackFrameWindow {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for StackFrameWindow {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        StackFrame,
                    > as alloy_sol_types::SolType>::tokenize(&self.proved),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.remainingHash),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for StackFrameWindow {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for StackFrameWindow {
            const NAME: &'static str = "StackFrameWindow";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "StackFrameWindow(StackFrame[] proved,bytes32 remainingHash)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(1);
                components
                    .push(
                        <StackFrame as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <StackFrame as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Array<
                        StackFrame,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.proved)
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.remainingHash)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for StackFrameWindow {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Array<
                        StackFrame,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.proved,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.remainingHash,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Array<
                    StackFrame,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.proved,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.remainingHash,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct Value { ValueType valueType; uint256 contents; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct Value {
        #[allow(missing_docs)]
        pub valueType: <ValueType as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub contents: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (ValueType, alloy::sol_types::sol_data::Uint<256>);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            <ValueType as alloy::sol_types::SolType>::RustType,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Value> for UnderlyingRustTuple<'_> {
            fn from(value: Value) -> Self {
                (value.valueType, value.contents)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Value {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    valueType: tuple.0,
                    contents: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Value {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Value {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <ValueType as alloy_sol_types::SolType>::tokenize(&self.valueType),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contents),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Value {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Value {
            const NAME: &'static str = "Value";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "Value(uint8 valueType,uint256 contents)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <ValueType as alloy_sol_types::SolType>::eip712_data_word(
                            &self.valueType,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.contents)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Value {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <ValueType as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.valueType,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.contents,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <ValueType as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.valueType,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.contents,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct ValueArray { Value[] inner; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ValueArray {
        #[allow(missing_docs)]
        pub inner: alloy::sol_types::private::Vec<
            <Value as alloy::sol_types::SolType>::RustType,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Array<Value>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Vec<
                <Value as alloy::sol_types::SolType>::RustType,
            >,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ValueArray> for UnderlyingRustTuple<'_> {
            fn from(value: ValueArray) -> Self {
                (value.inner,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ValueArray {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { inner: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for ValueArray {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for ValueArray {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        Value,
                    > as alloy_sol_types::SolType>::tokenize(&self.inner),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ValueArray {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for ValueArray {
            const NAME: &'static str = "ValueArray";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed("ValueArray(Value[] inner)")
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(1);
                components
                    .push(<Value as alloy_sol_types::SolStruct>::eip712_root_type());
                components
                    .extend(<Value as alloy_sol_types::SolStruct>::eip712_components());
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                <alloy::sol_types::sol_data::Array<
                    Value,
                > as alloy_sol_types::SolType>::eip712_data_word(&self.inner)
                    .0
                    .to_vec()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ValueArray {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Array<
                        Value,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.inner)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Array<
                    Value,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.inner,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct ValueStack { ValueArray proved; bytes32 remainingHash; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ValueStack {
        #[allow(missing_docs)]
        pub proved: <ValueArray as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub remainingHash: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            ValueArray,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            <ValueArray as alloy::sol_types::SolType>::RustType,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ValueStack> for UnderlyingRustTuple<'_> {
            fn from(value: ValueStack) -> Self {
                (value.proved, value.remainingHash)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ValueStack {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    proved: tuple.0,
                    remainingHash: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for ValueStack {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for ValueStack {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <ValueArray as alloy_sol_types::SolType>::tokenize(&self.proved),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.remainingHash),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ValueStack {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for ValueStack {
            const NAME: &'static str = "ValueStack";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "ValueStack(ValueArray proved,bytes32 remainingHash)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(1);
                components
                    .push(
                        <ValueArray as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <ValueArray as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <ValueArray as alloy_sol_types::SolType>::eip712_data_word(
                            &self.proved,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.remainingHash)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ValueStack {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <ValueArray as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.proved,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.remainingHash,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <ValueArray as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.proved,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.remainingHash,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**Function with signature `executeOneStep((uint256,address,bytes32),(uint8,(((uint8,uint256)[]),bytes32),(bytes32,bytes32),(((uint8,uint256)[]),bytes32),(((uint8,uint256),bytes32,uint32,uint32)[],bytes32),(bytes32,bytes32),bytes32,uint32,uint32,uint32,bytes32,bytes32),(bytes32,(uint64,uint64,bytes32),bytes32,bytes32,bytes32,uint32),(uint16,uint256),bytes)` and selector `0xa92cb501`.
```solidity
function executeOneStep(ExecutionContext memory, Machine memory startMach, Module memory startMod, Instruction memory inst, bytes memory proof) external pure returns (Machine memory mach, Module memory r#mod);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeOneStepCall {
        #[allow(missing_docs)]
        pub _0: <ExecutionContext as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub startMach: <Machine as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub startMod: <Module as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub inst: <Instruction as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub proof: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`executeOneStep((uint256,address,bytes32),(uint8,(((uint8,uint256)[]),bytes32),(bytes32,bytes32),(((uint8,uint256)[]),bytes32),(((uint8,uint256),bytes32,uint32,uint32)[],bytes32),(bytes32,bytes32),bytes32,uint32,uint32,uint32,bytes32,bytes32),(bytes32,(uint64,uint64,bytes32),bytes32,bytes32,bytes32,uint32),(uint16,uint256),bytes)`](executeOneStepCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeOneStepReturn {
        #[allow(missing_docs)]
        pub mach: <Machine as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub r#mod: <Module as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                ExecutionContext,
                Machine,
                Module,
                Instruction,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <ExecutionContext as alloy::sol_types::SolType>::RustType,
                <Machine as alloy::sol_types::SolType>::RustType,
                <Module as alloy::sol_types::SolType>::RustType,
                <Instruction as alloy::sol_types::SolType>::RustType,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeOneStepCall> for UnderlyingRustTuple<'_> {
                fn from(value: executeOneStepCall) -> Self {
                    (value._0, value.startMach, value.startMod, value.inst, value.proof)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for executeOneStepCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _0: tuple.0,
                        startMach: tuple.1,
                        startMod: tuple.2,
                        inst: tuple.3,
                        proof: tuple.4,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (Machine, Module);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <Machine as alloy::sol_types::SolType>::RustType,
                <Module as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeOneStepReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: executeOneStepReturn) -> Self {
                    (value.mach, value.r#mod)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for executeOneStepReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        mach: tuple.0,
                        r#mod: tuple.1,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for executeOneStepCall {
            type Parameters<'a> = (
                ExecutionContext,
                Machine,
                Module,
                Instruction,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = executeOneStepReturn;
            type ReturnTuple<'a> = (Machine, Module);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "executeOneStep((uint256,address,bytes32),(uint8,(((uint8,uint256)[]),bytes32),(bytes32,bytes32),(((uint8,uint256)[]),bytes32),(((uint8,uint256),bytes32,uint32,uint32)[],bytes32),(bytes32,bytes32),bytes32,uint32,uint32,uint32,bytes32,bytes32),(bytes32,(uint64,uint64,bytes32),bytes32,bytes32,bytes32,uint32),(uint16,uint256),bytes)";
            const SELECTOR: [u8; 4] = [169u8, 44u8, 181u8, 1u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <ExecutionContext as alloy_sol_types::SolType>::tokenize(&self._0),
                    <Machine as alloy_sol_types::SolType>::tokenize(&self.startMach),
                    <Module as alloy_sol_types::SolType>::tokenize(&self.startMod),
                    <Instruction as alloy_sol_types::SolType>::tokenize(&self.inst),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.proof,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`OneStepProverMemory`](self) function calls.
    pub enum OneStepProverMemoryCalls {
        #[allow(missing_docs)]
        executeOneStep(executeOneStepCall),
    }
    #[automatically_derived]
    impl OneStepProverMemoryCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[[169u8, 44u8, 181u8, 1u8]];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for OneStepProverMemoryCalls {
        const NAME: &'static str = "OneStepProverMemoryCalls";
        const MIN_DATA_LENGTH: usize = 1120usize;
        const COUNT: usize = 1usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::executeOneStep(_) => {
                    <executeOneStepCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<OneStepProverMemoryCalls>] = &[
                {
                    fn executeOneStep(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OneStepProverMemoryCalls> {
                        <executeOneStepCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OneStepProverMemoryCalls::executeOneStep)
                    }
                    executeOneStep
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::executeOneStep(inner) => {
                    <executeOneStepCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::executeOneStep(inner) => {
                    <executeOneStepCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`OneStepProverMemory`](self) contract instance.

See the [wrapper's documentation](`OneStepProverMemoryInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> OneStepProverMemoryInstance<T, P, N> {
        OneStepProverMemoryInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<OneStepProverMemoryInstance<T, P, N>>,
    > {
        OneStepProverMemoryInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        OneStepProverMemoryInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`OneStepProverMemory`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`OneStepProverMemory`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct OneStepProverMemoryInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for OneStepProverMemoryInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("OneStepProverMemoryInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > OneStepProverMemoryInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`OneStepProverMemory`](self) contract instance.

See the [wrapper's documentation](`OneStepProverMemoryInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<OneStepProverMemoryInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> OneStepProverMemoryInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> OneStepProverMemoryInstance<T, P, N> {
            OneStepProverMemoryInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > OneStepProverMemoryInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`executeOneStep`] function.
        pub fn executeOneStep(
            &self,
            _0: <ExecutionContext as alloy::sol_types::SolType>::RustType,
            startMach: <Machine as alloy::sol_types::SolType>::RustType,
            startMod: <Module as alloy::sol_types::SolType>::RustType,
            inst: <Instruction as alloy::sol_types::SolType>::RustType,
            proof: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, executeOneStepCall, N> {
            self.call_builder(
                &executeOneStepCall {
                    _0,
                    startMach,
                    startMod,
                    inst,
                    proof,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > OneStepProverMemoryInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
