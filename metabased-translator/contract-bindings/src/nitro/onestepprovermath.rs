/**

Generated by the following Solidity interface...
```solidity
interface OneStepProverMath {
    type MachineStatus is uint8;
    type ValueType is uint8;
    struct ExecutionContext {
        uint256 maxInboxMessagesRead;
        address bridge;
        bytes32 initialWasmModuleRoot;
    }
    struct Instruction {
        uint16 opcode;
        uint256 argumentData;
    }
    struct Machine {
        MachineStatus status;
        ValueStack valueStack;
        MultiStack valueMultiStack;
        ValueStack internalStack;
        StackFrameWindow frameStack;
        MultiStack frameMultiStack;
        bytes32 globalStateHash;
        uint32 moduleIdx;
        uint32 functionIdx;
        uint32 functionPc;
        bytes32 recoveryPc;
        bytes32 modulesRoot;
    }
    struct Module {
        bytes32 globalsMerkleRoot;
        ModuleMemory moduleMemory;
        bytes32 tablesMerkleRoot;
        bytes32 functionsMerkleRoot;
        bytes32 extraHash;
        uint32 internalsOffset;
    }
    struct ModuleMemory {
        uint64 size;
        uint64 maxSize;
        bytes32 merkleRoot;
    }
    struct MultiStack {
        bytes32 inactiveStackHash;
        bytes32 remainingHash;
    }
    struct StackFrame {
        Value returnPc;
        bytes32 localsMerkleRoot;
        uint32 callerModule;
        uint32 callerModuleInternals;
    }
    struct StackFrameWindow {
        StackFrame[] proved;
        bytes32 remainingHash;
    }
    struct Value {
        ValueType valueType;
        uint256 contents;
    }
    struct ValueArray {
        Value[] inner;
    }
    struct ValueStack {
        ValueArray proved;
        bytes32 remainingHash;
    }

    function executeOneStep(ExecutionContext memory, Machine memory startMach, Module memory startMod, Instruction memory inst, bytes memory proof) external pure returns (Machine memory mach, Module memory mod);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "executeOneStep",
    "inputs": [
      {
        "name": "",
        "type": "tuple",
        "internalType": "struct ExecutionContext",
        "components": [
          {
            "name": "maxInboxMessagesRead",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "bridge",
            "type": "address",
            "internalType": "contract IBridge"
          },
          {
            "name": "initialWasmModuleRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          }
        ]
      },
      {
        "name": "startMach",
        "type": "tuple",
        "internalType": "struct Machine",
        "components": [
          {
            "name": "status",
            "type": "uint8",
            "internalType": "enum MachineStatus"
          },
          {
            "name": "valueStack",
            "type": "tuple",
            "internalType": "struct ValueStack",
            "components": [
              {
                "name": "proved",
                "type": "tuple",
                "internalType": "struct ValueArray",
                "components": [
                  {
                    "name": "inner",
                    "type": "tuple[]",
                    "internalType": "struct Value[]",
                    "components": [
                      {
                        "name": "valueType",
                        "type": "uint8",
                        "internalType": "enum ValueType"
                      },
                      {
                        "name": "contents",
                        "type": "uint256",
                        "internalType": "uint256"
                      }
                    ]
                  }
                ]
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "valueMultiStack",
            "type": "tuple",
            "internalType": "struct MultiStack",
            "components": [
              {
                "name": "inactiveStackHash",
                "type": "bytes32",
                "internalType": "bytes32"
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "internalStack",
            "type": "tuple",
            "internalType": "struct ValueStack",
            "components": [
              {
                "name": "proved",
                "type": "tuple",
                "internalType": "struct ValueArray",
                "components": [
                  {
                    "name": "inner",
                    "type": "tuple[]",
                    "internalType": "struct Value[]",
                    "components": [
                      {
                        "name": "valueType",
                        "type": "uint8",
                        "internalType": "enum ValueType"
                      },
                      {
                        "name": "contents",
                        "type": "uint256",
                        "internalType": "uint256"
                      }
                    ]
                  }
                ]
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "frameStack",
            "type": "tuple",
            "internalType": "struct StackFrameWindow",
            "components": [
              {
                "name": "proved",
                "type": "tuple[]",
                "internalType": "struct StackFrame[]",
                "components": [
                  {
                    "name": "returnPc",
                    "type": "tuple",
                    "internalType": "struct Value",
                    "components": [
                      {
                        "name": "valueType",
                        "type": "uint8",
                        "internalType": "enum ValueType"
                      },
                      {
                        "name": "contents",
                        "type": "uint256",
                        "internalType": "uint256"
                      }
                    ]
                  },
                  {
                    "name": "localsMerkleRoot",
                    "type": "bytes32",
                    "internalType": "bytes32"
                  },
                  {
                    "name": "callerModule",
                    "type": "uint32",
                    "internalType": "uint32"
                  },
                  {
                    "name": "callerModuleInternals",
                    "type": "uint32",
                    "internalType": "uint32"
                  }
                ]
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "frameMultiStack",
            "type": "tuple",
            "internalType": "struct MultiStack",
            "components": [
              {
                "name": "inactiveStackHash",
                "type": "bytes32",
                "internalType": "bytes32"
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "globalStateHash",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "moduleIdx",
            "type": "uint32",
            "internalType": "uint32"
          },
          {
            "name": "functionIdx",
            "type": "uint32",
            "internalType": "uint32"
          },
          {
            "name": "functionPc",
            "type": "uint32",
            "internalType": "uint32"
          },
          {
            "name": "recoveryPc",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "modulesRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          }
        ]
      },
      {
        "name": "startMod",
        "type": "tuple",
        "internalType": "struct Module",
        "components": [
          {
            "name": "globalsMerkleRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "moduleMemory",
            "type": "tuple",
            "internalType": "struct ModuleMemory",
            "components": [
              {
                "name": "size",
                "type": "uint64",
                "internalType": "uint64"
              },
              {
                "name": "maxSize",
                "type": "uint64",
                "internalType": "uint64"
              },
              {
                "name": "merkleRoot",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "tablesMerkleRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "functionsMerkleRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "extraHash",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "internalsOffset",
            "type": "uint32",
            "internalType": "uint32"
          }
        ]
      },
      {
        "name": "inst",
        "type": "tuple",
        "internalType": "struct Instruction",
        "components": [
          {
            "name": "opcode",
            "type": "uint16",
            "internalType": "uint16"
          },
          {
            "name": "argumentData",
            "type": "uint256",
            "internalType": "uint256"
          }
        ]
      },
      {
        "name": "proof",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "mach",
        "type": "tuple",
        "internalType": "struct Machine",
        "components": [
          {
            "name": "status",
            "type": "uint8",
            "internalType": "enum MachineStatus"
          },
          {
            "name": "valueStack",
            "type": "tuple",
            "internalType": "struct ValueStack",
            "components": [
              {
                "name": "proved",
                "type": "tuple",
                "internalType": "struct ValueArray",
                "components": [
                  {
                    "name": "inner",
                    "type": "tuple[]",
                    "internalType": "struct Value[]",
                    "components": [
                      {
                        "name": "valueType",
                        "type": "uint8",
                        "internalType": "enum ValueType"
                      },
                      {
                        "name": "contents",
                        "type": "uint256",
                        "internalType": "uint256"
                      }
                    ]
                  }
                ]
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "valueMultiStack",
            "type": "tuple",
            "internalType": "struct MultiStack",
            "components": [
              {
                "name": "inactiveStackHash",
                "type": "bytes32",
                "internalType": "bytes32"
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "internalStack",
            "type": "tuple",
            "internalType": "struct ValueStack",
            "components": [
              {
                "name": "proved",
                "type": "tuple",
                "internalType": "struct ValueArray",
                "components": [
                  {
                    "name": "inner",
                    "type": "tuple[]",
                    "internalType": "struct Value[]",
                    "components": [
                      {
                        "name": "valueType",
                        "type": "uint8",
                        "internalType": "enum ValueType"
                      },
                      {
                        "name": "contents",
                        "type": "uint256",
                        "internalType": "uint256"
                      }
                    ]
                  }
                ]
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "frameStack",
            "type": "tuple",
            "internalType": "struct StackFrameWindow",
            "components": [
              {
                "name": "proved",
                "type": "tuple[]",
                "internalType": "struct StackFrame[]",
                "components": [
                  {
                    "name": "returnPc",
                    "type": "tuple",
                    "internalType": "struct Value",
                    "components": [
                      {
                        "name": "valueType",
                        "type": "uint8",
                        "internalType": "enum ValueType"
                      },
                      {
                        "name": "contents",
                        "type": "uint256",
                        "internalType": "uint256"
                      }
                    ]
                  },
                  {
                    "name": "localsMerkleRoot",
                    "type": "bytes32",
                    "internalType": "bytes32"
                  },
                  {
                    "name": "callerModule",
                    "type": "uint32",
                    "internalType": "uint32"
                  },
                  {
                    "name": "callerModuleInternals",
                    "type": "uint32",
                    "internalType": "uint32"
                  }
                ]
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "frameMultiStack",
            "type": "tuple",
            "internalType": "struct MultiStack",
            "components": [
              {
                "name": "inactiveStackHash",
                "type": "bytes32",
                "internalType": "bytes32"
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "globalStateHash",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "moduleIdx",
            "type": "uint32",
            "internalType": "uint32"
          },
          {
            "name": "functionIdx",
            "type": "uint32",
            "internalType": "uint32"
          },
          {
            "name": "functionPc",
            "type": "uint32",
            "internalType": "uint32"
          },
          {
            "name": "recoveryPc",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "modulesRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          }
        ]
      },
      {
        "name": "mod",
        "type": "tuple",
        "internalType": "struct Module",
        "components": [
          {
            "name": "globalsMerkleRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "moduleMemory",
            "type": "tuple",
            "internalType": "struct ModuleMemory",
            "components": [
              {
                "name": "size",
                "type": "uint64",
                "internalType": "uint64"
              },
              {
                "name": "maxSize",
                "type": "uint64",
                "internalType": "uint64"
              },
              {
                "name": "merkleRoot",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "tablesMerkleRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "functionsMerkleRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "extraHash",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "internalsOffset",
            "type": "uint32",
            "internalType": "uint32"
          }
        ]
      }
    ],
    "stateMutability": "pure"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod OneStepProverMath {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052348015600e575f5ffd5b506126358061001c5f395ff3fe608060405234801561000f575f5ffd5b5060043610610029575f3560e01c8063a92cb5011461002d575b5f5ffd5b61004061003b366004611b34565b610057565b60405161004e929190611d2b565b60405180910390f35b61005f61197b565b610067611a33565b61007087612258565b915061008136879003870187612398565b90505f6100916020870187612449565b9050611a9d61ffff8216604514806100ad575061ffff82166050145b156100bb57506102f76102d9565b604661ffff8316108015906100e357506100d76009604661247e565b61ffff168261ffff1611155b156100f1575061047e6102d9565b606761ffff831610801590610119575061010d6002606761247e565b61ffff168261ffff1611155b15610127575061055c6102d9565b606a61ffff8316108015906101415750607861ffff831611155b1561014f57506105c16102d9565b605161ffff831610801590610177575061016b6009605161247e565b61ffff168261ffff1611155b1561018557506107bf6102d9565b607961ffff8316108015906101ad57506101a16002607961247e565b61ffff168261ffff1611155b156101bb57506108206102d9565b607c61ffff8316108015906101d55750608a61ffff831611155b156101e357506108706102d9565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5961ffff8316016102175750610a3c6102d9565b61ffff821660ac148061022e575061ffff821660ad145b1561023c5750610a5c6102d9565b60c061ffff831610801590610256575060c461ffff831611155b156102645750610aad6102d9565b60bc61ffff83161080159061027e575060bf61ffff831611155b1561028c5750610cbf6102d9565b60405162461bcd60e51b815260206004820152600e60248201527f494e56414c49445f4f50434f444500000000000000000000000000000000000060448201526064015b60405180910390fd5b6102ea84848989898663ffffffff16565b5050965096945050505050565b5f6103058660200151610e51565b905060456103166020860186612449565b61ffff1603610385575f8151600681111561033357610333611c07565b146103805760405162461bcd60e51b815260206004820152600760248201527f4e4f545f4933320000000000000000000000000000000000000000000000000060448201526064016102d0565b610447565b60506103946020860186612449565b61ffff16036103ff576001815160068111156103b2576103b2611c07565b146103805760405162461bcd60e51b815260206004820152600760248201527f4e4f545f4936340000000000000000000000000000000000000000000000000060448201526064016102d0565b60405162461bcd60e51b815260206004820152600760248201527f4241445f45515a0000000000000000000000000000000000000000000000000060448201526064016102d0565b5f81602001515f0361045b5750600161045e565b505f5b61047561046a82610e6a565b602089015190610e90565b50505050505050565b5f61049461048f8760200151610e51565b610ea0565b90505f6104a761048f8860200151610e51565b90505f60466104b96020880188612449565b6104c39190612498565b90505f8061ffff8316600214806104de575061ffff83166004145b806104ed575061ffff83166006145b806104fc575061ffff83166008145b1561051c5761050a84610f5c565b915061051585610f5c565b905061052a565b505063ffffffff8083169084165b5f610536838386610f87565b905061054f6105448261121f565b60208d015190610e90565b5050505050505050505050565b5f61056d61048f8760200151610e51565b90505f606761057f6020870187612449565b6105899190612498565b90505f61059e8363ffffffff16836020611245565b90506105b76105ac82610e6a565b60208a015190610e90565b5050505050505050565b5f6105d261048f8760200151610e51565b90505f6105e561048f8860200151610e51565b90505f80606a6105f86020890189612449565b6106029190612498565b90508061ffff166003036106995763ffffffff8416158061065357508260030b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000000014801561065357508360030b5f19145b1561067c578860025b9081600281111561066f5761066f611c07565b81525050505050506107b8565b8360030b8360030b81610691576106916124b2565b05915061079c565b8061ffff166005036106d7578363ffffffff165f036106ba5788600261065c565b8360030b8360030b816106cf576106cf6124b2565b07915061079c565b8061ffff16600a036106f65763ffffffff8316601f85161b915061079c565b8061ffff16600c036107155763ffffffff8316601f85161c915061079c565b8061ffff16600b0361073257600383900b601f85161d915061079c565b8061ffff16600d0361074f57610748838561141f565b915061079c565b8061ffff16600e03610765576107488385611460565b5f5f61077e8563ffffffff168763ffffffff16856114a1565b91509150801561079857505060028952506107b892505050565b5091505b6107b36107a883610e6a565b60208b015190610e90565b505050505b5050505050565b5f6107d56107d08760200151610e51565b611628565b90505f6107e86107d08860200151610e51565b90505f60516107fa6020880188612449565b6108049190612498565b90505f610812838584610f87565b90506107b36107a88261121f565b5f6108316107d08760200151610e51565b90505f60796108436020870187612449565b61084d9190612498565b90505f61085c83836040611245565b63ffffffff1690506105b76105ac826116e9565b5f6108816107d08760200151610e51565b90505f6108946107d08860200151610e51565b90505f80607c6108a76020890189612449565b6108b19190612498565b90508061ffff166003036109305767ffffffffffffffff8416158061090657508260070b7fffffffffffffffffffffffffffffffffffffffffffffffff800000000000000014801561090657508360070b5f19145b156109135788600261065c565b8360070b8360070b81610928576109286124b2565b059150610a30565b8061ffff16600503610972578367ffffffffffffffff165f036109555788600261065c565b8360070b8360070b8161096a5761096a6124b2565b079150610a30565b8061ffff16600a036109955767ffffffffffffffff8316603f85161b9150610a30565b8061ffff16600c036109b85767ffffffffffffffff8316603f85161c9150610a30565b8061ffff16600b036109d557600783900b603f85161d9150610a30565b8061ffff16600d036109f2576109eb8385611714565b9150610a30565b8061ffff16600e03610a08576109eb8385611765565b5f610a148486846114a1565b90935090508015610a2e57505060028852506107b8915050565b505b6107b36107a8836116e9565b5f610a4d6107d08760200151610e51565b90508061047561046a82610e6a565b5f610a6d61048f8760200151610e51565b90505f60ac610a7f6020870187612449565b61ffff1603610a9857610a9182610f5c565b9050610aa1565b5063ffffffff81165b61047561046a826116e9565b5f8060c0610abe6020870187612449565b61ffff1603610ad257505f90506008610ba9565b60c1610ae16020870187612449565b61ffff1603610af557505f90506010610ba9565b60c2610b046020870187612449565b61ffff1603610b195750600190506008610ba9565b60c3610b286020870187612449565b61ffff1603610b3d5750600190506010610ba9565b60c4610b4c6020870187612449565b61ffff1603610b615750600190506020610ba9565b60405162461bcd60e51b815260206004820152601860248201527f494e56414c49445f455854454e445f53414d455f54595045000000000000000060448201526064016102d0565b5f80836006811115610bbd57610bbd611c07565b03610bcd575063ffffffff610bd8565b5067ffffffffffffffff5b5f610be68960200151610e51565b9050836006811115610bfa57610bfa611c07565b81516006811115610c0d57610c0d611c07565b14610c5a5760405162461bcd60e51b815260206004820152601960248201527f4241445f455854454e445f53414d455f545950455f545950450000000000000060448201526064016102d0565b5f610c6c600160ff861681901b6124c6565b602083018051821690529050610c836001856124d9565b60ff166001901b8260200151165f14610ca457602082018051821985161790525b60208a0151610cb39083610e90565b50505050505050505050565b5f8060bc610cd06020870187612449565b61ffff1603610ce457505f90506002610d97565b60bd610cf36020870187612449565b61ffff1603610d085750600190506003610d97565b60be610d176020870187612449565b61ffff1603610d2b5750600290505f610d97565b60bf610d3a6020870187612449565b61ffff1603610d4f5750600390506001610d97565b60405162461bcd60e51b815260206004820152601360248201527f494e56414c49445f5245494e544552505245540000000000000000000000000060448201526064016102d0565b5f610da58860200151610e51565b9050816006811115610db957610db9611c07565b81516006811115610dcc57610dcc611c07565b14610e195760405162461bcd60e51b815260206004820152601860248201527f494e56414c49445f5245494e544552505245545f54595045000000000000000060448201526064016102d0565b80836006811115610e2c57610e2c611c07565b90816006811115610e3f57610e3f611c07565b90525060208801516105b79082610e90565b610e59611aa7565b8151610e64906117b6565b92915050565b610e72611aa7565b50604080518082019091525f815263ffffffff909116602082015290565b8151610e9c90826118a1565b5050565b60208101515f908183516006811115610ebb57610ebb611c07565b14610f085760405162461bcd60e51b815260206004820152600760248201527f4e4f545f4933320000000000000000000000000000000000000000000000000060448201526064016102d0565b6401000000008110610e645760405162461bcd60e51b815260206004820152600760248201527f4241445f4933320000000000000000000000000000000000000000000000000060448201526064016102d0565b5f6380000000821615610f7d575063ffffffff1667ffffffff000000001790565b5063ffffffff1690565b5f61ffff8216610faf578267ffffffffffffffff168467ffffffffffffffff16149050611218565b5f1961ffff831601610fda578267ffffffffffffffff168467ffffffffffffffff1614159050611218565b60011961ffff831601610ff7578260070b8460070b129050611218565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd61ffff831601611040578267ffffffffffffffff168467ffffffffffffffff16109050611218565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc61ffff83160161107b578260070b8460070b139050611218565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb61ffff8316016110c4578267ffffffffffffffff168467ffffffffffffffff16119050611218565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa61ffff831601611100578260070b8460070b13159050611218565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff961ffff83160161114a578267ffffffffffffffff168467ffffffffffffffff1611159050611218565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff861ffff831601611186578260070b8460070b12159050611218565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff761ffff8316016111d0578267ffffffffffffffff168467ffffffffffffffff1610159050611218565b60405162461bcd60e51b815260206004820152600a60248201527f424144204952454c4f500000000000000000000000000000000000000000000060448201526064016102d0565b9392505050565b611227611aa7565b811561123757610e646001610e6a565b610e645f610e6a565b919050565b5f8161ffff166020148061125d57508161ffff166040145b6112a95760405162461bcd60e51b815260206004820152601860248201527f57524f4e4720555345204f462067656e65726963556e4f70000000000000000060448201526064016102d0565b61ffff83166113195761ffff82165b5f8163ffffffff161180156112ec57506112d36001826124f2565b63ffffffff166001901b8567ffffffffffffffff16165f145b15611303576112fc6001826124f2565b90506112b8565b6113118161ffff85166124f2565b915050611218565b5f1961ffff841601611371575f5b8261ffff168163ffffffff161080156113535750600163ffffffff82161b851667ffffffffffffffff16155b1561136a5761136360018261250e565b9050611327565b9050611218565b60011961ffff8416016113d7575f805b8361ffff168263ffffffff1610156113ce57600163ffffffff83161b861667ffffffffffffffff16156113bc576113b960018261250e565b90505b816113c68161252a565b925050611381565b91506112189050565b60405162461bcd60e51b815260206004820152600960248201527f4241442049556e4f70000000000000000000000000000000000000000000000060448201526064016102d0565b5f61142b60208361254e565b91506114388260206124f2565b63ffffffff168363ffffffff16901c8263ffffffff168463ffffffff16901b17905092915050565b5f61146c60208361254e565b91506114798260206124f2565b63ffffffff168363ffffffff16901b8263ffffffff168463ffffffff16901c17905092915050565b5f5f8261ffff165f036114b95750508282015f611620565b8261ffff166001036114d05750508183035f611620565b8261ffff166002036114e75750508282025f611620565b8261ffff1660040361153d578367ffffffffffffffff165f0361150f57505f90506001611620565b8367ffffffffffffffff168567ffffffffffffffff1681611532576115326124b2565b045f91509150611620565b8261ffff16600603611593578367ffffffffffffffff165f0361156557505f90506001611620565b8367ffffffffffffffff168567ffffffffffffffff1681611588576115886124b2565b065f91509150611620565b8261ffff166007036115aa5750508282165f611620565b8261ffff166008036115c15750508282175f611620565b8261ffff166009036115d85750508282185f611620565b60405162461bcd60e51b815260206004820152601660248201527f494e56414c49445f47454e455249435f42494e5f4f500000000000000000000060448201526064016102d0565b935093915050565b60208101515f9060018351600681111561164457611644611c07565b146116915760405162461bcd60e51b815260206004820152600760248201527f4e4f545f4936340000000000000000000000000000000000000000000000000060448201526064016102d0565b680100000000000000008110610e645760405162461bcd60e51b815260206004820152600760248201527f4241445f4936340000000000000000000000000000000000000000000000000060448201526064016102d0565b6116f1611aa7565b50604080518082019091526001815267ffffffffffffffff909116602082015290565b5f611720604083612575565b915061172d8260406125a4565b67ffffffffffffffff168367ffffffffffffffff16901c8267ffffffffffffffff168467ffffffffffffffff16901b17905092915050565b5f611771604083612575565b915061177e8260406125a4565b67ffffffffffffffff168367ffffffffffffffff16901b8267ffffffffffffffff168467ffffffffffffffff16901c17905092915050565b6117be611aa7565b815180516117ce906001906124c6565b815181106117de576117de6125c4565b602002602001015190505f6001835f0151516117fa91906124c6565b67ffffffffffffffff81111561181257611812611ea7565b60405190808252806020026020018201604052801561184b57816020015b611838611aa7565b8152602001906001900390816118305790505b5090505f5b815181101561189a57835180518290811061186d5761186d6125c4565b6020026020010151828281518110611887576118876125c4565b6020908102919091010152600101611850565b5090915290565b8151515f906118b19060016125d8565b67ffffffffffffffff8111156118c9576118c9611ea7565b60405190808252806020026020018201604052801561190257816020015b6118ef611aa7565b8152602001906001900390816118e75790505b5090505f5b835151811015611952578351805182908110611925576119256125c4565b602002602001015182828151811061193f5761193f6125c4565b6020908102919091010152600101611907565b508181845f0151518151811061196a5761196a6125c4565b602090810291909101015290915250565b604080516101808101909152805f8152602001611996611ac0565b81526020016119b660405180604001604052805f81526020015f81525090565b81526020016119c3611ac0565b81526020016119e46040518060400160405280606081526020015f81525090565b8152602001611a0460405180604001604052805f81526020015f81525090565b81525f6020820181905260408201819052606082018190526080820181905260a0820181905260c09091015290565b6040518060c001604052805f8152602001611a7960405180606001604052805f67ffffffffffffffff1681526020015f67ffffffffffffffff1681526020015f81525090565b81526020015f81526020015f81526020015f81526020015f63ffffffff1681525090565b611aa56125eb565b565b60408051808201909152805f5b81526020015f81525090565b6040805160608082018352918101918252908190611ab4565b5f60408284031215611ae9575f5ffd5b50919050565b5f5f83601f840112611aff575f5ffd5b50813567ffffffffffffffff811115611b16575f5ffd5b602083019150836020828501011115611b2d575f5ffd5b9250929050565b5f5f5f5f5f5f8688036101e0811215611b4b575f5ffd5b6060811215611b58575f5ffd5b879650606088013567ffffffffffffffff811115611b74575f5ffd5b88016101c0818b031215611b86575f5ffd5b95506101007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8082011215611bb8575f5ffd5b50608087019350611bcd886101808901611ad9565b92506101c087013567ffffffffffffffff811115611be9575f5ffd5b611bf589828a01611aef565b979a9699509497509295939492505050565b634e487b7160e01b5f52602160045260245ffd5b60038110611c2b57611c2b611c07565b9052565b805160078110611c4157611c41611c07565b8252602090810151910152565b80516040808452905160209184018290528051606085018190525f9290910190829060808601905b80831015611ca057611c89828551611c2f565b604082019150602084019350600183019250611c76565b506020850151602087015280935050505092915050565b8051604080845281519084018190525f9160200190829060608601905b80831015611ca0578351611ce9838251611c2f565b6020810151604084015263ffffffff604082015116606084015263ffffffff60608201511660808401525060a082019150602084019350600183019250611cd4565b6101208152611d3f61012082018451611c1b565b5f60208401516101c0610140840152611d5c6102e0840182611c4e565b6040860151805161016086015260200151610180850152606086015184820361011f19016101a0860152909150611d938282611c4e565b915050608085015161011f19848303016101c0850152611db38282611cb7565b91505060a0850151611dd36101e085018280518252602090810151910152565b5060c085015161022084015260e085015163ffffffff81166102408501525061010085015163ffffffff81166102608501525061012085015163ffffffff8116610280850152506101408501516102a08401526101608501516102c08401529050611218602083018480518252602081015167ffffffffffffffff815116602084015267ffffffffffffffff6020820151166040840152604081015160608401525060408101516080830152606081015160a0830152608081015160c083015263ffffffff60a08201511660e08301525050565b634e487b7160e01b5f52604160045260245ffd5b6040805190810167ffffffffffffffff81118282101715611ede57611ede611ea7565b60405290565b6040516020810167ffffffffffffffff81118282101715611ede57611ede611ea7565b6040516080810167ffffffffffffffff81118282101715611ede57611ede611ea7565b604051610180810167ffffffffffffffff81118282101715611ede57611ede611ea7565b60405160c0810167ffffffffffffffff81118282101715611ede57611ede611ea7565b6040516060810167ffffffffffffffff81118282101715611ede57611ede611ea7565b604051601f8201601f1916810167ffffffffffffffff81118282101715611fbd57611fbd611ea7565b604052919050565b803560038110611240575f5ffd5b5f67ffffffffffffffff821115611fec57611fec611ea7565b5060051b60200190565b5f60408284031215612006575f5ffd5b61200e611ebb565b905081356007811061201e575f5ffd5b808252506020820135602082015292915050565b5f60408284031215612042575f5ffd5b61204a611ebb565b9050813567ffffffffffffffff811115612062575f5ffd5b820160208185031215612073575f5ffd5b61207b611ee4565b813567ffffffffffffffff811115612091575f5ffd5b80830192505084601f8301126120a5575f5ffd5b81356120b86120b382611fd3565b611f94565b8082825260208201915060208360061b8601019250878311156120d9575f5ffd5b6020850194505b82851015612105576120f28886611ff6565b82526020820191506040850194506120e0565b8352505082525060209182013591810191909152919050565b5f6040828403121561212e575f5ffd5b612136611ebb565b823581526020928301359281019290925250919050565b803563ffffffff81168114611240575f5ffd5b5f60408284031215612170575f5ffd5b612178611ebb565b9050813567ffffffffffffffff811115612190575f5ffd5b8201601f810184136121a0575f5ffd5b80356121ae6120b382611fd3565b80828252602082019150602060a084028501019250868311156121cf575f5ffd5b6020840193505b828410156122415760a084880312156121ed575f5ffd5b6121f5611f07565b6121ff8886611ff6565b8152604085013560208201526122176060860161214d565b60408201526122286080860161214d565b6060820152825260a093909301926020909101906121d6565b845250505060209182013591810191909152919050565b5f6101c08236031215612269575f5ffd5b612271611f2a565b61227a83611fc5565b8152602083013567ffffffffffffffff811115612295575f5ffd5b6122a136828601612032565b6020830152506122b4366040850161211e565b6040820152608083013567ffffffffffffffff8111156122d2575f5ffd5b6122de36828601612032565b60608301525060a083013567ffffffffffffffff8111156122fd575f5ffd5b61230936828601612160565b60808301525061231c3660c0850161211e565b60a082015261010083013560c0820152612339610120840161214d565b60e082015261234b610140840161214d565b61010082015261235e610160840161214d565b6101208201526101808301356101408201526101a0909201356101608301525090565b803567ffffffffffffffff81168114611240575f5ffd5b5f818303610100811280156123ab575f5ffd5b506123b4611f4e565b833581526060601f19830112156123c9575f5ffd5b6123d1611f71565b91506123df60208501612381565b82526123ed60408501612381565b602083810191909152606085810135604080860191909152918301939093526080808601359183019190915260a08501359282019290925260c084013591810182905261243c60e0850161214d565b60a0820152949350505050565b5f60208284031215612459575f5ffd5b813561ffff81168114611218575f5ffd5b634e487b7160e01b5f52601160045260245ffd5b61ffff8181168382160190811115610e6457610e6461246a565b61ffff8281168282160390811115610e6457610e6461246a565b634e487b7160e01b5f52601260045260245ffd5b81810381811115610e6457610e6461246a565b60ff8281168282160390811115610e6457610e6461246a565b63ffffffff8281168282160390811115610e6457610e6461246a565b63ffffffff8181168382160190811115610e6457610e6461246a565b5f63ffffffff821663ffffffff81036125455761254561246a565b60010192915050565b5f63ffffffff831680612563576125636124b2565b8063ffffffff84160691505092915050565b5f67ffffffffffffffff83168061258e5761258e6124b2565b8067ffffffffffffffff84160691505092915050565b67ffffffffffffffff8281168282160390811115610e6457610e6461246a565b634e487b7160e01b5f52603260045260245ffd5b80820180821115610e6457610e6461246a565b634e487b7160e01b5f52605160045260245ffdfea2646970667358221220d180c6411a516d3f50aebae8423b5b82d048782e8ba7b4ea51b549119455307d64736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15`\x0EW__\xFD[Pa&5\x80a\0\x1C_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0)W_5`\xE0\x1C\x80c\xA9,\xB5\x01\x14a\0-W[__\xFD[a\0@a\0;6`\x04a\x1B4V[a\0WV[`@Qa\0N\x92\x91\x90a\x1D+V[`@Q\x80\x91\x03\x90\xF3[a\0_a\x19{V[a\0ga\x1A3V[a\0p\x87a\"XV[\x91Pa\0\x816\x87\x90\x03\x87\x01\x87a#\x98V[\x90P_a\0\x91` \x87\x01\x87a$IV[\x90Pa\x1A\x9Da\xFF\xFF\x82\x16`E\x14\x80a\0\xADWPa\xFF\xFF\x82\x16`P\x14[\x15a\0\xBBWPa\x02\xF7a\x02\xD9V[`Fa\xFF\xFF\x83\x16\x10\x80\x15\x90a\0\xE3WPa\0\xD7`\t`Fa$~V[a\xFF\xFF\x16\x82a\xFF\xFF\x16\x11\x15[\x15a\0\xF1WPa\x04~a\x02\xD9V[`ga\xFF\xFF\x83\x16\x10\x80\x15\x90a\x01\x19WPa\x01\r`\x02`ga$~V[a\xFF\xFF\x16\x82a\xFF\xFF\x16\x11\x15[\x15a\x01'WPa\x05\\a\x02\xD9V[`ja\xFF\xFF\x83\x16\x10\x80\x15\x90a\x01AWP`xa\xFF\xFF\x83\x16\x11\x15[\x15a\x01OWPa\x05\xC1a\x02\xD9V[`Qa\xFF\xFF\x83\x16\x10\x80\x15\x90a\x01wWPa\x01k`\t`Qa$~V[a\xFF\xFF\x16\x82a\xFF\xFF\x16\x11\x15[\x15a\x01\x85WPa\x07\xBFa\x02\xD9V[`ya\xFF\xFF\x83\x16\x10\x80\x15\x90a\x01\xADWPa\x01\xA1`\x02`ya$~V[a\xFF\xFF\x16\x82a\xFF\xFF\x16\x11\x15[\x15a\x01\xBBWPa\x08 a\x02\xD9V[`|a\xFF\xFF\x83\x16\x10\x80\x15\x90a\x01\xD5WP`\x8Aa\xFF\xFF\x83\x16\x11\x15[\x15a\x01\xE3WPa\x08pa\x02\xD9V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFYa\xFF\xFF\x83\x16\x01a\x02\x17WPa\n<a\x02\xD9V[a\xFF\xFF\x82\x16`\xAC\x14\x80a\x02.WPa\xFF\xFF\x82\x16`\xAD\x14[\x15a\x02<WPa\n\\a\x02\xD9V[`\xC0a\xFF\xFF\x83\x16\x10\x80\x15\x90a\x02VWP`\xC4a\xFF\xFF\x83\x16\x11\x15[\x15a\x02dWPa\n\xADa\x02\xD9V[`\xBCa\xFF\xFF\x83\x16\x10\x80\x15\x90a\x02~WP`\xBFa\xFF\xFF\x83\x16\x11\x15[\x15a\x02\x8CWPa\x0C\xBFa\x02\xD9V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0E`$\x82\x01R\x7FINVALID_OPCODE\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01[`@Q\x80\x91\x03\x90\xFD[a\x02\xEA\x84\x84\x89\x89\x89\x86c\xFF\xFF\xFF\xFF\x16V[PP\x96P\x96\x94PPPPPV[_a\x03\x05\x86` \x01Qa\x0EQV[\x90P`Ea\x03\x16` \x86\x01\x86a$IV[a\xFF\xFF\x16\x03a\x03\x85W_\x81Q`\x06\x81\x11\x15a\x033Wa\x033a\x1C\x07V[\x14a\x03\x80W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FNOT_I32\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xD0V[a\x04GV[`Pa\x03\x94` \x86\x01\x86a$IV[a\xFF\xFF\x16\x03a\x03\xFFW`\x01\x81Q`\x06\x81\x11\x15a\x03\xB2Wa\x03\xB2a\x1C\x07V[\x14a\x03\x80W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FNOT_I64\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xD0V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FBAD_EQZ\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xD0V[_\x81` \x01Q_\x03a\x04[WP`\x01a\x04^V[P_[a\x04ua\x04j\x82a\x0EjV[` \x89\x01Q\x90a\x0E\x90V[PPPPPPPV[_a\x04\x94a\x04\x8F\x87` \x01Qa\x0EQV[a\x0E\xA0V[\x90P_a\x04\xA7a\x04\x8F\x88` \x01Qa\x0EQV[\x90P_`Fa\x04\xB9` \x88\x01\x88a$IV[a\x04\xC3\x91\x90a$\x98V[\x90P_\x80a\xFF\xFF\x83\x16`\x02\x14\x80a\x04\xDEWPa\xFF\xFF\x83\x16`\x04\x14[\x80a\x04\xEDWPa\xFF\xFF\x83\x16`\x06\x14[\x80a\x04\xFCWPa\xFF\xFF\x83\x16`\x08\x14[\x15a\x05\x1CWa\x05\n\x84a\x0F\\V[\x91Pa\x05\x15\x85a\x0F\\V[\x90Pa\x05*V[PPc\xFF\xFF\xFF\xFF\x80\x83\x16\x90\x84\x16[_a\x056\x83\x83\x86a\x0F\x87V[\x90Pa\x05Oa\x05D\x82a\x12\x1FV[` \x8D\x01Q\x90a\x0E\x90V[PPPPPPPPPPPV[_a\x05ma\x04\x8F\x87` \x01Qa\x0EQV[\x90P_`ga\x05\x7F` \x87\x01\x87a$IV[a\x05\x89\x91\x90a$\x98V[\x90P_a\x05\x9E\x83c\xFF\xFF\xFF\xFF\x16\x83` a\x12EV[\x90Pa\x05\xB7a\x05\xAC\x82a\x0EjV[` \x8A\x01Q\x90a\x0E\x90V[PPPPPPPPV[_a\x05\xD2a\x04\x8F\x87` \x01Qa\x0EQV[\x90P_a\x05\xE5a\x04\x8F\x88` \x01Qa\x0EQV[\x90P_\x80`ja\x05\xF8` \x89\x01\x89a$IV[a\x06\x02\x91\x90a$\x98V[\x90P\x80a\xFF\xFF\x16`\x03\x03a\x06\x99Wc\xFF\xFF\xFF\xFF\x84\x16\x15\x80a\x06SWP\x82`\x03\x0B\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\0\0\0\x14\x80\x15a\x06SWP\x83`\x03\x0B_\x19\x14[\x15a\x06|W\x88`\x02[\x90\x81`\x02\x81\x11\x15a\x06oWa\x06oa\x1C\x07V[\x81RPPPPPPa\x07\xB8V[\x83`\x03\x0B\x83`\x03\x0B\x81a\x06\x91Wa\x06\x91a$\xB2V[\x05\x91Pa\x07\x9CV[\x80a\xFF\xFF\x16`\x05\x03a\x06\xD7W\x83c\xFF\xFF\xFF\xFF\x16_\x03a\x06\xBAW\x88`\x02a\x06\\V[\x83`\x03\x0B\x83`\x03\x0B\x81a\x06\xCFWa\x06\xCFa$\xB2V[\x07\x91Pa\x07\x9CV[\x80a\xFF\xFF\x16`\n\x03a\x06\xF6Wc\xFF\xFF\xFF\xFF\x83\x16`\x1F\x85\x16\x1B\x91Pa\x07\x9CV[\x80a\xFF\xFF\x16`\x0C\x03a\x07\x15Wc\xFF\xFF\xFF\xFF\x83\x16`\x1F\x85\x16\x1C\x91Pa\x07\x9CV[\x80a\xFF\xFF\x16`\x0B\x03a\x072W`\x03\x83\x90\x0B`\x1F\x85\x16\x1D\x91Pa\x07\x9CV[\x80a\xFF\xFF\x16`\r\x03a\x07OWa\x07H\x83\x85a\x14\x1FV[\x91Pa\x07\x9CV[\x80a\xFF\xFF\x16`\x0E\x03a\x07eWa\x07H\x83\x85a\x14`V[__a\x07~\x85c\xFF\xFF\xFF\xFF\x16\x87c\xFF\xFF\xFF\xFF\x16\x85a\x14\xA1V[\x91P\x91P\x80\x15a\x07\x98WPP`\x02\x89RPa\x07\xB8\x92PPPV[P\x91P[a\x07\xB3a\x07\xA8\x83a\x0EjV[` \x8B\x01Q\x90a\x0E\x90V[PPPP[PPPPPV[_a\x07\xD5a\x07\xD0\x87` \x01Qa\x0EQV[a\x16(V[\x90P_a\x07\xE8a\x07\xD0\x88` \x01Qa\x0EQV[\x90P_`Qa\x07\xFA` \x88\x01\x88a$IV[a\x08\x04\x91\x90a$\x98V[\x90P_a\x08\x12\x83\x85\x84a\x0F\x87V[\x90Pa\x07\xB3a\x07\xA8\x82a\x12\x1FV[_a\x081a\x07\xD0\x87` \x01Qa\x0EQV[\x90P_`ya\x08C` \x87\x01\x87a$IV[a\x08M\x91\x90a$\x98V[\x90P_a\x08\\\x83\x83`@a\x12EV[c\xFF\xFF\xFF\xFF\x16\x90Pa\x05\xB7a\x05\xAC\x82a\x16\xE9V[_a\x08\x81a\x07\xD0\x87` \x01Qa\x0EQV[\x90P_a\x08\x94a\x07\xD0\x88` \x01Qa\x0EQV[\x90P_\x80`|a\x08\xA7` \x89\x01\x89a$IV[a\x08\xB1\x91\x90a$\x98V[\x90P\x80a\xFF\xFF\x16`\x03\x03a\t0Wg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x16\x15\x80a\t\x06WP\x82`\x07\x0B\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\0\0\0\0\0\0\0\x14\x80\x15a\t\x06WP\x83`\x07\x0B_\x19\x14[\x15a\t\x13W\x88`\x02a\x06\\V[\x83`\x07\x0B\x83`\x07\x0B\x81a\t(Wa\t(a$\xB2V[\x05\x91Pa\n0V[\x80a\xFF\xFF\x16`\x05\x03a\trW\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_\x03a\tUW\x88`\x02a\x06\\V[\x83`\x07\x0B\x83`\x07\x0B\x81a\tjWa\tja$\xB2V[\x07\x91Pa\n0V[\x80a\xFF\xFF\x16`\n\x03a\t\x95Wg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16`?\x85\x16\x1B\x91Pa\n0V[\x80a\xFF\xFF\x16`\x0C\x03a\t\xB8Wg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16`?\x85\x16\x1C\x91Pa\n0V[\x80a\xFF\xFF\x16`\x0B\x03a\t\xD5W`\x07\x83\x90\x0B`?\x85\x16\x1D\x91Pa\n0V[\x80a\xFF\xFF\x16`\r\x03a\t\xF2Wa\t\xEB\x83\x85a\x17\x14V[\x91Pa\n0V[\x80a\xFF\xFF\x16`\x0E\x03a\n\x08Wa\t\xEB\x83\x85a\x17eV[_a\n\x14\x84\x86\x84a\x14\xA1V[\x90\x93P\x90P\x80\x15a\n.WPP`\x02\x88RPa\x07\xB8\x91PPV[P[a\x07\xB3a\x07\xA8\x83a\x16\xE9V[_a\nMa\x07\xD0\x87` \x01Qa\x0EQV[\x90P\x80a\x04ua\x04j\x82a\x0EjV[_a\nma\x04\x8F\x87` \x01Qa\x0EQV[\x90P_`\xACa\n\x7F` \x87\x01\x87a$IV[a\xFF\xFF\x16\x03a\n\x98Wa\n\x91\x82a\x0F\\V[\x90Pa\n\xA1V[Pc\xFF\xFF\xFF\xFF\x81\x16[a\x04ua\x04j\x82a\x16\xE9V[_\x80`\xC0a\n\xBE` \x87\x01\x87a$IV[a\xFF\xFF\x16\x03a\n\xD2WP_\x90P`\x08a\x0B\xA9V[`\xC1a\n\xE1` \x87\x01\x87a$IV[a\xFF\xFF\x16\x03a\n\xF5WP_\x90P`\x10a\x0B\xA9V[`\xC2a\x0B\x04` \x87\x01\x87a$IV[a\xFF\xFF\x16\x03a\x0B\x19WP`\x01\x90P`\x08a\x0B\xA9V[`\xC3a\x0B(` \x87\x01\x87a$IV[a\xFF\xFF\x16\x03a\x0B=WP`\x01\x90P`\x10a\x0B\xA9V[`\xC4a\x0BL` \x87\x01\x87a$IV[a\xFF\xFF\x16\x03a\x0BaWP`\x01\x90P` a\x0B\xA9V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x18`$\x82\x01R\x7FINVALID_EXTEND_SAME_TYPE\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xD0V[_\x80\x83`\x06\x81\x11\x15a\x0B\xBDWa\x0B\xBDa\x1C\x07V[\x03a\x0B\xCDWPc\xFF\xFF\xFF\xFFa\x0B\xD8V[Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF[_a\x0B\xE6\x89` \x01Qa\x0EQV[\x90P\x83`\x06\x81\x11\x15a\x0B\xFAWa\x0B\xFAa\x1C\x07V[\x81Q`\x06\x81\x11\x15a\x0C\rWa\x0C\ra\x1C\x07V[\x14a\x0CZW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x19`$\x82\x01R\x7FBAD_EXTEND_SAME_TYPE_TYPE\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xD0V[_a\x0Cl`\x01`\xFF\x86\x16\x81\x90\x1Ba$\xC6V[` \x83\x01\x80Q\x82\x16\x90R\x90Pa\x0C\x83`\x01\x85a$\xD9V[`\xFF\x16`\x01\x90\x1B\x82` \x01Q\x16_\x14a\x0C\xA4W` \x82\x01\x80Q\x82\x19\x85\x16\x17\x90R[` \x8A\x01Qa\x0C\xB3\x90\x83a\x0E\x90V[PPPPPPPPPPV[_\x80`\xBCa\x0C\xD0` \x87\x01\x87a$IV[a\xFF\xFF\x16\x03a\x0C\xE4WP_\x90P`\x02a\r\x97V[`\xBDa\x0C\xF3` \x87\x01\x87a$IV[a\xFF\xFF\x16\x03a\r\x08WP`\x01\x90P`\x03a\r\x97V[`\xBEa\r\x17` \x87\x01\x87a$IV[a\xFF\xFF\x16\x03a\r+WP`\x02\x90P_a\r\x97V[`\xBFa\r:` \x87\x01\x87a$IV[a\xFF\xFF\x16\x03a\rOWP`\x03\x90P`\x01a\r\x97V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x13`$\x82\x01R\x7FINVALID_REINTERPRET\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xD0V[_a\r\xA5\x88` \x01Qa\x0EQV[\x90P\x81`\x06\x81\x11\x15a\r\xB9Wa\r\xB9a\x1C\x07V[\x81Q`\x06\x81\x11\x15a\r\xCCWa\r\xCCa\x1C\x07V[\x14a\x0E\x19W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x18`$\x82\x01R\x7FINVALID_REINTERPRET_TYPE\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xD0V[\x80\x83`\x06\x81\x11\x15a\x0E,Wa\x0E,a\x1C\x07V[\x90\x81`\x06\x81\x11\x15a\x0E?Wa\x0E?a\x1C\x07V[\x90RP` \x88\x01Qa\x05\xB7\x90\x82a\x0E\x90V[a\x0EYa\x1A\xA7V[\x81Qa\x0Ed\x90a\x17\xB6V[\x92\x91PPV[a\x0Era\x1A\xA7V[P`@\x80Q\x80\x82\x01\x90\x91R_\x81Rc\xFF\xFF\xFF\xFF\x90\x91\x16` \x82\x01R\x90V[\x81Qa\x0E\x9C\x90\x82a\x18\xA1V[PPV[` \x81\x01Q_\x90\x81\x83Q`\x06\x81\x11\x15a\x0E\xBBWa\x0E\xBBa\x1C\x07V[\x14a\x0F\x08W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FNOT_I32\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xD0V[d\x01\0\0\0\0\x81\x10a\x0EdW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FBAD_I32\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xD0V[_c\x80\0\0\0\x82\x16\x15a\x0F}WPc\xFF\xFF\xFF\xFF\x16g\xFF\xFF\xFF\xFF\0\0\0\0\x17\x90V[Pc\xFF\xFF\xFF\xFF\x16\x90V[_a\xFF\xFF\x82\x16a\x0F\xAFW\x82g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14\x90Pa\x12\x18V[_\x19a\xFF\xFF\x83\x16\x01a\x0F\xDAW\x82g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14\x15\x90Pa\x12\x18V[`\x01\x19a\xFF\xFF\x83\x16\x01a\x0F\xF7W\x82`\x07\x0B\x84`\x07\x0B\x12\x90Pa\x12\x18V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFDa\xFF\xFF\x83\x16\x01a\x10@W\x82g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x10\x90Pa\x12\x18V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFCa\xFF\xFF\x83\x16\x01a\x10{W\x82`\x07\x0B\x84`\x07\x0B\x13\x90Pa\x12\x18V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFBa\xFF\xFF\x83\x16\x01a\x10\xC4W\x82g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x11\x90Pa\x12\x18V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFAa\xFF\xFF\x83\x16\x01a\x11\0W\x82`\x07\x0B\x84`\x07\x0B\x13\x15\x90Pa\x12\x18V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xF9a\xFF\xFF\x83\x16\x01a\x11JW\x82g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x11\x15\x90Pa\x12\x18V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xF8a\xFF\xFF\x83\x16\x01a\x11\x86W\x82`\x07\x0B\x84`\x07\x0B\x12\x15\x90Pa\x12\x18V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xF7a\xFF\xFF\x83\x16\x01a\x11\xD0W\x82g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x10\x15\x90Pa\x12\x18V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\n`$\x82\x01R\x7FBAD IRELOP\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xD0V[\x93\x92PPPV[a\x12'a\x1A\xA7V[\x81\x15a\x127Wa\x0Ed`\x01a\x0EjV[a\x0Ed_a\x0EjV[\x91\x90PV[_\x81a\xFF\xFF\x16` \x14\x80a\x12]WP\x81a\xFF\xFF\x16`@\x14[a\x12\xA9W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x18`$\x82\x01R\x7FWRONG USE OF genericUnOp\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xD0V[a\xFF\xFF\x83\x16a\x13\x19Wa\xFF\xFF\x82\x16[_\x81c\xFF\xFF\xFF\xFF\x16\x11\x80\x15a\x12\xECWPa\x12\xD3`\x01\x82a$\xF2V[c\xFF\xFF\xFF\xFF\x16`\x01\x90\x1B\x85g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x16_\x14[\x15a\x13\x03Wa\x12\xFC`\x01\x82a$\xF2V[\x90Pa\x12\xB8V[a\x13\x11\x81a\xFF\xFF\x85\x16a$\xF2V[\x91PPa\x12\x18V[_\x19a\xFF\xFF\x84\x16\x01a\x13qW_[\x82a\xFF\xFF\x16\x81c\xFF\xFF\xFF\xFF\x16\x10\x80\x15a\x13SWP`\x01c\xFF\xFF\xFF\xFF\x82\x16\x1B\x85\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x15[\x15a\x13jWa\x13c`\x01\x82a%\x0EV[\x90Pa\x13'V[\x90Pa\x12\x18V[`\x01\x19a\xFF\xFF\x84\x16\x01a\x13\xD7W_\x80[\x83a\xFF\xFF\x16\x82c\xFF\xFF\xFF\xFF\x16\x10\x15a\x13\xCEW`\x01c\xFF\xFF\xFF\xFF\x83\x16\x1B\x86\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x15a\x13\xBCWa\x13\xB9`\x01\x82a%\x0EV[\x90P[\x81a\x13\xC6\x81a%*V[\x92PPa\x13\x81V[\x91Pa\x12\x18\x90PV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\t`$\x82\x01R\x7FBAD IUnOp\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xD0V[_a\x14+` \x83a%NV[\x91Pa\x148\x82` a$\xF2V[c\xFF\xFF\xFF\xFF\x16\x83c\xFF\xFF\xFF\xFF\x16\x90\x1C\x82c\xFF\xFF\xFF\xFF\x16\x84c\xFF\xFF\xFF\xFF\x16\x90\x1B\x17\x90P\x92\x91PPV[_a\x14l` \x83a%NV[\x91Pa\x14y\x82` a$\xF2V[c\xFF\xFF\xFF\xFF\x16\x83c\xFF\xFF\xFF\xFF\x16\x90\x1B\x82c\xFF\xFF\xFF\xFF\x16\x84c\xFF\xFF\xFF\xFF\x16\x90\x1C\x17\x90P\x92\x91PPV[__\x82a\xFF\xFF\x16_\x03a\x14\xB9WPP\x82\x82\x01_a\x16 V[\x82a\xFF\xFF\x16`\x01\x03a\x14\xD0WPP\x81\x83\x03_a\x16 V[\x82a\xFF\xFF\x16`\x02\x03a\x14\xE7WPP\x82\x82\x02_a\x16 V[\x82a\xFF\xFF\x16`\x04\x03a\x15=W\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_\x03a\x15\x0FWP_\x90P`\x01a\x16 V[\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x85g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81a\x152Wa\x152a$\xB2V[\x04_\x91P\x91Pa\x16 V[\x82a\xFF\xFF\x16`\x06\x03a\x15\x93W\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_\x03a\x15eWP_\x90P`\x01a\x16 V[\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x85g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81a\x15\x88Wa\x15\x88a$\xB2V[\x06_\x91P\x91Pa\x16 V[\x82a\xFF\xFF\x16`\x07\x03a\x15\xAAWPP\x82\x82\x16_a\x16 V[\x82a\xFF\xFF\x16`\x08\x03a\x15\xC1WPP\x82\x82\x17_a\x16 V[\x82a\xFF\xFF\x16`\t\x03a\x15\xD8WPP\x82\x82\x18_a\x16 V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x16`$\x82\x01R\x7FINVALID_GENERIC_BIN_OP\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xD0V[\x93P\x93\x91PPV[` \x81\x01Q_\x90`\x01\x83Q`\x06\x81\x11\x15a\x16DWa\x16Da\x1C\x07V[\x14a\x16\x91W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FNOT_I64\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xD0V[h\x01\0\0\0\0\0\0\0\0\x81\x10a\x0EdW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FBAD_I64\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xD0V[a\x16\xF1a\x1A\xA7V[P`@\x80Q\x80\x82\x01\x90\x91R`\x01\x81Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16` \x82\x01R\x90V[_a\x17 `@\x83a%uV[\x91Pa\x17-\x82`@a%\xA4V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x1C\x82g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x1B\x17\x90P\x92\x91PPV[_a\x17q`@\x83a%uV[\x91Pa\x17~\x82`@a%\xA4V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x1B\x82g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x1C\x17\x90P\x92\x91PPV[a\x17\xBEa\x1A\xA7V[\x81Q\x80Qa\x17\xCE\x90`\x01\x90a$\xC6V[\x81Q\x81\x10a\x17\xDEWa\x17\xDEa%\xC4V[` \x02` \x01\x01Q\x90P_`\x01\x83_\x01QQa\x17\xFA\x91\x90a$\xC6V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x18\x12Wa\x18\x12a\x1E\xA7V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x18KW\x81` \x01[a\x188a\x1A\xA7V[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x180W\x90P[P\x90P_[\x81Q\x81\x10\x15a\x18\x9AW\x83Q\x80Q\x82\x90\x81\x10a\x18mWa\x18ma%\xC4V[` \x02` \x01\x01Q\x82\x82\x81Q\x81\x10a\x18\x87Wa\x18\x87a%\xC4V[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a\x18PV[P\x90\x91R\x90V[\x81QQ_\x90a\x18\xB1\x90`\x01a%\xD8V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x18\xC9Wa\x18\xC9a\x1E\xA7V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x19\x02W\x81` \x01[a\x18\xEFa\x1A\xA7V[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x18\xE7W\x90P[P\x90P_[\x83QQ\x81\x10\x15a\x19RW\x83Q\x80Q\x82\x90\x81\x10a\x19%Wa\x19%a%\xC4V[` \x02` \x01\x01Q\x82\x82\x81Q\x81\x10a\x19?Wa\x19?a%\xC4V[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a\x19\x07V[P\x81\x81\x84_\x01QQ\x81Q\x81\x10a\x19jWa\x19ja%\xC4V[` \x90\x81\x02\x91\x90\x91\x01\x01R\x90\x91RPV[`@\x80Qa\x01\x80\x81\x01\x90\x91R\x80_\x81R` \x01a\x19\x96a\x1A\xC0V[\x81R` \x01a\x19\xB6`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a\x19\xC3a\x1A\xC0V[\x81R` \x01a\x19\xE4`@Q\x80`@\x01`@R\x80``\x81R` \x01_\x81RP\x90V[\x81R` \x01a\x1A\x04`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R_` \x82\x01\x81\x90R`@\x82\x01\x81\x90R``\x82\x01\x81\x90R`\x80\x82\x01\x81\x90R`\xA0\x82\x01\x81\x90R`\xC0\x90\x91\x01R\x90V[`@Q\x80`\xC0\x01`@R\x80_\x81R` \x01a\x1Ay`@Q\x80``\x01`@R\x80_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_\x81RP\x90V[\x81R` \x01_\x81R` \x01_\x81R` \x01_\x81R` \x01_c\xFF\xFF\xFF\xFF\x16\x81RP\x90V[a\x1A\xA5a%\xEBV[V[`@\x80Q\x80\x82\x01\x90\x91R\x80_[\x81R` \x01_\x81RP\x90V[`@\x80Q``\x80\x82\x01\x83R\x91\x81\x01\x91\x82R\x90\x81\x90a\x1A\xB4V[_`@\x82\x84\x03\x12\x15a\x1A\xE9W__\xFD[P\x91\x90PV[__\x83`\x1F\x84\x01\x12a\x1A\xFFW__\xFD[P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1B\x16W__\xFD[` \x83\x01\x91P\x83` \x82\x85\x01\x01\x11\x15a\x1B-W__\xFD[\x92P\x92\x90PV[______\x86\x88\x03a\x01\xE0\x81\x12\x15a\x1BKW__\xFD[``\x81\x12\x15a\x1BXW__\xFD[\x87\x96P``\x88\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1BtW__\xFD[\x88\x01a\x01\xC0\x81\x8B\x03\x12\x15a\x1B\x86W__\xFD[\x95Pa\x01\0\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x01\x12\x15a\x1B\xB8W__\xFD[P`\x80\x87\x01\x93Pa\x1B\xCD\x88a\x01\x80\x89\x01a\x1A\xD9V[\x92Pa\x01\xC0\x87\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1B\xE9W__\xFD[a\x1B\xF5\x89\x82\x8A\x01a\x1A\xEFV[\x97\x9A\x96\x99P\x94\x97P\x92\x95\x93\x94\x92PPPV[cNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[`\x03\x81\x10a\x1C+Wa\x1C+a\x1C\x07V[\x90RV[\x80Q`\x07\x81\x10a\x1CAWa\x1CAa\x1C\x07V[\x82R` \x90\x81\x01Q\x91\x01RV[\x80Q`@\x80\x84R\x90Q` \x91\x84\x01\x82\x90R\x80Q``\x85\x01\x81\x90R_\x92\x90\x91\x01\x90\x82\x90`\x80\x86\x01\x90[\x80\x83\x10\x15a\x1C\xA0Wa\x1C\x89\x82\x85Qa\x1C/V[`@\x82\x01\x91P` \x84\x01\x93P`\x01\x83\x01\x92Pa\x1CvV[P` \x85\x01Q` \x87\x01R\x80\x93PPPP\x92\x91PPV[\x80Q`@\x80\x84R\x81Q\x90\x84\x01\x81\x90R_\x91` \x01\x90\x82\x90``\x86\x01\x90[\x80\x83\x10\x15a\x1C\xA0W\x83Qa\x1C\xE9\x83\x82Qa\x1C/V[` \x81\x01Q`@\x84\x01Rc\xFF\xFF\xFF\xFF`@\x82\x01Q\x16``\x84\x01Rc\xFF\xFF\xFF\xFF``\x82\x01Q\x16`\x80\x84\x01RP`\xA0\x82\x01\x91P` \x84\x01\x93P`\x01\x83\x01\x92Pa\x1C\xD4V[a\x01 \x81Ra\x1D?a\x01 \x82\x01\x84Qa\x1C\x1BV[_` \x84\x01Qa\x01\xC0a\x01@\x84\x01Ra\x1D\\a\x02\xE0\x84\x01\x82a\x1CNV[`@\x86\x01Q\x80Qa\x01`\x86\x01R` \x01Qa\x01\x80\x85\x01R``\x86\x01Q\x84\x82\x03a\x01\x1F\x19\x01a\x01\xA0\x86\x01R\x90\x91Pa\x1D\x93\x82\x82a\x1CNV[\x91PP`\x80\x85\x01Qa\x01\x1F\x19\x84\x83\x03\x01a\x01\xC0\x85\x01Ra\x1D\xB3\x82\x82a\x1C\xB7V[\x91PP`\xA0\x85\x01Qa\x1D\xD3a\x01\xE0\x85\x01\x82\x80Q\x82R` \x90\x81\x01Q\x91\x01RV[P`\xC0\x85\x01Qa\x02 \x84\x01R`\xE0\x85\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x02@\x85\x01RPa\x01\0\x85\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x02`\x85\x01RPa\x01 \x85\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x02\x80\x85\x01RPa\x01@\x85\x01Qa\x02\xA0\x84\x01Ra\x01`\x85\x01Qa\x02\xC0\x84\x01R\x90Pa\x12\x18` \x83\x01\x84\x80Q\x82R` \x81\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81Q\x16` \x84\x01Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF` \x82\x01Q\x16`@\x84\x01R`@\x81\x01Q``\x84\x01RP`@\x81\x01Q`\x80\x83\x01R``\x81\x01Q`\xA0\x83\x01R`\x80\x81\x01Q`\xC0\x83\x01Rc\xFF\xFF\xFF\xFF`\xA0\x82\x01Q\x16`\xE0\x83\x01RPPV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@\x80Q\x90\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x1E\xDEWa\x1E\xDEa\x1E\xA7V[`@R\x90V[`@Q` \x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x1E\xDEWa\x1E\xDEa\x1E\xA7V[`@Q`\x80\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x1E\xDEWa\x1E\xDEa\x1E\xA7V[`@Qa\x01\x80\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x1E\xDEWa\x1E\xDEa\x1E\xA7V[`@Q`\xC0\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x1E\xDEWa\x1E\xDEa\x1E\xA7V[`@Q``\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x1E\xDEWa\x1E\xDEa\x1E\xA7V[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x1F\xBDWa\x1F\xBDa\x1E\xA7V[`@R\x91\x90PV[\x805`\x03\x81\x10a\x12@W__\xFD[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x1F\xECWa\x1F\xECa\x1E\xA7V[P`\x05\x1B` \x01\x90V[_`@\x82\x84\x03\x12\x15a \x06W__\xFD[a \x0Ea\x1E\xBBV[\x90P\x815`\x07\x81\x10a \x1EW__\xFD[\x80\x82RP` \x82\x015` \x82\x01R\x92\x91PPV[_`@\x82\x84\x03\x12\x15a BW__\xFD[a Ja\x1E\xBBV[\x90P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a bW__\xFD[\x82\x01` \x81\x85\x03\x12\x15a sW__\xFD[a {a\x1E\xE4V[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a \x91W__\xFD[\x80\x83\x01\x92PP\x84`\x1F\x83\x01\x12a \xA5W__\xFD[\x815a \xB8a \xB3\x82a\x1F\xD3V[a\x1F\x94V[\x80\x82\x82R` \x82\x01\x91P` \x83`\x06\x1B\x86\x01\x01\x92P\x87\x83\x11\x15a \xD9W__\xFD[` \x85\x01\x94P[\x82\x85\x10\x15a!\x05Wa \xF2\x88\x86a\x1F\xF6V[\x82R` \x82\x01\x91P`@\x85\x01\x94Pa \xE0V[\x83RPP\x82RP` \x91\x82\x015\x91\x81\x01\x91\x90\x91R\x91\x90PV[_`@\x82\x84\x03\x12\x15a!.W__\xFD[a!6a\x1E\xBBV[\x825\x81R` \x92\x83\x015\x92\x81\x01\x92\x90\x92RP\x91\x90PV[\x805c\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x12@W__\xFD[_`@\x82\x84\x03\x12\x15a!pW__\xFD[a!xa\x1E\xBBV[\x90P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a!\x90W__\xFD[\x82\x01`\x1F\x81\x01\x84\x13a!\xA0W__\xFD[\x805a!\xAEa \xB3\x82a\x1F\xD3V[\x80\x82\x82R` \x82\x01\x91P` `\xA0\x84\x02\x85\x01\x01\x92P\x86\x83\x11\x15a!\xCFW__\xFD[` \x84\x01\x93P[\x82\x84\x10\x15a\"AW`\xA0\x84\x88\x03\x12\x15a!\xEDW__\xFD[a!\xF5a\x1F\x07V[a!\xFF\x88\x86a\x1F\xF6V[\x81R`@\x85\x015` \x82\x01Ra\"\x17``\x86\x01a!MV[`@\x82\x01Ra\"(`\x80\x86\x01a!MV[``\x82\x01R\x82R`\xA0\x93\x90\x93\x01\x92` \x90\x91\x01\x90a!\xD6V[\x84RPPP` \x91\x82\x015\x91\x81\x01\x91\x90\x91R\x91\x90PV[_a\x01\xC0\x826\x03\x12\x15a\"iW__\xFD[a\"qa\x1F*V[a\"z\x83a\x1F\xC5V[\x81R` \x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\"\x95W__\xFD[a\"\xA16\x82\x86\x01a 2V[` \x83\x01RPa\"\xB46`@\x85\x01a!\x1EV[`@\x82\x01R`\x80\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\"\xD2W__\xFD[a\"\xDE6\x82\x86\x01a 2V[``\x83\x01RP`\xA0\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\"\xFDW__\xFD[a#\t6\x82\x86\x01a!`V[`\x80\x83\x01RPa#\x1C6`\xC0\x85\x01a!\x1EV[`\xA0\x82\x01Ra\x01\0\x83\x015`\xC0\x82\x01Ra#9a\x01 \x84\x01a!MV[`\xE0\x82\x01Ra#Ka\x01@\x84\x01a!MV[a\x01\0\x82\x01Ra#^a\x01`\x84\x01a!MV[a\x01 \x82\x01Ra\x01\x80\x83\x015a\x01@\x82\x01Ra\x01\xA0\x90\x92\x015a\x01`\x83\x01RP\x90V[\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x12@W__\xFD[_\x81\x83\x03a\x01\0\x81\x12\x80\x15a#\xABW__\xFD[Pa#\xB4a\x1FNV[\x835\x81R```\x1F\x19\x83\x01\x12\x15a#\xC9W__\xFD[a#\xD1a\x1FqV[\x91Pa#\xDF` \x85\x01a#\x81V[\x82Ra#\xED`@\x85\x01a#\x81V[` \x83\x81\x01\x91\x90\x91R``\x85\x81\x015`@\x80\x86\x01\x91\x90\x91R\x91\x83\x01\x93\x90\x93R`\x80\x80\x86\x015\x91\x83\x01\x91\x90\x91R`\xA0\x85\x015\x92\x82\x01\x92\x90\x92R`\xC0\x84\x015\x91\x81\x01\x82\x90Ra$<`\xE0\x85\x01a!MV[`\xA0\x82\x01R\x94\x93PPPPV[_` \x82\x84\x03\x12\x15a$YW__\xFD[\x815a\xFF\xFF\x81\x16\x81\x14a\x12\x18W__\xFD[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\xFF\xFF\x81\x81\x16\x83\x82\x16\x01\x90\x81\x11\x15a\x0EdWa\x0Eda$jV[a\xFF\xFF\x82\x81\x16\x82\x82\x16\x03\x90\x81\x11\x15a\x0EdWa\x0Eda$jV[cNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[\x81\x81\x03\x81\x81\x11\x15a\x0EdWa\x0Eda$jV[`\xFF\x82\x81\x16\x82\x82\x16\x03\x90\x81\x11\x15a\x0EdWa\x0Eda$jV[c\xFF\xFF\xFF\xFF\x82\x81\x16\x82\x82\x16\x03\x90\x81\x11\x15a\x0EdWa\x0Eda$jV[c\xFF\xFF\xFF\xFF\x81\x81\x16\x83\x82\x16\x01\x90\x81\x11\x15a\x0EdWa\x0Eda$jV[_c\xFF\xFF\xFF\xFF\x82\x16c\xFF\xFF\xFF\xFF\x81\x03a%EWa%Ea$jV[`\x01\x01\x92\x91PPV[_c\xFF\xFF\xFF\xFF\x83\x16\x80a%cWa%ca$\xB2V[\x80c\xFF\xFF\xFF\xFF\x84\x16\x06\x91PP\x92\x91PPV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16\x80a%\x8EWa%\x8Ea$\xB2V[\x80g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x16\x06\x91PP\x92\x91PPV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x81\x16\x82\x82\x16\x03\x90\x81\x11\x15a\x0EdWa\x0Eda$jV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[\x80\x82\x01\x80\x82\x11\x15a\x0EdWa\x0Eda$jV[cNH{q`\xE0\x1B_R`Q`\x04R`$_\xFD\xFE\xA2dipfsX\"\x12 \xD1\x80\xC6A\x1AQm?P\xAE\xBA\xE8B;[\x82\xD0Hx.\x8B\xA7\xB4\xEAQ\xB5I\x11\x94U0}dsolcC\0\x08\x1C\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f5ffd5b5060043610610029575f3560e01c8063a92cb5011461002d575b5f5ffd5b61004061003b366004611b34565b610057565b60405161004e929190611d2b565b60405180910390f35b61005f61197b565b610067611a33565b61007087612258565b915061008136879003870187612398565b90505f6100916020870187612449565b9050611a9d61ffff8216604514806100ad575061ffff82166050145b156100bb57506102f76102d9565b604661ffff8316108015906100e357506100d76009604661247e565b61ffff168261ffff1611155b156100f1575061047e6102d9565b606761ffff831610801590610119575061010d6002606761247e565b61ffff168261ffff1611155b15610127575061055c6102d9565b606a61ffff8316108015906101415750607861ffff831611155b1561014f57506105c16102d9565b605161ffff831610801590610177575061016b6009605161247e565b61ffff168261ffff1611155b1561018557506107bf6102d9565b607961ffff8316108015906101ad57506101a16002607961247e565b61ffff168261ffff1611155b156101bb57506108206102d9565b607c61ffff8316108015906101d55750608a61ffff831611155b156101e357506108706102d9565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5961ffff8316016102175750610a3c6102d9565b61ffff821660ac148061022e575061ffff821660ad145b1561023c5750610a5c6102d9565b60c061ffff831610801590610256575060c461ffff831611155b156102645750610aad6102d9565b60bc61ffff83161080159061027e575060bf61ffff831611155b1561028c5750610cbf6102d9565b60405162461bcd60e51b815260206004820152600e60248201527f494e56414c49445f4f50434f444500000000000000000000000000000000000060448201526064015b60405180910390fd5b6102ea84848989898663ffffffff16565b5050965096945050505050565b5f6103058660200151610e51565b905060456103166020860186612449565b61ffff1603610385575f8151600681111561033357610333611c07565b146103805760405162461bcd60e51b815260206004820152600760248201527f4e4f545f4933320000000000000000000000000000000000000000000000000060448201526064016102d0565b610447565b60506103946020860186612449565b61ffff16036103ff576001815160068111156103b2576103b2611c07565b146103805760405162461bcd60e51b815260206004820152600760248201527f4e4f545f4936340000000000000000000000000000000000000000000000000060448201526064016102d0565b60405162461bcd60e51b815260206004820152600760248201527f4241445f45515a0000000000000000000000000000000000000000000000000060448201526064016102d0565b5f81602001515f0361045b5750600161045e565b505f5b61047561046a82610e6a565b602089015190610e90565b50505050505050565b5f61049461048f8760200151610e51565b610ea0565b90505f6104a761048f8860200151610e51565b90505f60466104b96020880188612449565b6104c39190612498565b90505f8061ffff8316600214806104de575061ffff83166004145b806104ed575061ffff83166006145b806104fc575061ffff83166008145b1561051c5761050a84610f5c565b915061051585610f5c565b905061052a565b505063ffffffff8083169084165b5f610536838386610f87565b905061054f6105448261121f565b60208d015190610e90565b5050505050505050505050565b5f61056d61048f8760200151610e51565b90505f606761057f6020870187612449565b6105899190612498565b90505f61059e8363ffffffff16836020611245565b90506105b76105ac82610e6a565b60208a015190610e90565b5050505050505050565b5f6105d261048f8760200151610e51565b90505f6105e561048f8860200151610e51565b90505f80606a6105f86020890189612449565b6106029190612498565b90508061ffff166003036106995763ffffffff8416158061065357508260030b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000000014801561065357508360030b5f19145b1561067c578860025b9081600281111561066f5761066f611c07565b81525050505050506107b8565b8360030b8360030b81610691576106916124b2565b05915061079c565b8061ffff166005036106d7578363ffffffff165f036106ba5788600261065c565b8360030b8360030b816106cf576106cf6124b2565b07915061079c565b8061ffff16600a036106f65763ffffffff8316601f85161b915061079c565b8061ffff16600c036107155763ffffffff8316601f85161c915061079c565b8061ffff16600b0361073257600383900b601f85161d915061079c565b8061ffff16600d0361074f57610748838561141f565b915061079c565b8061ffff16600e03610765576107488385611460565b5f5f61077e8563ffffffff168763ffffffff16856114a1565b91509150801561079857505060028952506107b892505050565b5091505b6107b36107a883610e6a565b60208b015190610e90565b505050505b5050505050565b5f6107d56107d08760200151610e51565b611628565b90505f6107e86107d08860200151610e51565b90505f60516107fa6020880188612449565b6108049190612498565b90505f610812838584610f87565b90506107b36107a88261121f565b5f6108316107d08760200151610e51565b90505f60796108436020870187612449565b61084d9190612498565b90505f61085c83836040611245565b63ffffffff1690506105b76105ac826116e9565b5f6108816107d08760200151610e51565b90505f6108946107d08860200151610e51565b90505f80607c6108a76020890189612449565b6108b19190612498565b90508061ffff166003036109305767ffffffffffffffff8416158061090657508260070b7fffffffffffffffffffffffffffffffffffffffffffffffff800000000000000014801561090657508360070b5f19145b156109135788600261065c565b8360070b8360070b81610928576109286124b2565b059150610a30565b8061ffff16600503610972578367ffffffffffffffff165f036109555788600261065c565b8360070b8360070b8161096a5761096a6124b2565b079150610a30565b8061ffff16600a036109955767ffffffffffffffff8316603f85161b9150610a30565b8061ffff16600c036109b85767ffffffffffffffff8316603f85161c9150610a30565b8061ffff16600b036109d557600783900b603f85161d9150610a30565b8061ffff16600d036109f2576109eb8385611714565b9150610a30565b8061ffff16600e03610a08576109eb8385611765565b5f610a148486846114a1565b90935090508015610a2e57505060028852506107b8915050565b505b6107b36107a8836116e9565b5f610a4d6107d08760200151610e51565b90508061047561046a82610e6a565b5f610a6d61048f8760200151610e51565b90505f60ac610a7f6020870187612449565b61ffff1603610a9857610a9182610f5c565b9050610aa1565b5063ffffffff81165b61047561046a826116e9565b5f8060c0610abe6020870187612449565b61ffff1603610ad257505f90506008610ba9565b60c1610ae16020870187612449565b61ffff1603610af557505f90506010610ba9565b60c2610b046020870187612449565b61ffff1603610b195750600190506008610ba9565b60c3610b286020870187612449565b61ffff1603610b3d5750600190506010610ba9565b60c4610b4c6020870187612449565b61ffff1603610b615750600190506020610ba9565b60405162461bcd60e51b815260206004820152601860248201527f494e56414c49445f455854454e445f53414d455f54595045000000000000000060448201526064016102d0565b5f80836006811115610bbd57610bbd611c07565b03610bcd575063ffffffff610bd8565b5067ffffffffffffffff5b5f610be68960200151610e51565b9050836006811115610bfa57610bfa611c07565b81516006811115610c0d57610c0d611c07565b14610c5a5760405162461bcd60e51b815260206004820152601960248201527f4241445f455854454e445f53414d455f545950455f545950450000000000000060448201526064016102d0565b5f610c6c600160ff861681901b6124c6565b602083018051821690529050610c836001856124d9565b60ff166001901b8260200151165f14610ca457602082018051821985161790525b60208a0151610cb39083610e90565b50505050505050505050565b5f8060bc610cd06020870187612449565b61ffff1603610ce457505f90506002610d97565b60bd610cf36020870187612449565b61ffff1603610d085750600190506003610d97565b60be610d176020870187612449565b61ffff1603610d2b5750600290505f610d97565b60bf610d3a6020870187612449565b61ffff1603610d4f5750600390506001610d97565b60405162461bcd60e51b815260206004820152601360248201527f494e56414c49445f5245494e544552505245540000000000000000000000000060448201526064016102d0565b5f610da58860200151610e51565b9050816006811115610db957610db9611c07565b81516006811115610dcc57610dcc611c07565b14610e195760405162461bcd60e51b815260206004820152601860248201527f494e56414c49445f5245494e544552505245545f54595045000000000000000060448201526064016102d0565b80836006811115610e2c57610e2c611c07565b90816006811115610e3f57610e3f611c07565b90525060208801516105b79082610e90565b610e59611aa7565b8151610e64906117b6565b92915050565b610e72611aa7565b50604080518082019091525f815263ffffffff909116602082015290565b8151610e9c90826118a1565b5050565b60208101515f908183516006811115610ebb57610ebb611c07565b14610f085760405162461bcd60e51b815260206004820152600760248201527f4e4f545f4933320000000000000000000000000000000000000000000000000060448201526064016102d0565b6401000000008110610e645760405162461bcd60e51b815260206004820152600760248201527f4241445f4933320000000000000000000000000000000000000000000000000060448201526064016102d0565b5f6380000000821615610f7d575063ffffffff1667ffffffff000000001790565b5063ffffffff1690565b5f61ffff8216610faf578267ffffffffffffffff168467ffffffffffffffff16149050611218565b5f1961ffff831601610fda578267ffffffffffffffff168467ffffffffffffffff1614159050611218565b60011961ffff831601610ff7578260070b8460070b129050611218565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd61ffff831601611040578267ffffffffffffffff168467ffffffffffffffff16109050611218565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc61ffff83160161107b578260070b8460070b139050611218565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb61ffff8316016110c4578267ffffffffffffffff168467ffffffffffffffff16119050611218565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa61ffff831601611100578260070b8460070b13159050611218565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff961ffff83160161114a578267ffffffffffffffff168467ffffffffffffffff1611159050611218565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff861ffff831601611186578260070b8460070b12159050611218565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff761ffff8316016111d0578267ffffffffffffffff168467ffffffffffffffff1610159050611218565b60405162461bcd60e51b815260206004820152600a60248201527f424144204952454c4f500000000000000000000000000000000000000000000060448201526064016102d0565b9392505050565b611227611aa7565b811561123757610e646001610e6a565b610e645f610e6a565b919050565b5f8161ffff166020148061125d57508161ffff166040145b6112a95760405162461bcd60e51b815260206004820152601860248201527f57524f4e4720555345204f462067656e65726963556e4f70000000000000000060448201526064016102d0565b61ffff83166113195761ffff82165b5f8163ffffffff161180156112ec57506112d36001826124f2565b63ffffffff166001901b8567ffffffffffffffff16165f145b15611303576112fc6001826124f2565b90506112b8565b6113118161ffff85166124f2565b915050611218565b5f1961ffff841601611371575f5b8261ffff168163ffffffff161080156113535750600163ffffffff82161b851667ffffffffffffffff16155b1561136a5761136360018261250e565b9050611327565b9050611218565b60011961ffff8416016113d7575f805b8361ffff168263ffffffff1610156113ce57600163ffffffff83161b861667ffffffffffffffff16156113bc576113b960018261250e565b90505b816113c68161252a565b925050611381565b91506112189050565b60405162461bcd60e51b815260206004820152600960248201527f4241442049556e4f70000000000000000000000000000000000000000000000060448201526064016102d0565b5f61142b60208361254e565b91506114388260206124f2565b63ffffffff168363ffffffff16901c8263ffffffff168463ffffffff16901b17905092915050565b5f61146c60208361254e565b91506114798260206124f2565b63ffffffff168363ffffffff16901b8263ffffffff168463ffffffff16901c17905092915050565b5f5f8261ffff165f036114b95750508282015f611620565b8261ffff166001036114d05750508183035f611620565b8261ffff166002036114e75750508282025f611620565b8261ffff1660040361153d578367ffffffffffffffff165f0361150f57505f90506001611620565b8367ffffffffffffffff168567ffffffffffffffff1681611532576115326124b2565b045f91509150611620565b8261ffff16600603611593578367ffffffffffffffff165f0361156557505f90506001611620565b8367ffffffffffffffff168567ffffffffffffffff1681611588576115886124b2565b065f91509150611620565b8261ffff166007036115aa5750508282165f611620565b8261ffff166008036115c15750508282175f611620565b8261ffff166009036115d85750508282185f611620565b60405162461bcd60e51b815260206004820152601660248201527f494e56414c49445f47454e455249435f42494e5f4f500000000000000000000060448201526064016102d0565b935093915050565b60208101515f9060018351600681111561164457611644611c07565b146116915760405162461bcd60e51b815260206004820152600760248201527f4e4f545f4936340000000000000000000000000000000000000000000000000060448201526064016102d0565b680100000000000000008110610e645760405162461bcd60e51b815260206004820152600760248201527f4241445f4936340000000000000000000000000000000000000000000000000060448201526064016102d0565b6116f1611aa7565b50604080518082019091526001815267ffffffffffffffff909116602082015290565b5f611720604083612575565b915061172d8260406125a4565b67ffffffffffffffff168367ffffffffffffffff16901c8267ffffffffffffffff168467ffffffffffffffff16901b17905092915050565b5f611771604083612575565b915061177e8260406125a4565b67ffffffffffffffff168367ffffffffffffffff16901b8267ffffffffffffffff168467ffffffffffffffff16901c17905092915050565b6117be611aa7565b815180516117ce906001906124c6565b815181106117de576117de6125c4565b602002602001015190505f6001835f0151516117fa91906124c6565b67ffffffffffffffff81111561181257611812611ea7565b60405190808252806020026020018201604052801561184b57816020015b611838611aa7565b8152602001906001900390816118305790505b5090505f5b815181101561189a57835180518290811061186d5761186d6125c4565b6020026020010151828281518110611887576118876125c4565b6020908102919091010152600101611850565b5090915290565b8151515f906118b19060016125d8565b67ffffffffffffffff8111156118c9576118c9611ea7565b60405190808252806020026020018201604052801561190257816020015b6118ef611aa7565b8152602001906001900390816118e75790505b5090505f5b835151811015611952578351805182908110611925576119256125c4565b602002602001015182828151811061193f5761193f6125c4565b6020908102919091010152600101611907565b508181845f0151518151811061196a5761196a6125c4565b602090810291909101015290915250565b604080516101808101909152805f8152602001611996611ac0565b81526020016119b660405180604001604052805f81526020015f81525090565b81526020016119c3611ac0565b81526020016119e46040518060400160405280606081526020015f81525090565b8152602001611a0460405180604001604052805f81526020015f81525090565b81525f6020820181905260408201819052606082018190526080820181905260a0820181905260c09091015290565b6040518060c001604052805f8152602001611a7960405180606001604052805f67ffffffffffffffff1681526020015f67ffffffffffffffff1681526020015f81525090565b81526020015f81526020015f81526020015f81526020015f63ffffffff1681525090565b611aa56125eb565b565b60408051808201909152805f5b81526020015f81525090565b6040805160608082018352918101918252908190611ab4565b5f60408284031215611ae9575f5ffd5b50919050565b5f5f83601f840112611aff575f5ffd5b50813567ffffffffffffffff811115611b16575f5ffd5b602083019150836020828501011115611b2d575f5ffd5b9250929050565b5f5f5f5f5f5f8688036101e0811215611b4b575f5ffd5b6060811215611b58575f5ffd5b879650606088013567ffffffffffffffff811115611b74575f5ffd5b88016101c0818b031215611b86575f5ffd5b95506101007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8082011215611bb8575f5ffd5b50608087019350611bcd886101808901611ad9565b92506101c087013567ffffffffffffffff811115611be9575f5ffd5b611bf589828a01611aef565b979a9699509497509295939492505050565b634e487b7160e01b5f52602160045260245ffd5b60038110611c2b57611c2b611c07565b9052565b805160078110611c4157611c41611c07565b8252602090810151910152565b80516040808452905160209184018290528051606085018190525f9290910190829060808601905b80831015611ca057611c89828551611c2f565b604082019150602084019350600183019250611c76565b506020850151602087015280935050505092915050565b8051604080845281519084018190525f9160200190829060608601905b80831015611ca0578351611ce9838251611c2f565b6020810151604084015263ffffffff604082015116606084015263ffffffff60608201511660808401525060a082019150602084019350600183019250611cd4565b6101208152611d3f61012082018451611c1b565b5f60208401516101c0610140840152611d5c6102e0840182611c4e565b6040860151805161016086015260200151610180850152606086015184820361011f19016101a0860152909150611d938282611c4e565b915050608085015161011f19848303016101c0850152611db38282611cb7565b91505060a0850151611dd36101e085018280518252602090810151910152565b5060c085015161022084015260e085015163ffffffff81166102408501525061010085015163ffffffff81166102608501525061012085015163ffffffff8116610280850152506101408501516102a08401526101608501516102c08401529050611218602083018480518252602081015167ffffffffffffffff815116602084015267ffffffffffffffff6020820151166040840152604081015160608401525060408101516080830152606081015160a0830152608081015160c083015263ffffffff60a08201511660e08301525050565b634e487b7160e01b5f52604160045260245ffd5b6040805190810167ffffffffffffffff81118282101715611ede57611ede611ea7565b60405290565b6040516020810167ffffffffffffffff81118282101715611ede57611ede611ea7565b6040516080810167ffffffffffffffff81118282101715611ede57611ede611ea7565b604051610180810167ffffffffffffffff81118282101715611ede57611ede611ea7565b60405160c0810167ffffffffffffffff81118282101715611ede57611ede611ea7565b6040516060810167ffffffffffffffff81118282101715611ede57611ede611ea7565b604051601f8201601f1916810167ffffffffffffffff81118282101715611fbd57611fbd611ea7565b604052919050565b803560038110611240575f5ffd5b5f67ffffffffffffffff821115611fec57611fec611ea7565b5060051b60200190565b5f60408284031215612006575f5ffd5b61200e611ebb565b905081356007811061201e575f5ffd5b808252506020820135602082015292915050565b5f60408284031215612042575f5ffd5b61204a611ebb565b9050813567ffffffffffffffff811115612062575f5ffd5b820160208185031215612073575f5ffd5b61207b611ee4565b813567ffffffffffffffff811115612091575f5ffd5b80830192505084601f8301126120a5575f5ffd5b81356120b86120b382611fd3565b611f94565b8082825260208201915060208360061b8601019250878311156120d9575f5ffd5b6020850194505b82851015612105576120f28886611ff6565b82526020820191506040850194506120e0565b8352505082525060209182013591810191909152919050565b5f6040828403121561212e575f5ffd5b612136611ebb565b823581526020928301359281019290925250919050565b803563ffffffff81168114611240575f5ffd5b5f60408284031215612170575f5ffd5b612178611ebb565b9050813567ffffffffffffffff811115612190575f5ffd5b8201601f810184136121a0575f5ffd5b80356121ae6120b382611fd3565b80828252602082019150602060a084028501019250868311156121cf575f5ffd5b6020840193505b828410156122415760a084880312156121ed575f5ffd5b6121f5611f07565b6121ff8886611ff6565b8152604085013560208201526122176060860161214d565b60408201526122286080860161214d565b6060820152825260a093909301926020909101906121d6565b845250505060209182013591810191909152919050565b5f6101c08236031215612269575f5ffd5b612271611f2a565b61227a83611fc5565b8152602083013567ffffffffffffffff811115612295575f5ffd5b6122a136828601612032565b6020830152506122b4366040850161211e565b6040820152608083013567ffffffffffffffff8111156122d2575f5ffd5b6122de36828601612032565b60608301525060a083013567ffffffffffffffff8111156122fd575f5ffd5b61230936828601612160565b60808301525061231c3660c0850161211e565b60a082015261010083013560c0820152612339610120840161214d565b60e082015261234b610140840161214d565b61010082015261235e610160840161214d565b6101208201526101808301356101408201526101a0909201356101608301525090565b803567ffffffffffffffff81168114611240575f5ffd5b5f818303610100811280156123ab575f5ffd5b506123b4611f4e565b833581526060601f19830112156123c9575f5ffd5b6123d1611f71565b91506123df60208501612381565b82526123ed60408501612381565b602083810191909152606085810135604080860191909152918301939093526080808601359183019190915260a08501359282019290925260c084013591810182905261243c60e0850161214d565b60a0820152949350505050565b5f60208284031215612459575f5ffd5b813561ffff81168114611218575f5ffd5b634e487b7160e01b5f52601160045260245ffd5b61ffff8181168382160190811115610e6457610e6461246a565b61ffff8281168282160390811115610e6457610e6461246a565b634e487b7160e01b5f52601260045260245ffd5b81810381811115610e6457610e6461246a565b60ff8281168282160390811115610e6457610e6461246a565b63ffffffff8281168282160390811115610e6457610e6461246a565b63ffffffff8181168382160190811115610e6457610e6461246a565b5f63ffffffff821663ffffffff81036125455761254561246a565b60010192915050565b5f63ffffffff831680612563576125636124b2565b8063ffffffff84160691505092915050565b5f67ffffffffffffffff83168061258e5761258e6124b2565b8067ffffffffffffffff84160691505092915050565b67ffffffffffffffff8281168282160390811115610e6457610e6461246a565b634e487b7160e01b5f52603260045260245ffd5b80820180821115610e6457610e6461246a565b634e487b7160e01b5f52605160045260245ffdfea2646970667358221220d180c6411a516d3f50aebae8423b5b82d048782e8ba7b4ea51b549119455307d64736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0)W_5`\xE0\x1C\x80c\xA9,\xB5\x01\x14a\0-W[__\xFD[a\0@a\0;6`\x04a\x1B4V[a\0WV[`@Qa\0N\x92\x91\x90a\x1D+V[`@Q\x80\x91\x03\x90\xF3[a\0_a\x19{V[a\0ga\x1A3V[a\0p\x87a\"XV[\x91Pa\0\x816\x87\x90\x03\x87\x01\x87a#\x98V[\x90P_a\0\x91` \x87\x01\x87a$IV[\x90Pa\x1A\x9Da\xFF\xFF\x82\x16`E\x14\x80a\0\xADWPa\xFF\xFF\x82\x16`P\x14[\x15a\0\xBBWPa\x02\xF7a\x02\xD9V[`Fa\xFF\xFF\x83\x16\x10\x80\x15\x90a\0\xE3WPa\0\xD7`\t`Fa$~V[a\xFF\xFF\x16\x82a\xFF\xFF\x16\x11\x15[\x15a\0\xF1WPa\x04~a\x02\xD9V[`ga\xFF\xFF\x83\x16\x10\x80\x15\x90a\x01\x19WPa\x01\r`\x02`ga$~V[a\xFF\xFF\x16\x82a\xFF\xFF\x16\x11\x15[\x15a\x01'WPa\x05\\a\x02\xD9V[`ja\xFF\xFF\x83\x16\x10\x80\x15\x90a\x01AWP`xa\xFF\xFF\x83\x16\x11\x15[\x15a\x01OWPa\x05\xC1a\x02\xD9V[`Qa\xFF\xFF\x83\x16\x10\x80\x15\x90a\x01wWPa\x01k`\t`Qa$~V[a\xFF\xFF\x16\x82a\xFF\xFF\x16\x11\x15[\x15a\x01\x85WPa\x07\xBFa\x02\xD9V[`ya\xFF\xFF\x83\x16\x10\x80\x15\x90a\x01\xADWPa\x01\xA1`\x02`ya$~V[a\xFF\xFF\x16\x82a\xFF\xFF\x16\x11\x15[\x15a\x01\xBBWPa\x08 a\x02\xD9V[`|a\xFF\xFF\x83\x16\x10\x80\x15\x90a\x01\xD5WP`\x8Aa\xFF\xFF\x83\x16\x11\x15[\x15a\x01\xE3WPa\x08pa\x02\xD9V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFYa\xFF\xFF\x83\x16\x01a\x02\x17WPa\n<a\x02\xD9V[a\xFF\xFF\x82\x16`\xAC\x14\x80a\x02.WPa\xFF\xFF\x82\x16`\xAD\x14[\x15a\x02<WPa\n\\a\x02\xD9V[`\xC0a\xFF\xFF\x83\x16\x10\x80\x15\x90a\x02VWP`\xC4a\xFF\xFF\x83\x16\x11\x15[\x15a\x02dWPa\n\xADa\x02\xD9V[`\xBCa\xFF\xFF\x83\x16\x10\x80\x15\x90a\x02~WP`\xBFa\xFF\xFF\x83\x16\x11\x15[\x15a\x02\x8CWPa\x0C\xBFa\x02\xD9V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0E`$\x82\x01R\x7FINVALID_OPCODE\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01[`@Q\x80\x91\x03\x90\xFD[a\x02\xEA\x84\x84\x89\x89\x89\x86c\xFF\xFF\xFF\xFF\x16V[PP\x96P\x96\x94PPPPPV[_a\x03\x05\x86` \x01Qa\x0EQV[\x90P`Ea\x03\x16` \x86\x01\x86a$IV[a\xFF\xFF\x16\x03a\x03\x85W_\x81Q`\x06\x81\x11\x15a\x033Wa\x033a\x1C\x07V[\x14a\x03\x80W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FNOT_I32\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xD0V[a\x04GV[`Pa\x03\x94` \x86\x01\x86a$IV[a\xFF\xFF\x16\x03a\x03\xFFW`\x01\x81Q`\x06\x81\x11\x15a\x03\xB2Wa\x03\xB2a\x1C\x07V[\x14a\x03\x80W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FNOT_I64\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xD0V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FBAD_EQZ\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xD0V[_\x81` \x01Q_\x03a\x04[WP`\x01a\x04^V[P_[a\x04ua\x04j\x82a\x0EjV[` \x89\x01Q\x90a\x0E\x90V[PPPPPPPV[_a\x04\x94a\x04\x8F\x87` \x01Qa\x0EQV[a\x0E\xA0V[\x90P_a\x04\xA7a\x04\x8F\x88` \x01Qa\x0EQV[\x90P_`Fa\x04\xB9` \x88\x01\x88a$IV[a\x04\xC3\x91\x90a$\x98V[\x90P_\x80a\xFF\xFF\x83\x16`\x02\x14\x80a\x04\xDEWPa\xFF\xFF\x83\x16`\x04\x14[\x80a\x04\xEDWPa\xFF\xFF\x83\x16`\x06\x14[\x80a\x04\xFCWPa\xFF\xFF\x83\x16`\x08\x14[\x15a\x05\x1CWa\x05\n\x84a\x0F\\V[\x91Pa\x05\x15\x85a\x0F\\V[\x90Pa\x05*V[PPc\xFF\xFF\xFF\xFF\x80\x83\x16\x90\x84\x16[_a\x056\x83\x83\x86a\x0F\x87V[\x90Pa\x05Oa\x05D\x82a\x12\x1FV[` \x8D\x01Q\x90a\x0E\x90V[PPPPPPPPPPPV[_a\x05ma\x04\x8F\x87` \x01Qa\x0EQV[\x90P_`ga\x05\x7F` \x87\x01\x87a$IV[a\x05\x89\x91\x90a$\x98V[\x90P_a\x05\x9E\x83c\xFF\xFF\xFF\xFF\x16\x83` a\x12EV[\x90Pa\x05\xB7a\x05\xAC\x82a\x0EjV[` \x8A\x01Q\x90a\x0E\x90V[PPPPPPPPV[_a\x05\xD2a\x04\x8F\x87` \x01Qa\x0EQV[\x90P_a\x05\xE5a\x04\x8F\x88` \x01Qa\x0EQV[\x90P_\x80`ja\x05\xF8` \x89\x01\x89a$IV[a\x06\x02\x91\x90a$\x98V[\x90P\x80a\xFF\xFF\x16`\x03\x03a\x06\x99Wc\xFF\xFF\xFF\xFF\x84\x16\x15\x80a\x06SWP\x82`\x03\x0B\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\0\0\0\x14\x80\x15a\x06SWP\x83`\x03\x0B_\x19\x14[\x15a\x06|W\x88`\x02[\x90\x81`\x02\x81\x11\x15a\x06oWa\x06oa\x1C\x07V[\x81RPPPPPPa\x07\xB8V[\x83`\x03\x0B\x83`\x03\x0B\x81a\x06\x91Wa\x06\x91a$\xB2V[\x05\x91Pa\x07\x9CV[\x80a\xFF\xFF\x16`\x05\x03a\x06\xD7W\x83c\xFF\xFF\xFF\xFF\x16_\x03a\x06\xBAW\x88`\x02a\x06\\V[\x83`\x03\x0B\x83`\x03\x0B\x81a\x06\xCFWa\x06\xCFa$\xB2V[\x07\x91Pa\x07\x9CV[\x80a\xFF\xFF\x16`\n\x03a\x06\xF6Wc\xFF\xFF\xFF\xFF\x83\x16`\x1F\x85\x16\x1B\x91Pa\x07\x9CV[\x80a\xFF\xFF\x16`\x0C\x03a\x07\x15Wc\xFF\xFF\xFF\xFF\x83\x16`\x1F\x85\x16\x1C\x91Pa\x07\x9CV[\x80a\xFF\xFF\x16`\x0B\x03a\x072W`\x03\x83\x90\x0B`\x1F\x85\x16\x1D\x91Pa\x07\x9CV[\x80a\xFF\xFF\x16`\r\x03a\x07OWa\x07H\x83\x85a\x14\x1FV[\x91Pa\x07\x9CV[\x80a\xFF\xFF\x16`\x0E\x03a\x07eWa\x07H\x83\x85a\x14`V[__a\x07~\x85c\xFF\xFF\xFF\xFF\x16\x87c\xFF\xFF\xFF\xFF\x16\x85a\x14\xA1V[\x91P\x91P\x80\x15a\x07\x98WPP`\x02\x89RPa\x07\xB8\x92PPPV[P\x91P[a\x07\xB3a\x07\xA8\x83a\x0EjV[` \x8B\x01Q\x90a\x0E\x90V[PPPP[PPPPPV[_a\x07\xD5a\x07\xD0\x87` \x01Qa\x0EQV[a\x16(V[\x90P_a\x07\xE8a\x07\xD0\x88` \x01Qa\x0EQV[\x90P_`Qa\x07\xFA` \x88\x01\x88a$IV[a\x08\x04\x91\x90a$\x98V[\x90P_a\x08\x12\x83\x85\x84a\x0F\x87V[\x90Pa\x07\xB3a\x07\xA8\x82a\x12\x1FV[_a\x081a\x07\xD0\x87` \x01Qa\x0EQV[\x90P_`ya\x08C` \x87\x01\x87a$IV[a\x08M\x91\x90a$\x98V[\x90P_a\x08\\\x83\x83`@a\x12EV[c\xFF\xFF\xFF\xFF\x16\x90Pa\x05\xB7a\x05\xAC\x82a\x16\xE9V[_a\x08\x81a\x07\xD0\x87` \x01Qa\x0EQV[\x90P_a\x08\x94a\x07\xD0\x88` \x01Qa\x0EQV[\x90P_\x80`|a\x08\xA7` \x89\x01\x89a$IV[a\x08\xB1\x91\x90a$\x98V[\x90P\x80a\xFF\xFF\x16`\x03\x03a\t0Wg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x16\x15\x80a\t\x06WP\x82`\x07\x0B\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\0\0\0\0\0\0\0\x14\x80\x15a\t\x06WP\x83`\x07\x0B_\x19\x14[\x15a\t\x13W\x88`\x02a\x06\\V[\x83`\x07\x0B\x83`\x07\x0B\x81a\t(Wa\t(a$\xB2V[\x05\x91Pa\n0V[\x80a\xFF\xFF\x16`\x05\x03a\trW\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_\x03a\tUW\x88`\x02a\x06\\V[\x83`\x07\x0B\x83`\x07\x0B\x81a\tjWa\tja$\xB2V[\x07\x91Pa\n0V[\x80a\xFF\xFF\x16`\n\x03a\t\x95Wg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16`?\x85\x16\x1B\x91Pa\n0V[\x80a\xFF\xFF\x16`\x0C\x03a\t\xB8Wg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16`?\x85\x16\x1C\x91Pa\n0V[\x80a\xFF\xFF\x16`\x0B\x03a\t\xD5W`\x07\x83\x90\x0B`?\x85\x16\x1D\x91Pa\n0V[\x80a\xFF\xFF\x16`\r\x03a\t\xF2Wa\t\xEB\x83\x85a\x17\x14V[\x91Pa\n0V[\x80a\xFF\xFF\x16`\x0E\x03a\n\x08Wa\t\xEB\x83\x85a\x17eV[_a\n\x14\x84\x86\x84a\x14\xA1V[\x90\x93P\x90P\x80\x15a\n.WPP`\x02\x88RPa\x07\xB8\x91PPV[P[a\x07\xB3a\x07\xA8\x83a\x16\xE9V[_a\nMa\x07\xD0\x87` \x01Qa\x0EQV[\x90P\x80a\x04ua\x04j\x82a\x0EjV[_a\nma\x04\x8F\x87` \x01Qa\x0EQV[\x90P_`\xACa\n\x7F` \x87\x01\x87a$IV[a\xFF\xFF\x16\x03a\n\x98Wa\n\x91\x82a\x0F\\V[\x90Pa\n\xA1V[Pc\xFF\xFF\xFF\xFF\x81\x16[a\x04ua\x04j\x82a\x16\xE9V[_\x80`\xC0a\n\xBE` \x87\x01\x87a$IV[a\xFF\xFF\x16\x03a\n\xD2WP_\x90P`\x08a\x0B\xA9V[`\xC1a\n\xE1` \x87\x01\x87a$IV[a\xFF\xFF\x16\x03a\n\xF5WP_\x90P`\x10a\x0B\xA9V[`\xC2a\x0B\x04` \x87\x01\x87a$IV[a\xFF\xFF\x16\x03a\x0B\x19WP`\x01\x90P`\x08a\x0B\xA9V[`\xC3a\x0B(` \x87\x01\x87a$IV[a\xFF\xFF\x16\x03a\x0B=WP`\x01\x90P`\x10a\x0B\xA9V[`\xC4a\x0BL` \x87\x01\x87a$IV[a\xFF\xFF\x16\x03a\x0BaWP`\x01\x90P` a\x0B\xA9V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x18`$\x82\x01R\x7FINVALID_EXTEND_SAME_TYPE\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xD0V[_\x80\x83`\x06\x81\x11\x15a\x0B\xBDWa\x0B\xBDa\x1C\x07V[\x03a\x0B\xCDWPc\xFF\xFF\xFF\xFFa\x0B\xD8V[Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF[_a\x0B\xE6\x89` \x01Qa\x0EQV[\x90P\x83`\x06\x81\x11\x15a\x0B\xFAWa\x0B\xFAa\x1C\x07V[\x81Q`\x06\x81\x11\x15a\x0C\rWa\x0C\ra\x1C\x07V[\x14a\x0CZW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x19`$\x82\x01R\x7FBAD_EXTEND_SAME_TYPE_TYPE\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xD0V[_a\x0Cl`\x01`\xFF\x86\x16\x81\x90\x1Ba$\xC6V[` \x83\x01\x80Q\x82\x16\x90R\x90Pa\x0C\x83`\x01\x85a$\xD9V[`\xFF\x16`\x01\x90\x1B\x82` \x01Q\x16_\x14a\x0C\xA4W` \x82\x01\x80Q\x82\x19\x85\x16\x17\x90R[` \x8A\x01Qa\x0C\xB3\x90\x83a\x0E\x90V[PPPPPPPPPPV[_\x80`\xBCa\x0C\xD0` \x87\x01\x87a$IV[a\xFF\xFF\x16\x03a\x0C\xE4WP_\x90P`\x02a\r\x97V[`\xBDa\x0C\xF3` \x87\x01\x87a$IV[a\xFF\xFF\x16\x03a\r\x08WP`\x01\x90P`\x03a\r\x97V[`\xBEa\r\x17` \x87\x01\x87a$IV[a\xFF\xFF\x16\x03a\r+WP`\x02\x90P_a\r\x97V[`\xBFa\r:` \x87\x01\x87a$IV[a\xFF\xFF\x16\x03a\rOWP`\x03\x90P`\x01a\r\x97V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x13`$\x82\x01R\x7FINVALID_REINTERPRET\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xD0V[_a\r\xA5\x88` \x01Qa\x0EQV[\x90P\x81`\x06\x81\x11\x15a\r\xB9Wa\r\xB9a\x1C\x07V[\x81Q`\x06\x81\x11\x15a\r\xCCWa\r\xCCa\x1C\x07V[\x14a\x0E\x19W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x18`$\x82\x01R\x7FINVALID_REINTERPRET_TYPE\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xD0V[\x80\x83`\x06\x81\x11\x15a\x0E,Wa\x0E,a\x1C\x07V[\x90\x81`\x06\x81\x11\x15a\x0E?Wa\x0E?a\x1C\x07V[\x90RP` \x88\x01Qa\x05\xB7\x90\x82a\x0E\x90V[a\x0EYa\x1A\xA7V[\x81Qa\x0Ed\x90a\x17\xB6V[\x92\x91PPV[a\x0Era\x1A\xA7V[P`@\x80Q\x80\x82\x01\x90\x91R_\x81Rc\xFF\xFF\xFF\xFF\x90\x91\x16` \x82\x01R\x90V[\x81Qa\x0E\x9C\x90\x82a\x18\xA1V[PPV[` \x81\x01Q_\x90\x81\x83Q`\x06\x81\x11\x15a\x0E\xBBWa\x0E\xBBa\x1C\x07V[\x14a\x0F\x08W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FNOT_I32\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xD0V[d\x01\0\0\0\0\x81\x10a\x0EdW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FBAD_I32\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xD0V[_c\x80\0\0\0\x82\x16\x15a\x0F}WPc\xFF\xFF\xFF\xFF\x16g\xFF\xFF\xFF\xFF\0\0\0\0\x17\x90V[Pc\xFF\xFF\xFF\xFF\x16\x90V[_a\xFF\xFF\x82\x16a\x0F\xAFW\x82g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14\x90Pa\x12\x18V[_\x19a\xFF\xFF\x83\x16\x01a\x0F\xDAW\x82g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14\x15\x90Pa\x12\x18V[`\x01\x19a\xFF\xFF\x83\x16\x01a\x0F\xF7W\x82`\x07\x0B\x84`\x07\x0B\x12\x90Pa\x12\x18V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFDa\xFF\xFF\x83\x16\x01a\x10@W\x82g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x10\x90Pa\x12\x18V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFCa\xFF\xFF\x83\x16\x01a\x10{W\x82`\x07\x0B\x84`\x07\x0B\x13\x90Pa\x12\x18V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFBa\xFF\xFF\x83\x16\x01a\x10\xC4W\x82g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x11\x90Pa\x12\x18V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFAa\xFF\xFF\x83\x16\x01a\x11\0W\x82`\x07\x0B\x84`\x07\x0B\x13\x15\x90Pa\x12\x18V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xF9a\xFF\xFF\x83\x16\x01a\x11JW\x82g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x11\x15\x90Pa\x12\x18V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xF8a\xFF\xFF\x83\x16\x01a\x11\x86W\x82`\x07\x0B\x84`\x07\x0B\x12\x15\x90Pa\x12\x18V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xF7a\xFF\xFF\x83\x16\x01a\x11\xD0W\x82g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x10\x15\x90Pa\x12\x18V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\n`$\x82\x01R\x7FBAD IRELOP\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xD0V[\x93\x92PPPV[a\x12'a\x1A\xA7V[\x81\x15a\x127Wa\x0Ed`\x01a\x0EjV[a\x0Ed_a\x0EjV[\x91\x90PV[_\x81a\xFF\xFF\x16` \x14\x80a\x12]WP\x81a\xFF\xFF\x16`@\x14[a\x12\xA9W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x18`$\x82\x01R\x7FWRONG USE OF genericUnOp\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xD0V[a\xFF\xFF\x83\x16a\x13\x19Wa\xFF\xFF\x82\x16[_\x81c\xFF\xFF\xFF\xFF\x16\x11\x80\x15a\x12\xECWPa\x12\xD3`\x01\x82a$\xF2V[c\xFF\xFF\xFF\xFF\x16`\x01\x90\x1B\x85g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x16_\x14[\x15a\x13\x03Wa\x12\xFC`\x01\x82a$\xF2V[\x90Pa\x12\xB8V[a\x13\x11\x81a\xFF\xFF\x85\x16a$\xF2V[\x91PPa\x12\x18V[_\x19a\xFF\xFF\x84\x16\x01a\x13qW_[\x82a\xFF\xFF\x16\x81c\xFF\xFF\xFF\xFF\x16\x10\x80\x15a\x13SWP`\x01c\xFF\xFF\xFF\xFF\x82\x16\x1B\x85\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x15[\x15a\x13jWa\x13c`\x01\x82a%\x0EV[\x90Pa\x13'V[\x90Pa\x12\x18V[`\x01\x19a\xFF\xFF\x84\x16\x01a\x13\xD7W_\x80[\x83a\xFF\xFF\x16\x82c\xFF\xFF\xFF\xFF\x16\x10\x15a\x13\xCEW`\x01c\xFF\xFF\xFF\xFF\x83\x16\x1B\x86\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x15a\x13\xBCWa\x13\xB9`\x01\x82a%\x0EV[\x90P[\x81a\x13\xC6\x81a%*V[\x92PPa\x13\x81V[\x91Pa\x12\x18\x90PV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\t`$\x82\x01R\x7FBAD IUnOp\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xD0V[_a\x14+` \x83a%NV[\x91Pa\x148\x82` a$\xF2V[c\xFF\xFF\xFF\xFF\x16\x83c\xFF\xFF\xFF\xFF\x16\x90\x1C\x82c\xFF\xFF\xFF\xFF\x16\x84c\xFF\xFF\xFF\xFF\x16\x90\x1B\x17\x90P\x92\x91PPV[_a\x14l` \x83a%NV[\x91Pa\x14y\x82` a$\xF2V[c\xFF\xFF\xFF\xFF\x16\x83c\xFF\xFF\xFF\xFF\x16\x90\x1B\x82c\xFF\xFF\xFF\xFF\x16\x84c\xFF\xFF\xFF\xFF\x16\x90\x1C\x17\x90P\x92\x91PPV[__\x82a\xFF\xFF\x16_\x03a\x14\xB9WPP\x82\x82\x01_a\x16 V[\x82a\xFF\xFF\x16`\x01\x03a\x14\xD0WPP\x81\x83\x03_a\x16 V[\x82a\xFF\xFF\x16`\x02\x03a\x14\xE7WPP\x82\x82\x02_a\x16 V[\x82a\xFF\xFF\x16`\x04\x03a\x15=W\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_\x03a\x15\x0FWP_\x90P`\x01a\x16 V[\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x85g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81a\x152Wa\x152a$\xB2V[\x04_\x91P\x91Pa\x16 V[\x82a\xFF\xFF\x16`\x06\x03a\x15\x93W\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_\x03a\x15eWP_\x90P`\x01a\x16 V[\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x85g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81a\x15\x88Wa\x15\x88a$\xB2V[\x06_\x91P\x91Pa\x16 V[\x82a\xFF\xFF\x16`\x07\x03a\x15\xAAWPP\x82\x82\x16_a\x16 V[\x82a\xFF\xFF\x16`\x08\x03a\x15\xC1WPP\x82\x82\x17_a\x16 V[\x82a\xFF\xFF\x16`\t\x03a\x15\xD8WPP\x82\x82\x18_a\x16 V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x16`$\x82\x01R\x7FINVALID_GENERIC_BIN_OP\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xD0V[\x93P\x93\x91PPV[` \x81\x01Q_\x90`\x01\x83Q`\x06\x81\x11\x15a\x16DWa\x16Da\x1C\x07V[\x14a\x16\x91W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FNOT_I64\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xD0V[h\x01\0\0\0\0\0\0\0\0\x81\x10a\x0EdW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FBAD_I64\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xD0V[a\x16\xF1a\x1A\xA7V[P`@\x80Q\x80\x82\x01\x90\x91R`\x01\x81Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16` \x82\x01R\x90V[_a\x17 `@\x83a%uV[\x91Pa\x17-\x82`@a%\xA4V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x1C\x82g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x1B\x17\x90P\x92\x91PPV[_a\x17q`@\x83a%uV[\x91Pa\x17~\x82`@a%\xA4V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x1B\x82g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x1C\x17\x90P\x92\x91PPV[a\x17\xBEa\x1A\xA7V[\x81Q\x80Qa\x17\xCE\x90`\x01\x90a$\xC6V[\x81Q\x81\x10a\x17\xDEWa\x17\xDEa%\xC4V[` \x02` \x01\x01Q\x90P_`\x01\x83_\x01QQa\x17\xFA\x91\x90a$\xC6V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x18\x12Wa\x18\x12a\x1E\xA7V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x18KW\x81` \x01[a\x188a\x1A\xA7V[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x180W\x90P[P\x90P_[\x81Q\x81\x10\x15a\x18\x9AW\x83Q\x80Q\x82\x90\x81\x10a\x18mWa\x18ma%\xC4V[` \x02` \x01\x01Q\x82\x82\x81Q\x81\x10a\x18\x87Wa\x18\x87a%\xC4V[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a\x18PV[P\x90\x91R\x90V[\x81QQ_\x90a\x18\xB1\x90`\x01a%\xD8V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x18\xC9Wa\x18\xC9a\x1E\xA7V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x19\x02W\x81` \x01[a\x18\xEFa\x1A\xA7V[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x18\xE7W\x90P[P\x90P_[\x83QQ\x81\x10\x15a\x19RW\x83Q\x80Q\x82\x90\x81\x10a\x19%Wa\x19%a%\xC4V[` \x02` \x01\x01Q\x82\x82\x81Q\x81\x10a\x19?Wa\x19?a%\xC4V[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a\x19\x07V[P\x81\x81\x84_\x01QQ\x81Q\x81\x10a\x19jWa\x19ja%\xC4V[` \x90\x81\x02\x91\x90\x91\x01\x01R\x90\x91RPV[`@\x80Qa\x01\x80\x81\x01\x90\x91R\x80_\x81R` \x01a\x19\x96a\x1A\xC0V[\x81R` \x01a\x19\xB6`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a\x19\xC3a\x1A\xC0V[\x81R` \x01a\x19\xE4`@Q\x80`@\x01`@R\x80``\x81R` \x01_\x81RP\x90V[\x81R` \x01a\x1A\x04`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R_` \x82\x01\x81\x90R`@\x82\x01\x81\x90R``\x82\x01\x81\x90R`\x80\x82\x01\x81\x90R`\xA0\x82\x01\x81\x90R`\xC0\x90\x91\x01R\x90V[`@Q\x80`\xC0\x01`@R\x80_\x81R` \x01a\x1Ay`@Q\x80``\x01`@R\x80_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_\x81RP\x90V[\x81R` \x01_\x81R` \x01_\x81R` \x01_\x81R` \x01_c\xFF\xFF\xFF\xFF\x16\x81RP\x90V[a\x1A\xA5a%\xEBV[V[`@\x80Q\x80\x82\x01\x90\x91R\x80_[\x81R` \x01_\x81RP\x90V[`@\x80Q``\x80\x82\x01\x83R\x91\x81\x01\x91\x82R\x90\x81\x90a\x1A\xB4V[_`@\x82\x84\x03\x12\x15a\x1A\xE9W__\xFD[P\x91\x90PV[__\x83`\x1F\x84\x01\x12a\x1A\xFFW__\xFD[P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1B\x16W__\xFD[` \x83\x01\x91P\x83` \x82\x85\x01\x01\x11\x15a\x1B-W__\xFD[\x92P\x92\x90PV[______\x86\x88\x03a\x01\xE0\x81\x12\x15a\x1BKW__\xFD[``\x81\x12\x15a\x1BXW__\xFD[\x87\x96P``\x88\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1BtW__\xFD[\x88\x01a\x01\xC0\x81\x8B\x03\x12\x15a\x1B\x86W__\xFD[\x95Pa\x01\0\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x01\x12\x15a\x1B\xB8W__\xFD[P`\x80\x87\x01\x93Pa\x1B\xCD\x88a\x01\x80\x89\x01a\x1A\xD9V[\x92Pa\x01\xC0\x87\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1B\xE9W__\xFD[a\x1B\xF5\x89\x82\x8A\x01a\x1A\xEFV[\x97\x9A\x96\x99P\x94\x97P\x92\x95\x93\x94\x92PPPV[cNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[`\x03\x81\x10a\x1C+Wa\x1C+a\x1C\x07V[\x90RV[\x80Q`\x07\x81\x10a\x1CAWa\x1CAa\x1C\x07V[\x82R` \x90\x81\x01Q\x91\x01RV[\x80Q`@\x80\x84R\x90Q` \x91\x84\x01\x82\x90R\x80Q``\x85\x01\x81\x90R_\x92\x90\x91\x01\x90\x82\x90`\x80\x86\x01\x90[\x80\x83\x10\x15a\x1C\xA0Wa\x1C\x89\x82\x85Qa\x1C/V[`@\x82\x01\x91P` \x84\x01\x93P`\x01\x83\x01\x92Pa\x1CvV[P` \x85\x01Q` \x87\x01R\x80\x93PPPP\x92\x91PPV[\x80Q`@\x80\x84R\x81Q\x90\x84\x01\x81\x90R_\x91` \x01\x90\x82\x90``\x86\x01\x90[\x80\x83\x10\x15a\x1C\xA0W\x83Qa\x1C\xE9\x83\x82Qa\x1C/V[` \x81\x01Q`@\x84\x01Rc\xFF\xFF\xFF\xFF`@\x82\x01Q\x16``\x84\x01Rc\xFF\xFF\xFF\xFF``\x82\x01Q\x16`\x80\x84\x01RP`\xA0\x82\x01\x91P` \x84\x01\x93P`\x01\x83\x01\x92Pa\x1C\xD4V[a\x01 \x81Ra\x1D?a\x01 \x82\x01\x84Qa\x1C\x1BV[_` \x84\x01Qa\x01\xC0a\x01@\x84\x01Ra\x1D\\a\x02\xE0\x84\x01\x82a\x1CNV[`@\x86\x01Q\x80Qa\x01`\x86\x01R` \x01Qa\x01\x80\x85\x01R``\x86\x01Q\x84\x82\x03a\x01\x1F\x19\x01a\x01\xA0\x86\x01R\x90\x91Pa\x1D\x93\x82\x82a\x1CNV[\x91PP`\x80\x85\x01Qa\x01\x1F\x19\x84\x83\x03\x01a\x01\xC0\x85\x01Ra\x1D\xB3\x82\x82a\x1C\xB7V[\x91PP`\xA0\x85\x01Qa\x1D\xD3a\x01\xE0\x85\x01\x82\x80Q\x82R` \x90\x81\x01Q\x91\x01RV[P`\xC0\x85\x01Qa\x02 \x84\x01R`\xE0\x85\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x02@\x85\x01RPa\x01\0\x85\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x02`\x85\x01RPa\x01 \x85\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x02\x80\x85\x01RPa\x01@\x85\x01Qa\x02\xA0\x84\x01Ra\x01`\x85\x01Qa\x02\xC0\x84\x01R\x90Pa\x12\x18` \x83\x01\x84\x80Q\x82R` \x81\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81Q\x16` \x84\x01Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF` \x82\x01Q\x16`@\x84\x01R`@\x81\x01Q``\x84\x01RP`@\x81\x01Q`\x80\x83\x01R``\x81\x01Q`\xA0\x83\x01R`\x80\x81\x01Q`\xC0\x83\x01Rc\xFF\xFF\xFF\xFF`\xA0\x82\x01Q\x16`\xE0\x83\x01RPPV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@\x80Q\x90\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x1E\xDEWa\x1E\xDEa\x1E\xA7V[`@R\x90V[`@Q` \x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x1E\xDEWa\x1E\xDEa\x1E\xA7V[`@Q`\x80\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x1E\xDEWa\x1E\xDEa\x1E\xA7V[`@Qa\x01\x80\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x1E\xDEWa\x1E\xDEa\x1E\xA7V[`@Q`\xC0\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x1E\xDEWa\x1E\xDEa\x1E\xA7V[`@Q``\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x1E\xDEWa\x1E\xDEa\x1E\xA7V[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x1F\xBDWa\x1F\xBDa\x1E\xA7V[`@R\x91\x90PV[\x805`\x03\x81\x10a\x12@W__\xFD[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x1F\xECWa\x1F\xECa\x1E\xA7V[P`\x05\x1B` \x01\x90V[_`@\x82\x84\x03\x12\x15a \x06W__\xFD[a \x0Ea\x1E\xBBV[\x90P\x815`\x07\x81\x10a \x1EW__\xFD[\x80\x82RP` \x82\x015` \x82\x01R\x92\x91PPV[_`@\x82\x84\x03\x12\x15a BW__\xFD[a Ja\x1E\xBBV[\x90P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a bW__\xFD[\x82\x01` \x81\x85\x03\x12\x15a sW__\xFD[a {a\x1E\xE4V[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a \x91W__\xFD[\x80\x83\x01\x92PP\x84`\x1F\x83\x01\x12a \xA5W__\xFD[\x815a \xB8a \xB3\x82a\x1F\xD3V[a\x1F\x94V[\x80\x82\x82R` \x82\x01\x91P` \x83`\x06\x1B\x86\x01\x01\x92P\x87\x83\x11\x15a \xD9W__\xFD[` \x85\x01\x94P[\x82\x85\x10\x15a!\x05Wa \xF2\x88\x86a\x1F\xF6V[\x82R` \x82\x01\x91P`@\x85\x01\x94Pa \xE0V[\x83RPP\x82RP` \x91\x82\x015\x91\x81\x01\x91\x90\x91R\x91\x90PV[_`@\x82\x84\x03\x12\x15a!.W__\xFD[a!6a\x1E\xBBV[\x825\x81R` \x92\x83\x015\x92\x81\x01\x92\x90\x92RP\x91\x90PV[\x805c\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x12@W__\xFD[_`@\x82\x84\x03\x12\x15a!pW__\xFD[a!xa\x1E\xBBV[\x90P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a!\x90W__\xFD[\x82\x01`\x1F\x81\x01\x84\x13a!\xA0W__\xFD[\x805a!\xAEa \xB3\x82a\x1F\xD3V[\x80\x82\x82R` \x82\x01\x91P` `\xA0\x84\x02\x85\x01\x01\x92P\x86\x83\x11\x15a!\xCFW__\xFD[` \x84\x01\x93P[\x82\x84\x10\x15a\"AW`\xA0\x84\x88\x03\x12\x15a!\xEDW__\xFD[a!\xF5a\x1F\x07V[a!\xFF\x88\x86a\x1F\xF6V[\x81R`@\x85\x015` \x82\x01Ra\"\x17``\x86\x01a!MV[`@\x82\x01Ra\"(`\x80\x86\x01a!MV[``\x82\x01R\x82R`\xA0\x93\x90\x93\x01\x92` \x90\x91\x01\x90a!\xD6V[\x84RPPP` \x91\x82\x015\x91\x81\x01\x91\x90\x91R\x91\x90PV[_a\x01\xC0\x826\x03\x12\x15a\"iW__\xFD[a\"qa\x1F*V[a\"z\x83a\x1F\xC5V[\x81R` \x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\"\x95W__\xFD[a\"\xA16\x82\x86\x01a 2V[` \x83\x01RPa\"\xB46`@\x85\x01a!\x1EV[`@\x82\x01R`\x80\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\"\xD2W__\xFD[a\"\xDE6\x82\x86\x01a 2V[``\x83\x01RP`\xA0\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\"\xFDW__\xFD[a#\t6\x82\x86\x01a!`V[`\x80\x83\x01RPa#\x1C6`\xC0\x85\x01a!\x1EV[`\xA0\x82\x01Ra\x01\0\x83\x015`\xC0\x82\x01Ra#9a\x01 \x84\x01a!MV[`\xE0\x82\x01Ra#Ka\x01@\x84\x01a!MV[a\x01\0\x82\x01Ra#^a\x01`\x84\x01a!MV[a\x01 \x82\x01Ra\x01\x80\x83\x015a\x01@\x82\x01Ra\x01\xA0\x90\x92\x015a\x01`\x83\x01RP\x90V[\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x12@W__\xFD[_\x81\x83\x03a\x01\0\x81\x12\x80\x15a#\xABW__\xFD[Pa#\xB4a\x1FNV[\x835\x81R```\x1F\x19\x83\x01\x12\x15a#\xC9W__\xFD[a#\xD1a\x1FqV[\x91Pa#\xDF` \x85\x01a#\x81V[\x82Ra#\xED`@\x85\x01a#\x81V[` \x83\x81\x01\x91\x90\x91R``\x85\x81\x015`@\x80\x86\x01\x91\x90\x91R\x91\x83\x01\x93\x90\x93R`\x80\x80\x86\x015\x91\x83\x01\x91\x90\x91R`\xA0\x85\x015\x92\x82\x01\x92\x90\x92R`\xC0\x84\x015\x91\x81\x01\x82\x90Ra$<`\xE0\x85\x01a!MV[`\xA0\x82\x01R\x94\x93PPPPV[_` \x82\x84\x03\x12\x15a$YW__\xFD[\x815a\xFF\xFF\x81\x16\x81\x14a\x12\x18W__\xFD[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\xFF\xFF\x81\x81\x16\x83\x82\x16\x01\x90\x81\x11\x15a\x0EdWa\x0Eda$jV[a\xFF\xFF\x82\x81\x16\x82\x82\x16\x03\x90\x81\x11\x15a\x0EdWa\x0Eda$jV[cNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[\x81\x81\x03\x81\x81\x11\x15a\x0EdWa\x0Eda$jV[`\xFF\x82\x81\x16\x82\x82\x16\x03\x90\x81\x11\x15a\x0EdWa\x0Eda$jV[c\xFF\xFF\xFF\xFF\x82\x81\x16\x82\x82\x16\x03\x90\x81\x11\x15a\x0EdWa\x0Eda$jV[c\xFF\xFF\xFF\xFF\x81\x81\x16\x83\x82\x16\x01\x90\x81\x11\x15a\x0EdWa\x0Eda$jV[_c\xFF\xFF\xFF\xFF\x82\x16c\xFF\xFF\xFF\xFF\x81\x03a%EWa%Ea$jV[`\x01\x01\x92\x91PPV[_c\xFF\xFF\xFF\xFF\x83\x16\x80a%cWa%ca$\xB2V[\x80c\xFF\xFF\xFF\xFF\x84\x16\x06\x91PP\x92\x91PPV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16\x80a%\x8EWa%\x8Ea$\xB2V[\x80g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x16\x06\x91PP\x92\x91PPV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x81\x16\x82\x82\x16\x03\x90\x81\x11\x15a\x0EdWa\x0Eda$jV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[\x80\x82\x01\x80\x82\x11\x15a\x0EdWa\x0Eda$jV[cNH{q`\xE0\x1B_R`Q`\x04R`$_\xFD\xFE\xA2dipfsX\"\x12 \xD1\x80\xC6A\x1AQm?P\xAE\xBA\xE8B;[\x82\xD0Hx.\x8B\xA7\xB4\xEAQ\xB5I\x11\x94U0}dsolcC\0\x08\x1C\x003",
    );
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MachineStatus(u8);
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<MachineStatus> for u8 {
            #[inline]
            fn stv_to_tokens(
                &self,
            ) -> <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'_> {
                alloy_sol_types::private::SolTypeValue::<
                    alloy::sol_types::sol_data::Uint<8>,
                >::stv_to_tokens(self)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::tokenize(self)
                    .0
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(self, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encoded_size(self)
            }
        }
        #[automatically_derived]
        impl MachineStatus {
            /// The Solidity type name.
            pub const NAME: &'static str = stringify!(@ name);
            /// Convert from the underlying value type.
            #[inline]
            pub const fn from(value: u8) -> Self {
                Self(value)
            }
            /// Return the underlying value.
            #[inline]
            pub const fn into(self) -> u8 {
                self.0
            }
            /// Return the single encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode(&self.0)
            }
            /// Return the packed encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode_packed(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode_packed(&self.0)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for MachineStatus {
            type RustType = u8;
            type Token<'a> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = Self::NAME;
            const ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                Self::type_check(token).is_ok()
            }
            #[inline]
            fn type_check(token: &Self::Token<'_>) -> alloy_sol_types::Result<()> {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::type_check(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::detokenize(token)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for MachineStatus {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::topic_preimage_length(rust)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(rust, out)
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic(rust)
            }
        }
    };
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ValueType(u8);
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<ValueType> for u8 {
            #[inline]
            fn stv_to_tokens(
                &self,
            ) -> <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'_> {
                alloy_sol_types::private::SolTypeValue::<
                    alloy::sol_types::sol_data::Uint<8>,
                >::stv_to_tokens(self)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::tokenize(self)
                    .0
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(self, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encoded_size(self)
            }
        }
        #[automatically_derived]
        impl ValueType {
            /// The Solidity type name.
            pub const NAME: &'static str = stringify!(@ name);
            /// Convert from the underlying value type.
            #[inline]
            pub const fn from(value: u8) -> Self {
                Self(value)
            }
            /// Return the underlying value.
            #[inline]
            pub const fn into(self) -> u8 {
                self.0
            }
            /// Return the single encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode(&self.0)
            }
            /// Return the packed encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode_packed(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode_packed(&self.0)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ValueType {
            type RustType = u8;
            type Token<'a> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = Self::NAME;
            const ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                Self::type_check(token).is_ok()
            }
            #[inline]
            fn type_check(token: &Self::Token<'_>) -> alloy_sol_types::Result<()> {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::type_check(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::detokenize(token)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ValueType {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::topic_preimage_length(rust)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(rust, out)
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic(rust)
            }
        }
    };
    /**```solidity
struct ExecutionContext { uint256 maxInboxMessagesRead; address bridge; bytes32 initialWasmModuleRoot; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ExecutionContext {
        #[allow(missing_docs)]
        pub maxInboxMessagesRead: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub bridge: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub initialWasmModuleRoot: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ExecutionContext> for UnderlyingRustTuple<'_> {
            fn from(value: ExecutionContext) -> Self {
                (value.maxInboxMessagesRead, value.bridge, value.initialWasmModuleRoot)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ExecutionContext {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    maxInboxMessagesRead: tuple.0,
                    bridge: tuple.1,
                    initialWasmModuleRoot: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for ExecutionContext {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for ExecutionContext {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.maxInboxMessagesRead),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.bridge,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.initialWasmModuleRoot),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ExecutionContext {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for ExecutionContext {
            const NAME: &'static str = "ExecutionContext";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "ExecutionContext(uint256 maxInboxMessagesRead,address bridge,bytes32 initialWasmModuleRoot)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.maxInboxMessagesRead,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.bridge,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.initialWasmModuleRoot,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ExecutionContext {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.maxInboxMessagesRead,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.bridge,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.initialWasmModuleRoot,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.maxInboxMessagesRead,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.bridge,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.initialWasmModuleRoot,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct Instruction { uint16 opcode; uint256 argumentData; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct Instruction {
        #[allow(missing_docs)]
        pub opcode: u16,
        #[allow(missing_docs)]
        pub argumentData: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<16>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            u16,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Instruction> for UnderlyingRustTuple<'_> {
            fn from(value: Instruction) -> Self {
                (value.opcode, value.argumentData)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Instruction {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    opcode: tuple.0,
                    argumentData: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Instruction {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Instruction {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        16,
                    > as alloy_sol_types::SolType>::tokenize(&self.opcode),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.argumentData),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Instruction {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Instruction {
            const NAME: &'static str = "Instruction";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "Instruction(uint16 opcode,uint256 argumentData)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        16,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.opcode)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.argumentData)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Instruction {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        16,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.opcode,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.argumentData,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    16,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.opcode,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.argumentData,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct Machine { MachineStatus status; ValueStack valueStack; MultiStack valueMultiStack; ValueStack internalStack; StackFrameWindow frameStack; MultiStack frameMultiStack; bytes32 globalStateHash; uint32 moduleIdx; uint32 functionIdx; uint32 functionPc; bytes32 recoveryPc; bytes32 modulesRoot; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct Machine {
        #[allow(missing_docs)]
        pub status: <MachineStatus as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub valueStack: <ValueStack as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub valueMultiStack: <MultiStack as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub internalStack: <ValueStack as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub frameStack: <StackFrameWindow as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub frameMultiStack: <MultiStack as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub globalStateHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub moduleIdx: u32,
        #[allow(missing_docs)]
        pub functionIdx: u32,
        #[allow(missing_docs)]
        pub functionPc: u32,
        #[allow(missing_docs)]
        pub recoveryPc: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub modulesRoot: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            MachineStatus,
            ValueStack,
            MultiStack,
            ValueStack,
            StackFrameWindow,
            MultiStack,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::Uint<32>,
            alloy::sol_types::sol_data::Uint<32>,
            alloy::sol_types::sol_data::Uint<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            <MachineStatus as alloy::sol_types::SolType>::RustType,
            <ValueStack as alloy::sol_types::SolType>::RustType,
            <MultiStack as alloy::sol_types::SolType>::RustType,
            <ValueStack as alloy::sol_types::SolType>::RustType,
            <StackFrameWindow as alloy::sol_types::SolType>::RustType,
            <MultiStack as alloy::sol_types::SolType>::RustType,
            alloy::sol_types::private::FixedBytes<32>,
            u32,
            u32,
            u32,
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Machine> for UnderlyingRustTuple<'_> {
            fn from(value: Machine) -> Self {
                (
                    value.status,
                    value.valueStack,
                    value.valueMultiStack,
                    value.internalStack,
                    value.frameStack,
                    value.frameMultiStack,
                    value.globalStateHash,
                    value.moduleIdx,
                    value.functionIdx,
                    value.functionPc,
                    value.recoveryPc,
                    value.modulesRoot,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Machine {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    status: tuple.0,
                    valueStack: tuple.1,
                    valueMultiStack: tuple.2,
                    internalStack: tuple.3,
                    frameStack: tuple.4,
                    frameMultiStack: tuple.5,
                    globalStateHash: tuple.6,
                    moduleIdx: tuple.7,
                    functionIdx: tuple.8,
                    functionPc: tuple.9,
                    recoveryPc: tuple.10,
                    modulesRoot: tuple.11,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Machine {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Machine {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <MachineStatus as alloy_sol_types::SolType>::tokenize(&self.status),
                    <ValueStack as alloy_sol_types::SolType>::tokenize(&self.valueStack),
                    <MultiStack as alloy_sol_types::SolType>::tokenize(
                        &self.valueMultiStack,
                    ),
                    <ValueStack as alloy_sol_types::SolType>::tokenize(
                        &self.internalStack,
                    ),
                    <StackFrameWindow as alloy_sol_types::SolType>::tokenize(
                        &self.frameStack,
                    ),
                    <MultiStack as alloy_sol_types::SolType>::tokenize(
                        &self.frameMultiStack,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.globalStateHash),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.moduleIdx),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.functionIdx),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.functionPc),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.recoveryPc),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.modulesRoot),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Machine {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Machine {
            const NAME: &'static str = "Machine";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "Machine(uint8 status,ValueStack valueStack,MultiStack valueMultiStack,ValueStack internalStack,StackFrameWindow frameStack,MultiStack frameMultiStack,bytes32 globalStateHash,uint32 moduleIdx,uint32 functionIdx,uint32 functionPc,bytes32 recoveryPc,bytes32 modulesRoot)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(5);
                components
                    .push(
                        <ValueStack as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <ValueStack as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
                    .push(
                        <MultiStack as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <MultiStack as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
                    .push(
                        <ValueStack as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <ValueStack as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
                    .push(
                        <StackFrameWindow as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <StackFrameWindow as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
                    .push(
                        <MultiStack as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <MultiStack as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <MachineStatus as alloy_sol_types::SolType>::eip712_data_word(
                            &self.status,
                        )
                        .0,
                    <ValueStack as alloy_sol_types::SolType>::eip712_data_word(
                            &self.valueStack,
                        )
                        .0,
                    <MultiStack as alloy_sol_types::SolType>::eip712_data_word(
                            &self.valueMultiStack,
                        )
                        .0,
                    <ValueStack as alloy_sol_types::SolType>::eip712_data_word(
                            &self.internalStack,
                        )
                        .0,
                    <StackFrameWindow as alloy_sol_types::SolType>::eip712_data_word(
                            &self.frameStack,
                        )
                        .0,
                    <MultiStack as alloy_sol_types::SolType>::eip712_data_word(
                            &self.frameMultiStack,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.globalStateHash,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.moduleIdx)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.functionIdx)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.functionPc)
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.recoveryPc)
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.modulesRoot)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Machine {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <MachineStatus as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.status,
                    )
                    + <ValueStack as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.valueStack,
                    )
                    + <MultiStack as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.valueMultiStack,
                    )
                    + <ValueStack as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.internalStack,
                    )
                    + <StackFrameWindow as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.frameStack,
                    )
                    + <MultiStack as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.frameMultiStack,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.globalStateHash,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.moduleIdx,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.functionIdx,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.functionPc,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.recoveryPc,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.modulesRoot,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <MachineStatus as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.status,
                    out,
                );
                <ValueStack as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.valueStack,
                    out,
                );
                <MultiStack as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.valueMultiStack,
                    out,
                );
                <ValueStack as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.internalStack,
                    out,
                );
                <StackFrameWindow as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.frameStack,
                    out,
                );
                <MultiStack as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.frameMultiStack,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.globalStateHash,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.moduleIdx,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.functionIdx,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.functionPc,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.recoveryPc,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.modulesRoot,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct Module { bytes32 globalsMerkleRoot; ModuleMemory moduleMemory; bytes32 tablesMerkleRoot; bytes32 functionsMerkleRoot; bytes32 extraHash; uint32 internalsOffset; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct Module {
        #[allow(missing_docs)]
        pub globalsMerkleRoot: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub moduleMemory: <ModuleMemory as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub tablesMerkleRoot: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub functionsMerkleRoot: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub extraHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub internalsOffset: u32,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::FixedBytes<32>,
            ModuleMemory,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::Uint<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::FixedBytes<32>,
            <ModuleMemory as alloy::sol_types::SolType>::RustType,
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::FixedBytes<32>,
            u32,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Module> for UnderlyingRustTuple<'_> {
            fn from(value: Module) -> Self {
                (
                    value.globalsMerkleRoot,
                    value.moduleMemory,
                    value.tablesMerkleRoot,
                    value.functionsMerkleRoot,
                    value.extraHash,
                    value.internalsOffset,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Module {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    globalsMerkleRoot: tuple.0,
                    moduleMemory: tuple.1,
                    tablesMerkleRoot: tuple.2,
                    functionsMerkleRoot: tuple.3,
                    extraHash: tuple.4,
                    internalsOffset: tuple.5,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Module {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Module {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.globalsMerkleRoot),
                    <ModuleMemory as alloy_sol_types::SolType>::tokenize(
                        &self.moduleMemory,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.tablesMerkleRoot),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.functionsMerkleRoot),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.extraHash),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.internalsOffset),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Module {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Module {
            const NAME: &'static str = "Module";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "Module(bytes32 globalsMerkleRoot,ModuleMemory moduleMemory,bytes32 tablesMerkleRoot,bytes32 functionsMerkleRoot,bytes32 extraHash,uint32 internalsOffset)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(1);
                components
                    .push(
                        <ModuleMemory as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <ModuleMemory as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.globalsMerkleRoot,
                        )
                        .0,
                    <ModuleMemory as alloy_sol_types::SolType>::eip712_data_word(
                            &self.moduleMemory,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.tablesMerkleRoot,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.functionsMerkleRoot,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.extraHash)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.internalsOffset,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Module {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.globalsMerkleRoot,
                    )
                    + <ModuleMemory as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.moduleMemory,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.tablesMerkleRoot,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.functionsMerkleRoot,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.extraHash,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.internalsOffset,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.globalsMerkleRoot,
                    out,
                );
                <ModuleMemory as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.moduleMemory,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.tablesMerkleRoot,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.functionsMerkleRoot,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.extraHash,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.internalsOffset,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct ModuleMemory { uint64 size; uint64 maxSize; bytes32 merkleRoot; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ModuleMemory {
        #[allow(missing_docs)]
        pub size: u64,
        #[allow(missing_docs)]
        pub maxSize: u64,
        #[allow(missing_docs)]
        pub merkleRoot: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<64>,
            alloy::sol_types::sol_data::Uint<64>,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            u64,
            u64,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ModuleMemory> for UnderlyingRustTuple<'_> {
            fn from(value: ModuleMemory) -> Self {
                (value.size, value.maxSize, value.merkleRoot)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ModuleMemory {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    size: tuple.0,
                    maxSize: tuple.1,
                    merkleRoot: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for ModuleMemory {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for ModuleMemory {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.size),
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.maxSize),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.merkleRoot),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ModuleMemory {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for ModuleMemory {
            const NAME: &'static str = "ModuleMemory";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "ModuleMemory(uint64 size,uint64 maxSize,bytes32 merkleRoot)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.size)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.maxSize)
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.merkleRoot)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ModuleMemory {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.size)
                    + <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.maxSize,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.merkleRoot,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    64,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.size,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    64,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.maxSize,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.merkleRoot,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct MultiStack { bytes32 inactiveStackHash; bytes32 remainingHash; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MultiStack {
        #[allow(missing_docs)]
        pub inactiveStackHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub remainingHash: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<MultiStack> for UnderlyingRustTuple<'_> {
            fn from(value: MultiStack) -> Self {
                (value.inactiveStackHash, value.remainingHash)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for MultiStack {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    inactiveStackHash: tuple.0,
                    remainingHash: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for MultiStack {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for MultiStack {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.inactiveStackHash),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.remainingHash),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for MultiStack {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for MultiStack {
            const NAME: &'static str = "MultiStack";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "MultiStack(bytes32 inactiveStackHash,bytes32 remainingHash)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.inactiveStackHash,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.remainingHash)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for MultiStack {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.inactiveStackHash,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.remainingHash,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.inactiveStackHash,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.remainingHash,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct StackFrame { Value returnPc; bytes32 localsMerkleRoot; uint32 callerModule; uint32 callerModuleInternals; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct StackFrame {
        #[allow(missing_docs)]
        pub returnPc: <Value as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub localsMerkleRoot: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub callerModule: u32,
        #[allow(missing_docs)]
        pub callerModuleInternals: u32,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            Value,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::Uint<32>,
            alloy::sol_types::sol_data::Uint<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            <Value as alloy::sol_types::SolType>::RustType,
            alloy::sol_types::private::FixedBytes<32>,
            u32,
            u32,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<StackFrame> for UnderlyingRustTuple<'_> {
            fn from(value: StackFrame) -> Self {
                (
                    value.returnPc,
                    value.localsMerkleRoot,
                    value.callerModule,
                    value.callerModuleInternals,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for StackFrame {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    returnPc: tuple.0,
                    localsMerkleRoot: tuple.1,
                    callerModule: tuple.2,
                    callerModuleInternals: tuple.3,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for StackFrame {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for StackFrame {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <Value as alloy_sol_types::SolType>::tokenize(&self.returnPc),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.localsMerkleRoot),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.callerModule),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.callerModuleInternals),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for StackFrame {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for StackFrame {
            const NAME: &'static str = "StackFrame";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "StackFrame(Value returnPc,bytes32 localsMerkleRoot,uint32 callerModule,uint32 callerModuleInternals)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(1);
                components
                    .push(<Value as alloy_sol_types::SolStruct>::eip712_root_type());
                components
                    .extend(<Value as alloy_sol_types::SolStruct>::eip712_components());
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <Value as alloy_sol_types::SolType>::eip712_data_word(&self.returnPc)
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.localsMerkleRoot,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.callerModule)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.callerModuleInternals,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for StackFrame {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <Value as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.returnPc,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.localsMerkleRoot,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.callerModule,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.callerModuleInternals,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <Value as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.returnPc,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.localsMerkleRoot,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.callerModule,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.callerModuleInternals,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct StackFrameWindow { StackFrame[] proved; bytes32 remainingHash; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct StackFrameWindow {
        #[allow(missing_docs)]
        pub proved: alloy::sol_types::private::Vec<
            <StackFrame as alloy::sol_types::SolType>::RustType,
        >,
        #[allow(missing_docs)]
        pub remainingHash: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Array<StackFrame>,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Vec<
                <StackFrame as alloy::sol_types::SolType>::RustType,
            >,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<StackFrameWindow> for UnderlyingRustTuple<'_> {
            fn from(value: StackFrameWindow) -> Self {
                (value.proved, value.remainingHash)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for StackFrameWindow {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    proved: tuple.0,
                    remainingHash: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for StackFrameWindow {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for StackFrameWindow {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        StackFrame,
                    > as alloy_sol_types::SolType>::tokenize(&self.proved),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.remainingHash),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for StackFrameWindow {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for StackFrameWindow {
            const NAME: &'static str = "StackFrameWindow";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "StackFrameWindow(StackFrame[] proved,bytes32 remainingHash)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(1);
                components
                    .push(
                        <StackFrame as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <StackFrame as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Array<
                        StackFrame,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.proved)
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.remainingHash)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for StackFrameWindow {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Array<
                        StackFrame,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.proved,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.remainingHash,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Array<
                    StackFrame,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.proved,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.remainingHash,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct Value { ValueType valueType; uint256 contents; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct Value {
        #[allow(missing_docs)]
        pub valueType: <ValueType as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub contents: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (ValueType, alloy::sol_types::sol_data::Uint<256>);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            <ValueType as alloy::sol_types::SolType>::RustType,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Value> for UnderlyingRustTuple<'_> {
            fn from(value: Value) -> Self {
                (value.valueType, value.contents)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Value {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    valueType: tuple.0,
                    contents: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Value {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Value {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <ValueType as alloy_sol_types::SolType>::tokenize(&self.valueType),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contents),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Value {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Value {
            const NAME: &'static str = "Value";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "Value(uint8 valueType,uint256 contents)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <ValueType as alloy_sol_types::SolType>::eip712_data_word(
                            &self.valueType,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.contents)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Value {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <ValueType as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.valueType,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.contents,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <ValueType as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.valueType,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.contents,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct ValueArray { Value[] inner; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ValueArray {
        #[allow(missing_docs)]
        pub inner: alloy::sol_types::private::Vec<
            <Value as alloy::sol_types::SolType>::RustType,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Array<Value>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Vec<
                <Value as alloy::sol_types::SolType>::RustType,
            >,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ValueArray> for UnderlyingRustTuple<'_> {
            fn from(value: ValueArray) -> Self {
                (value.inner,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ValueArray {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { inner: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for ValueArray {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for ValueArray {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        Value,
                    > as alloy_sol_types::SolType>::tokenize(&self.inner),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ValueArray {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for ValueArray {
            const NAME: &'static str = "ValueArray";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed("ValueArray(Value[] inner)")
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(1);
                components
                    .push(<Value as alloy_sol_types::SolStruct>::eip712_root_type());
                components
                    .extend(<Value as alloy_sol_types::SolStruct>::eip712_components());
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                <alloy::sol_types::sol_data::Array<
                    Value,
                > as alloy_sol_types::SolType>::eip712_data_word(&self.inner)
                    .0
                    .to_vec()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ValueArray {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Array<
                        Value,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.inner)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Array<
                    Value,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.inner,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct ValueStack { ValueArray proved; bytes32 remainingHash; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ValueStack {
        #[allow(missing_docs)]
        pub proved: <ValueArray as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub remainingHash: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            ValueArray,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            <ValueArray as alloy::sol_types::SolType>::RustType,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ValueStack> for UnderlyingRustTuple<'_> {
            fn from(value: ValueStack) -> Self {
                (value.proved, value.remainingHash)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ValueStack {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    proved: tuple.0,
                    remainingHash: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for ValueStack {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for ValueStack {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <ValueArray as alloy_sol_types::SolType>::tokenize(&self.proved),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.remainingHash),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ValueStack {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for ValueStack {
            const NAME: &'static str = "ValueStack";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "ValueStack(ValueArray proved,bytes32 remainingHash)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(1);
                components
                    .push(
                        <ValueArray as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <ValueArray as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <ValueArray as alloy_sol_types::SolType>::eip712_data_word(
                            &self.proved,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.remainingHash)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ValueStack {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <ValueArray as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.proved,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.remainingHash,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <ValueArray as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.proved,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.remainingHash,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**Function with signature `executeOneStep((uint256,address,bytes32),(uint8,(((uint8,uint256)[]),bytes32),(bytes32,bytes32),(((uint8,uint256)[]),bytes32),(((uint8,uint256),bytes32,uint32,uint32)[],bytes32),(bytes32,bytes32),bytes32,uint32,uint32,uint32,bytes32,bytes32),(bytes32,(uint64,uint64,bytes32),bytes32,bytes32,bytes32,uint32),(uint16,uint256),bytes)` and selector `0xa92cb501`.
```solidity
function executeOneStep(ExecutionContext memory, Machine memory startMach, Module memory startMod, Instruction memory inst, bytes memory proof) external pure returns (Machine memory mach, Module memory r#mod);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeOneStepCall {
        #[allow(missing_docs)]
        pub _0: <ExecutionContext as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub startMach: <Machine as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub startMod: <Module as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub inst: <Instruction as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub proof: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`executeOneStep((uint256,address,bytes32),(uint8,(((uint8,uint256)[]),bytes32),(bytes32,bytes32),(((uint8,uint256)[]),bytes32),(((uint8,uint256),bytes32,uint32,uint32)[],bytes32),(bytes32,bytes32),bytes32,uint32,uint32,uint32,bytes32,bytes32),(bytes32,(uint64,uint64,bytes32),bytes32,bytes32,bytes32,uint32),(uint16,uint256),bytes)`](executeOneStepCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeOneStepReturn {
        #[allow(missing_docs)]
        pub mach: <Machine as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub r#mod: <Module as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                ExecutionContext,
                Machine,
                Module,
                Instruction,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <ExecutionContext as alloy::sol_types::SolType>::RustType,
                <Machine as alloy::sol_types::SolType>::RustType,
                <Module as alloy::sol_types::SolType>::RustType,
                <Instruction as alloy::sol_types::SolType>::RustType,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeOneStepCall> for UnderlyingRustTuple<'_> {
                fn from(value: executeOneStepCall) -> Self {
                    (value._0, value.startMach, value.startMod, value.inst, value.proof)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for executeOneStepCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _0: tuple.0,
                        startMach: tuple.1,
                        startMod: tuple.2,
                        inst: tuple.3,
                        proof: tuple.4,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (Machine, Module);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <Machine as alloy::sol_types::SolType>::RustType,
                <Module as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeOneStepReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: executeOneStepReturn) -> Self {
                    (value.mach, value.r#mod)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for executeOneStepReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        mach: tuple.0,
                        r#mod: tuple.1,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for executeOneStepCall {
            type Parameters<'a> = (
                ExecutionContext,
                Machine,
                Module,
                Instruction,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = executeOneStepReturn;
            type ReturnTuple<'a> = (Machine, Module);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "executeOneStep((uint256,address,bytes32),(uint8,(((uint8,uint256)[]),bytes32),(bytes32,bytes32),(((uint8,uint256)[]),bytes32),(((uint8,uint256),bytes32,uint32,uint32)[],bytes32),(bytes32,bytes32),bytes32,uint32,uint32,uint32,bytes32,bytes32),(bytes32,(uint64,uint64,bytes32),bytes32,bytes32,bytes32,uint32),(uint16,uint256),bytes)";
            const SELECTOR: [u8; 4] = [169u8, 44u8, 181u8, 1u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <ExecutionContext as alloy_sol_types::SolType>::tokenize(&self._0),
                    <Machine as alloy_sol_types::SolType>::tokenize(&self.startMach),
                    <Module as alloy_sol_types::SolType>::tokenize(&self.startMod),
                    <Instruction as alloy_sol_types::SolType>::tokenize(&self.inst),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.proof,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`OneStepProverMath`](self) function calls.
    pub enum OneStepProverMathCalls {
        #[allow(missing_docs)]
        executeOneStep(executeOneStepCall),
    }
    #[automatically_derived]
    impl OneStepProverMathCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[[169u8, 44u8, 181u8, 1u8]];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for OneStepProverMathCalls {
        const NAME: &'static str = "OneStepProverMathCalls";
        const MIN_DATA_LENGTH: usize = 1120usize;
        const COUNT: usize = 1usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::executeOneStep(_) => {
                    <executeOneStepCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<OneStepProverMathCalls>] = &[
                {
                    fn executeOneStep(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OneStepProverMathCalls> {
                        <executeOneStepCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OneStepProverMathCalls::executeOneStep)
                    }
                    executeOneStep
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::executeOneStep(inner) => {
                    <executeOneStepCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::executeOneStep(inner) => {
                    <executeOneStepCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`OneStepProverMath`](self) contract instance.

See the [wrapper's documentation](`OneStepProverMathInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> OneStepProverMathInstance<T, P, N> {
        OneStepProverMathInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<OneStepProverMathInstance<T, P, N>>,
    > {
        OneStepProverMathInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        OneStepProverMathInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`OneStepProverMath`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`OneStepProverMath`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct OneStepProverMathInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for OneStepProverMathInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("OneStepProverMathInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > OneStepProverMathInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`OneStepProverMath`](self) contract instance.

See the [wrapper's documentation](`OneStepProverMathInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<OneStepProverMathInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> OneStepProverMathInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> OneStepProverMathInstance<T, P, N> {
            OneStepProverMathInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > OneStepProverMathInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`executeOneStep`] function.
        pub fn executeOneStep(
            &self,
            _0: <ExecutionContext as alloy::sol_types::SolType>::RustType,
            startMach: <Machine as alloy::sol_types::SolType>::RustType,
            startMod: <Module as alloy::sol_types::SolType>::RustType,
            inst: <Instruction as alloy::sol_types::SolType>::RustType,
            proof: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, executeOneStepCall, N> {
            self.call_builder(
                &executeOneStepCall {
                    _0,
                    startMach,
                    startMod,
                    inst,
                    proof,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > OneStepProverMathInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
