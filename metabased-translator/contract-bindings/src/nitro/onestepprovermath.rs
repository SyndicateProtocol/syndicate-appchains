/**

Generated by the following Solidity interface...
```solidity
interface OneStepProverMath {
    type MachineStatus is uint8;
    type ValueType is uint8;
    struct ExecutionContext {
        uint256 maxInboxMessagesRead;
        address bridge;
        bytes32 initialWasmModuleRoot;
    }
    struct Instruction {
        uint16 opcode;
        uint256 argumentData;
    }
    struct Machine {
        MachineStatus status;
        ValueStack valueStack;
        MultiStack valueMultiStack;
        ValueStack internalStack;
        StackFrameWindow frameStack;
        MultiStack frameMultiStack;
        bytes32 globalStateHash;
        uint32 moduleIdx;
        uint32 functionIdx;
        uint32 functionPc;
        bytes32 recoveryPc;
        bytes32 modulesRoot;
    }
    struct Module {
        bytes32 globalsMerkleRoot;
        ModuleMemory moduleMemory;
        bytes32 tablesMerkleRoot;
        bytes32 functionsMerkleRoot;
        bytes32 extraHash;
        uint32 internalsOffset;
    }
    struct ModuleMemory {
        uint64 size;
        uint64 maxSize;
        bytes32 merkleRoot;
    }
    struct MultiStack {
        bytes32 inactiveStackHash;
        bytes32 remainingHash;
    }
    struct StackFrame {
        Value returnPc;
        bytes32 localsMerkleRoot;
        uint32 callerModule;
        uint32 callerModuleInternals;
    }
    struct StackFrameWindow {
        StackFrame[] proved;
        bytes32 remainingHash;
    }
    struct Value {
        ValueType valueType;
        uint256 contents;
    }
    struct ValueArray {
        Value[] inner;
    }
    struct ValueStack {
        ValueArray proved;
        bytes32 remainingHash;
    }

    function executeOneStep(ExecutionContext memory, Machine memory startMach, Module memory startMod, Instruction memory inst, bytes memory proof) external pure returns (Machine memory mach, Module memory mod);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "executeOneStep",
    "inputs": [
      {
        "name": "",
        "type": "tuple",
        "internalType": "struct ExecutionContext",
        "components": [
          {
            "name": "maxInboxMessagesRead",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "bridge",
            "type": "address",
            "internalType": "contract IBridge"
          },
          {
            "name": "initialWasmModuleRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          }
        ]
      },
      {
        "name": "startMach",
        "type": "tuple",
        "internalType": "struct Machine",
        "components": [
          {
            "name": "status",
            "type": "uint8",
            "internalType": "enum MachineStatus"
          },
          {
            "name": "valueStack",
            "type": "tuple",
            "internalType": "struct ValueStack",
            "components": [
              {
                "name": "proved",
                "type": "tuple",
                "internalType": "struct ValueArray",
                "components": [
                  {
                    "name": "inner",
                    "type": "tuple[]",
                    "internalType": "struct Value[]",
                    "components": [
                      {
                        "name": "valueType",
                        "type": "uint8",
                        "internalType": "enum ValueType"
                      },
                      {
                        "name": "contents",
                        "type": "uint256",
                        "internalType": "uint256"
                      }
                    ]
                  }
                ]
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "valueMultiStack",
            "type": "tuple",
            "internalType": "struct MultiStack",
            "components": [
              {
                "name": "inactiveStackHash",
                "type": "bytes32",
                "internalType": "bytes32"
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "internalStack",
            "type": "tuple",
            "internalType": "struct ValueStack",
            "components": [
              {
                "name": "proved",
                "type": "tuple",
                "internalType": "struct ValueArray",
                "components": [
                  {
                    "name": "inner",
                    "type": "tuple[]",
                    "internalType": "struct Value[]",
                    "components": [
                      {
                        "name": "valueType",
                        "type": "uint8",
                        "internalType": "enum ValueType"
                      },
                      {
                        "name": "contents",
                        "type": "uint256",
                        "internalType": "uint256"
                      }
                    ]
                  }
                ]
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "frameStack",
            "type": "tuple",
            "internalType": "struct StackFrameWindow",
            "components": [
              {
                "name": "proved",
                "type": "tuple[]",
                "internalType": "struct StackFrame[]",
                "components": [
                  {
                    "name": "returnPc",
                    "type": "tuple",
                    "internalType": "struct Value",
                    "components": [
                      {
                        "name": "valueType",
                        "type": "uint8",
                        "internalType": "enum ValueType"
                      },
                      {
                        "name": "contents",
                        "type": "uint256",
                        "internalType": "uint256"
                      }
                    ]
                  },
                  {
                    "name": "localsMerkleRoot",
                    "type": "bytes32",
                    "internalType": "bytes32"
                  },
                  {
                    "name": "callerModule",
                    "type": "uint32",
                    "internalType": "uint32"
                  },
                  {
                    "name": "callerModuleInternals",
                    "type": "uint32",
                    "internalType": "uint32"
                  }
                ]
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "frameMultiStack",
            "type": "tuple",
            "internalType": "struct MultiStack",
            "components": [
              {
                "name": "inactiveStackHash",
                "type": "bytes32",
                "internalType": "bytes32"
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "globalStateHash",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "moduleIdx",
            "type": "uint32",
            "internalType": "uint32"
          },
          {
            "name": "functionIdx",
            "type": "uint32",
            "internalType": "uint32"
          },
          {
            "name": "functionPc",
            "type": "uint32",
            "internalType": "uint32"
          },
          {
            "name": "recoveryPc",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "modulesRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          }
        ]
      },
      {
        "name": "startMod",
        "type": "tuple",
        "internalType": "struct Module",
        "components": [
          {
            "name": "globalsMerkleRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "moduleMemory",
            "type": "tuple",
            "internalType": "struct ModuleMemory",
            "components": [
              {
                "name": "size",
                "type": "uint64",
                "internalType": "uint64"
              },
              {
                "name": "maxSize",
                "type": "uint64",
                "internalType": "uint64"
              },
              {
                "name": "merkleRoot",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "tablesMerkleRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "functionsMerkleRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "extraHash",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "internalsOffset",
            "type": "uint32",
            "internalType": "uint32"
          }
        ]
      },
      {
        "name": "inst",
        "type": "tuple",
        "internalType": "struct Instruction",
        "components": [
          {
            "name": "opcode",
            "type": "uint16",
            "internalType": "uint16"
          },
          {
            "name": "argumentData",
            "type": "uint256",
            "internalType": "uint256"
          }
        ]
      },
      {
        "name": "proof",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "mach",
        "type": "tuple",
        "internalType": "struct Machine",
        "components": [
          {
            "name": "status",
            "type": "uint8",
            "internalType": "enum MachineStatus"
          },
          {
            "name": "valueStack",
            "type": "tuple",
            "internalType": "struct ValueStack",
            "components": [
              {
                "name": "proved",
                "type": "tuple",
                "internalType": "struct ValueArray",
                "components": [
                  {
                    "name": "inner",
                    "type": "tuple[]",
                    "internalType": "struct Value[]",
                    "components": [
                      {
                        "name": "valueType",
                        "type": "uint8",
                        "internalType": "enum ValueType"
                      },
                      {
                        "name": "contents",
                        "type": "uint256",
                        "internalType": "uint256"
                      }
                    ]
                  }
                ]
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "valueMultiStack",
            "type": "tuple",
            "internalType": "struct MultiStack",
            "components": [
              {
                "name": "inactiveStackHash",
                "type": "bytes32",
                "internalType": "bytes32"
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "internalStack",
            "type": "tuple",
            "internalType": "struct ValueStack",
            "components": [
              {
                "name": "proved",
                "type": "tuple",
                "internalType": "struct ValueArray",
                "components": [
                  {
                    "name": "inner",
                    "type": "tuple[]",
                    "internalType": "struct Value[]",
                    "components": [
                      {
                        "name": "valueType",
                        "type": "uint8",
                        "internalType": "enum ValueType"
                      },
                      {
                        "name": "contents",
                        "type": "uint256",
                        "internalType": "uint256"
                      }
                    ]
                  }
                ]
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "frameStack",
            "type": "tuple",
            "internalType": "struct StackFrameWindow",
            "components": [
              {
                "name": "proved",
                "type": "tuple[]",
                "internalType": "struct StackFrame[]",
                "components": [
                  {
                    "name": "returnPc",
                    "type": "tuple",
                    "internalType": "struct Value",
                    "components": [
                      {
                        "name": "valueType",
                        "type": "uint8",
                        "internalType": "enum ValueType"
                      },
                      {
                        "name": "contents",
                        "type": "uint256",
                        "internalType": "uint256"
                      }
                    ]
                  },
                  {
                    "name": "localsMerkleRoot",
                    "type": "bytes32",
                    "internalType": "bytes32"
                  },
                  {
                    "name": "callerModule",
                    "type": "uint32",
                    "internalType": "uint32"
                  },
                  {
                    "name": "callerModuleInternals",
                    "type": "uint32",
                    "internalType": "uint32"
                  }
                ]
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "frameMultiStack",
            "type": "tuple",
            "internalType": "struct MultiStack",
            "components": [
              {
                "name": "inactiveStackHash",
                "type": "bytes32",
                "internalType": "bytes32"
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "globalStateHash",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "moduleIdx",
            "type": "uint32",
            "internalType": "uint32"
          },
          {
            "name": "functionIdx",
            "type": "uint32",
            "internalType": "uint32"
          },
          {
            "name": "functionPc",
            "type": "uint32",
            "internalType": "uint32"
          },
          {
            "name": "recoveryPc",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "modulesRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          }
        ]
      },
      {
        "name": "mod",
        "type": "tuple",
        "internalType": "struct Module",
        "components": [
          {
            "name": "globalsMerkleRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "moduleMemory",
            "type": "tuple",
            "internalType": "struct ModuleMemory",
            "components": [
              {
                "name": "size",
                "type": "uint64",
                "internalType": "uint64"
              },
              {
                "name": "maxSize",
                "type": "uint64",
                "internalType": "uint64"
              },
              {
                "name": "merkleRoot",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "tablesMerkleRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "functionsMerkleRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "extraHash",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "internalsOffset",
            "type": "uint32",
            "internalType": "uint32"
          }
        ]
      }
    ],
    "stateMutability": "pure"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod OneStepProverMath {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052348015600e575f80fd5b5061272a8061001c5f395ff3fe608060405234801561000f575f80fd5b5060043610610029575f3560e01c8063a92cb5011461002d575b5f80fd5b61004061003b366004611c1b565b610057565b60405161004e929190611e45565b60405180910390f35b61005f611af1565b6040805160c0810182525f80825282516060808201855282825260208083018490528286018490528401919091529282018190529181018290526080810182905260a08101919091526100b187612377565b91506100c2368790038701876124af565b90505f6100d2602087018761254e565b9050611bcc61ffff8216604514806100ee575061ffff82166050145b156100fc575061033861031a565b604661ffff831610801590610124575061011860096046612583565b61ffff168261ffff1611155b1561013257506104e261031a565b606761ffff83161080159061015a575061014e60026067612583565b61ffff168261ffff1611155b1561016857506105c061031a565b606a61ffff8316108015906101825750607861ffff831611155b15610190575061064961031a565b605161ffff8316108015906101b857506101ac60096051612583565b61ffff168261ffff1611155b156101c6575061086a61031a565b607961ffff8316108015906101ee57506101e260026079612583565b61ffff168261ffff1611155b156101fc57506108cb61031a565b607c61ffff8316108015906102165750608a61ffff831611155b15610224575061094161031a565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5961ffff8316016102585750610b3861031a565b61ffff821660ac148061026f575061ffff821660ad145b1561027d5750610b8161031a565b60c061ffff831610801590610297575060c461ffff831611155b156102a55750610bfd61031a565b60bc61ffff8316108015906102bf575060bf61ffff831611155b156102cd5750610e0f61031a565b60405162461bcd60e51b815260206004820152600e60248201527f494e56414c49445f4f50434f444500000000000000000000000000000000000060448201526064015b60405180910390fd5b61032b84848989898663ffffffff16565b5050965096945050505050565b5f6103468660200151610fa1565b90506045610357602086018661254e565b61ffff16036103c6575f8151600681111561037457610374611d12565b146103c15760405162461bcd60e51b815260206004820152600760248201527f4e4f545f493332000000000000000000000000000000000000000000000000006044820152606401610311565b610488565b60506103d5602086018661254e565b61ffff1603610440576001815160068111156103f3576103f3611d12565b146103c15760405162461bcd60e51b815260206004820152600760248201527f4e4f545f493634000000000000000000000000000000000000000000000000006044820152606401610311565b60405162461bcd60e51b815260206004820152600760248201527f4241445f45515a000000000000000000000000000000000000000000000000006044820152606401610311565b5f81602001515f0361049c5750600161049f565b505f5b6040805180820182525f80825260209182018190528251808401909352825263ffffffff8316908201526104d9905b602089015190610fc5565b50505050505050565b5f6104f86104f38760200151610fa1565b610fd5565b90505f61050b6104f38860200151610fa1565b90505f604661051d602088018861254e565b61052791906125a5565b90505f8061ffff831660021480610542575061ffff83166004145b80610551575061ffff83166006145b80610560575061ffff83166008145b156105805761056e84611091565b915061057985611091565b905061058e565b505063ffffffff8083169084165b5f61059a8383866110bc565b90506105b36105a882611354565b60208d015190610fc5565b5050505050505050505050565b5f6105d16104f38760200151610fa1565b90505f60676105e3602087018761254e565b6105ed91906125a5565b90505f6106028363ffffffff168360206113c5565b6040805180820182525f80825260209182018190528251808401909352825263ffffffff83169082015290915061063f905b60208a015190610fc5565b5050505050505050565b5f61065a6104f38760200151610fa1565b90505f61066d6104f38860200151610fa1565b90505f80606a610680602089018961254e565b61068a91906125a5565b90508061ffff166003036107215763ffffffff841615806106db57508260030b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000001480156106db57508360030b5f19145b15610704578860025b908160028111156106f7576106f7611d12565b8152505050505050610863565b8360030b8360030b81610719576107196125c0565b059150610824565b8061ffff1660050361075f578363ffffffff165f03610742578860026106e4565b8360030b8360030b81610757576107576125c0565b079150610824565b8061ffff16600a0361077e5763ffffffff8316601f85161b9150610824565b8061ffff16600c0361079d5763ffffffff8316601f85161c9150610824565b8061ffff16600b036107ba57600383900b601f85161d9150610824565b8061ffff16600d036107d7576107d0838561159f565b9150610824565b8061ffff16600e036107ed576107d083856115e0565b5f806108068563ffffffff168763ffffffff1685611621565b915091508015610820575050600289525061086392505050565b5091505b6040805180820182525f80825260209182018190528251808401909352825263ffffffff84169082015261085e905b60208b015190610fc5565b505050505b5050505050565b5f61088061087b8760200151610fa1565b6117a8565b90505f61089361087b8860200151610fa1565b90505f60516108a5602088018861254e565b6108af91906125a5565b90505f6108bd8385846110bc565b905061085e61085382611354565b5f6108dc61087b8760200151610fa1565b90505f60796108ee602087018761254e565b6108f891906125a5565b90505f610907838360406113c5565b6040805180820182525f80825260209182015281518083019092526001825263ffffffff9290921691810182905290915061063f90610634565b5f61095261087b8760200151610fa1565b90505f61096561087b8860200151610fa1565b90505f80607c610978602089018961254e565b61098291906125a5565b90508061ffff16600303610a015767ffffffffffffffff841615806109d757508260070b7fffffffffffffffffffffffffffffffffffffffffffffffff80000000000000001480156109d757508360070b5f19145b156109e4578860026106e4565b8360070b8360070b816109f9576109f96125c0565b059150610b01565b8061ffff16600503610a43578367ffffffffffffffff165f03610a26578860026106e4565b8360070b8360070b81610a3b57610a3b6125c0565b079150610b01565b8061ffff16600a03610a665767ffffffffffffffff8316603f85161b9150610b01565b8061ffff16600c03610a895767ffffffffffffffff8316603f85161c9150610b01565b8061ffff16600b03610aa657600783900b603f85161d9150610b01565b8061ffff16600d03610ac357610abc8385611869565b9150610b01565b8061ffff16600e03610ad957610abc83856118ba565b5f610ae5848684611621565b90935090508015610aff5750506002885250610863915050565b505b6040805180820182525f80825260209182015281518083019092526001825267ffffffffffffffff84169082015261085e90610853565b5f610b4961087b8760200151610fa1565b6040805180820182525f80825260209182018190528251808401909352825263ffffffff83169082015290915081906104d9906104ce565b5f610b926104f38760200151610fa1565b90505f60ac610ba4602087018761254e565b61ffff1603610bbd57610bb682611091565b9050610bc6565b5063ffffffff81165b6040805180820182525f80825260209182015281518083019092526001825267ffffffffffffffff8316908201526104d9906104ce565b5f8060c0610c0e602087018761254e565b61ffff1603610c2257505f90506008610cf9565b60c1610c31602087018761254e565b61ffff1603610c4557505f90506010610cf9565b60c2610c54602087018761254e565b61ffff1603610c695750600190506008610cf9565b60c3610c78602087018761254e565b61ffff1603610c8d5750600190506010610cf9565b60c4610c9c602087018761254e565b61ffff1603610cb15750600190506020610cf9565b60405162461bcd60e51b815260206004820152601860248201527f494e56414c49445f455854454e445f53414d455f5459504500000000000000006044820152606401610311565b5f80836006811115610d0d57610d0d611d12565b03610d1d575063ffffffff610d28565b5067ffffffffffffffff5b5f610d368960200151610fa1565b9050836006811115610d4a57610d4a611d12565b81516006811115610d5d57610d5d611d12565b14610daa5760405162461bcd60e51b815260206004820152601960248201527f4241445f455854454e445f53414d455f545950455f54595045000000000000006044820152606401610311565b5f610dbc600160ff861681901b6125d4565b602083018051821690529050610dd36001856125e7565b60ff166001901b8260200151165f14610df457602082018051821985161790525b60208a0151610e039083610fc5565b50505050505050505050565b5f8060bc610e20602087018761254e565b61ffff1603610e3457505f90506002610ee7565b60bd610e43602087018761254e565b61ffff1603610e585750600190506003610ee7565b60be610e67602087018761254e565b61ffff1603610e7b5750600290505f610ee7565b60bf610e8a602087018761254e565b61ffff1603610e9f5750600390506001610ee7565b60405162461bcd60e51b815260206004820152601360248201527f494e56414c49445f5245494e54455250524554000000000000000000000000006044820152606401610311565b5f610ef58860200151610fa1565b9050816006811115610f0957610f09611d12565b81516006811115610f1c57610f1c611d12565b14610f695760405162461bcd60e51b815260206004820152601860248201527f494e56414c49445f5245494e544552505245545f5459504500000000000000006044820152606401610311565b80836006811115610f7c57610f7c611d12565b90816006811115610f8f57610f8f611d12565b905250602088015161063f9082610fc5565b604080518082019091525f80825260208201528151610fbf9061190b565b92915050565b8151610fd19082611a0c565b5050565b60208101515f908183516006811115610ff057610ff0611d12565b1461103d5760405162461bcd60e51b815260206004820152600760248201527f4e4f545f493332000000000000000000000000000000000000000000000000006044820152606401610311565b6401000000008110610fbf5760405162461bcd60e51b815260206004820152600760248201527f4241445f493332000000000000000000000000000000000000000000000000006044820152606401610311565b5f63800000008216156110b2575063ffffffff1667ffffffff000000001790565b5063ffffffff1690565b5f61ffff82166110e4578267ffffffffffffffff168467ffffffffffffffff1614905061134d565b5f1961ffff83160161110f578267ffffffffffffffff168467ffffffffffffffff161415905061134d565b60011961ffff83160161112c578260070b8460070b12905061134d565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd61ffff831601611175578267ffffffffffffffff168467ffffffffffffffff1610905061134d565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc61ffff8316016111b0578260070b8460070b13905061134d565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb61ffff8316016111f9578267ffffffffffffffff168467ffffffffffffffff1611905061134d565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa61ffff831601611235578260070b8460070b1315905061134d565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff961ffff83160161127f578267ffffffffffffffff168467ffffffffffffffff161115905061134d565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff861ffff8316016112bb578260070b8460070b1215905061134d565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff761ffff831601611305578267ffffffffffffffff168467ffffffffffffffff161015905061134d565b60405162461bcd60e51b815260206004820152600a60248201527f424144204952454c4f50000000000000000000000000000000000000000000006044820152606401610311565b9392505050565b604080518082019091525f80825260208201528115611397576040805180820182525f808252602091820181905282518084019093528252600190820152610fbf565b6040805180820182525f8082526020918201819052825180840190935280835290820152610fbf565b919050565b5f8161ffff16602014806113dd57508161ffff166040145b6114295760405162461bcd60e51b815260206004820152601860248201527f57524f4e4720555345204f462067656e65726963556e4f7000000000000000006044820152606401610311565b61ffff83166114995761ffff82165b5f8163ffffffff1611801561146c5750611453600182612600565b63ffffffff166001901b8567ffffffffffffffff16165f145b156114835761147c600182612600565b9050611438565b6114918161ffff8516612600565b91505061134d565b5f1961ffff8416016114f1575f5b8261ffff168163ffffffff161080156114d35750600163ffffffff82161b851667ffffffffffffffff16155b156114ea576114e360018261261d565b90506114a7565b905061134d565b60011961ffff841601611557575f805b8361ffff168263ffffffff16101561154e57600163ffffffff83161b861667ffffffffffffffff161561153c5761153960018261261d565b90505b816115468161263a565b925050611501565b915061134d9050565b60405162461bcd60e51b815260206004820152600960248201527f4241442049556e4f7000000000000000000000000000000000000000000000006044820152606401610311565b5f6115ab60208361265c565b91506115b8826020612600565b63ffffffff168363ffffffff16901c8263ffffffff168463ffffffff16901b17905092915050565b5f6115ec60208361265c565b91506115f9826020612600565b63ffffffff168363ffffffff16901b8263ffffffff168463ffffffff16901c17905092915050565b5f808261ffff165f036116395750508282015f6117a0565b8261ffff166001036116505750508183035f6117a0565b8261ffff166002036116675750508282025f6117a0565b8261ffff166004036116bd578367ffffffffffffffff165f0361168f57505f905060016117a0565b8367ffffffffffffffff168567ffffffffffffffff16816116b2576116b26125c0565b045f915091506117a0565b8261ffff16600603611713578367ffffffffffffffff165f036116e557505f905060016117a0565b8367ffffffffffffffff168567ffffffffffffffff1681611708576117086125c0565b065f915091506117a0565b8261ffff1660070361172a5750508282165f6117a0565b8261ffff166008036117415750508282175f6117a0565b8261ffff166009036117585750508282185f6117a0565b60405162461bcd60e51b815260206004820152601660248201527f494e56414c49445f47454e455249435f42494e5f4f50000000000000000000006044820152606401610311565b935093915050565b60208101515f906001835160068111156117c4576117c4611d12565b146118115760405162461bcd60e51b815260206004820152600760248201527f4e4f545f493634000000000000000000000000000000000000000000000000006044820152606401610311565b680100000000000000008110610fbf5760405162461bcd60e51b815260206004820152600760248201527f4241445f493634000000000000000000000000000000000000000000000000006044820152606401610311565b5f61187560408361267e565b9150611882826040612698565b67ffffffffffffffff168367ffffffffffffffff16901c8267ffffffffffffffff168467ffffffffffffffff16901b17905092915050565b5f6118c660408361267e565b91506118d3826040612698565b67ffffffffffffffff168367ffffffffffffffff16901b8267ffffffffffffffff168467ffffffffffffffff16901c17905092915050565b604080518082019091525f80825260208201528151805161192e906001906125d4565b8151811061193e5761193e6126b9565b602002602001015190505f6001835f01515161195a91906125d4565b67ffffffffffffffff81111561197257611972611fda565b6040519080825280602002602001820160405280156119b657816020015b604080518082019091525f80825260208201528152602001906001900390816119905790505b5090505f5b8151811015611a055783518051829081106119d8576119d86126b9565b60200260200101518282815181106119f2576119f26126b9565b60209081029190910101526001016119bb565b5090915290565b8151515f90611a1c9060016126cd565b67ffffffffffffffff811115611a3457611a34611fda565b604051908082528060200260200182016040528015611a7857816020015b604080518082019091525f8082526020820152815260200190600190039081611a525790505b5090505f5b835151811015611ac8578351805182908110611a9b57611a9b6126b9565b6020026020010151828281518110611ab557611ab56126b9565b6020908102919091010152600101611a7d565b508181845f01515181518110611ae057611ae06126b9565b602090810291909101015290915250565b604080516101808101909152805f8152602001611b2460408051606080820183529181019182529081525f602082015290565b81526040805180820182525f80825260208083019190915283015201611b6060408051606080820183529181019182529081525f602082015290565b8152602001611b846040518060400160405280606081526020015f80191681525090565b81526040805180820182525f8082526020808301829052840191909152908201819052606082018190526080820181905260a0820181905260c0820181905260e09091015290565b611bd46126e0565b565b5f8083601f840112611be6575f80fd5b50813567ffffffffffffffff811115611bfd575f80fd5b602083019150836020828501011115611c14575f80fd5b9250929050565b5f805f805f808688036101e0811215611c32575f80fd5b6060811215611c3f575f80fd5b879650606088013567ffffffffffffffff80821115611c5c575f80fd5b818a0191506101c080838d031215611c72575f80fd5b8298506101007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8085011215611ca5575f80fd5b60808b01975060407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe8085011215611cda575f80fd5b6101808b0196508a0135925080831115611cf2575f80fd5b5050611d0089828a01611bd6565b979a9699509497509295939492505050565b634e487b7160e01b5f52602160045260245ffd5b60038110611d3657611d36611d12565b9052565b805160078110611d4c57611d4c611d12565b8252602090810151910152565b80516040808452905160208483018190528151606086018190525f9392820191849160808801905b80841015611da857611d94828651611d3a565b938201936001939093019290850190611d81565b5060208701516020890152809550505050505092915050565b8051604080845281518482018190525f926060916020918201918388019190865b82811015611e2b578451611df7858251611d3a565b80830151858901528781015163ffffffff90811688870152908701511660808501529381019360a090930192600101611de2565b505050602086015160208801528094505050505092915050565b5f610120808352611e598184018651611d26565b60208501516101c06101408181870152611e776102e0870184611d59565b92506040880151610160611e978189018380518252602090810151910152565b60608a015191507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee080898703016101a08a0152611ed48684611d59565b955060808b015192508089870301858a015250611ef18583611dc1565b60a08b015180516101e08b015260208101516102008b0152909550935060c08a015161022089015260e08a015163ffffffff81166102408a015293506101008a015163ffffffff81166102608a015293509489015163ffffffff811661028089015294918901516102a0880152508701516102c086015250915061134d9050602083018480518252602081015167ffffffffffffffff80825116602085015280602083015116604085015250604081015160608401525060408101516080830152606081015160a0830152608081015160c083015263ffffffff60a08201511660e08301525050565b634e487b7160e01b5f52604160045260245ffd5b6040805190810167ffffffffffffffff8111828210171561201157612011611fda565b60405290565b6040516020810167ffffffffffffffff8111828210171561201157612011611fda565b6040516080810167ffffffffffffffff8111828210171561201157612011611fda565b604051610180810167ffffffffffffffff8111828210171561201157612011611fda565b60405160c0810167ffffffffffffffff8111828210171561201157612011611fda565b6040516060810167ffffffffffffffff8111828210171561201157612011611fda565b604051601f8201601f1916810167ffffffffffffffff811182821017156120f0576120f0611fda565b604052919050565b8035600381106113c0575f80fd5b5f67ffffffffffffffff82111561211f5761211f611fda565b5060051b60200190565b5f60408284031215612139575f80fd5b612141611fee565b9050813560078110612151575f80fd5b808252506020820135602082015292915050565b5f6040808385031215612176575f80fd5b61217e611fee565b9150823567ffffffffffffffff80821115612197575f80fd5b818501915060208083880312156121ac575f80fd5b6121b4612017565b8335838111156121c2575f80fd5b80850194505087601f8501126121d6575f80fd5b833592506121eb6121e684612106565b6120c7565b83815260069390931b84018201928281019089851115612209575f80fd5b948301945b8486101561222f576122208a87612129565b8252948601949083019061220e565b8252508552948501359484019490945250909392505050565b5f60408284031215612258575f80fd5b612260611fee565b9050813581526020820135602082015292915050565b803563ffffffff811681146113c0575f80fd5b5f604080838503121561229a575f80fd5b6122a2611fee565b9150823567ffffffffffffffff8111156122ba575f80fd5b8301601f810185136122ca575f80fd5b803560206122da6121e683612106565b82815260a092830284018201928282019190898511156122f8575f80fd5b948301945b8486101561235f5780868b031215612313575f80fd5b61231b61203a565b6123258b88612129565b81528787013585820152606061233c818901612276565b8983015261234c60808901612276565b90820152835294850194918301916122fd565b50808752505080860135818601525050505092915050565b5f6101c08236031215612388575f80fd5b61239061205d565b612399836120f8565b8152602083013567ffffffffffffffff808211156123b5575f80fd5b6123c136838701612165565b60208401526123d33660408701612248565b604084015260808501359150808211156123eb575f80fd5b6123f736838701612165565b606084015260a085013591508082111561240f575f80fd5b5061241c36828601612289565b60808301525061242f3660c08501612248565b60a08201526101008084013560c083015261012061244e818601612276565b60e0840152610140612461818701612276565b838501526101609250612475838701612276565b91840191909152610180850135908301526101a090930135928101929092525090565b803567ffffffffffffffff811681146113c0575f80fd5b5f8183036101008112156124c1575f80fd5b6124c9612081565b833581526060601f19830112156124de575f80fd5b6124e66120a4565b91506124f460208501612498565b825261250260408501612498565b6020830152606084013560408301528160208201526080840135604082015260a0840135606082015260c0840135608082015261254160e08501612276565b60a0820152949350505050565b5f6020828403121561255e575f80fd5b813561ffff8116811461134d575f80fd5b634e487b7160e01b5f52601160045260245ffd5b61ffff81811683821601908082111561259e5761259e61256f565b5092915050565b61ffff82811682821603908082111561259e5761259e61256f565b634e487b7160e01b5f52601260045260245ffd5b81810381811115610fbf57610fbf61256f565b60ff8281168282160390811115610fbf57610fbf61256f565b63ffffffff82811682821603908082111561259e5761259e61256f565b63ffffffff81811683821601908082111561259e5761259e61256f565b5f63ffffffff8083168181036126525761265261256f565b6001019392505050565b5f63ffffffff80841680612672576126726125c0565b92169190910692915050565b5f67ffffffffffffffff80841680612672576126726125c0565b67ffffffffffffffff82811682821603908082111561259e5761259e61256f565b634e487b7160e01b5f52603260045260245ffd5b80820180821115610fbf57610fbf61256f565b634e487b7160e01b5f52605160045260245ffdfea264697066735822122045b8470ac22f6bb10633312da9f1b72450cbbc1cd4a0ce9d72f0c8fabf24062f64736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15`\x0EW_\x80\xFD[Pa'*\x80a\0\x1C_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\0)W_5`\xE0\x1C\x80c\xA9,\xB5\x01\x14a\0-W[_\x80\xFD[a\0@a\0;6`\x04a\x1C\x1BV[a\0WV[`@Qa\0N\x92\x91\x90a\x1EEV[`@Q\x80\x91\x03\x90\xF3[a\0_a\x1A\xF1V[`@\x80Q`\xC0\x81\x01\x82R_\x80\x82R\x82Q``\x80\x82\x01\x85R\x82\x82R` \x80\x83\x01\x84\x90R\x82\x86\x01\x84\x90R\x84\x01\x91\x90\x91R\x92\x82\x01\x81\x90R\x91\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x91\x90\x91Ra\0\xB1\x87a#wV[\x91Pa\0\xC26\x87\x90\x03\x87\x01\x87a$\xAFV[\x90P_a\0\xD2` \x87\x01\x87a%NV[\x90Pa\x1B\xCCa\xFF\xFF\x82\x16`E\x14\x80a\0\xEEWPa\xFF\xFF\x82\x16`P\x14[\x15a\0\xFCWPa\x038a\x03\x1AV[`Fa\xFF\xFF\x83\x16\x10\x80\x15\x90a\x01$WPa\x01\x18`\t`Fa%\x83V[a\xFF\xFF\x16\x82a\xFF\xFF\x16\x11\x15[\x15a\x012WPa\x04\xE2a\x03\x1AV[`ga\xFF\xFF\x83\x16\x10\x80\x15\x90a\x01ZWPa\x01N`\x02`ga%\x83V[a\xFF\xFF\x16\x82a\xFF\xFF\x16\x11\x15[\x15a\x01hWPa\x05\xC0a\x03\x1AV[`ja\xFF\xFF\x83\x16\x10\x80\x15\x90a\x01\x82WP`xa\xFF\xFF\x83\x16\x11\x15[\x15a\x01\x90WPa\x06Ia\x03\x1AV[`Qa\xFF\xFF\x83\x16\x10\x80\x15\x90a\x01\xB8WPa\x01\xAC`\t`Qa%\x83V[a\xFF\xFF\x16\x82a\xFF\xFF\x16\x11\x15[\x15a\x01\xC6WPa\x08ja\x03\x1AV[`ya\xFF\xFF\x83\x16\x10\x80\x15\x90a\x01\xEEWPa\x01\xE2`\x02`ya%\x83V[a\xFF\xFF\x16\x82a\xFF\xFF\x16\x11\x15[\x15a\x01\xFCWPa\x08\xCBa\x03\x1AV[`|a\xFF\xFF\x83\x16\x10\x80\x15\x90a\x02\x16WP`\x8Aa\xFF\xFF\x83\x16\x11\x15[\x15a\x02$WPa\tAa\x03\x1AV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFYa\xFF\xFF\x83\x16\x01a\x02XWPa\x0B8a\x03\x1AV[a\xFF\xFF\x82\x16`\xAC\x14\x80a\x02oWPa\xFF\xFF\x82\x16`\xAD\x14[\x15a\x02}WPa\x0B\x81a\x03\x1AV[`\xC0a\xFF\xFF\x83\x16\x10\x80\x15\x90a\x02\x97WP`\xC4a\xFF\xFF\x83\x16\x11\x15[\x15a\x02\xA5WPa\x0B\xFDa\x03\x1AV[`\xBCa\xFF\xFF\x83\x16\x10\x80\x15\x90a\x02\xBFWP`\xBFa\xFF\xFF\x83\x16\x11\x15[\x15a\x02\xCDWPa\x0E\x0Fa\x03\x1AV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0E`$\x82\x01R\x7FINVALID_OPCODE\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01[`@Q\x80\x91\x03\x90\xFD[a\x03+\x84\x84\x89\x89\x89\x86c\xFF\xFF\xFF\xFF\x16V[PP\x96P\x96\x94PPPPPV[_a\x03F\x86` \x01Qa\x0F\xA1V[\x90P`Ea\x03W` \x86\x01\x86a%NV[a\xFF\xFF\x16\x03a\x03\xC6W_\x81Q`\x06\x81\x11\x15a\x03tWa\x03ta\x1D\x12V[\x14a\x03\xC1W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FNOT_I32\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x03\x11V[a\x04\x88V[`Pa\x03\xD5` \x86\x01\x86a%NV[a\xFF\xFF\x16\x03a\x04@W`\x01\x81Q`\x06\x81\x11\x15a\x03\xF3Wa\x03\xF3a\x1D\x12V[\x14a\x03\xC1W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FNOT_I64\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x03\x11V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FBAD_EQZ\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x03\x11V[_\x81` \x01Q_\x03a\x04\x9CWP`\x01a\x04\x9FV[P_[`@\x80Q\x80\x82\x01\x82R_\x80\x82R` \x91\x82\x01\x81\x90R\x82Q\x80\x84\x01\x90\x93R\x82Rc\xFF\xFF\xFF\xFF\x83\x16\x90\x82\x01Ra\x04\xD9\x90[` \x89\x01Q\x90a\x0F\xC5V[PPPPPPPV[_a\x04\xF8a\x04\xF3\x87` \x01Qa\x0F\xA1V[a\x0F\xD5V[\x90P_a\x05\x0Ba\x04\xF3\x88` \x01Qa\x0F\xA1V[\x90P_`Fa\x05\x1D` \x88\x01\x88a%NV[a\x05'\x91\x90a%\xA5V[\x90P_\x80a\xFF\xFF\x83\x16`\x02\x14\x80a\x05BWPa\xFF\xFF\x83\x16`\x04\x14[\x80a\x05QWPa\xFF\xFF\x83\x16`\x06\x14[\x80a\x05`WPa\xFF\xFF\x83\x16`\x08\x14[\x15a\x05\x80Wa\x05n\x84a\x10\x91V[\x91Pa\x05y\x85a\x10\x91V[\x90Pa\x05\x8EV[PPc\xFF\xFF\xFF\xFF\x80\x83\x16\x90\x84\x16[_a\x05\x9A\x83\x83\x86a\x10\xBCV[\x90Pa\x05\xB3a\x05\xA8\x82a\x13TV[` \x8D\x01Q\x90a\x0F\xC5V[PPPPPPPPPPPV[_a\x05\xD1a\x04\xF3\x87` \x01Qa\x0F\xA1V[\x90P_`ga\x05\xE3` \x87\x01\x87a%NV[a\x05\xED\x91\x90a%\xA5V[\x90P_a\x06\x02\x83c\xFF\xFF\xFF\xFF\x16\x83` a\x13\xC5V[`@\x80Q\x80\x82\x01\x82R_\x80\x82R` \x91\x82\x01\x81\x90R\x82Q\x80\x84\x01\x90\x93R\x82Rc\xFF\xFF\xFF\xFF\x83\x16\x90\x82\x01R\x90\x91Pa\x06?\x90[` \x8A\x01Q\x90a\x0F\xC5V[PPPPPPPPV[_a\x06Za\x04\xF3\x87` \x01Qa\x0F\xA1V[\x90P_a\x06ma\x04\xF3\x88` \x01Qa\x0F\xA1V[\x90P_\x80`ja\x06\x80` \x89\x01\x89a%NV[a\x06\x8A\x91\x90a%\xA5V[\x90P\x80a\xFF\xFF\x16`\x03\x03a\x07!Wc\xFF\xFF\xFF\xFF\x84\x16\x15\x80a\x06\xDBWP\x82`\x03\x0B\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\0\0\0\x14\x80\x15a\x06\xDBWP\x83`\x03\x0B_\x19\x14[\x15a\x07\x04W\x88`\x02[\x90\x81`\x02\x81\x11\x15a\x06\xF7Wa\x06\xF7a\x1D\x12V[\x81RPPPPPPa\x08cV[\x83`\x03\x0B\x83`\x03\x0B\x81a\x07\x19Wa\x07\x19a%\xC0V[\x05\x91Pa\x08$V[\x80a\xFF\xFF\x16`\x05\x03a\x07_W\x83c\xFF\xFF\xFF\xFF\x16_\x03a\x07BW\x88`\x02a\x06\xE4V[\x83`\x03\x0B\x83`\x03\x0B\x81a\x07WWa\x07Wa%\xC0V[\x07\x91Pa\x08$V[\x80a\xFF\xFF\x16`\n\x03a\x07~Wc\xFF\xFF\xFF\xFF\x83\x16`\x1F\x85\x16\x1B\x91Pa\x08$V[\x80a\xFF\xFF\x16`\x0C\x03a\x07\x9DWc\xFF\xFF\xFF\xFF\x83\x16`\x1F\x85\x16\x1C\x91Pa\x08$V[\x80a\xFF\xFF\x16`\x0B\x03a\x07\xBAW`\x03\x83\x90\x0B`\x1F\x85\x16\x1D\x91Pa\x08$V[\x80a\xFF\xFF\x16`\r\x03a\x07\xD7Wa\x07\xD0\x83\x85a\x15\x9FV[\x91Pa\x08$V[\x80a\xFF\xFF\x16`\x0E\x03a\x07\xEDWa\x07\xD0\x83\x85a\x15\xE0V[_\x80a\x08\x06\x85c\xFF\xFF\xFF\xFF\x16\x87c\xFF\xFF\xFF\xFF\x16\x85a\x16!V[\x91P\x91P\x80\x15a\x08 WPP`\x02\x89RPa\x08c\x92PPPV[P\x91P[`@\x80Q\x80\x82\x01\x82R_\x80\x82R` \x91\x82\x01\x81\x90R\x82Q\x80\x84\x01\x90\x93R\x82Rc\xFF\xFF\xFF\xFF\x84\x16\x90\x82\x01Ra\x08^\x90[` \x8B\x01Q\x90a\x0F\xC5V[PPPP[PPPPPV[_a\x08\x80a\x08{\x87` \x01Qa\x0F\xA1V[a\x17\xA8V[\x90P_a\x08\x93a\x08{\x88` \x01Qa\x0F\xA1V[\x90P_`Qa\x08\xA5` \x88\x01\x88a%NV[a\x08\xAF\x91\x90a%\xA5V[\x90P_a\x08\xBD\x83\x85\x84a\x10\xBCV[\x90Pa\x08^a\x08S\x82a\x13TV[_a\x08\xDCa\x08{\x87` \x01Qa\x0F\xA1V[\x90P_`ya\x08\xEE` \x87\x01\x87a%NV[a\x08\xF8\x91\x90a%\xA5V[\x90P_a\t\x07\x83\x83`@a\x13\xC5V[`@\x80Q\x80\x82\x01\x82R_\x80\x82R` \x91\x82\x01R\x81Q\x80\x83\x01\x90\x92R`\x01\x82Rc\xFF\xFF\xFF\xFF\x92\x90\x92\x16\x91\x81\x01\x82\x90R\x90\x91Pa\x06?\x90a\x064V[_a\tRa\x08{\x87` \x01Qa\x0F\xA1V[\x90P_a\tea\x08{\x88` \x01Qa\x0F\xA1V[\x90P_\x80`|a\tx` \x89\x01\x89a%NV[a\t\x82\x91\x90a%\xA5V[\x90P\x80a\xFF\xFF\x16`\x03\x03a\n\x01Wg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x16\x15\x80a\t\xD7WP\x82`\x07\x0B\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\0\0\0\0\0\0\0\x14\x80\x15a\t\xD7WP\x83`\x07\x0B_\x19\x14[\x15a\t\xE4W\x88`\x02a\x06\xE4V[\x83`\x07\x0B\x83`\x07\x0B\x81a\t\xF9Wa\t\xF9a%\xC0V[\x05\x91Pa\x0B\x01V[\x80a\xFF\xFF\x16`\x05\x03a\nCW\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_\x03a\n&W\x88`\x02a\x06\xE4V[\x83`\x07\x0B\x83`\x07\x0B\x81a\n;Wa\n;a%\xC0V[\x07\x91Pa\x0B\x01V[\x80a\xFF\xFF\x16`\n\x03a\nfWg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16`?\x85\x16\x1B\x91Pa\x0B\x01V[\x80a\xFF\xFF\x16`\x0C\x03a\n\x89Wg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16`?\x85\x16\x1C\x91Pa\x0B\x01V[\x80a\xFF\xFF\x16`\x0B\x03a\n\xA6W`\x07\x83\x90\x0B`?\x85\x16\x1D\x91Pa\x0B\x01V[\x80a\xFF\xFF\x16`\r\x03a\n\xC3Wa\n\xBC\x83\x85a\x18iV[\x91Pa\x0B\x01V[\x80a\xFF\xFF\x16`\x0E\x03a\n\xD9Wa\n\xBC\x83\x85a\x18\xBAV[_a\n\xE5\x84\x86\x84a\x16!V[\x90\x93P\x90P\x80\x15a\n\xFFWPP`\x02\x88RPa\x08c\x91PPV[P[`@\x80Q\x80\x82\x01\x82R_\x80\x82R` \x91\x82\x01R\x81Q\x80\x83\x01\x90\x92R`\x01\x82Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x16\x90\x82\x01Ra\x08^\x90a\x08SV[_a\x0BIa\x08{\x87` \x01Qa\x0F\xA1V[`@\x80Q\x80\x82\x01\x82R_\x80\x82R` \x91\x82\x01\x81\x90R\x82Q\x80\x84\x01\x90\x93R\x82Rc\xFF\xFF\xFF\xFF\x83\x16\x90\x82\x01R\x90\x91P\x81\x90a\x04\xD9\x90a\x04\xCEV[_a\x0B\x92a\x04\xF3\x87` \x01Qa\x0F\xA1V[\x90P_`\xACa\x0B\xA4` \x87\x01\x87a%NV[a\xFF\xFF\x16\x03a\x0B\xBDWa\x0B\xB6\x82a\x10\x91V[\x90Pa\x0B\xC6V[Pc\xFF\xFF\xFF\xFF\x81\x16[`@\x80Q\x80\x82\x01\x82R_\x80\x82R` \x91\x82\x01R\x81Q\x80\x83\x01\x90\x92R`\x01\x82Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16\x90\x82\x01Ra\x04\xD9\x90a\x04\xCEV[_\x80`\xC0a\x0C\x0E` \x87\x01\x87a%NV[a\xFF\xFF\x16\x03a\x0C\"WP_\x90P`\x08a\x0C\xF9V[`\xC1a\x0C1` \x87\x01\x87a%NV[a\xFF\xFF\x16\x03a\x0CEWP_\x90P`\x10a\x0C\xF9V[`\xC2a\x0CT` \x87\x01\x87a%NV[a\xFF\xFF\x16\x03a\x0CiWP`\x01\x90P`\x08a\x0C\xF9V[`\xC3a\x0Cx` \x87\x01\x87a%NV[a\xFF\xFF\x16\x03a\x0C\x8DWP`\x01\x90P`\x10a\x0C\xF9V[`\xC4a\x0C\x9C` \x87\x01\x87a%NV[a\xFF\xFF\x16\x03a\x0C\xB1WP`\x01\x90P` a\x0C\xF9V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x18`$\x82\x01R\x7FINVALID_EXTEND_SAME_TYPE\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x03\x11V[_\x80\x83`\x06\x81\x11\x15a\r\rWa\r\ra\x1D\x12V[\x03a\r\x1DWPc\xFF\xFF\xFF\xFFa\r(V[Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF[_a\r6\x89` \x01Qa\x0F\xA1V[\x90P\x83`\x06\x81\x11\x15a\rJWa\rJa\x1D\x12V[\x81Q`\x06\x81\x11\x15a\r]Wa\r]a\x1D\x12V[\x14a\r\xAAW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x19`$\x82\x01R\x7FBAD_EXTEND_SAME_TYPE_TYPE\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x03\x11V[_a\r\xBC`\x01`\xFF\x86\x16\x81\x90\x1Ba%\xD4V[` \x83\x01\x80Q\x82\x16\x90R\x90Pa\r\xD3`\x01\x85a%\xE7V[`\xFF\x16`\x01\x90\x1B\x82` \x01Q\x16_\x14a\r\xF4W` \x82\x01\x80Q\x82\x19\x85\x16\x17\x90R[` \x8A\x01Qa\x0E\x03\x90\x83a\x0F\xC5V[PPPPPPPPPPV[_\x80`\xBCa\x0E ` \x87\x01\x87a%NV[a\xFF\xFF\x16\x03a\x0E4WP_\x90P`\x02a\x0E\xE7V[`\xBDa\x0EC` \x87\x01\x87a%NV[a\xFF\xFF\x16\x03a\x0EXWP`\x01\x90P`\x03a\x0E\xE7V[`\xBEa\x0Eg` \x87\x01\x87a%NV[a\xFF\xFF\x16\x03a\x0E{WP`\x02\x90P_a\x0E\xE7V[`\xBFa\x0E\x8A` \x87\x01\x87a%NV[a\xFF\xFF\x16\x03a\x0E\x9FWP`\x03\x90P`\x01a\x0E\xE7V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x13`$\x82\x01R\x7FINVALID_REINTERPRET\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x03\x11V[_a\x0E\xF5\x88` \x01Qa\x0F\xA1V[\x90P\x81`\x06\x81\x11\x15a\x0F\tWa\x0F\ta\x1D\x12V[\x81Q`\x06\x81\x11\x15a\x0F\x1CWa\x0F\x1Ca\x1D\x12V[\x14a\x0FiW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x18`$\x82\x01R\x7FINVALID_REINTERPRET_TYPE\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x03\x11V[\x80\x83`\x06\x81\x11\x15a\x0F|Wa\x0F|a\x1D\x12V[\x90\x81`\x06\x81\x11\x15a\x0F\x8FWa\x0F\x8Fa\x1D\x12V[\x90RP` \x88\x01Qa\x06?\x90\x82a\x0F\xC5V[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x81Qa\x0F\xBF\x90a\x19\x0BV[\x92\x91PPV[\x81Qa\x0F\xD1\x90\x82a\x1A\x0CV[PPV[` \x81\x01Q_\x90\x81\x83Q`\x06\x81\x11\x15a\x0F\xF0Wa\x0F\xF0a\x1D\x12V[\x14a\x10=W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FNOT_I32\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x03\x11V[d\x01\0\0\0\0\x81\x10a\x0F\xBFW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FBAD_I32\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x03\x11V[_c\x80\0\0\0\x82\x16\x15a\x10\xB2WPc\xFF\xFF\xFF\xFF\x16g\xFF\xFF\xFF\xFF\0\0\0\0\x17\x90V[Pc\xFF\xFF\xFF\xFF\x16\x90V[_a\xFF\xFF\x82\x16a\x10\xE4W\x82g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14\x90Pa\x13MV[_\x19a\xFF\xFF\x83\x16\x01a\x11\x0FW\x82g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14\x15\x90Pa\x13MV[`\x01\x19a\xFF\xFF\x83\x16\x01a\x11,W\x82`\x07\x0B\x84`\x07\x0B\x12\x90Pa\x13MV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFDa\xFF\xFF\x83\x16\x01a\x11uW\x82g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x10\x90Pa\x13MV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFCa\xFF\xFF\x83\x16\x01a\x11\xB0W\x82`\x07\x0B\x84`\x07\x0B\x13\x90Pa\x13MV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFBa\xFF\xFF\x83\x16\x01a\x11\xF9W\x82g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x11\x90Pa\x13MV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFAa\xFF\xFF\x83\x16\x01a\x125W\x82`\x07\x0B\x84`\x07\x0B\x13\x15\x90Pa\x13MV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xF9a\xFF\xFF\x83\x16\x01a\x12\x7FW\x82g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x11\x15\x90Pa\x13MV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xF8a\xFF\xFF\x83\x16\x01a\x12\xBBW\x82`\x07\x0B\x84`\x07\x0B\x12\x15\x90Pa\x13MV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xF7a\xFF\xFF\x83\x16\x01a\x13\x05W\x82g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x10\x15\x90Pa\x13MV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\n`$\x82\x01R\x7FBAD IRELOP\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x03\x11V[\x93\x92PPPV[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x81\x15a\x13\x97W`@\x80Q\x80\x82\x01\x82R_\x80\x82R` \x91\x82\x01\x81\x90R\x82Q\x80\x84\x01\x90\x93R\x82R`\x01\x90\x82\x01Ra\x0F\xBFV[`@\x80Q\x80\x82\x01\x82R_\x80\x82R` \x91\x82\x01\x81\x90R\x82Q\x80\x84\x01\x90\x93R\x80\x83R\x90\x82\x01Ra\x0F\xBFV[\x91\x90PV[_\x81a\xFF\xFF\x16` \x14\x80a\x13\xDDWP\x81a\xFF\xFF\x16`@\x14[a\x14)W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x18`$\x82\x01R\x7FWRONG USE OF genericUnOp\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x03\x11V[a\xFF\xFF\x83\x16a\x14\x99Wa\xFF\xFF\x82\x16[_\x81c\xFF\xFF\xFF\xFF\x16\x11\x80\x15a\x14lWPa\x14S`\x01\x82a&\0V[c\xFF\xFF\xFF\xFF\x16`\x01\x90\x1B\x85g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x16_\x14[\x15a\x14\x83Wa\x14|`\x01\x82a&\0V[\x90Pa\x148V[a\x14\x91\x81a\xFF\xFF\x85\x16a&\0V[\x91PPa\x13MV[_\x19a\xFF\xFF\x84\x16\x01a\x14\xF1W_[\x82a\xFF\xFF\x16\x81c\xFF\xFF\xFF\xFF\x16\x10\x80\x15a\x14\xD3WP`\x01c\xFF\xFF\xFF\xFF\x82\x16\x1B\x85\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x15[\x15a\x14\xEAWa\x14\xE3`\x01\x82a&\x1DV[\x90Pa\x14\xA7V[\x90Pa\x13MV[`\x01\x19a\xFF\xFF\x84\x16\x01a\x15WW_\x80[\x83a\xFF\xFF\x16\x82c\xFF\xFF\xFF\xFF\x16\x10\x15a\x15NW`\x01c\xFF\xFF\xFF\xFF\x83\x16\x1B\x86\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x15a\x15<Wa\x159`\x01\x82a&\x1DV[\x90P[\x81a\x15F\x81a&:V[\x92PPa\x15\x01V[\x91Pa\x13M\x90PV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\t`$\x82\x01R\x7FBAD IUnOp\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x03\x11V[_a\x15\xAB` \x83a&\\V[\x91Pa\x15\xB8\x82` a&\0V[c\xFF\xFF\xFF\xFF\x16\x83c\xFF\xFF\xFF\xFF\x16\x90\x1C\x82c\xFF\xFF\xFF\xFF\x16\x84c\xFF\xFF\xFF\xFF\x16\x90\x1B\x17\x90P\x92\x91PPV[_a\x15\xEC` \x83a&\\V[\x91Pa\x15\xF9\x82` a&\0V[c\xFF\xFF\xFF\xFF\x16\x83c\xFF\xFF\xFF\xFF\x16\x90\x1B\x82c\xFF\xFF\xFF\xFF\x16\x84c\xFF\xFF\xFF\xFF\x16\x90\x1C\x17\x90P\x92\x91PPV[_\x80\x82a\xFF\xFF\x16_\x03a\x169WPP\x82\x82\x01_a\x17\xA0V[\x82a\xFF\xFF\x16`\x01\x03a\x16PWPP\x81\x83\x03_a\x17\xA0V[\x82a\xFF\xFF\x16`\x02\x03a\x16gWPP\x82\x82\x02_a\x17\xA0V[\x82a\xFF\xFF\x16`\x04\x03a\x16\xBDW\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_\x03a\x16\x8FWP_\x90P`\x01a\x17\xA0V[\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x85g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81a\x16\xB2Wa\x16\xB2a%\xC0V[\x04_\x91P\x91Pa\x17\xA0V[\x82a\xFF\xFF\x16`\x06\x03a\x17\x13W\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_\x03a\x16\xE5WP_\x90P`\x01a\x17\xA0V[\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x85g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81a\x17\x08Wa\x17\x08a%\xC0V[\x06_\x91P\x91Pa\x17\xA0V[\x82a\xFF\xFF\x16`\x07\x03a\x17*WPP\x82\x82\x16_a\x17\xA0V[\x82a\xFF\xFF\x16`\x08\x03a\x17AWPP\x82\x82\x17_a\x17\xA0V[\x82a\xFF\xFF\x16`\t\x03a\x17XWPP\x82\x82\x18_a\x17\xA0V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x16`$\x82\x01R\x7FINVALID_GENERIC_BIN_OP\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x03\x11V[\x93P\x93\x91PPV[` \x81\x01Q_\x90`\x01\x83Q`\x06\x81\x11\x15a\x17\xC4Wa\x17\xC4a\x1D\x12V[\x14a\x18\x11W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FNOT_I64\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x03\x11V[h\x01\0\0\0\0\0\0\0\0\x81\x10a\x0F\xBFW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FBAD_I64\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x03\x11V[_a\x18u`@\x83a&~V[\x91Pa\x18\x82\x82`@a&\x98V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x1C\x82g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x1B\x17\x90P\x92\x91PPV[_a\x18\xC6`@\x83a&~V[\x91Pa\x18\xD3\x82`@a&\x98V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x1B\x82g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x1C\x17\x90P\x92\x91PPV[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x81Q\x80Qa\x19.\x90`\x01\x90a%\xD4V[\x81Q\x81\x10a\x19>Wa\x19>a&\xB9V[` \x02` \x01\x01Q\x90P_`\x01\x83_\x01QQa\x19Z\x91\x90a%\xD4V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x19rWa\x19ra\x1F\xDAV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x19\xB6W\x81` \x01[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x19\x90W\x90P[P\x90P_[\x81Q\x81\x10\x15a\x1A\x05W\x83Q\x80Q\x82\x90\x81\x10a\x19\xD8Wa\x19\xD8a&\xB9V[` \x02` \x01\x01Q\x82\x82\x81Q\x81\x10a\x19\xF2Wa\x19\xF2a&\xB9V[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a\x19\xBBV[P\x90\x91R\x90V[\x81QQ_\x90a\x1A\x1C\x90`\x01a&\xCDV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1A4Wa\x1A4a\x1F\xDAV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x1AxW\x81` \x01[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x1ARW\x90P[P\x90P_[\x83QQ\x81\x10\x15a\x1A\xC8W\x83Q\x80Q\x82\x90\x81\x10a\x1A\x9BWa\x1A\x9Ba&\xB9V[` \x02` \x01\x01Q\x82\x82\x81Q\x81\x10a\x1A\xB5Wa\x1A\xB5a&\xB9V[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a\x1A}V[P\x81\x81\x84_\x01QQ\x81Q\x81\x10a\x1A\xE0Wa\x1A\xE0a&\xB9V[` \x90\x81\x02\x91\x90\x91\x01\x01R\x90\x91RPV[`@\x80Qa\x01\x80\x81\x01\x90\x91R\x80_\x81R` \x01a\x1B$`@\x80Q``\x80\x82\x01\x83R\x91\x81\x01\x91\x82R\x90\x81R_` \x82\x01R\x90V[\x81R`@\x80Q\x80\x82\x01\x82R_\x80\x82R` \x80\x83\x01\x91\x90\x91R\x83\x01R\x01a\x1B``@\x80Q``\x80\x82\x01\x83R\x91\x81\x01\x91\x82R\x90\x81R_` \x82\x01R\x90V[\x81R` \x01a\x1B\x84`@Q\x80`@\x01`@R\x80``\x81R` \x01_\x80\x19\x16\x81RP\x90V[\x81R`@\x80Q\x80\x82\x01\x82R_\x80\x82R` \x80\x83\x01\x82\x90R\x84\x01\x91\x90\x91R\x90\x82\x01\x81\x90R``\x82\x01\x81\x90R`\x80\x82\x01\x81\x90R`\xA0\x82\x01\x81\x90R`\xC0\x82\x01\x81\x90R`\xE0\x90\x91\x01R\x90V[a\x1B\xD4a&\xE0V[V[_\x80\x83`\x1F\x84\x01\x12a\x1B\xE6W_\x80\xFD[P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1B\xFDW_\x80\xFD[` \x83\x01\x91P\x83` \x82\x85\x01\x01\x11\x15a\x1C\x14W_\x80\xFD[\x92P\x92\x90PV[_\x80_\x80_\x80\x86\x88\x03a\x01\xE0\x81\x12\x15a\x1C2W_\x80\xFD[``\x81\x12\x15a\x1C?W_\x80\xFD[\x87\x96P``\x88\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x1C\\W_\x80\xFD[\x81\x8A\x01\x91Pa\x01\xC0\x80\x83\x8D\x03\x12\x15a\x1CrW_\x80\xFD[\x82\x98Pa\x01\0\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x85\x01\x12\x15a\x1C\xA5W_\x80\xFD[`\x80\x8B\x01\x97P`@\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFE\x80\x85\x01\x12\x15a\x1C\xDAW_\x80\xFD[a\x01\x80\x8B\x01\x96P\x8A\x015\x92P\x80\x83\x11\x15a\x1C\xF2W_\x80\xFD[PPa\x1D\0\x89\x82\x8A\x01a\x1B\xD6V[\x97\x9A\x96\x99P\x94\x97P\x92\x95\x93\x94\x92PPPV[cNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[`\x03\x81\x10a\x1D6Wa\x1D6a\x1D\x12V[\x90RV[\x80Q`\x07\x81\x10a\x1DLWa\x1DLa\x1D\x12V[\x82R` \x90\x81\x01Q\x91\x01RV[\x80Q`@\x80\x84R\x90Q` \x84\x83\x01\x81\x90R\x81Q``\x86\x01\x81\x90R_\x93\x92\x82\x01\x91\x84\x91`\x80\x88\x01\x90[\x80\x84\x10\x15a\x1D\xA8Wa\x1D\x94\x82\x86Qa\x1D:V[\x93\x82\x01\x93`\x01\x93\x90\x93\x01\x92\x90\x85\x01\x90a\x1D\x81V[P` \x87\x01Q` \x89\x01R\x80\x95PPPPPP\x92\x91PPV[\x80Q`@\x80\x84R\x81Q\x84\x82\x01\x81\x90R_\x92``\x91` \x91\x82\x01\x91\x83\x88\x01\x91\x90\x86[\x82\x81\x10\x15a\x1E+W\x84Qa\x1D\xF7\x85\x82Qa\x1D:V[\x80\x83\x01Q\x85\x89\x01R\x87\x81\x01Qc\xFF\xFF\xFF\xFF\x90\x81\x16\x88\x87\x01R\x90\x87\x01Q\x16`\x80\x85\x01R\x93\x81\x01\x93`\xA0\x90\x93\x01\x92`\x01\x01a\x1D\xE2V[PPP` \x86\x01Q` \x88\x01R\x80\x94PPPPP\x92\x91PPV[_a\x01 \x80\x83Ra\x1EY\x81\x84\x01\x86Qa\x1D&V[` \x85\x01Qa\x01\xC0a\x01@\x81\x81\x87\x01Ra\x1Ewa\x02\xE0\x87\x01\x84a\x1DYV[\x92P`@\x88\x01Qa\x01`a\x1E\x97\x81\x89\x01\x83\x80Q\x82R` \x90\x81\x01Q\x91\x01RV[``\x8A\x01Q\x91P\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFE\xE0\x80\x89\x87\x03\x01a\x01\xA0\x8A\x01Ra\x1E\xD4\x86\x84a\x1DYV[\x95P`\x80\x8B\x01Q\x92P\x80\x89\x87\x03\x01\x85\x8A\x01RPa\x1E\xF1\x85\x83a\x1D\xC1V[`\xA0\x8B\x01Q\x80Qa\x01\xE0\x8B\x01R` \x81\x01Qa\x02\0\x8B\x01R\x90\x95P\x93P`\xC0\x8A\x01Qa\x02 \x89\x01R`\xE0\x8A\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x02@\x8A\x01R\x93Pa\x01\0\x8A\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x02`\x8A\x01R\x93P\x94\x89\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x02\x80\x89\x01R\x94\x91\x89\x01Qa\x02\xA0\x88\x01RP\x87\x01Qa\x02\xC0\x86\x01RP\x91Pa\x13M\x90P` \x83\x01\x84\x80Q\x82R` \x81\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82Q\x16` \x85\x01R\x80` \x83\x01Q\x16`@\x85\x01RP`@\x81\x01Q``\x84\x01RP`@\x81\x01Q`\x80\x83\x01R``\x81\x01Q`\xA0\x83\x01R`\x80\x81\x01Q`\xC0\x83\x01Rc\xFF\xFF\xFF\xFF`\xA0\x82\x01Q\x16`\xE0\x83\x01RPPV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@\x80Q\x90\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a \x11Wa \x11a\x1F\xDAV[`@R\x90V[`@Q` \x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a \x11Wa \x11a\x1F\xDAV[`@Q`\x80\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a \x11Wa \x11a\x1F\xDAV[`@Qa\x01\x80\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a \x11Wa \x11a\x1F\xDAV[`@Q`\xC0\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a \x11Wa \x11a\x1F\xDAV[`@Q``\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a \x11Wa \x11a\x1F\xDAV[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a \xF0Wa \xF0a\x1F\xDAV[`@R\x91\x90PV[\x805`\x03\x81\x10a\x13\xC0W_\x80\xFD[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a!\x1FWa!\x1Fa\x1F\xDAV[P`\x05\x1B` \x01\x90V[_`@\x82\x84\x03\x12\x15a!9W_\x80\xFD[a!Aa\x1F\xEEV[\x90P\x815`\x07\x81\x10a!QW_\x80\xFD[\x80\x82RP` \x82\x015` \x82\x01R\x92\x91PPV[_`@\x80\x83\x85\x03\x12\x15a!vW_\x80\xFD[a!~a\x1F\xEEV[\x91P\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a!\x97W_\x80\xFD[\x81\x85\x01\x91P` \x80\x83\x88\x03\x12\x15a!\xACW_\x80\xFD[a!\xB4a \x17V[\x835\x83\x81\x11\x15a!\xC2W_\x80\xFD[\x80\x85\x01\x94PP\x87`\x1F\x85\x01\x12a!\xD6W_\x80\xFD[\x835\x92Pa!\xEBa!\xE6\x84a!\x06V[a \xC7V[\x83\x81R`\x06\x93\x90\x93\x1B\x84\x01\x82\x01\x92\x82\x81\x01\x90\x89\x85\x11\x15a\"\tW_\x80\xFD[\x94\x83\x01\x94[\x84\x86\x10\x15a\"/Wa\" \x8A\x87a!)V[\x82R\x94\x86\x01\x94\x90\x83\x01\x90a\"\x0EV[\x82RP\x85R\x94\x85\x015\x94\x84\x01\x94\x90\x94RP\x90\x93\x92PPPV[_`@\x82\x84\x03\x12\x15a\"XW_\x80\xFD[a\"`a\x1F\xEEV[\x90P\x815\x81R` \x82\x015` \x82\x01R\x92\x91PPV[\x805c\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x13\xC0W_\x80\xFD[_`@\x80\x83\x85\x03\x12\x15a\"\x9AW_\x80\xFD[a\"\xA2a\x1F\xEEV[\x91P\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\"\xBAW_\x80\xFD[\x83\x01`\x1F\x81\x01\x85\x13a\"\xCAW_\x80\xFD[\x805` a\"\xDAa!\xE6\x83a!\x06V[\x82\x81R`\xA0\x92\x83\x02\x84\x01\x82\x01\x92\x82\x82\x01\x91\x90\x89\x85\x11\x15a\"\xF8W_\x80\xFD[\x94\x83\x01\x94[\x84\x86\x10\x15a#_W\x80\x86\x8B\x03\x12\x15a#\x13W_\x80\xFD[a#\x1Ba :V[a#%\x8B\x88a!)V[\x81R\x87\x87\x015\x85\x82\x01R``a#<\x81\x89\x01a\"vV[\x89\x83\x01Ra#L`\x80\x89\x01a\"vV[\x90\x82\x01R\x83R\x94\x85\x01\x94\x91\x83\x01\x91a\"\xFDV[P\x80\x87RPP\x80\x86\x015\x81\x86\x01RPPPP\x92\x91PPV[_a\x01\xC0\x826\x03\x12\x15a#\x88W_\x80\xFD[a#\x90a ]V[a#\x99\x83a \xF8V[\x81R` \x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a#\xB5W_\x80\xFD[a#\xC16\x83\x87\x01a!eV[` \x84\x01Ra#\xD36`@\x87\x01a\"HV[`@\x84\x01R`\x80\x85\x015\x91P\x80\x82\x11\x15a#\xEBW_\x80\xFD[a#\xF76\x83\x87\x01a!eV[``\x84\x01R`\xA0\x85\x015\x91P\x80\x82\x11\x15a$\x0FW_\x80\xFD[Pa$\x1C6\x82\x86\x01a\"\x89V[`\x80\x83\x01RPa$/6`\xC0\x85\x01a\"HV[`\xA0\x82\x01Ra\x01\0\x80\x84\x015`\xC0\x83\x01Ra\x01 a$N\x81\x86\x01a\"vV[`\xE0\x84\x01Ra\x01@a$a\x81\x87\x01a\"vV[\x83\x85\x01Ra\x01`\x92Pa$u\x83\x87\x01a\"vV[\x91\x84\x01\x91\x90\x91Ra\x01\x80\x85\x015\x90\x83\x01Ra\x01\xA0\x90\x93\x015\x92\x81\x01\x92\x90\x92RP\x90V[\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x13\xC0W_\x80\xFD[_\x81\x83\x03a\x01\0\x81\x12\x15a$\xC1W_\x80\xFD[a$\xC9a \x81V[\x835\x81R```\x1F\x19\x83\x01\x12\x15a$\xDEW_\x80\xFD[a$\xE6a \xA4V[\x91Pa$\xF4` \x85\x01a$\x98V[\x82Ra%\x02`@\x85\x01a$\x98V[` \x83\x01R``\x84\x015`@\x83\x01R\x81` \x82\x01R`\x80\x84\x015`@\x82\x01R`\xA0\x84\x015``\x82\x01R`\xC0\x84\x015`\x80\x82\x01Ra%A`\xE0\x85\x01a\"vV[`\xA0\x82\x01R\x94\x93PPPPV[_` \x82\x84\x03\x12\x15a%^W_\x80\xFD[\x815a\xFF\xFF\x81\x16\x81\x14a\x13MW_\x80\xFD[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\xFF\xFF\x81\x81\x16\x83\x82\x16\x01\x90\x80\x82\x11\x15a%\x9EWa%\x9Ea%oV[P\x92\x91PPV[a\xFF\xFF\x82\x81\x16\x82\x82\x16\x03\x90\x80\x82\x11\x15a%\x9EWa%\x9Ea%oV[cNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[\x81\x81\x03\x81\x81\x11\x15a\x0F\xBFWa\x0F\xBFa%oV[`\xFF\x82\x81\x16\x82\x82\x16\x03\x90\x81\x11\x15a\x0F\xBFWa\x0F\xBFa%oV[c\xFF\xFF\xFF\xFF\x82\x81\x16\x82\x82\x16\x03\x90\x80\x82\x11\x15a%\x9EWa%\x9Ea%oV[c\xFF\xFF\xFF\xFF\x81\x81\x16\x83\x82\x16\x01\x90\x80\x82\x11\x15a%\x9EWa%\x9Ea%oV[_c\xFF\xFF\xFF\xFF\x80\x83\x16\x81\x81\x03a&RWa&Ra%oV[`\x01\x01\x93\x92PPPV[_c\xFF\xFF\xFF\xFF\x80\x84\x16\x80a&rWa&ra%\xC0V[\x92\x16\x91\x90\x91\x06\x92\x91PPV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x84\x16\x80a&rWa&ra%\xC0V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x81\x16\x82\x82\x16\x03\x90\x80\x82\x11\x15a%\x9EWa%\x9Ea%oV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[\x80\x82\x01\x80\x82\x11\x15a\x0F\xBFWa\x0F\xBFa%oV[cNH{q`\xE0\x1B_R`Q`\x04R`$_\xFD\xFE\xA2dipfsX\"\x12 E\xB8G\n\xC2/k\xB1\x0631-\xA9\xF1\xB7$P\xCB\xBC\x1C\xD4\xA0\xCE\x9Dr\xF0\xC8\xFA\xBF$\x06/dsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f80fd5b5060043610610029575f3560e01c8063a92cb5011461002d575b5f80fd5b61004061003b366004611c1b565b610057565b60405161004e929190611e45565b60405180910390f35b61005f611af1565b6040805160c0810182525f80825282516060808201855282825260208083018490528286018490528401919091529282018190529181018290526080810182905260a08101919091526100b187612377565b91506100c2368790038701876124af565b90505f6100d2602087018761254e565b9050611bcc61ffff8216604514806100ee575061ffff82166050145b156100fc575061033861031a565b604661ffff831610801590610124575061011860096046612583565b61ffff168261ffff1611155b1561013257506104e261031a565b606761ffff83161080159061015a575061014e60026067612583565b61ffff168261ffff1611155b1561016857506105c061031a565b606a61ffff8316108015906101825750607861ffff831611155b15610190575061064961031a565b605161ffff8316108015906101b857506101ac60096051612583565b61ffff168261ffff1611155b156101c6575061086a61031a565b607961ffff8316108015906101ee57506101e260026079612583565b61ffff168261ffff1611155b156101fc57506108cb61031a565b607c61ffff8316108015906102165750608a61ffff831611155b15610224575061094161031a565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5961ffff8316016102585750610b3861031a565b61ffff821660ac148061026f575061ffff821660ad145b1561027d5750610b8161031a565b60c061ffff831610801590610297575060c461ffff831611155b156102a55750610bfd61031a565b60bc61ffff8316108015906102bf575060bf61ffff831611155b156102cd5750610e0f61031a565b60405162461bcd60e51b815260206004820152600e60248201527f494e56414c49445f4f50434f444500000000000000000000000000000000000060448201526064015b60405180910390fd5b61032b84848989898663ffffffff16565b5050965096945050505050565b5f6103468660200151610fa1565b90506045610357602086018661254e565b61ffff16036103c6575f8151600681111561037457610374611d12565b146103c15760405162461bcd60e51b815260206004820152600760248201527f4e4f545f493332000000000000000000000000000000000000000000000000006044820152606401610311565b610488565b60506103d5602086018661254e565b61ffff1603610440576001815160068111156103f3576103f3611d12565b146103c15760405162461bcd60e51b815260206004820152600760248201527f4e4f545f493634000000000000000000000000000000000000000000000000006044820152606401610311565b60405162461bcd60e51b815260206004820152600760248201527f4241445f45515a000000000000000000000000000000000000000000000000006044820152606401610311565b5f81602001515f0361049c5750600161049f565b505f5b6040805180820182525f80825260209182018190528251808401909352825263ffffffff8316908201526104d9905b602089015190610fc5565b50505050505050565b5f6104f86104f38760200151610fa1565b610fd5565b90505f61050b6104f38860200151610fa1565b90505f604661051d602088018861254e565b61052791906125a5565b90505f8061ffff831660021480610542575061ffff83166004145b80610551575061ffff83166006145b80610560575061ffff83166008145b156105805761056e84611091565b915061057985611091565b905061058e565b505063ffffffff8083169084165b5f61059a8383866110bc565b90506105b36105a882611354565b60208d015190610fc5565b5050505050505050505050565b5f6105d16104f38760200151610fa1565b90505f60676105e3602087018761254e565b6105ed91906125a5565b90505f6106028363ffffffff168360206113c5565b6040805180820182525f80825260209182018190528251808401909352825263ffffffff83169082015290915061063f905b60208a015190610fc5565b5050505050505050565b5f61065a6104f38760200151610fa1565b90505f61066d6104f38860200151610fa1565b90505f80606a610680602089018961254e565b61068a91906125a5565b90508061ffff166003036107215763ffffffff841615806106db57508260030b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000001480156106db57508360030b5f19145b15610704578860025b908160028111156106f7576106f7611d12565b8152505050505050610863565b8360030b8360030b81610719576107196125c0565b059150610824565b8061ffff1660050361075f578363ffffffff165f03610742578860026106e4565b8360030b8360030b81610757576107576125c0565b079150610824565b8061ffff16600a0361077e5763ffffffff8316601f85161b9150610824565b8061ffff16600c0361079d5763ffffffff8316601f85161c9150610824565b8061ffff16600b036107ba57600383900b601f85161d9150610824565b8061ffff16600d036107d7576107d0838561159f565b9150610824565b8061ffff16600e036107ed576107d083856115e0565b5f806108068563ffffffff168763ffffffff1685611621565b915091508015610820575050600289525061086392505050565b5091505b6040805180820182525f80825260209182018190528251808401909352825263ffffffff84169082015261085e905b60208b015190610fc5565b505050505b5050505050565b5f61088061087b8760200151610fa1565b6117a8565b90505f61089361087b8860200151610fa1565b90505f60516108a5602088018861254e565b6108af91906125a5565b90505f6108bd8385846110bc565b905061085e61085382611354565b5f6108dc61087b8760200151610fa1565b90505f60796108ee602087018761254e565b6108f891906125a5565b90505f610907838360406113c5565b6040805180820182525f80825260209182015281518083019092526001825263ffffffff9290921691810182905290915061063f90610634565b5f61095261087b8760200151610fa1565b90505f61096561087b8860200151610fa1565b90505f80607c610978602089018961254e565b61098291906125a5565b90508061ffff16600303610a015767ffffffffffffffff841615806109d757508260070b7fffffffffffffffffffffffffffffffffffffffffffffffff80000000000000001480156109d757508360070b5f19145b156109e4578860026106e4565b8360070b8360070b816109f9576109f96125c0565b059150610b01565b8061ffff16600503610a43578367ffffffffffffffff165f03610a26578860026106e4565b8360070b8360070b81610a3b57610a3b6125c0565b079150610b01565b8061ffff16600a03610a665767ffffffffffffffff8316603f85161b9150610b01565b8061ffff16600c03610a895767ffffffffffffffff8316603f85161c9150610b01565b8061ffff16600b03610aa657600783900b603f85161d9150610b01565b8061ffff16600d03610ac357610abc8385611869565b9150610b01565b8061ffff16600e03610ad957610abc83856118ba565b5f610ae5848684611621565b90935090508015610aff5750506002885250610863915050565b505b6040805180820182525f80825260209182015281518083019092526001825267ffffffffffffffff84169082015261085e90610853565b5f610b4961087b8760200151610fa1565b6040805180820182525f80825260209182018190528251808401909352825263ffffffff83169082015290915081906104d9906104ce565b5f610b926104f38760200151610fa1565b90505f60ac610ba4602087018761254e565b61ffff1603610bbd57610bb682611091565b9050610bc6565b5063ffffffff81165b6040805180820182525f80825260209182015281518083019092526001825267ffffffffffffffff8316908201526104d9906104ce565b5f8060c0610c0e602087018761254e565b61ffff1603610c2257505f90506008610cf9565b60c1610c31602087018761254e565b61ffff1603610c4557505f90506010610cf9565b60c2610c54602087018761254e565b61ffff1603610c695750600190506008610cf9565b60c3610c78602087018761254e565b61ffff1603610c8d5750600190506010610cf9565b60c4610c9c602087018761254e565b61ffff1603610cb15750600190506020610cf9565b60405162461bcd60e51b815260206004820152601860248201527f494e56414c49445f455854454e445f53414d455f5459504500000000000000006044820152606401610311565b5f80836006811115610d0d57610d0d611d12565b03610d1d575063ffffffff610d28565b5067ffffffffffffffff5b5f610d368960200151610fa1565b9050836006811115610d4a57610d4a611d12565b81516006811115610d5d57610d5d611d12565b14610daa5760405162461bcd60e51b815260206004820152601960248201527f4241445f455854454e445f53414d455f545950455f54595045000000000000006044820152606401610311565b5f610dbc600160ff861681901b6125d4565b602083018051821690529050610dd36001856125e7565b60ff166001901b8260200151165f14610df457602082018051821985161790525b60208a0151610e039083610fc5565b50505050505050505050565b5f8060bc610e20602087018761254e565b61ffff1603610e3457505f90506002610ee7565b60bd610e43602087018761254e565b61ffff1603610e585750600190506003610ee7565b60be610e67602087018761254e565b61ffff1603610e7b5750600290505f610ee7565b60bf610e8a602087018761254e565b61ffff1603610e9f5750600390506001610ee7565b60405162461bcd60e51b815260206004820152601360248201527f494e56414c49445f5245494e54455250524554000000000000000000000000006044820152606401610311565b5f610ef58860200151610fa1565b9050816006811115610f0957610f09611d12565b81516006811115610f1c57610f1c611d12565b14610f695760405162461bcd60e51b815260206004820152601860248201527f494e56414c49445f5245494e544552505245545f5459504500000000000000006044820152606401610311565b80836006811115610f7c57610f7c611d12565b90816006811115610f8f57610f8f611d12565b905250602088015161063f9082610fc5565b604080518082019091525f80825260208201528151610fbf9061190b565b92915050565b8151610fd19082611a0c565b5050565b60208101515f908183516006811115610ff057610ff0611d12565b1461103d5760405162461bcd60e51b815260206004820152600760248201527f4e4f545f493332000000000000000000000000000000000000000000000000006044820152606401610311565b6401000000008110610fbf5760405162461bcd60e51b815260206004820152600760248201527f4241445f493332000000000000000000000000000000000000000000000000006044820152606401610311565b5f63800000008216156110b2575063ffffffff1667ffffffff000000001790565b5063ffffffff1690565b5f61ffff82166110e4578267ffffffffffffffff168467ffffffffffffffff1614905061134d565b5f1961ffff83160161110f578267ffffffffffffffff168467ffffffffffffffff161415905061134d565b60011961ffff83160161112c578260070b8460070b12905061134d565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd61ffff831601611175578267ffffffffffffffff168467ffffffffffffffff1610905061134d565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc61ffff8316016111b0578260070b8460070b13905061134d565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb61ffff8316016111f9578267ffffffffffffffff168467ffffffffffffffff1611905061134d565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa61ffff831601611235578260070b8460070b1315905061134d565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff961ffff83160161127f578267ffffffffffffffff168467ffffffffffffffff161115905061134d565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff861ffff8316016112bb578260070b8460070b1215905061134d565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff761ffff831601611305578267ffffffffffffffff168467ffffffffffffffff161015905061134d565b60405162461bcd60e51b815260206004820152600a60248201527f424144204952454c4f50000000000000000000000000000000000000000000006044820152606401610311565b9392505050565b604080518082019091525f80825260208201528115611397576040805180820182525f808252602091820181905282518084019093528252600190820152610fbf565b6040805180820182525f8082526020918201819052825180840190935280835290820152610fbf565b919050565b5f8161ffff16602014806113dd57508161ffff166040145b6114295760405162461bcd60e51b815260206004820152601860248201527f57524f4e4720555345204f462067656e65726963556e4f7000000000000000006044820152606401610311565b61ffff83166114995761ffff82165b5f8163ffffffff1611801561146c5750611453600182612600565b63ffffffff166001901b8567ffffffffffffffff16165f145b156114835761147c600182612600565b9050611438565b6114918161ffff8516612600565b91505061134d565b5f1961ffff8416016114f1575f5b8261ffff168163ffffffff161080156114d35750600163ffffffff82161b851667ffffffffffffffff16155b156114ea576114e360018261261d565b90506114a7565b905061134d565b60011961ffff841601611557575f805b8361ffff168263ffffffff16101561154e57600163ffffffff83161b861667ffffffffffffffff161561153c5761153960018261261d565b90505b816115468161263a565b925050611501565b915061134d9050565b60405162461bcd60e51b815260206004820152600960248201527f4241442049556e4f7000000000000000000000000000000000000000000000006044820152606401610311565b5f6115ab60208361265c565b91506115b8826020612600565b63ffffffff168363ffffffff16901c8263ffffffff168463ffffffff16901b17905092915050565b5f6115ec60208361265c565b91506115f9826020612600565b63ffffffff168363ffffffff16901b8263ffffffff168463ffffffff16901c17905092915050565b5f808261ffff165f036116395750508282015f6117a0565b8261ffff166001036116505750508183035f6117a0565b8261ffff166002036116675750508282025f6117a0565b8261ffff166004036116bd578367ffffffffffffffff165f0361168f57505f905060016117a0565b8367ffffffffffffffff168567ffffffffffffffff16816116b2576116b26125c0565b045f915091506117a0565b8261ffff16600603611713578367ffffffffffffffff165f036116e557505f905060016117a0565b8367ffffffffffffffff168567ffffffffffffffff1681611708576117086125c0565b065f915091506117a0565b8261ffff1660070361172a5750508282165f6117a0565b8261ffff166008036117415750508282175f6117a0565b8261ffff166009036117585750508282185f6117a0565b60405162461bcd60e51b815260206004820152601660248201527f494e56414c49445f47454e455249435f42494e5f4f50000000000000000000006044820152606401610311565b935093915050565b60208101515f906001835160068111156117c4576117c4611d12565b146118115760405162461bcd60e51b815260206004820152600760248201527f4e4f545f493634000000000000000000000000000000000000000000000000006044820152606401610311565b680100000000000000008110610fbf5760405162461bcd60e51b815260206004820152600760248201527f4241445f493634000000000000000000000000000000000000000000000000006044820152606401610311565b5f61187560408361267e565b9150611882826040612698565b67ffffffffffffffff168367ffffffffffffffff16901c8267ffffffffffffffff168467ffffffffffffffff16901b17905092915050565b5f6118c660408361267e565b91506118d3826040612698565b67ffffffffffffffff168367ffffffffffffffff16901b8267ffffffffffffffff168467ffffffffffffffff16901c17905092915050565b604080518082019091525f80825260208201528151805161192e906001906125d4565b8151811061193e5761193e6126b9565b602002602001015190505f6001835f01515161195a91906125d4565b67ffffffffffffffff81111561197257611972611fda565b6040519080825280602002602001820160405280156119b657816020015b604080518082019091525f80825260208201528152602001906001900390816119905790505b5090505f5b8151811015611a055783518051829081106119d8576119d86126b9565b60200260200101518282815181106119f2576119f26126b9565b60209081029190910101526001016119bb565b5090915290565b8151515f90611a1c9060016126cd565b67ffffffffffffffff811115611a3457611a34611fda565b604051908082528060200260200182016040528015611a7857816020015b604080518082019091525f8082526020820152815260200190600190039081611a525790505b5090505f5b835151811015611ac8578351805182908110611a9b57611a9b6126b9565b6020026020010151828281518110611ab557611ab56126b9565b6020908102919091010152600101611a7d565b508181845f01515181518110611ae057611ae06126b9565b602090810291909101015290915250565b604080516101808101909152805f8152602001611b2460408051606080820183529181019182529081525f602082015290565b81526040805180820182525f80825260208083019190915283015201611b6060408051606080820183529181019182529081525f602082015290565b8152602001611b846040518060400160405280606081526020015f80191681525090565b81526040805180820182525f8082526020808301829052840191909152908201819052606082018190526080820181905260a0820181905260c0820181905260e09091015290565b611bd46126e0565b565b5f8083601f840112611be6575f80fd5b50813567ffffffffffffffff811115611bfd575f80fd5b602083019150836020828501011115611c14575f80fd5b9250929050565b5f805f805f808688036101e0811215611c32575f80fd5b6060811215611c3f575f80fd5b879650606088013567ffffffffffffffff80821115611c5c575f80fd5b818a0191506101c080838d031215611c72575f80fd5b8298506101007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8085011215611ca5575f80fd5b60808b01975060407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe8085011215611cda575f80fd5b6101808b0196508a0135925080831115611cf2575f80fd5b5050611d0089828a01611bd6565b979a9699509497509295939492505050565b634e487b7160e01b5f52602160045260245ffd5b60038110611d3657611d36611d12565b9052565b805160078110611d4c57611d4c611d12565b8252602090810151910152565b80516040808452905160208483018190528151606086018190525f9392820191849160808801905b80841015611da857611d94828651611d3a565b938201936001939093019290850190611d81565b5060208701516020890152809550505050505092915050565b8051604080845281518482018190525f926060916020918201918388019190865b82811015611e2b578451611df7858251611d3a565b80830151858901528781015163ffffffff90811688870152908701511660808501529381019360a090930192600101611de2565b505050602086015160208801528094505050505092915050565b5f610120808352611e598184018651611d26565b60208501516101c06101408181870152611e776102e0870184611d59565b92506040880151610160611e978189018380518252602090810151910152565b60608a015191507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee080898703016101a08a0152611ed48684611d59565b955060808b015192508089870301858a015250611ef18583611dc1565b60a08b015180516101e08b015260208101516102008b0152909550935060c08a015161022089015260e08a015163ffffffff81166102408a015293506101008a015163ffffffff81166102608a015293509489015163ffffffff811661028089015294918901516102a0880152508701516102c086015250915061134d9050602083018480518252602081015167ffffffffffffffff80825116602085015280602083015116604085015250604081015160608401525060408101516080830152606081015160a0830152608081015160c083015263ffffffff60a08201511660e08301525050565b634e487b7160e01b5f52604160045260245ffd5b6040805190810167ffffffffffffffff8111828210171561201157612011611fda565b60405290565b6040516020810167ffffffffffffffff8111828210171561201157612011611fda565b6040516080810167ffffffffffffffff8111828210171561201157612011611fda565b604051610180810167ffffffffffffffff8111828210171561201157612011611fda565b60405160c0810167ffffffffffffffff8111828210171561201157612011611fda565b6040516060810167ffffffffffffffff8111828210171561201157612011611fda565b604051601f8201601f1916810167ffffffffffffffff811182821017156120f0576120f0611fda565b604052919050565b8035600381106113c0575f80fd5b5f67ffffffffffffffff82111561211f5761211f611fda565b5060051b60200190565b5f60408284031215612139575f80fd5b612141611fee565b9050813560078110612151575f80fd5b808252506020820135602082015292915050565b5f6040808385031215612176575f80fd5b61217e611fee565b9150823567ffffffffffffffff80821115612197575f80fd5b818501915060208083880312156121ac575f80fd5b6121b4612017565b8335838111156121c2575f80fd5b80850194505087601f8501126121d6575f80fd5b833592506121eb6121e684612106565b6120c7565b83815260069390931b84018201928281019089851115612209575f80fd5b948301945b8486101561222f576122208a87612129565b8252948601949083019061220e565b8252508552948501359484019490945250909392505050565b5f60408284031215612258575f80fd5b612260611fee565b9050813581526020820135602082015292915050565b803563ffffffff811681146113c0575f80fd5b5f604080838503121561229a575f80fd5b6122a2611fee565b9150823567ffffffffffffffff8111156122ba575f80fd5b8301601f810185136122ca575f80fd5b803560206122da6121e683612106565b82815260a092830284018201928282019190898511156122f8575f80fd5b948301945b8486101561235f5780868b031215612313575f80fd5b61231b61203a565b6123258b88612129565b81528787013585820152606061233c818901612276565b8983015261234c60808901612276565b90820152835294850194918301916122fd565b50808752505080860135818601525050505092915050565b5f6101c08236031215612388575f80fd5b61239061205d565b612399836120f8565b8152602083013567ffffffffffffffff808211156123b5575f80fd5b6123c136838701612165565b60208401526123d33660408701612248565b604084015260808501359150808211156123eb575f80fd5b6123f736838701612165565b606084015260a085013591508082111561240f575f80fd5b5061241c36828601612289565b60808301525061242f3660c08501612248565b60a08201526101008084013560c083015261012061244e818601612276565b60e0840152610140612461818701612276565b838501526101609250612475838701612276565b91840191909152610180850135908301526101a090930135928101929092525090565b803567ffffffffffffffff811681146113c0575f80fd5b5f8183036101008112156124c1575f80fd5b6124c9612081565b833581526060601f19830112156124de575f80fd5b6124e66120a4565b91506124f460208501612498565b825261250260408501612498565b6020830152606084013560408301528160208201526080840135604082015260a0840135606082015260c0840135608082015261254160e08501612276565b60a0820152949350505050565b5f6020828403121561255e575f80fd5b813561ffff8116811461134d575f80fd5b634e487b7160e01b5f52601160045260245ffd5b61ffff81811683821601908082111561259e5761259e61256f565b5092915050565b61ffff82811682821603908082111561259e5761259e61256f565b634e487b7160e01b5f52601260045260245ffd5b81810381811115610fbf57610fbf61256f565b60ff8281168282160390811115610fbf57610fbf61256f565b63ffffffff82811682821603908082111561259e5761259e61256f565b63ffffffff81811683821601908082111561259e5761259e61256f565b5f63ffffffff8083168181036126525761265261256f565b6001019392505050565b5f63ffffffff80841680612672576126726125c0565b92169190910692915050565b5f67ffffffffffffffff80841680612672576126726125c0565b67ffffffffffffffff82811682821603908082111561259e5761259e61256f565b634e487b7160e01b5f52603260045260245ffd5b80820180821115610fbf57610fbf61256f565b634e487b7160e01b5f52605160045260245ffdfea264697066735822122045b8470ac22f6bb10633312da9f1b72450cbbc1cd4a0ce9d72f0c8fabf24062f64736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\0)W_5`\xE0\x1C\x80c\xA9,\xB5\x01\x14a\0-W[_\x80\xFD[a\0@a\0;6`\x04a\x1C\x1BV[a\0WV[`@Qa\0N\x92\x91\x90a\x1EEV[`@Q\x80\x91\x03\x90\xF3[a\0_a\x1A\xF1V[`@\x80Q`\xC0\x81\x01\x82R_\x80\x82R\x82Q``\x80\x82\x01\x85R\x82\x82R` \x80\x83\x01\x84\x90R\x82\x86\x01\x84\x90R\x84\x01\x91\x90\x91R\x92\x82\x01\x81\x90R\x91\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x91\x90\x91Ra\0\xB1\x87a#wV[\x91Pa\0\xC26\x87\x90\x03\x87\x01\x87a$\xAFV[\x90P_a\0\xD2` \x87\x01\x87a%NV[\x90Pa\x1B\xCCa\xFF\xFF\x82\x16`E\x14\x80a\0\xEEWPa\xFF\xFF\x82\x16`P\x14[\x15a\0\xFCWPa\x038a\x03\x1AV[`Fa\xFF\xFF\x83\x16\x10\x80\x15\x90a\x01$WPa\x01\x18`\t`Fa%\x83V[a\xFF\xFF\x16\x82a\xFF\xFF\x16\x11\x15[\x15a\x012WPa\x04\xE2a\x03\x1AV[`ga\xFF\xFF\x83\x16\x10\x80\x15\x90a\x01ZWPa\x01N`\x02`ga%\x83V[a\xFF\xFF\x16\x82a\xFF\xFF\x16\x11\x15[\x15a\x01hWPa\x05\xC0a\x03\x1AV[`ja\xFF\xFF\x83\x16\x10\x80\x15\x90a\x01\x82WP`xa\xFF\xFF\x83\x16\x11\x15[\x15a\x01\x90WPa\x06Ia\x03\x1AV[`Qa\xFF\xFF\x83\x16\x10\x80\x15\x90a\x01\xB8WPa\x01\xAC`\t`Qa%\x83V[a\xFF\xFF\x16\x82a\xFF\xFF\x16\x11\x15[\x15a\x01\xC6WPa\x08ja\x03\x1AV[`ya\xFF\xFF\x83\x16\x10\x80\x15\x90a\x01\xEEWPa\x01\xE2`\x02`ya%\x83V[a\xFF\xFF\x16\x82a\xFF\xFF\x16\x11\x15[\x15a\x01\xFCWPa\x08\xCBa\x03\x1AV[`|a\xFF\xFF\x83\x16\x10\x80\x15\x90a\x02\x16WP`\x8Aa\xFF\xFF\x83\x16\x11\x15[\x15a\x02$WPa\tAa\x03\x1AV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFYa\xFF\xFF\x83\x16\x01a\x02XWPa\x0B8a\x03\x1AV[a\xFF\xFF\x82\x16`\xAC\x14\x80a\x02oWPa\xFF\xFF\x82\x16`\xAD\x14[\x15a\x02}WPa\x0B\x81a\x03\x1AV[`\xC0a\xFF\xFF\x83\x16\x10\x80\x15\x90a\x02\x97WP`\xC4a\xFF\xFF\x83\x16\x11\x15[\x15a\x02\xA5WPa\x0B\xFDa\x03\x1AV[`\xBCa\xFF\xFF\x83\x16\x10\x80\x15\x90a\x02\xBFWP`\xBFa\xFF\xFF\x83\x16\x11\x15[\x15a\x02\xCDWPa\x0E\x0Fa\x03\x1AV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0E`$\x82\x01R\x7FINVALID_OPCODE\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01[`@Q\x80\x91\x03\x90\xFD[a\x03+\x84\x84\x89\x89\x89\x86c\xFF\xFF\xFF\xFF\x16V[PP\x96P\x96\x94PPPPPV[_a\x03F\x86` \x01Qa\x0F\xA1V[\x90P`Ea\x03W` \x86\x01\x86a%NV[a\xFF\xFF\x16\x03a\x03\xC6W_\x81Q`\x06\x81\x11\x15a\x03tWa\x03ta\x1D\x12V[\x14a\x03\xC1W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FNOT_I32\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x03\x11V[a\x04\x88V[`Pa\x03\xD5` \x86\x01\x86a%NV[a\xFF\xFF\x16\x03a\x04@W`\x01\x81Q`\x06\x81\x11\x15a\x03\xF3Wa\x03\xF3a\x1D\x12V[\x14a\x03\xC1W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FNOT_I64\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x03\x11V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FBAD_EQZ\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x03\x11V[_\x81` \x01Q_\x03a\x04\x9CWP`\x01a\x04\x9FV[P_[`@\x80Q\x80\x82\x01\x82R_\x80\x82R` \x91\x82\x01\x81\x90R\x82Q\x80\x84\x01\x90\x93R\x82Rc\xFF\xFF\xFF\xFF\x83\x16\x90\x82\x01Ra\x04\xD9\x90[` \x89\x01Q\x90a\x0F\xC5V[PPPPPPPV[_a\x04\xF8a\x04\xF3\x87` \x01Qa\x0F\xA1V[a\x0F\xD5V[\x90P_a\x05\x0Ba\x04\xF3\x88` \x01Qa\x0F\xA1V[\x90P_`Fa\x05\x1D` \x88\x01\x88a%NV[a\x05'\x91\x90a%\xA5V[\x90P_\x80a\xFF\xFF\x83\x16`\x02\x14\x80a\x05BWPa\xFF\xFF\x83\x16`\x04\x14[\x80a\x05QWPa\xFF\xFF\x83\x16`\x06\x14[\x80a\x05`WPa\xFF\xFF\x83\x16`\x08\x14[\x15a\x05\x80Wa\x05n\x84a\x10\x91V[\x91Pa\x05y\x85a\x10\x91V[\x90Pa\x05\x8EV[PPc\xFF\xFF\xFF\xFF\x80\x83\x16\x90\x84\x16[_a\x05\x9A\x83\x83\x86a\x10\xBCV[\x90Pa\x05\xB3a\x05\xA8\x82a\x13TV[` \x8D\x01Q\x90a\x0F\xC5V[PPPPPPPPPPPV[_a\x05\xD1a\x04\xF3\x87` \x01Qa\x0F\xA1V[\x90P_`ga\x05\xE3` \x87\x01\x87a%NV[a\x05\xED\x91\x90a%\xA5V[\x90P_a\x06\x02\x83c\xFF\xFF\xFF\xFF\x16\x83` a\x13\xC5V[`@\x80Q\x80\x82\x01\x82R_\x80\x82R` \x91\x82\x01\x81\x90R\x82Q\x80\x84\x01\x90\x93R\x82Rc\xFF\xFF\xFF\xFF\x83\x16\x90\x82\x01R\x90\x91Pa\x06?\x90[` \x8A\x01Q\x90a\x0F\xC5V[PPPPPPPPV[_a\x06Za\x04\xF3\x87` \x01Qa\x0F\xA1V[\x90P_a\x06ma\x04\xF3\x88` \x01Qa\x0F\xA1V[\x90P_\x80`ja\x06\x80` \x89\x01\x89a%NV[a\x06\x8A\x91\x90a%\xA5V[\x90P\x80a\xFF\xFF\x16`\x03\x03a\x07!Wc\xFF\xFF\xFF\xFF\x84\x16\x15\x80a\x06\xDBWP\x82`\x03\x0B\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\0\0\0\x14\x80\x15a\x06\xDBWP\x83`\x03\x0B_\x19\x14[\x15a\x07\x04W\x88`\x02[\x90\x81`\x02\x81\x11\x15a\x06\xF7Wa\x06\xF7a\x1D\x12V[\x81RPPPPPPa\x08cV[\x83`\x03\x0B\x83`\x03\x0B\x81a\x07\x19Wa\x07\x19a%\xC0V[\x05\x91Pa\x08$V[\x80a\xFF\xFF\x16`\x05\x03a\x07_W\x83c\xFF\xFF\xFF\xFF\x16_\x03a\x07BW\x88`\x02a\x06\xE4V[\x83`\x03\x0B\x83`\x03\x0B\x81a\x07WWa\x07Wa%\xC0V[\x07\x91Pa\x08$V[\x80a\xFF\xFF\x16`\n\x03a\x07~Wc\xFF\xFF\xFF\xFF\x83\x16`\x1F\x85\x16\x1B\x91Pa\x08$V[\x80a\xFF\xFF\x16`\x0C\x03a\x07\x9DWc\xFF\xFF\xFF\xFF\x83\x16`\x1F\x85\x16\x1C\x91Pa\x08$V[\x80a\xFF\xFF\x16`\x0B\x03a\x07\xBAW`\x03\x83\x90\x0B`\x1F\x85\x16\x1D\x91Pa\x08$V[\x80a\xFF\xFF\x16`\r\x03a\x07\xD7Wa\x07\xD0\x83\x85a\x15\x9FV[\x91Pa\x08$V[\x80a\xFF\xFF\x16`\x0E\x03a\x07\xEDWa\x07\xD0\x83\x85a\x15\xE0V[_\x80a\x08\x06\x85c\xFF\xFF\xFF\xFF\x16\x87c\xFF\xFF\xFF\xFF\x16\x85a\x16!V[\x91P\x91P\x80\x15a\x08 WPP`\x02\x89RPa\x08c\x92PPPV[P\x91P[`@\x80Q\x80\x82\x01\x82R_\x80\x82R` \x91\x82\x01\x81\x90R\x82Q\x80\x84\x01\x90\x93R\x82Rc\xFF\xFF\xFF\xFF\x84\x16\x90\x82\x01Ra\x08^\x90[` \x8B\x01Q\x90a\x0F\xC5V[PPPP[PPPPPV[_a\x08\x80a\x08{\x87` \x01Qa\x0F\xA1V[a\x17\xA8V[\x90P_a\x08\x93a\x08{\x88` \x01Qa\x0F\xA1V[\x90P_`Qa\x08\xA5` \x88\x01\x88a%NV[a\x08\xAF\x91\x90a%\xA5V[\x90P_a\x08\xBD\x83\x85\x84a\x10\xBCV[\x90Pa\x08^a\x08S\x82a\x13TV[_a\x08\xDCa\x08{\x87` \x01Qa\x0F\xA1V[\x90P_`ya\x08\xEE` \x87\x01\x87a%NV[a\x08\xF8\x91\x90a%\xA5V[\x90P_a\t\x07\x83\x83`@a\x13\xC5V[`@\x80Q\x80\x82\x01\x82R_\x80\x82R` \x91\x82\x01R\x81Q\x80\x83\x01\x90\x92R`\x01\x82Rc\xFF\xFF\xFF\xFF\x92\x90\x92\x16\x91\x81\x01\x82\x90R\x90\x91Pa\x06?\x90a\x064V[_a\tRa\x08{\x87` \x01Qa\x0F\xA1V[\x90P_a\tea\x08{\x88` \x01Qa\x0F\xA1V[\x90P_\x80`|a\tx` \x89\x01\x89a%NV[a\t\x82\x91\x90a%\xA5V[\x90P\x80a\xFF\xFF\x16`\x03\x03a\n\x01Wg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x16\x15\x80a\t\xD7WP\x82`\x07\x0B\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\0\0\0\0\0\0\0\x14\x80\x15a\t\xD7WP\x83`\x07\x0B_\x19\x14[\x15a\t\xE4W\x88`\x02a\x06\xE4V[\x83`\x07\x0B\x83`\x07\x0B\x81a\t\xF9Wa\t\xF9a%\xC0V[\x05\x91Pa\x0B\x01V[\x80a\xFF\xFF\x16`\x05\x03a\nCW\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_\x03a\n&W\x88`\x02a\x06\xE4V[\x83`\x07\x0B\x83`\x07\x0B\x81a\n;Wa\n;a%\xC0V[\x07\x91Pa\x0B\x01V[\x80a\xFF\xFF\x16`\n\x03a\nfWg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16`?\x85\x16\x1B\x91Pa\x0B\x01V[\x80a\xFF\xFF\x16`\x0C\x03a\n\x89Wg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16`?\x85\x16\x1C\x91Pa\x0B\x01V[\x80a\xFF\xFF\x16`\x0B\x03a\n\xA6W`\x07\x83\x90\x0B`?\x85\x16\x1D\x91Pa\x0B\x01V[\x80a\xFF\xFF\x16`\r\x03a\n\xC3Wa\n\xBC\x83\x85a\x18iV[\x91Pa\x0B\x01V[\x80a\xFF\xFF\x16`\x0E\x03a\n\xD9Wa\n\xBC\x83\x85a\x18\xBAV[_a\n\xE5\x84\x86\x84a\x16!V[\x90\x93P\x90P\x80\x15a\n\xFFWPP`\x02\x88RPa\x08c\x91PPV[P[`@\x80Q\x80\x82\x01\x82R_\x80\x82R` \x91\x82\x01R\x81Q\x80\x83\x01\x90\x92R`\x01\x82Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x16\x90\x82\x01Ra\x08^\x90a\x08SV[_a\x0BIa\x08{\x87` \x01Qa\x0F\xA1V[`@\x80Q\x80\x82\x01\x82R_\x80\x82R` \x91\x82\x01\x81\x90R\x82Q\x80\x84\x01\x90\x93R\x82Rc\xFF\xFF\xFF\xFF\x83\x16\x90\x82\x01R\x90\x91P\x81\x90a\x04\xD9\x90a\x04\xCEV[_a\x0B\x92a\x04\xF3\x87` \x01Qa\x0F\xA1V[\x90P_`\xACa\x0B\xA4` \x87\x01\x87a%NV[a\xFF\xFF\x16\x03a\x0B\xBDWa\x0B\xB6\x82a\x10\x91V[\x90Pa\x0B\xC6V[Pc\xFF\xFF\xFF\xFF\x81\x16[`@\x80Q\x80\x82\x01\x82R_\x80\x82R` \x91\x82\x01R\x81Q\x80\x83\x01\x90\x92R`\x01\x82Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16\x90\x82\x01Ra\x04\xD9\x90a\x04\xCEV[_\x80`\xC0a\x0C\x0E` \x87\x01\x87a%NV[a\xFF\xFF\x16\x03a\x0C\"WP_\x90P`\x08a\x0C\xF9V[`\xC1a\x0C1` \x87\x01\x87a%NV[a\xFF\xFF\x16\x03a\x0CEWP_\x90P`\x10a\x0C\xF9V[`\xC2a\x0CT` \x87\x01\x87a%NV[a\xFF\xFF\x16\x03a\x0CiWP`\x01\x90P`\x08a\x0C\xF9V[`\xC3a\x0Cx` \x87\x01\x87a%NV[a\xFF\xFF\x16\x03a\x0C\x8DWP`\x01\x90P`\x10a\x0C\xF9V[`\xC4a\x0C\x9C` \x87\x01\x87a%NV[a\xFF\xFF\x16\x03a\x0C\xB1WP`\x01\x90P` a\x0C\xF9V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x18`$\x82\x01R\x7FINVALID_EXTEND_SAME_TYPE\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x03\x11V[_\x80\x83`\x06\x81\x11\x15a\r\rWa\r\ra\x1D\x12V[\x03a\r\x1DWPc\xFF\xFF\xFF\xFFa\r(V[Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF[_a\r6\x89` \x01Qa\x0F\xA1V[\x90P\x83`\x06\x81\x11\x15a\rJWa\rJa\x1D\x12V[\x81Q`\x06\x81\x11\x15a\r]Wa\r]a\x1D\x12V[\x14a\r\xAAW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x19`$\x82\x01R\x7FBAD_EXTEND_SAME_TYPE_TYPE\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x03\x11V[_a\r\xBC`\x01`\xFF\x86\x16\x81\x90\x1Ba%\xD4V[` \x83\x01\x80Q\x82\x16\x90R\x90Pa\r\xD3`\x01\x85a%\xE7V[`\xFF\x16`\x01\x90\x1B\x82` \x01Q\x16_\x14a\r\xF4W` \x82\x01\x80Q\x82\x19\x85\x16\x17\x90R[` \x8A\x01Qa\x0E\x03\x90\x83a\x0F\xC5V[PPPPPPPPPPV[_\x80`\xBCa\x0E ` \x87\x01\x87a%NV[a\xFF\xFF\x16\x03a\x0E4WP_\x90P`\x02a\x0E\xE7V[`\xBDa\x0EC` \x87\x01\x87a%NV[a\xFF\xFF\x16\x03a\x0EXWP`\x01\x90P`\x03a\x0E\xE7V[`\xBEa\x0Eg` \x87\x01\x87a%NV[a\xFF\xFF\x16\x03a\x0E{WP`\x02\x90P_a\x0E\xE7V[`\xBFa\x0E\x8A` \x87\x01\x87a%NV[a\xFF\xFF\x16\x03a\x0E\x9FWP`\x03\x90P`\x01a\x0E\xE7V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x13`$\x82\x01R\x7FINVALID_REINTERPRET\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x03\x11V[_a\x0E\xF5\x88` \x01Qa\x0F\xA1V[\x90P\x81`\x06\x81\x11\x15a\x0F\tWa\x0F\ta\x1D\x12V[\x81Q`\x06\x81\x11\x15a\x0F\x1CWa\x0F\x1Ca\x1D\x12V[\x14a\x0FiW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x18`$\x82\x01R\x7FINVALID_REINTERPRET_TYPE\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x03\x11V[\x80\x83`\x06\x81\x11\x15a\x0F|Wa\x0F|a\x1D\x12V[\x90\x81`\x06\x81\x11\x15a\x0F\x8FWa\x0F\x8Fa\x1D\x12V[\x90RP` \x88\x01Qa\x06?\x90\x82a\x0F\xC5V[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x81Qa\x0F\xBF\x90a\x19\x0BV[\x92\x91PPV[\x81Qa\x0F\xD1\x90\x82a\x1A\x0CV[PPV[` \x81\x01Q_\x90\x81\x83Q`\x06\x81\x11\x15a\x0F\xF0Wa\x0F\xF0a\x1D\x12V[\x14a\x10=W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FNOT_I32\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x03\x11V[d\x01\0\0\0\0\x81\x10a\x0F\xBFW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FBAD_I32\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x03\x11V[_c\x80\0\0\0\x82\x16\x15a\x10\xB2WPc\xFF\xFF\xFF\xFF\x16g\xFF\xFF\xFF\xFF\0\0\0\0\x17\x90V[Pc\xFF\xFF\xFF\xFF\x16\x90V[_a\xFF\xFF\x82\x16a\x10\xE4W\x82g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14\x90Pa\x13MV[_\x19a\xFF\xFF\x83\x16\x01a\x11\x0FW\x82g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14\x15\x90Pa\x13MV[`\x01\x19a\xFF\xFF\x83\x16\x01a\x11,W\x82`\x07\x0B\x84`\x07\x0B\x12\x90Pa\x13MV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFDa\xFF\xFF\x83\x16\x01a\x11uW\x82g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x10\x90Pa\x13MV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFCa\xFF\xFF\x83\x16\x01a\x11\xB0W\x82`\x07\x0B\x84`\x07\x0B\x13\x90Pa\x13MV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFBa\xFF\xFF\x83\x16\x01a\x11\xF9W\x82g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x11\x90Pa\x13MV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFAa\xFF\xFF\x83\x16\x01a\x125W\x82`\x07\x0B\x84`\x07\x0B\x13\x15\x90Pa\x13MV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xF9a\xFF\xFF\x83\x16\x01a\x12\x7FW\x82g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x11\x15\x90Pa\x13MV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xF8a\xFF\xFF\x83\x16\x01a\x12\xBBW\x82`\x07\x0B\x84`\x07\x0B\x12\x15\x90Pa\x13MV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xF7a\xFF\xFF\x83\x16\x01a\x13\x05W\x82g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x10\x15\x90Pa\x13MV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\n`$\x82\x01R\x7FBAD IRELOP\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x03\x11V[\x93\x92PPPV[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x81\x15a\x13\x97W`@\x80Q\x80\x82\x01\x82R_\x80\x82R` \x91\x82\x01\x81\x90R\x82Q\x80\x84\x01\x90\x93R\x82R`\x01\x90\x82\x01Ra\x0F\xBFV[`@\x80Q\x80\x82\x01\x82R_\x80\x82R` \x91\x82\x01\x81\x90R\x82Q\x80\x84\x01\x90\x93R\x80\x83R\x90\x82\x01Ra\x0F\xBFV[\x91\x90PV[_\x81a\xFF\xFF\x16` \x14\x80a\x13\xDDWP\x81a\xFF\xFF\x16`@\x14[a\x14)W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x18`$\x82\x01R\x7FWRONG USE OF genericUnOp\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x03\x11V[a\xFF\xFF\x83\x16a\x14\x99Wa\xFF\xFF\x82\x16[_\x81c\xFF\xFF\xFF\xFF\x16\x11\x80\x15a\x14lWPa\x14S`\x01\x82a&\0V[c\xFF\xFF\xFF\xFF\x16`\x01\x90\x1B\x85g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x16_\x14[\x15a\x14\x83Wa\x14|`\x01\x82a&\0V[\x90Pa\x148V[a\x14\x91\x81a\xFF\xFF\x85\x16a&\0V[\x91PPa\x13MV[_\x19a\xFF\xFF\x84\x16\x01a\x14\xF1W_[\x82a\xFF\xFF\x16\x81c\xFF\xFF\xFF\xFF\x16\x10\x80\x15a\x14\xD3WP`\x01c\xFF\xFF\xFF\xFF\x82\x16\x1B\x85\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x15[\x15a\x14\xEAWa\x14\xE3`\x01\x82a&\x1DV[\x90Pa\x14\xA7V[\x90Pa\x13MV[`\x01\x19a\xFF\xFF\x84\x16\x01a\x15WW_\x80[\x83a\xFF\xFF\x16\x82c\xFF\xFF\xFF\xFF\x16\x10\x15a\x15NW`\x01c\xFF\xFF\xFF\xFF\x83\x16\x1B\x86\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x15a\x15<Wa\x159`\x01\x82a&\x1DV[\x90P[\x81a\x15F\x81a&:V[\x92PPa\x15\x01V[\x91Pa\x13M\x90PV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\t`$\x82\x01R\x7FBAD IUnOp\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x03\x11V[_a\x15\xAB` \x83a&\\V[\x91Pa\x15\xB8\x82` a&\0V[c\xFF\xFF\xFF\xFF\x16\x83c\xFF\xFF\xFF\xFF\x16\x90\x1C\x82c\xFF\xFF\xFF\xFF\x16\x84c\xFF\xFF\xFF\xFF\x16\x90\x1B\x17\x90P\x92\x91PPV[_a\x15\xEC` \x83a&\\V[\x91Pa\x15\xF9\x82` a&\0V[c\xFF\xFF\xFF\xFF\x16\x83c\xFF\xFF\xFF\xFF\x16\x90\x1B\x82c\xFF\xFF\xFF\xFF\x16\x84c\xFF\xFF\xFF\xFF\x16\x90\x1C\x17\x90P\x92\x91PPV[_\x80\x82a\xFF\xFF\x16_\x03a\x169WPP\x82\x82\x01_a\x17\xA0V[\x82a\xFF\xFF\x16`\x01\x03a\x16PWPP\x81\x83\x03_a\x17\xA0V[\x82a\xFF\xFF\x16`\x02\x03a\x16gWPP\x82\x82\x02_a\x17\xA0V[\x82a\xFF\xFF\x16`\x04\x03a\x16\xBDW\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_\x03a\x16\x8FWP_\x90P`\x01a\x17\xA0V[\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x85g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81a\x16\xB2Wa\x16\xB2a%\xC0V[\x04_\x91P\x91Pa\x17\xA0V[\x82a\xFF\xFF\x16`\x06\x03a\x17\x13W\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_\x03a\x16\xE5WP_\x90P`\x01a\x17\xA0V[\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x85g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81a\x17\x08Wa\x17\x08a%\xC0V[\x06_\x91P\x91Pa\x17\xA0V[\x82a\xFF\xFF\x16`\x07\x03a\x17*WPP\x82\x82\x16_a\x17\xA0V[\x82a\xFF\xFF\x16`\x08\x03a\x17AWPP\x82\x82\x17_a\x17\xA0V[\x82a\xFF\xFF\x16`\t\x03a\x17XWPP\x82\x82\x18_a\x17\xA0V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x16`$\x82\x01R\x7FINVALID_GENERIC_BIN_OP\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x03\x11V[\x93P\x93\x91PPV[` \x81\x01Q_\x90`\x01\x83Q`\x06\x81\x11\x15a\x17\xC4Wa\x17\xC4a\x1D\x12V[\x14a\x18\x11W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FNOT_I64\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x03\x11V[h\x01\0\0\0\0\0\0\0\0\x81\x10a\x0F\xBFW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FBAD_I64\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x03\x11V[_a\x18u`@\x83a&~V[\x91Pa\x18\x82\x82`@a&\x98V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x1C\x82g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x1B\x17\x90P\x92\x91PPV[_a\x18\xC6`@\x83a&~V[\x91Pa\x18\xD3\x82`@a&\x98V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x1B\x82g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x1C\x17\x90P\x92\x91PPV[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x81Q\x80Qa\x19.\x90`\x01\x90a%\xD4V[\x81Q\x81\x10a\x19>Wa\x19>a&\xB9V[` \x02` \x01\x01Q\x90P_`\x01\x83_\x01QQa\x19Z\x91\x90a%\xD4V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x19rWa\x19ra\x1F\xDAV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x19\xB6W\x81` \x01[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x19\x90W\x90P[P\x90P_[\x81Q\x81\x10\x15a\x1A\x05W\x83Q\x80Q\x82\x90\x81\x10a\x19\xD8Wa\x19\xD8a&\xB9V[` \x02` \x01\x01Q\x82\x82\x81Q\x81\x10a\x19\xF2Wa\x19\xF2a&\xB9V[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a\x19\xBBV[P\x90\x91R\x90V[\x81QQ_\x90a\x1A\x1C\x90`\x01a&\xCDV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1A4Wa\x1A4a\x1F\xDAV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x1AxW\x81` \x01[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x1ARW\x90P[P\x90P_[\x83QQ\x81\x10\x15a\x1A\xC8W\x83Q\x80Q\x82\x90\x81\x10a\x1A\x9BWa\x1A\x9Ba&\xB9V[` \x02` \x01\x01Q\x82\x82\x81Q\x81\x10a\x1A\xB5Wa\x1A\xB5a&\xB9V[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a\x1A}V[P\x81\x81\x84_\x01QQ\x81Q\x81\x10a\x1A\xE0Wa\x1A\xE0a&\xB9V[` \x90\x81\x02\x91\x90\x91\x01\x01R\x90\x91RPV[`@\x80Qa\x01\x80\x81\x01\x90\x91R\x80_\x81R` \x01a\x1B$`@\x80Q``\x80\x82\x01\x83R\x91\x81\x01\x91\x82R\x90\x81R_` \x82\x01R\x90V[\x81R`@\x80Q\x80\x82\x01\x82R_\x80\x82R` \x80\x83\x01\x91\x90\x91R\x83\x01R\x01a\x1B``@\x80Q``\x80\x82\x01\x83R\x91\x81\x01\x91\x82R\x90\x81R_` \x82\x01R\x90V[\x81R` \x01a\x1B\x84`@Q\x80`@\x01`@R\x80``\x81R` \x01_\x80\x19\x16\x81RP\x90V[\x81R`@\x80Q\x80\x82\x01\x82R_\x80\x82R` \x80\x83\x01\x82\x90R\x84\x01\x91\x90\x91R\x90\x82\x01\x81\x90R``\x82\x01\x81\x90R`\x80\x82\x01\x81\x90R`\xA0\x82\x01\x81\x90R`\xC0\x82\x01\x81\x90R`\xE0\x90\x91\x01R\x90V[a\x1B\xD4a&\xE0V[V[_\x80\x83`\x1F\x84\x01\x12a\x1B\xE6W_\x80\xFD[P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1B\xFDW_\x80\xFD[` \x83\x01\x91P\x83` \x82\x85\x01\x01\x11\x15a\x1C\x14W_\x80\xFD[\x92P\x92\x90PV[_\x80_\x80_\x80\x86\x88\x03a\x01\xE0\x81\x12\x15a\x1C2W_\x80\xFD[``\x81\x12\x15a\x1C?W_\x80\xFD[\x87\x96P``\x88\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x1C\\W_\x80\xFD[\x81\x8A\x01\x91Pa\x01\xC0\x80\x83\x8D\x03\x12\x15a\x1CrW_\x80\xFD[\x82\x98Pa\x01\0\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x85\x01\x12\x15a\x1C\xA5W_\x80\xFD[`\x80\x8B\x01\x97P`@\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFE\x80\x85\x01\x12\x15a\x1C\xDAW_\x80\xFD[a\x01\x80\x8B\x01\x96P\x8A\x015\x92P\x80\x83\x11\x15a\x1C\xF2W_\x80\xFD[PPa\x1D\0\x89\x82\x8A\x01a\x1B\xD6V[\x97\x9A\x96\x99P\x94\x97P\x92\x95\x93\x94\x92PPPV[cNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[`\x03\x81\x10a\x1D6Wa\x1D6a\x1D\x12V[\x90RV[\x80Q`\x07\x81\x10a\x1DLWa\x1DLa\x1D\x12V[\x82R` \x90\x81\x01Q\x91\x01RV[\x80Q`@\x80\x84R\x90Q` \x84\x83\x01\x81\x90R\x81Q``\x86\x01\x81\x90R_\x93\x92\x82\x01\x91\x84\x91`\x80\x88\x01\x90[\x80\x84\x10\x15a\x1D\xA8Wa\x1D\x94\x82\x86Qa\x1D:V[\x93\x82\x01\x93`\x01\x93\x90\x93\x01\x92\x90\x85\x01\x90a\x1D\x81V[P` \x87\x01Q` \x89\x01R\x80\x95PPPPPP\x92\x91PPV[\x80Q`@\x80\x84R\x81Q\x84\x82\x01\x81\x90R_\x92``\x91` \x91\x82\x01\x91\x83\x88\x01\x91\x90\x86[\x82\x81\x10\x15a\x1E+W\x84Qa\x1D\xF7\x85\x82Qa\x1D:V[\x80\x83\x01Q\x85\x89\x01R\x87\x81\x01Qc\xFF\xFF\xFF\xFF\x90\x81\x16\x88\x87\x01R\x90\x87\x01Q\x16`\x80\x85\x01R\x93\x81\x01\x93`\xA0\x90\x93\x01\x92`\x01\x01a\x1D\xE2V[PPP` \x86\x01Q` \x88\x01R\x80\x94PPPPP\x92\x91PPV[_a\x01 \x80\x83Ra\x1EY\x81\x84\x01\x86Qa\x1D&V[` \x85\x01Qa\x01\xC0a\x01@\x81\x81\x87\x01Ra\x1Ewa\x02\xE0\x87\x01\x84a\x1DYV[\x92P`@\x88\x01Qa\x01`a\x1E\x97\x81\x89\x01\x83\x80Q\x82R` \x90\x81\x01Q\x91\x01RV[``\x8A\x01Q\x91P\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFE\xE0\x80\x89\x87\x03\x01a\x01\xA0\x8A\x01Ra\x1E\xD4\x86\x84a\x1DYV[\x95P`\x80\x8B\x01Q\x92P\x80\x89\x87\x03\x01\x85\x8A\x01RPa\x1E\xF1\x85\x83a\x1D\xC1V[`\xA0\x8B\x01Q\x80Qa\x01\xE0\x8B\x01R` \x81\x01Qa\x02\0\x8B\x01R\x90\x95P\x93P`\xC0\x8A\x01Qa\x02 \x89\x01R`\xE0\x8A\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x02@\x8A\x01R\x93Pa\x01\0\x8A\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x02`\x8A\x01R\x93P\x94\x89\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x02\x80\x89\x01R\x94\x91\x89\x01Qa\x02\xA0\x88\x01RP\x87\x01Qa\x02\xC0\x86\x01RP\x91Pa\x13M\x90P` \x83\x01\x84\x80Q\x82R` \x81\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82Q\x16` \x85\x01R\x80` \x83\x01Q\x16`@\x85\x01RP`@\x81\x01Q``\x84\x01RP`@\x81\x01Q`\x80\x83\x01R``\x81\x01Q`\xA0\x83\x01R`\x80\x81\x01Q`\xC0\x83\x01Rc\xFF\xFF\xFF\xFF`\xA0\x82\x01Q\x16`\xE0\x83\x01RPPV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@\x80Q\x90\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a \x11Wa \x11a\x1F\xDAV[`@R\x90V[`@Q` \x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a \x11Wa \x11a\x1F\xDAV[`@Q`\x80\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a \x11Wa \x11a\x1F\xDAV[`@Qa\x01\x80\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a \x11Wa \x11a\x1F\xDAV[`@Q`\xC0\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a \x11Wa \x11a\x1F\xDAV[`@Q``\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a \x11Wa \x11a\x1F\xDAV[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a \xF0Wa \xF0a\x1F\xDAV[`@R\x91\x90PV[\x805`\x03\x81\x10a\x13\xC0W_\x80\xFD[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a!\x1FWa!\x1Fa\x1F\xDAV[P`\x05\x1B` \x01\x90V[_`@\x82\x84\x03\x12\x15a!9W_\x80\xFD[a!Aa\x1F\xEEV[\x90P\x815`\x07\x81\x10a!QW_\x80\xFD[\x80\x82RP` \x82\x015` \x82\x01R\x92\x91PPV[_`@\x80\x83\x85\x03\x12\x15a!vW_\x80\xFD[a!~a\x1F\xEEV[\x91P\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a!\x97W_\x80\xFD[\x81\x85\x01\x91P` \x80\x83\x88\x03\x12\x15a!\xACW_\x80\xFD[a!\xB4a \x17V[\x835\x83\x81\x11\x15a!\xC2W_\x80\xFD[\x80\x85\x01\x94PP\x87`\x1F\x85\x01\x12a!\xD6W_\x80\xFD[\x835\x92Pa!\xEBa!\xE6\x84a!\x06V[a \xC7V[\x83\x81R`\x06\x93\x90\x93\x1B\x84\x01\x82\x01\x92\x82\x81\x01\x90\x89\x85\x11\x15a\"\tW_\x80\xFD[\x94\x83\x01\x94[\x84\x86\x10\x15a\"/Wa\" \x8A\x87a!)V[\x82R\x94\x86\x01\x94\x90\x83\x01\x90a\"\x0EV[\x82RP\x85R\x94\x85\x015\x94\x84\x01\x94\x90\x94RP\x90\x93\x92PPPV[_`@\x82\x84\x03\x12\x15a\"XW_\x80\xFD[a\"`a\x1F\xEEV[\x90P\x815\x81R` \x82\x015` \x82\x01R\x92\x91PPV[\x805c\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x13\xC0W_\x80\xFD[_`@\x80\x83\x85\x03\x12\x15a\"\x9AW_\x80\xFD[a\"\xA2a\x1F\xEEV[\x91P\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\"\xBAW_\x80\xFD[\x83\x01`\x1F\x81\x01\x85\x13a\"\xCAW_\x80\xFD[\x805` a\"\xDAa!\xE6\x83a!\x06V[\x82\x81R`\xA0\x92\x83\x02\x84\x01\x82\x01\x92\x82\x82\x01\x91\x90\x89\x85\x11\x15a\"\xF8W_\x80\xFD[\x94\x83\x01\x94[\x84\x86\x10\x15a#_W\x80\x86\x8B\x03\x12\x15a#\x13W_\x80\xFD[a#\x1Ba :V[a#%\x8B\x88a!)V[\x81R\x87\x87\x015\x85\x82\x01R``a#<\x81\x89\x01a\"vV[\x89\x83\x01Ra#L`\x80\x89\x01a\"vV[\x90\x82\x01R\x83R\x94\x85\x01\x94\x91\x83\x01\x91a\"\xFDV[P\x80\x87RPP\x80\x86\x015\x81\x86\x01RPPPP\x92\x91PPV[_a\x01\xC0\x826\x03\x12\x15a#\x88W_\x80\xFD[a#\x90a ]V[a#\x99\x83a \xF8V[\x81R` \x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a#\xB5W_\x80\xFD[a#\xC16\x83\x87\x01a!eV[` \x84\x01Ra#\xD36`@\x87\x01a\"HV[`@\x84\x01R`\x80\x85\x015\x91P\x80\x82\x11\x15a#\xEBW_\x80\xFD[a#\xF76\x83\x87\x01a!eV[``\x84\x01R`\xA0\x85\x015\x91P\x80\x82\x11\x15a$\x0FW_\x80\xFD[Pa$\x1C6\x82\x86\x01a\"\x89V[`\x80\x83\x01RPa$/6`\xC0\x85\x01a\"HV[`\xA0\x82\x01Ra\x01\0\x80\x84\x015`\xC0\x83\x01Ra\x01 a$N\x81\x86\x01a\"vV[`\xE0\x84\x01Ra\x01@a$a\x81\x87\x01a\"vV[\x83\x85\x01Ra\x01`\x92Pa$u\x83\x87\x01a\"vV[\x91\x84\x01\x91\x90\x91Ra\x01\x80\x85\x015\x90\x83\x01Ra\x01\xA0\x90\x93\x015\x92\x81\x01\x92\x90\x92RP\x90V[\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x13\xC0W_\x80\xFD[_\x81\x83\x03a\x01\0\x81\x12\x15a$\xC1W_\x80\xFD[a$\xC9a \x81V[\x835\x81R```\x1F\x19\x83\x01\x12\x15a$\xDEW_\x80\xFD[a$\xE6a \xA4V[\x91Pa$\xF4` \x85\x01a$\x98V[\x82Ra%\x02`@\x85\x01a$\x98V[` \x83\x01R``\x84\x015`@\x83\x01R\x81` \x82\x01R`\x80\x84\x015`@\x82\x01R`\xA0\x84\x015``\x82\x01R`\xC0\x84\x015`\x80\x82\x01Ra%A`\xE0\x85\x01a\"vV[`\xA0\x82\x01R\x94\x93PPPPV[_` \x82\x84\x03\x12\x15a%^W_\x80\xFD[\x815a\xFF\xFF\x81\x16\x81\x14a\x13MW_\x80\xFD[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\xFF\xFF\x81\x81\x16\x83\x82\x16\x01\x90\x80\x82\x11\x15a%\x9EWa%\x9Ea%oV[P\x92\x91PPV[a\xFF\xFF\x82\x81\x16\x82\x82\x16\x03\x90\x80\x82\x11\x15a%\x9EWa%\x9Ea%oV[cNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[\x81\x81\x03\x81\x81\x11\x15a\x0F\xBFWa\x0F\xBFa%oV[`\xFF\x82\x81\x16\x82\x82\x16\x03\x90\x81\x11\x15a\x0F\xBFWa\x0F\xBFa%oV[c\xFF\xFF\xFF\xFF\x82\x81\x16\x82\x82\x16\x03\x90\x80\x82\x11\x15a%\x9EWa%\x9Ea%oV[c\xFF\xFF\xFF\xFF\x81\x81\x16\x83\x82\x16\x01\x90\x80\x82\x11\x15a%\x9EWa%\x9Ea%oV[_c\xFF\xFF\xFF\xFF\x80\x83\x16\x81\x81\x03a&RWa&Ra%oV[`\x01\x01\x93\x92PPPV[_c\xFF\xFF\xFF\xFF\x80\x84\x16\x80a&rWa&ra%\xC0V[\x92\x16\x91\x90\x91\x06\x92\x91PPV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x84\x16\x80a&rWa&ra%\xC0V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x81\x16\x82\x82\x16\x03\x90\x80\x82\x11\x15a%\x9EWa%\x9Ea%oV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[\x80\x82\x01\x80\x82\x11\x15a\x0F\xBFWa\x0F\xBFa%oV[cNH{q`\xE0\x1B_R`Q`\x04R`$_\xFD\xFE\xA2dipfsX\"\x12 E\xB8G\n\xC2/k\xB1\x0631-\xA9\xF1\xB7$P\xCB\xBC\x1C\xD4\xA0\xCE\x9Dr\xF0\xC8\xFA\xBF$\x06/dsolcC\0\x08\x19\x003",
    );
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MachineStatus(u8);
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<MachineStatus> for u8 {
            #[inline]
            fn stv_to_tokens(
                &self,
            ) -> <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'_> {
                alloy_sol_types::private::SolTypeValue::<
                    alloy::sol_types::sol_data::Uint<8>,
                >::stv_to_tokens(self)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::tokenize(self)
                    .0
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(self, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encoded_size(self)
            }
        }
        #[automatically_derived]
        impl MachineStatus {
            /// The Solidity type name.
            pub const NAME: &'static str = stringify!(@ name);
            /// Convert from the underlying value type.
            #[inline]
            pub const fn from(value: u8) -> Self {
                Self(value)
            }
            /// Return the underlying value.
            #[inline]
            pub const fn into(self) -> u8 {
                self.0
            }
            /// Return the single encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode(&self.0)
            }
            /// Return the packed encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode_packed(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode_packed(&self.0)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for MachineStatus {
            type RustType = u8;
            type Token<'a> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = Self::NAME;
            const ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                Self::type_check(token).is_ok()
            }
            #[inline]
            fn type_check(token: &Self::Token<'_>) -> alloy_sol_types::Result<()> {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::type_check(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::detokenize(token)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for MachineStatus {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::topic_preimage_length(rust)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(rust, out)
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic(rust)
            }
        }
    };
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ValueType(u8);
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<ValueType> for u8 {
            #[inline]
            fn stv_to_tokens(
                &self,
            ) -> <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'_> {
                alloy_sol_types::private::SolTypeValue::<
                    alloy::sol_types::sol_data::Uint<8>,
                >::stv_to_tokens(self)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::tokenize(self)
                    .0
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(self, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encoded_size(self)
            }
        }
        #[automatically_derived]
        impl ValueType {
            /// The Solidity type name.
            pub const NAME: &'static str = stringify!(@ name);
            /// Convert from the underlying value type.
            #[inline]
            pub const fn from(value: u8) -> Self {
                Self(value)
            }
            /// Return the underlying value.
            #[inline]
            pub const fn into(self) -> u8 {
                self.0
            }
            /// Return the single encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode(&self.0)
            }
            /// Return the packed encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode_packed(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode_packed(&self.0)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ValueType {
            type RustType = u8;
            type Token<'a> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = Self::NAME;
            const ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                Self::type_check(token).is_ok()
            }
            #[inline]
            fn type_check(token: &Self::Token<'_>) -> alloy_sol_types::Result<()> {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::type_check(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::detokenize(token)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ValueType {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::topic_preimage_length(rust)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(rust, out)
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic(rust)
            }
        }
    };
    /**```solidity
struct ExecutionContext { uint256 maxInboxMessagesRead; address bridge; bytes32 initialWasmModuleRoot; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ExecutionContext {
        #[allow(missing_docs)]
        pub maxInboxMessagesRead: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub bridge: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub initialWasmModuleRoot: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ExecutionContext> for UnderlyingRustTuple<'_> {
            fn from(value: ExecutionContext) -> Self {
                (value.maxInboxMessagesRead, value.bridge, value.initialWasmModuleRoot)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ExecutionContext {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    maxInboxMessagesRead: tuple.0,
                    bridge: tuple.1,
                    initialWasmModuleRoot: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for ExecutionContext {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for ExecutionContext {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.maxInboxMessagesRead),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.bridge,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.initialWasmModuleRoot),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ExecutionContext {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for ExecutionContext {
            const NAME: &'static str = "ExecutionContext";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "ExecutionContext(uint256 maxInboxMessagesRead,address bridge,bytes32 initialWasmModuleRoot)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.maxInboxMessagesRead,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.bridge,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.initialWasmModuleRoot,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ExecutionContext {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.maxInboxMessagesRead,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.bridge,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.initialWasmModuleRoot,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.maxInboxMessagesRead,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.bridge,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.initialWasmModuleRoot,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct Instruction { uint16 opcode; uint256 argumentData; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct Instruction {
        #[allow(missing_docs)]
        pub opcode: u16,
        #[allow(missing_docs)]
        pub argumentData: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<16>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            u16,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Instruction> for UnderlyingRustTuple<'_> {
            fn from(value: Instruction) -> Self {
                (value.opcode, value.argumentData)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Instruction {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    opcode: tuple.0,
                    argumentData: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Instruction {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Instruction {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        16,
                    > as alloy_sol_types::SolType>::tokenize(&self.opcode),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.argumentData),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Instruction {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Instruction {
            const NAME: &'static str = "Instruction";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "Instruction(uint16 opcode,uint256 argumentData)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        16,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.opcode)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.argumentData)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Instruction {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        16,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.opcode,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.argumentData,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    16,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.opcode,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.argumentData,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct Machine { MachineStatus status; ValueStack valueStack; MultiStack valueMultiStack; ValueStack internalStack; StackFrameWindow frameStack; MultiStack frameMultiStack; bytes32 globalStateHash; uint32 moduleIdx; uint32 functionIdx; uint32 functionPc; bytes32 recoveryPc; bytes32 modulesRoot; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct Machine {
        #[allow(missing_docs)]
        pub status: <MachineStatus as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub valueStack: <ValueStack as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub valueMultiStack: <MultiStack as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub internalStack: <ValueStack as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub frameStack: <StackFrameWindow as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub frameMultiStack: <MultiStack as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub globalStateHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub moduleIdx: u32,
        #[allow(missing_docs)]
        pub functionIdx: u32,
        #[allow(missing_docs)]
        pub functionPc: u32,
        #[allow(missing_docs)]
        pub recoveryPc: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub modulesRoot: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            MachineStatus,
            ValueStack,
            MultiStack,
            ValueStack,
            StackFrameWindow,
            MultiStack,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::Uint<32>,
            alloy::sol_types::sol_data::Uint<32>,
            alloy::sol_types::sol_data::Uint<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            <MachineStatus as alloy::sol_types::SolType>::RustType,
            <ValueStack as alloy::sol_types::SolType>::RustType,
            <MultiStack as alloy::sol_types::SolType>::RustType,
            <ValueStack as alloy::sol_types::SolType>::RustType,
            <StackFrameWindow as alloy::sol_types::SolType>::RustType,
            <MultiStack as alloy::sol_types::SolType>::RustType,
            alloy::sol_types::private::FixedBytes<32>,
            u32,
            u32,
            u32,
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Machine> for UnderlyingRustTuple<'_> {
            fn from(value: Machine) -> Self {
                (
                    value.status,
                    value.valueStack,
                    value.valueMultiStack,
                    value.internalStack,
                    value.frameStack,
                    value.frameMultiStack,
                    value.globalStateHash,
                    value.moduleIdx,
                    value.functionIdx,
                    value.functionPc,
                    value.recoveryPc,
                    value.modulesRoot,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Machine {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    status: tuple.0,
                    valueStack: tuple.1,
                    valueMultiStack: tuple.2,
                    internalStack: tuple.3,
                    frameStack: tuple.4,
                    frameMultiStack: tuple.5,
                    globalStateHash: tuple.6,
                    moduleIdx: tuple.7,
                    functionIdx: tuple.8,
                    functionPc: tuple.9,
                    recoveryPc: tuple.10,
                    modulesRoot: tuple.11,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Machine {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Machine {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <MachineStatus as alloy_sol_types::SolType>::tokenize(&self.status),
                    <ValueStack as alloy_sol_types::SolType>::tokenize(&self.valueStack),
                    <MultiStack as alloy_sol_types::SolType>::tokenize(
                        &self.valueMultiStack,
                    ),
                    <ValueStack as alloy_sol_types::SolType>::tokenize(
                        &self.internalStack,
                    ),
                    <StackFrameWindow as alloy_sol_types::SolType>::tokenize(
                        &self.frameStack,
                    ),
                    <MultiStack as alloy_sol_types::SolType>::tokenize(
                        &self.frameMultiStack,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.globalStateHash),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.moduleIdx),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.functionIdx),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.functionPc),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.recoveryPc),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.modulesRoot),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Machine {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Machine {
            const NAME: &'static str = "Machine";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "Machine(uint8 status,ValueStack valueStack,MultiStack valueMultiStack,ValueStack internalStack,StackFrameWindow frameStack,MultiStack frameMultiStack,bytes32 globalStateHash,uint32 moduleIdx,uint32 functionIdx,uint32 functionPc,bytes32 recoveryPc,bytes32 modulesRoot)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(5);
                components
                    .push(
                        <ValueStack as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <ValueStack as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
                    .push(
                        <MultiStack as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <MultiStack as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
                    .push(
                        <ValueStack as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <ValueStack as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
                    .push(
                        <StackFrameWindow as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <StackFrameWindow as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
                    .push(
                        <MultiStack as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <MultiStack as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <MachineStatus as alloy_sol_types::SolType>::eip712_data_word(
                            &self.status,
                        )
                        .0,
                    <ValueStack as alloy_sol_types::SolType>::eip712_data_word(
                            &self.valueStack,
                        )
                        .0,
                    <MultiStack as alloy_sol_types::SolType>::eip712_data_word(
                            &self.valueMultiStack,
                        )
                        .0,
                    <ValueStack as alloy_sol_types::SolType>::eip712_data_word(
                            &self.internalStack,
                        )
                        .0,
                    <StackFrameWindow as alloy_sol_types::SolType>::eip712_data_word(
                            &self.frameStack,
                        )
                        .0,
                    <MultiStack as alloy_sol_types::SolType>::eip712_data_word(
                            &self.frameMultiStack,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.globalStateHash,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.moduleIdx)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.functionIdx)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.functionPc)
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.recoveryPc)
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.modulesRoot)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Machine {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <MachineStatus as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.status,
                    )
                    + <ValueStack as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.valueStack,
                    )
                    + <MultiStack as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.valueMultiStack,
                    )
                    + <ValueStack as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.internalStack,
                    )
                    + <StackFrameWindow as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.frameStack,
                    )
                    + <MultiStack as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.frameMultiStack,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.globalStateHash,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.moduleIdx,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.functionIdx,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.functionPc,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.recoveryPc,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.modulesRoot,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <MachineStatus as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.status,
                    out,
                );
                <ValueStack as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.valueStack,
                    out,
                );
                <MultiStack as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.valueMultiStack,
                    out,
                );
                <ValueStack as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.internalStack,
                    out,
                );
                <StackFrameWindow as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.frameStack,
                    out,
                );
                <MultiStack as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.frameMultiStack,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.globalStateHash,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.moduleIdx,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.functionIdx,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.functionPc,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.recoveryPc,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.modulesRoot,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct Module { bytes32 globalsMerkleRoot; ModuleMemory moduleMemory; bytes32 tablesMerkleRoot; bytes32 functionsMerkleRoot; bytes32 extraHash; uint32 internalsOffset; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct Module {
        #[allow(missing_docs)]
        pub globalsMerkleRoot: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub moduleMemory: <ModuleMemory as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub tablesMerkleRoot: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub functionsMerkleRoot: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub extraHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub internalsOffset: u32,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::FixedBytes<32>,
            ModuleMemory,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::Uint<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::FixedBytes<32>,
            <ModuleMemory as alloy::sol_types::SolType>::RustType,
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::FixedBytes<32>,
            u32,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Module> for UnderlyingRustTuple<'_> {
            fn from(value: Module) -> Self {
                (
                    value.globalsMerkleRoot,
                    value.moduleMemory,
                    value.tablesMerkleRoot,
                    value.functionsMerkleRoot,
                    value.extraHash,
                    value.internalsOffset,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Module {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    globalsMerkleRoot: tuple.0,
                    moduleMemory: tuple.1,
                    tablesMerkleRoot: tuple.2,
                    functionsMerkleRoot: tuple.3,
                    extraHash: tuple.4,
                    internalsOffset: tuple.5,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Module {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Module {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.globalsMerkleRoot),
                    <ModuleMemory as alloy_sol_types::SolType>::tokenize(
                        &self.moduleMemory,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.tablesMerkleRoot),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.functionsMerkleRoot),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.extraHash),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.internalsOffset),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Module {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Module {
            const NAME: &'static str = "Module";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "Module(bytes32 globalsMerkleRoot,ModuleMemory moduleMemory,bytes32 tablesMerkleRoot,bytes32 functionsMerkleRoot,bytes32 extraHash,uint32 internalsOffset)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(1);
                components
                    .push(
                        <ModuleMemory as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <ModuleMemory as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.globalsMerkleRoot,
                        )
                        .0,
                    <ModuleMemory as alloy_sol_types::SolType>::eip712_data_word(
                            &self.moduleMemory,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.tablesMerkleRoot,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.functionsMerkleRoot,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.extraHash)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.internalsOffset,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Module {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.globalsMerkleRoot,
                    )
                    + <ModuleMemory as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.moduleMemory,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.tablesMerkleRoot,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.functionsMerkleRoot,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.extraHash,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.internalsOffset,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.globalsMerkleRoot,
                    out,
                );
                <ModuleMemory as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.moduleMemory,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.tablesMerkleRoot,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.functionsMerkleRoot,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.extraHash,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.internalsOffset,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct ModuleMemory { uint64 size; uint64 maxSize; bytes32 merkleRoot; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ModuleMemory {
        #[allow(missing_docs)]
        pub size: u64,
        #[allow(missing_docs)]
        pub maxSize: u64,
        #[allow(missing_docs)]
        pub merkleRoot: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<64>,
            alloy::sol_types::sol_data::Uint<64>,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            u64,
            u64,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ModuleMemory> for UnderlyingRustTuple<'_> {
            fn from(value: ModuleMemory) -> Self {
                (value.size, value.maxSize, value.merkleRoot)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ModuleMemory {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    size: tuple.0,
                    maxSize: tuple.1,
                    merkleRoot: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for ModuleMemory {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for ModuleMemory {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.size),
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.maxSize),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.merkleRoot),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ModuleMemory {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for ModuleMemory {
            const NAME: &'static str = "ModuleMemory";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "ModuleMemory(uint64 size,uint64 maxSize,bytes32 merkleRoot)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.size)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.maxSize)
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.merkleRoot)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ModuleMemory {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.size)
                    + <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.maxSize,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.merkleRoot,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    64,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.size,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    64,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.maxSize,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.merkleRoot,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct MultiStack { bytes32 inactiveStackHash; bytes32 remainingHash; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MultiStack {
        #[allow(missing_docs)]
        pub inactiveStackHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub remainingHash: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<MultiStack> for UnderlyingRustTuple<'_> {
            fn from(value: MultiStack) -> Self {
                (value.inactiveStackHash, value.remainingHash)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for MultiStack {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    inactiveStackHash: tuple.0,
                    remainingHash: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for MultiStack {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for MultiStack {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.inactiveStackHash),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.remainingHash),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for MultiStack {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for MultiStack {
            const NAME: &'static str = "MultiStack";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "MultiStack(bytes32 inactiveStackHash,bytes32 remainingHash)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.inactiveStackHash,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.remainingHash)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for MultiStack {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.inactiveStackHash,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.remainingHash,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.inactiveStackHash,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.remainingHash,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct StackFrame { Value returnPc; bytes32 localsMerkleRoot; uint32 callerModule; uint32 callerModuleInternals; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct StackFrame {
        #[allow(missing_docs)]
        pub returnPc: <Value as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub localsMerkleRoot: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub callerModule: u32,
        #[allow(missing_docs)]
        pub callerModuleInternals: u32,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            Value,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::Uint<32>,
            alloy::sol_types::sol_data::Uint<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            <Value as alloy::sol_types::SolType>::RustType,
            alloy::sol_types::private::FixedBytes<32>,
            u32,
            u32,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<StackFrame> for UnderlyingRustTuple<'_> {
            fn from(value: StackFrame) -> Self {
                (
                    value.returnPc,
                    value.localsMerkleRoot,
                    value.callerModule,
                    value.callerModuleInternals,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for StackFrame {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    returnPc: tuple.0,
                    localsMerkleRoot: tuple.1,
                    callerModule: tuple.2,
                    callerModuleInternals: tuple.3,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for StackFrame {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for StackFrame {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <Value as alloy_sol_types::SolType>::tokenize(&self.returnPc),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.localsMerkleRoot),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.callerModule),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.callerModuleInternals),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for StackFrame {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for StackFrame {
            const NAME: &'static str = "StackFrame";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "StackFrame(Value returnPc,bytes32 localsMerkleRoot,uint32 callerModule,uint32 callerModuleInternals)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(1);
                components
                    .push(<Value as alloy_sol_types::SolStruct>::eip712_root_type());
                components
                    .extend(<Value as alloy_sol_types::SolStruct>::eip712_components());
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <Value as alloy_sol_types::SolType>::eip712_data_word(&self.returnPc)
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.localsMerkleRoot,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.callerModule)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.callerModuleInternals,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for StackFrame {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <Value as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.returnPc,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.localsMerkleRoot,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.callerModule,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.callerModuleInternals,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <Value as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.returnPc,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.localsMerkleRoot,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.callerModule,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.callerModuleInternals,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct StackFrameWindow { StackFrame[] proved; bytes32 remainingHash; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct StackFrameWindow {
        #[allow(missing_docs)]
        pub proved: alloy::sol_types::private::Vec<
            <StackFrame as alloy::sol_types::SolType>::RustType,
        >,
        #[allow(missing_docs)]
        pub remainingHash: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Array<StackFrame>,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Vec<
                <StackFrame as alloy::sol_types::SolType>::RustType,
            >,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<StackFrameWindow> for UnderlyingRustTuple<'_> {
            fn from(value: StackFrameWindow) -> Self {
                (value.proved, value.remainingHash)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for StackFrameWindow {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    proved: tuple.0,
                    remainingHash: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for StackFrameWindow {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for StackFrameWindow {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        StackFrame,
                    > as alloy_sol_types::SolType>::tokenize(&self.proved),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.remainingHash),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for StackFrameWindow {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for StackFrameWindow {
            const NAME: &'static str = "StackFrameWindow";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "StackFrameWindow(StackFrame[] proved,bytes32 remainingHash)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(1);
                components
                    .push(
                        <StackFrame as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <StackFrame as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Array<
                        StackFrame,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.proved)
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.remainingHash)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for StackFrameWindow {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Array<
                        StackFrame,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.proved,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.remainingHash,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Array<
                    StackFrame,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.proved,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.remainingHash,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct Value { ValueType valueType; uint256 contents; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct Value {
        #[allow(missing_docs)]
        pub valueType: <ValueType as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub contents: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (ValueType, alloy::sol_types::sol_data::Uint<256>);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            <ValueType as alloy::sol_types::SolType>::RustType,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Value> for UnderlyingRustTuple<'_> {
            fn from(value: Value) -> Self {
                (value.valueType, value.contents)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Value {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    valueType: tuple.0,
                    contents: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Value {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Value {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <ValueType as alloy_sol_types::SolType>::tokenize(&self.valueType),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contents),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Value {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Value {
            const NAME: &'static str = "Value";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "Value(uint8 valueType,uint256 contents)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <ValueType as alloy_sol_types::SolType>::eip712_data_word(
                            &self.valueType,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.contents)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Value {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <ValueType as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.valueType,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.contents,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <ValueType as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.valueType,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.contents,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct ValueArray { Value[] inner; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ValueArray {
        #[allow(missing_docs)]
        pub inner: alloy::sol_types::private::Vec<
            <Value as alloy::sol_types::SolType>::RustType,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Array<Value>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Vec<
                <Value as alloy::sol_types::SolType>::RustType,
            >,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ValueArray> for UnderlyingRustTuple<'_> {
            fn from(value: ValueArray) -> Self {
                (value.inner,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ValueArray {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { inner: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for ValueArray {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for ValueArray {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        Value,
                    > as alloy_sol_types::SolType>::tokenize(&self.inner),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ValueArray {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for ValueArray {
            const NAME: &'static str = "ValueArray";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed("ValueArray(Value[] inner)")
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(1);
                components
                    .push(<Value as alloy_sol_types::SolStruct>::eip712_root_type());
                components
                    .extend(<Value as alloy_sol_types::SolStruct>::eip712_components());
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                <alloy::sol_types::sol_data::Array<
                    Value,
                > as alloy_sol_types::SolType>::eip712_data_word(&self.inner)
                    .0
                    .to_vec()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ValueArray {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Array<
                        Value,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.inner)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Array<
                    Value,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.inner,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct ValueStack { ValueArray proved; bytes32 remainingHash; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ValueStack {
        #[allow(missing_docs)]
        pub proved: <ValueArray as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub remainingHash: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            ValueArray,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            <ValueArray as alloy::sol_types::SolType>::RustType,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ValueStack> for UnderlyingRustTuple<'_> {
            fn from(value: ValueStack) -> Self {
                (value.proved, value.remainingHash)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ValueStack {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    proved: tuple.0,
                    remainingHash: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for ValueStack {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for ValueStack {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <ValueArray as alloy_sol_types::SolType>::tokenize(&self.proved),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.remainingHash),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ValueStack {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for ValueStack {
            const NAME: &'static str = "ValueStack";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "ValueStack(ValueArray proved,bytes32 remainingHash)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(1);
                components
                    .push(
                        <ValueArray as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <ValueArray as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <ValueArray as alloy_sol_types::SolType>::eip712_data_word(
                            &self.proved,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.remainingHash)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ValueStack {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <ValueArray as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.proved,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.remainingHash,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <ValueArray as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.proved,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.remainingHash,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**Function with signature `executeOneStep((uint256,address,bytes32),(uint8,(((uint8,uint256)[]),bytes32),(bytes32,bytes32),(((uint8,uint256)[]),bytes32),(((uint8,uint256),bytes32,uint32,uint32)[],bytes32),(bytes32,bytes32),bytes32,uint32,uint32,uint32,bytes32,bytes32),(bytes32,(uint64,uint64,bytes32),bytes32,bytes32,bytes32,uint32),(uint16,uint256),bytes)` and selector `0xa92cb501`.
```solidity
function executeOneStep(ExecutionContext memory, Machine memory startMach, Module memory startMod, Instruction memory inst, bytes memory proof) external pure returns (Machine memory mach, Module memory r#mod);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeOneStepCall {
        #[allow(missing_docs)]
        pub _0: <ExecutionContext as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub startMach: <Machine as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub startMod: <Module as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub inst: <Instruction as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub proof: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`executeOneStep((uint256,address,bytes32),(uint8,(((uint8,uint256)[]),bytes32),(bytes32,bytes32),(((uint8,uint256)[]),bytes32),(((uint8,uint256),bytes32,uint32,uint32)[],bytes32),(bytes32,bytes32),bytes32,uint32,uint32,uint32,bytes32,bytes32),(bytes32,(uint64,uint64,bytes32),bytes32,bytes32,bytes32,uint32),(uint16,uint256),bytes)`](executeOneStepCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeOneStepReturn {
        #[allow(missing_docs)]
        pub mach: <Machine as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub r#mod: <Module as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                ExecutionContext,
                Machine,
                Module,
                Instruction,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <ExecutionContext as alloy::sol_types::SolType>::RustType,
                <Machine as alloy::sol_types::SolType>::RustType,
                <Module as alloy::sol_types::SolType>::RustType,
                <Instruction as alloy::sol_types::SolType>::RustType,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeOneStepCall> for UnderlyingRustTuple<'_> {
                fn from(value: executeOneStepCall) -> Self {
                    (value._0, value.startMach, value.startMod, value.inst, value.proof)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for executeOneStepCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _0: tuple.0,
                        startMach: tuple.1,
                        startMod: tuple.2,
                        inst: tuple.3,
                        proof: tuple.4,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (Machine, Module);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <Machine as alloy::sol_types::SolType>::RustType,
                <Module as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeOneStepReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: executeOneStepReturn) -> Self {
                    (value.mach, value.r#mod)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for executeOneStepReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        mach: tuple.0,
                        r#mod: tuple.1,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for executeOneStepCall {
            type Parameters<'a> = (
                ExecutionContext,
                Machine,
                Module,
                Instruction,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = executeOneStepReturn;
            type ReturnTuple<'a> = (Machine, Module);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "executeOneStep((uint256,address,bytes32),(uint8,(((uint8,uint256)[]),bytes32),(bytes32,bytes32),(((uint8,uint256)[]),bytes32),(((uint8,uint256),bytes32,uint32,uint32)[],bytes32),(bytes32,bytes32),bytes32,uint32,uint32,uint32,bytes32,bytes32),(bytes32,(uint64,uint64,bytes32),bytes32,bytes32,bytes32,uint32),(uint16,uint256),bytes)";
            const SELECTOR: [u8; 4] = [169u8, 44u8, 181u8, 1u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <ExecutionContext as alloy_sol_types::SolType>::tokenize(&self._0),
                    <Machine as alloy_sol_types::SolType>::tokenize(&self.startMach),
                    <Module as alloy_sol_types::SolType>::tokenize(&self.startMod),
                    <Instruction as alloy_sol_types::SolType>::tokenize(&self.inst),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.proof,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`OneStepProverMath`](self) function calls.
    pub enum OneStepProverMathCalls {
        #[allow(missing_docs)]
        executeOneStep(executeOneStepCall),
    }
    #[automatically_derived]
    impl OneStepProverMathCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[[169u8, 44u8, 181u8, 1u8]];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for OneStepProverMathCalls {
        const NAME: &'static str = "OneStepProverMathCalls";
        const MIN_DATA_LENGTH: usize = 1120usize;
        const COUNT: usize = 1usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::executeOneStep(_) => {
                    <executeOneStepCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<OneStepProverMathCalls>] = &[
                {
                    fn executeOneStep(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OneStepProverMathCalls> {
                        <executeOneStepCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OneStepProverMathCalls::executeOneStep)
                    }
                    executeOneStep
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::executeOneStep(inner) => {
                    <executeOneStepCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::executeOneStep(inner) => {
                    <executeOneStepCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`OneStepProverMath`](self) contract instance.

See the [wrapper's documentation](`OneStepProverMathInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> OneStepProverMathInstance<T, P, N> {
        OneStepProverMathInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<OneStepProverMathInstance<T, P, N>>,
    > {
        OneStepProverMathInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        OneStepProverMathInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`OneStepProverMath`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`OneStepProverMath`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct OneStepProverMathInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for OneStepProverMathInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("OneStepProverMathInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > OneStepProverMathInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`OneStepProverMath`](self) contract instance.

See the [wrapper's documentation](`OneStepProverMathInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<OneStepProverMathInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> OneStepProverMathInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> OneStepProverMathInstance<T, P, N> {
            OneStepProverMathInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > OneStepProverMathInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`executeOneStep`] function.
        pub fn executeOneStep(
            &self,
            _0: <ExecutionContext as alloy::sol_types::SolType>::RustType,
            startMach: <Machine as alloy::sol_types::SolType>::RustType,
            startMod: <Module as alloy::sol_types::SolType>::RustType,
            inst: <Instruction as alloy::sol_types::SolType>::RustType,
            proof: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, executeOneStepCall, N> {
            self.call_builder(
                &executeOneStepCall {
                    _0,
                    startMach,
                    startMod,
                    inst,
                    proof,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > OneStepProverMathInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
