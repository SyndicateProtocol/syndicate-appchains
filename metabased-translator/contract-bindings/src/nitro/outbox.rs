/**

Generated by the following Solidity interface...
```solidity
interface Outbox {
    error AlreadyInit();
    error AlreadySpent(uint256 index);
    error BadPostUpgradeInit();
    error BridgeCallFailed();
    error HadZeroInit();
    error MerkleProofTooLong(uint256 actualLength, uint256 maxProofLength);
    error NotOwner(address sender, address owner);
    error NotRollup(address sender, address rollup);
    error PathNotMinimal(uint256 index, uint256 maxIndex);
    error ProofTooLong(uint256 proofLength);
    error RollupNotChanged();
    error SimulationOnlyEntrypoint();
    error UnknownRoot(bytes32 root);

    event OutBoxTransactionExecuted(address indexed to, address indexed l2Sender, uint256 indexed zero, uint256 transactionIndex);
    event SendRootUpdated(bytes32 indexed outputRoot, bytes32 indexed l2BlockHash);

    function OUTBOX_VERSION() external view returns (uint128);
    function bridge() external view returns (address);
    function calculateItemHash(address l2Sender, address to, uint256 l2Block, uint256 l1Block, uint256 l2Timestamp, uint256 value, bytes memory data) external pure returns (bytes32);
    function calculateMerkleRoot(bytes32[] memory proof, uint256 path, bytes32 item) external pure returns (bytes32);
    function executeTransaction(bytes32[] memory proof, uint256 index, address l2Sender, address to, uint256 l2Block, uint256 l1Block, uint256 l2Timestamp, uint256 value, bytes memory data) external;
    function executeTransactionSimulation(uint256 index, address l2Sender, address to, uint256 l2Block, uint256 l1Block, uint256 l2Timestamp, uint256 value, bytes memory data) external;
    function initialize(address _bridge) external;
    function isSpent(uint256 index) external view returns (bool);
    function l2ToL1BatchNum() external pure returns (uint256);
    function l2ToL1Block() external view returns (uint256);
    function l2ToL1EthBlock() external view returns (uint256);
    function l2ToL1OutputId() external view returns (bytes32);
    function l2ToL1Sender() external view returns (address);
    function l2ToL1Timestamp() external view returns (uint256);
    function postUpgradeInit() external;
    function rollup() external view returns (address);
    function roots(bytes32) external view returns (bytes32);
    function spent(uint256) external view returns (bytes32);
    function updateRollupAddress() external;
    function updateSendRoot(bytes32 root, bytes32 l2BlockHash) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "OUTBOX_VERSION",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint128",
        "internalType": "uint128"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "bridge",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract IBridge"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "calculateItemHash",
    "inputs": [
      {
        "name": "l2Sender",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "to",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "l2Block",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "l1Block",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "l2Timestamp",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "value",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "calculateMerkleRoot",
    "inputs": [
      {
        "name": "proof",
        "type": "bytes32[]",
        "internalType": "bytes32[]"
      },
      {
        "name": "path",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "item",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "executeTransaction",
    "inputs": [
      {
        "name": "proof",
        "type": "bytes32[]",
        "internalType": "bytes32[]"
      },
      {
        "name": "index",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "l2Sender",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "to",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "l2Block",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "l1Block",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "l2Timestamp",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "value",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "executeTransactionSimulation",
    "inputs": [
      {
        "name": "index",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "l2Sender",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "to",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "l2Block",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "l1Block",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "l2Timestamp",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "value",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "initialize",
    "inputs": [
      {
        "name": "_bridge",
        "type": "address",
        "internalType": "contract IBridge"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "isSpent",
    "inputs": [
      {
        "name": "index",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "l2ToL1BatchNum",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "l2ToL1Block",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "l2ToL1EthBlock",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "l2ToL1OutputId",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "l2ToL1Sender",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "l2ToL1Timestamp",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "postUpgradeInit",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "rollup",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "roots",
    "inputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "spent",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "updateRollupAddress",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "updateSendRoot",
    "inputs": [
      {
        "name": "root",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "l2BlockHash",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "OutBoxTransactionExecuted",
    "inputs": [
      {
        "name": "to",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "l2Sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "zero",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      },
      {
        "name": "transactionIndex",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "SendRootUpdated",
    "inputs": [
      {
        "name": "outputRoot",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "l2BlockHash",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AlreadyInit",
    "inputs": []
  },
  {
    "type": "error",
    "name": "AlreadySpent",
    "inputs": [
      {
        "name": "index",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "BadPostUpgradeInit",
    "inputs": []
  },
  {
    "type": "error",
    "name": "BridgeCallFailed",
    "inputs": []
  },
  {
    "type": "error",
    "name": "HadZeroInit",
    "inputs": []
  },
  {
    "type": "error",
    "name": "MerkleProofTooLong",
    "inputs": [
      {
        "name": "actualLength",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "maxProofLength",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "NotOwner",
    "inputs": [
      {
        "name": "sender",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "NotRollup",
    "inputs": [
      {
        "name": "sender",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "rollup",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "PathNotMinimal",
    "inputs": [
      {
        "name": "index",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "maxIndex",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ProofTooLong",
    "inputs": [
      {
        "name": "proofLength",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "RollupNotChanged",
    "inputs": []
  },
  {
    "type": "error",
    "name": "SimulationOnlyEntrypoint",
    "inputs": []
  },
  {
    "type": "error",
    "name": "UnknownRoot",
    "inputs": [
      {
        "name": "root",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ]
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod Outbox {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60a0604052306080523480156012575f80fd5b5060805161199e6100325f395f818161076c0152610a69015261199e5ff3fe608060405234801561000f575f80fd5b5060043610610162575f3560e01c806395fcea78116100c7578063c4d66de81161007d578063cb23bcb511610063578063cb23bcb5146102a5578063d5b5cc23146102b7578063e78cea92146102d6575f80fd5b8063c4d66de814610272578063c75184df14610285575f80fd5b8063a04cee60116100ad578063a04cee6014610238578063ae6dead71461024b578063b0f305371461026a575f80fd5b806395fcea781461021d5780639f0c04bf14610225575f80fd5b80635a129efe1161011c57806372f2a8c71161010257806372f2a8c7146101ed57806380648b02146101f55780638515bc6a14610215575f80fd5b80635a129efe146101c25780636ae71f12146101e5575f80fd5b8063119852711161014c57806311985271146101a1578063288e5b10146101a757806346547790146101ba575f80fd5b80627436d31461016657806308635a951461018c575b5f80fd5b61017961017436600461132b565b6102e9565b6040519081526020015b60405180910390f35b61019f61019a366004611442565b610325565b005b5f610179565b61019f6101b536600461152b565b610396565b6101796103ea565b6101d56101d03660046115c0565b610434565b6040519015158152602001610183565b61019f61044f565b6101796106a1565b6101fd6106ba565b6040516001600160a01b039091168152602001610183565b6101796106f6565b61019f610762565b6101796102333660046115d7565b610936565b61019f610246366004611660565b61097a565b6101796102593660046115c0565b60036020525f908152604090205481565b610179610a0f565b61019f610280366004611680565b610a5f565b61028d600281565b6040516001600160801b039091168152602001610183565b5f546101fd906001600160a01b031681565b6101796102c53660046115c0565b60026020525f908152604090205481565b6001546101fd906001600160a01b031681565b5f61031d84848460405160200161030291815260200190565b60405160208183030381529060405280519060200120610cc3565b949350505050565b5f6103368989898989898989610936565b90506103778c8c808060200260200160405190810160405280939291908181526020018383602002808284375f920191909152508e9250859150610d769050565b6103888a8a8a8a8a8a8a8a8a610ede565b505050505050505050505050565b33156103ce576040517f0e13b69d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6103df898989898989898989610ede565b505050505050505050565b6004545f906001600160801b03167fffffffffffffffffffffffffffffffff000000000000000000000000000000018101610426575f91505090565b6001600160801b0316919050565b5f805f610440846111b8565b925092505061031d82826111f2565b5f8054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561049d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104c191906116a2565b6001600160a01b0316336001600160a01b0316146105a6575f54604080517f8da5cb5b000000000000000000000000000000000000000000000000000000008152905133926001600160a01b031691638da5cb5b9160048083019260209291908290030181865afa158015610538573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061055c91906116a2565b6040517f23295f0e0000000000000000000000000000000000000000000000000000000081526001600160a01b039283166004820152911660248201526044015b60405180910390fd5b600154604080517fcb23bcb500000000000000000000000000000000000000000000000000000000815290515f926001600160a01b03169163cb23bcb59160048083019260209291908290030181865afa158015610606573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061062a91906116a2565b5f549091506001600160a01b03808316911603610673576040517fd054909f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6005545f90600181016106b557505f919050565b919050565b6006545f906001600160a01b03167fffffffffffffffffffffffff000000000000000000000000000000000000000181016106b5575f91505090565b6006545f907401000000000000000000000000000000000000000090046bffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffff000000000000000000000001810161074f575f91505090565b6bffffffffffffffffffffffff16919050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361081a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c0000000000000000000000000000000000000000606482015260840161059d565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61038054336001600160a01b03821614610890576040517f23295f0e0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b038216602482015260440161059d565b6004546001600160801b03908116146108d5576040517fd0afb66100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50506040805160c0810182526001600160801b0380825260208201525f199181018290526001600160a01b0360608201526bffffffffffffffffffffffff60808201525f60a090910181905260048290556005829055600691909155600755565b5f88888888888888886040516020016109569897969594939291906116bd565b60405160208183030381529060405280519060200120905098975050505050505050565b5f546001600160a01b031633146109d1575f546040517f3933c6fc0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03909116602482015260440161059d565b5f8281526003602052604080822083905551829184917fb4df3847300f076a369cd76d2314b470a1194d9e8a6bb97f1860aee88a5f67489190a35050565b6004545f9070010000000000000000000000000000000090046001600160801b03167fffffffffffffffffffffffffffffffff000000000000000000000000000000018101610426575f91505090565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610b17576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c0000000000000000000000000000000000000000606482015260840161059d565b6001600160a01b038116610b57576040517f1ad0f74300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001546001600160a01b031615610b9a576040517fef34ca5c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805160c0810182526001600160801b038082526020808301919091525f198284018190526001600160a01b03606084018190526bffffffffffffffffffffffff60808501525f60a0909401849052600482815560058390556006929092556007939093556001805473ffffffffffffffffffffffffffffffffffffffff1916938616938417905583517fcb23bcb50000000000000000000000000000000000000000000000000000000081529351929363cb23bcb593818301939290918290030181865afa158015610c70573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c9491906116a2565b5f805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039290921691909117905550565b82515f90610100811115610d0e576040517ffdac331e00000000000000000000000000000000000000000000000000000000815260048101829052610100602482015260440161059d565b825f5b82811015610d6c575f878281518110610d2c57610d2c611727565b60200260200101519050816001901b87165f03610d5557825f528060205260405f209250610d63565b805f528260205260405f2092505b50600101610d11565b5095945050505050565b610100835110610db75782516040517fab6a068300000000000000000000000000000000000000000000000000000000815260040161059d91815260200190565b8251610dc490600261182f565b8210610e14578183516002610dd9919061182f565b6040517f0b8a724b0000000000000000000000000000000000000000000000000000000081526004810192909252602482015260440161059d565b5f610e208484846102e9565b5f81815260036020526040902054909150610e6a576040517f8730d7c80000000000000000000000000000000000000000000000000000000081526004810182905260240161059d565b5f805f610e76866111b8565b925092509250610e8682826111f2565b15610ec0576040517f9715b8d30000000000000000000000000000000000000000000000000000000081526004810187905260240161059d565b5f92835260026020526040909220600190911b909117905550505050565b5f886001600160a01b0316886001600160a01b03167f20af7f3bbfe38132b8900ae295cd9c8d1914be7052d061a511f3f728dab189648c604051610f2491815260200190565b60405180910390a45f8390505f60046040518060c00160405290815f82015f9054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020015f820160109054906101000a90046001600160801b03166001600160801b03166001600160801b0316815260200160018201548152602001600282015f9054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016002820160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff16815260200160038201548152505090506040518060c00160405280896001600160801b03168152602001876001600160801b031681526020018c5f1b81526020018b6001600160a01b03168152602001886bffffffffffffffffffffffff1681526020016110765f90565b905280516020808301516001600160801b0390811670010000000000000000000000000000000002921691909117600455604080830151600555606083015160808401516bffffffffffffffffffffffff1674010000000000000000000000000000000000000000026001600160a01b039091161760065560a0909201516007558151601f8601829004820281018201909252848252611134918b9185919088908890819084018382808284375f9201919091525061120192505050565b805160208201516001600160801b03908116700100000000000000000000000000000000029116176004556040810151600555606081015160808201516bffffffffffffffffffffffff1674010000000000000000000000000000000000000000026001600160a01b039091161760065560a0015160075550505050505050505050565b5f8080806111c760ff8661184e565b90505f6111d560ff87611861565b5f8381526002602052604090205492979096509194509092505050565b80821c60011615155b92915050565b6001546040517f9e5d4c490000000000000000000000000000000000000000000000000000000081525f9182916001600160a01b0390911690639e5d4c499061125290889088908890600401611874565b5f604051808303815f875af115801561126d573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261129491908101906118c0565b91509150816112df578051156112ad5780518082602001fd5b6040517f376fb55a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050565b634e487b7160e01b5f52604160045260245ffd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611323576113236112e6565b604052919050565b5f805f6060848603121561133d575f80fd5b833567ffffffffffffffff80821115611354575f80fd5b818601915086601f830112611367575f80fd5b813560208282111561137b5761137b6112e6565b8160051b925061138c8184016112fa565b828152928401810192818101908a8511156113a5575f80fd5b948201945b848610156113c3578535825294820194908201906113aa565b9a918901359950506040909701359695505050505050565b6001600160a01b03811681146113ef575f80fd5b50565b80356106b5816113db565b5f8083601f84011261140d575f80fd5b50813567ffffffffffffffff811115611424575f80fd5b60208301915083602082850101111561143b575f80fd5b9250929050565b5f805f805f805f805f805f6101208c8e03121561145d575f80fd5b8b3567ffffffffffffffff80821115611474575f80fd5b818e0191508e601f830112611487575f80fd5b813581811115611495575f80fd5b8f60208260051b85010111156114a9575f80fd5b60208381019e50909c508e01359a506114c460408f016113f2565b99506114d260608f016113f2565b985060808e0135975060a08e0135965060c08e0135955060e08e013594506101008e0135915080821115611504575f80fd5b506115118e828f016113fd565b915080935050809150509295989b509295989b9093969950565b5f805f805f805f805f6101008a8c031215611544575f80fd5b8935985060208a0135611556816113db565b975060408a0135611566816113db565b965060608a0135955060808a0135945060a08a0135935060c08a0135925060e08a013567ffffffffffffffff81111561159d575f80fd5b6115a98c828d016113fd565b915080935050809150509295985092959850929598565b5f602082840312156115d0575f80fd5b5035919050565b5f805f805f805f8060e0898b0312156115ee575f80fd5b88356115f9816113db565b97506020890135611609816113db565b965060408901359550606089013594506080890135935060a0890135925060c089013567ffffffffffffffff811115611640575f80fd5b61164c8b828c016113fd565b999c989b5096995094979396929594505050565b5f8060408385031215611671575f80fd5b50508035926020909101359150565b5f60208284031215611690575f80fd5b813561169b816113db565b9392505050565b5f602082840312156116b2575f80fd5b815161169b816113db565b5f7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000808b60601b168352808a60601b16601484015250876028830152866048830152856068830152846088830152828460a8840137505f910160a801908152979650505050505050565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b600181815b8085111561178957815f190482111561176f5761176f61173b565b8085161561177c57918102915b93841c9390800290611754565b509250929050565b5f8261179f575060016111fb565b816117ab57505f6111fb565b81600181146117c157600281146117cb576117e7565b60019150506111fb565b60ff8411156117dc576117dc61173b565b50506001821b6111fb565b5060208310610133831016604e8410600b841016171561180a575081810a6111fb565b611814838361174f565b805f19048211156118275761182761173b565b029392505050565b5f61169b8383611791565b634e487b7160e01b5f52601260045260245ffd5b5f8261185c5761185c61183a565b500490565b5f8261186f5761186f61183a565b500690565b6001600160a01b0384168152826020820152606060408201525f82518060608401528060208501608085015e5f608082850101526080601f19601f830116840101915050949350505050565b5f80604083850312156118d1575f80fd5b825180151581146118e0575f80fd5b8092505060208084015167ffffffffffffffff808211156118ff575f80fd5b818601915086601f830112611912575f80fd5b815181811115611924576119246112e6565b61193684601f19601f840116016112fa565b9150808252878482850101111561194b575f80fd5b808484018584015e5f84828401015250809350505050925092905056fea2646970667358221220306130963226484c8ef6a20aa894423789687fb90737e2e23aab4d93fa15b90d64736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xA0`@R0`\x80R4\x80\x15`\x12W_\x80\xFD[P`\x80Qa\x19\x9Ea\x002_9_\x81\x81a\x07l\x01Ra\ni\x01Ra\x19\x9E_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\x01bW_5`\xE0\x1C\x80c\x95\xFC\xEAx\x11a\0\xC7W\x80c\xC4\xD6m\xE8\x11a\0}W\x80c\xCB#\xBC\xB5\x11a\0cW\x80c\xCB#\xBC\xB5\x14a\x02\xA5W\x80c\xD5\xB5\xCC#\x14a\x02\xB7W\x80c\xE7\x8C\xEA\x92\x14a\x02\xD6W_\x80\xFD[\x80c\xC4\xD6m\xE8\x14a\x02rW\x80c\xC7Q\x84\xDF\x14a\x02\x85W_\x80\xFD[\x80c\xA0L\xEE`\x11a\0\xADW\x80c\xA0L\xEE`\x14a\x028W\x80c\xAEm\xEA\xD7\x14a\x02KW\x80c\xB0\xF3\x057\x14a\x02jW_\x80\xFD[\x80c\x95\xFC\xEAx\x14a\x02\x1DW\x80c\x9F\x0C\x04\xBF\x14a\x02%W_\x80\xFD[\x80cZ\x12\x9E\xFE\x11a\x01\x1CW\x80cr\xF2\xA8\xC7\x11a\x01\x02W\x80cr\xF2\xA8\xC7\x14a\x01\xEDW\x80c\x80d\x8B\x02\x14a\x01\xF5W\x80c\x85\x15\xBCj\x14a\x02\x15W_\x80\xFD[\x80cZ\x12\x9E\xFE\x14a\x01\xC2W\x80cj\xE7\x1F\x12\x14a\x01\xE5W_\x80\xFD[\x80c\x11\x98Rq\x11a\x01LW\x80c\x11\x98Rq\x14a\x01\xA1W\x80c(\x8E[\x10\x14a\x01\xA7W\x80cFTw\x90\x14a\x01\xBAW_\x80\xFD[\x80bt6\xD3\x14a\x01fW\x80c\x08cZ\x95\x14a\x01\x8CW[_\x80\xFD[a\x01ya\x01t6`\x04a\x13+V[a\x02\xE9V[`@Q\x90\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\x01\x9Fa\x01\x9A6`\x04a\x14BV[a\x03%V[\0[_a\x01yV[a\x01\x9Fa\x01\xB56`\x04a\x15+V[a\x03\x96V[a\x01ya\x03\xEAV[a\x01\xD5a\x01\xD06`\x04a\x15\xC0V[a\x044V[`@Q\x90\x15\x15\x81R` \x01a\x01\x83V[a\x01\x9Fa\x04OV[a\x01ya\x06\xA1V[a\x01\xFDa\x06\xBAV[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01a\x01\x83V[a\x01ya\x06\xF6V[a\x01\x9Fa\x07bV[a\x01ya\x0236`\x04a\x15\xD7V[a\t6V[a\x01\x9Fa\x02F6`\x04a\x16`V[a\tzV[a\x01ya\x02Y6`\x04a\x15\xC0V[`\x03` R_\x90\x81R`@\x90 T\x81V[a\x01ya\n\x0FV[a\x01\x9Fa\x02\x806`\x04a\x16\x80V[a\n_V[a\x02\x8D`\x02\x81V[`@Q`\x01`\x01`\x80\x1B\x03\x90\x91\x16\x81R` \x01a\x01\x83V[_Ta\x01\xFD\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[a\x01ya\x02\xC56`\x04a\x15\xC0V[`\x02` R_\x90\x81R`@\x90 T\x81V[`\x01Ta\x01\xFD\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[_a\x03\x1D\x84\x84\x84`@Q` \x01a\x03\x02\x91\x81R` \x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 a\x0C\xC3V[\x94\x93PPPPV[_a\x036\x89\x89\x89\x89\x89\x89\x89\x89a\t6V[\x90Pa\x03w\x8C\x8C\x80\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83` \x02\x80\x82\x847_\x92\x01\x91\x90\x91RP\x8E\x92P\x85\x91Pa\rv\x90PV[a\x03\x88\x8A\x8A\x8A\x8A\x8A\x8A\x8A\x8A\x8Aa\x0E\xDEV[PPPPPPPPPPPPV[3\x15a\x03\xCEW`@Q\x7F\x0E\x13\xB6\x9D\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a\x03\xDF\x89\x89\x89\x89\x89\x89\x89\x89\x89a\x0E\xDEV[PPPPPPPPPV[`\x04T_\x90`\x01`\x01`\x80\x1B\x03\x16\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\x81\x01a\x04&W_\x91PP\x90V[`\x01`\x01`\x80\x1B\x03\x16\x91\x90PV[_\x80_a\x04@\x84a\x11\xB8V[\x92P\x92PPa\x03\x1D\x82\x82a\x11\xF2V[_\x80T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\x8D\xA5\xCB[`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x04\x9DW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04\xC1\x91\x90a\x16\xA2V[`\x01`\x01`\xA0\x1B\x03\x163`\x01`\x01`\xA0\x1B\x03\x16\x14a\x05\xA6W_T`@\x80Q\x7F\x8D\xA5\xCB[\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\x90Q3\x92`\x01`\x01`\xA0\x1B\x03\x16\x91c\x8D\xA5\xCB[\x91`\x04\x80\x83\x01\x92` \x92\x91\x90\x82\x90\x03\x01\x81\x86Z\xFA\x15\x80\x15a\x058W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x05\\\x91\x90a\x16\xA2V[`@Q\x7F#)_\x0E\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16`\x04\x82\x01R\x91\x16`$\x82\x01R`D\x01[`@Q\x80\x91\x03\x90\xFD[`\x01T`@\x80Q\x7F\xCB#\xBC\xB5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\x90Q_\x92`\x01`\x01`\xA0\x1B\x03\x16\x91c\xCB#\xBC\xB5\x91`\x04\x80\x83\x01\x92` \x92\x91\x90\x82\x90\x03\x01\x81\x86Z\xFA\x15\x80\x15a\x06\x06W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x06*\x91\x90a\x16\xA2V[_T\x90\x91P`\x01`\x01`\xA0\x1B\x03\x80\x83\x16\x91\x16\x03a\x06sW`@Q\x7F\xD0T\x90\x9F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x80Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90UV[`\x05T_\x90`\x01\x81\x01a\x06\xB5WP_\x91\x90PV[\x91\x90PV[`\x06T_\x90`\x01`\x01`\xA0\x1B\x03\x16\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\x81\x01a\x06\xB5W_\x91PP\x90V[`\x06T_\x90t\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x04k\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\x01\x81\x01a\x07OW_\x91PP\x90V[k\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x91\x90PV[`\x01`\x01`\xA0\x1B\x03\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x160\x03a\x08\x1AW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`,`$\x82\x01R\x7FFunction must be called through `D\x82\x01R\x7Fdelegatecall\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x05\x9DV[\x7F\xB51'hJV\x8B1s\xAE\x13\xB9\xF8\xA6\x01n$>c\xB6\xE8\xEE\x11x\xD6\xA7\x17\x85\x0B]a\x03\x80T3`\x01`\x01`\xA0\x1B\x03\x82\x16\x14a\x08\x90W`@Q\x7F#)_\x0E\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R3`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x82\x16`$\x82\x01R`D\x01a\x05\x9DV[`\x04T`\x01`\x01`\x80\x1B\x03\x90\x81\x16\x14a\x08\xD5W`@Q\x7F\xD0\xAF\xB6a\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[PP`@\x80Q`\xC0\x81\x01\x82R`\x01`\x01`\x80\x1B\x03\x80\x82R` \x82\x01R_\x19\x91\x81\x01\x82\x90R`\x01`\x01`\xA0\x1B\x03``\x82\x01Rk\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x80\x82\x01R_`\xA0\x90\x91\x01\x81\x90R`\x04\x82\x90U`\x05\x82\x90U`\x06\x91\x90\x91U`\x07UV[_\x88\x88\x88\x88\x88\x88\x88\x88`@Q` \x01a\tV\x98\x97\x96\x95\x94\x93\x92\x91\x90a\x16\xBDV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P\x98\x97PPPPPPPPV[_T`\x01`\x01`\xA0\x1B\x03\x163\x14a\t\xD1W_T`@Q\x7F93\xC6\xFC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R3`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16`$\x82\x01R`D\x01a\x05\x9DV[_\x82\x81R`\x03` R`@\x80\x82 \x83\x90UQ\x82\x91\x84\x91\x7F\xB4\xDF8G0\x0F\x07j6\x9C\xD7m#\x14\xB4p\xA1\x19M\x9E\x8Ak\xB9\x7F\x18`\xAE\xE8\x8A_gH\x91\x90\xA3PPV[`\x04T_\x90p\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x04`\x01`\x01`\x80\x1B\x03\x16\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\x81\x01a\x04&W_\x91PP\x90V[`\x01`\x01`\xA0\x1B\x03\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x160\x03a\x0B\x17W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`,`$\x82\x01R\x7FFunction must be called through `D\x82\x01R\x7Fdelegatecall\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x05\x9DV[`\x01`\x01`\xA0\x1B\x03\x81\x16a\x0BWW`@Q\x7F\x1A\xD0\xF7C\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x01T`\x01`\x01`\xA0\x1B\x03\x16\x15a\x0B\x9AW`@Q\x7F\xEF4\xCA\\\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`@\x80Q`\xC0\x81\x01\x82R`\x01`\x01`\x80\x1B\x03\x80\x82R` \x80\x83\x01\x91\x90\x91R_\x19\x82\x84\x01\x81\x90R`\x01`\x01`\xA0\x1B\x03``\x84\x01\x81\x90Rk\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x80\x85\x01R_`\xA0\x90\x94\x01\x84\x90R`\x04\x82\x81U`\x05\x83\x90U`\x06\x92\x90\x92U`\x07\x93\x90\x93U`\x01\x80Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16\x93\x86\x16\x93\x84\x17\x90U\x83Q\x7F\xCB#\xBC\xB5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\x93Q\x92\x93c\xCB#\xBC\xB5\x93\x81\x83\x01\x93\x92\x90\x91\x82\x90\x03\x01\x81\x86Z\xFA\x15\x80\x15a\x0CpW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0C\x94\x91\x90a\x16\xA2V[_\x80Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90UPV[\x82Q_\x90a\x01\0\x81\x11\x15a\r\x0EW`@Q\x7F\xFD\xAC3\x1E\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x82\x90Ra\x01\0`$\x82\x01R`D\x01a\x05\x9DV[\x82_[\x82\x81\x10\x15a\rlW_\x87\x82\x81Q\x81\x10a\r,Wa\r,a\x17'V[` \x02` \x01\x01Q\x90P\x81`\x01\x90\x1B\x87\x16_\x03a\rUW\x82_R\x80` R`@_ \x92Pa\rcV[\x80_R\x82` R`@_ \x92P[P`\x01\x01a\r\x11V[P\x95\x94PPPPPV[a\x01\0\x83Q\x10a\r\xB7W\x82Q`@Q\x7F\xABj\x06\x83\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x05\x9D\x91\x81R` \x01\x90V[\x82Qa\r\xC4\x90`\x02a\x18/V[\x82\x10a\x0E\x14W\x81\x83Q`\x02a\r\xD9\x91\x90a\x18/V[`@Q\x7F\x0B\x8ArK\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x92\x90\x92R`$\x82\x01R`D\x01a\x05\x9DV[_a\x0E \x84\x84\x84a\x02\xE9V[_\x81\x81R`\x03` R`@\x90 T\x90\x91Pa\x0EjW`@Q\x7F\x870\xD7\xC8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x82\x90R`$\x01a\x05\x9DV[_\x80_a\x0Ev\x86a\x11\xB8V[\x92P\x92P\x92Pa\x0E\x86\x82\x82a\x11\xF2V[\x15a\x0E\xC0W`@Q\x7F\x97\x15\xB8\xD3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x87\x90R`$\x01a\x05\x9DV[_\x92\x83R`\x02` R`@\x90\x92 `\x01\x90\x91\x1B\x90\x91\x17\x90UPPPPV[_\x88`\x01`\x01`\xA0\x1B\x03\x16\x88`\x01`\x01`\xA0\x1B\x03\x16\x7F \xAF\x7F;\xBF\xE3\x812\xB8\x90\n\xE2\x95\xCD\x9C\x8D\x19\x14\xBEpR\xD0a\xA5\x11\xF3\xF7(\xDA\xB1\x89d\x8C`@Qa\x0F$\x91\x81R` \x01\x90V[`@Q\x80\x91\x03\x90\xA4_\x83\x90P_`\x04`@Q\x80`\xC0\x01`@R\x90\x81_\x82\x01_\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\x80\x1B\x03\x16`\x01`\x01`\x80\x1B\x03\x16`\x01`\x01`\x80\x1B\x03\x16\x81R` \x01_\x82\x01`\x10\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\x80\x1B\x03\x16`\x01`\x01`\x80\x1B\x03\x16`\x01`\x01`\x80\x1B\x03\x16\x81R` \x01`\x01\x82\x01T\x81R` \x01`\x02\x82\x01_\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01`\x02\x82\x01`\x14\x90T\x90a\x01\0\n\x90\x04k\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16k\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16k\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\x03\x82\x01T\x81RPP\x90P`@Q\x80`\xC0\x01`@R\x80\x89`\x01`\x01`\x80\x1B\x03\x16\x81R` \x01\x87`\x01`\x01`\x80\x1B\x03\x16\x81R` \x01\x8C_\x1B\x81R` \x01\x8B`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x88k\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01a\x10v_\x90V[\x90R\x80Q` \x80\x83\x01Q`\x01`\x01`\x80\x1B\x03\x90\x81\x16p\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\x92\x16\x91\x90\x91\x17`\x04U`@\x80\x83\x01Q`\x05U``\x83\x01Q`\x80\x84\x01Qk\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16t\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x17`\x06U`\xA0\x90\x92\x01Q`\x07U\x81Q`\x1F\x86\x01\x82\x90\x04\x82\x02\x81\x01\x82\x01\x90\x92R\x84\x82Ra\x114\x91\x8B\x91\x85\x91\x90\x88\x90\x88\x90\x81\x90\x84\x01\x83\x82\x80\x82\x847_\x92\x01\x91\x90\x91RPa\x12\x01\x92PPPV[\x80Q` \x82\x01Q`\x01`\x01`\x80\x1B\x03\x90\x81\x16p\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\x91\x16\x17`\x04U`@\x81\x01Q`\x05U``\x81\x01Q`\x80\x82\x01Qk\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16t\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x17`\x06U`\xA0\x01Q`\x07UPPPPPPPPPPV[_\x80\x80\x80a\x11\xC7`\xFF\x86a\x18NV[\x90P_a\x11\xD5`\xFF\x87a\x18aV[_\x83\x81R`\x02` R`@\x90 T\x92\x97\x90\x96P\x91\x94P\x90\x92PPPV[\x80\x82\x1C`\x01\x16\x15\x15[\x92\x91PPV[`\x01T`@Q\x7F\x9E]LI\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R_\x91\x82\x91`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90c\x9E]LI\x90a\x12R\x90\x88\x90\x88\x90\x88\x90`\x04\x01a\x18tV[_`@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x12mW=_\x80>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x12\x94\x91\x90\x81\x01\x90a\x18\xC0V[\x91P\x91P\x81a\x12\xDFW\x80Q\x15a\x12\xADW\x80Q\x80\x82` \x01\xFD[`@Q\x7F7o\xB5Z\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[PPPPPV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x13#Wa\x13#a\x12\xE6V[`@R\x91\x90PV[_\x80_``\x84\x86\x03\x12\x15a\x13=W_\x80\xFD[\x835g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x13TW_\x80\xFD[\x81\x86\x01\x91P\x86`\x1F\x83\x01\x12a\x13gW_\x80\xFD[\x815` \x82\x82\x11\x15a\x13{Wa\x13{a\x12\xE6V[\x81`\x05\x1B\x92Pa\x13\x8C\x81\x84\x01a\x12\xFAV[\x82\x81R\x92\x84\x01\x81\x01\x92\x81\x81\x01\x90\x8A\x85\x11\x15a\x13\xA5W_\x80\xFD[\x94\x82\x01\x94[\x84\x86\x10\x15a\x13\xC3W\x855\x82R\x94\x82\x01\x94\x90\x82\x01\x90a\x13\xAAV[\x9A\x91\x89\x015\x99PP`@\x90\x97\x015\x96\x95PPPPPPV[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x13\xEFW_\x80\xFD[PV[\x805a\x06\xB5\x81a\x13\xDBV[_\x80\x83`\x1F\x84\x01\x12a\x14\rW_\x80\xFD[P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x14$W_\x80\xFD[` \x83\x01\x91P\x83` \x82\x85\x01\x01\x11\x15a\x14;W_\x80\xFD[\x92P\x92\x90PV[_\x80_\x80_\x80_\x80_\x80_a\x01 \x8C\x8E\x03\x12\x15a\x14]W_\x80\xFD[\x8B5g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x14tW_\x80\xFD[\x81\x8E\x01\x91P\x8E`\x1F\x83\x01\x12a\x14\x87W_\x80\xFD[\x815\x81\x81\x11\x15a\x14\x95W_\x80\xFD[\x8F` \x82`\x05\x1B\x85\x01\x01\x11\x15a\x14\xA9W_\x80\xFD[` \x83\x81\x01\x9EP\x90\x9CP\x8E\x015\x9APa\x14\xC4`@\x8F\x01a\x13\xF2V[\x99Pa\x14\xD2``\x8F\x01a\x13\xF2V[\x98P`\x80\x8E\x015\x97P`\xA0\x8E\x015\x96P`\xC0\x8E\x015\x95P`\xE0\x8E\x015\x94Pa\x01\0\x8E\x015\x91P\x80\x82\x11\x15a\x15\x04W_\x80\xFD[Pa\x15\x11\x8E\x82\x8F\x01a\x13\xFDV[\x91P\x80\x93PP\x80\x91PP\x92\x95\x98\x9BP\x92\x95\x98\x9B\x90\x93\x96\x99PV[_\x80_\x80_\x80_\x80_a\x01\0\x8A\x8C\x03\x12\x15a\x15DW_\x80\xFD[\x895\x98P` \x8A\x015a\x15V\x81a\x13\xDBV[\x97P`@\x8A\x015a\x15f\x81a\x13\xDBV[\x96P``\x8A\x015\x95P`\x80\x8A\x015\x94P`\xA0\x8A\x015\x93P`\xC0\x8A\x015\x92P`\xE0\x8A\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x15\x9DW_\x80\xFD[a\x15\xA9\x8C\x82\x8D\x01a\x13\xFDV[\x91P\x80\x93PP\x80\x91PP\x92\x95\x98P\x92\x95\x98P\x92\x95\x98V[_` \x82\x84\x03\x12\x15a\x15\xD0W_\x80\xFD[P5\x91\x90PV[_\x80_\x80_\x80_\x80`\xE0\x89\x8B\x03\x12\x15a\x15\xEEW_\x80\xFD[\x885a\x15\xF9\x81a\x13\xDBV[\x97P` \x89\x015a\x16\t\x81a\x13\xDBV[\x96P`@\x89\x015\x95P``\x89\x015\x94P`\x80\x89\x015\x93P`\xA0\x89\x015\x92P`\xC0\x89\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x16@W_\x80\xFD[a\x16L\x8B\x82\x8C\x01a\x13\xFDV[\x99\x9C\x98\x9BP\x96\x99P\x94\x97\x93\x96\x92\x95\x94PPPV[_\x80`@\x83\x85\x03\x12\x15a\x16qW_\x80\xFD[PP\x805\x92` \x90\x91\x015\x91PV[_` \x82\x84\x03\x12\x15a\x16\x90W_\x80\xFD[\x815a\x16\x9B\x81a\x13\xDBV[\x93\x92PPPV[_` \x82\x84\x03\x12\x15a\x16\xB2W_\x80\xFD[\x81Qa\x16\x9B\x81a\x13\xDBV[_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\x80\x8B``\x1B\x16\x83R\x80\x8A``\x1B\x16`\x14\x84\x01RP\x87`(\x83\x01R\x86`H\x83\x01R\x85`h\x83\x01R\x84`\x88\x83\x01R\x82\x84`\xA8\x84\x017P_\x91\x01`\xA8\x01\x90\x81R\x97\x96PPPPPPPV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[`\x01\x81\x81[\x80\x85\x11\x15a\x17\x89W\x81_\x19\x04\x82\x11\x15a\x17oWa\x17oa\x17;V[\x80\x85\x16\x15a\x17|W\x91\x81\x02\x91[\x93\x84\x1C\x93\x90\x80\x02\x90a\x17TV[P\x92P\x92\x90PV[_\x82a\x17\x9FWP`\x01a\x11\xFBV[\x81a\x17\xABWP_a\x11\xFBV[\x81`\x01\x81\x14a\x17\xC1W`\x02\x81\x14a\x17\xCBWa\x17\xE7V[`\x01\x91PPa\x11\xFBV[`\xFF\x84\x11\x15a\x17\xDCWa\x17\xDCa\x17;V[PP`\x01\x82\x1Ba\x11\xFBV[P` \x83\x10a\x013\x83\x10\x16`N\x84\x10`\x0B\x84\x10\x16\x17\x15a\x18\nWP\x81\x81\na\x11\xFBV[a\x18\x14\x83\x83a\x17OV[\x80_\x19\x04\x82\x11\x15a\x18'Wa\x18'a\x17;V[\x02\x93\x92PPPV[_a\x16\x9B\x83\x83a\x17\x91V[cNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[_\x82a\x18\\Wa\x18\\a\x18:V[P\x04\x90V[_\x82a\x18oWa\x18oa\x18:V[P\x06\x90V[`\x01`\x01`\xA0\x1B\x03\x84\x16\x81R\x82` \x82\x01R```@\x82\x01R_\x82Q\x80``\x84\x01R\x80` \x85\x01`\x80\x85\x01^_`\x80\x82\x85\x01\x01R`\x80`\x1F\x19`\x1F\x83\x01\x16\x84\x01\x01\x91PP\x94\x93PPPPV[_\x80`@\x83\x85\x03\x12\x15a\x18\xD1W_\x80\xFD[\x82Q\x80\x15\x15\x81\x14a\x18\xE0W_\x80\xFD[\x80\x92PP` \x80\x84\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x18\xFFW_\x80\xFD[\x81\x86\x01\x91P\x86`\x1F\x83\x01\x12a\x19\x12W_\x80\xFD[\x81Q\x81\x81\x11\x15a\x19$Wa\x19$a\x12\xE6V[a\x196\x84`\x1F\x19`\x1F\x84\x01\x16\x01a\x12\xFAV[\x91P\x80\x82R\x87\x84\x82\x85\x01\x01\x11\x15a\x19KW_\x80\xFD[\x80\x84\x84\x01\x85\x84\x01^_\x84\x82\x84\x01\x01RP\x80\x93PPPP\x92P\x92\x90PV\xFE\xA2dipfsX\"\x12 0a0\x962&HL\x8E\xF6\xA2\n\xA8\x94B7\x89h\x7F\xB9\x077\xE2\xE2:\xABM\x93\xFA\x15\xB9\rdsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f80fd5b5060043610610162575f3560e01c806395fcea78116100c7578063c4d66de81161007d578063cb23bcb511610063578063cb23bcb5146102a5578063d5b5cc23146102b7578063e78cea92146102d6575f80fd5b8063c4d66de814610272578063c75184df14610285575f80fd5b8063a04cee60116100ad578063a04cee6014610238578063ae6dead71461024b578063b0f305371461026a575f80fd5b806395fcea781461021d5780639f0c04bf14610225575f80fd5b80635a129efe1161011c57806372f2a8c71161010257806372f2a8c7146101ed57806380648b02146101f55780638515bc6a14610215575f80fd5b80635a129efe146101c25780636ae71f12146101e5575f80fd5b8063119852711161014c57806311985271146101a1578063288e5b10146101a757806346547790146101ba575f80fd5b80627436d31461016657806308635a951461018c575b5f80fd5b61017961017436600461132b565b6102e9565b6040519081526020015b60405180910390f35b61019f61019a366004611442565b610325565b005b5f610179565b61019f6101b536600461152b565b610396565b6101796103ea565b6101d56101d03660046115c0565b610434565b6040519015158152602001610183565b61019f61044f565b6101796106a1565b6101fd6106ba565b6040516001600160a01b039091168152602001610183565b6101796106f6565b61019f610762565b6101796102333660046115d7565b610936565b61019f610246366004611660565b61097a565b6101796102593660046115c0565b60036020525f908152604090205481565b610179610a0f565b61019f610280366004611680565b610a5f565b61028d600281565b6040516001600160801b039091168152602001610183565b5f546101fd906001600160a01b031681565b6101796102c53660046115c0565b60026020525f908152604090205481565b6001546101fd906001600160a01b031681565b5f61031d84848460405160200161030291815260200190565b60405160208183030381529060405280519060200120610cc3565b949350505050565b5f6103368989898989898989610936565b90506103778c8c808060200260200160405190810160405280939291908181526020018383602002808284375f920191909152508e9250859150610d769050565b6103888a8a8a8a8a8a8a8a8a610ede565b505050505050505050505050565b33156103ce576040517f0e13b69d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6103df898989898989898989610ede565b505050505050505050565b6004545f906001600160801b03167fffffffffffffffffffffffffffffffff000000000000000000000000000000018101610426575f91505090565b6001600160801b0316919050565b5f805f610440846111b8565b925092505061031d82826111f2565b5f8054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561049d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104c191906116a2565b6001600160a01b0316336001600160a01b0316146105a6575f54604080517f8da5cb5b000000000000000000000000000000000000000000000000000000008152905133926001600160a01b031691638da5cb5b9160048083019260209291908290030181865afa158015610538573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061055c91906116a2565b6040517f23295f0e0000000000000000000000000000000000000000000000000000000081526001600160a01b039283166004820152911660248201526044015b60405180910390fd5b600154604080517fcb23bcb500000000000000000000000000000000000000000000000000000000815290515f926001600160a01b03169163cb23bcb59160048083019260209291908290030181865afa158015610606573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061062a91906116a2565b5f549091506001600160a01b03808316911603610673576040517fd054909f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6005545f90600181016106b557505f919050565b919050565b6006545f906001600160a01b03167fffffffffffffffffffffffff000000000000000000000000000000000000000181016106b5575f91505090565b6006545f907401000000000000000000000000000000000000000090046bffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffff000000000000000000000001810161074f575f91505090565b6bffffffffffffffffffffffff16919050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361081a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c0000000000000000000000000000000000000000606482015260840161059d565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61038054336001600160a01b03821614610890576040517f23295f0e0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b038216602482015260440161059d565b6004546001600160801b03908116146108d5576040517fd0afb66100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50506040805160c0810182526001600160801b0380825260208201525f199181018290526001600160a01b0360608201526bffffffffffffffffffffffff60808201525f60a090910181905260048290556005829055600691909155600755565b5f88888888888888886040516020016109569897969594939291906116bd565b60405160208183030381529060405280519060200120905098975050505050505050565b5f546001600160a01b031633146109d1575f546040517f3933c6fc0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03909116602482015260440161059d565b5f8281526003602052604080822083905551829184917fb4df3847300f076a369cd76d2314b470a1194d9e8a6bb97f1860aee88a5f67489190a35050565b6004545f9070010000000000000000000000000000000090046001600160801b03167fffffffffffffffffffffffffffffffff000000000000000000000000000000018101610426575f91505090565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610b17576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c0000000000000000000000000000000000000000606482015260840161059d565b6001600160a01b038116610b57576040517f1ad0f74300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001546001600160a01b031615610b9a576040517fef34ca5c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805160c0810182526001600160801b038082526020808301919091525f198284018190526001600160a01b03606084018190526bffffffffffffffffffffffff60808501525f60a0909401849052600482815560058390556006929092556007939093556001805473ffffffffffffffffffffffffffffffffffffffff1916938616938417905583517fcb23bcb50000000000000000000000000000000000000000000000000000000081529351929363cb23bcb593818301939290918290030181865afa158015610c70573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c9491906116a2565b5f805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039290921691909117905550565b82515f90610100811115610d0e576040517ffdac331e00000000000000000000000000000000000000000000000000000000815260048101829052610100602482015260440161059d565b825f5b82811015610d6c575f878281518110610d2c57610d2c611727565b60200260200101519050816001901b87165f03610d5557825f528060205260405f209250610d63565b805f528260205260405f2092505b50600101610d11565b5095945050505050565b610100835110610db75782516040517fab6a068300000000000000000000000000000000000000000000000000000000815260040161059d91815260200190565b8251610dc490600261182f565b8210610e14578183516002610dd9919061182f565b6040517f0b8a724b0000000000000000000000000000000000000000000000000000000081526004810192909252602482015260440161059d565b5f610e208484846102e9565b5f81815260036020526040902054909150610e6a576040517f8730d7c80000000000000000000000000000000000000000000000000000000081526004810182905260240161059d565b5f805f610e76866111b8565b925092509250610e8682826111f2565b15610ec0576040517f9715b8d30000000000000000000000000000000000000000000000000000000081526004810187905260240161059d565b5f92835260026020526040909220600190911b909117905550505050565b5f886001600160a01b0316886001600160a01b03167f20af7f3bbfe38132b8900ae295cd9c8d1914be7052d061a511f3f728dab189648c604051610f2491815260200190565b60405180910390a45f8390505f60046040518060c00160405290815f82015f9054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020015f820160109054906101000a90046001600160801b03166001600160801b03166001600160801b0316815260200160018201548152602001600282015f9054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016002820160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff16815260200160038201548152505090506040518060c00160405280896001600160801b03168152602001876001600160801b031681526020018c5f1b81526020018b6001600160a01b03168152602001886bffffffffffffffffffffffff1681526020016110765f90565b905280516020808301516001600160801b0390811670010000000000000000000000000000000002921691909117600455604080830151600555606083015160808401516bffffffffffffffffffffffff1674010000000000000000000000000000000000000000026001600160a01b039091161760065560a0909201516007558151601f8601829004820281018201909252848252611134918b9185919088908890819084018382808284375f9201919091525061120192505050565b805160208201516001600160801b03908116700100000000000000000000000000000000029116176004556040810151600555606081015160808201516bffffffffffffffffffffffff1674010000000000000000000000000000000000000000026001600160a01b039091161760065560a0015160075550505050505050505050565b5f8080806111c760ff8661184e565b90505f6111d560ff87611861565b5f8381526002602052604090205492979096509194509092505050565b80821c60011615155b92915050565b6001546040517f9e5d4c490000000000000000000000000000000000000000000000000000000081525f9182916001600160a01b0390911690639e5d4c499061125290889088908890600401611874565b5f604051808303815f875af115801561126d573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261129491908101906118c0565b91509150816112df578051156112ad5780518082602001fd5b6040517f376fb55a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050565b634e487b7160e01b5f52604160045260245ffd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611323576113236112e6565b604052919050565b5f805f6060848603121561133d575f80fd5b833567ffffffffffffffff80821115611354575f80fd5b818601915086601f830112611367575f80fd5b813560208282111561137b5761137b6112e6565b8160051b925061138c8184016112fa565b828152928401810192818101908a8511156113a5575f80fd5b948201945b848610156113c3578535825294820194908201906113aa565b9a918901359950506040909701359695505050505050565b6001600160a01b03811681146113ef575f80fd5b50565b80356106b5816113db565b5f8083601f84011261140d575f80fd5b50813567ffffffffffffffff811115611424575f80fd5b60208301915083602082850101111561143b575f80fd5b9250929050565b5f805f805f805f805f805f6101208c8e03121561145d575f80fd5b8b3567ffffffffffffffff80821115611474575f80fd5b818e0191508e601f830112611487575f80fd5b813581811115611495575f80fd5b8f60208260051b85010111156114a9575f80fd5b60208381019e50909c508e01359a506114c460408f016113f2565b99506114d260608f016113f2565b985060808e0135975060a08e0135965060c08e0135955060e08e013594506101008e0135915080821115611504575f80fd5b506115118e828f016113fd565b915080935050809150509295989b509295989b9093969950565b5f805f805f805f805f6101008a8c031215611544575f80fd5b8935985060208a0135611556816113db565b975060408a0135611566816113db565b965060608a0135955060808a0135945060a08a0135935060c08a0135925060e08a013567ffffffffffffffff81111561159d575f80fd5b6115a98c828d016113fd565b915080935050809150509295985092959850929598565b5f602082840312156115d0575f80fd5b5035919050565b5f805f805f805f8060e0898b0312156115ee575f80fd5b88356115f9816113db565b97506020890135611609816113db565b965060408901359550606089013594506080890135935060a0890135925060c089013567ffffffffffffffff811115611640575f80fd5b61164c8b828c016113fd565b999c989b5096995094979396929594505050565b5f8060408385031215611671575f80fd5b50508035926020909101359150565b5f60208284031215611690575f80fd5b813561169b816113db565b9392505050565b5f602082840312156116b2575f80fd5b815161169b816113db565b5f7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000808b60601b168352808a60601b16601484015250876028830152866048830152856068830152846088830152828460a8840137505f910160a801908152979650505050505050565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b600181815b8085111561178957815f190482111561176f5761176f61173b565b8085161561177c57918102915b93841c9390800290611754565b509250929050565b5f8261179f575060016111fb565b816117ab57505f6111fb565b81600181146117c157600281146117cb576117e7565b60019150506111fb565b60ff8411156117dc576117dc61173b565b50506001821b6111fb565b5060208310610133831016604e8410600b841016171561180a575081810a6111fb565b611814838361174f565b805f19048211156118275761182761173b565b029392505050565b5f61169b8383611791565b634e487b7160e01b5f52601260045260245ffd5b5f8261185c5761185c61183a565b500490565b5f8261186f5761186f61183a565b500690565b6001600160a01b0384168152826020820152606060408201525f82518060608401528060208501608085015e5f608082850101526080601f19601f830116840101915050949350505050565b5f80604083850312156118d1575f80fd5b825180151581146118e0575f80fd5b8092505060208084015167ffffffffffffffff808211156118ff575f80fd5b818601915086601f830112611912575f80fd5b815181811115611924576119246112e6565b61193684601f19601f840116016112fa565b9150808252878482850101111561194b575f80fd5b808484018584015e5f84828401015250809350505050925092905056fea2646970667358221220306130963226484c8ef6a20aa894423789687fb90737e2e23aab4d93fa15b90d64736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\x01bW_5`\xE0\x1C\x80c\x95\xFC\xEAx\x11a\0\xC7W\x80c\xC4\xD6m\xE8\x11a\0}W\x80c\xCB#\xBC\xB5\x11a\0cW\x80c\xCB#\xBC\xB5\x14a\x02\xA5W\x80c\xD5\xB5\xCC#\x14a\x02\xB7W\x80c\xE7\x8C\xEA\x92\x14a\x02\xD6W_\x80\xFD[\x80c\xC4\xD6m\xE8\x14a\x02rW\x80c\xC7Q\x84\xDF\x14a\x02\x85W_\x80\xFD[\x80c\xA0L\xEE`\x11a\0\xADW\x80c\xA0L\xEE`\x14a\x028W\x80c\xAEm\xEA\xD7\x14a\x02KW\x80c\xB0\xF3\x057\x14a\x02jW_\x80\xFD[\x80c\x95\xFC\xEAx\x14a\x02\x1DW\x80c\x9F\x0C\x04\xBF\x14a\x02%W_\x80\xFD[\x80cZ\x12\x9E\xFE\x11a\x01\x1CW\x80cr\xF2\xA8\xC7\x11a\x01\x02W\x80cr\xF2\xA8\xC7\x14a\x01\xEDW\x80c\x80d\x8B\x02\x14a\x01\xF5W\x80c\x85\x15\xBCj\x14a\x02\x15W_\x80\xFD[\x80cZ\x12\x9E\xFE\x14a\x01\xC2W\x80cj\xE7\x1F\x12\x14a\x01\xE5W_\x80\xFD[\x80c\x11\x98Rq\x11a\x01LW\x80c\x11\x98Rq\x14a\x01\xA1W\x80c(\x8E[\x10\x14a\x01\xA7W\x80cFTw\x90\x14a\x01\xBAW_\x80\xFD[\x80bt6\xD3\x14a\x01fW\x80c\x08cZ\x95\x14a\x01\x8CW[_\x80\xFD[a\x01ya\x01t6`\x04a\x13+V[a\x02\xE9V[`@Q\x90\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\x01\x9Fa\x01\x9A6`\x04a\x14BV[a\x03%V[\0[_a\x01yV[a\x01\x9Fa\x01\xB56`\x04a\x15+V[a\x03\x96V[a\x01ya\x03\xEAV[a\x01\xD5a\x01\xD06`\x04a\x15\xC0V[a\x044V[`@Q\x90\x15\x15\x81R` \x01a\x01\x83V[a\x01\x9Fa\x04OV[a\x01ya\x06\xA1V[a\x01\xFDa\x06\xBAV[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01a\x01\x83V[a\x01ya\x06\xF6V[a\x01\x9Fa\x07bV[a\x01ya\x0236`\x04a\x15\xD7V[a\t6V[a\x01\x9Fa\x02F6`\x04a\x16`V[a\tzV[a\x01ya\x02Y6`\x04a\x15\xC0V[`\x03` R_\x90\x81R`@\x90 T\x81V[a\x01ya\n\x0FV[a\x01\x9Fa\x02\x806`\x04a\x16\x80V[a\n_V[a\x02\x8D`\x02\x81V[`@Q`\x01`\x01`\x80\x1B\x03\x90\x91\x16\x81R` \x01a\x01\x83V[_Ta\x01\xFD\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[a\x01ya\x02\xC56`\x04a\x15\xC0V[`\x02` R_\x90\x81R`@\x90 T\x81V[`\x01Ta\x01\xFD\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[_a\x03\x1D\x84\x84\x84`@Q` \x01a\x03\x02\x91\x81R` \x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 a\x0C\xC3V[\x94\x93PPPPV[_a\x036\x89\x89\x89\x89\x89\x89\x89\x89a\t6V[\x90Pa\x03w\x8C\x8C\x80\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83` \x02\x80\x82\x847_\x92\x01\x91\x90\x91RP\x8E\x92P\x85\x91Pa\rv\x90PV[a\x03\x88\x8A\x8A\x8A\x8A\x8A\x8A\x8A\x8A\x8Aa\x0E\xDEV[PPPPPPPPPPPPV[3\x15a\x03\xCEW`@Q\x7F\x0E\x13\xB6\x9D\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a\x03\xDF\x89\x89\x89\x89\x89\x89\x89\x89\x89a\x0E\xDEV[PPPPPPPPPV[`\x04T_\x90`\x01`\x01`\x80\x1B\x03\x16\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\x81\x01a\x04&W_\x91PP\x90V[`\x01`\x01`\x80\x1B\x03\x16\x91\x90PV[_\x80_a\x04@\x84a\x11\xB8V[\x92P\x92PPa\x03\x1D\x82\x82a\x11\xF2V[_\x80T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\x8D\xA5\xCB[`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x04\x9DW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04\xC1\x91\x90a\x16\xA2V[`\x01`\x01`\xA0\x1B\x03\x163`\x01`\x01`\xA0\x1B\x03\x16\x14a\x05\xA6W_T`@\x80Q\x7F\x8D\xA5\xCB[\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\x90Q3\x92`\x01`\x01`\xA0\x1B\x03\x16\x91c\x8D\xA5\xCB[\x91`\x04\x80\x83\x01\x92` \x92\x91\x90\x82\x90\x03\x01\x81\x86Z\xFA\x15\x80\x15a\x058W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x05\\\x91\x90a\x16\xA2V[`@Q\x7F#)_\x0E\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x01`\x01`\xA0\x1B\x03\x92\x83\x16`\x04\x82\x01R\x91\x16`$\x82\x01R`D\x01[`@Q\x80\x91\x03\x90\xFD[`\x01T`@\x80Q\x7F\xCB#\xBC\xB5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\x90Q_\x92`\x01`\x01`\xA0\x1B\x03\x16\x91c\xCB#\xBC\xB5\x91`\x04\x80\x83\x01\x92` \x92\x91\x90\x82\x90\x03\x01\x81\x86Z\xFA\x15\x80\x15a\x06\x06W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x06*\x91\x90a\x16\xA2V[_T\x90\x91P`\x01`\x01`\xA0\x1B\x03\x80\x83\x16\x91\x16\x03a\x06sW`@Q\x7F\xD0T\x90\x9F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x80Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90UV[`\x05T_\x90`\x01\x81\x01a\x06\xB5WP_\x91\x90PV[\x91\x90PV[`\x06T_\x90`\x01`\x01`\xA0\x1B\x03\x16\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\x81\x01a\x06\xB5W_\x91PP\x90V[`\x06T_\x90t\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x04k\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\x01\x81\x01a\x07OW_\x91PP\x90V[k\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x91\x90PV[`\x01`\x01`\xA0\x1B\x03\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x160\x03a\x08\x1AW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`,`$\x82\x01R\x7FFunction must be called through `D\x82\x01R\x7Fdelegatecall\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x05\x9DV[\x7F\xB51'hJV\x8B1s\xAE\x13\xB9\xF8\xA6\x01n$>c\xB6\xE8\xEE\x11x\xD6\xA7\x17\x85\x0B]a\x03\x80T3`\x01`\x01`\xA0\x1B\x03\x82\x16\x14a\x08\x90W`@Q\x7F#)_\x0E\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R3`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x82\x16`$\x82\x01R`D\x01a\x05\x9DV[`\x04T`\x01`\x01`\x80\x1B\x03\x90\x81\x16\x14a\x08\xD5W`@Q\x7F\xD0\xAF\xB6a\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[PP`@\x80Q`\xC0\x81\x01\x82R`\x01`\x01`\x80\x1B\x03\x80\x82R` \x82\x01R_\x19\x91\x81\x01\x82\x90R`\x01`\x01`\xA0\x1B\x03``\x82\x01Rk\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x80\x82\x01R_`\xA0\x90\x91\x01\x81\x90R`\x04\x82\x90U`\x05\x82\x90U`\x06\x91\x90\x91U`\x07UV[_\x88\x88\x88\x88\x88\x88\x88\x88`@Q` \x01a\tV\x98\x97\x96\x95\x94\x93\x92\x91\x90a\x16\xBDV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P\x98\x97PPPPPPPPV[_T`\x01`\x01`\xA0\x1B\x03\x163\x14a\t\xD1W_T`@Q\x7F93\xC6\xFC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R3`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16`$\x82\x01R`D\x01a\x05\x9DV[_\x82\x81R`\x03` R`@\x80\x82 \x83\x90UQ\x82\x91\x84\x91\x7F\xB4\xDF8G0\x0F\x07j6\x9C\xD7m#\x14\xB4p\xA1\x19M\x9E\x8Ak\xB9\x7F\x18`\xAE\xE8\x8A_gH\x91\x90\xA3PPV[`\x04T_\x90p\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x04`\x01`\x01`\x80\x1B\x03\x16\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\x81\x01a\x04&W_\x91PP\x90V[`\x01`\x01`\xA0\x1B\x03\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x160\x03a\x0B\x17W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`,`$\x82\x01R\x7FFunction must be called through `D\x82\x01R\x7Fdelegatecall\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x05\x9DV[`\x01`\x01`\xA0\x1B\x03\x81\x16a\x0BWW`@Q\x7F\x1A\xD0\xF7C\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x01T`\x01`\x01`\xA0\x1B\x03\x16\x15a\x0B\x9AW`@Q\x7F\xEF4\xCA\\\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`@\x80Q`\xC0\x81\x01\x82R`\x01`\x01`\x80\x1B\x03\x80\x82R` \x80\x83\x01\x91\x90\x91R_\x19\x82\x84\x01\x81\x90R`\x01`\x01`\xA0\x1B\x03``\x84\x01\x81\x90Rk\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x80\x85\x01R_`\xA0\x90\x94\x01\x84\x90R`\x04\x82\x81U`\x05\x83\x90U`\x06\x92\x90\x92U`\x07\x93\x90\x93U`\x01\x80Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16\x93\x86\x16\x93\x84\x17\x90U\x83Q\x7F\xCB#\xBC\xB5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\x93Q\x92\x93c\xCB#\xBC\xB5\x93\x81\x83\x01\x93\x92\x90\x91\x82\x90\x03\x01\x81\x86Z\xFA\x15\x80\x15a\x0CpW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0C\x94\x91\x90a\x16\xA2V[_\x80Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90UPV[\x82Q_\x90a\x01\0\x81\x11\x15a\r\x0EW`@Q\x7F\xFD\xAC3\x1E\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x82\x90Ra\x01\0`$\x82\x01R`D\x01a\x05\x9DV[\x82_[\x82\x81\x10\x15a\rlW_\x87\x82\x81Q\x81\x10a\r,Wa\r,a\x17'V[` \x02` \x01\x01Q\x90P\x81`\x01\x90\x1B\x87\x16_\x03a\rUW\x82_R\x80` R`@_ \x92Pa\rcV[\x80_R\x82` R`@_ \x92P[P`\x01\x01a\r\x11V[P\x95\x94PPPPPV[a\x01\0\x83Q\x10a\r\xB7W\x82Q`@Q\x7F\xABj\x06\x83\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x05\x9D\x91\x81R` \x01\x90V[\x82Qa\r\xC4\x90`\x02a\x18/V[\x82\x10a\x0E\x14W\x81\x83Q`\x02a\r\xD9\x91\x90a\x18/V[`@Q\x7F\x0B\x8ArK\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x92\x90\x92R`$\x82\x01R`D\x01a\x05\x9DV[_a\x0E \x84\x84\x84a\x02\xE9V[_\x81\x81R`\x03` R`@\x90 T\x90\x91Pa\x0EjW`@Q\x7F\x870\xD7\xC8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x82\x90R`$\x01a\x05\x9DV[_\x80_a\x0Ev\x86a\x11\xB8V[\x92P\x92P\x92Pa\x0E\x86\x82\x82a\x11\xF2V[\x15a\x0E\xC0W`@Q\x7F\x97\x15\xB8\xD3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x87\x90R`$\x01a\x05\x9DV[_\x92\x83R`\x02` R`@\x90\x92 `\x01\x90\x91\x1B\x90\x91\x17\x90UPPPPV[_\x88`\x01`\x01`\xA0\x1B\x03\x16\x88`\x01`\x01`\xA0\x1B\x03\x16\x7F \xAF\x7F;\xBF\xE3\x812\xB8\x90\n\xE2\x95\xCD\x9C\x8D\x19\x14\xBEpR\xD0a\xA5\x11\xF3\xF7(\xDA\xB1\x89d\x8C`@Qa\x0F$\x91\x81R` \x01\x90V[`@Q\x80\x91\x03\x90\xA4_\x83\x90P_`\x04`@Q\x80`\xC0\x01`@R\x90\x81_\x82\x01_\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\x80\x1B\x03\x16`\x01`\x01`\x80\x1B\x03\x16`\x01`\x01`\x80\x1B\x03\x16\x81R` \x01_\x82\x01`\x10\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\x80\x1B\x03\x16`\x01`\x01`\x80\x1B\x03\x16`\x01`\x01`\x80\x1B\x03\x16\x81R` \x01`\x01\x82\x01T\x81R` \x01`\x02\x82\x01_\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01`\x02\x82\x01`\x14\x90T\x90a\x01\0\n\x90\x04k\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16k\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16k\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\x03\x82\x01T\x81RPP\x90P`@Q\x80`\xC0\x01`@R\x80\x89`\x01`\x01`\x80\x1B\x03\x16\x81R` \x01\x87`\x01`\x01`\x80\x1B\x03\x16\x81R` \x01\x8C_\x1B\x81R` \x01\x8B`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x88k\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01a\x10v_\x90V[\x90R\x80Q` \x80\x83\x01Q`\x01`\x01`\x80\x1B\x03\x90\x81\x16p\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\x92\x16\x91\x90\x91\x17`\x04U`@\x80\x83\x01Q`\x05U``\x83\x01Q`\x80\x84\x01Qk\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16t\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x17`\x06U`\xA0\x90\x92\x01Q`\x07U\x81Q`\x1F\x86\x01\x82\x90\x04\x82\x02\x81\x01\x82\x01\x90\x92R\x84\x82Ra\x114\x91\x8B\x91\x85\x91\x90\x88\x90\x88\x90\x81\x90\x84\x01\x83\x82\x80\x82\x847_\x92\x01\x91\x90\x91RPa\x12\x01\x92PPPV[\x80Q` \x82\x01Q`\x01`\x01`\x80\x1B\x03\x90\x81\x16p\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\x91\x16\x17`\x04U`@\x81\x01Q`\x05U``\x81\x01Q`\x80\x82\x01Qk\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16t\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x17`\x06U`\xA0\x01Q`\x07UPPPPPPPPPPV[_\x80\x80\x80a\x11\xC7`\xFF\x86a\x18NV[\x90P_a\x11\xD5`\xFF\x87a\x18aV[_\x83\x81R`\x02` R`@\x90 T\x92\x97\x90\x96P\x91\x94P\x90\x92PPPV[\x80\x82\x1C`\x01\x16\x15\x15[\x92\x91PPV[`\x01T`@Q\x7F\x9E]LI\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R_\x91\x82\x91`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90c\x9E]LI\x90a\x12R\x90\x88\x90\x88\x90\x88\x90`\x04\x01a\x18tV[_`@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x12mW=_\x80>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x12\x94\x91\x90\x81\x01\x90a\x18\xC0V[\x91P\x91P\x81a\x12\xDFW\x80Q\x15a\x12\xADW\x80Q\x80\x82` \x01\xFD[`@Q\x7F7o\xB5Z\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[PPPPPV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x13#Wa\x13#a\x12\xE6V[`@R\x91\x90PV[_\x80_``\x84\x86\x03\x12\x15a\x13=W_\x80\xFD[\x835g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x13TW_\x80\xFD[\x81\x86\x01\x91P\x86`\x1F\x83\x01\x12a\x13gW_\x80\xFD[\x815` \x82\x82\x11\x15a\x13{Wa\x13{a\x12\xE6V[\x81`\x05\x1B\x92Pa\x13\x8C\x81\x84\x01a\x12\xFAV[\x82\x81R\x92\x84\x01\x81\x01\x92\x81\x81\x01\x90\x8A\x85\x11\x15a\x13\xA5W_\x80\xFD[\x94\x82\x01\x94[\x84\x86\x10\x15a\x13\xC3W\x855\x82R\x94\x82\x01\x94\x90\x82\x01\x90a\x13\xAAV[\x9A\x91\x89\x015\x99PP`@\x90\x97\x015\x96\x95PPPPPPV[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x13\xEFW_\x80\xFD[PV[\x805a\x06\xB5\x81a\x13\xDBV[_\x80\x83`\x1F\x84\x01\x12a\x14\rW_\x80\xFD[P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x14$W_\x80\xFD[` \x83\x01\x91P\x83` \x82\x85\x01\x01\x11\x15a\x14;W_\x80\xFD[\x92P\x92\x90PV[_\x80_\x80_\x80_\x80_\x80_a\x01 \x8C\x8E\x03\x12\x15a\x14]W_\x80\xFD[\x8B5g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x14tW_\x80\xFD[\x81\x8E\x01\x91P\x8E`\x1F\x83\x01\x12a\x14\x87W_\x80\xFD[\x815\x81\x81\x11\x15a\x14\x95W_\x80\xFD[\x8F` \x82`\x05\x1B\x85\x01\x01\x11\x15a\x14\xA9W_\x80\xFD[` \x83\x81\x01\x9EP\x90\x9CP\x8E\x015\x9APa\x14\xC4`@\x8F\x01a\x13\xF2V[\x99Pa\x14\xD2``\x8F\x01a\x13\xF2V[\x98P`\x80\x8E\x015\x97P`\xA0\x8E\x015\x96P`\xC0\x8E\x015\x95P`\xE0\x8E\x015\x94Pa\x01\0\x8E\x015\x91P\x80\x82\x11\x15a\x15\x04W_\x80\xFD[Pa\x15\x11\x8E\x82\x8F\x01a\x13\xFDV[\x91P\x80\x93PP\x80\x91PP\x92\x95\x98\x9BP\x92\x95\x98\x9B\x90\x93\x96\x99PV[_\x80_\x80_\x80_\x80_a\x01\0\x8A\x8C\x03\x12\x15a\x15DW_\x80\xFD[\x895\x98P` \x8A\x015a\x15V\x81a\x13\xDBV[\x97P`@\x8A\x015a\x15f\x81a\x13\xDBV[\x96P``\x8A\x015\x95P`\x80\x8A\x015\x94P`\xA0\x8A\x015\x93P`\xC0\x8A\x015\x92P`\xE0\x8A\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x15\x9DW_\x80\xFD[a\x15\xA9\x8C\x82\x8D\x01a\x13\xFDV[\x91P\x80\x93PP\x80\x91PP\x92\x95\x98P\x92\x95\x98P\x92\x95\x98V[_` \x82\x84\x03\x12\x15a\x15\xD0W_\x80\xFD[P5\x91\x90PV[_\x80_\x80_\x80_\x80`\xE0\x89\x8B\x03\x12\x15a\x15\xEEW_\x80\xFD[\x885a\x15\xF9\x81a\x13\xDBV[\x97P` \x89\x015a\x16\t\x81a\x13\xDBV[\x96P`@\x89\x015\x95P``\x89\x015\x94P`\x80\x89\x015\x93P`\xA0\x89\x015\x92P`\xC0\x89\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x16@W_\x80\xFD[a\x16L\x8B\x82\x8C\x01a\x13\xFDV[\x99\x9C\x98\x9BP\x96\x99P\x94\x97\x93\x96\x92\x95\x94PPPV[_\x80`@\x83\x85\x03\x12\x15a\x16qW_\x80\xFD[PP\x805\x92` \x90\x91\x015\x91PV[_` \x82\x84\x03\x12\x15a\x16\x90W_\x80\xFD[\x815a\x16\x9B\x81a\x13\xDBV[\x93\x92PPPV[_` \x82\x84\x03\x12\x15a\x16\xB2W_\x80\xFD[\x81Qa\x16\x9B\x81a\x13\xDBV[_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\x80\x8B``\x1B\x16\x83R\x80\x8A``\x1B\x16`\x14\x84\x01RP\x87`(\x83\x01R\x86`H\x83\x01R\x85`h\x83\x01R\x84`\x88\x83\x01R\x82\x84`\xA8\x84\x017P_\x91\x01`\xA8\x01\x90\x81R\x97\x96PPPPPPPV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[`\x01\x81\x81[\x80\x85\x11\x15a\x17\x89W\x81_\x19\x04\x82\x11\x15a\x17oWa\x17oa\x17;V[\x80\x85\x16\x15a\x17|W\x91\x81\x02\x91[\x93\x84\x1C\x93\x90\x80\x02\x90a\x17TV[P\x92P\x92\x90PV[_\x82a\x17\x9FWP`\x01a\x11\xFBV[\x81a\x17\xABWP_a\x11\xFBV[\x81`\x01\x81\x14a\x17\xC1W`\x02\x81\x14a\x17\xCBWa\x17\xE7V[`\x01\x91PPa\x11\xFBV[`\xFF\x84\x11\x15a\x17\xDCWa\x17\xDCa\x17;V[PP`\x01\x82\x1Ba\x11\xFBV[P` \x83\x10a\x013\x83\x10\x16`N\x84\x10`\x0B\x84\x10\x16\x17\x15a\x18\nWP\x81\x81\na\x11\xFBV[a\x18\x14\x83\x83a\x17OV[\x80_\x19\x04\x82\x11\x15a\x18'Wa\x18'a\x17;V[\x02\x93\x92PPPV[_a\x16\x9B\x83\x83a\x17\x91V[cNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[_\x82a\x18\\Wa\x18\\a\x18:V[P\x04\x90V[_\x82a\x18oWa\x18oa\x18:V[P\x06\x90V[`\x01`\x01`\xA0\x1B\x03\x84\x16\x81R\x82` \x82\x01R```@\x82\x01R_\x82Q\x80``\x84\x01R\x80` \x85\x01`\x80\x85\x01^_`\x80\x82\x85\x01\x01R`\x80`\x1F\x19`\x1F\x83\x01\x16\x84\x01\x01\x91PP\x94\x93PPPPV[_\x80`@\x83\x85\x03\x12\x15a\x18\xD1W_\x80\xFD[\x82Q\x80\x15\x15\x81\x14a\x18\xE0W_\x80\xFD[\x80\x92PP` \x80\x84\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x18\xFFW_\x80\xFD[\x81\x86\x01\x91P\x86`\x1F\x83\x01\x12a\x19\x12W_\x80\xFD[\x81Q\x81\x81\x11\x15a\x19$Wa\x19$a\x12\xE6V[a\x196\x84`\x1F\x19`\x1F\x84\x01\x16\x01a\x12\xFAV[\x91P\x80\x82R\x87\x84\x82\x85\x01\x01\x11\x15a\x19KW_\x80\xFD[\x80\x84\x84\x01\x85\x84\x01^_\x84\x82\x84\x01\x01RP\x80\x93PPPP\x92P\x92\x90PV\xFE\xA2dipfsX\"\x12 0a0\x962&HL\x8E\xF6\xA2\n\xA8\x94B7\x89h\x7F\xB9\x077\xE2\xE2:\xABM\x93\xFA\x15\xB9\rdsolcC\0\x08\x19\x003",
    );
    /**Custom error with signature `AlreadyInit()` and selector `0xef34ca5c`.
```solidity
error AlreadyInit();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AlreadyInit {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AlreadyInit> for UnderlyingRustTuple<'_> {
            fn from(value: AlreadyInit) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AlreadyInit {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AlreadyInit {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AlreadyInit()";
            const SELECTOR: [u8; 4] = [239u8, 52u8, 202u8, 92u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `AlreadySpent(uint256)` and selector `0x9715b8d3`.
```solidity
error AlreadySpent(uint256 index);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AlreadySpent {
        #[allow(missing_docs)]
        pub index: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AlreadySpent> for UnderlyingRustTuple<'_> {
            fn from(value: AlreadySpent) -> Self {
                (value.index,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AlreadySpent {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { index: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AlreadySpent {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AlreadySpent(uint256)";
            const SELECTOR: [u8; 4] = [151u8, 21u8, 184u8, 211u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.index),
                )
            }
        }
    };
    /**Custom error with signature `BadPostUpgradeInit()` and selector `0xd0afb661`.
```solidity
error BadPostUpgradeInit();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct BadPostUpgradeInit {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<BadPostUpgradeInit> for UnderlyingRustTuple<'_> {
            fn from(value: BadPostUpgradeInit) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for BadPostUpgradeInit {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for BadPostUpgradeInit {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "BadPostUpgradeInit()";
            const SELECTOR: [u8; 4] = [208u8, 175u8, 182u8, 97u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `BridgeCallFailed()` and selector `0x376fb55a`.
```solidity
error BridgeCallFailed();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct BridgeCallFailed {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<BridgeCallFailed> for UnderlyingRustTuple<'_> {
            fn from(value: BridgeCallFailed) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for BridgeCallFailed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for BridgeCallFailed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "BridgeCallFailed()";
            const SELECTOR: [u8; 4] = [55u8, 111u8, 181u8, 90u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `HadZeroInit()` and selector `0x1ad0f743`.
```solidity
error HadZeroInit();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct HadZeroInit {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<HadZeroInit> for UnderlyingRustTuple<'_> {
            fn from(value: HadZeroInit) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for HadZeroInit {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for HadZeroInit {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "HadZeroInit()";
            const SELECTOR: [u8; 4] = [26u8, 208u8, 247u8, 67u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `MerkleProofTooLong(uint256,uint256)` and selector `0xfdac331e`.
```solidity
error MerkleProofTooLong(uint256 actualLength, uint256 maxProofLength);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MerkleProofTooLong {
        #[allow(missing_docs)]
        pub actualLength: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub maxProofLength: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<MerkleProofTooLong> for UnderlyingRustTuple<'_> {
            fn from(value: MerkleProofTooLong) -> Self {
                (value.actualLength, value.maxProofLength)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for MerkleProofTooLong {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    actualLength: tuple.0,
                    maxProofLength: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for MerkleProofTooLong {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "MerkleProofTooLong(uint256,uint256)";
            const SELECTOR: [u8; 4] = [253u8, 172u8, 51u8, 30u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.actualLength),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.maxProofLength),
                )
            }
        }
    };
    /**Custom error with signature `NotOwner(address,address)` and selector `0x23295f0e`.
```solidity
error NotOwner(address sender, address owner);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotOwner {
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotOwner> for UnderlyingRustTuple<'_> {
            fn from(value: NotOwner) -> Self {
                (value.sender, value.owner)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotOwner {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    sender: tuple.0,
                    owner: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotOwner {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotOwner(address,address)";
            const SELECTOR: [u8; 4] = [35u8, 41u8, 95u8, 14u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.sender,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `NotRollup(address,address)` and selector `0x3933c6fc`.
```solidity
error NotRollup(address sender, address rollup);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotRollup {
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub rollup: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotRollup> for UnderlyingRustTuple<'_> {
            fn from(value: NotRollup) -> Self {
                (value.sender, value.rollup)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotRollup {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    sender: tuple.0,
                    rollup: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotRollup {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotRollup(address,address)";
            const SELECTOR: [u8; 4] = [57u8, 51u8, 198u8, 252u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.sender,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.rollup,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `PathNotMinimal(uint256,uint256)` and selector `0x0b8a724b`.
```solidity
error PathNotMinimal(uint256 index, uint256 maxIndex);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct PathNotMinimal {
        #[allow(missing_docs)]
        pub index: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub maxIndex: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<PathNotMinimal> for UnderlyingRustTuple<'_> {
            fn from(value: PathNotMinimal) -> Self {
                (value.index, value.maxIndex)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for PathNotMinimal {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    index: tuple.0,
                    maxIndex: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for PathNotMinimal {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "PathNotMinimal(uint256,uint256)";
            const SELECTOR: [u8; 4] = [11u8, 138u8, 114u8, 75u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.index),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.maxIndex),
                )
            }
        }
    };
    /**Custom error with signature `ProofTooLong(uint256)` and selector `0xab6a0683`.
```solidity
error ProofTooLong(uint256 proofLength);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ProofTooLong {
        #[allow(missing_docs)]
        pub proofLength: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ProofTooLong> for UnderlyingRustTuple<'_> {
            fn from(value: ProofTooLong) -> Self {
                (value.proofLength,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ProofTooLong {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { proofLength: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ProofTooLong {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ProofTooLong(uint256)";
            const SELECTOR: [u8; 4] = [171u8, 106u8, 6u8, 131u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.proofLength),
                )
            }
        }
    };
    /**Custom error with signature `RollupNotChanged()` and selector `0xd054909f`.
```solidity
error RollupNotChanged();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct RollupNotChanged {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<RollupNotChanged> for UnderlyingRustTuple<'_> {
            fn from(value: RollupNotChanged) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for RollupNotChanged {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for RollupNotChanged {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "RollupNotChanged()";
            const SELECTOR: [u8; 4] = [208u8, 84u8, 144u8, 159u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `SimulationOnlyEntrypoint()` and selector `0x0e13b69d`.
```solidity
error SimulationOnlyEntrypoint();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SimulationOnlyEntrypoint {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<SimulationOnlyEntrypoint>
        for UnderlyingRustTuple<'_> {
            fn from(value: SimulationOnlyEntrypoint) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for SimulationOnlyEntrypoint {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for SimulationOnlyEntrypoint {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SimulationOnlyEntrypoint()";
            const SELECTOR: [u8; 4] = [14u8, 19u8, 182u8, 157u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `UnknownRoot(bytes32)` and selector `0x8730d7c8`.
```solidity
error UnknownRoot(bytes32 root);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct UnknownRoot {
        #[allow(missing_docs)]
        pub root: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnknownRoot> for UnderlyingRustTuple<'_> {
            fn from(value: UnknownRoot) -> Self {
                (value.root,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for UnknownRoot {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { root: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for UnknownRoot {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "UnknownRoot(bytes32)";
            const SELECTOR: [u8; 4] = [135u8, 48u8, 215u8, 200u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.root),
                )
            }
        }
    };
    /**Event with signature `OutBoxTransactionExecuted(address,address,uint256,uint256)` and selector `0x20af7f3bbfe38132b8900ae295cd9c8d1914be7052d061a511f3f728dab18964`.
```solidity
event OutBoxTransactionExecuted(address indexed to, address indexed l2Sender, uint256 indexed zero, uint256 transactionIndex);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct OutBoxTransactionExecuted {
        #[allow(missing_docs)]
        pub to: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub l2Sender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub zero: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub transactionIndex: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OutBoxTransactionExecuted {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            const SIGNATURE: &'static str = "OutBoxTransactionExecuted(address,address,uint256,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                32u8,
                175u8,
                127u8,
                59u8,
                191u8,
                227u8,
                129u8,
                50u8,
                184u8,
                144u8,
                10u8,
                226u8,
                149u8,
                205u8,
                156u8,
                141u8,
                25u8,
                20u8,
                190u8,
                112u8,
                82u8,
                208u8,
                97u8,
                165u8,
                17u8,
                243u8,
                247u8,
                40u8,
                218u8,
                177u8,
                137u8,
                100u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    to: topics.1,
                    l2Sender: topics.2,
                    zero: topics.3,
                    transactionIndex: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.transactionIndex),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.to.clone(),
                    self.l2Sender.clone(),
                    self.zero.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.to,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.l2Sender,
                );
                out[3usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.zero);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OutBoxTransactionExecuted {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OutBoxTransactionExecuted> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &OutBoxTransactionExecuted,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `SendRootUpdated(bytes32,bytes32)` and selector `0xb4df3847300f076a369cd76d2314b470a1194d9e8a6bb97f1860aee88a5f6748`.
```solidity
event SendRootUpdated(bytes32 indexed outputRoot, bytes32 indexed l2BlockHash);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct SendRootUpdated {
        #[allow(missing_docs)]
        pub outputRoot: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub l2BlockHash: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for SendRootUpdated {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            const SIGNATURE: &'static str = "SendRootUpdated(bytes32,bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                180u8,
                223u8,
                56u8,
                71u8,
                48u8,
                15u8,
                7u8,
                106u8,
                54u8,
                156u8,
                215u8,
                109u8,
                35u8,
                20u8,
                180u8,
                112u8,
                161u8,
                25u8,
                77u8,
                158u8,
                138u8,
                107u8,
                185u8,
                127u8,
                24u8,
                96u8,
                174u8,
                232u8,
                138u8,
                95u8,
                103u8,
                72u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    outputRoot: topics.1,
                    l2BlockHash: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.outputRoot.clone(),
                    self.l2BlockHash.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.outputRoot);
                out[2usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.l2BlockHash);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for SendRootUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&SendRootUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &SendRootUpdated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Function with signature `OUTBOX_VERSION()` and selector `0xc75184df`.
```solidity
function OUTBOX_VERSION() external view returns (uint128);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OUTBOX_VERSIONCall {}
    ///Container type for the return parameters of the [`OUTBOX_VERSION()`](OUTBOX_VERSIONCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OUTBOX_VERSIONReturn {
        #[allow(missing_docs)]
        pub _0: u128,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<OUTBOX_VERSIONCall> for UnderlyingRustTuple<'_> {
                fn from(value: OUTBOX_VERSIONCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for OUTBOX_VERSIONCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<128>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u128,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<OUTBOX_VERSIONReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: OUTBOX_VERSIONReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for OUTBOX_VERSIONReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for OUTBOX_VERSIONCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = OUTBOX_VERSIONReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<128>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OUTBOX_VERSION()";
            const SELECTOR: [u8; 4] = [199u8, 81u8, 132u8, 223u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `bridge()` and selector `0xe78cea92`.
```solidity
function bridge() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bridgeCall {}
    ///Container type for the return parameters of the [`bridge()`](bridgeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bridgeReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bridgeCall> for UnderlyingRustTuple<'_> {
                fn from(value: bridgeCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for bridgeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bridgeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: bridgeReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for bridgeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for bridgeCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bridgeReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "bridge()";
            const SELECTOR: [u8; 4] = [231u8, 140u8, 234u8, 146u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `calculateItemHash(address,address,uint256,uint256,uint256,uint256,bytes)` and selector `0x9f0c04bf`.
```solidity
function calculateItemHash(address l2Sender, address to, uint256 l2Block, uint256 l1Block, uint256 l2Timestamp, uint256 value, bytes memory data) external pure returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct calculateItemHashCall {
        #[allow(missing_docs)]
        pub l2Sender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub to: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub l2Block: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub l1Block: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub l2Timestamp: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub value: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`calculateItemHash(address,address,uint256,uint256,uint256,uint256,bytes)`](calculateItemHashCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct calculateItemHashReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<calculateItemHashCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: calculateItemHashCall) -> Self {
                    (
                        value.l2Sender,
                        value.to,
                        value.l2Block,
                        value.l1Block,
                        value.l2Timestamp,
                        value.value,
                        value.data,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for calculateItemHashCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        l2Sender: tuple.0,
                        to: tuple.1,
                        l2Block: tuple.2,
                        l1Block: tuple.3,
                        l2Timestamp: tuple.4,
                        value: tuple.5,
                        data: tuple.6,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<calculateItemHashReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: calculateItemHashReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for calculateItemHashReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for calculateItemHashCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = calculateItemHashReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "calculateItemHash(address,address,uint256,uint256,uint256,uint256,bytes)";
            const SELECTOR: [u8; 4] = [159u8, 12u8, 4u8, 191u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.l2Sender,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.to,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.l2Block),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.l1Block),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.l2Timestamp),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `calculateMerkleRoot(bytes32[],uint256,bytes32)` and selector `0x007436d3`.
```solidity
function calculateMerkleRoot(bytes32[] memory proof, uint256 path, bytes32 item) external pure returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct calculateMerkleRootCall {
        #[allow(missing_docs)]
        pub proof: alloy::sol_types::private::Vec<
            alloy::sol_types::private::FixedBytes<32>,
        >,
        #[allow(missing_docs)]
        pub path: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub item: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`calculateMerkleRoot(bytes32[],uint256,bytes32)`](calculateMerkleRootCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct calculateMerkleRootReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::FixedBytes<32>,
                >,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::FixedBytes<32>,
                >,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<calculateMerkleRootCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: calculateMerkleRootCall) -> Self {
                    (value.proof, value.path, value.item)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for calculateMerkleRootCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        proof: tuple.0,
                        path: tuple.1,
                        item: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<calculateMerkleRootReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: calculateMerkleRootReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for calculateMerkleRootReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for calculateMerkleRootCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::FixedBytes<32>,
                >,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = calculateMerkleRootReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "calculateMerkleRoot(bytes32[],uint256,bytes32)";
            const SELECTOR: [u8; 4] = [0u8, 116u8, 54u8, 211u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::FixedBytes<32>,
                    > as alloy_sol_types::SolType>::tokenize(&self.proof),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.path),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.item),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `executeTransaction(bytes32[],uint256,address,address,uint256,uint256,uint256,uint256,bytes)` and selector `0x08635a95`.
```solidity
function executeTransaction(bytes32[] memory proof, uint256 index, address l2Sender, address to, uint256 l2Block, uint256 l1Block, uint256 l2Timestamp, uint256 value, bytes memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeTransactionCall {
        #[allow(missing_docs)]
        pub proof: alloy::sol_types::private::Vec<
            alloy::sol_types::private::FixedBytes<32>,
        >,
        #[allow(missing_docs)]
        pub index: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub l2Sender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub to: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub l2Block: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub l1Block: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub l2Timestamp: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub value: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`executeTransaction(bytes32[],uint256,address,address,uint256,uint256,uint256,uint256,bytes)`](executeTransactionCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeTransactionReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::FixedBytes<32>,
                >,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::FixedBytes<32>,
                >,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeTransactionCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: executeTransactionCall) -> Self {
                    (
                        value.proof,
                        value.index,
                        value.l2Sender,
                        value.to,
                        value.l2Block,
                        value.l1Block,
                        value.l2Timestamp,
                        value.value,
                        value.data,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for executeTransactionCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        proof: tuple.0,
                        index: tuple.1,
                        l2Sender: tuple.2,
                        to: tuple.3,
                        l2Block: tuple.4,
                        l1Block: tuple.5,
                        l2Timestamp: tuple.6,
                        value: tuple.7,
                        data: tuple.8,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeTransactionReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: executeTransactionReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for executeTransactionReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for executeTransactionCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::FixedBytes<32>,
                >,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = executeTransactionReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "executeTransaction(bytes32[],uint256,address,address,uint256,uint256,uint256,uint256,bytes)";
            const SELECTOR: [u8; 4] = [8u8, 99u8, 90u8, 149u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::FixedBytes<32>,
                    > as alloy_sol_types::SolType>::tokenize(&self.proof),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.index),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.l2Sender,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.to,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.l2Block),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.l1Block),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.l2Timestamp),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `executeTransactionSimulation(uint256,address,address,uint256,uint256,uint256,uint256,bytes)` and selector `0x288e5b10`.
```solidity
function executeTransactionSimulation(uint256 index, address l2Sender, address to, uint256 l2Block, uint256 l1Block, uint256 l2Timestamp, uint256 value, bytes memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeTransactionSimulationCall {
        #[allow(missing_docs)]
        pub index: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub l2Sender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub to: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub l2Block: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub l1Block: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub l2Timestamp: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub value: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`executeTransactionSimulation(uint256,address,address,uint256,uint256,uint256,uint256,bytes)`](executeTransactionSimulationCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeTransactionSimulationReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeTransactionSimulationCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: executeTransactionSimulationCall) -> Self {
                    (
                        value.index,
                        value.l2Sender,
                        value.to,
                        value.l2Block,
                        value.l1Block,
                        value.l2Timestamp,
                        value.value,
                        value.data,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for executeTransactionSimulationCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        index: tuple.0,
                        l2Sender: tuple.1,
                        to: tuple.2,
                        l2Block: tuple.3,
                        l1Block: tuple.4,
                        l2Timestamp: tuple.5,
                        value: tuple.6,
                        data: tuple.7,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeTransactionSimulationReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: executeTransactionSimulationReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for executeTransactionSimulationReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for executeTransactionSimulationCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = executeTransactionSimulationReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "executeTransactionSimulation(uint256,address,address,uint256,uint256,uint256,uint256,bytes)";
            const SELECTOR: [u8; 4] = [40u8, 142u8, 91u8, 16u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.index),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.l2Sender,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.to,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.l2Block),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.l1Block),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.l2Timestamp),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `initialize(address)` and selector `0xc4d66de8`.
```solidity
function initialize(address _bridge) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeCall {
        #[allow(missing_docs)]
        pub _bridge: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`initialize(address)`](initializeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeCall> for UnderlyingRustTuple<'_> {
                fn from(value: initializeCall) -> Self {
                    (value._bridge,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _bridge: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: initializeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for initializeCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = initializeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "initialize(address)";
            const SELECTOR: [u8; 4] = [196u8, 214u8, 109u8, 232u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._bridge,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isSpent(uint256)` and selector `0x5a129efe`.
```solidity
function isSpent(uint256 index) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isSpentCall {
        #[allow(missing_docs)]
        pub index: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`isSpent(uint256)`](isSpentCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isSpentReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isSpentCall> for UnderlyingRustTuple<'_> {
                fn from(value: isSpentCall) -> Self {
                    (value.index,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isSpentCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { index: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isSpentReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isSpentReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isSpentReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isSpentCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isSpentReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isSpent(uint256)";
            const SELECTOR: [u8; 4] = [90u8, 18u8, 158u8, 254u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.index),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `l2ToL1BatchNum()` and selector `0x11985271`.
```solidity
function l2ToL1BatchNum() external pure returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct l2ToL1BatchNumCall {}
    ///Container type for the return parameters of the [`l2ToL1BatchNum()`](l2ToL1BatchNumCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct l2ToL1BatchNumReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<l2ToL1BatchNumCall> for UnderlyingRustTuple<'_> {
                fn from(value: l2ToL1BatchNumCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for l2ToL1BatchNumCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<l2ToL1BatchNumReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: l2ToL1BatchNumReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for l2ToL1BatchNumReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for l2ToL1BatchNumCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = l2ToL1BatchNumReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "l2ToL1BatchNum()";
            const SELECTOR: [u8; 4] = [17u8, 152u8, 82u8, 113u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `l2ToL1Block()` and selector `0x46547790`.
```solidity
function l2ToL1Block() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct l2ToL1BlockCall {}
    ///Container type for the return parameters of the [`l2ToL1Block()`](l2ToL1BlockCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct l2ToL1BlockReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<l2ToL1BlockCall> for UnderlyingRustTuple<'_> {
                fn from(value: l2ToL1BlockCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for l2ToL1BlockCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<l2ToL1BlockReturn> for UnderlyingRustTuple<'_> {
                fn from(value: l2ToL1BlockReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for l2ToL1BlockReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for l2ToL1BlockCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = l2ToL1BlockReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "l2ToL1Block()";
            const SELECTOR: [u8; 4] = [70u8, 84u8, 119u8, 144u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `l2ToL1EthBlock()` and selector `0x8515bc6a`.
```solidity
function l2ToL1EthBlock() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct l2ToL1EthBlockCall {}
    ///Container type for the return parameters of the [`l2ToL1EthBlock()`](l2ToL1EthBlockCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct l2ToL1EthBlockReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<l2ToL1EthBlockCall> for UnderlyingRustTuple<'_> {
                fn from(value: l2ToL1EthBlockCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for l2ToL1EthBlockCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<l2ToL1EthBlockReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: l2ToL1EthBlockReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for l2ToL1EthBlockReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for l2ToL1EthBlockCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = l2ToL1EthBlockReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "l2ToL1EthBlock()";
            const SELECTOR: [u8; 4] = [133u8, 21u8, 188u8, 106u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `l2ToL1OutputId()` and selector `0x72f2a8c7`.
```solidity
function l2ToL1OutputId() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct l2ToL1OutputIdCall {}
    ///Container type for the return parameters of the [`l2ToL1OutputId()`](l2ToL1OutputIdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct l2ToL1OutputIdReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<l2ToL1OutputIdCall> for UnderlyingRustTuple<'_> {
                fn from(value: l2ToL1OutputIdCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for l2ToL1OutputIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<l2ToL1OutputIdReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: l2ToL1OutputIdReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for l2ToL1OutputIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for l2ToL1OutputIdCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = l2ToL1OutputIdReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "l2ToL1OutputId()";
            const SELECTOR: [u8; 4] = [114u8, 242u8, 168u8, 199u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `l2ToL1Sender()` and selector `0x80648b02`.
```solidity
function l2ToL1Sender() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct l2ToL1SenderCall {}
    ///Container type for the return parameters of the [`l2ToL1Sender()`](l2ToL1SenderCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct l2ToL1SenderReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<l2ToL1SenderCall> for UnderlyingRustTuple<'_> {
                fn from(value: l2ToL1SenderCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for l2ToL1SenderCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<l2ToL1SenderReturn> for UnderlyingRustTuple<'_> {
                fn from(value: l2ToL1SenderReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for l2ToL1SenderReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for l2ToL1SenderCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = l2ToL1SenderReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "l2ToL1Sender()";
            const SELECTOR: [u8; 4] = [128u8, 100u8, 139u8, 2u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `l2ToL1Timestamp()` and selector `0xb0f30537`.
```solidity
function l2ToL1Timestamp() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct l2ToL1TimestampCall {}
    ///Container type for the return parameters of the [`l2ToL1Timestamp()`](l2ToL1TimestampCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct l2ToL1TimestampReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<l2ToL1TimestampCall> for UnderlyingRustTuple<'_> {
                fn from(value: l2ToL1TimestampCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for l2ToL1TimestampCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<l2ToL1TimestampReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: l2ToL1TimestampReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for l2ToL1TimestampReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for l2ToL1TimestampCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = l2ToL1TimestampReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "l2ToL1Timestamp()";
            const SELECTOR: [u8; 4] = [176u8, 243u8, 5u8, 55u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `postUpgradeInit()` and selector `0x95fcea78`.
```solidity
function postUpgradeInit() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct postUpgradeInitCall {}
    ///Container type for the return parameters of the [`postUpgradeInit()`](postUpgradeInitCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct postUpgradeInitReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<postUpgradeInitCall> for UnderlyingRustTuple<'_> {
                fn from(value: postUpgradeInitCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for postUpgradeInitCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<postUpgradeInitReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: postUpgradeInitReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for postUpgradeInitReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for postUpgradeInitCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = postUpgradeInitReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "postUpgradeInit()";
            const SELECTOR: [u8; 4] = [149u8, 252u8, 234u8, 120u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `rollup()` and selector `0xcb23bcb5`.
```solidity
function rollup() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct rollupCall {}
    ///Container type for the return parameters of the [`rollup()`](rollupCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct rollupReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<rollupCall> for UnderlyingRustTuple<'_> {
                fn from(value: rollupCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for rollupCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<rollupReturn> for UnderlyingRustTuple<'_> {
                fn from(value: rollupReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for rollupReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for rollupCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = rollupReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "rollup()";
            const SELECTOR: [u8; 4] = [203u8, 35u8, 188u8, 181u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `roots(bytes32)` and selector `0xae6dead7`.
```solidity
function roots(bytes32) external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct rootsCall {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`roots(bytes32)`](rootsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct rootsReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<rootsCall> for UnderlyingRustTuple<'_> {
                fn from(value: rootsCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for rootsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<rootsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: rootsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for rootsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for rootsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = rootsReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "roots(bytes32)";
            const SELECTOR: [u8; 4] = [174u8, 109u8, 234u8, 215u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self._0),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `spent(uint256)` and selector `0xd5b5cc23`.
```solidity
function spent(uint256) external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct spentCall {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`spent(uint256)`](spentCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct spentReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<spentCall> for UnderlyingRustTuple<'_> {
                fn from(value: spentCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for spentCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<spentReturn> for UnderlyingRustTuple<'_> {
                fn from(value: spentReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for spentReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for spentCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = spentReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "spent(uint256)";
            const SELECTOR: [u8; 4] = [213u8, 181u8, 204u8, 35u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._0),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `updateRollupAddress()` and selector `0x6ae71f12`.
```solidity
function updateRollupAddress() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateRollupAddressCall {}
    ///Container type for the return parameters of the [`updateRollupAddress()`](updateRollupAddressCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateRollupAddressReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateRollupAddressCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateRollupAddressCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateRollupAddressCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateRollupAddressReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateRollupAddressReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateRollupAddressReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for updateRollupAddressCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = updateRollupAddressReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "updateRollupAddress()";
            const SELECTOR: [u8; 4] = [106u8, 231u8, 31u8, 18u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `updateSendRoot(bytes32,bytes32)` and selector `0xa04cee60`.
```solidity
function updateSendRoot(bytes32 root, bytes32 l2BlockHash) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateSendRootCall {
        #[allow(missing_docs)]
        pub root: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub l2BlockHash: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`updateSendRoot(bytes32,bytes32)`](updateSendRootCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateSendRootReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateSendRootCall> for UnderlyingRustTuple<'_> {
                fn from(value: updateSendRootCall) -> Self {
                    (value.root, value.l2BlockHash)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for updateSendRootCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        root: tuple.0,
                        l2BlockHash: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateSendRootReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateSendRootReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateSendRootReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for updateSendRootCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = updateSendRootReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "updateSendRoot(bytes32,bytes32)";
            const SELECTOR: [u8; 4] = [160u8, 76u8, 238u8, 96u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.root),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.l2BlockHash),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`Outbox`](self) function calls.
    pub enum OutboxCalls {
        #[allow(missing_docs)]
        OUTBOX_VERSION(OUTBOX_VERSIONCall),
        #[allow(missing_docs)]
        bridge(bridgeCall),
        #[allow(missing_docs)]
        calculateItemHash(calculateItemHashCall),
        #[allow(missing_docs)]
        calculateMerkleRoot(calculateMerkleRootCall),
        #[allow(missing_docs)]
        executeTransaction(executeTransactionCall),
        #[allow(missing_docs)]
        executeTransactionSimulation(executeTransactionSimulationCall),
        #[allow(missing_docs)]
        initialize(initializeCall),
        #[allow(missing_docs)]
        isSpent(isSpentCall),
        #[allow(missing_docs)]
        l2ToL1BatchNum(l2ToL1BatchNumCall),
        #[allow(missing_docs)]
        l2ToL1Block(l2ToL1BlockCall),
        #[allow(missing_docs)]
        l2ToL1EthBlock(l2ToL1EthBlockCall),
        #[allow(missing_docs)]
        l2ToL1OutputId(l2ToL1OutputIdCall),
        #[allow(missing_docs)]
        l2ToL1Sender(l2ToL1SenderCall),
        #[allow(missing_docs)]
        l2ToL1Timestamp(l2ToL1TimestampCall),
        #[allow(missing_docs)]
        postUpgradeInit(postUpgradeInitCall),
        #[allow(missing_docs)]
        rollup(rollupCall),
        #[allow(missing_docs)]
        roots(rootsCall),
        #[allow(missing_docs)]
        spent(spentCall),
        #[allow(missing_docs)]
        updateRollupAddress(updateRollupAddressCall),
        #[allow(missing_docs)]
        updateSendRoot(updateSendRootCall),
    }
    #[automatically_derived]
    impl OutboxCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [0u8, 116u8, 54u8, 211u8],
            [8u8, 99u8, 90u8, 149u8],
            [17u8, 152u8, 82u8, 113u8],
            [40u8, 142u8, 91u8, 16u8],
            [70u8, 84u8, 119u8, 144u8],
            [90u8, 18u8, 158u8, 254u8],
            [106u8, 231u8, 31u8, 18u8],
            [114u8, 242u8, 168u8, 199u8],
            [128u8, 100u8, 139u8, 2u8],
            [133u8, 21u8, 188u8, 106u8],
            [149u8, 252u8, 234u8, 120u8],
            [159u8, 12u8, 4u8, 191u8],
            [160u8, 76u8, 238u8, 96u8],
            [174u8, 109u8, 234u8, 215u8],
            [176u8, 243u8, 5u8, 55u8],
            [196u8, 214u8, 109u8, 232u8],
            [199u8, 81u8, 132u8, 223u8],
            [203u8, 35u8, 188u8, 181u8],
            [213u8, 181u8, 204u8, 35u8],
            [231u8, 140u8, 234u8, 146u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for OutboxCalls {
        const NAME: &'static str = "OutboxCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 20usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::OUTBOX_VERSION(_) => {
                    <OUTBOX_VERSIONCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::bridge(_) => <bridgeCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::calculateItemHash(_) => {
                    <calculateItemHashCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::calculateMerkleRoot(_) => {
                    <calculateMerkleRootCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::executeTransaction(_) => {
                    <executeTransactionCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::executeTransactionSimulation(_) => {
                    <executeTransactionSimulationCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::initialize(_) => {
                    <initializeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isSpent(_) => <isSpentCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::l2ToL1BatchNum(_) => {
                    <l2ToL1BatchNumCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::l2ToL1Block(_) => {
                    <l2ToL1BlockCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::l2ToL1EthBlock(_) => {
                    <l2ToL1EthBlockCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::l2ToL1OutputId(_) => {
                    <l2ToL1OutputIdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::l2ToL1Sender(_) => {
                    <l2ToL1SenderCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::l2ToL1Timestamp(_) => {
                    <l2ToL1TimestampCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::postUpgradeInit(_) => {
                    <postUpgradeInitCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::rollup(_) => <rollupCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::roots(_) => <rootsCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::spent(_) => <spentCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::updateRollupAddress(_) => {
                    <updateRollupAddressCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::updateSendRoot(_) => {
                    <updateSendRootCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<OutboxCalls>] = &[
                {
                    fn calculateMerkleRoot(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OutboxCalls> {
                        <calculateMerkleRootCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OutboxCalls::calculateMerkleRoot)
                    }
                    calculateMerkleRoot
                },
                {
                    fn executeTransaction(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OutboxCalls> {
                        <executeTransactionCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OutboxCalls::executeTransaction)
                    }
                    executeTransaction
                },
                {
                    fn l2ToL1BatchNum(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OutboxCalls> {
                        <l2ToL1BatchNumCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OutboxCalls::l2ToL1BatchNum)
                    }
                    l2ToL1BatchNum
                },
                {
                    fn executeTransactionSimulation(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OutboxCalls> {
                        <executeTransactionSimulationCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OutboxCalls::executeTransactionSimulation)
                    }
                    executeTransactionSimulation
                },
                {
                    fn l2ToL1Block(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OutboxCalls> {
                        <l2ToL1BlockCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OutboxCalls::l2ToL1Block)
                    }
                    l2ToL1Block
                },
                {
                    fn isSpent(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OutboxCalls> {
                        <isSpentCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OutboxCalls::isSpent)
                    }
                    isSpent
                },
                {
                    fn updateRollupAddress(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OutboxCalls> {
                        <updateRollupAddressCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OutboxCalls::updateRollupAddress)
                    }
                    updateRollupAddress
                },
                {
                    fn l2ToL1OutputId(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OutboxCalls> {
                        <l2ToL1OutputIdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OutboxCalls::l2ToL1OutputId)
                    }
                    l2ToL1OutputId
                },
                {
                    fn l2ToL1Sender(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OutboxCalls> {
                        <l2ToL1SenderCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OutboxCalls::l2ToL1Sender)
                    }
                    l2ToL1Sender
                },
                {
                    fn l2ToL1EthBlock(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OutboxCalls> {
                        <l2ToL1EthBlockCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OutboxCalls::l2ToL1EthBlock)
                    }
                    l2ToL1EthBlock
                },
                {
                    fn postUpgradeInit(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OutboxCalls> {
                        <postUpgradeInitCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OutboxCalls::postUpgradeInit)
                    }
                    postUpgradeInit
                },
                {
                    fn calculateItemHash(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OutboxCalls> {
                        <calculateItemHashCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OutboxCalls::calculateItemHash)
                    }
                    calculateItemHash
                },
                {
                    fn updateSendRoot(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OutboxCalls> {
                        <updateSendRootCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OutboxCalls::updateSendRoot)
                    }
                    updateSendRoot
                },
                {
                    fn roots(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OutboxCalls> {
                        <rootsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OutboxCalls::roots)
                    }
                    roots
                },
                {
                    fn l2ToL1Timestamp(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OutboxCalls> {
                        <l2ToL1TimestampCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OutboxCalls::l2ToL1Timestamp)
                    }
                    l2ToL1Timestamp
                },
                {
                    fn initialize(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OutboxCalls> {
                        <initializeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OutboxCalls::initialize)
                    }
                    initialize
                },
                {
                    fn OUTBOX_VERSION(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OutboxCalls> {
                        <OUTBOX_VERSIONCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OutboxCalls::OUTBOX_VERSION)
                    }
                    OUTBOX_VERSION
                },
                {
                    fn rollup(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OutboxCalls> {
                        <rollupCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OutboxCalls::rollup)
                    }
                    rollup
                },
                {
                    fn spent(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OutboxCalls> {
                        <spentCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OutboxCalls::spent)
                    }
                    spent
                },
                {
                    fn bridge(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OutboxCalls> {
                        <bridgeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OutboxCalls::bridge)
                    }
                    bridge
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::OUTBOX_VERSION(inner) => {
                    <OUTBOX_VERSIONCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::bridge(inner) => {
                    <bridgeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::calculateItemHash(inner) => {
                    <calculateItemHashCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::calculateMerkleRoot(inner) => {
                    <calculateMerkleRootCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::executeTransaction(inner) => {
                    <executeTransactionCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::executeTransactionSimulation(inner) => {
                    <executeTransactionSimulationCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isSpent(inner) => {
                    <isSpentCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::l2ToL1BatchNum(inner) => {
                    <l2ToL1BatchNumCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::l2ToL1Block(inner) => {
                    <l2ToL1BlockCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::l2ToL1EthBlock(inner) => {
                    <l2ToL1EthBlockCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::l2ToL1OutputId(inner) => {
                    <l2ToL1OutputIdCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::l2ToL1Sender(inner) => {
                    <l2ToL1SenderCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::l2ToL1Timestamp(inner) => {
                    <l2ToL1TimestampCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::postUpgradeInit(inner) => {
                    <postUpgradeInitCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::rollup(inner) => {
                    <rollupCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::roots(inner) => {
                    <rootsCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::spent(inner) => {
                    <spentCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::updateRollupAddress(inner) => {
                    <updateRollupAddressCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::updateSendRoot(inner) => {
                    <updateSendRootCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::OUTBOX_VERSION(inner) => {
                    <OUTBOX_VERSIONCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::bridge(inner) => {
                    <bridgeCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::calculateItemHash(inner) => {
                    <calculateItemHashCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::calculateMerkleRoot(inner) => {
                    <calculateMerkleRootCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::executeTransaction(inner) => {
                    <executeTransactionCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::executeTransactionSimulation(inner) => {
                    <executeTransactionSimulationCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isSpent(inner) => {
                    <isSpentCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::l2ToL1BatchNum(inner) => {
                    <l2ToL1BatchNumCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::l2ToL1Block(inner) => {
                    <l2ToL1BlockCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::l2ToL1EthBlock(inner) => {
                    <l2ToL1EthBlockCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::l2ToL1OutputId(inner) => {
                    <l2ToL1OutputIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::l2ToL1Sender(inner) => {
                    <l2ToL1SenderCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::l2ToL1Timestamp(inner) => {
                    <l2ToL1TimestampCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::postUpgradeInit(inner) => {
                    <postUpgradeInitCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::rollup(inner) => {
                    <rollupCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::roots(inner) => {
                    <rootsCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::spent(inner) => {
                    <spentCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::updateRollupAddress(inner) => {
                    <updateRollupAddressCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::updateSendRoot(inner) => {
                    <updateSendRootCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`Outbox`](self) custom errors.
    pub enum OutboxErrors {
        #[allow(missing_docs)]
        AlreadyInit(AlreadyInit),
        #[allow(missing_docs)]
        AlreadySpent(AlreadySpent),
        #[allow(missing_docs)]
        BadPostUpgradeInit(BadPostUpgradeInit),
        #[allow(missing_docs)]
        BridgeCallFailed(BridgeCallFailed),
        #[allow(missing_docs)]
        HadZeroInit(HadZeroInit),
        #[allow(missing_docs)]
        MerkleProofTooLong(MerkleProofTooLong),
        #[allow(missing_docs)]
        NotOwner(NotOwner),
        #[allow(missing_docs)]
        NotRollup(NotRollup),
        #[allow(missing_docs)]
        PathNotMinimal(PathNotMinimal),
        #[allow(missing_docs)]
        ProofTooLong(ProofTooLong),
        #[allow(missing_docs)]
        RollupNotChanged(RollupNotChanged),
        #[allow(missing_docs)]
        SimulationOnlyEntrypoint(SimulationOnlyEntrypoint),
        #[allow(missing_docs)]
        UnknownRoot(UnknownRoot),
    }
    #[automatically_derived]
    impl OutboxErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [11u8, 138u8, 114u8, 75u8],
            [14u8, 19u8, 182u8, 157u8],
            [26u8, 208u8, 247u8, 67u8],
            [35u8, 41u8, 95u8, 14u8],
            [55u8, 111u8, 181u8, 90u8],
            [57u8, 51u8, 198u8, 252u8],
            [135u8, 48u8, 215u8, 200u8],
            [151u8, 21u8, 184u8, 211u8],
            [171u8, 106u8, 6u8, 131u8],
            [208u8, 84u8, 144u8, 159u8],
            [208u8, 175u8, 182u8, 97u8],
            [239u8, 52u8, 202u8, 92u8],
            [253u8, 172u8, 51u8, 30u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for OutboxErrors {
        const NAME: &'static str = "OutboxErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 13usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AlreadyInit(_) => {
                    <AlreadyInit as alloy_sol_types::SolError>::SELECTOR
                }
                Self::AlreadySpent(_) => {
                    <AlreadySpent as alloy_sol_types::SolError>::SELECTOR
                }
                Self::BadPostUpgradeInit(_) => {
                    <BadPostUpgradeInit as alloy_sol_types::SolError>::SELECTOR
                }
                Self::BridgeCallFailed(_) => {
                    <BridgeCallFailed as alloy_sol_types::SolError>::SELECTOR
                }
                Self::HadZeroInit(_) => {
                    <HadZeroInit as alloy_sol_types::SolError>::SELECTOR
                }
                Self::MerkleProofTooLong(_) => {
                    <MerkleProofTooLong as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotOwner(_) => <NotOwner as alloy_sol_types::SolError>::SELECTOR,
                Self::NotRollup(_) => <NotRollup as alloy_sol_types::SolError>::SELECTOR,
                Self::PathNotMinimal(_) => {
                    <PathNotMinimal as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ProofTooLong(_) => {
                    <ProofTooLong as alloy_sol_types::SolError>::SELECTOR
                }
                Self::RollupNotChanged(_) => {
                    <RollupNotChanged as alloy_sol_types::SolError>::SELECTOR
                }
                Self::SimulationOnlyEntrypoint(_) => {
                    <SimulationOnlyEntrypoint as alloy_sol_types::SolError>::SELECTOR
                }
                Self::UnknownRoot(_) => {
                    <UnknownRoot as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<OutboxErrors>] = &[
                {
                    fn PathNotMinimal(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OutboxErrors> {
                        <PathNotMinimal as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OutboxErrors::PathNotMinimal)
                    }
                    PathNotMinimal
                },
                {
                    fn SimulationOnlyEntrypoint(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OutboxErrors> {
                        <SimulationOnlyEntrypoint as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OutboxErrors::SimulationOnlyEntrypoint)
                    }
                    SimulationOnlyEntrypoint
                },
                {
                    fn HadZeroInit(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OutboxErrors> {
                        <HadZeroInit as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OutboxErrors::HadZeroInit)
                    }
                    HadZeroInit
                },
                {
                    fn NotOwner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OutboxErrors> {
                        <NotOwner as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OutboxErrors::NotOwner)
                    }
                    NotOwner
                },
                {
                    fn BridgeCallFailed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OutboxErrors> {
                        <BridgeCallFailed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OutboxErrors::BridgeCallFailed)
                    }
                    BridgeCallFailed
                },
                {
                    fn NotRollup(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OutboxErrors> {
                        <NotRollup as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OutboxErrors::NotRollup)
                    }
                    NotRollup
                },
                {
                    fn UnknownRoot(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OutboxErrors> {
                        <UnknownRoot as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OutboxErrors::UnknownRoot)
                    }
                    UnknownRoot
                },
                {
                    fn AlreadySpent(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OutboxErrors> {
                        <AlreadySpent as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OutboxErrors::AlreadySpent)
                    }
                    AlreadySpent
                },
                {
                    fn ProofTooLong(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OutboxErrors> {
                        <ProofTooLong as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OutboxErrors::ProofTooLong)
                    }
                    ProofTooLong
                },
                {
                    fn RollupNotChanged(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OutboxErrors> {
                        <RollupNotChanged as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OutboxErrors::RollupNotChanged)
                    }
                    RollupNotChanged
                },
                {
                    fn BadPostUpgradeInit(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OutboxErrors> {
                        <BadPostUpgradeInit as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OutboxErrors::BadPostUpgradeInit)
                    }
                    BadPostUpgradeInit
                },
                {
                    fn AlreadyInit(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OutboxErrors> {
                        <AlreadyInit as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OutboxErrors::AlreadyInit)
                    }
                    AlreadyInit
                },
                {
                    fn MerkleProofTooLong(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OutboxErrors> {
                        <MerkleProofTooLong as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OutboxErrors::MerkleProofTooLong)
                    }
                    MerkleProofTooLong
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AlreadyInit(inner) => {
                    <AlreadyInit as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::AlreadySpent(inner) => {
                    <AlreadySpent as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::BadPostUpgradeInit(inner) => {
                    <BadPostUpgradeInit as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::BridgeCallFailed(inner) => {
                    <BridgeCallFailed as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::HadZeroInit(inner) => {
                    <HadZeroInit as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::MerkleProofTooLong(inner) => {
                    <MerkleProofTooLong as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotOwner(inner) => {
                    <NotOwner as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::NotRollup(inner) => {
                    <NotRollup as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::PathNotMinimal(inner) => {
                    <PathNotMinimal as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ProofTooLong(inner) => {
                    <ProofTooLong as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::RollupNotChanged(inner) => {
                    <RollupNotChanged as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SimulationOnlyEntrypoint(inner) => {
                    <SimulationOnlyEntrypoint as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::UnknownRoot(inner) => {
                    <UnknownRoot as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AlreadyInit(inner) => {
                    <AlreadyInit as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::AlreadySpent(inner) => {
                    <AlreadySpent as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::BadPostUpgradeInit(inner) => {
                    <BadPostUpgradeInit as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::BridgeCallFailed(inner) => {
                    <BridgeCallFailed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::HadZeroInit(inner) => {
                    <HadZeroInit as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::MerkleProofTooLong(inner) => {
                    <MerkleProofTooLong as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotOwner(inner) => {
                    <NotOwner as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
                Self::NotRollup(inner) => {
                    <NotRollup as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
                Self::PathNotMinimal(inner) => {
                    <PathNotMinimal as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ProofTooLong(inner) => {
                    <ProofTooLong as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::RollupNotChanged(inner) => {
                    <RollupNotChanged as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SimulationOnlyEntrypoint(inner) => {
                    <SimulationOnlyEntrypoint as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::UnknownRoot(inner) => {
                    <UnknownRoot as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`Outbox`](self) events.
    pub enum OutboxEvents {
        #[allow(missing_docs)]
        OutBoxTransactionExecuted(OutBoxTransactionExecuted),
        #[allow(missing_docs)]
        SendRootUpdated(SendRootUpdated),
    }
    #[automatically_derived]
    impl OutboxEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                32u8,
                175u8,
                127u8,
                59u8,
                191u8,
                227u8,
                129u8,
                50u8,
                184u8,
                144u8,
                10u8,
                226u8,
                149u8,
                205u8,
                156u8,
                141u8,
                25u8,
                20u8,
                190u8,
                112u8,
                82u8,
                208u8,
                97u8,
                165u8,
                17u8,
                243u8,
                247u8,
                40u8,
                218u8,
                177u8,
                137u8,
                100u8,
            ],
            [
                180u8,
                223u8,
                56u8,
                71u8,
                48u8,
                15u8,
                7u8,
                106u8,
                54u8,
                156u8,
                215u8,
                109u8,
                35u8,
                20u8,
                180u8,
                112u8,
                161u8,
                25u8,
                77u8,
                158u8,
                138u8,
                107u8,
                185u8,
                127u8,
                24u8,
                96u8,
                174u8,
                232u8,
                138u8,
                95u8,
                103u8,
                72u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for OutboxEvents {
        const NAME: &'static str = "OutboxEvents";
        const COUNT: usize = 2usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <OutBoxTransactionExecuted as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OutBoxTransactionExecuted as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::OutBoxTransactionExecuted)
                }
                Some(<SendRootUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <SendRootUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::SendRootUpdated)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for OutboxEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::OutBoxTransactionExecuted(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::SendRootUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::OutBoxTransactionExecuted(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::SendRootUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`Outbox`](self) contract instance.

See the [wrapper's documentation](`OutboxInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> OutboxInstance<T, P, N> {
        OutboxInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<OutboxInstance<T, P, N>>,
    > {
        OutboxInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        OutboxInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`Outbox`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`Outbox`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct OutboxInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for OutboxInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("OutboxInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > OutboxInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`Outbox`](self) contract instance.

See the [wrapper's documentation](`OutboxInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<OutboxInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> OutboxInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> OutboxInstance<T, P, N> {
            OutboxInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > OutboxInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`OUTBOX_VERSION`] function.
        pub fn OUTBOX_VERSION(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, OUTBOX_VERSIONCall, N> {
            self.call_builder(&OUTBOX_VERSIONCall {})
        }
        ///Creates a new call builder for the [`bridge`] function.
        pub fn bridge(&self) -> alloy_contract::SolCallBuilder<T, &P, bridgeCall, N> {
            self.call_builder(&bridgeCall {})
        }
        ///Creates a new call builder for the [`calculateItemHash`] function.
        pub fn calculateItemHash(
            &self,
            l2Sender: alloy::sol_types::private::Address,
            to: alloy::sol_types::private::Address,
            l2Block: alloy::sol_types::private::primitives::aliases::U256,
            l1Block: alloy::sol_types::private::primitives::aliases::U256,
            l2Timestamp: alloy::sol_types::private::primitives::aliases::U256,
            value: alloy::sol_types::private::primitives::aliases::U256,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, calculateItemHashCall, N> {
            self.call_builder(
                &calculateItemHashCall {
                    l2Sender,
                    to,
                    l2Block,
                    l1Block,
                    l2Timestamp,
                    value,
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`calculateMerkleRoot`] function.
        pub fn calculateMerkleRoot(
            &self,
            proof: alloy::sol_types::private::Vec<
                alloy::sol_types::private::FixedBytes<32>,
            >,
            path: alloy::sol_types::private::primitives::aliases::U256,
            item: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, calculateMerkleRootCall, N> {
            self.call_builder(
                &calculateMerkleRootCall {
                    proof,
                    path,
                    item,
                },
            )
        }
        ///Creates a new call builder for the [`executeTransaction`] function.
        pub fn executeTransaction(
            &self,
            proof: alloy::sol_types::private::Vec<
                alloy::sol_types::private::FixedBytes<32>,
            >,
            index: alloy::sol_types::private::primitives::aliases::U256,
            l2Sender: alloy::sol_types::private::Address,
            to: alloy::sol_types::private::Address,
            l2Block: alloy::sol_types::private::primitives::aliases::U256,
            l1Block: alloy::sol_types::private::primitives::aliases::U256,
            l2Timestamp: alloy::sol_types::private::primitives::aliases::U256,
            value: alloy::sol_types::private::primitives::aliases::U256,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, executeTransactionCall, N> {
            self.call_builder(
                &executeTransactionCall {
                    proof,
                    index,
                    l2Sender,
                    to,
                    l2Block,
                    l1Block,
                    l2Timestamp,
                    value,
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`executeTransactionSimulation`] function.
        pub fn executeTransactionSimulation(
            &self,
            index: alloy::sol_types::private::primitives::aliases::U256,
            l2Sender: alloy::sol_types::private::Address,
            to: alloy::sol_types::private::Address,
            l2Block: alloy::sol_types::private::primitives::aliases::U256,
            l1Block: alloy::sol_types::private::primitives::aliases::U256,
            l2Timestamp: alloy::sol_types::private::primitives::aliases::U256,
            value: alloy::sol_types::private::primitives::aliases::U256,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, executeTransactionSimulationCall, N> {
            self.call_builder(
                &executeTransactionSimulationCall {
                    index,
                    l2Sender,
                    to,
                    l2Block,
                    l1Block,
                    l2Timestamp,
                    value,
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`initialize`] function.
        pub fn initialize(
            &self,
            _bridge: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, initializeCall, N> {
            self.call_builder(&initializeCall { _bridge })
        }
        ///Creates a new call builder for the [`isSpent`] function.
        pub fn isSpent(
            &self,
            index: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, isSpentCall, N> {
            self.call_builder(&isSpentCall { index })
        }
        ///Creates a new call builder for the [`l2ToL1BatchNum`] function.
        pub fn l2ToL1BatchNum(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, l2ToL1BatchNumCall, N> {
            self.call_builder(&l2ToL1BatchNumCall {})
        }
        ///Creates a new call builder for the [`l2ToL1Block`] function.
        pub fn l2ToL1Block(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, l2ToL1BlockCall, N> {
            self.call_builder(&l2ToL1BlockCall {})
        }
        ///Creates a new call builder for the [`l2ToL1EthBlock`] function.
        pub fn l2ToL1EthBlock(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, l2ToL1EthBlockCall, N> {
            self.call_builder(&l2ToL1EthBlockCall {})
        }
        ///Creates a new call builder for the [`l2ToL1OutputId`] function.
        pub fn l2ToL1OutputId(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, l2ToL1OutputIdCall, N> {
            self.call_builder(&l2ToL1OutputIdCall {})
        }
        ///Creates a new call builder for the [`l2ToL1Sender`] function.
        pub fn l2ToL1Sender(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, l2ToL1SenderCall, N> {
            self.call_builder(&l2ToL1SenderCall {})
        }
        ///Creates a new call builder for the [`l2ToL1Timestamp`] function.
        pub fn l2ToL1Timestamp(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, l2ToL1TimestampCall, N> {
            self.call_builder(&l2ToL1TimestampCall {})
        }
        ///Creates a new call builder for the [`postUpgradeInit`] function.
        pub fn postUpgradeInit(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, postUpgradeInitCall, N> {
            self.call_builder(&postUpgradeInitCall {})
        }
        ///Creates a new call builder for the [`rollup`] function.
        pub fn rollup(&self) -> alloy_contract::SolCallBuilder<T, &P, rollupCall, N> {
            self.call_builder(&rollupCall {})
        }
        ///Creates a new call builder for the [`roots`] function.
        pub fn roots(
            &self,
            _0: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, rootsCall, N> {
            self.call_builder(&rootsCall { _0 })
        }
        ///Creates a new call builder for the [`spent`] function.
        pub fn spent(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, spentCall, N> {
            self.call_builder(&spentCall { _0 })
        }
        ///Creates a new call builder for the [`updateRollupAddress`] function.
        pub fn updateRollupAddress(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, updateRollupAddressCall, N> {
            self.call_builder(&updateRollupAddressCall {})
        }
        ///Creates a new call builder for the [`updateSendRoot`] function.
        pub fn updateSendRoot(
            &self,
            root: alloy::sol_types::private::FixedBytes<32>,
            l2BlockHash: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, updateSendRootCall, N> {
            self.call_builder(
                &updateSendRootCall {
                    root,
                    l2BlockHash,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > OutboxInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`OutBoxTransactionExecuted`] event.
        pub fn OutBoxTransactionExecuted_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, OutBoxTransactionExecuted, N> {
            self.event_filter::<OutBoxTransactionExecuted>()
        }
        ///Creates a new event filter for the [`SendRootUpdated`] event.
        pub fn SendRootUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, SendRootUpdated, N> {
            self.event_filter::<SendRootUpdated>()
        }
    }
}
