/**

Generated by the following Solidity interface...
```solidity
interface ValidatorWallet {
    error BadArrayLength(uint256 expected, uint256 actual);
    error NotExecutorOrOwner(address actual);
    error OnlyOwnerDestination(address expected, address actual, address destination);
    error WithdrawEthFail(address destination);

    event AllowedExecutorDestinationsUpdated(address indexed destination, bool isSet);
    event ExecutorUpdated(address indexed executor, bool isExecutor);
    event Initialized(uint8 version);
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    receive() external payable;

    function allowedExecutorDestinations(address) external view returns (bool);
    function executeTransaction(bytes memory data, address destination, uint256 amount) external payable;
    function executeTransactionWithGasRefunder(address gasRefunder, bytes memory data, address destination, uint256 amount) external payable;
    function executeTransactions(bytes[] memory data, address[] memory destination, uint256[] memory amount) external payable;
    function executeTransactionsWithGasRefunder(address gasRefunder, bytes[] memory data, address[] memory destination, uint256[] memory amount) external payable;
    function executors(address) external view returns (bool);
    function initialize(address _executor, address _owner, address[] memory initialExecutorAllowedDests) external;
    function owner() external view returns (address);
    function renounceOwnership() external;
    function setAllowedExecutorDestinations(address[] memory destinations, bool[] memory isSet) external;
    function setExecutor(address[] memory newExecutors, bool[] memory isExecutor) external;
    function transferOwnership(address newOwner) external;
    function validateExecuteTransaction(address destination) external view;
    function withdrawEth(uint256 amount, address destination) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "receive",
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "allowedExecutorDestinations",
    "inputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "executeTransaction",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "destination",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "executeTransactionWithGasRefunder",
    "inputs": [
      {
        "name": "gasRefunder",
        "type": "address",
        "internalType": "contract IGasRefunder"
      },
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "destination",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "executeTransactions",
    "inputs": [
      {
        "name": "data",
        "type": "bytes[]",
        "internalType": "bytes[]"
      },
      {
        "name": "destination",
        "type": "address[]",
        "internalType": "address[]"
      },
      {
        "name": "amount",
        "type": "uint256[]",
        "internalType": "uint256[]"
      }
    ],
    "outputs": [],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "executeTransactionsWithGasRefunder",
    "inputs": [
      {
        "name": "gasRefunder",
        "type": "address",
        "internalType": "contract IGasRefunder"
      },
      {
        "name": "data",
        "type": "bytes[]",
        "internalType": "bytes[]"
      },
      {
        "name": "destination",
        "type": "address[]",
        "internalType": "address[]"
      },
      {
        "name": "amount",
        "type": "uint256[]",
        "internalType": "uint256[]"
      }
    ],
    "outputs": [],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "executors",
    "inputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "initialize",
    "inputs": [
      {
        "name": "_executor",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_owner",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "initialExecutorAllowedDests",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "renounceOwnership",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setAllowedExecutorDestinations",
    "inputs": [
      {
        "name": "destinations",
        "type": "address[]",
        "internalType": "address[]"
      },
      {
        "name": "isSet",
        "type": "bool[]",
        "internalType": "bool[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setExecutor",
    "inputs": [
      {
        "name": "newExecutors",
        "type": "address[]",
        "internalType": "address[]"
      },
      {
        "name": "isExecutor",
        "type": "bool[]",
        "internalType": "bool[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "transferOwnership",
    "inputs": [
      {
        "name": "newOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "validateExecuteTransaction",
    "inputs": [
      {
        "name": "destination",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "withdrawEth",
    "inputs": [
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "destination",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "AllowedExecutorDestinationsUpdated",
    "inputs": [
      {
        "name": "destination",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "isSet",
        "type": "bool",
        "indexed": false,
        "internalType": "bool"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "ExecutorUpdated",
    "inputs": [
      {
        "name": "executor",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "isExecutor",
        "type": "bool",
        "indexed": false,
        "internalType": "bool"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Initialized",
    "inputs": [
      {
        "name": "version",
        "type": "uint8",
        "indexed": false,
        "internalType": "uint8"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "OwnershipTransferred",
    "inputs": [
      {
        "name": "previousOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "BadArrayLength",
    "inputs": [
      {
        "name": "expected",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "actual",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "NotExecutorOrOwner",
    "inputs": [
      {
        "name": "actual",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "OnlyOwnerDestination",
    "inputs": [
      {
        "name": "expected",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "actual",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "destination",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "WithdrawEthFail",
    "inputs": [
      {
        "name": "destination",
        "type": "address",
        "internalType": "address"
      }
    ]
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod ValidatorWallet {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60c0604052306080526202000060a0523480156019575f5ffd5b5060805160a051611b9f6100425f395f8181610542015261111501525f610a0a0152611b9f5ff3fe6080604052600436106100dc575f3560e01c80638da5cb5b1161007c578063a158657c11610057578063a158657c14610237578063c179f1d914610256578063ce1d571f14610269578063f2fde38b1461027c575f5ffd5b80638da5cb5b146101c35780639ac2a011146101ea5780639be7bbd214610218575f5ffd5b80633a7c721a116100b75780633a7c721a1461015e578063715018a61461017d57806372f458661461019157806377a24f36146101a4575f5ffd5b8063097da1f8146100e75780630a2435f8146100fc578063193c8edd1461011b575f5ffd5b366100e357005b5f5ffd5b6100fa6100f53660046114ee565b61029b565b005b348015610107575f5ffd5b506100fa61011636600461159a565b610645565b348015610126575f5ffd5b50610149610135366004611606565b60666020525f908152604090205460ff1681565b60405190151581526020015b60405180910390f35b348015610169575f5ffd5b506100fa61017836600461159a565b6107c5565b348015610188575f5ffd5b506100fa61090c565b6100fa61019f366004611628565b61091f565b3480156101af575f5ffd5b506100fa6101be3660046116c7565b610936565b3480156101ce575f5ffd5b506033546040516001600160a01b039091168152602001610155565b3480156101f5575f5ffd5b50610149610204366004611606565b60656020525f908152604090205460ff1681565b348015610223575f5ffd5b506100fa610232366004611606565b610c43565b348015610242575f5ffd5b506100fa610251366004611710565b610ccd565b6100fa61026436600461173e565b610d6e565b6100fa6102773660046117ef565b61121a565b348015610287575f5ffd5b506100fa610296366004611606565b61122d565b335f9081526065602052604090205460ff161580156102c557506033546001600160a01b03163314155b1561030f57335b6040517ff26aea8b0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911660048201526024015b60405180910390fd5b845f5f5a90508515610372576001600160a01b0385163b6103725760405162461bcd60e51b815260206004820152600f60248201527f4e4f5f434f44455f41545f4144445200000000000000000000000000000000006044820152606401610306565b61037b85610c43565b5f856001600160a01b0316858989604051610397929190611848565b5f6040518083038185875af1925050503d805f81146103d1576040519150601f19603f3d011682016040523d82523d5f602084013e6103d6565b606091505b50509050806103eb576040513d805f833e8082fd5b506001600160a01b0383161561063b57365f602061040a83601f61186b565b6104149190611884565b9050610200610424600283611986565b61042e9190611884565b610439826006611994565b610443919061186b565b61044d908461186b565b92506104576112ba565b610463575f9150610591565b6001600160a01b0384161561059157836001600160a01b031663e83a2d826040518163ffffffff1660e01b81526004015f60405180830381865afa9250505080156104cf57506040513d5f823e601f3d908101601f191682016040526104cc91908101906119bf565b60015b156105915780511561058f575f856001600160a01b0316631f6d6ef76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610518573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061053c9190611a87565b905048817f0000000000000000000000000000000000000000000000000000000000000000845161056d9190611994565b6105779190611994565b6105819190611884565b61058b908661186b565b9450505b505b846001600160a01b031663e3db8a49335a6105ac9087611a9e565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b0390921660048301526024820152604481018590526064016020604051808303815f875af1158015610613573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106379190611abe565b5050505b5050505050505050565b61064d6112ce565b8281146106775760405163088253c360e11b81526004810184905260248101829052604401610306565b5f5b67ffffffffffffffff81168411156107be5782828267ffffffffffffffff168181106106a7576106a7611ad9565b90506020020160208101906106bc9190611aed565b60655f87878567ffffffffffffffff168181106106db576106db611ad9565b90506020020160208101906106f09190611606565b6001600160a01b0316815260208101919091526040015f20805460ff1916911515919091179055848467ffffffffffffffff831681811061073357610733611ad9565b90506020020160208101906107489190611606565b6001600160a01b03167f9fdbc2d48b8a0db2f62663bf9312ad02f5b1f6414ad600b55a247d09aeec3ea284848467ffffffffffffffff1681811061078e5761078e611ad9565b90506020020160208101906107a39190611aed565b604051901515815260200160405180910390a2600101610679565b5050505050565b6107cd6112ce565b8281146107f75760405163088253c360e11b81526004810184905260248101829052604401610306565b5f5b838110156107be5782828281811061081357610813611ad9565b90506020020160208101906108289190611aed565b60665f87878581811061083d5761083d611ad9565b90506020020160208101906108529190611606565b6001600160a01b0316815260208101919091526040015f20805460ff191691151591909117905584848281811061088b5761088b611ad9565b90506020020160208101906108a09190611606565b6001600160a01b03167fab063fe575c4df359aaf3733bcf10706bacfdd24557e670a2c1cba126ae4d8a48484848181106108dc576108dc611ad9565b90506020020160208101906108f19190611aed565b604051901515815260200160405180910390a26001016107f9565b6109146112ce565b61091d5f611328565b565b61092e5f878787878787610d6e565b505050505050565b5f54610100900460ff161580801561095457505f54600160ff909116105b8061096d5750303b15801561096d57505f5460ff166001145b6109df5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610306565b5f805460ff191660011790558015610a00575f805461ff0019166101001790555b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610a9e5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610306565b610aa6611391565b610aaf8461122d565b6001600160a01b0385165f81815260656020908152604091829020805460ff1916600190811790915591519182527f9fdbc2d48b8a0db2f62663bf9312ad02f5b1f6414ad600b55a247d09aeec3ea2910160405180910390a25f5b67ffffffffffffffff8116831115610bf757600160665f86868567ffffffffffffffff16818110610b3d57610b3d611ad9565b9050602002016020810190610b529190611606565b6001600160a01b0316815260208101919091526040015f20805460ff1916911515919091179055838367ffffffffffffffff8316818110610b9557610b95611ad9565b9050602002016020810190610baa9190611606565b6001600160a01b03167fab063fe575c4df359aaf3733bcf10706bacfdd24557e670a2c1cba126ae4d8a46001604051610be7911515815260200190565b60405180910390a2600101610b0a565b5080156107be575f805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050505050565b6001600160a01b0381165f9081526066602052604090205460ff16158015610c7657506033546001600160a01b03163314155b15610cca576033546040517f41fc6f8a0000000000000000000000000000000000000000000000000000000081526001600160a01b0391821660048201523360248201529082166044820152606401610306565b50565b610cd56112ce565b5f816001600160a01b0316836040515f6040518083038185875af1925050503d805f8114610d1e576040519150601f19603f3d011682016040523d82523d5f602084013e610d23565b606091505b5050905080610d69576040517f7edbb4980000000000000000000000000000000000000000000000000000000081526001600160a01b0383166004820152602401610306565b505050565b335f9081526065602052604090205460ff16158015610d9857506033546001600160a01b03163314155b15610da357336102cc565b865f5f5a905087868114610dd45760405163088253c360e11b81526004810182905260248101889052604401610306565b808514610dfe5760405163088253c360e11b81526004810182905260248101869052604401610306565b5f5b81811015610fbd575f8b8b83818110610e1b57610e1b611ad9565b9050602002810190610e2d9190611b08565b90501115610eba57610e6e898983818110610e4a57610e4a611ad9565b9050602002016020810190610e5f9190611606565b6001600160a01b03163b151590565b610eba5760405162461bcd60e51b815260206004820152600f60248201527f4e4f5f434f44455f41545f4144445200000000000000000000000000000000006044820152606401610306565b610ee4898983818110610ecf57610ecf611ad9565b90506020020160208101906102329190611606565b5f898983818110610ef757610ef7611ad9565b9050602002016020810190610f0c9190611606565b6001600160a01b0316888884818110610f2757610f27611ad9565b905060200201358d8d85818110610f4057610f40611ad9565b9050602002810190610f529190611b08565b604051610f60929190611848565b5f6040518083038185875af1925050503d805f8114610f9a576040519150601f19603f3d011682016040523d82523d5f602084013e610f9f565b606091505b5050905080610fb4576040513d805f833e8082fd5b50600101610e00565b50506001600160a01b0383161561120e57365f6020610fdd83601f61186b565b610fe79190611884565b9050610200610ff7600283611986565b6110019190611884565b61100c826006611994565b611016919061186b565b611020908461186b565b925061102a6112ba565b611036575f9150611164565b6001600160a01b0384161561116457836001600160a01b031663e83a2d826040518163ffffffff1660e01b81526004015f60405180830381865afa9250505080156110a257506040513d5f823e601f3d908101601f1916820160405261109f91908101906119bf565b60015b1561116457805115611162575f856001600160a01b0316631f6d6ef76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110eb573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061110f9190611a87565b905048817f000000000000000000000000000000000000000000000000000000000000000084516111409190611994565b61114a9190611994565b6111549190611884565b61115e908661186b565b9450505b505b846001600160a01b031663e3db8a49335a61117f9087611a9e565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b0390921660048301526024820152604481018590526064016020604051808303815f875af11580156111e6573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061120a9190611abe565b5050505b50505050505050505050565b6112275f8585858561029b565b50505050565b6112356112ce565b6001600160a01b0381166112b15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610306565b610cca81611328565b5f33321480156112c95750333b155b905090565b6033546001600160a01b0316331461091d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610306565b603380546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b5f54610100900460ff1661140d5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610306565b61091d5f54610100900460ff1661148c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610306565b61091d33611328565b6001600160a01b0381168114610cca575f5ffd5b5f5f83601f8401126114b9575f5ffd5b50813567ffffffffffffffff8111156114d0575f5ffd5b6020830191508360208285010111156114e7575f5ffd5b9250929050565b5f5f5f5f5f60808688031215611502575f5ffd5b853561150d81611495565b9450602086013567ffffffffffffffff811115611528575f5ffd5b611534888289016114a9565b909550935050604086013561154881611495565b949793965091946060013592915050565b5f5f83601f840112611569575f5ffd5b50813567ffffffffffffffff811115611580575f5ffd5b6020830191508360208260051b85010111156114e7575f5ffd5b5f5f5f5f604085870312156115ad575f5ffd5b843567ffffffffffffffff8111156115c3575f5ffd5b6115cf87828801611559565b909550935050602085013567ffffffffffffffff8111156115ee575f5ffd5b6115fa87828801611559565b95989497509550505050565b5f60208284031215611616575f5ffd5b813561162181611495565b9392505050565b5f5f5f5f5f5f6060878903121561163d575f5ffd5b863567ffffffffffffffff811115611653575f5ffd5b61165f89828a01611559565b909750955050602087013567ffffffffffffffff81111561167e575f5ffd5b61168a89828a01611559565b909550935050604087013567ffffffffffffffff8111156116a9575f5ffd5b6116b589828a01611559565b979a9699509497509295939492505050565b5f5f5f5f606085870312156116da575f5ffd5b84356116e581611495565b935060208501356116f581611495565b9250604085013567ffffffffffffffff8111156115ee575f5ffd5b5f5f60408385031215611721575f5ffd5b82359150602083013561173381611495565b809150509250929050565b5f5f5f5f5f5f5f6080888a031215611754575f5ffd5b873561175f81611495565b9650602088013567ffffffffffffffff81111561177a575f5ffd5b6117868a828b01611559565b909750955050604088013567ffffffffffffffff8111156117a5575f5ffd5b6117b18a828b01611559565b909550935050606088013567ffffffffffffffff8111156117d0575f5ffd5b6117dc8a828b01611559565b989b979a50959850939692959293505050565b5f5f5f5f60608587031215611802575f5ffd5b843567ffffffffffffffff811115611818575f5ffd5b611824878288016114a9565b909550935050602085013561183881611495565b9396929550929360400135925050565b818382375f9101908152919050565b634e487b7160e01b5f52601160045260245ffd5b8082018082111561187e5761187e611857565b92915050565b5f8261189e57634e487b7160e01b5f52601260045260245ffd5b500490565b6001815b60018411156118de578085048111156118c2576118c2611857565b60018416156118d057908102905b60019390931c9280026118a7565b935093915050565b5f826118f45750600161187e565b8161190057505f61187e565b816001811461191657600281146119205761193c565b600191505061187e565b60ff84111561193157611931611857565b50506001821b61187e565b5060208310610133831016604e8410600b841016171561195f575081810a61187e565b61196b5f1984846118a3565b805f190482111561197e5761197e611857565b029392505050565b5f61162160ff8416836118e6565b808202811582820484141761187e5761187e611857565b634e487b7160e01b5f52604160045260245ffd5b5f602082840312156119cf575f5ffd5b815167ffffffffffffffff8111156119e5575f5ffd5b8201601f810184136119f5575f5ffd5b805167ffffffffffffffff811115611a0f57611a0f6119ab565b8060051b604051601f19603f830116810181811067ffffffffffffffff82111715611a3c57611a3c6119ab565b604052918252602081840181019290810187841115611a59575f5ffd5b6020850194505b83851015611a7c57845180825260209586019590935001611a60565b509695505050505050565b5f60208284031215611a97575f5ffd5b5051919050565b8181038181111561187e5761187e611857565b8015158114610cca575f5ffd5b5f60208284031215611ace575f5ffd5b815161162181611ab1565b634e487b7160e01b5f52603260045260245ffd5b5f60208284031215611afd575f5ffd5b813561162181611ab1565b5f5f83357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112611b3b575f5ffd5b83018035915067ffffffffffffffff821115611b55575f5ffd5b6020019150368190038213156114e7575f5ffdfea26469706673582212201e1a28eed34ce279e22e8208c798ba63c51b1e13ce3148351448139e4246f04164736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xC0`@R0`\x80Rb\x02\0\0`\xA0R4\x80\x15`\x19W__\xFD[P`\x80Q`\xA0Qa\x1B\x9Fa\0B_9_\x81\x81a\x05B\x01Ra\x11\x15\x01R_a\n\n\x01Ra\x1B\x9F_\xF3\xFE`\x80`@R`\x046\x10a\0\xDCW_5`\xE0\x1C\x80c\x8D\xA5\xCB[\x11a\0|W\x80c\xA1Xe|\x11a\0WW\x80c\xA1Xe|\x14a\x027W\x80c\xC1y\xF1\xD9\x14a\x02VW\x80c\xCE\x1DW\x1F\x14a\x02iW\x80c\xF2\xFD\xE3\x8B\x14a\x02|W__\xFD[\x80c\x8D\xA5\xCB[\x14a\x01\xC3W\x80c\x9A\xC2\xA0\x11\x14a\x01\xEAW\x80c\x9B\xE7\xBB\xD2\x14a\x02\x18W__\xFD[\x80c:|r\x1A\x11a\0\xB7W\x80c:|r\x1A\x14a\x01^W\x80cqP\x18\xA6\x14a\x01}W\x80cr\xF4Xf\x14a\x01\x91W\x80cw\xA2O6\x14a\x01\xA4W__\xFD[\x80c\t}\xA1\xF8\x14a\0\xE7W\x80c\n$5\xF8\x14a\0\xFCW\x80c\x19<\x8E\xDD\x14a\x01\x1BW__\xFD[6a\0\xE3W\0[__\xFD[a\0\xFAa\0\xF56`\x04a\x14\xEEV[a\x02\x9BV[\0[4\x80\x15a\x01\x07W__\xFD[Pa\0\xFAa\x01\x166`\x04a\x15\x9AV[a\x06EV[4\x80\x15a\x01&W__\xFD[Pa\x01Ia\x0156`\x04a\x16\x06V[`f` R_\x90\x81R`@\x90 T`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01iW__\xFD[Pa\0\xFAa\x01x6`\x04a\x15\x9AV[a\x07\xC5V[4\x80\x15a\x01\x88W__\xFD[Pa\0\xFAa\t\x0CV[a\0\xFAa\x01\x9F6`\x04a\x16(V[a\t\x1FV[4\x80\x15a\x01\xAFW__\xFD[Pa\0\xFAa\x01\xBE6`\x04a\x16\xC7V[a\t6V[4\x80\x15a\x01\xCEW__\xFD[P`3T`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01a\x01UV[4\x80\x15a\x01\xF5W__\xFD[Pa\x01Ia\x02\x046`\x04a\x16\x06V[`e` R_\x90\x81R`@\x90 T`\xFF\x16\x81V[4\x80\x15a\x02#W__\xFD[Pa\0\xFAa\x0226`\x04a\x16\x06V[a\x0CCV[4\x80\x15a\x02BW__\xFD[Pa\0\xFAa\x02Q6`\x04a\x17\x10V[a\x0C\xCDV[a\0\xFAa\x02d6`\x04a\x17>V[a\rnV[a\0\xFAa\x02w6`\x04a\x17\xEFV[a\x12\x1AV[4\x80\x15a\x02\x87W__\xFD[Pa\0\xFAa\x02\x966`\x04a\x16\x06V[a\x12-V[3_\x90\x81R`e` R`@\x90 T`\xFF\x16\x15\x80\x15a\x02\xC5WP`3T`\x01`\x01`\xA0\x1B\x03\x163\x14\x15[\x15a\x03\x0FW3[`@Q\x7F\xF2j\xEA\x8B\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16`\x04\x82\x01R`$\x01[`@Q\x80\x91\x03\x90\xFD[\x84__Z\x90P\x85\x15a\x03rW`\x01`\x01`\xA0\x1B\x03\x85\x16;a\x03rW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0F`$\x82\x01R\x7FNO_CODE_AT_ADDR\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x03\x06V[a\x03{\x85a\x0CCV[_\x85`\x01`\x01`\xA0\x1B\x03\x16\x85\x89\x89`@Qa\x03\x97\x92\x91\x90a\x18HV[_`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80_\x81\x14a\x03\xD1W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x03\xD6V[``\x91P[PP\x90P\x80a\x03\xEBW`@Q=\x80_\x83>\x80\x82\xFD[P`\x01`\x01`\xA0\x1B\x03\x83\x16\x15a\x06;W6_` a\x04\n\x83`\x1Fa\x18kV[a\x04\x14\x91\x90a\x18\x84V[\x90Pa\x02\0a\x04$`\x02\x83a\x19\x86V[a\x04.\x91\x90a\x18\x84V[a\x049\x82`\x06a\x19\x94V[a\x04C\x91\x90a\x18kV[a\x04M\x90\x84a\x18kV[\x92Pa\x04Wa\x12\xBAV[a\x04cW_\x91Pa\x05\x91V[`\x01`\x01`\xA0\x1B\x03\x84\x16\x15a\x05\x91W\x83`\x01`\x01`\xA0\x1B\x03\x16c\xE8:-\x82`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81\x86Z\xFA\x92PPP\x80\x15a\x04\xCFWP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x04\xCC\x91\x90\x81\x01\x90a\x19\xBFV[`\x01[\x15a\x05\x91W\x80Q\x15a\x05\x8FW_\x85`\x01`\x01`\xA0\x1B\x03\x16c\x1Fmn\xF7`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x05\x18W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x05<\x91\x90a\x1A\x87V[\x90PH\x81\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x84Qa\x05m\x91\x90a\x19\x94V[a\x05w\x91\x90a\x19\x94V[a\x05\x81\x91\x90a\x18\x84V[a\x05\x8B\x90\x86a\x18kV[\x94PP[P[\x84`\x01`\x01`\xA0\x1B\x03\x16c\xE3\xDB\x8AI3Za\x05\xAC\x90\x87a\x1A\x9EV[`@Q\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xE0\x85\x90\x1B\x16\x81R`\x01`\x01`\xA0\x1B\x03\x90\x92\x16`\x04\x83\x01R`$\x82\x01R`D\x81\x01\x85\x90R`d\x01` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x06\x13W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x067\x91\x90a\x1A\xBEV[PPP[PPPPPPPPV[a\x06Ma\x12\xCEV[\x82\x81\x14a\x06wW`@Qc\x08\x82S\xC3`\xE1\x1B\x81R`\x04\x81\x01\x84\x90R`$\x81\x01\x82\x90R`D\x01a\x03\x06V[_[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x84\x11\x15a\x07\xBEW\x82\x82\x82g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81\x81\x10a\x06\xA7Wa\x06\xA7a\x1A\xD9V[\x90P` \x02\x01` \x81\x01\x90a\x06\xBC\x91\x90a\x1A\xEDV[`e_\x87\x87\x85g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81\x81\x10a\x06\xDBWa\x06\xDBa\x1A\xD9V[\x90P` \x02\x01` \x81\x01\x90a\x06\xF0\x91\x90a\x16\x06V[`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x81\x01\x91\x90\x91R`@\x01_ \x80T`\xFF\x19\x16\x91\x15\x15\x91\x90\x91\x17\x90U\x84\x84g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16\x81\x81\x10a\x073Wa\x073a\x1A\xD9V[\x90P` \x02\x01` \x81\x01\x90a\x07H\x91\x90a\x16\x06V[`\x01`\x01`\xA0\x1B\x03\x16\x7F\x9F\xDB\xC2\xD4\x8B\x8A\r\xB2\xF6&c\xBF\x93\x12\xAD\x02\xF5\xB1\xF6AJ\xD6\0\xB5Z$}\t\xAE\xEC>\xA2\x84\x84\x84g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81\x81\x10a\x07\x8EWa\x07\x8Ea\x1A\xD9V[\x90P` \x02\x01` \x81\x01\x90a\x07\xA3\x91\x90a\x1A\xEDV[`@Q\x90\x15\x15\x81R` \x01`@Q\x80\x91\x03\x90\xA2`\x01\x01a\x06yV[PPPPPV[a\x07\xCDa\x12\xCEV[\x82\x81\x14a\x07\xF7W`@Qc\x08\x82S\xC3`\xE1\x1B\x81R`\x04\x81\x01\x84\x90R`$\x81\x01\x82\x90R`D\x01a\x03\x06V[_[\x83\x81\x10\x15a\x07\xBEW\x82\x82\x82\x81\x81\x10a\x08\x13Wa\x08\x13a\x1A\xD9V[\x90P` \x02\x01` \x81\x01\x90a\x08(\x91\x90a\x1A\xEDV[`f_\x87\x87\x85\x81\x81\x10a\x08=Wa\x08=a\x1A\xD9V[\x90P` \x02\x01` \x81\x01\x90a\x08R\x91\x90a\x16\x06V[`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x81\x01\x91\x90\x91R`@\x01_ \x80T`\xFF\x19\x16\x91\x15\x15\x91\x90\x91\x17\x90U\x84\x84\x82\x81\x81\x10a\x08\x8BWa\x08\x8Ba\x1A\xD9V[\x90P` \x02\x01` \x81\x01\x90a\x08\xA0\x91\x90a\x16\x06V[`\x01`\x01`\xA0\x1B\x03\x16\x7F\xAB\x06?\xE5u\xC4\xDF5\x9A\xAF73\xBC\xF1\x07\x06\xBA\xCF\xDD$U~g\n,\x1C\xBA\x12j\xE4\xD8\xA4\x84\x84\x84\x81\x81\x10a\x08\xDCWa\x08\xDCa\x1A\xD9V[\x90P` \x02\x01` \x81\x01\x90a\x08\xF1\x91\x90a\x1A\xEDV[`@Q\x90\x15\x15\x81R` \x01`@Q\x80\x91\x03\x90\xA2`\x01\x01a\x07\xF9V[a\t\x14a\x12\xCEV[a\t\x1D_a\x13(V[V[a\t._\x87\x87\x87\x87\x87\x87a\rnV[PPPPPPV[_Ta\x01\0\x90\x04`\xFF\x16\x15\x80\x80\x15a\tTWP_T`\x01`\xFF\x90\x91\x16\x10[\x80a\tmWP0;\x15\x80\x15a\tmWP_T`\xFF\x16`\x01\x14[a\t\xDFW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`.`$\x82\x01R\x7FInitializable: contract is alrea`D\x82\x01R\x7Fdy initialized\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x03\x06V[_\x80T`\xFF\x19\x16`\x01\x17\x90U\x80\x15a\n\0W_\x80Ta\xFF\0\x19\x16a\x01\0\x17\x90U[`\x01`\x01`\xA0\x1B\x03\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x160\x03a\n\x9EW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`,`$\x82\x01R\x7FFunction must be called through `D\x82\x01R\x7Fdelegatecall\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x03\x06V[a\n\xA6a\x13\x91V[a\n\xAF\x84a\x12-V[`\x01`\x01`\xA0\x1B\x03\x85\x16_\x81\x81R`e` \x90\x81R`@\x91\x82\x90 \x80T`\xFF\x19\x16`\x01\x90\x81\x17\x90\x91U\x91Q\x91\x82R\x7F\x9F\xDB\xC2\xD4\x8B\x8A\r\xB2\xF6&c\xBF\x93\x12\xAD\x02\xF5\xB1\xF6AJ\xD6\0\xB5Z$}\t\xAE\xEC>\xA2\x91\x01`@Q\x80\x91\x03\x90\xA2_[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x83\x11\x15a\x0B\xF7W`\x01`f_\x86\x86\x85g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81\x81\x10a\x0B=Wa\x0B=a\x1A\xD9V[\x90P` \x02\x01` \x81\x01\x90a\x0BR\x91\x90a\x16\x06V[`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x81\x01\x91\x90\x91R`@\x01_ \x80T`\xFF\x19\x16\x91\x15\x15\x91\x90\x91\x17\x90U\x83\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16\x81\x81\x10a\x0B\x95Wa\x0B\x95a\x1A\xD9V[\x90P` \x02\x01` \x81\x01\x90a\x0B\xAA\x91\x90a\x16\x06V[`\x01`\x01`\xA0\x1B\x03\x16\x7F\xAB\x06?\xE5u\xC4\xDF5\x9A\xAF73\xBC\xF1\x07\x06\xBA\xCF\xDD$U~g\n,\x1C\xBA\x12j\xE4\xD8\xA4`\x01`@Qa\x0B\xE7\x91\x15\x15\x81R` \x01\x90V[`@Q\x80\x91\x03\x90\xA2`\x01\x01a\x0B\nV[P\x80\x15a\x07\xBEW_\x80Ta\xFF\0\x19\x16\x90U`@Q`\x01\x81R\x7F\x7F&\xB8?\xF9n\x1F+jh/\x138R\xF6y\x8A\t\xC4e\xDA\x95\x92\x14`\xCE\xFB8G@$\x98\x90` \x01`@Q\x80\x91\x03\x90\xA1PPPPPV[`\x01`\x01`\xA0\x1B\x03\x81\x16_\x90\x81R`f` R`@\x90 T`\xFF\x16\x15\x80\x15a\x0CvWP`3T`\x01`\x01`\xA0\x1B\x03\x163\x14\x15[\x15a\x0C\xCAW`3T`@Q\x7FA\xFCo\x8A\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R3`$\x82\x01R\x90\x82\x16`D\x82\x01R`d\x01a\x03\x06V[PV[a\x0C\xD5a\x12\xCEV[_\x81`\x01`\x01`\xA0\x1B\x03\x16\x83`@Q_`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80_\x81\x14a\r\x1EW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\r#V[``\x91P[PP\x90P\x80a\riW`@Q\x7F~\xDB\xB4\x98\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x01`\x01`\xA0\x1B\x03\x83\x16`\x04\x82\x01R`$\x01a\x03\x06V[PPPV[3_\x90\x81R`e` R`@\x90 T`\xFF\x16\x15\x80\x15a\r\x98WP`3T`\x01`\x01`\xA0\x1B\x03\x163\x14\x15[\x15a\r\xA3W3a\x02\xCCV[\x86__Z\x90P\x87\x86\x81\x14a\r\xD4W`@Qc\x08\x82S\xC3`\xE1\x1B\x81R`\x04\x81\x01\x82\x90R`$\x81\x01\x88\x90R`D\x01a\x03\x06V[\x80\x85\x14a\r\xFEW`@Qc\x08\x82S\xC3`\xE1\x1B\x81R`\x04\x81\x01\x82\x90R`$\x81\x01\x86\x90R`D\x01a\x03\x06V[_[\x81\x81\x10\x15a\x0F\xBDW_\x8B\x8B\x83\x81\x81\x10a\x0E\x1BWa\x0E\x1Ba\x1A\xD9V[\x90P` \x02\x81\x01\x90a\x0E-\x91\x90a\x1B\x08V[\x90P\x11\x15a\x0E\xBAWa\x0En\x89\x89\x83\x81\x81\x10a\x0EJWa\x0EJa\x1A\xD9V[\x90P` \x02\x01` \x81\x01\x90a\x0E_\x91\x90a\x16\x06V[`\x01`\x01`\xA0\x1B\x03\x16;\x15\x15\x90V[a\x0E\xBAW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0F`$\x82\x01R\x7FNO_CODE_AT_ADDR\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x03\x06V[a\x0E\xE4\x89\x89\x83\x81\x81\x10a\x0E\xCFWa\x0E\xCFa\x1A\xD9V[\x90P` \x02\x01` \x81\x01\x90a\x022\x91\x90a\x16\x06V[_\x89\x89\x83\x81\x81\x10a\x0E\xF7Wa\x0E\xF7a\x1A\xD9V[\x90P` \x02\x01` \x81\x01\x90a\x0F\x0C\x91\x90a\x16\x06V[`\x01`\x01`\xA0\x1B\x03\x16\x88\x88\x84\x81\x81\x10a\x0F'Wa\x0F'a\x1A\xD9V[\x90P` \x02\x015\x8D\x8D\x85\x81\x81\x10a\x0F@Wa\x0F@a\x1A\xD9V[\x90P` \x02\x81\x01\x90a\x0FR\x91\x90a\x1B\x08V[`@Qa\x0F`\x92\x91\x90a\x18HV[_`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80_\x81\x14a\x0F\x9AW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x0F\x9FV[``\x91P[PP\x90P\x80a\x0F\xB4W`@Q=\x80_\x83>\x80\x82\xFD[P`\x01\x01a\x0E\0V[PP`\x01`\x01`\xA0\x1B\x03\x83\x16\x15a\x12\x0EW6_` a\x0F\xDD\x83`\x1Fa\x18kV[a\x0F\xE7\x91\x90a\x18\x84V[\x90Pa\x02\0a\x0F\xF7`\x02\x83a\x19\x86V[a\x10\x01\x91\x90a\x18\x84V[a\x10\x0C\x82`\x06a\x19\x94V[a\x10\x16\x91\x90a\x18kV[a\x10 \x90\x84a\x18kV[\x92Pa\x10*a\x12\xBAV[a\x106W_\x91Pa\x11dV[`\x01`\x01`\xA0\x1B\x03\x84\x16\x15a\x11dW\x83`\x01`\x01`\xA0\x1B\x03\x16c\xE8:-\x82`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81\x86Z\xFA\x92PPP\x80\x15a\x10\xA2WP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x10\x9F\x91\x90\x81\x01\x90a\x19\xBFV[`\x01[\x15a\x11dW\x80Q\x15a\x11bW_\x85`\x01`\x01`\xA0\x1B\x03\x16c\x1Fmn\xF7`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x10\xEBW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x11\x0F\x91\x90a\x1A\x87V[\x90PH\x81\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x84Qa\x11@\x91\x90a\x19\x94V[a\x11J\x91\x90a\x19\x94V[a\x11T\x91\x90a\x18\x84V[a\x11^\x90\x86a\x18kV[\x94PP[P[\x84`\x01`\x01`\xA0\x1B\x03\x16c\xE3\xDB\x8AI3Za\x11\x7F\x90\x87a\x1A\x9EV[`@Q\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xE0\x85\x90\x1B\x16\x81R`\x01`\x01`\xA0\x1B\x03\x90\x92\x16`\x04\x83\x01R`$\x82\x01R`D\x81\x01\x85\x90R`d\x01` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x11\xE6W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x12\n\x91\x90a\x1A\xBEV[PPP[PPPPPPPPPPV[a\x12'_\x85\x85\x85\x85a\x02\x9BV[PPPPV[a\x125a\x12\xCEV[`\x01`\x01`\xA0\x1B\x03\x81\x16a\x12\xB1W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FOwnable: new owner is the zero a`D\x82\x01R\x7Fddress\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x03\x06V[a\x0C\xCA\x81a\x13(V[_32\x14\x80\x15a\x12\xC9WP3;\x15[\x90P\x90V[`3T`\x01`\x01`\xA0\x1B\x03\x163\x14a\t\x1DW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01\x81\x90R`$\x82\x01R\x7FOwnable: caller is not the owner`D\x82\x01R`d\x01a\x03\x06V[`3\x80T`\x01`\x01`\xA0\x1B\x03\x83\x81\x16\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83\x16\x81\x17\x90\x93U`@Q\x91\x16\x91\x90\x82\x90\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x90_\x90\xA3PPV[_Ta\x01\0\x90\x04`\xFF\x16a\x14\rW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`+`$\x82\x01R\x7FInitializable: contract is not i`D\x82\x01R\x7Fnitializing\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x03\x06V[a\t\x1D_Ta\x01\0\x90\x04`\xFF\x16a\x14\x8CW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`+`$\x82\x01R\x7FInitializable: contract is not i`D\x82\x01R\x7Fnitializing\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x03\x06V[a\t\x1D3a\x13(V[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x0C\xCAW__\xFD[__\x83`\x1F\x84\x01\x12a\x14\xB9W__\xFD[P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x14\xD0W__\xFD[` \x83\x01\x91P\x83` \x82\x85\x01\x01\x11\x15a\x14\xE7W__\xFD[\x92P\x92\x90PV[_____`\x80\x86\x88\x03\x12\x15a\x15\x02W__\xFD[\x855a\x15\r\x81a\x14\x95V[\x94P` \x86\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x15(W__\xFD[a\x154\x88\x82\x89\x01a\x14\xA9V[\x90\x95P\x93PP`@\x86\x015a\x15H\x81a\x14\x95V[\x94\x97\x93\x96P\x91\x94``\x015\x92\x91PPV[__\x83`\x1F\x84\x01\x12a\x15iW__\xFD[P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x15\x80W__\xFD[` \x83\x01\x91P\x83` \x82`\x05\x1B\x85\x01\x01\x11\x15a\x14\xE7W__\xFD[____`@\x85\x87\x03\x12\x15a\x15\xADW__\xFD[\x845g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x15\xC3W__\xFD[a\x15\xCF\x87\x82\x88\x01a\x15YV[\x90\x95P\x93PP` \x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x15\xEEW__\xFD[a\x15\xFA\x87\x82\x88\x01a\x15YV[\x95\x98\x94\x97P\x95PPPPV[_` \x82\x84\x03\x12\x15a\x16\x16W__\xFD[\x815a\x16!\x81a\x14\x95V[\x93\x92PPPV[______``\x87\x89\x03\x12\x15a\x16=W__\xFD[\x865g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x16SW__\xFD[a\x16_\x89\x82\x8A\x01a\x15YV[\x90\x97P\x95PP` \x87\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x16~W__\xFD[a\x16\x8A\x89\x82\x8A\x01a\x15YV[\x90\x95P\x93PP`@\x87\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x16\xA9W__\xFD[a\x16\xB5\x89\x82\x8A\x01a\x15YV[\x97\x9A\x96\x99P\x94\x97P\x92\x95\x93\x94\x92PPPV[____``\x85\x87\x03\x12\x15a\x16\xDAW__\xFD[\x845a\x16\xE5\x81a\x14\x95V[\x93P` \x85\x015a\x16\xF5\x81a\x14\x95V[\x92P`@\x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x15\xEEW__\xFD[__`@\x83\x85\x03\x12\x15a\x17!W__\xFD[\x825\x91P` \x83\x015a\x173\x81a\x14\x95V[\x80\x91PP\x92P\x92\x90PV[_______`\x80\x88\x8A\x03\x12\x15a\x17TW__\xFD[\x875a\x17_\x81a\x14\x95V[\x96P` \x88\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x17zW__\xFD[a\x17\x86\x8A\x82\x8B\x01a\x15YV[\x90\x97P\x95PP`@\x88\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x17\xA5W__\xFD[a\x17\xB1\x8A\x82\x8B\x01a\x15YV[\x90\x95P\x93PP``\x88\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x17\xD0W__\xFD[a\x17\xDC\x8A\x82\x8B\x01a\x15YV[\x98\x9B\x97\x9AP\x95\x98P\x93\x96\x92\x95\x92\x93PPPV[____``\x85\x87\x03\x12\x15a\x18\x02W__\xFD[\x845g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x18\x18W__\xFD[a\x18$\x87\x82\x88\x01a\x14\xA9V[\x90\x95P\x93PP` \x85\x015a\x188\x81a\x14\x95V[\x93\x96\x92\x95P\x92\x93`@\x015\x92PPV[\x81\x83\x827_\x91\x01\x90\x81R\x91\x90PV[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[\x80\x82\x01\x80\x82\x11\x15a\x18~Wa\x18~a\x18WV[\x92\x91PPV[_\x82a\x18\x9EWcNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[P\x04\x90V[`\x01\x81[`\x01\x84\x11\x15a\x18\xDEW\x80\x85\x04\x81\x11\x15a\x18\xC2Wa\x18\xC2a\x18WV[`\x01\x84\x16\x15a\x18\xD0W\x90\x81\x02\x90[`\x01\x93\x90\x93\x1C\x92\x80\x02a\x18\xA7V[\x93P\x93\x91PPV[_\x82a\x18\xF4WP`\x01a\x18~V[\x81a\x19\0WP_a\x18~V[\x81`\x01\x81\x14a\x19\x16W`\x02\x81\x14a\x19 Wa\x19<V[`\x01\x91PPa\x18~V[`\xFF\x84\x11\x15a\x191Wa\x191a\x18WV[PP`\x01\x82\x1Ba\x18~V[P` \x83\x10a\x013\x83\x10\x16`N\x84\x10`\x0B\x84\x10\x16\x17\x15a\x19_WP\x81\x81\na\x18~V[a\x19k_\x19\x84\x84a\x18\xA3V[\x80_\x19\x04\x82\x11\x15a\x19~Wa\x19~a\x18WV[\x02\x93\x92PPPV[_a\x16!`\xFF\x84\x16\x83a\x18\xE6V[\x80\x82\x02\x81\x15\x82\x82\x04\x84\x14\x17a\x18~Wa\x18~a\x18WV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[_` \x82\x84\x03\x12\x15a\x19\xCFW__\xFD[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x19\xE5W__\xFD[\x82\x01`\x1F\x81\x01\x84\x13a\x19\xF5W__\xFD[\x80Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1A\x0FWa\x1A\x0Fa\x19\xABV[\x80`\x05\x1B`@Q`\x1F\x19`?\x83\x01\x16\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\x1A<Wa\x1A<a\x19\xABV[`@R\x91\x82R` \x81\x84\x01\x81\x01\x92\x90\x81\x01\x87\x84\x11\x15a\x1AYW__\xFD[` \x85\x01\x94P[\x83\x85\x10\x15a\x1A|W\x84Q\x80\x82R` \x95\x86\x01\x95\x90\x93P\x01a\x1A`V[P\x96\x95PPPPPPV[_` \x82\x84\x03\x12\x15a\x1A\x97W__\xFD[PQ\x91\x90PV[\x81\x81\x03\x81\x81\x11\x15a\x18~Wa\x18~a\x18WV[\x80\x15\x15\x81\x14a\x0C\xCAW__\xFD[_` \x82\x84\x03\x12\x15a\x1A\xCEW__\xFD[\x81Qa\x16!\x81a\x1A\xB1V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_` \x82\x84\x03\x12\x15a\x1A\xFDW__\xFD[\x815a\x16!\x81a\x1A\xB1V[__\x835\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE1\x846\x03\x01\x81\x12a\x1B;W__\xFD[\x83\x01\x805\x91Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x1BUW__\xFD[` \x01\x91P6\x81\x90\x03\x82\x13\x15a\x14\xE7W__\xFD\xFE\xA2dipfsX\"\x12 \x1E\x1A(\xEE\xD3L\xE2y\xE2.\x82\x08\xC7\x98\xBAc\xC5\x1B\x1E\x13\xCE1H5\x14H\x13\x9EBF\xF0AdsolcC\0\x08\x1C\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x6080604052600436106100dc575f3560e01c80638da5cb5b1161007c578063a158657c11610057578063a158657c14610237578063c179f1d914610256578063ce1d571f14610269578063f2fde38b1461027c575f5ffd5b80638da5cb5b146101c35780639ac2a011146101ea5780639be7bbd214610218575f5ffd5b80633a7c721a116100b75780633a7c721a1461015e578063715018a61461017d57806372f458661461019157806377a24f36146101a4575f5ffd5b8063097da1f8146100e75780630a2435f8146100fc578063193c8edd1461011b575f5ffd5b366100e357005b5f5ffd5b6100fa6100f53660046114ee565b61029b565b005b348015610107575f5ffd5b506100fa61011636600461159a565b610645565b348015610126575f5ffd5b50610149610135366004611606565b60666020525f908152604090205460ff1681565b60405190151581526020015b60405180910390f35b348015610169575f5ffd5b506100fa61017836600461159a565b6107c5565b348015610188575f5ffd5b506100fa61090c565b6100fa61019f366004611628565b61091f565b3480156101af575f5ffd5b506100fa6101be3660046116c7565b610936565b3480156101ce575f5ffd5b506033546040516001600160a01b039091168152602001610155565b3480156101f5575f5ffd5b50610149610204366004611606565b60656020525f908152604090205460ff1681565b348015610223575f5ffd5b506100fa610232366004611606565b610c43565b348015610242575f5ffd5b506100fa610251366004611710565b610ccd565b6100fa61026436600461173e565b610d6e565b6100fa6102773660046117ef565b61121a565b348015610287575f5ffd5b506100fa610296366004611606565b61122d565b335f9081526065602052604090205460ff161580156102c557506033546001600160a01b03163314155b1561030f57335b6040517ff26aea8b0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911660048201526024015b60405180910390fd5b845f5f5a90508515610372576001600160a01b0385163b6103725760405162461bcd60e51b815260206004820152600f60248201527f4e4f5f434f44455f41545f4144445200000000000000000000000000000000006044820152606401610306565b61037b85610c43565b5f856001600160a01b0316858989604051610397929190611848565b5f6040518083038185875af1925050503d805f81146103d1576040519150601f19603f3d011682016040523d82523d5f602084013e6103d6565b606091505b50509050806103eb576040513d805f833e8082fd5b506001600160a01b0383161561063b57365f602061040a83601f61186b565b6104149190611884565b9050610200610424600283611986565b61042e9190611884565b610439826006611994565b610443919061186b565b61044d908461186b565b92506104576112ba565b610463575f9150610591565b6001600160a01b0384161561059157836001600160a01b031663e83a2d826040518163ffffffff1660e01b81526004015f60405180830381865afa9250505080156104cf57506040513d5f823e601f3d908101601f191682016040526104cc91908101906119bf565b60015b156105915780511561058f575f856001600160a01b0316631f6d6ef76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610518573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061053c9190611a87565b905048817f0000000000000000000000000000000000000000000000000000000000000000845161056d9190611994565b6105779190611994565b6105819190611884565b61058b908661186b565b9450505b505b846001600160a01b031663e3db8a49335a6105ac9087611a9e565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b0390921660048301526024820152604481018590526064016020604051808303815f875af1158015610613573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106379190611abe565b5050505b5050505050505050565b61064d6112ce565b8281146106775760405163088253c360e11b81526004810184905260248101829052604401610306565b5f5b67ffffffffffffffff81168411156107be5782828267ffffffffffffffff168181106106a7576106a7611ad9565b90506020020160208101906106bc9190611aed565b60655f87878567ffffffffffffffff168181106106db576106db611ad9565b90506020020160208101906106f09190611606565b6001600160a01b0316815260208101919091526040015f20805460ff1916911515919091179055848467ffffffffffffffff831681811061073357610733611ad9565b90506020020160208101906107489190611606565b6001600160a01b03167f9fdbc2d48b8a0db2f62663bf9312ad02f5b1f6414ad600b55a247d09aeec3ea284848467ffffffffffffffff1681811061078e5761078e611ad9565b90506020020160208101906107a39190611aed565b604051901515815260200160405180910390a2600101610679565b5050505050565b6107cd6112ce565b8281146107f75760405163088253c360e11b81526004810184905260248101829052604401610306565b5f5b838110156107be5782828281811061081357610813611ad9565b90506020020160208101906108289190611aed565b60665f87878581811061083d5761083d611ad9565b90506020020160208101906108529190611606565b6001600160a01b0316815260208101919091526040015f20805460ff191691151591909117905584848281811061088b5761088b611ad9565b90506020020160208101906108a09190611606565b6001600160a01b03167fab063fe575c4df359aaf3733bcf10706bacfdd24557e670a2c1cba126ae4d8a48484848181106108dc576108dc611ad9565b90506020020160208101906108f19190611aed565b604051901515815260200160405180910390a26001016107f9565b6109146112ce565b61091d5f611328565b565b61092e5f878787878787610d6e565b505050505050565b5f54610100900460ff161580801561095457505f54600160ff909116105b8061096d5750303b15801561096d57505f5460ff166001145b6109df5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610306565b5f805460ff191660011790558015610a00575f805461ff0019166101001790555b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610a9e5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610306565b610aa6611391565b610aaf8461122d565b6001600160a01b0385165f81815260656020908152604091829020805460ff1916600190811790915591519182527f9fdbc2d48b8a0db2f62663bf9312ad02f5b1f6414ad600b55a247d09aeec3ea2910160405180910390a25f5b67ffffffffffffffff8116831115610bf757600160665f86868567ffffffffffffffff16818110610b3d57610b3d611ad9565b9050602002016020810190610b529190611606565b6001600160a01b0316815260208101919091526040015f20805460ff1916911515919091179055838367ffffffffffffffff8316818110610b9557610b95611ad9565b9050602002016020810190610baa9190611606565b6001600160a01b03167fab063fe575c4df359aaf3733bcf10706bacfdd24557e670a2c1cba126ae4d8a46001604051610be7911515815260200190565b60405180910390a2600101610b0a565b5080156107be575f805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050505050565b6001600160a01b0381165f9081526066602052604090205460ff16158015610c7657506033546001600160a01b03163314155b15610cca576033546040517f41fc6f8a0000000000000000000000000000000000000000000000000000000081526001600160a01b0391821660048201523360248201529082166044820152606401610306565b50565b610cd56112ce565b5f816001600160a01b0316836040515f6040518083038185875af1925050503d805f8114610d1e576040519150601f19603f3d011682016040523d82523d5f602084013e610d23565b606091505b5050905080610d69576040517f7edbb4980000000000000000000000000000000000000000000000000000000081526001600160a01b0383166004820152602401610306565b505050565b335f9081526065602052604090205460ff16158015610d9857506033546001600160a01b03163314155b15610da357336102cc565b865f5f5a905087868114610dd45760405163088253c360e11b81526004810182905260248101889052604401610306565b808514610dfe5760405163088253c360e11b81526004810182905260248101869052604401610306565b5f5b81811015610fbd575f8b8b83818110610e1b57610e1b611ad9565b9050602002810190610e2d9190611b08565b90501115610eba57610e6e898983818110610e4a57610e4a611ad9565b9050602002016020810190610e5f9190611606565b6001600160a01b03163b151590565b610eba5760405162461bcd60e51b815260206004820152600f60248201527f4e4f5f434f44455f41545f4144445200000000000000000000000000000000006044820152606401610306565b610ee4898983818110610ecf57610ecf611ad9565b90506020020160208101906102329190611606565b5f898983818110610ef757610ef7611ad9565b9050602002016020810190610f0c9190611606565b6001600160a01b0316888884818110610f2757610f27611ad9565b905060200201358d8d85818110610f4057610f40611ad9565b9050602002810190610f529190611b08565b604051610f60929190611848565b5f6040518083038185875af1925050503d805f8114610f9a576040519150601f19603f3d011682016040523d82523d5f602084013e610f9f565b606091505b5050905080610fb4576040513d805f833e8082fd5b50600101610e00565b50506001600160a01b0383161561120e57365f6020610fdd83601f61186b565b610fe79190611884565b9050610200610ff7600283611986565b6110019190611884565b61100c826006611994565b611016919061186b565b611020908461186b565b925061102a6112ba565b611036575f9150611164565b6001600160a01b0384161561116457836001600160a01b031663e83a2d826040518163ffffffff1660e01b81526004015f60405180830381865afa9250505080156110a257506040513d5f823e601f3d908101601f1916820160405261109f91908101906119bf565b60015b1561116457805115611162575f856001600160a01b0316631f6d6ef76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110eb573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061110f9190611a87565b905048817f000000000000000000000000000000000000000000000000000000000000000084516111409190611994565b61114a9190611994565b6111549190611884565b61115e908661186b565b9450505b505b846001600160a01b031663e3db8a49335a61117f9087611a9e565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b0390921660048301526024820152604481018590526064016020604051808303815f875af11580156111e6573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061120a9190611abe565b5050505b50505050505050505050565b6112275f8585858561029b565b50505050565b6112356112ce565b6001600160a01b0381166112b15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610306565b610cca81611328565b5f33321480156112c95750333b155b905090565b6033546001600160a01b0316331461091d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610306565b603380546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b5f54610100900460ff1661140d5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610306565b61091d5f54610100900460ff1661148c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610306565b61091d33611328565b6001600160a01b0381168114610cca575f5ffd5b5f5f83601f8401126114b9575f5ffd5b50813567ffffffffffffffff8111156114d0575f5ffd5b6020830191508360208285010111156114e7575f5ffd5b9250929050565b5f5f5f5f5f60808688031215611502575f5ffd5b853561150d81611495565b9450602086013567ffffffffffffffff811115611528575f5ffd5b611534888289016114a9565b909550935050604086013561154881611495565b949793965091946060013592915050565b5f5f83601f840112611569575f5ffd5b50813567ffffffffffffffff811115611580575f5ffd5b6020830191508360208260051b85010111156114e7575f5ffd5b5f5f5f5f604085870312156115ad575f5ffd5b843567ffffffffffffffff8111156115c3575f5ffd5b6115cf87828801611559565b909550935050602085013567ffffffffffffffff8111156115ee575f5ffd5b6115fa87828801611559565b95989497509550505050565b5f60208284031215611616575f5ffd5b813561162181611495565b9392505050565b5f5f5f5f5f5f6060878903121561163d575f5ffd5b863567ffffffffffffffff811115611653575f5ffd5b61165f89828a01611559565b909750955050602087013567ffffffffffffffff81111561167e575f5ffd5b61168a89828a01611559565b909550935050604087013567ffffffffffffffff8111156116a9575f5ffd5b6116b589828a01611559565b979a9699509497509295939492505050565b5f5f5f5f606085870312156116da575f5ffd5b84356116e581611495565b935060208501356116f581611495565b9250604085013567ffffffffffffffff8111156115ee575f5ffd5b5f5f60408385031215611721575f5ffd5b82359150602083013561173381611495565b809150509250929050565b5f5f5f5f5f5f5f6080888a031215611754575f5ffd5b873561175f81611495565b9650602088013567ffffffffffffffff81111561177a575f5ffd5b6117868a828b01611559565b909750955050604088013567ffffffffffffffff8111156117a5575f5ffd5b6117b18a828b01611559565b909550935050606088013567ffffffffffffffff8111156117d0575f5ffd5b6117dc8a828b01611559565b989b979a50959850939692959293505050565b5f5f5f5f60608587031215611802575f5ffd5b843567ffffffffffffffff811115611818575f5ffd5b611824878288016114a9565b909550935050602085013561183881611495565b9396929550929360400135925050565b818382375f9101908152919050565b634e487b7160e01b5f52601160045260245ffd5b8082018082111561187e5761187e611857565b92915050565b5f8261189e57634e487b7160e01b5f52601260045260245ffd5b500490565b6001815b60018411156118de578085048111156118c2576118c2611857565b60018416156118d057908102905b60019390931c9280026118a7565b935093915050565b5f826118f45750600161187e565b8161190057505f61187e565b816001811461191657600281146119205761193c565b600191505061187e565b60ff84111561193157611931611857565b50506001821b61187e565b5060208310610133831016604e8410600b841016171561195f575081810a61187e565b61196b5f1984846118a3565b805f190482111561197e5761197e611857565b029392505050565b5f61162160ff8416836118e6565b808202811582820484141761187e5761187e611857565b634e487b7160e01b5f52604160045260245ffd5b5f602082840312156119cf575f5ffd5b815167ffffffffffffffff8111156119e5575f5ffd5b8201601f810184136119f5575f5ffd5b805167ffffffffffffffff811115611a0f57611a0f6119ab565b8060051b604051601f19603f830116810181811067ffffffffffffffff82111715611a3c57611a3c6119ab565b604052918252602081840181019290810187841115611a59575f5ffd5b6020850194505b83851015611a7c57845180825260209586019590935001611a60565b509695505050505050565b5f60208284031215611a97575f5ffd5b5051919050565b8181038181111561187e5761187e611857565b8015158114610cca575f5ffd5b5f60208284031215611ace575f5ffd5b815161162181611ab1565b634e487b7160e01b5f52603260045260245ffd5b5f60208284031215611afd575f5ffd5b813561162181611ab1565b5f5f83357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112611b3b575f5ffd5b83018035915067ffffffffffffffff821115611b55575f5ffd5b6020019150368190038213156114e7575f5ffdfea26469706673582212201e1a28eed34ce279e22e8208c798ba63c51b1e13ce3148351448139e4246f04164736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10a\0\xDCW_5`\xE0\x1C\x80c\x8D\xA5\xCB[\x11a\0|W\x80c\xA1Xe|\x11a\0WW\x80c\xA1Xe|\x14a\x027W\x80c\xC1y\xF1\xD9\x14a\x02VW\x80c\xCE\x1DW\x1F\x14a\x02iW\x80c\xF2\xFD\xE3\x8B\x14a\x02|W__\xFD[\x80c\x8D\xA5\xCB[\x14a\x01\xC3W\x80c\x9A\xC2\xA0\x11\x14a\x01\xEAW\x80c\x9B\xE7\xBB\xD2\x14a\x02\x18W__\xFD[\x80c:|r\x1A\x11a\0\xB7W\x80c:|r\x1A\x14a\x01^W\x80cqP\x18\xA6\x14a\x01}W\x80cr\xF4Xf\x14a\x01\x91W\x80cw\xA2O6\x14a\x01\xA4W__\xFD[\x80c\t}\xA1\xF8\x14a\0\xE7W\x80c\n$5\xF8\x14a\0\xFCW\x80c\x19<\x8E\xDD\x14a\x01\x1BW__\xFD[6a\0\xE3W\0[__\xFD[a\0\xFAa\0\xF56`\x04a\x14\xEEV[a\x02\x9BV[\0[4\x80\x15a\x01\x07W__\xFD[Pa\0\xFAa\x01\x166`\x04a\x15\x9AV[a\x06EV[4\x80\x15a\x01&W__\xFD[Pa\x01Ia\x0156`\x04a\x16\x06V[`f` R_\x90\x81R`@\x90 T`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01iW__\xFD[Pa\0\xFAa\x01x6`\x04a\x15\x9AV[a\x07\xC5V[4\x80\x15a\x01\x88W__\xFD[Pa\0\xFAa\t\x0CV[a\0\xFAa\x01\x9F6`\x04a\x16(V[a\t\x1FV[4\x80\x15a\x01\xAFW__\xFD[Pa\0\xFAa\x01\xBE6`\x04a\x16\xC7V[a\t6V[4\x80\x15a\x01\xCEW__\xFD[P`3T`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01a\x01UV[4\x80\x15a\x01\xF5W__\xFD[Pa\x01Ia\x02\x046`\x04a\x16\x06V[`e` R_\x90\x81R`@\x90 T`\xFF\x16\x81V[4\x80\x15a\x02#W__\xFD[Pa\0\xFAa\x0226`\x04a\x16\x06V[a\x0CCV[4\x80\x15a\x02BW__\xFD[Pa\0\xFAa\x02Q6`\x04a\x17\x10V[a\x0C\xCDV[a\0\xFAa\x02d6`\x04a\x17>V[a\rnV[a\0\xFAa\x02w6`\x04a\x17\xEFV[a\x12\x1AV[4\x80\x15a\x02\x87W__\xFD[Pa\0\xFAa\x02\x966`\x04a\x16\x06V[a\x12-V[3_\x90\x81R`e` R`@\x90 T`\xFF\x16\x15\x80\x15a\x02\xC5WP`3T`\x01`\x01`\xA0\x1B\x03\x163\x14\x15[\x15a\x03\x0FW3[`@Q\x7F\xF2j\xEA\x8B\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16`\x04\x82\x01R`$\x01[`@Q\x80\x91\x03\x90\xFD[\x84__Z\x90P\x85\x15a\x03rW`\x01`\x01`\xA0\x1B\x03\x85\x16;a\x03rW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0F`$\x82\x01R\x7FNO_CODE_AT_ADDR\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x03\x06V[a\x03{\x85a\x0CCV[_\x85`\x01`\x01`\xA0\x1B\x03\x16\x85\x89\x89`@Qa\x03\x97\x92\x91\x90a\x18HV[_`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80_\x81\x14a\x03\xD1W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x03\xD6V[``\x91P[PP\x90P\x80a\x03\xEBW`@Q=\x80_\x83>\x80\x82\xFD[P`\x01`\x01`\xA0\x1B\x03\x83\x16\x15a\x06;W6_` a\x04\n\x83`\x1Fa\x18kV[a\x04\x14\x91\x90a\x18\x84V[\x90Pa\x02\0a\x04$`\x02\x83a\x19\x86V[a\x04.\x91\x90a\x18\x84V[a\x049\x82`\x06a\x19\x94V[a\x04C\x91\x90a\x18kV[a\x04M\x90\x84a\x18kV[\x92Pa\x04Wa\x12\xBAV[a\x04cW_\x91Pa\x05\x91V[`\x01`\x01`\xA0\x1B\x03\x84\x16\x15a\x05\x91W\x83`\x01`\x01`\xA0\x1B\x03\x16c\xE8:-\x82`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81\x86Z\xFA\x92PPP\x80\x15a\x04\xCFWP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x04\xCC\x91\x90\x81\x01\x90a\x19\xBFV[`\x01[\x15a\x05\x91W\x80Q\x15a\x05\x8FW_\x85`\x01`\x01`\xA0\x1B\x03\x16c\x1Fmn\xF7`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x05\x18W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x05<\x91\x90a\x1A\x87V[\x90PH\x81\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x84Qa\x05m\x91\x90a\x19\x94V[a\x05w\x91\x90a\x19\x94V[a\x05\x81\x91\x90a\x18\x84V[a\x05\x8B\x90\x86a\x18kV[\x94PP[P[\x84`\x01`\x01`\xA0\x1B\x03\x16c\xE3\xDB\x8AI3Za\x05\xAC\x90\x87a\x1A\x9EV[`@Q\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xE0\x85\x90\x1B\x16\x81R`\x01`\x01`\xA0\x1B\x03\x90\x92\x16`\x04\x83\x01R`$\x82\x01R`D\x81\x01\x85\x90R`d\x01` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x06\x13W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x067\x91\x90a\x1A\xBEV[PPP[PPPPPPPPV[a\x06Ma\x12\xCEV[\x82\x81\x14a\x06wW`@Qc\x08\x82S\xC3`\xE1\x1B\x81R`\x04\x81\x01\x84\x90R`$\x81\x01\x82\x90R`D\x01a\x03\x06V[_[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x84\x11\x15a\x07\xBEW\x82\x82\x82g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81\x81\x10a\x06\xA7Wa\x06\xA7a\x1A\xD9V[\x90P` \x02\x01` \x81\x01\x90a\x06\xBC\x91\x90a\x1A\xEDV[`e_\x87\x87\x85g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81\x81\x10a\x06\xDBWa\x06\xDBa\x1A\xD9V[\x90P` \x02\x01` \x81\x01\x90a\x06\xF0\x91\x90a\x16\x06V[`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x81\x01\x91\x90\x91R`@\x01_ \x80T`\xFF\x19\x16\x91\x15\x15\x91\x90\x91\x17\x90U\x84\x84g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16\x81\x81\x10a\x073Wa\x073a\x1A\xD9V[\x90P` \x02\x01` \x81\x01\x90a\x07H\x91\x90a\x16\x06V[`\x01`\x01`\xA0\x1B\x03\x16\x7F\x9F\xDB\xC2\xD4\x8B\x8A\r\xB2\xF6&c\xBF\x93\x12\xAD\x02\xF5\xB1\xF6AJ\xD6\0\xB5Z$}\t\xAE\xEC>\xA2\x84\x84\x84g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81\x81\x10a\x07\x8EWa\x07\x8Ea\x1A\xD9V[\x90P` \x02\x01` \x81\x01\x90a\x07\xA3\x91\x90a\x1A\xEDV[`@Q\x90\x15\x15\x81R` \x01`@Q\x80\x91\x03\x90\xA2`\x01\x01a\x06yV[PPPPPV[a\x07\xCDa\x12\xCEV[\x82\x81\x14a\x07\xF7W`@Qc\x08\x82S\xC3`\xE1\x1B\x81R`\x04\x81\x01\x84\x90R`$\x81\x01\x82\x90R`D\x01a\x03\x06V[_[\x83\x81\x10\x15a\x07\xBEW\x82\x82\x82\x81\x81\x10a\x08\x13Wa\x08\x13a\x1A\xD9V[\x90P` \x02\x01` \x81\x01\x90a\x08(\x91\x90a\x1A\xEDV[`f_\x87\x87\x85\x81\x81\x10a\x08=Wa\x08=a\x1A\xD9V[\x90P` \x02\x01` \x81\x01\x90a\x08R\x91\x90a\x16\x06V[`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x81\x01\x91\x90\x91R`@\x01_ \x80T`\xFF\x19\x16\x91\x15\x15\x91\x90\x91\x17\x90U\x84\x84\x82\x81\x81\x10a\x08\x8BWa\x08\x8Ba\x1A\xD9V[\x90P` \x02\x01` \x81\x01\x90a\x08\xA0\x91\x90a\x16\x06V[`\x01`\x01`\xA0\x1B\x03\x16\x7F\xAB\x06?\xE5u\xC4\xDF5\x9A\xAF73\xBC\xF1\x07\x06\xBA\xCF\xDD$U~g\n,\x1C\xBA\x12j\xE4\xD8\xA4\x84\x84\x84\x81\x81\x10a\x08\xDCWa\x08\xDCa\x1A\xD9V[\x90P` \x02\x01` \x81\x01\x90a\x08\xF1\x91\x90a\x1A\xEDV[`@Q\x90\x15\x15\x81R` \x01`@Q\x80\x91\x03\x90\xA2`\x01\x01a\x07\xF9V[a\t\x14a\x12\xCEV[a\t\x1D_a\x13(V[V[a\t._\x87\x87\x87\x87\x87\x87a\rnV[PPPPPPV[_Ta\x01\0\x90\x04`\xFF\x16\x15\x80\x80\x15a\tTWP_T`\x01`\xFF\x90\x91\x16\x10[\x80a\tmWP0;\x15\x80\x15a\tmWP_T`\xFF\x16`\x01\x14[a\t\xDFW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`.`$\x82\x01R\x7FInitializable: contract is alrea`D\x82\x01R\x7Fdy initialized\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x03\x06V[_\x80T`\xFF\x19\x16`\x01\x17\x90U\x80\x15a\n\0W_\x80Ta\xFF\0\x19\x16a\x01\0\x17\x90U[`\x01`\x01`\xA0\x1B\x03\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x160\x03a\n\x9EW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`,`$\x82\x01R\x7FFunction must be called through `D\x82\x01R\x7Fdelegatecall\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x03\x06V[a\n\xA6a\x13\x91V[a\n\xAF\x84a\x12-V[`\x01`\x01`\xA0\x1B\x03\x85\x16_\x81\x81R`e` \x90\x81R`@\x91\x82\x90 \x80T`\xFF\x19\x16`\x01\x90\x81\x17\x90\x91U\x91Q\x91\x82R\x7F\x9F\xDB\xC2\xD4\x8B\x8A\r\xB2\xF6&c\xBF\x93\x12\xAD\x02\xF5\xB1\xF6AJ\xD6\0\xB5Z$}\t\xAE\xEC>\xA2\x91\x01`@Q\x80\x91\x03\x90\xA2_[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x83\x11\x15a\x0B\xF7W`\x01`f_\x86\x86\x85g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81\x81\x10a\x0B=Wa\x0B=a\x1A\xD9V[\x90P` \x02\x01` \x81\x01\x90a\x0BR\x91\x90a\x16\x06V[`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x81\x01\x91\x90\x91R`@\x01_ \x80T`\xFF\x19\x16\x91\x15\x15\x91\x90\x91\x17\x90U\x83\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16\x81\x81\x10a\x0B\x95Wa\x0B\x95a\x1A\xD9V[\x90P` \x02\x01` \x81\x01\x90a\x0B\xAA\x91\x90a\x16\x06V[`\x01`\x01`\xA0\x1B\x03\x16\x7F\xAB\x06?\xE5u\xC4\xDF5\x9A\xAF73\xBC\xF1\x07\x06\xBA\xCF\xDD$U~g\n,\x1C\xBA\x12j\xE4\xD8\xA4`\x01`@Qa\x0B\xE7\x91\x15\x15\x81R` \x01\x90V[`@Q\x80\x91\x03\x90\xA2`\x01\x01a\x0B\nV[P\x80\x15a\x07\xBEW_\x80Ta\xFF\0\x19\x16\x90U`@Q`\x01\x81R\x7F\x7F&\xB8?\xF9n\x1F+jh/\x138R\xF6y\x8A\t\xC4e\xDA\x95\x92\x14`\xCE\xFB8G@$\x98\x90` \x01`@Q\x80\x91\x03\x90\xA1PPPPPV[`\x01`\x01`\xA0\x1B\x03\x81\x16_\x90\x81R`f` R`@\x90 T`\xFF\x16\x15\x80\x15a\x0CvWP`3T`\x01`\x01`\xA0\x1B\x03\x163\x14\x15[\x15a\x0C\xCAW`3T`@Q\x7FA\xFCo\x8A\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01R3`$\x82\x01R\x90\x82\x16`D\x82\x01R`d\x01a\x03\x06V[PV[a\x0C\xD5a\x12\xCEV[_\x81`\x01`\x01`\xA0\x1B\x03\x16\x83`@Q_`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80_\x81\x14a\r\x1EW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\r#V[``\x91P[PP\x90P\x80a\riW`@Q\x7F~\xDB\xB4\x98\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x01`\x01`\xA0\x1B\x03\x83\x16`\x04\x82\x01R`$\x01a\x03\x06V[PPPV[3_\x90\x81R`e` R`@\x90 T`\xFF\x16\x15\x80\x15a\r\x98WP`3T`\x01`\x01`\xA0\x1B\x03\x163\x14\x15[\x15a\r\xA3W3a\x02\xCCV[\x86__Z\x90P\x87\x86\x81\x14a\r\xD4W`@Qc\x08\x82S\xC3`\xE1\x1B\x81R`\x04\x81\x01\x82\x90R`$\x81\x01\x88\x90R`D\x01a\x03\x06V[\x80\x85\x14a\r\xFEW`@Qc\x08\x82S\xC3`\xE1\x1B\x81R`\x04\x81\x01\x82\x90R`$\x81\x01\x86\x90R`D\x01a\x03\x06V[_[\x81\x81\x10\x15a\x0F\xBDW_\x8B\x8B\x83\x81\x81\x10a\x0E\x1BWa\x0E\x1Ba\x1A\xD9V[\x90P` \x02\x81\x01\x90a\x0E-\x91\x90a\x1B\x08V[\x90P\x11\x15a\x0E\xBAWa\x0En\x89\x89\x83\x81\x81\x10a\x0EJWa\x0EJa\x1A\xD9V[\x90P` \x02\x01` \x81\x01\x90a\x0E_\x91\x90a\x16\x06V[`\x01`\x01`\xA0\x1B\x03\x16;\x15\x15\x90V[a\x0E\xBAW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0F`$\x82\x01R\x7FNO_CODE_AT_ADDR\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x03\x06V[a\x0E\xE4\x89\x89\x83\x81\x81\x10a\x0E\xCFWa\x0E\xCFa\x1A\xD9V[\x90P` \x02\x01` \x81\x01\x90a\x022\x91\x90a\x16\x06V[_\x89\x89\x83\x81\x81\x10a\x0E\xF7Wa\x0E\xF7a\x1A\xD9V[\x90P` \x02\x01` \x81\x01\x90a\x0F\x0C\x91\x90a\x16\x06V[`\x01`\x01`\xA0\x1B\x03\x16\x88\x88\x84\x81\x81\x10a\x0F'Wa\x0F'a\x1A\xD9V[\x90P` \x02\x015\x8D\x8D\x85\x81\x81\x10a\x0F@Wa\x0F@a\x1A\xD9V[\x90P` \x02\x81\x01\x90a\x0FR\x91\x90a\x1B\x08V[`@Qa\x0F`\x92\x91\x90a\x18HV[_`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80_\x81\x14a\x0F\x9AW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x0F\x9FV[``\x91P[PP\x90P\x80a\x0F\xB4W`@Q=\x80_\x83>\x80\x82\xFD[P`\x01\x01a\x0E\0V[PP`\x01`\x01`\xA0\x1B\x03\x83\x16\x15a\x12\x0EW6_` a\x0F\xDD\x83`\x1Fa\x18kV[a\x0F\xE7\x91\x90a\x18\x84V[\x90Pa\x02\0a\x0F\xF7`\x02\x83a\x19\x86V[a\x10\x01\x91\x90a\x18\x84V[a\x10\x0C\x82`\x06a\x19\x94V[a\x10\x16\x91\x90a\x18kV[a\x10 \x90\x84a\x18kV[\x92Pa\x10*a\x12\xBAV[a\x106W_\x91Pa\x11dV[`\x01`\x01`\xA0\x1B\x03\x84\x16\x15a\x11dW\x83`\x01`\x01`\xA0\x1B\x03\x16c\xE8:-\x82`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81\x86Z\xFA\x92PPP\x80\x15a\x10\xA2WP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x10\x9F\x91\x90\x81\x01\x90a\x19\xBFV[`\x01[\x15a\x11dW\x80Q\x15a\x11bW_\x85`\x01`\x01`\xA0\x1B\x03\x16c\x1Fmn\xF7`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x10\xEBW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x11\x0F\x91\x90a\x1A\x87V[\x90PH\x81\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x84Qa\x11@\x91\x90a\x19\x94V[a\x11J\x91\x90a\x19\x94V[a\x11T\x91\x90a\x18\x84V[a\x11^\x90\x86a\x18kV[\x94PP[P[\x84`\x01`\x01`\xA0\x1B\x03\x16c\xE3\xDB\x8AI3Za\x11\x7F\x90\x87a\x1A\x9EV[`@Q\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xE0\x85\x90\x1B\x16\x81R`\x01`\x01`\xA0\x1B\x03\x90\x92\x16`\x04\x83\x01R`$\x82\x01R`D\x81\x01\x85\x90R`d\x01` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x11\xE6W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x12\n\x91\x90a\x1A\xBEV[PPP[PPPPPPPPPPV[a\x12'_\x85\x85\x85\x85a\x02\x9BV[PPPPV[a\x125a\x12\xCEV[`\x01`\x01`\xA0\x1B\x03\x81\x16a\x12\xB1W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FOwnable: new owner is the zero a`D\x82\x01R\x7Fddress\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x03\x06V[a\x0C\xCA\x81a\x13(V[_32\x14\x80\x15a\x12\xC9WP3;\x15[\x90P\x90V[`3T`\x01`\x01`\xA0\x1B\x03\x163\x14a\t\x1DW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01\x81\x90R`$\x82\x01R\x7FOwnable: caller is not the owner`D\x82\x01R`d\x01a\x03\x06V[`3\x80T`\x01`\x01`\xA0\x1B\x03\x83\x81\x16\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83\x16\x81\x17\x90\x93U`@Q\x91\x16\x91\x90\x82\x90\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x90_\x90\xA3PPV[_Ta\x01\0\x90\x04`\xFF\x16a\x14\rW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`+`$\x82\x01R\x7FInitializable: contract is not i`D\x82\x01R\x7Fnitializing\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x03\x06V[a\t\x1D_Ta\x01\0\x90\x04`\xFF\x16a\x14\x8CW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`+`$\x82\x01R\x7FInitializable: contract is not i`D\x82\x01R\x7Fnitializing\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x03\x06V[a\t\x1D3a\x13(V[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x0C\xCAW__\xFD[__\x83`\x1F\x84\x01\x12a\x14\xB9W__\xFD[P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x14\xD0W__\xFD[` \x83\x01\x91P\x83` \x82\x85\x01\x01\x11\x15a\x14\xE7W__\xFD[\x92P\x92\x90PV[_____`\x80\x86\x88\x03\x12\x15a\x15\x02W__\xFD[\x855a\x15\r\x81a\x14\x95V[\x94P` \x86\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x15(W__\xFD[a\x154\x88\x82\x89\x01a\x14\xA9V[\x90\x95P\x93PP`@\x86\x015a\x15H\x81a\x14\x95V[\x94\x97\x93\x96P\x91\x94``\x015\x92\x91PPV[__\x83`\x1F\x84\x01\x12a\x15iW__\xFD[P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x15\x80W__\xFD[` \x83\x01\x91P\x83` \x82`\x05\x1B\x85\x01\x01\x11\x15a\x14\xE7W__\xFD[____`@\x85\x87\x03\x12\x15a\x15\xADW__\xFD[\x845g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x15\xC3W__\xFD[a\x15\xCF\x87\x82\x88\x01a\x15YV[\x90\x95P\x93PP` \x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x15\xEEW__\xFD[a\x15\xFA\x87\x82\x88\x01a\x15YV[\x95\x98\x94\x97P\x95PPPPV[_` \x82\x84\x03\x12\x15a\x16\x16W__\xFD[\x815a\x16!\x81a\x14\x95V[\x93\x92PPPV[______``\x87\x89\x03\x12\x15a\x16=W__\xFD[\x865g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x16SW__\xFD[a\x16_\x89\x82\x8A\x01a\x15YV[\x90\x97P\x95PP` \x87\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x16~W__\xFD[a\x16\x8A\x89\x82\x8A\x01a\x15YV[\x90\x95P\x93PP`@\x87\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x16\xA9W__\xFD[a\x16\xB5\x89\x82\x8A\x01a\x15YV[\x97\x9A\x96\x99P\x94\x97P\x92\x95\x93\x94\x92PPPV[____``\x85\x87\x03\x12\x15a\x16\xDAW__\xFD[\x845a\x16\xE5\x81a\x14\x95V[\x93P` \x85\x015a\x16\xF5\x81a\x14\x95V[\x92P`@\x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x15\xEEW__\xFD[__`@\x83\x85\x03\x12\x15a\x17!W__\xFD[\x825\x91P` \x83\x015a\x173\x81a\x14\x95V[\x80\x91PP\x92P\x92\x90PV[_______`\x80\x88\x8A\x03\x12\x15a\x17TW__\xFD[\x875a\x17_\x81a\x14\x95V[\x96P` \x88\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x17zW__\xFD[a\x17\x86\x8A\x82\x8B\x01a\x15YV[\x90\x97P\x95PP`@\x88\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x17\xA5W__\xFD[a\x17\xB1\x8A\x82\x8B\x01a\x15YV[\x90\x95P\x93PP``\x88\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x17\xD0W__\xFD[a\x17\xDC\x8A\x82\x8B\x01a\x15YV[\x98\x9B\x97\x9AP\x95\x98P\x93\x96\x92\x95\x92\x93PPPV[____``\x85\x87\x03\x12\x15a\x18\x02W__\xFD[\x845g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x18\x18W__\xFD[a\x18$\x87\x82\x88\x01a\x14\xA9V[\x90\x95P\x93PP` \x85\x015a\x188\x81a\x14\x95V[\x93\x96\x92\x95P\x92\x93`@\x015\x92PPV[\x81\x83\x827_\x91\x01\x90\x81R\x91\x90PV[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[\x80\x82\x01\x80\x82\x11\x15a\x18~Wa\x18~a\x18WV[\x92\x91PPV[_\x82a\x18\x9EWcNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[P\x04\x90V[`\x01\x81[`\x01\x84\x11\x15a\x18\xDEW\x80\x85\x04\x81\x11\x15a\x18\xC2Wa\x18\xC2a\x18WV[`\x01\x84\x16\x15a\x18\xD0W\x90\x81\x02\x90[`\x01\x93\x90\x93\x1C\x92\x80\x02a\x18\xA7V[\x93P\x93\x91PPV[_\x82a\x18\xF4WP`\x01a\x18~V[\x81a\x19\0WP_a\x18~V[\x81`\x01\x81\x14a\x19\x16W`\x02\x81\x14a\x19 Wa\x19<V[`\x01\x91PPa\x18~V[`\xFF\x84\x11\x15a\x191Wa\x191a\x18WV[PP`\x01\x82\x1Ba\x18~V[P` \x83\x10a\x013\x83\x10\x16`N\x84\x10`\x0B\x84\x10\x16\x17\x15a\x19_WP\x81\x81\na\x18~V[a\x19k_\x19\x84\x84a\x18\xA3V[\x80_\x19\x04\x82\x11\x15a\x19~Wa\x19~a\x18WV[\x02\x93\x92PPPV[_a\x16!`\xFF\x84\x16\x83a\x18\xE6V[\x80\x82\x02\x81\x15\x82\x82\x04\x84\x14\x17a\x18~Wa\x18~a\x18WV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[_` \x82\x84\x03\x12\x15a\x19\xCFW__\xFD[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x19\xE5W__\xFD[\x82\x01`\x1F\x81\x01\x84\x13a\x19\xF5W__\xFD[\x80Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1A\x0FWa\x1A\x0Fa\x19\xABV[\x80`\x05\x1B`@Q`\x1F\x19`?\x83\x01\x16\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\x1A<Wa\x1A<a\x19\xABV[`@R\x91\x82R` \x81\x84\x01\x81\x01\x92\x90\x81\x01\x87\x84\x11\x15a\x1AYW__\xFD[` \x85\x01\x94P[\x83\x85\x10\x15a\x1A|W\x84Q\x80\x82R` \x95\x86\x01\x95\x90\x93P\x01a\x1A`V[P\x96\x95PPPPPPV[_` \x82\x84\x03\x12\x15a\x1A\x97W__\xFD[PQ\x91\x90PV[\x81\x81\x03\x81\x81\x11\x15a\x18~Wa\x18~a\x18WV[\x80\x15\x15\x81\x14a\x0C\xCAW__\xFD[_` \x82\x84\x03\x12\x15a\x1A\xCEW__\xFD[\x81Qa\x16!\x81a\x1A\xB1V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_` \x82\x84\x03\x12\x15a\x1A\xFDW__\xFD[\x815a\x16!\x81a\x1A\xB1V[__\x835\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE1\x846\x03\x01\x81\x12a\x1B;W__\xFD[\x83\x01\x805\x91Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x1BUW__\xFD[` \x01\x91P6\x81\x90\x03\x82\x13\x15a\x14\xE7W__\xFD\xFE\xA2dipfsX\"\x12 \x1E\x1A(\xEE\xD3L\xE2y\xE2.\x82\x08\xC7\x98\xBAc\xC5\x1B\x1E\x13\xCE1H5\x14H\x13\x9EBF\xF0AdsolcC\0\x08\x1C\x003",
    );
    /**Custom error with signature `BadArrayLength(uint256,uint256)` and selector `0x1104a786`.
```solidity
error BadArrayLength(uint256 expected, uint256 actual);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct BadArrayLength {
        #[allow(missing_docs)]
        pub expected: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub actual: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<BadArrayLength> for UnderlyingRustTuple<'_> {
            fn from(value: BadArrayLength) -> Self {
                (value.expected, value.actual)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for BadArrayLength {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    expected: tuple.0,
                    actual: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for BadArrayLength {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "BadArrayLength(uint256,uint256)";
            const SELECTOR: [u8; 4] = [17u8, 4u8, 167u8, 134u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.expected),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.actual),
                )
            }
        }
    };
    /**Custom error with signature `NotExecutorOrOwner(address)` and selector `0xf26aea8b`.
```solidity
error NotExecutorOrOwner(address actual);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotExecutorOrOwner {
        #[allow(missing_docs)]
        pub actual: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotExecutorOrOwner> for UnderlyingRustTuple<'_> {
            fn from(value: NotExecutorOrOwner) -> Self {
                (value.actual,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotExecutorOrOwner {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { actual: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotExecutorOrOwner {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotExecutorOrOwner(address)";
            const SELECTOR: [u8; 4] = [242u8, 106u8, 234u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.actual,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `OnlyOwnerDestination(address,address,address)` and selector `0x41fc6f8a`.
```solidity
error OnlyOwnerDestination(address expected, address actual, address destination);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OnlyOwnerDestination {
        #[allow(missing_docs)]
        pub expected: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub actual: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub destination: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OnlyOwnerDestination> for UnderlyingRustTuple<'_> {
            fn from(value: OnlyOwnerDestination) -> Self {
                (value.expected, value.actual, value.destination)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for OnlyOwnerDestination {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    expected: tuple.0,
                    actual: tuple.1,
                    destination: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OnlyOwnerDestination {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OnlyOwnerDestination(address,address,address)";
            const SELECTOR: [u8; 4] = [65u8, 252u8, 111u8, 138u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.expected,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.actual,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.destination,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `WithdrawEthFail(address)` and selector `0x7edbb498`.
```solidity
error WithdrawEthFail(address destination);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct WithdrawEthFail {
        #[allow(missing_docs)]
        pub destination: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<WithdrawEthFail> for UnderlyingRustTuple<'_> {
            fn from(value: WithdrawEthFail) -> Self {
                (value.destination,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for WithdrawEthFail {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { destination: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for WithdrawEthFail {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "WithdrawEthFail(address)";
            const SELECTOR: [u8; 4] = [126u8, 219u8, 180u8, 152u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.destination,
                    ),
                )
            }
        }
    };
    /**Event with signature `AllowedExecutorDestinationsUpdated(address,bool)` and selector `0xab063fe575c4df359aaf3733bcf10706bacfdd24557e670a2c1cba126ae4d8a4`.
```solidity
event AllowedExecutorDestinationsUpdated(address indexed destination, bool isSet);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct AllowedExecutorDestinationsUpdated {
        #[allow(missing_docs)]
        pub destination: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub isSet: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for AllowedExecutorDestinationsUpdated {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "AllowedExecutorDestinationsUpdated(address,bool)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                171u8,
                6u8,
                63u8,
                229u8,
                117u8,
                196u8,
                223u8,
                53u8,
                154u8,
                175u8,
                55u8,
                51u8,
                188u8,
                241u8,
                7u8,
                6u8,
                186u8,
                207u8,
                221u8,
                36u8,
                85u8,
                126u8,
                103u8,
                10u8,
                44u8,
                28u8,
                186u8,
                18u8,
                106u8,
                228u8,
                216u8,
                164u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    destination: topics.1,
                    isSet: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.isSet,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.destination.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.destination,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData
        for AllowedExecutorDestinationsUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&AllowedExecutorDestinationsUpdated>
        for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &AllowedExecutorDestinationsUpdated,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `ExecutorUpdated(address,bool)` and selector `0x9fdbc2d48b8a0db2f62663bf9312ad02f5b1f6414ad600b55a247d09aeec3ea2`.
```solidity
event ExecutorUpdated(address indexed executor, bool isExecutor);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct ExecutorUpdated {
        #[allow(missing_docs)]
        pub executor: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub isExecutor: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for ExecutorUpdated {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "ExecutorUpdated(address,bool)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                159u8,
                219u8,
                194u8,
                212u8,
                139u8,
                138u8,
                13u8,
                178u8,
                246u8,
                38u8,
                99u8,
                191u8,
                147u8,
                18u8,
                173u8,
                2u8,
                245u8,
                177u8,
                246u8,
                65u8,
                74u8,
                214u8,
                0u8,
                181u8,
                90u8,
                36u8,
                125u8,
                9u8,
                174u8,
                236u8,
                62u8,
                162u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    executor: topics.1,
                    isExecutor: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.isExecutor,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.executor.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.executor,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for ExecutorUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&ExecutorUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &ExecutorUpdated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `Initialized(uint8)` and selector `0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498`.
```solidity
event Initialized(uint8 version);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Initialized {
        #[allow(missing_docs)]
        pub version: u8,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Initialized {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<8>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "Initialized(uint8)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                127u8,
                38u8,
                184u8,
                63u8,
                249u8,
                110u8,
                31u8,
                43u8,
                106u8,
                104u8,
                47u8,
                19u8,
                56u8,
                82u8,
                246u8,
                121u8,
                138u8,
                9u8,
                196u8,
                101u8,
                218u8,
                149u8,
                146u8,
                20u8,
                96u8,
                206u8,
                251u8,
                56u8,
                71u8,
                64u8,
                36u8,
                152u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { version: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::SolType>::tokenize(&self.version),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Initialized {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Initialized> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Initialized) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `OwnershipTransferred(address,address)` and selector `0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0`.
```solidity
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct OwnershipTransferred {
        #[allow(missing_docs)]
        pub previousOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OwnershipTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OwnershipTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousOwner: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousOwner.clone(),
                    self.newOwner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousOwner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OwnershipTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OwnershipTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &OwnershipTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Function with signature `allowedExecutorDestinations(address)` and selector `0x193c8edd`.
```solidity
function allowedExecutorDestinations(address) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct allowedExecutorDestinationsCall {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`allowedExecutorDestinations(address)`](allowedExecutorDestinationsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct allowedExecutorDestinationsReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<allowedExecutorDestinationsCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: allowedExecutorDestinationsCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for allowedExecutorDestinationsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<allowedExecutorDestinationsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: allowedExecutorDestinationsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for allowedExecutorDestinationsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for allowedExecutorDestinationsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = allowedExecutorDestinationsReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "allowedExecutorDestinations(address)";
            const SELECTOR: [u8; 4] = [25u8, 60u8, 142u8, 221u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `executeTransaction(bytes,address,uint256)` and selector `0xce1d571f`.
```solidity
function executeTransaction(bytes memory data, address destination, uint256 amount) external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeTransactionCall {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub destination: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`executeTransaction(bytes,address,uint256)`](executeTransactionCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeTransactionReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeTransactionCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: executeTransactionCall) -> Self {
                    (value.data, value.destination, value.amount)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for executeTransactionCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        data: tuple.0,
                        destination: tuple.1,
                        amount: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeTransactionReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: executeTransactionReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for executeTransactionReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for executeTransactionCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = executeTransactionReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "executeTransaction(bytes,address,uint256)";
            const SELECTOR: [u8; 4] = [206u8, 29u8, 87u8, 31u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.destination,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `executeTransactionWithGasRefunder(address,bytes,address,uint256)` and selector `0x097da1f8`.
```solidity
function executeTransactionWithGasRefunder(address gasRefunder, bytes memory data, address destination, uint256 amount) external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeTransactionWithGasRefunderCall {
        #[allow(missing_docs)]
        pub gasRefunder: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub destination: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`executeTransactionWithGasRefunder(address,bytes,address,uint256)`](executeTransactionWithGasRefunderCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeTransactionWithGasRefunderReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeTransactionWithGasRefunderCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: executeTransactionWithGasRefunderCall) -> Self {
                    (value.gasRefunder, value.data, value.destination, value.amount)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for executeTransactionWithGasRefunderCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        gasRefunder: tuple.0,
                        data: tuple.1,
                        destination: tuple.2,
                        amount: tuple.3,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeTransactionWithGasRefunderReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: executeTransactionWithGasRefunderReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for executeTransactionWithGasRefunderReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for executeTransactionWithGasRefunderCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = executeTransactionWithGasRefunderReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "executeTransactionWithGasRefunder(address,bytes,address,uint256)";
            const SELECTOR: [u8; 4] = [9u8, 125u8, 161u8, 248u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.gasRefunder,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.destination,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `executeTransactions(bytes[],address[],uint256[])` and selector `0x72f45866`.
```solidity
function executeTransactions(bytes[] memory data, address[] memory destination, uint256[] memory amount) external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeTransactionsCall {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
        #[allow(missing_docs)]
        pub destination: alloy::sol_types::private::Vec<
            alloy::sol_types::private::Address,
        >,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::Vec<
            alloy::sol_types::private::primitives::aliases::U256,
        >,
    }
    ///Container type for the return parameters of the [`executeTransactions(bytes[],address[],uint256[])`](executeTransactionsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeTransactionsReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::primitives::aliases::U256,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeTransactionsCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: executeTransactionsCall) -> Self {
                    (value.data, value.destination, value.amount)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for executeTransactionsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        data: tuple.0,
                        destination: tuple.1,
                        amount: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeTransactionsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: executeTransactionsReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for executeTransactionsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for executeTransactionsCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = executeTransactionsReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "executeTransactions(bytes[],address[],uint256[])";
            const SELECTOR: [u8; 4] = [114u8, 244u8, 88u8, 102u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bytes,
                    > as alloy_sol_types::SolType>::tokenize(&self.data),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(&self.destination),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Uint<256>,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `executeTransactionsWithGasRefunder(address,bytes[],address[],uint256[])` and selector `0xc179f1d9`.
```solidity
function executeTransactionsWithGasRefunder(address gasRefunder, bytes[] memory data, address[] memory destination, uint256[] memory amount) external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeTransactionsWithGasRefunderCall {
        #[allow(missing_docs)]
        pub gasRefunder: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
        #[allow(missing_docs)]
        pub destination: alloy::sol_types::private::Vec<
            alloy::sol_types::private::Address,
        >,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::Vec<
            alloy::sol_types::private::primitives::aliases::U256,
        >,
    }
    ///Container type for the return parameters of the [`executeTransactionsWithGasRefunder(address,bytes[],address[],uint256[])`](executeTransactionsWithGasRefunderCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeTransactionsWithGasRefunderReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::primitives::aliases::U256,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeTransactionsWithGasRefunderCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: executeTransactionsWithGasRefunderCall) -> Self {
                    (value.gasRefunder, value.data, value.destination, value.amount)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for executeTransactionsWithGasRefunderCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        gasRefunder: tuple.0,
                        data: tuple.1,
                        destination: tuple.2,
                        amount: tuple.3,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeTransactionsWithGasRefunderReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: executeTransactionsWithGasRefunderReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for executeTransactionsWithGasRefunderReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for executeTransactionsWithGasRefunderCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = executeTransactionsWithGasRefunderReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "executeTransactionsWithGasRefunder(address,bytes[],address[],uint256[])";
            const SELECTOR: [u8; 4] = [193u8, 121u8, 241u8, 217u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.gasRefunder,
                    ),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bytes,
                    > as alloy_sol_types::SolType>::tokenize(&self.data),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(&self.destination),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Uint<256>,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `executors(address)` and selector `0x9ac2a011`.
```solidity
function executors(address) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executorsCall {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`executors(address)`](executorsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executorsReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executorsCall> for UnderlyingRustTuple<'_> {
                fn from(value: executorsCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for executorsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executorsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: executorsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for executorsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for executorsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = executorsReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "executors(address)";
            const SELECTOR: [u8; 4] = [154u8, 194u8, 160u8, 17u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `initialize(address,address,address[])` and selector `0x77a24f36`.
```solidity
function initialize(address _executor, address _owner, address[] memory initialExecutorAllowedDests) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeCall {
        #[allow(missing_docs)]
        pub _executor: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _owner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub initialExecutorAllowedDests: alloy::sol_types::private::Vec<
            alloy::sol_types::private::Address,
        >,
    }
    ///Container type for the return parameters of the [`initialize(address,address,address[])`](initializeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeCall> for UnderlyingRustTuple<'_> {
                fn from(value: initializeCall) -> Self {
                    (value._executor, value._owner, value.initialExecutorAllowedDests)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _executor: tuple.0,
                        _owner: tuple.1,
                        initialExecutorAllowedDests: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: initializeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for initializeCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = initializeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "initialize(address,address,address[])";
            const SELECTOR: [u8; 4] = [119u8, 162u8, 79u8, 54u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._executor,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._owner,
                    ),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(
                        &self.initialExecutorAllowedDests,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `owner()` and selector `0x8da5cb5b`.
```solidity
function owner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerCall {}
    ///Container type for the return parameters of the [`owner()`](ownerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "owner()";
            const SELECTOR: [u8; 4] = [141u8, 165u8, 203u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `renounceOwnership()` and selector `0x715018a6`.
```solidity
function renounceOwnership() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipCall {}
    ///Container type for the return parameters of the [`renounceOwnership()`](renounceOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceOwnershipCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceOwnership()";
            const SELECTOR: [u8; 4] = [113u8, 80u8, 24u8, 166u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setAllowedExecutorDestinations(address[],bool[])` and selector `0x3a7c721a`.
```solidity
function setAllowedExecutorDestinations(address[] memory destinations, bool[] memory isSet) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setAllowedExecutorDestinationsCall {
        #[allow(missing_docs)]
        pub destinations: alloy::sol_types::private::Vec<
            alloy::sol_types::private::Address,
        >,
        #[allow(missing_docs)]
        pub isSet: alloy::sol_types::private::Vec<bool>,
    }
    ///Container type for the return parameters of the [`setAllowedExecutorDestinations(address[],bool[])`](setAllowedExecutorDestinationsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setAllowedExecutorDestinationsReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bool>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
                alloy::sol_types::private::Vec<bool>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setAllowedExecutorDestinationsCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setAllowedExecutorDestinationsCall) -> Self {
                    (value.destinations, value.isSet)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setAllowedExecutorDestinationsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        destinations: tuple.0,
                        isSet: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setAllowedExecutorDestinationsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setAllowedExecutorDestinationsReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setAllowedExecutorDestinationsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setAllowedExecutorDestinationsCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bool>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setAllowedExecutorDestinationsReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setAllowedExecutorDestinations(address[],bool[])";
            const SELECTOR: [u8; 4] = [58u8, 124u8, 114u8, 26u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(&self.destinations),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bool,
                    > as alloy_sol_types::SolType>::tokenize(&self.isSet),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setExecutor(address[],bool[])` and selector `0x0a2435f8`.
```solidity
function setExecutor(address[] memory newExecutors, bool[] memory isExecutor) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setExecutorCall {
        #[allow(missing_docs)]
        pub newExecutors: alloy::sol_types::private::Vec<
            alloy::sol_types::private::Address,
        >,
        #[allow(missing_docs)]
        pub isExecutor: alloy::sol_types::private::Vec<bool>,
    }
    ///Container type for the return parameters of the [`setExecutor(address[],bool[])`](setExecutorCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setExecutorReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bool>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
                alloy::sol_types::private::Vec<bool>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setExecutorCall> for UnderlyingRustTuple<'_> {
                fn from(value: setExecutorCall) -> Self {
                    (value.newExecutors, value.isExecutor)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setExecutorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        newExecutors: tuple.0,
                        isExecutor: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setExecutorReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setExecutorReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setExecutorReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setExecutorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bool>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setExecutorReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setExecutor(address[],bool[])";
            const SELECTOR: [u8; 4] = [10u8, 36u8, 53u8, 248u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(&self.newExecutors),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bool,
                    > as alloy_sol_types::SolType>::tokenize(&self.isExecutor),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferOwnership(address)` and selector `0xf2fde38b`.
```solidity
function transferOwnership(address newOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipCall {
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferOwnership(address)`](transferOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipCall) -> Self {
                    (value.newOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferOwnershipCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferOwnership(address)";
            const SELECTOR: [u8; 4] = [242u8, 253u8, 227u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newOwner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `validateExecuteTransaction(address)` and selector `0x9be7bbd2`.
```solidity
function validateExecuteTransaction(address destination) external view;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct validateExecuteTransactionCall {
        #[allow(missing_docs)]
        pub destination: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`validateExecuteTransaction(address)`](validateExecuteTransactionCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct validateExecuteTransactionReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<validateExecuteTransactionCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: validateExecuteTransactionCall) -> Self {
                    (value.destination,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for validateExecuteTransactionCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { destination: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<validateExecuteTransactionReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: validateExecuteTransactionReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for validateExecuteTransactionReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for validateExecuteTransactionCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = validateExecuteTransactionReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "validateExecuteTransaction(address)";
            const SELECTOR: [u8; 4] = [155u8, 231u8, 187u8, 210u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.destination,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `withdrawEth(uint256,address)` and selector `0xa158657c`.
```solidity
function withdrawEth(uint256 amount, address destination) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct withdrawEthCall {
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub destination: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`withdrawEth(uint256,address)`](withdrawEthCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct withdrawEthReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<withdrawEthCall> for UnderlyingRustTuple<'_> {
                fn from(value: withdrawEthCall) -> Self {
                    (value.amount, value.destination)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for withdrawEthCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        amount: tuple.0,
                        destination: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<withdrawEthReturn> for UnderlyingRustTuple<'_> {
                fn from(value: withdrawEthReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for withdrawEthReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for withdrawEthCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = withdrawEthReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "withdrawEth(uint256,address)";
            const SELECTOR: [u8; 4] = [161u8, 88u8, 101u8, 124u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.destination,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`ValidatorWallet`](self) function calls.
    pub enum ValidatorWalletCalls {
        #[allow(missing_docs)]
        allowedExecutorDestinations(allowedExecutorDestinationsCall),
        #[allow(missing_docs)]
        executeTransaction(executeTransactionCall),
        #[allow(missing_docs)]
        executeTransactionWithGasRefunder(executeTransactionWithGasRefunderCall),
        #[allow(missing_docs)]
        executeTransactions(executeTransactionsCall),
        #[allow(missing_docs)]
        executeTransactionsWithGasRefunder(executeTransactionsWithGasRefunderCall),
        #[allow(missing_docs)]
        executors(executorsCall),
        #[allow(missing_docs)]
        initialize(initializeCall),
        #[allow(missing_docs)]
        owner(ownerCall),
        #[allow(missing_docs)]
        renounceOwnership(renounceOwnershipCall),
        #[allow(missing_docs)]
        setAllowedExecutorDestinations(setAllowedExecutorDestinationsCall),
        #[allow(missing_docs)]
        setExecutor(setExecutorCall),
        #[allow(missing_docs)]
        transferOwnership(transferOwnershipCall),
        #[allow(missing_docs)]
        validateExecuteTransaction(validateExecuteTransactionCall),
        #[allow(missing_docs)]
        withdrawEth(withdrawEthCall),
    }
    #[automatically_derived]
    impl ValidatorWalletCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [9u8, 125u8, 161u8, 248u8],
            [10u8, 36u8, 53u8, 248u8],
            [25u8, 60u8, 142u8, 221u8],
            [58u8, 124u8, 114u8, 26u8],
            [113u8, 80u8, 24u8, 166u8],
            [114u8, 244u8, 88u8, 102u8],
            [119u8, 162u8, 79u8, 54u8],
            [141u8, 165u8, 203u8, 91u8],
            [154u8, 194u8, 160u8, 17u8],
            [155u8, 231u8, 187u8, 210u8],
            [161u8, 88u8, 101u8, 124u8],
            [193u8, 121u8, 241u8, 217u8],
            [206u8, 29u8, 87u8, 31u8],
            [242u8, 253u8, 227u8, 139u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ValidatorWalletCalls {
        const NAME: &'static str = "ValidatorWalletCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 14usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::allowedExecutorDestinations(_) => {
                    <allowedExecutorDestinationsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::executeTransaction(_) => {
                    <executeTransactionCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::executeTransactionWithGasRefunder(_) => {
                    <executeTransactionWithGasRefunderCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::executeTransactions(_) => {
                    <executeTransactionsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::executeTransactionsWithGasRefunder(_) => {
                    <executeTransactionsWithGasRefunderCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::executors(_) => {
                    <executorsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::initialize(_) => {
                    <initializeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::owner(_) => <ownerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::renounceOwnership(_) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setAllowedExecutorDestinations(_) => {
                    <setAllowedExecutorDestinationsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setExecutor(_) => {
                    <setExecutorCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferOwnership(_) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::validateExecuteTransaction(_) => {
                    <validateExecuteTransactionCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::withdrawEth(_) => {
                    <withdrawEthCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<ValidatorWalletCalls>] = &[
                {
                    fn executeTransactionWithGasRefunder(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ValidatorWalletCalls> {
                        <executeTransactionWithGasRefunderCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ValidatorWalletCalls::executeTransactionWithGasRefunder)
                    }
                    executeTransactionWithGasRefunder
                },
                {
                    fn setExecutor(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ValidatorWalletCalls> {
                        <setExecutorCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ValidatorWalletCalls::setExecutor)
                    }
                    setExecutor
                },
                {
                    fn allowedExecutorDestinations(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ValidatorWalletCalls> {
                        <allowedExecutorDestinationsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ValidatorWalletCalls::allowedExecutorDestinations)
                    }
                    allowedExecutorDestinations
                },
                {
                    fn setAllowedExecutorDestinations(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ValidatorWalletCalls> {
                        <setAllowedExecutorDestinationsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ValidatorWalletCalls::setAllowedExecutorDestinations)
                    }
                    setAllowedExecutorDestinations
                },
                {
                    fn renounceOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ValidatorWalletCalls> {
                        <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ValidatorWalletCalls::renounceOwnership)
                    }
                    renounceOwnership
                },
                {
                    fn executeTransactions(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ValidatorWalletCalls> {
                        <executeTransactionsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ValidatorWalletCalls::executeTransactions)
                    }
                    executeTransactions
                },
                {
                    fn initialize(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ValidatorWalletCalls> {
                        <initializeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ValidatorWalletCalls::initialize)
                    }
                    initialize
                },
                {
                    fn owner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ValidatorWalletCalls> {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ValidatorWalletCalls::owner)
                    }
                    owner
                },
                {
                    fn executors(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ValidatorWalletCalls> {
                        <executorsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ValidatorWalletCalls::executors)
                    }
                    executors
                },
                {
                    fn validateExecuteTransaction(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ValidatorWalletCalls> {
                        <validateExecuteTransactionCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ValidatorWalletCalls::validateExecuteTransaction)
                    }
                    validateExecuteTransaction
                },
                {
                    fn withdrawEth(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ValidatorWalletCalls> {
                        <withdrawEthCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ValidatorWalletCalls::withdrawEth)
                    }
                    withdrawEth
                },
                {
                    fn executeTransactionsWithGasRefunder(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ValidatorWalletCalls> {
                        <executeTransactionsWithGasRefunderCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                ValidatorWalletCalls::executeTransactionsWithGasRefunder,
                            )
                    }
                    executeTransactionsWithGasRefunder
                },
                {
                    fn executeTransaction(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ValidatorWalletCalls> {
                        <executeTransactionCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ValidatorWalletCalls::executeTransaction)
                    }
                    executeTransaction
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ValidatorWalletCalls> {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ValidatorWalletCalls::transferOwnership)
                    }
                    transferOwnership
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::allowedExecutorDestinations(inner) => {
                    <allowedExecutorDestinationsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::executeTransaction(inner) => {
                    <executeTransactionCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::executeTransactionWithGasRefunder(inner) => {
                    <executeTransactionWithGasRefunderCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::executeTransactions(inner) => {
                    <executeTransactionsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::executeTransactionsWithGasRefunder(inner) => {
                    <executeTransactionsWithGasRefunderCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::executors(inner) => {
                    <executorsCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setAllowedExecutorDestinations(inner) => {
                    <setAllowedExecutorDestinationsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setExecutor(inner) => {
                    <setExecutorCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::validateExecuteTransaction(inner) => {
                    <validateExecuteTransactionCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::withdrawEth(inner) => {
                    <withdrawEthCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::allowedExecutorDestinations(inner) => {
                    <allowedExecutorDestinationsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::executeTransaction(inner) => {
                    <executeTransactionCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::executeTransactionWithGasRefunder(inner) => {
                    <executeTransactionWithGasRefunderCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::executeTransactions(inner) => {
                    <executeTransactionsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::executeTransactionsWithGasRefunder(inner) => {
                    <executeTransactionsWithGasRefunderCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::executors(inner) => {
                    <executorsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setAllowedExecutorDestinations(inner) => {
                    <setAllowedExecutorDestinationsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setExecutor(inner) => {
                    <setExecutorCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::validateExecuteTransaction(inner) => {
                    <validateExecuteTransactionCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::withdrawEth(inner) => {
                    <withdrawEthCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`ValidatorWallet`](self) custom errors.
    pub enum ValidatorWalletErrors {
        #[allow(missing_docs)]
        BadArrayLength(BadArrayLength),
        #[allow(missing_docs)]
        NotExecutorOrOwner(NotExecutorOrOwner),
        #[allow(missing_docs)]
        OnlyOwnerDestination(OnlyOwnerDestination),
        #[allow(missing_docs)]
        WithdrawEthFail(WithdrawEthFail),
    }
    #[automatically_derived]
    impl ValidatorWalletErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [17u8, 4u8, 167u8, 134u8],
            [65u8, 252u8, 111u8, 138u8],
            [126u8, 219u8, 180u8, 152u8],
            [242u8, 106u8, 234u8, 139u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ValidatorWalletErrors {
        const NAME: &'static str = "ValidatorWalletErrors";
        const MIN_DATA_LENGTH: usize = 32usize;
        const COUNT: usize = 4usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::BadArrayLength(_) => {
                    <BadArrayLength as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotExecutorOrOwner(_) => {
                    <NotExecutorOrOwner as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OnlyOwnerDestination(_) => {
                    <OnlyOwnerDestination as alloy_sol_types::SolError>::SELECTOR
                }
                Self::WithdrawEthFail(_) => {
                    <WithdrawEthFail as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<ValidatorWalletErrors>] = &[
                {
                    fn BadArrayLength(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ValidatorWalletErrors> {
                        <BadArrayLength as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ValidatorWalletErrors::BadArrayLength)
                    }
                    BadArrayLength
                },
                {
                    fn OnlyOwnerDestination(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ValidatorWalletErrors> {
                        <OnlyOwnerDestination as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ValidatorWalletErrors::OnlyOwnerDestination)
                    }
                    OnlyOwnerDestination
                },
                {
                    fn WithdrawEthFail(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ValidatorWalletErrors> {
                        <WithdrawEthFail as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ValidatorWalletErrors::WithdrawEthFail)
                    }
                    WithdrawEthFail
                },
                {
                    fn NotExecutorOrOwner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ValidatorWalletErrors> {
                        <NotExecutorOrOwner as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ValidatorWalletErrors::NotExecutorOrOwner)
                    }
                    NotExecutorOrOwner
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::BadArrayLength(inner) => {
                    <BadArrayLength as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotExecutorOrOwner(inner) => {
                    <NotExecutorOrOwner as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OnlyOwnerDestination(inner) => {
                    <OnlyOwnerDestination as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::WithdrawEthFail(inner) => {
                    <WithdrawEthFail as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::BadArrayLength(inner) => {
                    <BadArrayLength as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotExecutorOrOwner(inner) => {
                    <NotExecutorOrOwner as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OnlyOwnerDestination(inner) => {
                    <OnlyOwnerDestination as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::WithdrawEthFail(inner) => {
                    <WithdrawEthFail as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`ValidatorWallet`](self) events.
    pub enum ValidatorWalletEvents {
        #[allow(missing_docs)]
        AllowedExecutorDestinationsUpdated(AllowedExecutorDestinationsUpdated),
        #[allow(missing_docs)]
        ExecutorUpdated(ExecutorUpdated),
        #[allow(missing_docs)]
        Initialized(Initialized),
        #[allow(missing_docs)]
        OwnershipTransferred(OwnershipTransferred),
    }
    #[automatically_derived]
    impl ValidatorWalletEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                127u8,
                38u8,
                184u8,
                63u8,
                249u8,
                110u8,
                31u8,
                43u8,
                106u8,
                104u8,
                47u8,
                19u8,
                56u8,
                82u8,
                246u8,
                121u8,
                138u8,
                9u8,
                196u8,
                101u8,
                218u8,
                149u8,
                146u8,
                20u8,
                96u8,
                206u8,
                251u8,
                56u8,
                71u8,
                64u8,
                36u8,
                152u8,
            ],
            [
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ],
            [
                159u8,
                219u8,
                194u8,
                212u8,
                139u8,
                138u8,
                13u8,
                178u8,
                246u8,
                38u8,
                99u8,
                191u8,
                147u8,
                18u8,
                173u8,
                2u8,
                245u8,
                177u8,
                246u8,
                65u8,
                74u8,
                214u8,
                0u8,
                181u8,
                90u8,
                36u8,
                125u8,
                9u8,
                174u8,
                236u8,
                62u8,
                162u8,
            ],
            [
                171u8,
                6u8,
                63u8,
                229u8,
                117u8,
                196u8,
                223u8,
                53u8,
                154u8,
                175u8,
                55u8,
                51u8,
                188u8,
                241u8,
                7u8,
                6u8,
                186u8,
                207u8,
                221u8,
                36u8,
                85u8,
                126u8,
                103u8,
                10u8,
                44u8,
                28u8,
                186u8,
                18u8,
                106u8,
                228u8,
                216u8,
                164u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for ValidatorWalletEvents {
        const NAME: &'static str = "ValidatorWalletEvents";
        const COUNT: usize = 4usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <AllowedExecutorDestinationsUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <AllowedExecutorDestinationsUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::AllowedExecutorDestinationsUpdated)
                }
                Some(<ExecutorUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <ExecutorUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::ExecutorUpdated)
                }
                Some(<Initialized as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Initialized as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::Initialized)
                }
                Some(
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::OwnershipTransferred)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for ValidatorWalletEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::AllowedExecutorDestinationsUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::ExecutorUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Initialized(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::AllowedExecutorDestinationsUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::ExecutorUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Initialized(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`ValidatorWallet`](self) contract instance.

See the [wrapper's documentation](`ValidatorWalletInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> ValidatorWalletInstance<T, P, N> {
        ValidatorWalletInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<ValidatorWalletInstance<T, P, N>>,
    > {
        ValidatorWalletInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        ValidatorWalletInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`ValidatorWallet`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`ValidatorWallet`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct ValidatorWalletInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for ValidatorWalletInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("ValidatorWalletInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ValidatorWalletInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`ValidatorWallet`](self) contract instance.

See the [wrapper's documentation](`ValidatorWalletInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<ValidatorWalletInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> ValidatorWalletInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> ValidatorWalletInstance<T, P, N> {
            ValidatorWalletInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ValidatorWalletInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`allowedExecutorDestinations`] function.
        pub fn allowedExecutorDestinations(
            &self,
            _0: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, allowedExecutorDestinationsCall, N> {
            self.call_builder(
                &allowedExecutorDestinationsCall {
                    _0,
                },
            )
        }
        ///Creates a new call builder for the [`executeTransaction`] function.
        pub fn executeTransaction(
            &self,
            data: alloy::sol_types::private::Bytes,
            destination: alloy::sol_types::private::Address,
            amount: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, executeTransactionCall, N> {
            self.call_builder(
                &executeTransactionCall {
                    data,
                    destination,
                    amount,
                },
            )
        }
        ///Creates a new call builder for the [`executeTransactionWithGasRefunder`] function.
        pub fn executeTransactionWithGasRefunder(
            &self,
            gasRefunder: alloy::sol_types::private::Address,
            data: alloy::sol_types::private::Bytes,
            destination: alloy::sol_types::private::Address,
            amount: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            executeTransactionWithGasRefunderCall,
            N,
        > {
            self.call_builder(
                &executeTransactionWithGasRefunderCall {
                    gasRefunder,
                    data,
                    destination,
                    amount,
                },
            )
        }
        ///Creates a new call builder for the [`executeTransactions`] function.
        pub fn executeTransactions(
            &self,
            data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
            destination: alloy::sol_types::private::Vec<
                alloy::sol_types::private::Address,
            >,
            amount: alloy::sol_types::private::Vec<
                alloy::sol_types::private::primitives::aliases::U256,
            >,
        ) -> alloy_contract::SolCallBuilder<T, &P, executeTransactionsCall, N> {
            self.call_builder(
                &executeTransactionsCall {
                    data,
                    destination,
                    amount,
                },
            )
        }
        ///Creates a new call builder for the [`executeTransactionsWithGasRefunder`] function.
        pub fn executeTransactionsWithGasRefunder(
            &self,
            gasRefunder: alloy::sol_types::private::Address,
            data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
            destination: alloy::sol_types::private::Vec<
                alloy::sol_types::private::Address,
            >,
            amount: alloy::sol_types::private::Vec<
                alloy::sol_types::private::primitives::aliases::U256,
            >,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            executeTransactionsWithGasRefunderCall,
            N,
        > {
            self.call_builder(
                &executeTransactionsWithGasRefunderCall {
                    gasRefunder,
                    data,
                    destination,
                    amount,
                },
            )
        }
        ///Creates a new call builder for the [`executors`] function.
        pub fn executors(
            &self,
            _0: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, executorsCall, N> {
            self.call_builder(&executorsCall { _0 })
        }
        ///Creates a new call builder for the [`initialize`] function.
        pub fn initialize(
            &self,
            _executor: alloy::sol_types::private::Address,
            _owner: alloy::sol_types::private::Address,
            initialExecutorAllowedDests: alloy::sol_types::private::Vec<
                alloy::sol_types::private::Address,
            >,
        ) -> alloy_contract::SolCallBuilder<T, &P, initializeCall, N> {
            self.call_builder(
                &initializeCall {
                    _executor,
                    _owner,
                    initialExecutorAllowedDests,
                },
            )
        }
        ///Creates a new call builder for the [`owner`] function.
        pub fn owner(&self) -> alloy_contract::SolCallBuilder<T, &P, ownerCall, N> {
            self.call_builder(&ownerCall {})
        }
        ///Creates a new call builder for the [`renounceOwnership`] function.
        pub fn renounceOwnership(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, renounceOwnershipCall, N> {
            self.call_builder(&renounceOwnershipCall {})
        }
        ///Creates a new call builder for the [`setAllowedExecutorDestinations`] function.
        pub fn setAllowedExecutorDestinations(
            &self,
            destinations: alloy::sol_types::private::Vec<
                alloy::sol_types::private::Address,
            >,
            isSet: alloy::sol_types::private::Vec<bool>,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            setAllowedExecutorDestinationsCall,
            N,
        > {
            self.call_builder(
                &setAllowedExecutorDestinationsCall {
                    destinations,
                    isSet,
                },
            )
        }
        ///Creates a new call builder for the [`setExecutor`] function.
        pub fn setExecutor(
            &self,
            newExecutors: alloy::sol_types::private::Vec<
                alloy::sol_types::private::Address,
            >,
            isExecutor: alloy::sol_types::private::Vec<bool>,
        ) -> alloy_contract::SolCallBuilder<T, &P, setExecutorCall, N> {
            self.call_builder(
                &setExecutorCall {
                    newExecutors,
                    isExecutor,
                },
            )
        }
        ///Creates a new call builder for the [`transferOwnership`] function.
        pub fn transferOwnership(
            &self,
            newOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferOwnershipCall, N> {
            self.call_builder(&transferOwnershipCall { newOwner })
        }
        ///Creates a new call builder for the [`validateExecuteTransaction`] function.
        pub fn validateExecuteTransaction(
            &self,
            destination: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, validateExecuteTransactionCall, N> {
            self.call_builder(
                &validateExecuteTransactionCall {
                    destination,
                },
            )
        }
        ///Creates a new call builder for the [`withdrawEth`] function.
        pub fn withdrawEth(
            &self,
            amount: alloy::sol_types::private::primitives::aliases::U256,
            destination: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, withdrawEthCall, N> {
            self.call_builder(
                &withdrawEthCall {
                    amount,
                    destination,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ValidatorWalletInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`AllowedExecutorDestinationsUpdated`] event.
        pub fn AllowedExecutorDestinationsUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, AllowedExecutorDestinationsUpdated, N> {
            self.event_filter::<AllowedExecutorDestinationsUpdated>()
        }
        ///Creates a new event filter for the [`ExecutorUpdated`] event.
        pub fn ExecutorUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, ExecutorUpdated, N> {
            self.event_filter::<ExecutorUpdated>()
        }
        ///Creates a new event filter for the [`Initialized`] event.
        pub fn Initialized_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, Initialized, N> {
            self.event_filter::<Initialized>()
        }
        ///Creates a new event filter for the [`OwnershipTransferred`] event.
        pub fn OwnershipTransferred_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, OwnershipTransferred, N> {
            self.event_filter::<OwnershipTransferred>()
        }
    }
}
