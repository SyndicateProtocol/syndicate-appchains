/**

Generated by the following Solidity interface...
```solidity
interface ArbWasmCacheMock {
    function cacheProgram(address addr) external;
    function codehashIsCached(bytes32) external view returns (bool);
    function evictCodehash(bytes32 codehash) external;
    function numCached() external view returns (uint256);
    function uselessCalls() external view returns (uint256);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "cacheProgram",
    "inputs": [
      {
        "name": "addr",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "codehashIsCached",
    "inputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "evictCodehash",
    "inputs": [
      {
        "name": "codehash",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "numCached",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "uselessCalls",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod ArbWasmCacheMock {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052348015600e575f80fd5b506102848061001c5f395ff3fe608060405234801561000f575f80fd5b5060043610610064575f3560e01c8063ce9720131161004d578063ce972013146100b6578063e73ac9f2146100cb578063f5218634146100de575f80fd5b80630f6b1fee14610068578063a72f179b14610084575b5f80fd5b61007160025481565b6040519081526020015b60405180910390f35b6100a66100923660046101a3565b5f6020819052908152604090205460ff1681565b604051901515815260200161007b565b6100c96100c43660046101a3565b6100e7565b005b6100c96100d93660046101ba565b610136565b61007160015481565b5f8181526020819052604090205460ff166101135760028054905f61010b83610221565b919050555050565b5f818152602081905260408120805460ff19169055600180549161010b83610239565b73ffffffffffffffffffffffffffffffffffffffff81163f5f8181526020819052604090205460ff161561017c5760028054905f61017383610221565b91905055505050565b5f818152602081905260408120805460ff1916600190811790915580549161017383610221565b5f602082840312156101b3575f80fd5b5035919050565b5f602082840312156101ca575f80fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146101ed575f80fd5b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f5f198203610232576102326101f4565b5060010190565b5f81610247576102476101f4565b505f19019056fea26469706673582212203beb4470b9cf17b19655ae786ef8735d37f3dd6fd3ca0559337dfa17ed24a12864736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15`\x0EW_\x80\xFD[Pa\x02\x84\x80a\0\x1C_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\0dW_5`\xE0\x1C\x80c\xCE\x97 \x13\x11a\0MW\x80c\xCE\x97 \x13\x14a\0\xB6W\x80c\xE7:\xC9\xF2\x14a\0\xCBW\x80c\xF5!\x864\x14a\0\xDEW_\x80\xFD[\x80c\x0Fk\x1F\xEE\x14a\0hW\x80c\xA7/\x17\x9B\x14a\0\x84W[_\x80\xFD[a\0q`\x02T\x81V[`@Q\x90\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\0\xA6a\0\x926`\x04a\x01\xA3V[_` \x81\x90R\x90\x81R`@\x90 T`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01a\0{V[a\0\xC9a\0\xC46`\x04a\x01\xA3V[a\0\xE7V[\0[a\0\xC9a\0\xD96`\x04a\x01\xBAV[a\x016V[a\0q`\x01T\x81V[_\x81\x81R` \x81\x90R`@\x90 T`\xFF\x16a\x01\x13W`\x02\x80T\x90_a\x01\x0B\x83a\x02!V[\x91\x90PUPPV[_\x81\x81R` \x81\x90R`@\x81 \x80T`\xFF\x19\x16\x90U`\x01\x80T\x91a\x01\x0B\x83a\x029V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16?_\x81\x81R` \x81\x90R`@\x90 T`\xFF\x16\x15a\x01|W`\x02\x80T\x90_a\x01s\x83a\x02!V[\x91\x90PUPPPV[_\x81\x81R` \x81\x90R`@\x81 \x80T`\xFF\x19\x16`\x01\x90\x81\x17\x90\x91U\x80T\x91a\x01s\x83a\x02!V[_` \x82\x84\x03\x12\x15a\x01\xB3W_\x80\xFD[P5\x91\x90PV[_` \x82\x84\x03\x12\x15a\x01\xCAW_\x80\xFD[\x815s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x01\xEDW_\x80\xFD[\x93\x92PPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[__\x19\x82\x03a\x022Wa\x022a\x01\xF4V[P`\x01\x01\x90V[_\x81a\x02GWa\x02Ga\x01\xF4V[P_\x19\x01\x90V\xFE\xA2dipfsX\"\x12 ;\xEBDp\xB9\xCF\x17\xB1\x96U\xAExn\xF8s]7\xF3\xDDo\xD3\xCA\x05Y3}\xFA\x17\xED$\xA1(dsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f80fd5b5060043610610064575f3560e01c8063ce9720131161004d578063ce972013146100b6578063e73ac9f2146100cb578063f5218634146100de575f80fd5b80630f6b1fee14610068578063a72f179b14610084575b5f80fd5b61007160025481565b6040519081526020015b60405180910390f35b6100a66100923660046101a3565b5f6020819052908152604090205460ff1681565b604051901515815260200161007b565b6100c96100c43660046101a3565b6100e7565b005b6100c96100d93660046101ba565b610136565b61007160015481565b5f8181526020819052604090205460ff166101135760028054905f61010b83610221565b919050555050565b5f818152602081905260408120805460ff19169055600180549161010b83610239565b73ffffffffffffffffffffffffffffffffffffffff81163f5f8181526020819052604090205460ff161561017c5760028054905f61017383610221565b91905055505050565b5f818152602081905260408120805460ff1916600190811790915580549161017383610221565b5f602082840312156101b3575f80fd5b5035919050565b5f602082840312156101ca575f80fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146101ed575f80fd5b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f5f198203610232576102326101f4565b5060010190565b5f81610247576102476101f4565b505f19019056fea26469706673582212203beb4470b9cf17b19655ae786ef8735d37f3dd6fd3ca0559337dfa17ed24a12864736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\0dW_5`\xE0\x1C\x80c\xCE\x97 \x13\x11a\0MW\x80c\xCE\x97 \x13\x14a\0\xB6W\x80c\xE7:\xC9\xF2\x14a\0\xCBW\x80c\xF5!\x864\x14a\0\xDEW_\x80\xFD[\x80c\x0Fk\x1F\xEE\x14a\0hW\x80c\xA7/\x17\x9B\x14a\0\x84W[_\x80\xFD[a\0q`\x02T\x81V[`@Q\x90\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\0\xA6a\0\x926`\x04a\x01\xA3V[_` \x81\x90R\x90\x81R`@\x90 T`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01a\0{V[a\0\xC9a\0\xC46`\x04a\x01\xA3V[a\0\xE7V[\0[a\0\xC9a\0\xD96`\x04a\x01\xBAV[a\x016V[a\0q`\x01T\x81V[_\x81\x81R` \x81\x90R`@\x90 T`\xFF\x16a\x01\x13W`\x02\x80T\x90_a\x01\x0B\x83a\x02!V[\x91\x90PUPPV[_\x81\x81R` \x81\x90R`@\x81 \x80T`\xFF\x19\x16\x90U`\x01\x80T\x91a\x01\x0B\x83a\x029V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16?_\x81\x81R` \x81\x90R`@\x90 T`\xFF\x16\x15a\x01|W`\x02\x80T\x90_a\x01s\x83a\x02!V[\x91\x90PUPPPV[_\x81\x81R` \x81\x90R`@\x81 \x80T`\xFF\x19\x16`\x01\x90\x81\x17\x90\x91U\x80T\x91a\x01s\x83a\x02!V[_` \x82\x84\x03\x12\x15a\x01\xB3W_\x80\xFD[P5\x91\x90PV[_` \x82\x84\x03\x12\x15a\x01\xCAW_\x80\xFD[\x815s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x01\xEDW_\x80\xFD[\x93\x92PPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[__\x19\x82\x03a\x022Wa\x022a\x01\xF4V[P`\x01\x01\x90V[_\x81a\x02GWa\x02Ga\x01\xF4V[P_\x19\x01\x90V\xFE\xA2dipfsX\"\x12 ;\xEBDp\xB9\xCF\x17\xB1\x96U\xAExn\xF8s]7\xF3\xDDo\xD3\xCA\x05Y3}\xFA\x17\xED$\xA1(dsolcC\0\x08\x19\x003",
    );
    /**Function with signature `cacheProgram(address)` and selector `0xe73ac9f2`.
```solidity
function cacheProgram(address addr) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct cacheProgramCall {
        pub addr: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`cacheProgram(address)`](cacheProgramCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct cacheProgramReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<cacheProgramCall> for UnderlyingRustTuple<'_> {
                fn from(value: cacheProgramCall) -> Self {
                    (value.addr,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for cacheProgramCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { addr: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<cacheProgramReturn> for UnderlyingRustTuple<'_> {
                fn from(value: cacheProgramReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for cacheProgramReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for cacheProgramCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = cacheProgramReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "cacheProgram(address)";
            const SELECTOR: [u8; 4] = [231u8, 58u8, 201u8, 242u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.addr,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `codehashIsCached(bytes32)` and selector `0xa72f179b`.
```solidity
function codehashIsCached(bytes32) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct codehashIsCachedCall {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`codehashIsCached(bytes32)`](codehashIsCachedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct codehashIsCachedReturn {
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<codehashIsCachedCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: codehashIsCachedCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for codehashIsCachedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<codehashIsCachedReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: codehashIsCachedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for codehashIsCachedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for codehashIsCachedCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = codehashIsCachedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "codehashIsCached(bytes32)";
            const SELECTOR: [u8; 4] = [167u8, 47u8, 23u8, 155u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self._0),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `evictCodehash(bytes32)` and selector `0xce972013`.
```solidity
function evictCodehash(bytes32 codehash) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct evictCodehashCall {
        pub codehash: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`evictCodehash(bytes32)`](evictCodehashCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct evictCodehashReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<evictCodehashCall> for UnderlyingRustTuple<'_> {
                fn from(value: evictCodehashCall) -> Self {
                    (value.codehash,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for evictCodehashCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { codehash: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<evictCodehashReturn> for UnderlyingRustTuple<'_> {
                fn from(value: evictCodehashReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for evictCodehashReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for evictCodehashCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = evictCodehashReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "evictCodehash(bytes32)";
            const SELECTOR: [u8; 4] = [206u8, 151u8, 32u8, 19u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.codehash),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `numCached()` and selector `0xf5218634`.
```solidity
function numCached() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct numCachedCall {}
    ///Container type for the return parameters of the [`numCached()`](numCachedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct numCachedReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<numCachedCall> for UnderlyingRustTuple<'_> {
                fn from(value: numCachedCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for numCachedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<numCachedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: numCachedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for numCachedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for numCachedCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = numCachedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "numCached()";
            const SELECTOR: [u8; 4] = [245u8, 33u8, 134u8, 52u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `uselessCalls()` and selector `0x0f6b1fee`.
```solidity
function uselessCalls() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct uselessCallsCall {}
    ///Container type for the return parameters of the [`uselessCalls()`](uselessCallsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct uselessCallsReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<uselessCallsCall> for UnderlyingRustTuple<'_> {
                fn from(value: uselessCallsCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for uselessCallsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<uselessCallsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: uselessCallsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for uselessCallsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for uselessCallsCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = uselessCallsReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "uselessCalls()";
            const SELECTOR: [u8; 4] = [15u8, 107u8, 31u8, 238u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`ArbWasmCacheMock`](self) function calls.
    pub enum ArbWasmCacheMockCalls {
        cacheProgram(cacheProgramCall),
        codehashIsCached(codehashIsCachedCall),
        evictCodehash(evictCodehashCall),
        numCached(numCachedCall),
        uselessCalls(uselessCallsCall),
    }
    #[automatically_derived]
    impl ArbWasmCacheMockCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [15u8, 107u8, 31u8, 238u8],
            [167u8, 47u8, 23u8, 155u8],
            [206u8, 151u8, 32u8, 19u8],
            [231u8, 58u8, 201u8, 242u8],
            [245u8, 33u8, 134u8, 52u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ArbWasmCacheMockCalls {
        const NAME: &'static str = "ArbWasmCacheMockCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 5usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::cacheProgram(_) => {
                    <cacheProgramCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::codehashIsCached(_) => {
                    <codehashIsCachedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::evictCodehash(_) => {
                    <evictCodehashCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::numCached(_) => {
                    <numCachedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::uselessCalls(_) => {
                    <uselessCallsCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<ArbWasmCacheMockCalls>] = &[
                {
                    fn uselessCalls(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbWasmCacheMockCalls> {
                        <uselessCallsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbWasmCacheMockCalls::uselessCalls)
                    }
                    uselessCalls
                },
                {
                    fn codehashIsCached(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbWasmCacheMockCalls> {
                        <codehashIsCachedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbWasmCacheMockCalls::codehashIsCached)
                    }
                    codehashIsCached
                },
                {
                    fn evictCodehash(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbWasmCacheMockCalls> {
                        <evictCodehashCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbWasmCacheMockCalls::evictCodehash)
                    }
                    evictCodehash
                },
                {
                    fn cacheProgram(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbWasmCacheMockCalls> {
                        <cacheProgramCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbWasmCacheMockCalls::cacheProgram)
                    }
                    cacheProgram
                },
                {
                    fn numCached(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbWasmCacheMockCalls> {
                        <numCachedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbWasmCacheMockCalls::numCached)
                    }
                    numCached
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::cacheProgram(inner) => {
                    <cacheProgramCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::codehashIsCached(inner) => {
                    <codehashIsCachedCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::evictCodehash(inner) => {
                    <evictCodehashCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::numCached(inner) => {
                    <numCachedCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::uselessCalls(inner) => {
                    <uselessCallsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::cacheProgram(inner) => {
                    <cacheProgramCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::codehashIsCached(inner) => {
                    <codehashIsCachedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::evictCodehash(inner) => {
                    <evictCodehashCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::numCached(inner) => {
                    <numCachedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::uselessCalls(inner) => {
                    <uselessCallsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`ArbWasmCacheMock`](self) contract instance.

See the [wrapper's documentation](`ArbWasmCacheMockInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> ArbWasmCacheMockInstance<T, P, N> {
        ArbWasmCacheMockInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<ArbWasmCacheMockInstance<T, P, N>>,
    > {
        ArbWasmCacheMockInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        ArbWasmCacheMockInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`ArbWasmCacheMock`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`ArbWasmCacheMock`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct ArbWasmCacheMockInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for ArbWasmCacheMockInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("ArbWasmCacheMockInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ArbWasmCacheMockInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`ArbWasmCacheMock`](self) contract instance.

See the [wrapper's documentation](`ArbWasmCacheMockInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<ArbWasmCacheMockInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> ArbWasmCacheMockInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> ArbWasmCacheMockInstance<T, P, N> {
            ArbWasmCacheMockInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ArbWasmCacheMockInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`cacheProgram`] function.
        pub fn cacheProgram(
            &self,
            addr: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, cacheProgramCall, N> {
            self.call_builder(&cacheProgramCall { addr })
        }
        ///Creates a new call builder for the [`codehashIsCached`] function.
        pub fn codehashIsCached(
            &self,
            _0: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, codehashIsCachedCall, N> {
            self.call_builder(&codehashIsCachedCall { _0 })
        }
        ///Creates a new call builder for the [`evictCodehash`] function.
        pub fn evictCodehash(
            &self,
            codehash: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, evictCodehashCall, N> {
            self.call_builder(&evictCodehashCall { codehash })
        }
        ///Creates a new call builder for the [`numCached`] function.
        pub fn numCached(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, numCachedCall, N> {
            self.call_builder(&numCachedCall {})
        }
        ///Creates a new call builder for the [`uselessCalls`] function.
        pub fn uselessCalls(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, uselessCallsCall, N> {
            self.call_builder(&uselessCallsCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ArbWasmCacheMockInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
