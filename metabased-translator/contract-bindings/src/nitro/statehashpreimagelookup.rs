/**

Generated by the following Solidity interface...
```solidity
interface StateHashPreImageLookup {
    type MachineStatus is uint8;
    struct ExecutionState {
        GlobalState globalState;
        MachineStatus machineStatus;
    }
    struct GlobalState {
        bytes32[2] bytes32Vals;
        uint64[2] u64Vals;
    }

    event HashSet(bytes32 h, ExecutionState executionState, uint256 inboxMaxCount);

    function get(bytes32 h) external view returns (ExecutionState memory executionState, uint256 inboxMaxCount);
    function set(bytes32 h, ExecutionState memory executionState, uint256 inboxMaxCount) external;
    function stateHash(ExecutionState memory executionState, uint256 inboxMaxCount) external pure returns (bytes32);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "get",
    "inputs": [
      {
        "name": "h",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "executionState",
        "type": "tuple",
        "internalType": "struct ExecutionState",
        "components": [
          {
            "name": "globalState",
            "type": "tuple",
            "internalType": "struct GlobalState",
            "components": [
              {
                "name": "bytes32Vals",
                "type": "bytes32[2]",
                "internalType": "bytes32[2]"
              },
              {
                "name": "u64Vals",
                "type": "uint64[2]",
                "internalType": "uint64[2]"
              }
            ]
          },
          {
            "name": "machineStatus",
            "type": "uint8",
            "internalType": "enum MachineStatus"
          }
        ]
      },
      {
        "name": "inboxMaxCount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "set",
    "inputs": [
      {
        "name": "h",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "executionState",
        "type": "tuple",
        "internalType": "struct ExecutionState",
        "components": [
          {
            "name": "globalState",
            "type": "tuple",
            "internalType": "struct GlobalState",
            "components": [
              {
                "name": "bytes32Vals",
                "type": "bytes32[2]",
                "internalType": "bytes32[2]"
              },
              {
                "name": "u64Vals",
                "type": "uint64[2]",
                "internalType": "uint64[2]"
              }
            ]
          },
          {
            "name": "machineStatus",
            "type": "uint8",
            "internalType": "enum MachineStatus"
          }
        ]
      },
      {
        "name": "inboxMaxCount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "stateHash",
    "inputs": [
      {
        "name": "executionState",
        "type": "tuple",
        "internalType": "struct ExecutionState",
        "components": [
          {
            "name": "globalState",
            "type": "tuple",
            "internalType": "struct GlobalState",
            "components": [
              {
                "name": "bytes32Vals",
                "type": "bytes32[2]",
                "internalType": "bytes32[2]"
              },
              {
                "name": "u64Vals",
                "type": "uint64[2]",
                "internalType": "uint64[2]"
              }
            ]
          },
          {
            "name": "machineStatus",
            "type": "uint8",
            "internalType": "enum MachineStatus"
          }
        ]
      },
      {
        "name": "inboxMaxCount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "event",
    "name": "HashSet",
    "inputs": [
      {
        "name": "h",
        "type": "bytes32",
        "indexed": false,
        "internalType": "bytes32"
      },
      {
        "name": "executionState",
        "type": "tuple",
        "indexed": false,
        "internalType": "struct ExecutionState",
        "components": [
          {
            "name": "globalState",
            "type": "tuple",
            "internalType": "struct GlobalState",
            "components": [
              {
                "name": "bytes32Vals",
                "type": "bytes32[2]",
                "internalType": "bytes32[2]"
              },
              {
                "name": "u64Vals",
                "type": "uint64[2]",
                "internalType": "uint64[2]"
              }
            ]
          },
          {
            "name": "machineStatus",
            "type": "uint8",
            "internalType": "enum MachineStatus"
          }
        ]
      },
      {
        "name": "inboxMaxCount",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod StateHashPreImageLookup {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052348015600e575f80fd5b506109da8061001c5f395ff3fe608060405234801561000f575f80fd5b506004361061003f575f3560e01c806331644130146100435780638eaa6ac014610069578063945c94941461008a575b5f80fd5b610056610051366004610411565b61009f565b6040519081526020015b60405180910390f35b61007c61007736600461043a565b61018f565b604051610060929190610471565b61009d6100983660046104f8565b6102b7565b005b5f61014e6100b236859003850185610580565b8051805160209182015192820151805190830151604080517f476c6f62616c2073746174653a0000000000000000000000000000000000000081870152602d810194909452604d8401959095527fffffffffffffffff00000000000000000000000000000000000000000000000060c092831b8116606d850152911b1660758201528251808203605d018152607d909101909252815191012090565b8261015f60a0860160808701610648565b6040516020016101719392919061066a565b60405160208183030381529060405280519060200120905092915050565b6101976103a2565b5f82815260208190526040812080546101af906106a5565b80601f01602080910402602001604051908101604052809291908181526020018280546101db906106a5565b80156102265780601f106101fd57610100808354040283529160200191610226565b820191905f5260205f20905b81548152906001019060200180831161020957829003601f168201915b505050505080602001905181019061023e919061073d565b90925090505f8190036102b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f48617368206e6f7420796574207365740000000000000000000000000000000060448201526064015b60405180910390fd5b915091565b6102c1828261009f565b8314610329576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f496e76616c69642068617368000000000000000000000000000000000000000060448201526064016102a9565b818160405160200161033c92919061085c565b60408051601f198184030181529181525f8581526020819052209061036190826108c2565b507f14c0a6b8d81f5915dacfd85e41ae4798343ec29de408ac4c13360c7238ae0ad983838360405161039593929190610982565b60405180910390a1505050565b60405180604001604052806103b56103c1565b81526020015f5b905290565b60405180604001604052806103d46103dd565b81526020016103bc5b60405180604001604052806002906020820280368337509192915050565b5f60a0828403121561040b575f80fd5b50919050565b5f8060c08385031215610422575f80fd5b61042c84846103fb565b9460a0939093013593505050565b5f6020828403121561044a575f80fd5b5035919050565b6003811061046d57634e487b7160e01b5f52602160045260245ffd5b9052565b8251805160c083019190835f5b600281101561049d57825182526020928301929091019060010161047e565b50505060209081015190604084015f5b60028110156104d457835167ffffffffffffffff16825292820192908201906001016104ad565b5050505060208401516104ea6080840182610451565b508260a08301529392505050565b5f805f60e0848603121561050a575f80fd5b8335925061051b85602086016103fb565b915060c084013590509250925092565b634e487b7160e01b5f52604160045260245ffd5b6040805190810167ffffffffffffffff811182821017156105625761056261052b565b60405290565b67ffffffffffffffff8116811461057d575f80fd5b50565b5f60808284031215610590575f80fd5b61059861053f565b83601f8401126105a6575f80fd5b6105ae61053f565b8060408501868111156105bf575f80fd5b855b818110156105d95780358452602093840193016105c1565b5081845286605f8701126105eb575f80fd5b6105f361053f565b92508291506080860187811115610608575f80fd5b8082101561062d57813561061b81610568565b84526020938401939190910190610608565b50506020830152509392505050565b6003811061057d575f80fd5b5f60208284031215610658575f80fd5b81356106638161063c565b9392505050565b8381528260208201525f6003831061069057634e487b7160e01b5f52602160045260245ffd5b5060f89190911b604082015260410192915050565b600181811c908216806106b957607f821691505b60208210810361040b57634e487b7160e01b5f52602260045260245ffd5b5f82601f8301126106e6575f80fd5b6106ee61053f565b8060408401858111156106ff575f80fd5b845b8181101561072257805161071481610568565b845260209384019301610701565b509095945050505050565b80516107388161063c565b919050565b5f8082840360c081121561074f575f80fd5b60a081121561075c575f80fd5b61076461053f565b6080821215610771575f80fd5b61077961053f565b915085601f860112610789575f80fd5b61079161053f565b8060408701888111156107a2575f80fd5b875b818110156107bc5780518452602093840193016107a4565b508185526107ca89826106d7565b60208601525050508181526107e16080860161072d565b602082015260a094909401519395939450505050565b604081833760408201604082015f5b600281101561083957813561081a81610568565b67ffffffffffffffff1683526020928301929190910190600101610806565b505050608081013561084a8161063c565b6108576080840182610451565b505050565b60c0810161086a82856107f7565b8260a08301529392505050565b601f82111561085757805f5260205f20601f840160051c8101602085101561089c5750805b601f840160051c820191505b818110156108bb575f81556001016108a8565b5050505050565b815167ffffffffffffffff8111156108dc576108dc61052b565b6108f0816108ea84546106a5565b84610877565b602080601f831160018114610923575f841561090c5750858301515b5f19600386901b1c1916600185901b17855561097a565b5f85815260208120601f198616915b8281101561095157888601518255948401946001909101908401610932565b508582101561096e57878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b83815260e0810161099660208301856107f7565b8260c083015294935050505056fea2646970667358221220fd953c6df4907248ae24c8c866354a80cd368fc849c73ffa4e66d136ed36391d64736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15`\x0EW_\x80\xFD[Pa\t\xDA\x80a\0\x1C_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\0?W_5`\xE0\x1C\x80c1dA0\x14a\0CW\x80c\x8E\xAAj\xC0\x14a\0iW\x80c\x94\\\x94\x94\x14a\0\x8AW[_\x80\xFD[a\0Va\0Q6`\x04a\x04\x11V[a\0\x9FV[`@Q\x90\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\0|a\0w6`\x04a\x04:V[a\x01\x8FV[`@Qa\0`\x92\x91\x90a\x04qV[a\0\x9Da\0\x986`\x04a\x04\xF8V[a\x02\xB7V[\0[_a\x01Na\0\xB26\x85\x90\x03\x85\x01\x85a\x05\x80V[\x80Q\x80Q` \x91\x82\x01Q\x92\x82\x01Q\x80Q\x90\x83\x01Q`@\x80Q\x7FGlobal state:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81\x87\x01R`-\x81\x01\x94\x90\x94R`M\x84\x01\x95\x90\x95R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xC0\x92\x83\x1B\x81\x16`m\x85\x01R\x91\x1B\x16`u\x82\x01R\x82Q\x80\x82\x03`]\x01\x81R`}\x90\x91\x01\x90\x92R\x81Q\x91\x01 \x90V[\x82a\x01_`\xA0\x86\x01`\x80\x87\x01a\x06HV[`@Q` \x01a\x01q\x93\x92\x91\x90a\x06jV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P\x92\x91PPV[a\x01\x97a\x03\xA2V[_\x82\x81R` \x81\x90R`@\x81 \x80Ta\x01\xAF\x90a\x06\xA5V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x01\xDB\x90a\x06\xA5V[\x80\x15a\x02&W\x80`\x1F\x10a\x01\xFDWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x02&V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x02\tW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x80` \x01\x90Q\x81\x01\x90a\x02>\x91\x90a\x07=V[\x90\x92P\x90P_\x81\x90\x03a\x02\xB2W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x10`$\x82\x01R\x7FHash not yet set\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01[`@Q\x80\x91\x03\x90\xFD[\x91P\x91V[a\x02\xC1\x82\x82a\0\x9FV[\x83\x14a\x03)W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x0C`$\x82\x01R\x7FInvalid hash\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA9V[\x81\x81`@Q` \x01a\x03<\x92\x91\x90a\x08\\V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x81R_\x85\x81R` \x81\x90R \x90a\x03a\x90\x82a\x08\xC2V[P\x7F\x14\xC0\xA6\xB8\xD8\x1FY\x15\xDA\xCF\xD8^A\xAEG\x984>\xC2\x9D\xE4\x08\xACL\x136\x0Cr8\xAE\n\xD9\x83\x83\x83`@Qa\x03\x95\x93\x92\x91\x90a\t\x82V[`@Q\x80\x91\x03\x90\xA1PPPV[`@Q\x80`@\x01`@R\x80a\x03\xB5a\x03\xC1V[\x81R` \x01_[\x90R\x90V[`@Q\x80`@\x01`@R\x80a\x03\xD4a\x03\xDDV[\x81R` \x01a\x03\xBC[`@Q\x80`@\x01`@R\x80`\x02\x90` \x82\x02\x806\x837P\x91\x92\x91PPV[_`\xA0\x82\x84\x03\x12\x15a\x04\x0BW_\x80\xFD[P\x91\x90PV[_\x80`\xC0\x83\x85\x03\x12\x15a\x04\"W_\x80\xFD[a\x04,\x84\x84a\x03\xFBV[\x94`\xA0\x93\x90\x93\x015\x93PPPV[_` \x82\x84\x03\x12\x15a\x04JW_\x80\xFD[P5\x91\x90PV[`\x03\x81\x10a\x04mWcNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[\x90RV[\x82Q\x80Q`\xC0\x83\x01\x91\x90\x83_[`\x02\x81\x10\x15a\x04\x9DW\x82Q\x82R` \x92\x83\x01\x92\x90\x91\x01\x90`\x01\x01a\x04~V[PPP` \x90\x81\x01Q\x90`@\x84\x01_[`\x02\x81\x10\x15a\x04\xD4W\x83Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82R\x92\x82\x01\x92\x90\x82\x01\x90`\x01\x01a\x04\xADV[PPPP` \x84\x01Qa\x04\xEA`\x80\x84\x01\x82a\x04QV[P\x82`\xA0\x83\x01R\x93\x92PPPV[_\x80_`\xE0\x84\x86\x03\x12\x15a\x05\nW_\x80\xFD[\x835\x92Pa\x05\x1B\x85` \x86\x01a\x03\xFBV[\x91P`\xC0\x84\x015\x90P\x92P\x92P\x92V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@\x80Q\x90\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x05bWa\x05ba\x05+V[`@R\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x05}W_\x80\xFD[PV[_`\x80\x82\x84\x03\x12\x15a\x05\x90W_\x80\xFD[a\x05\x98a\x05?V[\x83`\x1F\x84\x01\x12a\x05\xA6W_\x80\xFD[a\x05\xAEa\x05?V[\x80`@\x85\x01\x86\x81\x11\x15a\x05\xBFW_\x80\xFD[\x85[\x81\x81\x10\x15a\x05\xD9W\x805\x84R` \x93\x84\x01\x93\x01a\x05\xC1V[P\x81\x84R\x86`_\x87\x01\x12a\x05\xEBW_\x80\xFD[a\x05\xF3a\x05?V[\x92P\x82\x91P`\x80\x86\x01\x87\x81\x11\x15a\x06\x08W_\x80\xFD[\x80\x82\x10\x15a\x06-W\x815a\x06\x1B\x81a\x05hV[\x84R` \x93\x84\x01\x93\x91\x90\x91\x01\x90a\x06\x08V[PP` \x83\x01RP\x93\x92PPPV[`\x03\x81\x10a\x05}W_\x80\xFD[_` \x82\x84\x03\x12\x15a\x06XW_\x80\xFD[\x815a\x06c\x81a\x06<V[\x93\x92PPPV[\x83\x81R\x82` \x82\x01R_`\x03\x83\x10a\x06\x90WcNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[P`\xF8\x91\x90\x91\x1B`@\x82\x01R`A\x01\x92\x91PPV[`\x01\x81\x81\x1C\x90\x82\x16\x80a\x06\xB9W`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a\x04\x0BWcNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[_\x82`\x1F\x83\x01\x12a\x06\xE6W_\x80\xFD[a\x06\xEEa\x05?V[\x80`@\x84\x01\x85\x81\x11\x15a\x06\xFFW_\x80\xFD[\x84[\x81\x81\x10\x15a\x07\"W\x80Qa\x07\x14\x81a\x05hV[\x84R` \x93\x84\x01\x93\x01a\x07\x01V[P\x90\x95\x94PPPPPV[\x80Qa\x078\x81a\x06<V[\x91\x90PV[_\x80\x82\x84\x03`\xC0\x81\x12\x15a\x07OW_\x80\xFD[`\xA0\x81\x12\x15a\x07\\W_\x80\xFD[a\x07da\x05?V[`\x80\x82\x12\x15a\x07qW_\x80\xFD[a\x07ya\x05?V[\x91P\x85`\x1F\x86\x01\x12a\x07\x89W_\x80\xFD[a\x07\x91a\x05?V[\x80`@\x87\x01\x88\x81\x11\x15a\x07\xA2W_\x80\xFD[\x87[\x81\x81\x10\x15a\x07\xBCW\x80Q\x84R` \x93\x84\x01\x93\x01a\x07\xA4V[P\x81\x85Ra\x07\xCA\x89\x82a\x06\xD7V[` \x86\x01RPPP\x81\x81Ra\x07\xE1`\x80\x86\x01a\x07-V[` \x82\x01R`\xA0\x94\x90\x94\x01Q\x93\x95\x93\x94PPPPV[`@\x81\x837`@\x82\x01`@\x82\x01_[`\x02\x81\x10\x15a\x089W\x815a\x08\x1A\x81a\x05hV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x83R` \x92\x83\x01\x92\x91\x90\x91\x01\x90`\x01\x01a\x08\x06V[PPP`\x80\x81\x015a\x08J\x81a\x06<V[a\x08W`\x80\x84\x01\x82a\x04QV[PPPV[`\xC0\x81\x01a\x08j\x82\x85a\x07\xF7V[\x82`\xA0\x83\x01R\x93\x92PPPV[`\x1F\x82\x11\x15a\x08WW\x80_R` _ `\x1F\x84\x01`\x05\x1C\x81\x01` \x85\x10\x15a\x08\x9CWP\x80[`\x1F\x84\x01`\x05\x1C\x82\x01\x91P[\x81\x81\x10\x15a\x08\xBBW_\x81U`\x01\x01a\x08\xA8V[PPPPPV[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x08\xDCWa\x08\xDCa\x05+V[a\x08\xF0\x81a\x08\xEA\x84Ta\x06\xA5V[\x84a\x08wV[` \x80`\x1F\x83\x11`\x01\x81\x14a\t#W_\x84\x15a\t\x0CWP\x85\x83\x01Q[_\x19`\x03\x86\x90\x1B\x1C\x19\x16`\x01\x85\x90\x1B\x17\x85Ua\tzV[_\x85\x81R` \x81 `\x1F\x19\x86\x16\x91[\x82\x81\x10\x15a\tQW\x88\x86\x01Q\x82U\x94\x84\x01\x94`\x01\x90\x91\x01\x90\x84\x01a\t2V[P\x85\x82\x10\x15a\tnW\x87\x85\x01Q_\x19`\x03\x88\x90\x1B`\xF8\x16\x1C\x19\x16\x81U[PP`\x01\x84`\x01\x1B\x01\x85U[PPPPPPV[\x83\x81R`\xE0\x81\x01a\t\x96` \x83\x01\x85a\x07\xF7V[\x82`\xC0\x83\x01R\x94\x93PPPPV\xFE\xA2dipfsX\"\x12 \xFD\x95<m\xF4\x90rH\xAE$\xC8\xC8f5J\x80\xCD6\x8F\xC8I\xC7?\xFANf\xD16\xED69\x1DdsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f80fd5b506004361061003f575f3560e01c806331644130146100435780638eaa6ac014610069578063945c94941461008a575b5f80fd5b610056610051366004610411565b61009f565b6040519081526020015b60405180910390f35b61007c61007736600461043a565b61018f565b604051610060929190610471565b61009d6100983660046104f8565b6102b7565b005b5f61014e6100b236859003850185610580565b8051805160209182015192820151805190830151604080517f476c6f62616c2073746174653a0000000000000000000000000000000000000081870152602d810194909452604d8401959095527fffffffffffffffff00000000000000000000000000000000000000000000000060c092831b8116606d850152911b1660758201528251808203605d018152607d909101909252815191012090565b8261015f60a0860160808701610648565b6040516020016101719392919061066a565b60405160208183030381529060405280519060200120905092915050565b6101976103a2565b5f82815260208190526040812080546101af906106a5565b80601f01602080910402602001604051908101604052809291908181526020018280546101db906106a5565b80156102265780601f106101fd57610100808354040283529160200191610226565b820191905f5260205f20905b81548152906001019060200180831161020957829003601f168201915b505050505080602001905181019061023e919061073d565b90925090505f8190036102b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f48617368206e6f7420796574207365740000000000000000000000000000000060448201526064015b60405180910390fd5b915091565b6102c1828261009f565b8314610329576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f496e76616c69642068617368000000000000000000000000000000000000000060448201526064016102a9565b818160405160200161033c92919061085c565b60408051601f198184030181529181525f8581526020819052209061036190826108c2565b507f14c0a6b8d81f5915dacfd85e41ae4798343ec29de408ac4c13360c7238ae0ad983838360405161039593929190610982565b60405180910390a1505050565b60405180604001604052806103b56103c1565b81526020015f5b905290565b60405180604001604052806103d46103dd565b81526020016103bc5b60405180604001604052806002906020820280368337509192915050565b5f60a0828403121561040b575f80fd5b50919050565b5f8060c08385031215610422575f80fd5b61042c84846103fb565b9460a0939093013593505050565b5f6020828403121561044a575f80fd5b5035919050565b6003811061046d57634e487b7160e01b5f52602160045260245ffd5b9052565b8251805160c083019190835f5b600281101561049d57825182526020928301929091019060010161047e565b50505060209081015190604084015f5b60028110156104d457835167ffffffffffffffff16825292820192908201906001016104ad565b5050505060208401516104ea6080840182610451565b508260a08301529392505050565b5f805f60e0848603121561050a575f80fd5b8335925061051b85602086016103fb565b915060c084013590509250925092565b634e487b7160e01b5f52604160045260245ffd5b6040805190810167ffffffffffffffff811182821017156105625761056261052b565b60405290565b67ffffffffffffffff8116811461057d575f80fd5b50565b5f60808284031215610590575f80fd5b61059861053f565b83601f8401126105a6575f80fd5b6105ae61053f565b8060408501868111156105bf575f80fd5b855b818110156105d95780358452602093840193016105c1565b5081845286605f8701126105eb575f80fd5b6105f361053f565b92508291506080860187811115610608575f80fd5b8082101561062d57813561061b81610568565b84526020938401939190910190610608565b50506020830152509392505050565b6003811061057d575f80fd5b5f60208284031215610658575f80fd5b81356106638161063c565b9392505050565b8381528260208201525f6003831061069057634e487b7160e01b5f52602160045260245ffd5b5060f89190911b604082015260410192915050565b600181811c908216806106b957607f821691505b60208210810361040b57634e487b7160e01b5f52602260045260245ffd5b5f82601f8301126106e6575f80fd5b6106ee61053f565b8060408401858111156106ff575f80fd5b845b8181101561072257805161071481610568565b845260209384019301610701565b509095945050505050565b80516107388161063c565b919050565b5f8082840360c081121561074f575f80fd5b60a081121561075c575f80fd5b61076461053f565b6080821215610771575f80fd5b61077961053f565b915085601f860112610789575f80fd5b61079161053f565b8060408701888111156107a2575f80fd5b875b818110156107bc5780518452602093840193016107a4565b508185526107ca89826106d7565b60208601525050508181526107e16080860161072d565b602082015260a094909401519395939450505050565b604081833760408201604082015f5b600281101561083957813561081a81610568565b67ffffffffffffffff1683526020928301929190910190600101610806565b505050608081013561084a8161063c565b6108576080840182610451565b505050565b60c0810161086a82856107f7565b8260a08301529392505050565b601f82111561085757805f5260205f20601f840160051c8101602085101561089c5750805b601f840160051c820191505b818110156108bb575f81556001016108a8565b5050505050565b815167ffffffffffffffff8111156108dc576108dc61052b565b6108f0816108ea84546106a5565b84610877565b602080601f831160018114610923575f841561090c5750858301515b5f19600386901b1c1916600185901b17855561097a565b5f85815260208120601f198616915b8281101561095157888601518255948401946001909101908401610932565b508582101561096e57878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b83815260e0810161099660208301856107f7565b8260c083015294935050505056fea2646970667358221220fd953c6df4907248ae24c8c866354a80cd368fc849c73ffa4e66d136ed36391d64736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\0?W_5`\xE0\x1C\x80c1dA0\x14a\0CW\x80c\x8E\xAAj\xC0\x14a\0iW\x80c\x94\\\x94\x94\x14a\0\x8AW[_\x80\xFD[a\0Va\0Q6`\x04a\x04\x11V[a\0\x9FV[`@Q\x90\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\0|a\0w6`\x04a\x04:V[a\x01\x8FV[`@Qa\0`\x92\x91\x90a\x04qV[a\0\x9Da\0\x986`\x04a\x04\xF8V[a\x02\xB7V[\0[_a\x01Na\0\xB26\x85\x90\x03\x85\x01\x85a\x05\x80V[\x80Q\x80Q` \x91\x82\x01Q\x92\x82\x01Q\x80Q\x90\x83\x01Q`@\x80Q\x7FGlobal state:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81\x87\x01R`-\x81\x01\x94\x90\x94R`M\x84\x01\x95\x90\x95R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xC0\x92\x83\x1B\x81\x16`m\x85\x01R\x91\x1B\x16`u\x82\x01R\x82Q\x80\x82\x03`]\x01\x81R`}\x90\x91\x01\x90\x92R\x81Q\x91\x01 \x90V[\x82a\x01_`\xA0\x86\x01`\x80\x87\x01a\x06HV[`@Q` \x01a\x01q\x93\x92\x91\x90a\x06jV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P\x92\x91PPV[a\x01\x97a\x03\xA2V[_\x82\x81R` \x81\x90R`@\x81 \x80Ta\x01\xAF\x90a\x06\xA5V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x01\xDB\x90a\x06\xA5V[\x80\x15a\x02&W\x80`\x1F\x10a\x01\xFDWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x02&V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x02\tW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x80` \x01\x90Q\x81\x01\x90a\x02>\x91\x90a\x07=V[\x90\x92P\x90P_\x81\x90\x03a\x02\xB2W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x10`$\x82\x01R\x7FHash not yet set\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01[`@Q\x80\x91\x03\x90\xFD[\x91P\x91V[a\x02\xC1\x82\x82a\0\x9FV[\x83\x14a\x03)W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x0C`$\x82\x01R\x7FInvalid hash\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xA9V[\x81\x81`@Q` \x01a\x03<\x92\x91\x90a\x08\\V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x81R_\x85\x81R` \x81\x90R \x90a\x03a\x90\x82a\x08\xC2V[P\x7F\x14\xC0\xA6\xB8\xD8\x1FY\x15\xDA\xCF\xD8^A\xAEG\x984>\xC2\x9D\xE4\x08\xACL\x136\x0Cr8\xAE\n\xD9\x83\x83\x83`@Qa\x03\x95\x93\x92\x91\x90a\t\x82V[`@Q\x80\x91\x03\x90\xA1PPPV[`@Q\x80`@\x01`@R\x80a\x03\xB5a\x03\xC1V[\x81R` \x01_[\x90R\x90V[`@Q\x80`@\x01`@R\x80a\x03\xD4a\x03\xDDV[\x81R` \x01a\x03\xBC[`@Q\x80`@\x01`@R\x80`\x02\x90` \x82\x02\x806\x837P\x91\x92\x91PPV[_`\xA0\x82\x84\x03\x12\x15a\x04\x0BW_\x80\xFD[P\x91\x90PV[_\x80`\xC0\x83\x85\x03\x12\x15a\x04\"W_\x80\xFD[a\x04,\x84\x84a\x03\xFBV[\x94`\xA0\x93\x90\x93\x015\x93PPPV[_` \x82\x84\x03\x12\x15a\x04JW_\x80\xFD[P5\x91\x90PV[`\x03\x81\x10a\x04mWcNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[\x90RV[\x82Q\x80Q`\xC0\x83\x01\x91\x90\x83_[`\x02\x81\x10\x15a\x04\x9DW\x82Q\x82R` \x92\x83\x01\x92\x90\x91\x01\x90`\x01\x01a\x04~V[PPP` \x90\x81\x01Q\x90`@\x84\x01_[`\x02\x81\x10\x15a\x04\xD4W\x83Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82R\x92\x82\x01\x92\x90\x82\x01\x90`\x01\x01a\x04\xADV[PPPP` \x84\x01Qa\x04\xEA`\x80\x84\x01\x82a\x04QV[P\x82`\xA0\x83\x01R\x93\x92PPPV[_\x80_`\xE0\x84\x86\x03\x12\x15a\x05\nW_\x80\xFD[\x835\x92Pa\x05\x1B\x85` \x86\x01a\x03\xFBV[\x91P`\xC0\x84\x015\x90P\x92P\x92P\x92V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@\x80Q\x90\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x05bWa\x05ba\x05+V[`@R\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x05}W_\x80\xFD[PV[_`\x80\x82\x84\x03\x12\x15a\x05\x90W_\x80\xFD[a\x05\x98a\x05?V[\x83`\x1F\x84\x01\x12a\x05\xA6W_\x80\xFD[a\x05\xAEa\x05?V[\x80`@\x85\x01\x86\x81\x11\x15a\x05\xBFW_\x80\xFD[\x85[\x81\x81\x10\x15a\x05\xD9W\x805\x84R` \x93\x84\x01\x93\x01a\x05\xC1V[P\x81\x84R\x86`_\x87\x01\x12a\x05\xEBW_\x80\xFD[a\x05\xF3a\x05?V[\x92P\x82\x91P`\x80\x86\x01\x87\x81\x11\x15a\x06\x08W_\x80\xFD[\x80\x82\x10\x15a\x06-W\x815a\x06\x1B\x81a\x05hV[\x84R` \x93\x84\x01\x93\x91\x90\x91\x01\x90a\x06\x08V[PP` \x83\x01RP\x93\x92PPPV[`\x03\x81\x10a\x05}W_\x80\xFD[_` \x82\x84\x03\x12\x15a\x06XW_\x80\xFD[\x815a\x06c\x81a\x06<V[\x93\x92PPPV[\x83\x81R\x82` \x82\x01R_`\x03\x83\x10a\x06\x90WcNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[P`\xF8\x91\x90\x91\x1B`@\x82\x01R`A\x01\x92\x91PPV[`\x01\x81\x81\x1C\x90\x82\x16\x80a\x06\xB9W`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a\x04\x0BWcNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[_\x82`\x1F\x83\x01\x12a\x06\xE6W_\x80\xFD[a\x06\xEEa\x05?V[\x80`@\x84\x01\x85\x81\x11\x15a\x06\xFFW_\x80\xFD[\x84[\x81\x81\x10\x15a\x07\"W\x80Qa\x07\x14\x81a\x05hV[\x84R` \x93\x84\x01\x93\x01a\x07\x01V[P\x90\x95\x94PPPPPV[\x80Qa\x078\x81a\x06<V[\x91\x90PV[_\x80\x82\x84\x03`\xC0\x81\x12\x15a\x07OW_\x80\xFD[`\xA0\x81\x12\x15a\x07\\W_\x80\xFD[a\x07da\x05?V[`\x80\x82\x12\x15a\x07qW_\x80\xFD[a\x07ya\x05?V[\x91P\x85`\x1F\x86\x01\x12a\x07\x89W_\x80\xFD[a\x07\x91a\x05?V[\x80`@\x87\x01\x88\x81\x11\x15a\x07\xA2W_\x80\xFD[\x87[\x81\x81\x10\x15a\x07\xBCW\x80Q\x84R` \x93\x84\x01\x93\x01a\x07\xA4V[P\x81\x85Ra\x07\xCA\x89\x82a\x06\xD7V[` \x86\x01RPPP\x81\x81Ra\x07\xE1`\x80\x86\x01a\x07-V[` \x82\x01R`\xA0\x94\x90\x94\x01Q\x93\x95\x93\x94PPPPV[`@\x81\x837`@\x82\x01`@\x82\x01_[`\x02\x81\x10\x15a\x089W\x815a\x08\x1A\x81a\x05hV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x83R` \x92\x83\x01\x92\x91\x90\x91\x01\x90`\x01\x01a\x08\x06V[PPP`\x80\x81\x015a\x08J\x81a\x06<V[a\x08W`\x80\x84\x01\x82a\x04QV[PPPV[`\xC0\x81\x01a\x08j\x82\x85a\x07\xF7V[\x82`\xA0\x83\x01R\x93\x92PPPV[`\x1F\x82\x11\x15a\x08WW\x80_R` _ `\x1F\x84\x01`\x05\x1C\x81\x01` \x85\x10\x15a\x08\x9CWP\x80[`\x1F\x84\x01`\x05\x1C\x82\x01\x91P[\x81\x81\x10\x15a\x08\xBBW_\x81U`\x01\x01a\x08\xA8V[PPPPPV[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x08\xDCWa\x08\xDCa\x05+V[a\x08\xF0\x81a\x08\xEA\x84Ta\x06\xA5V[\x84a\x08wV[` \x80`\x1F\x83\x11`\x01\x81\x14a\t#W_\x84\x15a\t\x0CWP\x85\x83\x01Q[_\x19`\x03\x86\x90\x1B\x1C\x19\x16`\x01\x85\x90\x1B\x17\x85Ua\tzV[_\x85\x81R` \x81 `\x1F\x19\x86\x16\x91[\x82\x81\x10\x15a\tQW\x88\x86\x01Q\x82U\x94\x84\x01\x94`\x01\x90\x91\x01\x90\x84\x01a\t2V[P\x85\x82\x10\x15a\tnW\x87\x85\x01Q_\x19`\x03\x88\x90\x1B`\xF8\x16\x1C\x19\x16\x81U[PP`\x01\x84`\x01\x1B\x01\x85U[PPPPPPV[\x83\x81R`\xE0\x81\x01a\t\x96` \x83\x01\x85a\x07\xF7V[\x82`\xC0\x83\x01R\x94\x93PPPPV\xFE\xA2dipfsX\"\x12 \xFD\x95<m\xF4\x90rH\xAE$\xC8\xC8f5J\x80\xCD6\x8F\xC8I\xC7?\xFANf\xD16\xED69\x1DdsolcC\0\x08\x19\x003",
    );
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MachineStatus(u8);
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<MachineStatus> for u8 {
            #[inline]
            fn stv_to_tokens(
                &self,
            ) -> <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'_> {
                alloy_sol_types::private::SolTypeValue::<
                    alloy::sol_types::sol_data::Uint<8>,
                >::stv_to_tokens(self)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::tokenize(self)
                    .0
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(self, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encoded_size(self)
            }
        }
        #[automatically_derived]
        impl MachineStatus {
            /// The Solidity type name.
            pub const NAME: &'static str = stringify!(@ name);
            /// Convert from the underlying value type.
            #[inline]
            pub const fn from(value: u8) -> Self {
                Self(value)
            }
            /// Return the underlying value.
            #[inline]
            pub const fn into(self) -> u8 {
                self.0
            }
            /// Return the single encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode(&self.0)
            }
            /// Return the packed encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode_packed(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode_packed(&self.0)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for MachineStatus {
            type RustType = u8;
            type Token<'a> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = Self::NAME;
            const ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                Self::type_check(token).is_ok()
            }
            #[inline]
            fn type_check(token: &Self::Token<'_>) -> alloy_sol_types::Result<()> {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::type_check(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::detokenize(token)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for MachineStatus {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::topic_preimage_length(rust)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(rust, out)
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic(rust)
            }
        }
    };
    /**```solidity
struct ExecutionState { GlobalState globalState; MachineStatus machineStatus; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ExecutionState {
        #[allow(missing_docs)]
        pub globalState: <GlobalState as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub machineStatus: <MachineStatus as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (GlobalState, MachineStatus);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            <GlobalState as alloy::sol_types::SolType>::RustType,
            <MachineStatus as alloy::sol_types::SolType>::RustType,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ExecutionState> for UnderlyingRustTuple<'_> {
            fn from(value: ExecutionState) -> Self {
                (value.globalState, value.machineStatus)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ExecutionState {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    globalState: tuple.0,
                    machineStatus: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for ExecutionState {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for ExecutionState {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <GlobalState as alloy_sol_types::SolType>::tokenize(
                        &self.globalState,
                    ),
                    <MachineStatus as alloy_sol_types::SolType>::tokenize(
                        &self.machineStatus,
                    ),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ExecutionState {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for ExecutionState {
            const NAME: &'static str = "ExecutionState";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "ExecutionState(GlobalState globalState,uint8 machineStatus)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(1);
                components
                    .push(
                        <GlobalState as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <GlobalState as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <GlobalState as alloy_sol_types::SolType>::eip712_data_word(
                            &self.globalState,
                        )
                        .0,
                    <MachineStatus as alloy_sol_types::SolType>::eip712_data_word(
                            &self.machineStatus,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ExecutionState {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <GlobalState as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.globalState,
                    )
                    + <MachineStatus as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.machineStatus,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <GlobalState as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.globalState,
                    out,
                );
                <MachineStatus as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.machineStatus,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct GlobalState { bytes32[2] bytes32Vals; uint64[2] u64Vals; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct GlobalState {
        #[allow(missing_docs)]
        pub bytes32Vals: [alloy::sol_types::private::FixedBytes<32>; 2usize],
        #[allow(missing_docs)]
        pub u64Vals: [u64; 2usize],
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::FixedArray<
                alloy::sol_types::sol_data::FixedBytes<32>,
                2usize,
            >,
            alloy::sol_types::sol_data::FixedArray<
                alloy::sol_types::sol_data::Uint<64>,
                2usize,
            >,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            [alloy::sol_types::private::FixedBytes<32>; 2usize],
            [u64; 2usize],
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<GlobalState> for UnderlyingRustTuple<'_> {
            fn from(value: GlobalState) -> Self {
                (value.bytes32Vals, value.u64Vals)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for GlobalState {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    bytes32Vals: tuple.0,
                    u64Vals: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for GlobalState {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for GlobalState {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedArray<
                        alloy::sol_types::sol_data::FixedBytes<32>,
                        2usize,
                    > as alloy_sol_types::SolType>::tokenize(&self.bytes32Vals),
                    <alloy::sol_types::sol_data::FixedArray<
                        alloy::sol_types::sol_data::Uint<64>,
                        2usize,
                    > as alloy_sol_types::SolType>::tokenize(&self.u64Vals),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for GlobalState {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for GlobalState {
            const NAME: &'static str = "GlobalState";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "GlobalState(bytes32[2] bytes32Vals,uint64[2] u64Vals)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::FixedArray<
                        alloy::sol_types::sol_data::FixedBytes<32>,
                        2usize,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.bytes32Vals)
                        .0,
                    <alloy::sol_types::sol_data::FixedArray<
                        alloy::sol_types::sol_data::Uint<64>,
                        2usize,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.u64Vals)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for GlobalState {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::FixedArray<
                        alloy::sol_types::sol_data::FixedBytes<32>,
                        2usize,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.bytes32Vals,
                    )
                    + <alloy::sol_types::sol_data::FixedArray<
                        alloy::sol_types::sol_data::Uint<64>,
                        2usize,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.u64Vals,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::FixedArray<
                    alloy::sol_types::sol_data::FixedBytes<32>,
                    2usize,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.bytes32Vals,
                    out,
                );
                <alloy::sol_types::sol_data::FixedArray<
                    alloy::sol_types::sol_data::Uint<64>,
                    2usize,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.u64Vals,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**Event with signature `HashSet(bytes32,((bytes32[2],uint64[2]),uint8),uint256)` and selector `0x14c0a6b8d81f5915dacfd85e41ae4798343ec29de408ac4c13360c7238ae0ad9`.
```solidity
event HashSet(bytes32 h, ExecutionState executionState, uint256 inboxMaxCount);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct HashSet {
        #[allow(missing_docs)]
        pub h: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub executionState: <ExecutionState as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub inboxMaxCount: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for HashSet {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                ExecutionState,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "HashSet(bytes32,((bytes32[2],uint64[2]),uint8),uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                20u8,
                192u8,
                166u8,
                184u8,
                216u8,
                31u8,
                89u8,
                21u8,
                218u8,
                207u8,
                216u8,
                94u8,
                65u8,
                174u8,
                71u8,
                152u8,
                52u8,
                62u8,
                194u8,
                157u8,
                228u8,
                8u8,
                172u8,
                76u8,
                19u8,
                54u8,
                12u8,
                114u8,
                56u8,
                174u8,
                10u8,
                217u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    h: data.0,
                    executionState: data.1,
                    inboxMaxCount: data.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.h),
                    <ExecutionState as alloy_sol_types::SolType>::tokenize(
                        &self.executionState,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.inboxMaxCount),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for HashSet {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&HashSet> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &HashSet) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Function with signature `get(bytes32)` and selector `0x8eaa6ac0`.
```solidity
function get(bytes32 h) external view returns (ExecutionState memory executionState, uint256 inboxMaxCount);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCall {
        #[allow(missing_docs)]
        pub h: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`get(bytes32)`](getCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getReturn {
        #[allow(missing_docs)]
        pub executionState: <ExecutionState as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub inboxMaxCount: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCall> for UnderlyingRustTuple<'_> {
                fn from(value: getCall) -> Self {
                    (value.h,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { h: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                ExecutionState,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <ExecutionState as alloy::sol_types::SolType>::RustType,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getReturn) -> Self {
                    (value.executionState, value.inboxMaxCount)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        executionState: tuple.0,
                        inboxMaxCount: tuple.1,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getReturn;
            type ReturnTuple<'a> = (
                ExecutionState,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "get(bytes32)";
            const SELECTOR: [u8; 4] = [142u8, 170u8, 106u8, 192u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.h),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `set(bytes32,((bytes32[2],uint64[2]),uint8),uint256)` and selector `0x945c9494`.
```solidity
function set(bytes32 h, ExecutionState memory executionState, uint256 inboxMaxCount) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setCall {
        #[allow(missing_docs)]
        pub h: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub executionState: <ExecutionState as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub inboxMaxCount: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`set(bytes32,((bytes32[2],uint64[2]),uint8),uint256)`](setCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                ExecutionState,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                <ExecutionState as alloy::sol_types::SolType>::RustType,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setCall> for UnderlyingRustTuple<'_> {
                fn from(value: setCall) -> Self {
                    (value.h, value.executionState, value.inboxMaxCount)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        h: tuple.0,
                        executionState: tuple.1,
                        inboxMaxCount: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                ExecutionState,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "set(bytes32,((bytes32[2],uint64[2]),uint8),uint256)";
            const SELECTOR: [u8; 4] = [148u8, 92u8, 148u8, 148u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.h),
                    <ExecutionState as alloy_sol_types::SolType>::tokenize(
                        &self.executionState,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.inboxMaxCount),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `stateHash(((bytes32[2],uint64[2]),uint8),uint256)` and selector `0x31644130`.
```solidity
function stateHash(ExecutionState memory executionState, uint256 inboxMaxCount) external pure returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct stateHashCall {
        #[allow(missing_docs)]
        pub executionState: <ExecutionState as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub inboxMaxCount: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`stateHash(((bytes32[2],uint64[2]),uint8),uint256)`](stateHashCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct stateHashReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                ExecutionState,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <ExecutionState as alloy::sol_types::SolType>::RustType,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<stateHashCall> for UnderlyingRustTuple<'_> {
                fn from(value: stateHashCall) -> Self {
                    (value.executionState, value.inboxMaxCount)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for stateHashCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        executionState: tuple.0,
                        inboxMaxCount: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<stateHashReturn> for UnderlyingRustTuple<'_> {
                fn from(value: stateHashReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for stateHashReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for stateHashCall {
            type Parameters<'a> = (
                ExecutionState,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = stateHashReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "stateHash(((bytes32[2],uint64[2]),uint8),uint256)";
            const SELECTOR: [u8; 4] = [49u8, 100u8, 65u8, 48u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <ExecutionState as alloy_sol_types::SolType>::tokenize(
                        &self.executionState,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.inboxMaxCount),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`StateHashPreImageLookup`](self) function calls.
    pub enum StateHashPreImageLookupCalls {
        #[allow(missing_docs)]
        get(getCall),
        #[allow(missing_docs)]
        set(setCall),
        #[allow(missing_docs)]
        stateHash(stateHashCall),
    }
    #[automatically_derived]
    impl StateHashPreImageLookupCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [49u8, 100u8, 65u8, 48u8],
            [142u8, 170u8, 106u8, 192u8],
            [148u8, 92u8, 148u8, 148u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for StateHashPreImageLookupCalls {
        const NAME: &'static str = "StateHashPreImageLookupCalls";
        const MIN_DATA_LENGTH: usize = 32usize;
        const COUNT: usize = 3usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::get(_) => <getCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::set(_) => <setCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::stateHash(_) => {
                    <stateHashCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<StateHashPreImageLookupCalls>] = &[
                {
                    fn stateHash(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StateHashPreImageLookupCalls> {
                        <stateHashCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(StateHashPreImageLookupCalls::stateHash)
                    }
                    stateHash
                },
                {
                    fn get(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StateHashPreImageLookupCalls> {
                        <getCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(StateHashPreImageLookupCalls::get)
                    }
                    get
                },
                {
                    fn set(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StateHashPreImageLookupCalls> {
                        <setCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(StateHashPreImageLookupCalls::set)
                    }
                    set
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::get(inner) => {
                    <getCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::set(inner) => {
                    <setCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::stateHash(inner) => {
                    <stateHashCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::get(inner) => {
                    <getCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::set(inner) => {
                    <setCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::stateHash(inner) => {
                    <stateHashCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`StateHashPreImageLookup`](self) events.
    pub enum StateHashPreImageLookupEvents {
        #[allow(missing_docs)]
        HashSet(HashSet),
    }
    #[automatically_derived]
    impl StateHashPreImageLookupEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                20u8,
                192u8,
                166u8,
                184u8,
                216u8,
                31u8,
                89u8,
                21u8,
                218u8,
                207u8,
                216u8,
                94u8,
                65u8,
                174u8,
                71u8,
                152u8,
                52u8,
                62u8,
                194u8,
                157u8,
                228u8,
                8u8,
                172u8,
                76u8,
                19u8,
                54u8,
                12u8,
                114u8,
                56u8,
                174u8,
                10u8,
                217u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for StateHashPreImageLookupEvents {
        const NAME: &'static str = "StateHashPreImageLookupEvents";
        const COUNT: usize = 1usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<HashSet as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <HashSet as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::HashSet)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for StateHashPreImageLookupEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::HashSet(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::HashSet(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`StateHashPreImageLookup`](self) contract instance.

See the [wrapper's documentation](`StateHashPreImageLookupInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> StateHashPreImageLookupInstance<T, P, N> {
        StateHashPreImageLookupInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<StateHashPreImageLookupInstance<T, P, N>>,
    > {
        StateHashPreImageLookupInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        StateHashPreImageLookupInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`StateHashPreImageLookup`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`StateHashPreImageLookup`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct StateHashPreImageLookupInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for StateHashPreImageLookupInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("StateHashPreImageLookupInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > StateHashPreImageLookupInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`StateHashPreImageLookup`](self) contract instance.

See the [wrapper's documentation](`StateHashPreImageLookupInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<StateHashPreImageLookupInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> StateHashPreImageLookupInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> StateHashPreImageLookupInstance<T, P, N> {
            StateHashPreImageLookupInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > StateHashPreImageLookupInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`get`] function.
        pub fn get(
            &self,
            h: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, getCall, N> {
            self.call_builder(&getCall { h })
        }
        ///Creates a new call builder for the [`set`] function.
        pub fn set(
            &self,
            h: alloy::sol_types::private::FixedBytes<32>,
            executionState: <ExecutionState as alloy::sol_types::SolType>::RustType,
            inboxMaxCount: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, setCall, N> {
            self.call_builder(
                &setCall {
                    h,
                    executionState,
                    inboxMaxCount,
                },
            )
        }
        ///Creates a new call builder for the [`stateHash`] function.
        pub fn stateHash(
            &self,
            executionState: <ExecutionState as alloy::sol_types::SolType>::RustType,
            inboxMaxCount: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, stateHashCall, N> {
            self.call_builder(
                &stateHashCall {
                    executionState,
                    inboxMaxCount,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > StateHashPreImageLookupInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`HashSet`] event.
        pub fn HashSet_filter(&self) -> alloy_contract::Event<T, &P, HashSet, N> {
            self.event_filter::<HashSet>()
        }
    }
}
