/**

Generated by the following Solidity interface...
```solidity
interface Benchmarks {
    function fillBlockAdd() external payable;
    function fillBlockHash() external payable;
    function fillBlockMulMod() external payable;
    function fillBlockQuickStep() external payable;
    function fillBlockRecover() external payable;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "fillBlockAdd",
    "inputs": [],
    "outputs": [],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "fillBlockHash",
    "inputs": [],
    "outputs": [],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "fillBlockMulMod",
    "inputs": [],
    "outputs": [],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "fillBlockQuickStep",
    "inputs": [],
    "outputs": [],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "fillBlockRecover",
    "inputs": [],
    "outputs": [],
    "stateMutability": "payable"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod Benchmarks {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052348015600e575f5ffd5b506103198061001c5f395ff3fe608060405260043610610058575f3560e01c80636488e930116100415780636488e9301461006e578063ea01a66f14610076578063fb721c181461007e575f5ffd5b80630b39d8e51461005c578063142ddcf914610066575b5f5ffd5b610064610086565b005b6100646101f9565b610064610222565b61006461028f565b610064610298565b7feddecf107b5740cef7f5a01e3ea7e287665c4e75a8eb6afae2fda2e3d436778673361594f5429d23ece0a88e4fbe529e1c49d524d8601b7fc6178c2de1078cd36c3bd302cde755340d7f17fcb3fcc0b9c333ba03b217029f7f5fdbcefe2675e96219cdae57a7894280bf80fd40d44ce146a35e169ea6a78fd35b604080515f81526020810180835287905260ff851691810191909152606081018390526080810182905273ffffffffffffffffffffffffffffffffffffffff85169060019060a0016020604051602081039080840390855afa158015610169573d5f5f3e3d5ffd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff16146101f4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f57524f4e475f415242494e415554000000000000000000000000000000000000604482015260640160405180910390fd5b610101565b5f5b7feddecf107b5740cef7f5a01e3ea7e287665c4e75a8eb6afae2fda2e3d4367786016101fb565b7feddecf107b5740cef7f5a01e3ea7e287665c4e75a8eb6afae2fda2e3d43677865b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f7fc6178c2de1078cd36c3bd302cde755340d7f17fcb3fcc0b9c333ba03b217029f82099050610244565b5f5b5034610291565b7feddecf107b5740cef7f5a01e3ea7e287665c4e75a8eb6afae2fda2e3d43677865b6040805160208101839052016040516020818303038152906040528051906020012090506102ba56fea2646970667358221220d71501ce925f8adf454bed8deb51c31e0701d094c12505d231470add1a0e039264736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15`\x0EW__\xFD[Pa\x03\x19\x80a\0\x1C_9_\xF3\xFE`\x80`@R`\x046\x10a\0XW_5`\xE0\x1C\x80cd\x88\xE90\x11a\0AW\x80cd\x88\xE90\x14a\0nW\x80c\xEA\x01\xA6o\x14a\0vW\x80c\xFBr\x1C\x18\x14a\0~W__\xFD[\x80c\x0B9\xD8\xE5\x14a\0\\W\x80c\x14-\xDC\xF9\x14a\0fW[__\xFD[a\0da\0\x86V[\0[a\0da\x01\xF9V[a\0da\x02\"V[a\0da\x02\x8FV[a\0da\x02\x98V[\x7F\xED\xDE\xCF\x10{W@\xCE\xF7\xF5\xA0\x1E>\xA7\xE2\x87f\\Nu\xA8\xEBj\xFA\xE2\xFD\xA2\xE3\xD46w\x86s6\x15\x94\xF5B\x9D#\xEC\xE0\xA8\x8EO\xBER\x9E\x1CI\xD5$\xD8`\x1B\x7F\xC6\x17\x8C-\xE1\x07\x8C\xD3l;\xD3\x02\xCD\xE7U4\r\x7F\x17\xFC\xB3\xFC\xC0\xB9\xC33\xBA\x03\xB2\x17\x02\x9F\x7F_\xDB\xCE\xFE&u\xE9b\x19\xCD\xAEW\xA7\x89B\x80\xBF\x80\xFD@\xD4L\xE1F\xA3^\x16\x9E\xA6\xA7\x8F\xD3[`@\x80Q_\x81R` \x81\x01\x80\x83R\x87\x90R`\xFF\x85\x16\x91\x81\x01\x91\x90\x91R``\x81\x01\x83\x90R`\x80\x81\x01\x82\x90Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x85\x16\x90`\x01\x90`\xA0\x01` `@Q` \x81\x03\x90\x80\x84\x03\x90\x85Z\xFA\x15\x80\x15a\x01iW=__>=_\xFD[PPP` `@Q\x03Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x01\xF4W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x0E`$\x82\x01R\x7FWRONG_ARBINAUT\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01`@Q\x80\x91\x03\x90\xFD[a\x01\x01V[_[\x7F\xED\xDE\xCF\x10{W@\xCE\xF7\xF5\xA0\x1E>\xA7\xE2\x87f\\Nu\xA8\xEBj\xFA\xE2\xFD\xA2\xE3\xD46w\x86\x01a\x01\xFBV[\x7F\xED\xDE\xCF\x10{W@\xCE\xF7\xF5\xA0\x1E>\xA7\xE2\x87f\\Nu\xA8\xEBj\xFA\xE2\xFD\xA2\xE3\xD46w\x86[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFE\xFF\xFF\xFC/\x7F\xC6\x17\x8C-\xE1\x07\x8C\xD3l;\xD3\x02\xCD\xE7U4\r\x7F\x17\xFC\xB3\xFC\xC0\xB9\xC33\xBA\x03\xB2\x17\x02\x9F\x82\t\x90Pa\x02DV[_[P4a\x02\x91V[\x7F\xED\xDE\xCF\x10{W@\xCE\xF7\xF5\xA0\x1E>\xA7\xE2\x87f\\Nu\xA8\xEBj\xFA\xE2\xFD\xA2\xE3\xD46w\x86[`@\x80Q` \x81\x01\x83\x90R\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90Pa\x02\xBAV\xFE\xA2dipfsX\"\x12 \xD7\x15\x01\xCE\x92_\x8A\xDFEK\xED\x8D\xEBQ\xC3\x1E\x07\x01\xD0\x94\xC1%\x05\xD21G\n\xDD\x1A\x0E\x03\x92dsolcC\0\x08\x1C\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405260043610610058575f3560e01c80636488e930116100415780636488e9301461006e578063ea01a66f14610076578063fb721c181461007e575f5ffd5b80630b39d8e51461005c578063142ddcf914610066575b5f5ffd5b610064610086565b005b6100646101f9565b610064610222565b61006461028f565b610064610298565b7feddecf107b5740cef7f5a01e3ea7e287665c4e75a8eb6afae2fda2e3d436778673361594f5429d23ece0a88e4fbe529e1c49d524d8601b7fc6178c2de1078cd36c3bd302cde755340d7f17fcb3fcc0b9c333ba03b217029f7f5fdbcefe2675e96219cdae57a7894280bf80fd40d44ce146a35e169ea6a78fd35b604080515f81526020810180835287905260ff851691810191909152606081018390526080810182905273ffffffffffffffffffffffffffffffffffffffff85169060019060a0016020604051602081039080840390855afa158015610169573d5f5f3e3d5ffd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff16146101f4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f57524f4e475f415242494e415554000000000000000000000000000000000000604482015260640160405180910390fd5b610101565b5f5b7feddecf107b5740cef7f5a01e3ea7e287665c4e75a8eb6afae2fda2e3d4367786016101fb565b7feddecf107b5740cef7f5a01e3ea7e287665c4e75a8eb6afae2fda2e3d43677865b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f7fc6178c2de1078cd36c3bd302cde755340d7f17fcb3fcc0b9c333ba03b217029f82099050610244565b5f5b5034610291565b7feddecf107b5740cef7f5a01e3ea7e287665c4e75a8eb6afae2fda2e3d43677865b6040805160208101839052016040516020818303038152906040528051906020012090506102ba56fea2646970667358221220d71501ce925f8adf454bed8deb51c31e0701d094c12505d231470add1a0e039264736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10a\0XW_5`\xE0\x1C\x80cd\x88\xE90\x11a\0AW\x80cd\x88\xE90\x14a\0nW\x80c\xEA\x01\xA6o\x14a\0vW\x80c\xFBr\x1C\x18\x14a\0~W__\xFD[\x80c\x0B9\xD8\xE5\x14a\0\\W\x80c\x14-\xDC\xF9\x14a\0fW[__\xFD[a\0da\0\x86V[\0[a\0da\x01\xF9V[a\0da\x02\"V[a\0da\x02\x8FV[a\0da\x02\x98V[\x7F\xED\xDE\xCF\x10{W@\xCE\xF7\xF5\xA0\x1E>\xA7\xE2\x87f\\Nu\xA8\xEBj\xFA\xE2\xFD\xA2\xE3\xD46w\x86s6\x15\x94\xF5B\x9D#\xEC\xE0\xA8\x8EO\xBER\x9E\x1CI\xD5$\xD8`\x1B\x7F\xC6\x17\x8C-\xE1\x07\x8C\xD3l;\xD3\x02\xCD\xE7U4\r\x7F\x17\xFC\xB3\xFC\xC0\xB9\xC33\xBA\x03\xB2\x17\x02\x9F\x7F_\xDB\xCE\xFE&u\xE9b\x19\xCD\xAEW\xA7\x89B\x80\xBF\x80\xFD@\xD4L\xE1F\xA3^\x16\x9E\xA6\xA7\x8F\xD3[`@\x80Q_\x81R` \x81\x01\x80\x83R\x87\x90R`\xFF\x85\x16\x91\x81\x01\x91\x90\x91R``\x81\x01\x83\x90R`\x80\x81\x01\x82\x90Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x85\x16\x90`\x01\x90`\xA0\x01` `@Q` \x81\x03\x90\x80\x84\x03\x90\x85Z\xFA\x15\x80\x15a\x01iW=__>=_\xFD[PPP` `@Q\x03Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x01\xF4W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x0E`$\x82\x01R\x7FWRONG_ARBINAUT\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01`@Q\x80\x91\x03\x90\xFD[a\x01\x01V[_[\x7F\xED\xDE\xCF\x10{W@\xCE\xF7\xF5\xA0\x1E>\xA7\xE2\x87f\\Nu\xA8\xEBj\xFA\xE2\xFD\xA2\xE3\xD46w\x86\x01a\x01\xFBV[\x7F\xED\xDE\xCF\x10{W@\xCE\xF7\xF5\xA0\x1E>\xA7\xE2\x87f\\Nu\xA8\xEBj\xFA\xE2\xFD\xA2\xE3\xD46w\x86[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFE\xFF\xFF\xFC/\x7F\xC6\x17\x8C-\xE1\x07\x8C\xD3l;\xD3\x02\xCD\xE7U4\r\x7F\x17\xFC\xB3\xFC\xC0\xB9\xC33\xBA\x03\xB2\x17\x02\x9F\x82\t\x90Pa\x02DV[_[P4a\x02\x91V[\x7F\xED\xDE\xCF\x10{W@\xCE\xF7\xF5\xA0\x1E>\xA7\xE2\x87f\\Nu\xA8\xEBj\xFA\xE2\xFD\xA2\xE3\xD46w\x86[`@\x80Q` \x81\x01\x83\x90R\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90Pa\x02\xBAV\xFE\xA2dipfsX\"\x12 \xD7\x15\x01\xCE\x92_\x8A\xDFEK\xED\x8D\xEBQ\xC3\x1E\x07\x01\xD0\x94\xC1%\x05\xD21G\n\xDD\x1A\x0E\x03\x92dsolcC\0\x08\x1C\x003",
    );
    /**Function with signature `fillBlockAdd()` and selector `0x142ddcf9`.
```solidity
function fillBlockAdd() external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct fillBlockAddCall {}
    ///Container type for the return parameters of the [`fillBlockAdd()`](fillBlockAddCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct fillBlockAddReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<fillBlockAddCall> for UnderlyingRustTuple<'_> {
                fn from(value: fillBlockAddCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for fillBlockAddCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<fillBlockAddReturn> for UnderlyingRustTuple<'_> {
                fn from(value: fillBlockAddReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for fillBlockAddReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for fillBlockAddCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = fillBlockAddReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "fillBlockAdd()";
            const SELECTOR: [u8; 4] = [20u8, 45u8, 220u8, 249u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `fillBlockHash()` and selector `0xfb721c18`.
```solidity
function fillBlockHash() external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct fillBlockHashCall {}
    ///Container type for the return parameters of the [`fillBlockHash()`](fillBlockHashCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct fillBlockHashReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<fillBlockHashCall> for UnderlyingRustTuple<'_> {
                fn from(value: fillBlockHashCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for fillBlockHashCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<fillBlockHashReturn> for UnderlyingRustTuple<'_> {
                fn from(value: fillBlockHashReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for fillBlockHashReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for fillBlockHashCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = fillBlockHashReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "fillBlockHash()";
            const SELECTOR: [u8; 4] = [251u8, 114u8, 28u8, 24u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `fillBlockMulMod()` and selector `0x6488e930`.
```solidity
function fillBlockMulMod() external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct fillBlockMulModCall {}
    ///Container type for the return parameters of the [`fillBlockMulMod()`](fillBlockMulModCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct fillBlockMulModReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<fillBlockMulModCall> for UnderlyingRustTuple<'_> {
                fn from(value: fillBlockMulModCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for fillBlockMulModCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<fillBlockMulModReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: fillBlockMulModReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for fillBlockMulModReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for fillBlockMulModCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = fillBlockMulModReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "fillBlockMulMod()";
            const SELECTOR: [u8; 4] = [100u8, 136u8, 233u8, 48u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `fillBlockQuickStep()` and selector `0xea01a66f`.
```solidity
function fillBlockQuickStep() external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct fillBlockQuickStepCall {}
    ///Container type for the return parameters of the [`fillBlockQuickStep()`](fillBlockQuickStepCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct fillBlockQuickStepReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<fillBlockQuickStepCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: fillBlockQuickStepCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for fillBlockQuickStepCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<fillBlockQuickStepReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: fillBlockQuickStepReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for fillBlockQuickStepReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for fillBlockQuickStepCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = fillBlockQuickStepReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "fillBlockQuickStep()";
            const SELECTOR: [u8; 4] = [234u8, 1u8, 166u8, 111u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `fillBlockRecover()` and selector `0x0b39d8e5`.
```solidity
function fillBlockRecover() external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct fillBlockRecoverCall {}
    ///Container type for the return parameters of the [`fillBlockRecover()`](fillBlockRecoverCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct fillBlockRecoverReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<fillBlockRecoverCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: fillBlockRecoverCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for fillBlockRecoverCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<fillBlockRecoverReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: fillBlockRecoverReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for fillBlockRecoverReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for fillBlockRecoverCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = fillBlockRecoverReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "fillBlockRecover()";
            const SELECTOR: [u8; 4] = [11u8, 57u8, 216u8, 229u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`Benchmarks`](self) function calls.
    pub enum BenchmarksCalls {
        #[allow(missing_docs)]
        fillBlockAdd(fillBlockAddCall),
        #[allow(missing_docs)]
        fillBlockHash(fillBlockHashCall),
        #[allow(missing_docs)]
        fillBlockMulMod(fillBlockMulModCall),
        #[allow(missing_docs)]
        fillBlockQuickStep(fillBlockQuickStepCall),
        #[allow(missing_docs)]
        fillBlockRecover(fillBlockRecoverCall),
    }
    #[automatically_derived]
    impl BenchmarksCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [11u8, 57u8, 216u8, 229u8],
            [20u8, 45u8, 220u8, 249u8],
            [100u8, 136u8, 233u8, 48u8],
            [234u8, 1u8, 166u8, 111u8],
            [251u8, 114u8, 28u8, 24u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for BenchmarksCalls {
        const NAME: &'static str = "BenchmarksCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 5usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::fillBlockAdd(_) => {
                    <fillBlockAddCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::fillBlockHash(_) => {
                    <fillBlockHashCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::fillBlockMulMod(_) => {
                    <fillBlockMulModCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::fillBlockQuickStep(_) => {
                    <fillBlockQuickStepCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::fillBlockRecover(_) => {
                    <fillBlockRecoverCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<BenchmarksCalls>] = &[
                {
                    fn fillBlockRecover(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<BenchmarksCalls> {
                        <fillBlockRecoverCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(BenchmarksCalls::fillBlockRecover)
                    }
                    fillBlockRecover
                },
                {
                    fn fillBlockAdd(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<BenchmarksCalls> {
                        <fillBlockAddCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(BenchmarksCalls::fillBlockAdd)
                    }
                    fillBlockAdd
                },
                {
                    fn fillBlockMulMod(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<BenchmarksCalls> {
                        <fillBlockMulModCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(BenchmarksCalls::fillBlockMulMod)
                    }
                    fillBlockMulMod
                },
                {
                    fn fillBlockQuickStep(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<BenchmarksCalls> {
                        <fillBlockQuickStepCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(BenchmarksCalls::fillBlockQuickStep)
                    }
                    fillBlockQuickStep
                },
                {
                    fn fillBlockHash(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<BenchmarksCalls> {
                        <fillBlockHashCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(BenchmarksCalls::fillBlockHash)
                    }
                    fillBlockHash
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::fillBlockAdd(inner) => {
                    <fillBlockAddCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::fillBlockHash(inner) => {
                    <fillBlockHashCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::fillBlockMulMod(inner) => {
                    <fillBlockMulModCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::fillBlockQuickStep(inner) => {
                    <fillBlockQuickStepCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::fillBlockRecover(inner) => {
                    <fillBlockRecoverCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::fillBlockAdd(inner) => {
                    <fillBlockAddCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::fillBlockHash(inner) => {
                    <fillBlockHashCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::fillBlockMulMod(inner) => {
                    <fillBlockMulModCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::fillBlockQuickStep(inner) => {
                    <fillBlockQuickStepCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::fillBlockRecover(inner) => {
                    <fillBlockRecoverCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`Benchmarks`](self) contract instance.

See the [wrapper's documentation](`BenchmarksInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> BenchmarksInstance<T, P, N> {
        BenchmarksInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<BenchmarksInstance<T, P, N>>,
    > {
        BenchmarksInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        BenchmarksInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`Benchmarks`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`Benchmarks`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct BenchmarksInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for BenchmarksInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("BenchmarksInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > BenchmarksInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`Benchmarks`](self) contract instance.

See the [wrapper's documentation](`BenchmarksInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<BenchmarksInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> BenchmarksInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> BenchmarksInstance<T, P, N> {
            BenchmarksInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > BenchmarksInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`fillBlockAdd`] function.
        pub fn fillBlockAdd(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, fillBlockAddCall, N> {
            self.call_builder(&fillBlockAddCall {})
        }
        ///Creates a new call builder for the [`fillBlockHash`] function.
        pub fn fillBlockHash(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, fillBlockHashCall, N> {
            self.call_builder(&fillBlockHashCall {})
        }
        ///Creates a new call builder for the [`fillBlockMulMod`] function.
        pub fn fillBlockMulMod(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, fillBlockMulModCall, N> {
            self.call_builder(&fillBlockMulModCall {})
        }
        ///Creates a new call builder for the [`fillBlockQuickStep`] function.
        pub fn fillBlockQuickStep(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, fillBlockQuickStepCall, N> {
            self.call_builder(&fillBlockQuickStepCall {})
        }
        ///Creates a new call builder for the [`fillBlockRecover`] function.
        pub fn fillBlockRecover(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, fillBlockRecoverCall, N> {
            self.call_builder(&fillBlockRecoverCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > BenchmarksInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
