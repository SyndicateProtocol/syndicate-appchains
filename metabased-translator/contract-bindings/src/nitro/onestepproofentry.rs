/**

Generated by the following Solidity interface...
```solidity
interface OneStepProofEntry {
    type MachineStatus is uint8;
    struct ExecutionContext {
        uint256 maxInboxMessagesRead;
        address bridge;
        bytes32 initialWasmModuleRoot;
    }
    struct ExecutionState {
        GlobalState globalState;
        MachineStatus machineStatus;
    }
    struct GlobalState {
        bytes32[2] bytes32Vals;
        uint64[2] u64Vals;
    }

    constructor(address prover0_, address proverMem_, address proverMath_, address proverHostIo_);

    function getMachineHash(ExecutionState memory execState) external pure returns (bytes32);
    function getStartMachineHash(bytes32 globalStateHash, bytes32 wasmModuleRoot) external pure returns (bytes32);
    function proveOneStep(ExecutionContext memory execCtx, uint256 machineStep, bytes32 beforeHash, bytes memory proof) external view returns (bytes32 afterHash);
    function prover0() external view returns (address);
    function proverHostIo() external view returns (address);
    function proverMath() external view returns (address);
    function proverMem() external view returns (address);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "prover0_",
        "type": "address",
        "internalType": "contract IOneStepProver"
      },
      {
        "name": "proverMem_",
        "type": "address",
        "internalType": "contract IOneStepProver"
      },
      {
        "name": "proverMath_",
        "type": "address",
        "internalType": "contract IOneStepProver"
      },
      {
        "name": "proverHostIo_",
        "type": "address",
        "internalType": "contract IOneStepProver"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "getMachineHash",
    "inputs": [
      {
        "name": "execState",
        "type": "tuple",
        "internalType": "struct ExecutionState",
        "components": [
          {
            "name": "globalState",
            "type": "tuple",
            "internalType": "struct GlobalState",
            "components": [
              {
                "name": "bytes32Vals",
                "type": "bytes32[2]",
                "internalType": "bytes32[2]"
              },
              {
                "name": "u64Vals",
                "type": "uint64[2]",
                "internalType": "uint64[2]"
              }
            ]
          },
          {
            "name": "machineStatus",
            "type": "uint8",
            "internalType": "enum MachineStatus"
          }
        ]
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "getStartMachineHash",
    "inputs": [
      {
        "name": "globalStateHash",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "wasmModuleRoot",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "proveOneStep",
    "inputs": [
      {
        "name": "execCtx",
        "type": "tuple",
        "internalType": "struct ExecutionContext",
        "components": [
          {
            "name": "maxInboxMessagesRead",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "bridge",
            "type": "address",
            "internalType": "contract IBridge"
          },
          {
            "name": "initialWasmModuleRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          }
        ]
      },
      {
        "name": "machineStep",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "beforeHash",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "proof",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "afterHash",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "prover0",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract IOneStepProver"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "proverHostIo",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract IOneStepProver"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "proverMath",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract IOneStepProver"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "proverMem",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract IOneStepProver"
      }
    ],
    "stateMutability": "view"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod OneStepProofEntry {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052348015600e575f5ffd5b50604051613331380380613331833981016040819052602b916096565b5f80546001600160a01b039586166001600160a01b031991821617909155600180549486169482169490941790935560028054928516928416929092179091556003805491909316911617905560de565b80516001600160a01b03811681146091575f5ffd5b919050565b5f5f5f5f6080858703121560a8575f5ffd5b60af85607c565b935060bb60208601607c565b925060c760408601607c565b915060d360608601607c565b905092959194509250565b613246806100eb5f395ff3fe608060405234801561000f575f5ffd5b506004361061007a575f3560e01c80635f52fd7c116100585780635f52fd7c146100e157806366e5d9c3146100f4578063b5112fd214610107578063c39619c41461011a575f5ffd5b806304997be41461007e5780631f128bc0146100a457806330a5509f146100cf575b5f5ffd5b61009161008c366004612596565b61012d565b6040519081526020015b60405180910390f35b6001546100b7906001600160a01b031681565b6040516001600160a01b03909116815260200161009b565b5f546100b7906001600160a01b031681565b6003546100b7906001600160a01b031681565b6002546100b7906001600160a01b031681565b6100916101153660046125b6565b6102a1565b61009161012836600461264b565b610a12565b604080516003808252608082019092525f91829190816020015b61014f6123d2565b81526020019060019003908161014757905050905061016c610b64565b815f8151811061017e5761017e612678565b60200260200101819052506101925f610b84565b816001815181106101a5576101a5612678565b60200260200101819052506101b95f610b84565b816002815181106101cc576101cc612678565b60209081029190910181019190915260408051808301825283815281518083019092528082525f928201929092526102026123eb565b604080518082018252606081525f602080830182905283518085019094528301525f1982529060408051610180810182525f80825260208201879052918101839052606081018590526080810184905260a0810183905260c081018b905260e0810182905261010081018290526101208101919091525f19610140820152610160810189905261029181610baa565b9750505050505050505b92915050565b5f6102aa612404565b6102b26124bc565b604080516020810190915260608152604080518082019091525f80825260208201525f6102e0888883610df4565b9095509050886102ef86610baa565b146103415760405162461bcd60e51b815260206004820152601360248201527f4d414348494e455f4245464f52455f484153480000000000000000000000000060448201526064015b60405180910390fd5b5f855160028111156103555761035561268c565b1461043c57610362612526565b61036d89898461103f565b60c088015190935090915061038182611119565b146103ce5760405162461bcd60e51b815260206004820152601060248201527f4241445f474c4f42414c5f5354415445000000000000000000000000000000006044820152606401610338565b6001865160028111156103e3576103e361268c565b1480156103ee57508a155b801561040f57508b3561040382602001515190565b67ffffffffffffffff16105b15610433576104268660c001518d6040013561012d565b9650505050505050610a09565b61042686610baa565b6508000000000061044e8b60016126b4565b0361046c576002855261046085610baa565b95505050505050610a09565b6104778888836111a8565b9094509050610487888883611269565b80925081945050508461016001516104b48660e0015163ffffffff1686866113369092919063ffffffff16565b146105015760405162461bcd60e51b815260206004820152600c60248201527f4d4f44554c45535f524f4f5400000000000000000000000000000000000000006044820152606401610338565b60606105196040518060200160405280606081525090565b6040805160208101909152606081526105338b8b8661138a565b945092506105428b8b86611269565b945091506105518b8b86611269565b80955081925050505f61058660408a610120015161056f91906126db565b63ffffffff16858561147b9092919063ffffffff16565b90505f6105a98a610100015163ffffffff1683856114c59092919063ffffffff16565b9050886060015181146105fe5760405162461bcd60e51b815260206004820152601260248201527f4241445f46554e4354494f4e535f524f4f5400000000000000000000000000006044820152606401610338565b8460408b61012001516106119190612702565b63ffffffff168151811061062757610627612678565b60200260200101519650505050505087878290809261064893929190612729565b97509750505f8460e0015163ffffffff1690506001856101200181815161066f9190612750565b63ffffffff1690525081515f602861ffff8316108015906106955750603561ffff831611155b806106b55750603661ffff8316108015906106b55750603e61ffff831611155b806106c4575061ffff8216603f145b806106d3575061ffff82166040145b156106ea57506001546001600160a01b0316610900565b61ffff821660451480610701575061ffff82166050145b8061072f5750604661ffff83161080159061072f57506107236009604661276c565b61ffff168261ffff1611155b8061075d5750606761ffff83161080159061075d57506107516002606761276c565b61ffff168261ffff1611155b8061077d5750606a61ffff83161080159061077d5750607861ffff831611155b806107ab5750605161ffff8316108015906107ab575061079f6009605161276c565b61ffff168261ffff1611155b806107d95750607961ffff8316108015906107d957506107cd6002607961276c565b61ffff168261ffff1611155b806107f95750607c61ffff8316108015906107f95750608a61ffff831611155b80610808575061ffff821660a7145b80610825575061ffff821660ac1480610825575061ffff821660ad145b80610845575060c061ffff831610801590610845575060c461ffff831611155b80610865575060bc61ffff831610801590610865575060bf61ffff831611155b1561087c57506002546001600160a01b0316610900565b61801061ffff831610801590610898575061801361ffff831611155b806108ba575061802061ffff8316108015906108ba575061802461ffff831611155b806108dc575061803061ffff8316108015906108dc575061803261ffff831611155b156108f357506003546001600160a01b0316610900565b505f546001600160a01b03165b806001600160a01b031663a92cb5018e8989888f8f6040518763ffffffff1660e01b8152600401610936969594939291906128bf565b5f60405180830381865afa158015610950573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526109779190810190612f11565b90975095505f61ffff83166180231480610996575061ffff8316618024145b15905080156109b1576109aa868589611336565b6101608901525b6002885160028111156109c6576109c661268c565b1480156109d957506101408801515f1914155b156109f5576109e788611555565b6109f0886115d7565b505f88525b6109fe88610baa565b985050505050505050505b95945050505050565b5f6001610a2560a0840160808501613077565b6002811115610a3657610a3661268c565b03610aa457610a52610a4d36849003840184613092565b611119565b6040517f4d616368696e652066696e69736865643a000000000000000000000000000000602082015260318101919091526051015b604051602081830303815290604052805190602001209050919050565b6002610ab660a0840160808501613077565b6002811115610ac757610ac761268c565b03610b1757610ade610a4d36849003840184613092565b6040517f4d616368696e65206572726f7265643a0000000000000000000000000000000060208201526030810191909152605001610a87565b60405162461bcd60e51b815260206004820152601260248201527f4241445f4d414348494e455f53544154555300000000000000000000000000006044820152606401610338565b919050565b610b6c6123d2565b5060408051808201909152600481525f602082015290565b610b8c6123d2565b50604080518082019091525f815263ffffffff909116602082015290565b5f8082516002811115610bbf57610bbf61268c565b03610cfc575f610beb610bd58460200151611603565b610140850151604086015191905f19141561168f565b90505f610c14610bfe85608001516117f8565b61014086015160a087015191905f19141561168f565b90505f82610c258660600151611603565b60c087015160e0808901516101008a01516101208b01516101408c01516101608d01516040517f4d616368696e652072756e6e696e673a00000000000000000000000000000000602082015260308101999099526050890197909752607088018a905260908801959095527fffffffff0000000000000000000000000000000000000000000000000000000092841b831660b088015290831b821660b487015290911b1660b884015260bc83015260dc82015260fc0160408051601f19818403018152919052805160209091012095945050505050565b600182516002811115610d1157610d1161268c565b03610d545760c08201516040517f4d616368696e652066696e69736865643a00000000000000000000000000000060208201526031810191909152605101610a87565b600282516002811115610d6957610d6961268c565b03610dac5760c08201516040517f4d616368696e65206572726f7265643a0000000000000000000000000000000060208201526030810191909152605001610a87565b60405162461bcd60e51b815260206004820152600f60248201527f4241445f4d4143485f53544154555300000000000000000000000000000000006044820152606401610338565b610dfc612404565b815f80610e0a878785611891565b9350905060ff81165f03610e20575f9150610e90565b8060ff16600103610e345760019150610e90565b8060ff16600203610e485760029150610e90565b60405162461bcd60e51b815260206004820152601360248201527f554e4b4e4f574e5f4d4143485f535441545553000000000000000000000000006044820152606401610338565b50610e996123eb565b610ea16123eb565b604080518082019091525f808252602082015260408051808201909152606081525f6020820152604080518082019091525f8082526020820152610ee68b8b896118c6565b97509450610ef58b8b896119ac565b97509250610f048b8b896118c6565b97509350610f138b8b896119ff565b97509150610f228b8b896119ac565b8098508192505050604051806101800160405280876002811115610f4857610f4861268c565b8152602081019690965260408601939093526060850193909352608084015260a08301919091525f60c0830181905260e08301819052610100830181905261012083018190526101408301819052610160909201919091529250610faf9050858583611b3b565b60c08401919091529050610fc4858583611b56565b63ffffffff90911660e08401529050610fde858583611b56565b63ffffffff9091166101008401529050610ff9858583611b56565b63ffffffff9091166101208401529050611014858583611b3b565b610140840191909152905061102a858583611b3b565b61016084019190915291959194509092505050565b611047612526565b8161105061254b565b61105861254b565b5f5b600260ff821610156110a257611071888886611b3b565b848360ff166002811061108657611086612678565b602002019190915293508061109a81613159565b91505061105a565b505f5b600260ff821610156110fc576110bc888886611bae565b838360ff16600281106110d1576110d1612678565b67ffffffffffffffff90931660209390930201919091529350806110f481613159565b9150506110a5565b506040805180820190915291825260208201529590945092505050565b80518051602091820151828401518051908401516040517f476c6f62616c2073746174653a0000000000000000000000000000000000000095810195909552602d850193909352604d8401919091527fffffffffffffffff00000000000000000000000000000000000000000000000060c091821b8116606d85015291901b1660758201525f90607d01610a87565b6111b06124bc565b604080516060810182525f808252602082018190529181018290528391905f5f5f5f6111dd8b8b89611b3b565b975095506111ec8b8b89611c01565b975094506111fb8b8b89611b3b565b9750935061120a8b8b89611b3b565b975092506112198b8b89611b3b565b975091506112288b8b89611b56565b6040805160c081018252988952602089019790975295870194909452506060850191909152608084015263ffffffff1660a083015290969095509350505050565b604080516020810190915260608152815f611285868684611891565b925090505f60ff821667ffffffffffffffff8111156112a6576112a6612664565b6040519080825280602002602001820160405280156112cf578160200160208202803683370190505b5090505f5b8260ff168160ff16101561131a576112ed888886611b3b565b838360ff168151811061130257611302612678565b602090810291909101019190915293506001016112d4565b5060405180602001604052808281525093505050935093915050565b5f611380848461134585611c7b565b6040518060400160405280601381526020017f4d6f64756c65206d65726b6c6520747265653a00000000000000000000000000815250611d23565b90505b9392505050565b6060815f611399868684611891565b9250905060ff811667ffffffffffffffff8111156113b9576113b9612664565b6040519080825280602002602001820160405280156113fd57816020015b604080518082019091525f80825260208201528152602001906001900390816113d75790505b5092505f5b8160ff16811015611471575f5f61141a898987611e35565b95509150611429898987611e82565b809650819250505060405180604001604052808361ffff1681526020018281525086848151811061145c5761145c612678565b60209081029190910101525050600101611402565b5050935093915050565b5f611380848461148a85611ecb565b6040518060400160405280601881526020017f496e737472756374696f6e206d65726b6c6520747265653a0000000000000000815250611d23565b6040517f46756e6374696f6e3a00000000000000000000000000000000000000000000006020820152602981018290525f908190604901604051602081830303815290604052805190602001209050610a098585836040518060400160405280601581526020017f46756e6374696f6e206d65726b6c6520747265653a0000000000000000000000815250611d23565b60408101515160a0820151515f1981148061157057505f1982145b1561157d57505060029052565b61158a83608001516117f8565b60a084015152602083015161159e90611603565b60408401515260808301516115b99082602082015260609052565b50602091820151808301919091526040805192830190526060825252565b5f6115e9828361014001515f1c6120b1565b6115f457505f919050565b505f1961014090910152600190565b6020810151815151515f5b8181101561168857835161162b9061162690836120f1565b61211d565b6040517f56616c756520737461636b3a00000000000000000000000000000000000000006020820152602c810191909152604c8101849052606c0160408051601f198184030181529190528051602090910120925060010161160e565b5050919050565b5f600183016116e05760405162461bcd60e51b815260206004820152601960248201527f4d554c5449535441434b5f4e4f535441434b5f414354495645000000000000006044820152606401610338565b81156117a65783516001016117375760405162461bcd60e51b815260206004820152601760248201527f4d554c5449535441434b5f4e4f535441434b5f4d41494e0000000000000000006044820152606401610338565b83516020808601516040516117899392879291017f6d756c7469737461636b3a0000000000000000000000000000000000000000008152600b810193909352602b830191909152604b820152606b0190565b604051602081830303815290604052805190602001209050611383565b83516020808601516040517f6d756c7469737461636b3a00000000000000000000000000000000000000000092810192909252602b8201869052604b820192909252606b810191909152608b01611789565b60208101515f5b82515181101561188b5761182e835f0151828151811061182157611821612678565b6020026020010151612138565b6040517f537461636b206672616d6520737461636b3a0000000000000000000000000000602082015260328101919091526052810183905260720160408051601f19818403018152919052805160209091012091506001016117ff565b50919050565b5f818484828181106118a5576118a5612678565b919091013560f81c92508190506118bb81613177565b915050935093915050565b6118ce6123eb565b815f6118db868684611b3b565b925090505f6118eb878785611e82565b935090505f8167ffffffffffffffff81111561190957611909612664565b60405190808252806020026020018201604052801561194257816020015b61192f6123d2565b8152602001906001900390816119275790505b5090505f5b81518110156119855761195b8989876121cf565b83838151811061196d5761196d612678565b60209081029190910101919091529450600101611947565b50604080516060810182529081019182529081526020810192909252509590945092505050565b604080518082019091525f8082526020820152815f6119cc868684611b3b565b925090505f6119dc878785611b3b565b604080518082019091529384526020840191909152919791965090945050505050565b60408051808201909152606081525f6020820152815f611a20868684611b3b565b925090506060868684818110611a3857611a38612678565b909101357fff0000000000000000000000000000000000000000000000000000000000000016159050611ad75782611a6f81613177565b604080516001808252818301909252919550909150816020015b611a91612569565b815260200190600190039081611a89579050509050611ab18787856122cc565b825f81518110611ac357611ac3612678565b602002602001018195508290525050611b1a565b82611ae181613177565b604080515f80825260208201909252919550909150611b16565b611b03612569565b815260200190600190039081611afb5790505b5090505b60405180604001604052808281526020018381525093505050935093915050565b5f8181611b49868684611e82565b9097909650945050505050565b5f81815b6004811015611ba55760088363ffffffff16901b9250858583818110611b8257611b82612678565b919091013560f81c93909317925081611b9a81613177565b925050600101611b5a565b50935093915050565b5f81815b6008811015611ba55760088367ffffffffffffffff16901b9250858583818110611bde57611bde612678565b919091013560f81c93909317925081611bf681613177565b925050600101611bb2565b604080516060810182525f8082526020820181905291810191909152815f8080611c2c888886611bae565b94509250611c3b888886611bae565b94509150611c4a888886611b3b565b6040805160608101825267ffffffffffffffff96871681529490951660208501529383015250969095509350505050565b5f815f0151611c8d8360200151612351565b6040808501516060860151608087015160a08801519351610a87969594906020017f4d6f64756c653a0000000000000000000000000000000000000000000000000081526007810196909652602786019490945260478501929092526067840152608783015260e01b7fffffffff000000000000000000000000000000000000000000000000000000001660a782015260ab0190565b815f5b855151811015611dde57846001165f03611d88578282875f01518381518110611d5157611d51612678565b6020026020010151604051602001611d6b9392919061318f565b604051602081830303815290604052805190602001209150611dd2565b82865f01518281518110611d9e57611d9e612678565b602002602001015183604051602001611db99392919061318f565b6040516020818303038152906040528051906020012091505b600194851c9401611d26565b508315611e2d5760405162461bcd60e51b815260206004820152600f60248201527f50524f4f465f544f4f5f53484f525400000000000000000000000000000000006044820152606401610338565b949350505050565b5f81815b6002811015611ba55760088361ffff16901b9250858583818110611e5f57611e5f612678565b919091013560f81c93909317925081611e7781613177565b925050600101611e39565b5f81815b6020811015611ba557600883901b9250858583818110611ea857611ea8612678565b919091013560f81c93909317925081611ec081613177565b925050600101611e86565b5f5f82516022611edb91906131ae565b611ee690600e6126b4565b67ffffffffffffffff811115611efe57611efe612664565b6040519080825280601f01601f191660200182016040528015611f28576020820181803683370190505b5090507f496e737472756374696f6e733a0000000000000000000000000000000000000060208201525f600d9050835160f81b828281518110611f6d57611f6d612678565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a90535080611fa581613177565b91505f90505b84518110156120a1575f858281518110611fc757611fc7612678565b602002602001015190506008815f015161ffff16901c60f81b848481518110611ff257611ff2612678565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a905350805160f81b846120318560016126b4565b8151811061204157612041612678565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a90535061207a6002846126b4565b602080830151868301820181905291945061209590856126b4565b93505050600101611fab565b5050805160209091012092915050565b5f606082901c156120c357505f61029b565b5063ffffffff818116610120840152602082901c811661010084015260409190911c1660e090910152600190565b6120f96123d2565b825180518390811061210d5761210d612678565b6020026020010151905092915050565b5f815f01518260200151604051602001610a879291906131c5565b5f612145825f015161211d565b602080840151604080860151606087015191517f537461636b206672616d653a000000000000000000000000000000000000000094810194909452602c840194909452604c8301919091527fffffffff0000000000000000000000000000000000000000000000000000000060e093841b8116606c840152921b9091166070820152607401610a87565b6121d76123d2565b815f8585838181106121eb576121eb612678565b919091013560f81c915082905061220181613177565b92505061220c600690565b600681111561221d5761221d61268c565b60ff168160ff1611156122725760405162461bcd60e51b815260206004820152600e60248201527f4241445f56414c55455f545950450000000000000000000000000000000000006044820152606401610338565b5f61227e878785611e82565b809450819250505060405180604001604052808360ff1660068111156122a6576122a661268c565b60068111156122b7576122b761268c565b81526020018281525093505050935093915050565b6122d4612569565b816122dd6123d2565b5f5f5f6122eb8989876121cf565b955093506122fa898987611b3b565b95509250612309898987611b56565b95509150612318898987611b56565b60408051608081018252968752602087019590955263ffffffff9384169486019490945290911660608401525090969095509350505050565b805160208083015160408085015190517f4d656d6f72793a00000000000000000000000000000000000000000000000000938101939093527fffffffffffffffff00000000000000000000000000000000000000000000000060c094851b811660278501529190931b16602f82015260378101919091525f90605701610a87565b60408051808201909152805f5b81526020015f81525090565b60408051606080820183529181019182529081906123df565b604080516101808101909152805f815260200161241f6123eb565b815260200161243f60405180604001604052805f81526020015f81525090565b815260200161244c6123eb565b815260200161246d6040518060400160405280606081526020015f81525090565b815260200161248d60405180604001604052805f81526020015f81525090565b81525f6020820181905260408201819052606082018190526080820181905260a0820181905260c09091015290565b6040518060c001604052805f815260200161250260405180606001604052805f67ffffffffffffffff1681526020015f67ffffffffffffffff1681526020015f81525090565b81526020015f81526020015f81526020015f81526020015f63ffffffff1681525090565b604051806040016040528061253961254b565b815260200161254661254b565b905290565b60405180604001604052806002906020820280368337509192915050565b604051806080016040528061257c6123d2565b81525f602082018190526040820181905260609091015290565b5f5f604083850312156125a7575f5ffd5b50508035926020909101359150565b5f5f5f5f5f85870360c08112156125cb575f5ffd5b60608112156125d8575f5ffd5b50859450606085013593506080850135925060a085013567ffffffffffffffff811115612603575f5ffd5b8601601f81018813612613575f5ffd5b803567ffffffffffffffff811115612629575f5ffd5b88602082840101111561263a575f5ffd5b959894975092955050506020019190565b5f60a082840312801561265c575f5ffd5b509092915050565b634e487b7160e01b5f52604160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52602160045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b8082018082111561029b5761029b6126a0565b634e487b7160e01b5f52601260045260245ffd5b5f63ffffffff8316806126f0576126f06126c7565b8063ffffffff84160491505092915050565b5f63ffffffff831680612717576127176126c7565b8063ffffffff84160691505092915050565b5f5f85851115612737575f5ffd5b83861115612743575f5ffd5b5050820193919092039150565b63ffffffff818116838216019081111561029b5761029b6126a0565b61ffff818116838216019081111561029b5761029b6126a0565b600381106127965761279661268c565b9052565b8051600781106127ac576127ac61268c565b8252602090810151910152565b80516040808452905160209184018290528051606085018190525f9290910190829060808601905b8083101561280b576127f482855161279a565b6040820191506020840193506001830192506127e1565b506020850151602087015280935050505092915050565b8051604080845281519084018190525f9160200190829060608601905b8083101561280b57835161285483825161279a565b6020810151604084015263ffffffff604082015116606084015263ffffffff60608201511660808401525060a08201915060208401935060018301925061283f565b81835281816020850137505f602082840101525f6020601f19601f840116840101905092915050565b863581525f60208801356001600160a01b0381168082146128de575f5ffd5b602084015250604088810135908301526101e060608301819052875161290691840190612786565b60208701516101c06102008401526129226103a08401826127b9565b604089015180516102208601526020015161024085015260608901518482036101df190161026086015290915061295982826127b9565b91505060808801516101df19848303016102808501526129798282612822565b91505060a08801516129996102a085018280518252602090810151910152565b5060c08801516102e084015260e088015163ffffffff81166103008501525061010088015163ffffffff81166103208501525061012088015163ffffffff811661034085015250610140880151610360840152610160880151610380840152612a6b608084018880518252602081015167ffffffffffffffff815116602084015267ffffffffffffffff6020820151166040840152604081015160608401525060408101516080830152606081015160a0830152608081015160c083015263ffffffff60a08201511660e08301525050565b855161ffff1661018084015260208601516101a08401528281036101c0840152612a96818587612896565b9998505050505050505050565b6040805190810167ffffffffffffffff81118282101715612ac657612ac6612664565b60405290565b6040516020810167ffffffffffffffff81118282101715612ac657612ac6612664565b6040516080810167ffffffffffffffff81118282101715612ac657612ac6612664565b60405160c0810167ffffffffffffffff81118282101715612ac657612ac6612664565b6040516060810167ffffffffffffffff81118282101715612ac657612ac6612664565b604051610180810167ffffffffffffffff81118282101715612ac657612ac6612664565b604051601f8201601f1916810167ffffffffffffffff81118282101715612ba557612ba5612664565b604052919050565b60038110612bb9575f5ffd5b50565b8051610b5f81612bad565b5f67ffffffffffffffff821115612be057612be0612664565b5060051b60200190565b5f60408284031215612bfa575f5ffd5b612c02612aa3565b9050815160078110612c12575f5ffd5b808252506020820151602082015292915050565b5f60408284031215612c36575f5ffd5b612c3e612aa3565b9050815167ffffffffffffffff811115612c56575f5ffd5b820160208185031215612c67575f5ffd5b612c6f612acc565b815167ffffffffffffffff811115612c85575f5ffd5b80830192505084601f830112612c99575f5ffd5b8151612cac612ca782612bc7565b612b7c565b8082825260208201915060208360061b860101925087831115612ccd575f5ffd5b6020850194505b82851015612cf957612ce68886612bea565b8252602082019150604085019450612cd4565b8352505082525060209182015191810191909152919050565b5f60408284031215612d22575f5ffd5b612d2a612aa3565b825181526020928301519281019290925250919050565b805163ffffffff81168114610b5f575f5ffd5b5f60408284031215612d64575f5ffd5b612d6c612aa3565b9050815167ffffffffffffffff811115612d84575f5ffd5b8201601f81018413612d94575f5ffd5b8051612da2612ca782612bc7565b80828252602082019150602060a08402850101925086831115612dc3575f5ffd5b6020840193505b82841015612e355760a08488031215612de1575f5ffd5b612de9612aef565b612df38886612bea565b815260408501516020820152612e0b60608601612d41565b6040820152612e1c60808601612d41565b6060820152825260a09390930192602090910190612dca565b845250505060209182015191810191909152919050565b67ffffffffffffffff81168114612bb9575f5ffd5b5f818303610100811215612e73575f5ffd5b612e7b612b12565b8351815291506060601f1982011215612e92575f5ffd5b50612e9b612b35565b6020830151612ea981612e4c565b81526040830151612eb981612e4c565b602082810191909152606084810151604080850191909152918401929092526080808501519184019190915260a08401519183019190915260c083015190820152612f0660e08301612d41565b60a082015292915050565b5f5f6101208385031215612f23575f5ffd5b825167ffffffffffffffff811115612f39575f5ffd5b83016101c08186031215612f4b575f5ffd5b612f53612b58565b612f5c82612bbc565b8152602082015167ffffffffffffffff811115612f77575f5ffd5b612f8387828501612c26565b602083015250612f968660408401612d12565b6040820152608082015167ffffffffffffffff811115612fb4575f5ffd5b612fc087828501612c26565b60608301525060a082015167ffffffffffffffff811115612fdf575f5ffd5b612feb87828501612d54565b608083015250612ffe8660c08401612d12565b60a082015261010082015160c082015261301b6101208301612d41565b60e082015261302d6101408301612d41565b6101008201526130406101608301612d41565b6101208201526101808201516101408201526101a090910151610160820152915061306e8460208501612e61565b90509250929050565b5f60208284031215613087575f5ffd5b813561138381612bad565b5f60808284031280156130a3575f5ffd5b506130ac612aa3565b83601f8401126130ba575f5ffd5b60406130c581612b7c565b80828601878111156130d5575f5ffd5b865b818110156130ef5780358452602093840193016130d7565b508185525f925087601f820112613104575f5ffd5b83915061311082612b7c565b9381019391508188851115613123575f5ffd5b8482101561314857813561313681612e4c565b83526020928301929190910190613123565b602086015250929695505050505050565b5f60ff821660ff810361316e5761316e6126a0565b60010192915050565b5f60018201613188576131886126a0565b5060010190565b5f84518060208701845e91909101928352506020820152604001919050565b808202811582820484141761029b5761029b6126a0565b7f56616c75653a000000000000000000000000000000000000000000000000000081525f600784106131f9576131f961268c565b5060f89290921b600683015260078201526027019056fea2646970667358221220ca144df7db56f168f51e04d11afa3c871f6c8db3bf4e36451e9a1afb80cb0ad864736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15`\x0EW__\xFD[P`@Qa318\x03\x80a31\x839\x81\x01`@\x81\x90R`+\x91`\x96V[_\x80T`\x01`\x01`\xA0\x1B\x03\x95\x86\x16`\x01`\x01`\xA0\x1B\x03\x19\x91\x82\x16\x17\x90\x91U`\x01\x80T\x94\x86\x16\x94\x82\x16\x94\x90\x94\x17\x90\x93U`\x02\x80T\x92\x85\x16\x92\x84\x16\x92\x90\x92\x17\x90\x91U`\x03\x80T\x91\x90\x93\x16\x91\x16\x17\x90U`\xDEV[\x80Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14`\x91W__\xFD[\x91\x90PV[____`\x80\x85\x87\x03\x12\x15`\xA8W__\xFD[`\xAF\x85`|V[\x93P`\xBB` \x86\x01`|V[\x92P`\xC7`@\x86\x01`|V[\x91P`\xD3``\x86\x01`|V[\x90P\x92\x95\x91\x94P\x92PV[a2F\x80a\0\xEB_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0zW_5`\xE0\x1C\x80c_R\xFD|\x11a\0XW\x80c_R\xFD|\x14a\0\xE1W\x80cf\xE5\xD9\xC3\x14a\0\xF4W\x80c\xB5\x11/\xD2\x14a\x01\x07W\x80c\xC3\x96\x19\xC4\x14a\x01\x1AW__\xFD[\x80c\x04\x99{\xE4\x14a\0~W\x80c\x1F\x12\x8B\xC0\x14a\0\xA4W\x80c0\xA5P\x9F\x14a\0\xCFW[__\xFD[a\0\x91a\0\x8C6`\x04a%\x96V[a\x01-V[`@Q\x90\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[`\x01Ta\0\xB7\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01a\0\x9BV[_Ta\0\xB7\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[`\x03Ta\0\xB7\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[`\x02Ta\0\xB7\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[a\0\x91a\x01\x156`\x04a%\xB6V[a\x02\xA1V[a\0\x91a\x01(6`\x04a&KV[a\n\x12V[`@\x80Q`\x03\x80\x82R`\x80\x82\x01\x90\x92R_\x91\x82\x91\x90\x81` \x01[a\x01Oa#\xD2V[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x01GW\x90PP\x90Pa\x01la\x0BdV[\x81_\x81Q\x81\x10a\x01~Wa\x01~a&xV[` \x02` \x01\x01\x81\x90RPa\x01\x92_a\x0B\x84V[\x81`\x01\x81Q\x81\x10a\x01\xA5Wa\x01\xA5a&xV[` \x02` \x01\x01\x81\x90RPa\x01\xB9_a\x0B\x84V[\x81`\x02\x81Q\x81\x10a\x01\xCCWa\x01\xCCa&xV[` \x90\x81\x02\x91\x90\x91\x01\x81\x01\x91\x90\x91R`@\x80Q\x80\x83\x01\x82R\x83\x81R\x81Q\x80\x83\x01\x90\x92R\x80\x82R_\x92\x82\x01\x92\x90\x92Ra\x02\x02a#\xEBV[`@\x80Q\x80\x82\x01\x82R``\x81R_` \x80\x83\x01\x82\x90R\x83Q\x80\x85\x01\x90\x94R\x83\x01R_\x19\x82R\x90`@\x80Qa\x01\x80\x81\x01\x82R_\x80\x82R` \x82\x01\x87\x90R\x91\x81\x01\x83\x90R``\x81\x01\x85\x90R`\x80\x81\x01\x84\x90R`\xA0\x81\x01\x83\x90R`\xC0\x81\x01\x8B\x90R`\xE0\x81\x01\x82\x90Ra\x01\0\x81\x01\x82\x90Ra\x01 \x81\x01\x91\x90\x91R_\x19a\x01@\x82\x01Ra\x01`\x81\x01\x89\x90Ra\x02\x91\x81a\x0B\xAAV[\x97PPPPPPPP[\x92\x91PPV[_a\x02\xAAa$\x04V[a\x02\xB2a$\xBCV[`@\x80Q` \x81\x01\x90\x91R``\x81R`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R_a\x02\xE0\x88\x88\x83a\r\xF4V[\x90\x95P\x90P\x88a\x02\xEF\x86a\x0B\xAAV[\x14a\x03AW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x13`$\x82\x01R\x7FMACHINE_BEFORE_HASH\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01[`@Q\x80\x91\x03\x90\xFD[_\x85Q`\x02\x81\x11\x15a\x03UWa\x03Ua&\x8CV[\x14a\x04<Wa\x03ba%&V[a\x03m\x89\x89\x84a\x10?V[`\xC0\x88\x01Q\x90\x93P\x90\x91Pa\x03\x81\x82a\x11\x19V[\x14a\x03\xCEW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x10`$\x82\x01R\x7FBAD_GLOBAL_STATE\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x038V[`\x01\x86Q`\x02\x81\x11\x15a\x03\xE3Wa\x03\xE3a&\x8CV[\x14\x80\x15a\x03\xEEWP\x8A\x15[\x80\x15a\x04\x0FWP\x8B5a\x04\x03\x82` \x01QQ\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x10[\x15a\x043Wa\x04&\x86`\xC0\x01Q\x8D`@\x015a\x01-V[\x96PPPPPPPa\n\tV[a\x04&\x86a\x0B\xAAV[e\x08\0\0\0\0\0a\x04N\x8B`\x01a&\xB4V[\x03a\x04lW`\x02\x85Ra\x04`\x85a\x0B\xAAV[\x95PPPPPPa\n\tV[a\x04w\x88\x88\x83a\x11\xA8V[\x90\x94P\x90Pa\x04\x87\x88\x88\x83a\x12iV[\x80\x92P\x81\x94PPP\x84a\x01`\x01Qa\x04\xB4\x86`\xE0\x01Qc\xFF\xFF\xFF\xFF\x16\x86\x86a\x136\x90\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[\x14a\x05\x01W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0C`$\x82\x01R\x7FMODULES_ROOT\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x038V[``a\x05\x19`@Q\x80` \x01`@R\x80``\x81RP\x90V[`@\x80Q` \x81\x01\x90\x91R``\x81Ra\x053\x8B\x8B\x86a\x13\x8AV[\x94P\x92Pa\x05B\x8B\x8B\x86a\x12iV[\x94P\x91Pa\x05Q\x8B\x8B\x86a\x12iV[\x80\x95P\x81\x92PPP_a\x05\x86`@\x8Aa\x01 \x01Qa\x05o\x91\x90a&\xDBV[c\xFF\xFF\xFF\xFF\x16\x85\x85a\x14{\x90\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[\x90P_a\x05\xA9\x8Aa\x01\0\x01Qc\xFF\xFF\xFF\xFF\x16\x83\x85a\x14\xC5\x90\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[\x90P\x88``\x01Q\x81\x14a\x05\xFEW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x12`$\x82\x01R\x7FBAD_FUNCTIONS_ROOT\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x038V[\x84`@\x8Ba\x01 \x01Qa\x06\x11\x91\x90a'\x02V[c\xFF\xFF\xFF\xFF\x16\x81Q\x81\x10a\x06'Wa\x06'a&xV[` \x02` \x01\x01Q\x96PPPPPP\x87\x87\x82\x90\x80\x92a\x06H\x93\x92\x91\x90a')V[\x97P\x97PP_\x84`\xE0\x01Qc\xFF\xFF\xFF\xFF\x16\x90P`\x01\x85a\x01 \x01\x81\x81Qa\x06o\x91\x90a'PV[c\xFF\xFF\xFF\xFF\x16\x90RP\x81Q_`(a\xFF\xFF\x83\x16\x10\x80\x15\x90a\x06\x95WP`5a\xFF\xFF\x83\x16\x11\x15[\x80a\x06\xB5WP`6a\xFF\xFF\x83\x16\x10\x80\x15\x90a\x06\xB5WP`>a\xFF\xFF\x83\x16\x11\x15[\x80a\x06\xC4WPa\xFF\xFF\x82\x16`?\x14[\x80a\x06\xD3WPa\xFF\xFF\x82\x16`@\x14[\x15a\x06\xEAWP`\x01T`\x01`\x01`\xA0\x1B\x03\x16a\t\0V[a\xFF\xFF\x82\x16`E\x14\x80a\x07\x01WPa\xFF\xFF\x82\x16`P\x14[\x80a\x07/WP`Fa\xFF\xFF\x83\x16\x10\x80\x15\x90a\x07/WPa\x07#`\t`Fa'lV[a\xFF\xFF\x16\x82a\xFF\xFF\x16\x11\x15[\x80a\x07]WP`ga\xFF\xFF\x83\x16\x10\x80\x15\x90a\x07]WPa\x07Q`\x02`ga'lV[a\xFF\xFF\x16\x82a\xFF\xFF\x16\x11\x15[\x80a\x07}WP`ja\xFF\xFF\x83\x16\x10\x80\x15\x90a\x07}WP`xa\xFF\xFF\x83\x16\x11\x15[\x80a\x07\xABWP`Qa\xFF\xFF\x83\x16\x10\x80\x15\x90a\x07\xABWPa\x07\x9F`\t`Qa'lV[a\xFF\xFF\x16\x82a\xFF\xFF\x16\x11\x15[\x80a\x07\xD9WP`ya\xFF\xFF\x83\x16\x10\x80\x15\x90a\x07\xD9WPa\x07\xCD`\x02`ya'lV[a\xFF\xFF\x16\x82a\xFF\xFF\x16\x11\x15[\x80a\x07\xF9WP`|a\xFF\xFF\x83\x16\x10\x80\x15\x90a\x07\xF9WP`\x8Aa\xFF\xFF\x83\x16\x11\x15[\x80a\x08\x08WPa\xFF\xFF\x82\x16`\xA7\x14[\x80a\x08%WPa\xFF\xFF\x82\x16`\xAC\x14\x80a\x08%WPa\xFF\xFF\x82\x16`\xAD\x14[\x80a\x08EWP`\xC0a\xFF\xFF\x83\x16\x10\x80\x15\x90a\x08EWP`\xC4a\xFF\xFF\x83\x16\x11\x15[\x80a\x08eWP`\xBCa\xFF\xFF\x83\x16\x10\x80\x15\x90a\x08eWP`\xBFa\xFF\xFF\x83\x16\x11\x15[\x15a\x08|WP`\x02T`\x01`\x01`\xA0\x1B\x03\x16a\t\0V[a\x80\x10a\xFF\xFF\x83\x16\x10\x80\x15\x90a\x08\x98WPa\x80\x13a\xFF\xFF\x83\x16\x11\x15[\x80a\x08\xBAWPa\x80 a\xFF\xFF\x83\x16\x10\x80\x15\x90a\x08\xBAWPa\x80$a\xFF\xFF\x83\x16\x11\x15[\x80a\x08\xDCWPa\x800a\xFF\xFF\x83\x16\x10\x80\x15\x90a\x08\xDCWPa\x802a\xFF\xFF\x83\x16\x11\x15[\x15a\x08\xF3WP`\x03T`\x01`\x01`\xA0\x1B\x03\x16a\t\0V[P_T`\x01`\x01`\xA0\x1B\x03\x16[\x80`\x01`\x01`\xA0\x1B\x03\x16c\xA9,\xB5\x01\x8E\x89\x89\x88\x8F\x8F`@Q\x87c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\t6\x96\x95\x94\x93\x92\x91\x90a(\xBFV[_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\tPW=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\tw\x91\x90\x81\x01\x90a/\x11V[\x90\x97P\x95P_a\xFF\xFF\x83\x16a\x80#\x14\x80a\t\x96WPa\xFF\xFF\x83\x16a\x80$\x14[\x15\x90P\x80\x15a\t\xB1Wa\t\xAA\x86\x85\x89a\x136V[a\x01`\x89\x01R[`\x02\x88Q`\x02\x81\x11\x15a\t\xC6Wa\t\xC6a&\x8CV[\x14\x80\x15a\t\xD9WPa\x01@\x88\x01Q_\x19\x14\x15[\x15a\t\xF5Wa\t\xE7\x88a\x15UV[a\t\xF0\x88a\x15\xD7V[P_\x88R[a\t\xFE\x88a\x0B\xAAV[\x98PPPPPPPPP[\x95\x94PPPPPV[_`\x01a\n%`\xA0\x84\x01`\x80\x85\x01a0wV[`\x02\x81\x11\x15a\n6Wa\n6a&\x8CV[\x03a\n\xA4Wa\nRa\nM6\x84\x90\x03\x84\x01\x84a0\x92V[a\x11\x19V[`@Q\x7FMachine finished:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`1\x81\x01\x91\x90\x91R`Q\x01[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P\x91\x90PV[`\x02a\n\xB6`\xA0\x84\x01`\x80\x85\x01a0wV[`\x02\x81\x11\x15a\n\xC7Wa\n\xC7a&\x8CV[\x03a\x0B\x17Wa\n\xDEa\nM6\x84\x90\x03\x84\x01\x84a0\x92V[`@Q\x7FMachine errored:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`0\x81\x01\x91\x90\x91R`P\x01a\n\x87V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x12`$\x82\x01R\x7FBAD_MACHINE_STATUS\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x038V[\x91\x90PV[a\x0Bla#\xD2V[P`@\x80Q\x80\x82\x01\x90\x91R`\x04\x81R_` \x82\x01R\x90V[a\x0B\x8Ca#\xD2V[P`@\x80Q\x80\x82\x01\x90\x91R_\x81Rc\xFF\xFF\xFF\xFF\x90\x91\x16` \x82\x01R\x90V[_\x80\x82Q`\x02\x81\x11\x15a\x0B\xBFWa\x0B\xBFa&\x8CV[\x03a\x0C\xFCW_a\x0B\xEBa\x0B\xD5\x84` \x01Qa\x16\x03V[a\x01@\x85\x01Q`@\x86\x01Q\x91\x90_\x19\x14\x15a\x16\x8FV[\x90P_a\x0C\x14a\x0B\xFE\x85`\x80\x01Qa\x17\xF8V[a\x01@\x86\x01Q`\xA0\x87\x01Q\x91\x90_\x19\x14\x15a\x16\x8FV[\x90P_\x82a\x0C%\x86``\x01Qa\x16\x03V[`\xC0\x87\x01Q`\xE0\x80\x89\x01Qa\x01\0\x8A\x01Qa\x01 \x8B\x01Qa\x01@\x8C\x01Qa\x01`\x8D\x01Q`@Q\x7FMachine running:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`0\x81\x01\x99\x90\x99R`P\x89\x01\x97\x90\x97R`p\x88\x01\x8A\x90R`\x90\x88\x01\x95\x90\x95R\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x92\x84\x1B\x83\x16`\xB0\x88\x01R\x90\x83\x1B\x82\x16`\xB4\x87\x01R\x90\x91\x1B\x16`\xB8\x84\x01R`\xBC\x83\x01R`\xDC\x82\x01R`\xFC\x01`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R\x80Q` \x90\x91\x01 \x95\x94PPPPPV[`\x01\x82Q`\x02\x81\x11\x15a\r\x11Wa\r\x11a&\x8CV[\x03a\rTW`\xC0\x82\x01Q`@Q\x7FMachine finished:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`1\x81\x01\x91\x90\x91R`Q\x01a\n\x87V[`\x02\x82Q`\x02\x81\x11\x15a\riWa\ria&\x8CV[\x03a\r\xACW`\xC0\x82\x01Q`@Q\x7FMachine errored:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`0\x81\x01\x91\x90\x91R`P\x01a\n\x87V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0F`$\x82\x01R\x7FBAD_MACH_STATUS\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x038V[a\r\xFCa$\x04V[\x81_\x80a\x0E\n\x87\x87\x85a\x18\x91V[\x93P\x90P`\xFF\x81\x16_\x03a\x0E W_\x91Pa\x0E\x90V[\x80`\xFF\x16`\x01\x03a\x0E4W`\x01\x91Pa\x0E\x90V[\x80`\xFF\x16`\x02\x03a\x0EHW`\x02\x91Pa\x0E\x90V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x13`$\x82\x01R\x7FUNKNOWN_MACH_STATUS\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x038V[Pa\x0E\x99a#\xEBV[a\x0E\xA1a#\xEBV[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R`@\x80Q\x80\x82\x01\x90\x91R``\x81R_` \x82\x01R`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01Ra\x0E\xE6\x8B\x8B\x89a\x18\xC6V[\x97P\x94Pa\x0E\xF5\x8B\x8B\x89a\x19\xACV[\x97P\x92Pa\x0F\x04\x8B\x8B\x89a\x18\xC6V[\x97P\x93Pa\x0F\x13\x8B\x8B\x89a\x19\xFFV[\x97P\x91Pa\x0F\"\x8B\x8B\x89a\x19\xACV[\x80\x98P\x81\x92PPP`@Q\x80a\x01\x80\x01`@R\x80\x87`\x02\x81\x11\x15a\x0FHWa\x0FHa&\x8CV[\x81R` \x81\x01\x96\x90\x96R`@\x86\x01\x93\x90\x93R``\x85\x01\x93\x90\x93R`\x80\x84\x01R`\xA0\x83\x01\x91\x90\x91R_`\xC0\x83\x01\x81\x90R`\xE0\x83\x01\x81\x90Ra\x01\0\x83\x01\x81\x90Ra\x01 \x83\x01\x81\x90Ra\x01@\x83\x01\x81\x90Ra\x01`\x90\x92\x01\x91\x90\x91R\x92Pa\x0F\xAF\x90P\x85\x85\x83a\x1B;V[`\xC0\x84\x01\x91\x90\x91R\x90Pa\x0F\xC4\x85\x85\x83a\x1BVV[c\xFF\xFF\xFF\xFF\x90\x91\x16`\xE0\x84\x01R\x90Pa\x0F\xDE\x85\x85\x83a\x1BVV[c\xFF\xFF\xFF\xFF\x90\x91\x16a\x01\0\x84\x01R\x90Pa\x0F\xF9\x85\x85\x83a\x1BVV[c\xFF\xFF\xFF\xFF\x90\x91\x16a\x01 \x84\x01R\x90Pa\x10\x14\x85\x85\x83a\x1B;V[a\x01@\x84\x01\x91\x90\x91R\x90Pa\x10*\x85\x85\x83a\x1B;V[a\x01`\x84\x01\x91\x90\x91R\x91\x95\x91\x94P\x90\x92PPPV[a\x10Ga%&V[\x81a\x10Pa%KV[a\x10Xa%KV[_[`\x02`\xFF\x82\x16\x10\x15a\x10\xA2Wa\x10q\x88\x88\x86a\x1B;V[\x84\x83`\xFF\x16`\x02\x81\x10a\x10\x86Wa\x10\x86a&xV[` \x02\x01\x91\x90\x91R\x93P\x80a\x10\x9A\x81a1YV[\x91PPa\x10ZV[P_[`\x02`\xFF\x82\x16\x10\x15a\x10\xFCWa\x10\xBC\x88\x88\x86a\x1B\xAEV[\x83\x83`\xFF\x16`\x02\x81\x10a\x10\xD1Wa\x10\xD1a&xV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x93\x16` \x93\x90\x93\x02\x01\x91\x90\x91R\x93P\x80a\x10\xF4\x81a1YV[\x91PPa\x10\xA5V[P`@\x80Q\x80\x82\x01\x90\x91R\x91\x82R` \x82\x01R\x95\x90\x94P\x92PPPV[\x80Q\x80Q` \x91\x82\x01Q\x82\x84\x01Q\x80Q\x90\x84\x01Q`@Q\x7FGlobal state:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x95\x81\x01\x95\x90\x95R`-\x85\x01\x93\x90\x93R`M\x84\x01\x91\x90\x91R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xC0\x91\x82\x1B\x81\x16`m\x85\x01R\x91\x90\x1B\x16`u\x82\x01R_\x90`}\x01a\n\x87V[a\x11\xB0a$\xBCV[`@\x80Q``\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R\x83\x91\x90____a\x11\xDD\x8B\x8B\x89a\x1B;V[\x97P\x95Pa\x11\xEC\x8B\x8B\x89a\x1C\x01V[\x97P\x94Pa\x11\xFB\x8B\x8B\x89a\x1B;V[\x97P\x93Pa\x12\n\x8B\x8B\x89a\x1B;V[\x97P\x92Pa\x12\x19\x8B\x8B\x89a\x1B;V[\x97P\x91Pa\x12(\x8B\x8B\x89a\x1BVV[`@\x80Q`\xC0\x81\x01\x82R\x98\x89R` \x89\x01\x97\x90\x97R\x95\x87\x01\x94\x90\x94RP``\x85\x01\x91\x90\x91R`\x80\x84\x01Rc\xFF\xFF\xFF\xFF\x16`\xA0\x83\x01R\x90\x96\x90\x95P\x93PPPPV[`@\x80Q` \x81\x01\x90\x91R``\x81R\x81_a\x12\x85\x86\x86\x84a\x18\x91V[\x92P\x90P_`\xFF\x82\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x12\xA6Wa\x12\xA6a&dV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x12\xCFW\x81` \x01` \x82\x02\x806\x837\x01\x90P[P\x90P_[\x82`\xFF\x16\x81`\xFF\x16\x10\x15a\x13\x1AWa\x12\xED\x88\x88\x86a\x1B;V[\x83\x83`\xFF\x16\x81Q\x81\x10a\x13\x02Wa\x13\x02a&xV[` \x90\x81\x02\x91\x90\x91\x01\x01\x91\x90\x91R\x93P`\x01\x01a\x12\xD4V[P`@Q\x80` \x01`@R\x80\x82\x81RP\x93PPP\x93P\x93\x91PPV[_a\x13\x80\x84\x84a\x13E\x85a\x1C{V[`@Q\x80`@\x01`@R\x80`\x13\x81R` \x01\x7FModule merkle tree:\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RPa\x1D#V[\x90P[\x93\x92PPPV[``\x81_a\x13\x99\x86\x86\x84a\x18\x91V[\x92P\x90P`\xFF\x81\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x13\xB9Wa\x13\xB9a&dV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x13\xFDW\x81` \x01[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x13\xD7W\x90P[P\x92P_[\x81`\xFF\x16\x81\x10\x15a\x14qW__a\x14\x1A\x89\x89\x87a\x1E5V[\x95P\x91Pa\x14)\x89\x89\x87a\x1E\x82V[\x80\x96P\x81\x92PPP`@Q\x80`@\x01`@R\x80\x83a\xFF\xFF\x16\x81R` \x01\x82\x81RP\x86\x84\x81Q\x81\x10a\x14\\Wa\x14\\a&xV[` \x90\x81\x02\x91\x90\x91\x01\x01RPP`\x01\x01a\x14\x02V[PP\x93P\x93\x91PPV[_a\x13\x80\x84\x84a\x14\x8A\x85a\x1E\xCBV[`@Q\x80`@\x01`@R\x80`\x18\x81R` \x01\x7FInstruction merkle tree:\0\0\0\0\0\0\0\0\x81RPa\x1D#V[`@Q\x7FFunction:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`)\x81\x01\x82\x90R_\x90\x81\x90`I\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90Pa\n\t\x85\x85\x83`@Q\x80`@\x01`@R\x80`\x15\x81R` \x01\x7FFunction merkle tree:\0\0\0\0\0\0\0\0\0\0\0\x81RPa\x1D#V[`@\x81\x01QQ`\xA0\x82\x01QQ_\x19\x81\x14\x80a\x15pWP_\x19\x82\x14[\x15a\x15}WPP`\x02\x90RV[a\x15\x8A\x83`\x80\x01Qa\x17\xF8V[`\xA0\x84\x01QR` \x83\x01Qa\x15\x9E\x90a\x16\x03V[`@\x84\x01QR`\x80\x83\x01Qa\x15\xB9\x90\x82` \x82\x01R``\x90RV[P` \x91\x82\x01Q\x80\x83\x01\x91\x90\x91R`@\x80Q\x92\x83\x01\x90R``\x82RRV[_a\x15\xE9\x82\x83a\x01@\x01Q_\x1Ca \xB1V[a\x15\xF4WP_\x91\x90PV[P_\x19a\x01@\x90\x91\x01R`\x01\x90V[` \x81\x01Q\x81QQQ_[\x81\x81\x10\x15a\x16\x88W\x83Qa\x16+\x90a\x16&\x90\x83a \xF1V[a!\x1DV[`@Q\x7FValue stack:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`,\x81\x01\x91\x90\x91R`L\x81\x01\x84\x90R`l\x01`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R\x80Q` \x90\x91\x01 \x92P`\x01\x01a\x16\x0EV[PP\x91\x90PV[_`\x01\x83\x01a\x16\xE0W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x19`$\x82\x01R\x7FMULTISTACK_NOSTACK_ACTIVE\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x038V[\x81\x15a\x17\xA6W\x83Q`\x01\x01a\x177W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x17`$\x82\x01R\x7FMULTISTACK_NOSTACK_MAIN\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x038V[\x83Q` \x80\x86\x01Q`@Qa\x17\x89\x93\x92\x87\x92\x91\x01\x7Fmultistack:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x0B\x81\x01\x93\x90\x93R`+\x83\x01\x91\x90\x91R`K\x82\x01R`k\x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90Pa\x13\x83V[\x83Q` \x80\x86\x01Q`@Q\x7Fmultistack:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x92\x81\x01\x92\x90\x92R`+\x82\x01\x86\x90R`K\x82\x01\x92\x90\x92R`k\x81\x01\x91\x90\x91R`\x8B\x01a\x17\x89V[` \x81\x01Q_[\x82QQ\x81\x10\x15a\x18\x8BWa\x18.\x83_\x01Q\x82\x81Q\x81\x10a\x18!Wa\x18!a&xV[` \x02` \x01\x01Qa!8V[`@Q\x7FStack frame stack:\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`2\x81\x01\x91\x90\x91R`R\x81\x01\x83\x90R`r\x01`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R\x80Q` \x90\x91\x01 \x91P`\x01\x01a\x17\xFFV[P\x91\x90PV[_\x81\x84\x84\x82\x81\x81\x10a\x18\xA5Wa\x18\xA5a&xV[\x91\x90\x91\x015`\xF8\x1C\x92P\x81\x90Pa\x18\xBB\x81a1wV[\x91PP\x93P\x93\x91PPV[a\x18\xCEa#\xEBV[\x81_a\x18\xDB\x86\x86\x84a\x1B;V[\x92P\x90P_a\x18\xEB\x87\x87\x85a\x1E\x82V[\x93P\x90P_\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x19\tWa\x19\ta&dV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x19BW\x81` \x01[a\x19/a#\xD2V[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x19'W\x90P[P\x90P_[\x81Q\x81\x10\x15a\x19\x85Wa\x19[\x89\x89\x87a!\xCFV[\x83\x83\x81Q\x81\x10a\x19mWa\x19ma&xV[` \x90\x81\x02\x91\x90\x91\x01\x01\x91\x90\x91R\x94P`\x01\x01a\x19GV[P`@\x80Q``\x81\x01\x82R\x90\x81\x01\x91\x82R\x90\x81R` \x81\x01\x92\x90\x92RP\x95\x90\x94P\x92PPPV[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x81_a\x19\xCC\x86\x86\x84a\x1B;V[\x92P\x90P_a\x19\xDC\x87\x87\x85a\x1B;V[`@\x80Q\x80\x82\x01\x90\x91R\x93\x84R` \x84\x01\x91\x90\x91R\x91\x97\x91\x96P\x90\x94PPPPPV[`@\x80Q\x80\x82\x01\x90\x91R``\x81R_` \x82\x01R\x81_a\x1A \x86\x86\x84a\x1B;V[\x92P\x90P``\x86\x86\x84\x81\x81\x10a\x1A8Wa\x1A8a&xV[\x90\x91\x015\x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x15\x90Pa\x1A\xD7W\x82a\x1Ao\x81a1wV[`@\x80Q`\x01\x80\x82R\x81\x83\x01\x90\x92R\x91\x95P\x90\x91P\x81` \x01[a\x1A\x91a%iV[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x1A\x89W\x90PP\x90Pa\x1A\xB1\x87\x87\x85a\"\xCCV[\x82_\x81Q\x81\x10a\x1A\xC3Wa\x1A\xC3a&xV[` \x02` \x01\x01\x81\x95P\x82\x90RPPa\x1B\x1AV[\x82a\x1A\xE1\x81a1wV[`@\x80Q_\x80\x82R` \x82\x01\x90\x92R\x91\x95P\x90\x91Pa\x1B\x16V[a\x1B\x03a%iV[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x1A\xFBW\x90P[P\x90P[`@Q\x80`@\x01`@R\x80\x82\x81R` \x01\x83\x81RP\x93PPP\x93P\x93\x91PPV[_\x81\x81a\x1BI\x86\x86\x84a\x1E\x82V[\x90\x97\x90\x96P\x94PPPPPV[_\x81\x81[`\x04\x81\x10\x15a\x1B\xA5W`\x08\x83c\xFF\xFF\xFF\xFF\x16\x90\x1B\x92P\x85\x85\x83\x81\x81\x10a\x1B\x82Wa\x1B\x82a&xV[\x91\x90\x91\x015`\xF8\x1C\x93\x90\x93\x17\x92P\x81a\x1B\x9A\x81a1wV[\x92PP`\x01\x01a\x1BZV[P\x93P\x93\x91PPV[_\x81\x81[`\x08\x81\x10\x15a\x1B\xA5W`\x08\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x1B\x92P\x85\x85\x83\x81\x81\x10a\x1B\xDEWa\x1B\xDEa&xV[\x91\x90\x91\x015`\xF8\x1C\x93\x90\x93\x17\x92P\x81a\x1B\xF6\x81a1wV[\x92PP`\x01\x01a\x1B\xB2V[`@\x80Q``\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x91\x90\x91R\x81_\x80\x80a\x1C,\x88\x88\x86a\x1B\xAEV[\x94P\x92Pa\x1C;\x88\x88\x86a\x1B\xAEV[\x94P\x91Pa\x1CJ\x88\x88\x86a\x1B;V[`@\x80Q``\x81\x01\x82Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x96\x87\x16\x81R\x94\x90\x95\x16` \x85\x01R\x93\x83\x01RP\x96\x90\x95P\x93PPPPV[_\x81_\x01Qa\x1C\x8D\x83` \x01Qa#QV[`@\x80\x85\x01Q``\x86\x01Q`\x80\x87\x01Q`\xA0\x88\x01Q\x93Qa\n\x87\x96\x95\x94\x90` \x01\x7FModule:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x07\x81\x01\x96\x90\x96R`'\x86\x01\x94\x90\x94R`G\x85\x01\x92\x90\x92R`g\x84\x01R`\x87\x83\x01R`\xE0\x1B\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16`\xA7\x82\x01R`\xAB\x01\x90V[\x81_[\x85QQ\x81\x10\x15a\x1D\xDEW\x84`\x01\x16_\x03a\x1D\x88W\x82\x82\x87_\x01Q\x83\x81Q\x81\x10a\x1DQWa\x1DQa&xV[` \x02` \x01\x01Q`@Q` \x01a\x1Dk\x93\x92\x91\x90a1\x8FV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x91Pa\x1D\xD2V[\x82\x86_\x01Q\x82\x81Q\x81\x10a\x1D\x9EWa\x1D\x9Ea&xV[` \x02` \x01\x01Q\x83`@Q` \x01a\x1D\xB9\x93\x92\x91\x90a1\x8FV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x91P[`\x01\x94\x85\x1C\x94\x01a\x1D&V[P\x83\x15a\x1E-W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0F`$\x82\x01R\x7FPROOF_TOO_SHORT\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x038V[\x94\x93PPPPV[_\x81\x81[`\x02\x81\x10\x15a\x1B\xA5W`\x08\x83a\xFF\xFF\x16\x90\x1B\x92P\x85\x85\x83\x81\x81\x10a\x1E_Wa\x1E_a&xV[\x91\x90\x91\x015`\xF8\x1C\x93\x90\x93\x17\x92P\x81a\x1Ew\x81a1wV[\x92PP`\x01\x01a\x1E9V[_\x81\x81[` \x81\x10\x15a\x1B\xA5W`\x08\x83\x90\x1B\x92P\x85\x85\x83\x81\x81\x10a\x1E\xA8Wa\x1E\xA8a&xV[\x91\x90\x91\x015`\xF8\x1C\x93\x90\x93\x17\x92P\x81a\x1E\xC0\x81a1wV[\x92PP`\x01\x01a\x1E\x86V[__\x82Q`\"a\x1E\xDB\x91\x90a1\xAEV[a\x1E\xE6\x90`\x0Ea&\xB4V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1E\xFEWa\x1E\xFEa&dV[`@Q\x90\x80\x82R\x80`\x1F\x01`\x1F\x19\x16` \x01\x82\x01`@R\x80\x15a\x1F(W` \x82\x01\x81\x806\x837\x01\x90P[P\x90P\x7FInstructions:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R_`\r\x90P\x83Q`\xF8\x1B\x82\x82\x81Q\x81\x10a\x1FmWa\x1Fma&xV[` \x01\x01\x90~\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16\x90\x81_\x1A\x90SP\x80a\x1F\xA5\x81a1wV[\x91P_\x90P[\x84Q\x81\x10\x15a \xA1W_\x85\x82\x81Q\x81\x10a\x1F\xC7Wa\x1F\xC7a&xV[` \x02` \x01\x01Q\x90P`\x08\x81_\x01Qa\xFF\xFF\x16\x90\x1C`\xF8\x1B\x84\x84\x81Q\x81\x10a\x1F\xF2Wa\x1F\xF2a&xV[` \x01\x01\x90~\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16\x90\x81_\x1A\x90SP\x80Q`\xF8\x1B\x84a 1\x85`\x01a&\xB4V[\x81Q\x81\x10a AWa Aa&xV[` \x01\x01\x90~\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16\x90\x81_\x1A\x90SPa z`\x02\x84a&\xB4V[` \x80\x83\x01Q\x86\x83\x01\x82\x01\x81\x90R\x91\x94Pa \x95\x90\x85a&\xB4V[\x93PPP`\x01\x01a\x1F\xABV[PP\x80Q` \x90\x91\x01 \x92\x91PPV[_``\x82\x90\x1C\x15a \xC3WP_a\x02\x9BV[Pc\xFF\xFF\xFF\xFF\x81\x81\x16a\x01 \x84\x01R` \x82\x90\x1C\x81\x16a\x01\0\x84\x01R`@\x91\x90\x91\x1C\x16`\xE0\x90\x91\x01R`\x01\x90V[a \xF9a#\xD2V[\x82Q\x80Q\x83\x90\x81\x10a!\rWa!\ra&xV[` \x02` \x01\x01Q\x90P\x92\x91PPV[_\x81_\x01Q\x82` \x01Q`@Q` \x01a\n\x87\x92\x91\x90a1\xC5V[_a!E\x82_\x01Qa!\x1DV[` \x80\x84\x01Q`@\x80\x86\x01Q``\x87\x01Q\x91Q\x7FStack frame:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x94\x81\x01\x94\x90\x94R`,\x84\x01\x94\x90\x94R`L\x83\x01\x91\x90\x91R\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xE0\x93\x84\x1B\x81\x16`l\x84\x01R\x92\x1B\x90\x91\x16`p\x82\x01R`t\x01a\n\x87V[a!\xD7a#\xD2V[\x81_\x85\x85\x83\x81\x81\x10a!\xEBWa!\xEBa&xV[\x91\x90\x91\x015`\xF8\x1C\x91P\x82\x90Pa\"\x01\x81a1wV[\x92PPa\"\x0C`\x06\x90V[`\x06\x81\x11\x15a\"\x1DWa\"\x1Da&\x8CV[`\xFF\x16\x81`\xFF\x16\x11\x15a\"rW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0E`$\x82\x01R\x7FBAD_VALUE_TYPE\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x038V[_a\"~\x87\x87\x85a\x1E\x82V[\x80\x94P\x81\x92PPP`@Q\x80`@\x01`@R\x80\x83`\xFF\x16`\x06\x81\x11\x15a\"\xA6Wa\"\xA6a&\x8CV[`\x06\x81\x11\x15a\"\xB7Wa\"\xB7a&\x8CV[\x81R` \x01\x82\x81RP\x93PPP\x93P\x93\x91PPV[a\"\xD4a%iV[\x81a\"\xDDa#\xD2V[___a\"\xEB\x89\x89\x87a!\xCFV[\x95P\x93Pa\"\xFA\x89\x89\x87a\x1B;V[\x95P\x92Pa#\t\x89\x89\x87a\x1BVV[\x95P\x91Pa#\x18\x89\x89\x87a\x1BVV[`@\x80Q`\x80\x81\x01\x82R\x96\x87R` \x87\x01\x95\x90\x95Rc\xFF\xFF\xFF\xFF\x93\x84\x16\x94\x86\x01\x94\x90\x94R\x90\x91\x16``\x84\x01RP\x90\x96\x90\x95P\x93PPPPV[\x80Q` \x80\x83\x01Q`@\x80\x85\x01Q\x90Q\x7FMemory:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x93\x81\x01\x93\x90\x93R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xC0\x94\x85\x1B\x81\x16`'\x85\x01R\x91\x90\x93\x1B\x16`/\x82\x01R`7\x81\x01\x91\x90\x91R_\x90`W\x01a\n\x87V[`@\x80Q\x80\x82\x01\x90\x91R\x80_[\x81R` \x01_\x81RP\x90V[`@\x80Q``\x80\x82\x01\x83R\x91\x81\x01\x91\x82R\x90\x81\x90a#\xDFV[`@\x80Qa\x01\x80\x81\x01\x90\x91R\x80_\x81R` \x01a$\x1Fa#\xEBV[\x81R` \x01a$?`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a$La#\xEBV[\x81R` \x01a$m`@Q\x80`@\x01`@R\x80``\x81R` \x01_\x81RP\x90V[\x81R` \x01a$\x8D`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R_` \x82\x01\x81\x90R`@\x82\x01\x81\x90R``\x82\x01\x81\x90R`\x80\x82\x01\x81\x90R`\xA0\x82\x01\x81\x90R`\xC0\x90\x91\x01R\x90V[`@Q\x80`\xC0\x01`@R\x80_\x81R` \x01a%\x02`@Q\x80``\x01`@R\x80_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_\x81RP\x90V[\x81R` \x01_\x81R` \x01_\x81R` \x01_\x81R` \x01_c\xFF\xFF\xFF\xFF\x16\x81RP\x90V[`@Q\x80`@\x01`@R\x80a%9a%KV[\x81R` \x01a%Fa%KV[\x90R\x90V[`@Q\x80`@\x01`@R\x80`\x02\x90` \x82\x02\x806\x837P\x91\x92\x91PPV[`@Q\x80`\x80\x01`@R\x80a%|a#\xD2V[\x81R_` \x82\x01\x81\x90R`@\x82\x01\x81\x90R``\x90\x91\x01R\x90V[__`@\x83\x85\x03\x12\x15a%\xA7W__\xFD[PP\x805\x92` \x90\x91\x015\x91PV[_____\x85\x87\x03`\xC0\x81\x12\x15a%\xCBW__\xFD[``\x81\x12\x15a%\xD8W__\xFD[P\x85\x94P``\x85\x015\x93P`\x80\x85\x015\x92P`\xA0\x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a&\x03W__\xFD[\x86\x01`\x1F\x81\x01\x88\x13a&\x13W__\xFD[\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a&)W__\xFD[\x88` \x82\x84\x01\x01\x11\x15a&:W__\xFD[\x95\x98\x94\x97P\x92\x95PPP` \x01\x91\x90V[_`\xA0\x82\x84\x03\x12\x80\x15a&\\W__\xFD[P\x90\x92\x91PPV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[\x80\x82\x01\x80\x82\x11\x15a\x02\x9BWa\x02\x9Ba&\xA0V[cNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[_c\xFF\xFF\xFF\xFF\x83\x16\x80a&\xF0Wa&\xF0a&\xC7V[\x80c\xFF\xFF\xFF\xFF\x84\x16\x04\x91PP\x92\x91PPV[_c\xFF\xFF\xFF\xFF\x83\x16\x80a'\x17Wa'\x17a&\xC7V[\x80c\xFF\xFF\xFF\xFF\x84\x16\x06\x91PP\x92\x91PPV[__\x85\x85\x11\x15a'7W__\xFD[\x83\x86\x11\x15a'CW__\xFD[PP\x82\x01\x93\x91\x90\x92\x03\x91PV[c\xFF\xFF\xFF\xFF\x81\x81\x16\x83\x82\x16\x01\x90\x81\x11\x15a\x02\x9BWa\x02\x9Ba&\xA0V[a\xFF\xFF\x81\x81\x16\x83\x82\x16\x01\x90\x81\x11\x15a\x02\x9BWa\x02\x9Ba&\xA0V[`\x03\x81\x10a'\x96Wa'\x96a&\x8CV[\x90RV[\x80Q`\x07\x81\x10a'\xACWa'\xACa&\x8CV[\x82R` \x90\x81\x01Q\x91\x01RV[\x80Q`@\x80\x84R\x90Q` \x91\x84\x01\x82\x90R\x80Q``\x85\x01\x81\x90R_\x92\x90\x91\x01\x90\x82\x90`\x80\x86\x01\x90[\x80\x83\x10\x15a(\x0BWa'\xF4\x82\x85Qa'\x9AV[`@\x82\x01\x91P` \x84\x01\x93P`\x01\x83\x01\x92Pa'\xE1V[P` \x85\x01Q` \x87\x01R\x80\x93PPPP\x92\x91PPV[\x80Q`@\x80\x84R\x81Q\x90\x84\x01\x81\x90R_\x91` \x01\x90\x82\x90``\x86\x01\x90[\x80\x83\x10\x15a(\x0BW\x83Qa(T\x83\x82Qa'\x9AV[` \x81\x01Q`@\x84\x01Rc\xFF\xFF\xFF\xFF`@\x82\x01Q\x16``\x84\x01Rc\xFF\xFF\xFF\xFF``\x82\x01Q\x16`\x80\x84\x01RP`\xA0\x82\x01\x91P` \x84\x01\x93P`\x01\x83\x01\x92Pa(?V[\x81\x83R\x81\x81` \x85\x017P_` \x82\x84\x01\x01R_` `\x1F\x19`\x1F\x84\x01\x16\x84\x01\x01\x90P\x92\x91PPV[\x865\x81R_` \x88\x015`\x01`\x01`\xA0\x1B\x03\x81\x16\x80\x82\x14a(\xDEW__\xFD[` \x84\x01RP`@\x88\x81\x015\x90\x83\x01Ra\x01\xE0``\x83\x01\x81\x90R\x87Qa)\x06\x91\x84\x01\x90a'\x86V[` \x87\x01Qa\x01\xC0a\x02\0\x84\x01Ra)\"a\x03\xA0\x84\x01\x82a'\xB9V[`@\x89\x01Q\x80Qa\x02 \x86\x01R` \x01Qa\x02@\x85\x01R``\x89\x01Q\x84\x82\x03a\x01\xDF\x19\x01a\x02`\x86\x01R\x90\x91Pa)Y\x82\x82a'\xB9V[\x91PP`\x80\x88\x01Qa\x01\xDF\x19\x84\x83\x03\x01a\x02\x80\x85\x01Ra)y\x82\x82a(\"V[\x91PP`\xA0\x88\x01Qa)\x99a\x02\xA0\x85\x01\x82\x80Q\x82R` \x90\x81\x01Q\x91\x01RV[P`\xC0\x88\x01Qa\x02\xE0\x84\x01R`\xE0\x88\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x03\0\x85\x01RPa\x01\0\x88\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x03 \x85\x01RPa\x01 \x88\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x03@\x85\x01RPa\x01@\x88\x01Qa\x03`\x84\x01Ra\x01`\x88\x01Qa\x03\x80\x84\x01Ra*k`\x80\x84\x01\x88\x80Q\x82R` \x81\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81Q\x16` \x84\x01Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF` \x82\x01Q\x16`@\x84\x01R`@\x81\x01Q``\x84\x01RP`@\x81\x01Q`\x80\x83\x01R``\x81\x01Q`\xA0\x83\x01R`\x80\x81\x01Q`\xC0\x83\x01Rc\xFF\xFF\xFF\xFF`\xA0\x82\x01Q\x16`\xE0\x83\x01RPPV[\x85Qa\xFF\xFF\x16a\x01\x80\x84\x01R` \x86\x01Qa\x01\xA0\x84\x01R\x82\x81\x03a\x01\xC0\x84\x01Ra*\x96\x81\x85\x87a(\x96V[\x99\x98PPPPPPPPPV[`@\x80Q\x90\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a*\xC6Wa*\xC6a&dV[`@R\x90V[`@Q` \x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a*\xC6Wa*\xC6a&dV[`@Q`\x80\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a*\xC6Wa*\xC6a&dV[`@Q`\xC0\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a*\xC6Wa*\xC6a&dV[`@Q``\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a*\xC6Wa*\xC6a&dV[`@Qa\x01\x80\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a*\xC6Wa*\xC6a&dV[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a+\xA5Wa+\xA5a&dV[`@R\x91\x90PV[`\x03\x81\x10a+\xB9W__\xFD[PV[\x80Qa\x0B_\x81a+\xADV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a+\xE0Wa+\xE0a&dV[P`\x05\x1B` \x01\x90V[_`@\x82\x84\x03\x12\x15a+\xFAW__\xFD[a,\x02a*\xA3V[\x90P\x81Q`\x07\x81\x10a,\x12W__\xFD[\x80\x82RP` \x82\x01Q` \x82\x01R\x92\x91PPV[_`@\x82\x84\x03\x12\x15a,6W__\xFD[a,>a*\xA3V[\x90P\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a,VW__\xFD[\x82\x01` \x81\x85\x03\x12\x15a,gW__\xFD[a,oa*\xCCV[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a,\x85W__\xFD[\x80\x83\x01\x92PP\x84`\x1F\x83\x01\x12a,\x99W__\xFD[\x81Qa,\xACa,\xA7\x82a+\xC7V[a+|V[\x80\x82\x82R` \x82\x01\x91P` \x83`\x06\x1B\x86\x01\x01\x92P\x87\x83\x11\x15a,\xCDW__\xFD[` \x85\x01\x94P[\x82\x85\x10\x15a,\xF9Wa,\xE6\x88\x86a+\xEAV[\x82R` \x82\x01\x91P`@\x85\x01\x94Pa,\xD4V[\x83RPP\x82RP` \x91\x82\x01Q\x91\x81\x01\x91\x90\x91R\x91\x90PV[_`@\x82\x84\x03\x12\x15a-\"W__\xFD[a-*a*\xA3V[\x82Q\x81R` \x92\x83\x01Q\x92\x81\x01\x92\x90\x92RP\x91\x90PV[\x80Qc\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x0B_W__\xFD[_`@\x82\x84\x03\x12\x15a-dW__\xFD[a-la*\xA3V[\x90P\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a-\x84W__\xFD[\x82\x01`\x1F\x81\x01\x84\x13a-\x94W__\xFD[\x80Qa-\xA2a,\xA7\x82a+\xC7V[\x80\x82\x82R` \x82\x01\x91P` `\xA0\x84\x02\x85\x01\x01\x92P\x86\x83\x11\x15a-\xC3W__\xFD[` \x84\x01\x93P[\x82\x84\x10\x15a.5W`\xA0\x84\x88\x03\x12\x15a-\xE1W__\xFD[a-\xE9a*\xEFV[a-\xF3\x88\x86a+\xEAV[\x81R`@\x85\x01Q` \x82\x01Ra.\x0B``\x86\x01a-AV[`@\x82\x01Ra.\x1C`\x80\x86\x01a-AV[``\x82\x01R\x82R`\xA0\x93\x90\x93\x01\x92` \x90\x91\x01\x90a-\xCAV[\x84RPPP` \x91\x82\x01Q\x91\x81\x01\x91\x90\x91R\x91\x90PV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a+\xB9W__\xFD[_\x81\x83\x03a\x01\0\x81\x12\x15a.sW__\xFD[a.{a+\x12V[\x83Q\x81R\x91P```\x1F\x19\x82\x01\x12\x15a.\x92W__\xFD[Pa.\x9Ba+5V[` \x83\x01Qa.\xA9\x81a.LV[\x81R`@\x83\x01Qa.\xB9\x81a.LV[` \x82\x81\x01\x91\x90\x91R``\x84\x81\x01Q`@\x80\x85\x01\x91\x90\x91R\x91\x84\x01\x92\x90\x92R`\x80\x80\x85\x01Q\x91\x84\x01\x91\x90\x91R`\xA0\x84\x01Q\x91\x83\x01\x91\x90\x91R`\xC0\x83\x01Q\x90\x82\x01Ra/\x06`\xE0\x83\x01a-AV[`\xA0\x82\x01R\x92\x91PPV[__a\x01 \x83\x85\x03\x12\x15a/#W__\xFD[\x82Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a/9W__\xFD[\x83\x01a\x01\xC0\x81\x86\x03\x12\x15a/KW__\xFD[a/Sa+XV[a/\\\x82a+\xBCV[\x81R` \x82\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a/wW__\xFD[a/\x83\x87\x82\x85\x01a,&V[` \x83\x01RPa/\x96\x86`@\x84\x01a-\x12V[`@\x82\x01R`\x80\x82\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a/\xB4W__\xFD[a/\xC0\x87\x82\x85\x01a,&V[``\x83\x01RP`\xA0\x82\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a/\xDFW__\xFD[a/\xEB\x87\x82\x85\x01a-TV[`\x80\x83\x01RPa/\xFE\x86`\xC0\x84\x01a-\x12V[`\xA0\x82\x01Ra\x01\0\x82\x01Q`\xC0\x82\x01Ra0\x1Ba\x01 \x83\x01a-AV[`\xE0\x82\x01Ra0-a\x01@\x83\x01a-AV[a\x01\0\x82\x01Ra0@a\x01`\x83\x01a-AV[a\x01 \x82\x01Ra\x01\x80\x82\x01Qa\x01@\x82\x01Ra\x01\xA0\x90\x91\x01Qa\x01`\x82\x01R\x91Pa0n\x84` \x85\x01a.aV[\x90P\x92P\x92\x90PV[_` \x82\x84\x03\x12\x15a0\x87W__\xFD[\x815a\x13\x83\x81a+\xADV[_`\x80\x82\x84\x03\x12\x80\x15a0\xA3W__\xFD[Pa0\xACa*\xA3V[\x83`\x1F\x84\x01\x12a0\xBAW__\xFD[`@a0\xC5\x81a+|V[\x80\x82\x86\x01\x87\x81\x11\x15a0\xD5W__\xFD[\x86[\x81\x81\x10\x15a0\xEFW\x805\x84R` \x93\x84\x01\x93\x01a0\xD7V[P\x81\x85R_\x92P\x87`\x1F\x82\x01\x12a1\x04W__\xFD[\x83\x91Pa1\x10\x82a+|V[\x93\x81\x01\x93\x91P\x81\x88\x85\x11\x15a1#W__\xFD[\x84\x82\x10\x15a1HW\x815a16\x81a.LV[\x83R` \x92\x83\x01\x92\x91\x90\x91\x01\x90a1#V[` \x86\x01RP\x92\x96\x95PPPPPPV[_`\xFF\x82\x16`\xFF\x81\x03a1nWa1na&\xA0V[`\x01\x01\x92\x91PPV[_`\x01\x82\x01a1\x88Wa1\x88a&\xA0V[P`\x01\x01\x90V[_\x84Q\x80` \x87\x01\x84^\x91\x90\x91\x01\x92\x83RP` \x82\x01R`@\x01\x91\x90PV[\x80\x82\x02\x81\x15\x82\x82\x04\x84\x14\x17a\x02\x9BWa\x02\x9Ba&\xA0V[\x7FValue:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R_`\x07\x84\x10a1\xF9Wa1\xF9a&\x8CV[P`\xF8\x92\x90\x92\x1B`\x06\x83\x01R`\x07\x82\x01R`'\x01\x90V\xFE\xA2dipfsX\"\x12 \xCA\x14M\xF7\xDBV\xF1h\xF5\x1E\x04\xD1\x1A\xFA<\x87\x1Fl\x8D\xB3\xBFN6E\x1E\x9A\x1A\xFB\x80\xCB\n\xD8dsolcC\0\x08\x1C\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f5ffd5b506004361061007a575f3560e01c80635f52fd7c116100585780635f52fd7c146100e157806366e5d9c3146100f4578063b5112fd214610107578063c39619c41461011a575f5ffd5b806304997be41461007e5780631f128bc0146100a457806330a5509f146100cf575b5f5ffd5b61009161008c366004612596565b61012d565b6040519081526020015b60405180910390f35b6001546100b7906001600160a01b031681565b6040516001600160a01b03909116815260200161009b565b5f546100b7906001600160a01b031681565b6003546100b7906001600160a01b031681565b6002546100b7906001600160a01b031681565b6100916101153660046125b6565b6102a1565b61009161012836600461264b565b610a12565b604080516003808252608082019092525f91829190816020015b61014f6123d2565b81526020019060019003908161014757905050905061016c610b64565b815f8151811061017e5761017e612678565b60200260200101819052506101925f610b84565b816001815181106101a5576101a5612678565b60200260200101819052506101b95f610b84565b816002815181106101cc576101cc612678565b60209081029190910181019190915260408051808301825283815281518083019092528082525f928201929092526102026123eb565b604080518082018252606081525f602080830182905283518085019094528301525f1982529060408051610180810182525f80825260208201879052918101839052606081018590526080810184905260a0810183905260c081018b905260e0810182905261010081018290526101208101919091525f19610140820152610160810189905261029181610baa565b9750505050505050505b92915050565b5f6102aa612404565b6102b26124bc565b604080516020810190915260608152604080518082019091525f80825260208201525f6102e0888883610df4565b9095509050886102ef86610baa565b146103415760405162461bcd60e51b815260206004820152601360248201527f4d414348494e455f4245464f52455f484153480000000000000000000000000060448201526064015b60405180910390fd5b5f855160028111156103555761035561268c565b1461043c57610362612526565b61036d89898461103f565b60c088015190935090915061038182611119565b146103ce5760405162461bcd60e51b815260206004820152601060248201527f4241445f474c4f42414c5f5354415445000000000000000000000000000000006044820152606401610338565b6001865160028111156103e3576103e361268c565b1480156103ee57508a155b801561040f57508b3561040382602001515190565b67ffffffffffffffff16105b15610433576104268660c001518d6040013561012d565b9650505050505050610a09565b61042686610baa565b6508000000000061044e8b60016126b4565b0361046c576002855261046085610baa565b95505050505050610a09565b6104778888836111a8565b9094509050610487888883611269565b80925081945050508461016001516104b48660e0015163ffffffff1686866113369092919063ffffffff16565b146105015760405162461bcd60e51b815260206004820152600c60248201527f4d4f44554c45535f524f4f5400000000000000000000000000000000000000006044820152606401610338565b60606105196040518060200160405280606081525090565b6040805160208101909152606081526105338b8b8661138a565b945092506105428b8b86611269565b945091506105518b8b86611269565b80955081925050505f61058660408a610120015161056f91906126db565b63ffffffff16858561147b9092919063ffffffff16565b90505f6105a98a610100015163ffffffff1683856114c59092919063ffffffff16565b9050886060015181146105fe5760405162461bcd60e51b815260206004820152601260248201527f4241445f46554e4354494f4e535f524f4f5400000000000000000000000000006044820152606401610338565b8460408b61012001516106119190612702565b63ffffffff168151811061062757610627612678565b60200260200101519650505050505087878290809261064893929190612729565b97509750505f8460e0015163ffffffff1690506001856101200181815161066f9190612750565b63ffffffff1690525081515f602861ffff8316108015906106955750603561ffff831611155b806106b55750603661ffff8316108015906106b55750603e61ffff831611155b806106c4575061ffff8216603f145b806106d3575061ffff82166040145b156106ea57506001546001600160a01b0316610900565b61ffff821660451480610701575061ffff82166050145b8061072f5750604661ffff83161080159061072f57506107236009604661276c565b61ffff168261ffff1611155b8061075d5750606761ffff83161080159061075d57506107516002606761276c565b61ffff168261ffff1611155b8061077d5750606a61ffff83161080159061077d5750607861ffff831611155b806107ab5750605161ffff8316108015906107ab575061079f6009605161276c565b61ffff168261ffff1611155b806107d95750607961ffff8316108015906107d957506107cd6002607961276c565b61ffff168261ffff1611155b806107f95750607c61ffff8316108015906107f95750608a61ffff831611155b80610808575061ffff821660a7145b80610825575061ffff821660ac1480610825575061ffff821660ad145b80610845575060c061ffff831610801590610845575060c461ffff831611155b80610865575060bc61ffff831610801590610865575060bf61ffff831611155b1561087c57506002546001600160a01b0316610900565b61801061ffff831610801590610898575061801361ffff831611155b806108ba575061802061ffff8316108015906108ba575061802461ffff831611155b806108dc575061803061ffff8316108015906108dc575061803261ffff831611155b156108f357506003546001600160a01b0316610900565b505f546001600160a01b03165b806001600160a01b031663a92cb5018e8989888f8f6040518763ffffffff1660e01b8152600401610936969594939291906128bf565b5f60405180830381865afa158015610950573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526109779190810190612f11565b90975095505f61ffff83166180231480610996575061ffff8316618024145b15905080156109b1576109aa868589611336565b6101608901525b6002885160028111156109c6576109c661268c565b1480156109d957506101408801515f1914155b156109f5576109e788611555565b6109f0886115d7565b505f88525b6109fe88610baa565b985050505050505050505b95945050505050565b5f6001610a2560a0840160808501613077565b6002811115610a3657610a3661268c565b03610aa457610a52610a4d36849003840184613092565b611119565b6040517f4d616368696e652066696e69736865643a000000000000000000000000000000602082015260318101919091526051015b604051602081830303815290604052805190602001209050919050565b6002610ab660a0840160808501613077565b6002811115610ac757610ac761268c565b03610b1757610ade610a4d36849003840184613092565b6040517f4d616368696e65206572726f7265643a0000000000000000000000000000000060208201526030810191909152605001610a87565b60405162461bcd60e51b815260206004820152601260248201527f4241445f4d414348494e455f53544154555300000000000000000000000000006044820152606401610338565b919050565b610b6c6123d2565b5060408051808201909152600481525f602082015290565b610b8c6123d2565b50604080518082019091525f815263ffffffff909116602082015290565b5f8082516002811115610bbf57610bbf61268c565b03610cfc575f610beb610bd58460200151611603565b610140850151604086015191905f19141561168f565b90505f610c14610bfe85608001516117f8565b61014086015160a087015191905f19141561168f565b90505f82610c258660600151611603565b60c087015160e0808901516101008a01516101208b01516101408c01516101608d01516040517f4d616368696e652072756e6e696e673a00000000000000000000000000000000602082015260308101999099526050890197909752607088018a905260908801959095527fffffffff0000000000000000000000000000000000000000000000000000000092841b831660b088015290831b821660b487015290911b1660b884015260bc83015260dc82015260fc0160408051601f19818403018152919052805160209091012095945050505050565b600182516002811115610d1157610d1161268c565b03610d545760c08201516040517f4d616368696e652066696e69736865643a00000000000000000000000000000060208201526031810191909152605101610a87565b600282516002811115610d6957610d6961268c565b03610dac5760c08201516040517f4d616368696e65206572726f7265643a0000000000000000000000000000000060208201526030810191909152605001610a87565b60405162461bcd60e51b815260206004820152600f60248201527f4241445f4d4143485f53544154555300000000000000000000000000000000006044820152606401610338565b610dfc612404565b815f80610e0a878785611891565b9350905060ff81165f03610e20575f9150610e90565b8060ff16600103610e345760019150610e90565b8060ff16600203610e485760029150610e90565b60405162461bcd60e51b815260206004820152601360248201527f554e4b4e4f574e5f4d4143485f535441545553000000000000000000000000006044820152606401610338565b50610e996123eb565b610ea16123eb565b604080518082019091525f808252602082015260408051808201909152606081525f6020820152604080518082019091525f8082526020820152610ee68b8b896118c6565b97509450610ef58b8b896119ac565b97509250610f048b8b896118c6565b97509350610f138b8b896119ff565b97509150610f228b8b896119ac565b8098508192505050604051806101800160405280876002811115610f4857610f4861268c565b8152602081019690965260408601939093526060850193909352608084015260a08301919091525f60c0830181905260e08301819052610100830181905261012083018190526101408301819052610160909201919091529250610faf9050858583611b3b565b60c08401919091529050610fc4858583611b56565b63ffffffff90911660e08401529050610fde858583611b56565b63ffffffff9091166101008401529050610ff9858583611b56565b63ffffffff9091166101208401529050611014858583611b3b565b610140840191909152905061102a858583611b3b565b61016084019190915291959194509092505050565b611047612526565b8161105061254b565b61105861254b565b5f5b600260ff821610156110a257611071888886611b3b565b848360ff166002811061108657611086612678565b602002019190915293508061109a81613159565b91505061105a565b505f5b600260ff821610156110fc576110bc888886611bae565b838360ff16600281106110d1576110d1612678565b67ffffffffffffffff90931660209390930201919091529350806110f481613159565b9150506110a5565b506040805180820190915291825260208201529590945092505050565b80518051602091820151828401518051908401516040517f476c6f62616c2073746174653a0000000000000000000000000000000000000095810195909552602d850193909352604d8401919091527fffffffffffffffff00000000000000000000000000000000000000000000000060c091821b8116606d85015291901b1660758201525f90607d01610a87565b6111b06124bc565b604080516060810182525f808252602082018190529181018290528391905f5f5f5f6111dd8b8b89611b3b565b975095506111ec8b8b89611c01565b975094506111fb8b8b89611b3b565b9750935061120a8b8b89611b3b565b975092506112198b8b89611b3b565b975091506112288b8b89611b56565b6040805160c081018252988952602089019790975295870194909452506060850191909152608084015263ffffffff1660a083015290969095509350505050565b604080516020810190915260608152815f611285868684611891565b925090505f60ff821667ffffffffffffffff8111156112a6576112a6612664565b6040519080825280602002602001820160405280156112cf578160200160208202803683370190505b5090505f5b8260ff168160ff16101561131a576112ed888886611b3b565b838360ff168151811061130257611302612678565b602090810291909101019190915293506001016112d4565b5060405180602001604052808281525093505050935093915050565b5f611380848461134585611c7b565b6040518060400160405280601381526020017f4d6f64756c65206d65726b6c6520747265653a00000000000000000000000000815250611d23565b90505b9392505050565b6060815f611399868684611891565b9250905060ff811667ffffffffffffffff8111156113b9576113b9612664565b6040519080825280602002602001820160405280156113fd57816020015b604080518082019091525f80825260208201528152602001906001900390816113d75790505b5092505f5b8160ff16811015611471575f5f61141a898987611e35565b95509150611429898987611e82565b809650819250505060405180604001604052808361ffff1681526020018281525086848151811061145c5761145c612678565b60209081029190910101525050600101611402565b5050935093915050565b5f611380848461148a85611ecb565b6040518060400160405280601881526020017f496e737472756374696f6e206d65726b6c6520747265653a0000000000000000815250611d23565b6040517f46756e6374696f6e3a00000000000000000000000000000000000000000000006020820152602981018290525f908190604901604051602081830303815290604052805190602001209050610a098585836040518060400160405280601581526020017f46756e6374696f6e206d65726b6c6520747265653a0000000000000000000000815250611d23565b60408101515160a0820151515f1981148061157057505f1982145b1561157d57505060029052565b61158a83608001516117f8565b60a084015152602083015161159e90611603565b60408401515260808301516115b99082602082015260609052565b50602091820151808301919091526040805192830190526060825252565b5f6115e9828361014001515f1c6120b1565b6115f457505f919050565b505f1961014090910152600190565b6020810151815151515f5b8181101561168857835161162b9061162690836120f1565b61211d565b6040517f56616c756520737461636b3a00000000000000000000000000000000000000006020820152602c810191909152604c8101849052606c0160408051601f198184030181529190528051602090910120925060010161160e565b5050919050565b5f600183016116e05760405162461bcd60e51b815260206004820152601960248201527f4d554c5449535441434b5f4e4f535441434b5f414354495645000000000000006044820152606401610338565b81156117a65783516001016117375760405162461bcd60e51b815260206004820152601760248201527f4d554c5449535441434b5f4e4f535441434b5f4d41494e0000000000000000006044820152606401610338565b83516020808601516040516117899392879291017f6d756c7469737461636b3a0000000000000000000000000000000000000000008152600b810193909352602b830191909152604b820152606b0190565b604051602081830303815290604052805190602001209050611383565b83516020808601516040517f6d756c7469737461636b3a00000000000000000000000000000000000000000092810192909252602b8201869052604b820192909252606b810191909152608b01611789565b60208101515f5b82515181101561188b5761182e835f0151828151811061182157611821612678565b6020026020010151612138565b6040517f537461636b206672616d6520737461636b3a0000000000000000000000000000602082015260328101919091526052810183905260720160408051601f19818403018152919052805160209091012091506001016117ff565b50919050565b5f818484828181106118a5576118a5612678565b919091013560f81c92508190506118bb81613177565b915050935093915050565b6118ce6123eb565b815f6118db868684611b3b565b925090505f6118eb878785611e82565b935090505f8167ffffffffffffffff81111561190957611909612664565b60405190808252806020026020018201604052801561194257816020015b61192f6123d2565b8152602001906001900390816119275790505b5090505f5b81518110156119855761195b8989876121cf565b83838151811061196d5761196d612678565b60209081029190910101919091529450600101611947565b50604080516060810182529081019182529081526020810192909252509590945092505050565b604080518082019091525f8082526020820152815f6119cc868684611b3b565b925090505f6119dc878785611b3b565b604080518082019091529384526020840191909152919791965090945050505050565b60408051808201909152606081525f6020820152815f611a20868684611b3b565b925090506060868684818110611a3857611a38612678565b909101357fff0000000000000000000000000000000000000000000000000000000000000016159050611ad75782611a6f81613177565b604080516001808252818301909252919550909150816020015b611a91612569565b815260200190600190039081611a89579050509050611ab18787856122cc565b825f81518110611ac357611ac3612678565b602002602001018195508290525050611b1a565b82611ae181613177565b604080515f80825260208201909252919550909150611b16565b611b03612569565b815260200190600190039081611afb5790505b5090505b60405180604001604052808281526020018381525093505050935093915050565b5f8181611b49868684611e82565b9097909650945050505050565b5f81815b6004811015611ba55760088363ffffffff16901b9250858583818110611b8257611b82612678565b919091013560f81c93909317925081611b9a81613177565b925050600101611b5a565b50935093915050565b5f81815b6008811015611ba55760088367ffffffffffffffff16901b9250858583818110611bde57611bde612678565b919091013560f81c93909317925081611bf681613177565b925050600101611bb2565b604080516060810182525f8082526020820181905291810191909152815f8080611c2c888886611bae565b94509250611c3b888886611bae565b94509150611c4a888886611b3b565b6040805160608101825267ffffffffffffffff96871681529490951660208501529383015250969095509350505050565b5f815f0151611c8d8360200151612351565b6040808501516060860151608087015160a08801519351610a87969594906020017f4d6f64756c653a0000000000000000000000000000000000000000000000000081526007810196909652602786019490945260478501929092526067840152608783015260e01b7fffffffff000000000000000000000000000000000000000000000000000000001660a782015260ab0190565b815f5b855151811015611dde57846001165f03611d88578282875f01518381518110611d5157611d51612678565b6020026020010151604051602001611d6b9392919061318f565b604051602081830303815290604052805190602001209150611dd2565b82865f01518281518110611d9e57611d9e612678565b602002602001015183604051602001611db99392919061318f565b6040516020818303038152906040528051906020012091505b600194851c9401611d26565b508315611e2d5760405162461bcd60e51b815260206004820152600f60248201527f50524f4f465f544f4f5f53484f525400000000000000000000000000000000006044820152606401610338565b949350505050565b5f81815b6002811015611ba55760088361ffff16901b9250858583818110611e5f57611e5f612678565b919091013560f81c93909317925081611e7781613177565b925050600101611e39565b5f81815b6020811015611ba557600883901b9250858583818110611ea857611ea8612678565b919091013560f81c93909317925081611ec081613177565b925050600101611e86565b5f5f82516022611edb91906131ae565b611ee690600e6126b4565b67ffffffffffffffff811115611efe57611efe612664565b6040519080825280601f01601f191660200182016040528015611f28576020820181803683370190505b5090507f496e737472756374696f6e733a0000000000000000000000000000000000000060208201525f600d9050835160f81b828281518110611f6d57611f6d612678565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a90535080611fa581613177565b91505f90505b84518110156120a1575f858281518110611fc757611fc7612678565b602002602001015190506008815f015161ffff16901c60f81b848481518110611ff257611ff2612678565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a905350805160f81b846120318560016126b4565b8151811061204157612041612678565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a90535061207a6002846126b4565b602080830151868301820181905291945061209590856126b4565b93505050600101611fab565b5050805160209091012092915050565b5f606082901c156120c357505f61029b565b5063ffffffff818116610120840152602082901c811661010084015260409190911c1660e090910152600190565b6120f96123d2565b825180518390811061210d5761210d612678565b6020026020010151905092915050565b5f815f01518260200151604051602001610a879291906131c5565b5f612145825f015161211d565b602080840151604080860151606087015191517f537461636b206672616d653a000000000000000000000000000000000000000094810194909452602c840194909452604c8301919091527fffffffff0000000000000000000000000000000000000000000000000000000060e093841b8116606c840152921b9091166070820152607401610a87565b6121d76123d2565b815f8585838181106121eb576121eb612678565b919091013560f81c915082905061220181613177565b92505061220c600690565b600681111561221d5761221d61268c565b60ff168160ff1611156122725760405162461bcd60e51b815260206004820152600e60248201527f4241445f56414c55455f545950450000000000000000000000000000000000006044820152606401610338565b5f61227e878785611e82565b809450819250505060405180604001604052808360ff1660068111156122a6576122a661268c565b60068111156122b7576122b761268c565b81526020018281525093505050935093915050565b6122d4612569565b816122dd6123d2565b5f5f5f6122eb8989876121cf565b955093506122fa898987611b3b565b95509250612309898987611b56565b95509150612318898987611b56565b60408051608081018252968752602087019590955263ffffffff9384169486019490945290911660608401525090969095509350505050565b805160208083015160408085015190517f4d656d6f72793a00000000000000000000000000000000000000000000000000938101939093527fffffffffffffffff00000000000000000000000000000000000000000000000060c094851b811660278501529190931b16602f82015260378101919091525f90605701610a87565b60408051808201909152805f5b81526020015f81525090565b60408051606080820183529181019182529081906123df565b604080516101808101909152805f815260200161241f6123eb565b815260200161243f60405180604001604052805f81526020015f81525090565b815260200161244c6123eb565b815260200161246d6040518060400160405280606081526020015f81525090565b815260200161248d60405180604001604052805f81526020015f81525090565b81525f6020820181905260408201819052606082018190526080820181905260a0820181905260c09091015290565b6040518060c001604052805f815260200161250260405180606001604052805f67ffffffffffffffff1681526020015f67ffffffffffffffff1681526020015f81525090565b81526020015f81526020015f81526020015f81526020015f63ffffffff1681525090565b604051806040016040528061253961254b565b815260200161254661254b565b905290565b60405180604001604052806002906020820280368337509192915050565b604051806080016040528061257c6123d2565b81525f602082018190526040820181905260609091015290565b5f5f604083850312156125a7575f5ffd5b50508035926020909101359150565b5f5f5f5f5f85870360c08112156125cb575f5ffd5b60608112156125d8575f5ffd5b50859450606085013593506080850135925060a085013567ffffffffffffffff811115612603575f5ffd5b8601601f81018813612613575f5ffd5b803567ffffffffffffffff811115612629575f5ffd5b88602082840101111561263a575f5ffd5b959894975092955050506020019190565b5f60a082840312801561265c575f5ffd5b509092915050565b634e487b7160e01b5f52604160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52602160045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b8082018082111561029b5761029b6126a0565b634e487b7160e01b5f52601260045260245ffd5b5f63ffffffff8316806126f0576126f06126c7565b8063ffffffff84160491505092915050565b5f63ffffffff831680612717576127176126c7565b8063ffffffff84160691505092915050565b5f5f85851115612737575f5ffd5b83861115612743575f5ffd5b5050820193919092039150565b63ffffffff818116838216019081111561029b5761029b6126a0565b61ffff818116838216019081111561029b5761029b6126a0565b600381106127965761279661268c565b9052565b8051600781106127ac576127ac61268c565b8252602090810151910152565b80516040808452905160209184018290528051606085018190525f9290910190829060808601905b8083101561280b576127f482855161279a565b6040820191506020840193506001830192506127e1565b506020850151602087015280935050505092915050565b8051604080845281519084018190525f9160200190829060608601905b8083101561280b57835161285483825161279a565b6020810151604084015263ffffffff604082015116606084015263ffffffff60608201511660808401525060a08201915060208401935060018301925061283f565b81835281816020850137505f602082840101525f6020601f19601f840116840101905092915050565b863581525f60208801356001600160a01b0381168082146128de575f5ffd5b602084015250604088810135908301526101e060608301819052875161290691840190612786565b60208701516101c06102008401526129226103a08401826127b9565b604089015180516102208601526020015161024085015260608901518482036101df190161026086015290915061295982826127b9565b91505060808801516101df19848303016102808501526129798282612822565b91505060a08801516129996102a085018280518252602090810151910152565b5060c08801516102e084015260e088015163ffffffff81166103008501525061010088015163ffffffff81166103208501525061012088015163ffffffff811661034085015250610140880151610360840152610160880151610380840152612a6b608084018880518252602081015167ffffffffffffffff815116602084015267ffffffffffffffff6020820151166040840152604081015160608401525060408101516080830152606081015160a0830152608081015160c083015263ffffffff60a08201511660e08301525050565b855161ffff1661018084015260208601516101a08401528281036101c0840152612a96818587612896565b9998505050505050505050565b6040805190810167ffffffffffffffff81118282101715612ac657612ac6612664565b60405290565b6040516020810167ffffffffffffffff81118282101715612ac657612ac6612664565b6040516080810167ffffffffffffffff81118282101715612ac657612ac6612664565b60405160c0810167ffffffffffffffff81118282101715612ac657612ac6612664565b6040516060810167ffffffffffffffff81118282101715612ac657612ac6612664565b604051610180810167ffffffffffffffff81118282101715612ac657612ac6612664565b604051601f8201601f1916810167ffffffffffffffff81118282101715612ba557612ba5612664565b604052919050565b60038110612bb9575f5ffd5b50565b8051610b5f81612bad565b5f67ffffffffffffffff821115612be057612be0612664565b5060051b60200190565b5f60408284031215612bfa575f5ffd5b612c02612aa3565b9050815160078110612c12575f5ffd5b808252506020820151602082015292915050565b5f60408284031215612c36575f5ffd5b612c3e612aa3565b9050815167ffffffffffffffff811115612c56575f5ffd5b820160208185031215612c67575f5ffd5b612c6f612acc565b815167ffffffffffffffff811115612c85575f5ffd5b80830192505084601f830112612c99575f5ffd5b8151612cac612ca782612bc7565b612b7c565b8082825260208201915060208360061b860101925087831115612ccd575f5ffd5b6020850194505b82851015612cf957612ce68886612bea565b8252602082019150604085019450612cd4565b8352505082525060209182015191810191909152919050565b5f60408284031215612d22575f5ffd5b612d2a612aa3565b825181526020928301519281019290925250919050565b805163ffffffff81168114610b5f575f5ffd5b5f60408284031215612d64575f5ffd5b612d6c612aa3565b9050815167ffffffffffffffff811115612d84575f5ffd5b8201601f81018413612d94575f5ffd5b8051612da2612ca782612bc7565b80828252602082019150602060a08402850101925086831115612dc3575f5ffd5b6020840193505b82841015612e355760a08488031215612de1575f5ffd5b612de9612aef565b612df38886612bea565b815260408501516020820152612e0b60608601612d41565b6040820152612e1c60808601612d41565b6060820152825260a09390930192602090910190612dca565b845250505060209182015191810191909152919050565b67ffffffffffffffff81168114612bb9575f5ffd5b5f818303610100811215612e73575f5ffd5b612e7b612b12565b8351815291506060601f1982011215612e92575f5ffd5b50612e9b612b35565b6020830151612ea981612e4c565b81526040830151612eb981612e4c565b602082810191909152606084810151604080850191909152918401929092526080808501519184019190915260a08401519183019190915260c083015190820152612f0660e08301612d41565b60a082015292915050565b5f5f6101208385031215612f23575f5ffd5b825167ffffffffffffffff811115612f39575f5ffd5b83016101c08186031215612f4b575f5ffd5b612f53612b58565b612f5c82612bbc565b8152602082015167ffffffffffffffff811115612f77575f5ffd5b612f8387828501612c26565b602083015250612f968660408401612d12565b6040820152608082015167ffffffffffffffff811115612fb4575f5ffd5b612fc087828501612c26565b60608301525060a082015167ffffffffffffffff811115612fdf575f5ffd5b612feb87828501612d54565b608083015250612ffe8660c08401612d12565b60a082015261010082015160c082015261301b6101208301612d41565b60e082015261302d6101408301612d41565b6101008201526130406101608301612d41565b6101208201526101808201516101408201526101a090910151610160820152915061306e8460208501612e61565b90509250929050565b5f60208284031215613087575f5ffd5b813561138381612bad565b5f60808284031280156130a3575f5ffd5b506130ac612aa3565b83601f8401126130ba575f5ffd5b60406130c581612b7c565b80828601878111156130d5575f5ffd5b865b818110156130ef5780358452602093840193016130d7565b508185525f925087601f820112613104575f5ffd5b83915061311082612b7c565b9381019391508188851115613123575f5ffd5b8482101561314857813561313681612e4c565b83526020928301929190910190613123565b602086015250929695505050505050565b5f60ff821660ff810361316e5761316e6126a0565b60010192915050565b5f60018201613188576131886126a0565b5060010190565b5f84518060208701845e91909101928352506020820152604001919050565b808202811582820484141761029b5761029b6126a0565b7f56616c75653a000000000000000000000000000000000000000000000000000081525f600784106131f9576131f961268c565b5060f89290921b600683015260078201526027019056fea2646970667358221220ca144df7db56f168f51e04d11afa3c871f6c8db3bf4e36451e9a1afb80cb0ad864736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0zW_5`\xE0\x1C\x80c_R\xFD|\x11a\0XW\x80c_R\xFD|\x14a\0\xE1W\x80cf\xE5\xD9\xC3\x14a\0\xF4W\x80c\xB5\x11/\xD2\x14a\x01\x07W\x80c\xC3\x96\x19\xC4\x14a\x01\x1AW__\xFD[\x80c\x04\x99{\xE4\x14a\0~W\x80c\x1F\x12\x8B\xC0\x14a\0\xA4W\x80c0\xA5P\x9F\x14a\0\xCFW[__\xFD[a\0\x91a\0\x8C6`\x04a%\x96V[a\x01-V[`@Q\x90\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[`\x01Ta\0\xB7\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01a\0\x9BV[_Ta\0\xB7\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[`\x03Ta\0\xB7\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[`\x02Ta\0\xB7\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[a\0\x91a\x01\x156`\x04a%\xB6V[a\x02\xA1V[a\0\x91a\x01(6`\x04a&KV[a\n\x12V[`@\x80Q`\x03\x80\x82R`\x80\x82\x01\x90\x92R_\x91\x82\x91\x90\x81` \x01[a\x01Oa#\xD2V[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x01GW\x90PP\x90Pa\x01la\x0BdV[\x81_\x81Q\x81\x10a\x01~Wa\x01~a&xV[` \x02` \x01\x01\x81\x90RPa\x01\x92_a\x0B\x84V[\x81`\x01\x81Q\x81\x10a\x01\xA5Wa\x01\xA5a&xV[` \x02` \x01\x01\x81\x90RPa\x01\xB9_a\x0B\x84V[\x81`\x02\x81Q\x81\x10a\x01\xCCWa\x01\xCCa&xV[` \x90\x81\x02\x91\x90\x91\x01\x81\x01\x91\x90\x91R`@\x80Q\x80\x83\x01\x82R\x83\x81R\x81Q\x80\x83\x01\x90\x92R\x80\x82R_\x92\x82\x01\x92\x90\x92Ra\x02\x02a#\xEBV[`@\x80Q\x80\x82\x01\x82R``\x81R_` \x80\x83\x01\x82\x90R\x83Q\x80\x85\x01\x90\x94R\x83\x01R_\x19\x82R\x90`@\x80Qa\x01\x80\x81\x01\x82R_\x80\x82R` \x82\x01\x87\x90R\x91\x81\x01\x83\x90R``\x81\x01\x85\x90R`\x80\x81\x01\x84\x90R`\xA0\x81\x01\x83\x90R`\xC0\x81\x01\x8B\x90R`\xE0\x81\x01\x82\x90Ra\x01\0\x81\x01\x82\x90Ra\x01 \x81\x01\x91\x90\x91R_\x19a\x01@\x82\x01Ra\x01`\x81\x01\x89\x90Ra\x02\x91\x81a\x0B\xAAV[\x97PPPPPPPP[\x92\x91PPV[_a\x02\xAAa$\x04V[a\x02\xB2a$\xBCV[`@\x80Q` \x81\x01\x90\x91R``\x81R`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R_a\x02\xE0\x88\x88\x83a\r\xF4V[\x90\x95P\x90P\x88a\x02\xEF\x86a\x0B\xAAV[\x14a\x03AW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x13`$\x82\x01R\x7FMACHINE_BEFORE_HASH\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01[`@Q\x80\x91\x03\x90\xFD[_\x85Q`\x02\x81\x11\x15a\x03UWa\x03Ua&\x8CV[\x14a\x04<Wa\x03ba%&V[a\x03m\x89\x89\x84a\x10?V[`\xC0\x88\x01Q\x90\x93P\x90\x91Pa\x03\x81\x82a\x11\x19V[\x14a\x03\xCEW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x10`$\x82\x01R\x7FBAD_GLOBAL_STATE\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x038V[`\x01\x86Q`\x02\x81\x11\x15a\x03\xE3Wa\x03\xE3a&\x8CV[\x14\x80\x15a\x03\xEEWP\x8A\x15[\x80\x15a\x04\x0FWP\x8B5a\x04\x03\x82` \x01QQ\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x10[\x15a\x043Wa\x04&\x86`\xC0\x01Q\x8D`@\x015a\x01-V[\x96PPPPPPPa\n\tV[a\x04&\x86a\x0B\xAAV[e\x08\0\0\0\0\0a\x04N\x8B`\x01a&\xB4V[\x03a\x04lW`\x02\x85Ra\x04`\x85a\x0B\xAAV[\x95PPPPPPa\n\tV[a\x04w\x88\x88\x83a\x11\xA8V[\x90\x94P\x90Pa\x04\x87\x88\x88\x83a\x12iV[\x80\x92P\x81\x94PPP\x84a\x01`\x01Qa\x04\xB4\x86`\xE0\x01Qc\xFF\xFF\xFF\xFF\x16\x86\x86a\x136\x90\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[\x14a\x05\x01W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0C`$\x82\x01R\x7FMODULES_ROOT\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x038V[``a\x05\x19`@Q\x80` \x01`@R\x80``\x81RP\x90V[`@\x80Q` \x81\x01\x90\x91R``\x81Ra\x053\x8B\x8B\x86a\x13\x8AV[\x94P\x92Pa\x05B\x8B\x8B\x86a\x12iV[\x94P\x91Pa\x05Q\x8B\x8B\x86a\x12iV[\x80\x95P\x81\x92PPP_a\x05\x86`@\x8Aa\x01 \x01Qa\x05o\x91\x90a&\xDBV[c\xFF\xFF\xFF\xFF\x16\x85\x85a\x14{\x90\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[\x90P_a\x05\xA9\x8Aa\x01\0\x01Qc\xFF\xFF\xFF\xFF\x16\x83\x85a\x14\xC5\x90\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[\x90P\x88``\x01Q\x81\x14a\x05\xFEW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x12`$\x82\x01R\x7FBAD_FUNCTIONS_ROOT\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x038V[\x84`@\x8Ba\x01 \x01Qa\x06\x11\x91\x90a'\x02V[c\xFF\xFF\xFF\xFF\x16\x81Q\x81\x10a\x06'Wa\x06'a&xV[` \x02` \x01\x01Q\x96PPPPPP\x87\x87\x82\x90\x80\x92a\x06H\x93\x92\x91\x90a')V[\x97P\x97PP_\x84`\xE0\x01Qc\xFF\xFF\xFF\xFF\x16\x90P`\x01\x85a\x01 \x01\x81\x81Qa\x06o\x91\x90a'PV[c\xFF\xFF\xFF\xFF\x16\x90RP\x81Q_`(a\xFF\xFF\x83\x16\x10\x80\x15\x90a\x06\x95WP`5a\xFF\xFF\x83\x16\x11\x15[\x80a\x06\xB5WP`6a\xFF\xFF\x83\x16\x10\x80\x15\x90a\x06\xB5WP`>a\xFF\xFF\x83\x16\x11\x15[\x80a\x06\xC4WPa\xFF\xFF\x82\x16`?\x14[\x80a\x06\xD3WPa\xFF\xFF\x82\x16`@\x14[\x15a\x06\xEAWP`\x01T`\x01`\x01`\xA0\x1B\x03\x16a\t\0V[a\xFF\xFF\x82\x16`E\x14\x80a\x07\x01WPa\xFF\xFF\x82\x16`P\x14[\x80a\x07/WP`Fa\xFF\xFF\x83\x16\x10\x80\x15\x90a\x07/WPa\x07#`\t`Fa'lV[a\xFF\xFF\x16\x82a\xFF\xFF\x16\x11\x15[\x80a\x07]WP`ga\xFF\xFF\x83\x16\x10\x80\x15\x90a\x07]WPa\x07Q`\x02`ga'lV[a\xFF\xFF\x16\x82a\xFF\xFF\x16\x11\x15[\x80a\x07}WP`ja\xFF\xFF\x83\x16\x10\x80\x15\x90a\x07}WP`xa\xFF\xFF\x83\x16\x11\x15[\x80a\x07\xABWP`Qa\xFF\xFF\x83\x16\x10\x80\x15\x90a\x07\xABWPa\x07\x9F`\t`Qa'lV[a\xFF\xFF\x16\x82a\xFF\xFF\x16\x11\x15[\x80a\x07\xD9WP`ya\xFF\xFF\x83\x16\x10\x80\x15\x90a\x07\xD9WPa\x07\xCD`\x02`ya'lV[a\xFF\xFF\x16\x82a\xFF\xFF\x16\x11\x15[\x80a\x07\xF9WP`|a\xFF\xFF\x83\x16\x10\x80\x15\x90a\x07\xF9WP`\x8Aa\xFF\xFF\x83\x16\x11\x15[\x80a\x08\x08WPa\xFF\xFF\x82\x16`\xA7\x14[\x80a\x08%WPa\xFF\xFF\x82\x16`\xAC\x14\x80a\x08%WPa\xFF\xFF\x82\x16`\xAD\x14[\x80a\x08EWP`\xC0a\xFF\xFF\x83\x16\x10\x80\x15\x90a\x08EWP`\xC4a\xFF\xFF\x83\x16\x11\x15[\x80a\x08eWP`\xBCa\xFF\xFF\x83\x16\x10\x80\x15\x90a\x08eWP`\xBFa\xFF\xFF\x83\x16\x11\x15[\x15a\x08|WP`\x02T`\x01`\x01`\xA0\x1B\x03\x16a\t\0V[a\x80\x10a\xFF\xFF\x83\x16\x10\x80\x15\x90a\x08\x98WPa\x80\x13a\xFF\xFF\x83\x16\x11\x15[\x80a\x08\xBAWPa\x80 a\xFF\xFF\x83\x16\x10\x80\x15\x90a\x08\xBAWPa\x80$a\xFF\xFF\x83\x16\x11\x15[\x80a\x08\xDCWPa\x800a\xFF\xFF\x83\x16\x10\x80\x15\x90a\x08\xDCWPa\x802a\xFF\xFF\x83\x16\x11\x15[\x15a\x08\xF3WP`\x03T`\x01`\x01`\xA0\x1B\x03\x16a\t\0V[P_T`\x01`\x01`\xA0\x1B\x03\x16[\x80`\x01`\x01`\xA0\x1B\x03\x16c\xA9,\xB5\x01\x8E\x89\x89\x88\x8F\x8F`@Q\x87c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\t6\x96\x95\x94\x93\x92\x91\x90a(\xBFV[_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\tPW=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\tw\x91\x90\x81\x01\x90a/\x11V[\x90\x97P\x95P_a\xFF\xFF\x83\x16a\x80#\x14\x80a\t\x96WPa\xFF\xFF\x83\x16a\x80$\x14[\x15\x90P\x80\x15a\t\xB1Wa\t\xAA\x86\x85\x89a\x136V[a\x01`\x89\x01R[`\x02\x88Q`\x02\x81\x11\x15a\t\xC6Wa\t\xC6a&\x8CV[\x14\x80\x15a\t\xD9WPa\x01@\x88\x01Q_\x19\x14\x15[\x15a\t\xF5Wa\t\xE7\x88a\x15UV[a\t\xF0\x88a\x15\xD7V[P_\x88R[a\t\xFE\x88a\x0B\xAAV[\x98PPPPPPPPP[\x95\x94PPPPPV[_`\x01a\n%`\xA0\x84\x01`\x80\x85\x01a0wV[`\x02\x81\x11\x15a\n6Wa\n6a&\x8CV[\x03a\n\xA4Wa\nRa\nM6\x84\x90\x03\x84\x01\x84a0\x92V[a\x11\x19V[`@Q\x7FMachine finished:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`1\x81\x01\x91\x90\x91R`Q\x01[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P\x91\x90PV[`\x02a\n\xB6`\xA0\x84\x01`\x80\x85\x01a0wV[`\x02\x81\x11\x15a\n\xC7Wa\n\xC7a&\x8CV[\x03a\x0B\x17Wa\n\xDEa\nM6\x84\x90\x03\x84\x01\x84a0\x92V[`@Q\x7FMachine errored:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`0\x81\x01\x91\x90\x91R`P\x01a\n\x87V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x12`$\x82\x01R\x7FBAD_MACHINE_STATUS\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x038V[\x91\x90PV[a\x0Bla#\xD2V[P`@\x80Q\x80\x82\x01\x90\x91R`\x04\x81R_` \x82\x01R\x90V[a\x0B\x8Ca#\xD2V[P`@\x80Q\x80\x82\x01\x90\x91R_\x81Rc\xFF\xFF\xFF\xFF\x90\x91\x16` \x82\x01R\x90V[_\x80\x82Q`\x02\x81\x11\x15a\x0B\xBFWa\x0B\xBFa&\x8CV[\x03a\x0C\xFCW_a\x0B\xEBa\x0B\xD5\x84` \x01Qa\x16\x03V[a\x01@\x85\x01Q`@\x86\x01Q\x91\x90_\x19\x14\x15a\x16\x8FV[\x90P_a\x0C\x14a\x0B\xFE\x85`\x80\x01Qa\x17\xF8V[a\x01@\x86\x01Q`\xA0\x87\x01Q\x91\x90_\x19\x14\x15a\x16\x8FV[\x90P_\x82a\x0C%\x86``\x01Qa\x16\x03V[`\xC0\x87\x01Q`\xE0\x80\x89\x01Qa\x01\0\x8A\x01Qa\x01 \x8B\x01Qa\x01@\x8C\x01Qa\x01`\x8D\x01Q`@Q\x7FMachine running:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`0\x81\x01\x99\x90\x99R`P\x89\x01\x97\x90\x97R`p\x88\x01\x8A\x90R`\x90\x88\x01\x95\x90\x95R\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x92\x84\x1B\x83\x16`\xB0\x88\x01R\x90\x83\x1B\x82\x16`\xB4\x87\x01R\x90\x91\x1B\x16`\xB8\x84\x01R`\xBC\x83\x01R`\xDC\x82\x01R`\xFC\x01`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R\x80Q` \x90\x91\x01 \x95\x94PPPPPV[`\x01\x82Q`\x02\x81\x11\x15a\r\x11Wa\r\x11a&\x8CV[\x03a\rTW`\xC0\x82\x01Q`@Q\x7FMachine finished:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`1\x81\x01\x91\x90\x91R`Q\x01a\n\x87V[`\x02\x82Q`\x02\x81\x11\x15a\riWa\ria&\x8CV[\x03a\r\xACW`\xC0\x82\x01Q`@Q\x7FMachine errored:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`0\x81\x01\x91\x90\x91R`P\x01a\n\x87V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0F`$\x82\x01R\x7FBAD_MACH_STATUS\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x038V[a\r\xFCa$\x04V[\x81_\x80a\x0E\n\x87\x87\x85a\x18\x91V[\x93P\x90P`\xFF\x81\x16_\x03a\x0E W_\x91Pa\x0E\x90V[\x80`\xFF\x16`\x01\x03a\x0E4W`\x01\x91Pa\x0E\x90V[\x80`\xFF\x16`\x02\x03a\x0EHW`\x02\x91Pa\x0E\x90V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x13`$\x82\x01R\x7FUNKNOWN_MACH_STATUS\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x038V[Pa\x0E\x99a#\xEBV[a\x0E\xA1a#\xEBV[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R`@\x80Q\x80\x82\x01\x90\x91R``\x81R_` \x82\x01R`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01Ra\x0E\xE6\x8B\x8B\x89a\x18\xC6V[\x97P\x94Pa\x0E\xF5\x8B\x8B\x89a\x19\xACV[\x97P\x92Pa\x0F\x04\x8B\x8B\x89a\x18\xC6V[\x97P\x93Pa\x0F\x13\x8B\x8B\x89a\x19\xFFV[\x97P\x91Pa\x0F\"\x8B\x8B\x89a\x19\xACV[\x80\x98P\x81\x92PPP`@Q\x80a\x01\x80\x01`@R\x80\x87`\x02\x81\x11\x15a\x0FHWa\x0FHa&\x8CV[\x81R` \x81\x01\x96\x90\x96R`@\x86\x01\x93\x90\x93R``\x85\x01\x93\x90\x93R`\x80\x84\x01R`\xA0\x83\x01\x91\x90\x91R_`\xC0\x83\x01\x81\x90R`\xE0\x83\x01\x81\x90Ra\x01\0\x83\x01\x81\x90Ra\x01 \x83\x01\x81\x90Ra\x01@\x83\x01\x81\x90Ra\x01`\x90\x92\x01\x91\x90\x91R\x92Pa\x0F\xAF\x90P\x85\x85\x83a\x1B;V[`\xC0\x84\x01\x91\x90\x91R\x90Pa\x0F\xC4\x85\x85\x83a\x1BVV[c\xFF\xFF\xFF\xFF\x90\x91\x16`\xE0\x84\x01R\x90Pa\x0F\xDE\x85\x85\x83a\x1BVV[c\xFF\xFF\xFF\xFF\x90\x91\x16a\x01\0\x84\x01R\x90Pa\x0F\xF9\x85\x85\x83a\x1BVV[c\xFF\xFF\xFF\xFF\x90\x91\x16a\x01 \x84\x01R\x90Pa\x10\x14\x85\x85\x83a\x1B;V[a\x01@\x84\x01\x91\x90\x91R\x90Pa\x10*\x85\x85\x83a\x1B;V[a\x01`\x84\x01\x91\x90\x91R\x91\x95\x91\x94P\x90\x92PPPV[a\x10Ga%&V[\x81a\x10Pa%KV[a\x10Xa%KV[_[`\x02`\xFF\x82\x16\x10\x15a\x10\xA2Wa\x10q\x88\x88\x86a\x1B;V[\x84\x83`\xFF\x16`\x02\x81\x10a\x10\x86Wa\x10\x86a&xV[` \x02\x01\x91\x90\x91R\x93P\x80a\x10\x9A\x81a1YV[\x91PPa\x10ZV[P_[`\x02`\xFF\x82\x16\x10\x15a\x10\xFCWa\x10\xBC\x88\x88\x86a\x1B\xAEV[\x83\x83`\xFF\x16`\x02\x81\x10a\x10\xD1Wa\x10\xD1a&xV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x93\x16` \x93\x90\x93\x02\x01\x91\x90\x91R\x93P\x80a\x10\xF4\x81a1YV[\x91PPa\x10\xA5V[P`@\x80Q\x80\x82\x01\x90\x91R\x91\x82R` \x82\x01R\x95\x90\x94P\x92PPPV[\x80Q\x80Q` \x91\x82\x01Q\x82\x84\x01Q\x80Q\x90\x84\x01Q`@Q\x7FGlobal state:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x95\x81\x01\x95\x90\x95R`-\x85\x01\x93\x90\x93R`M\x84\x01\x91\x90\x91R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xC0\x91\x82\x1B\x81\x16`m\x85\x01R\x91\x90\x1B\x16`u\x82\x01R_\x90`}\x01a\n\x87V[a\x11\xB0a$\xBCV[`@\x80Q``\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R\x83\x91\x90____a\x11\xDD\x8B\x8B\x89a\x1B;V[\x97P\x95Pa\x11\xEC\x8B\x8B\x89a\x1C\x01V[\x97P\x94Pa\x11\xFB\x8B\x8B\x89a\x1B;V[\x97P\x93Pa\x12\n\x8B\x8B\x89a\x1B;V[\x97P\x92Pa\x12\x19\x8B\x8B\x89a\x1B;V[\x97P\x91Pa\x12(\x8B\x8B\x89a\x1BVV[`@\x80Q`\xC0\x81\x01\x82R\x98\x89R` \x89\x01\x97\x90\x97R\x95\x87\x01\x94\x90\x94RP``\x85\x01\x91\x90\x91R`\x80\x84\x01Rc\xFF\xFF\xFF\xFF\x16`\xA0\x83\x01R\x90\x96\x90\x95P\x93PPPPV[`@\x80Q` \x81\x01\x90\x91R``\x81R\x81_a\x12\x85\x86\x86\x84a\x18\x91V[\x92P\x90P_`\xFF\x82\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x12\xA6Wa\x12\xA6a&dV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x12\xCFW\x81` \x01` \x82\x02\x806\x837\x01\x90P[P\x90P_[\x82`\xFF\x16\x81`\xFF\x16\x10\x15a\x13\x1AWa\x12\xED\x88\x88\x86a\x1B;V[\x83\x83`\xFF\x16\x81Q\x81\x10a\x13\x02Wa\x13\x02a&xV[` \x90\x81\x02\x91\x90\x91\x01\x01\x91\x90\x91R\x93P`\x01\x01a\x12\xD4V[P`@Q\x80` \x01`@R\x80\x82\x81RP\x93PPP\x93P\x93\x91PPV[_a\x13\x80\x84\x84a\x13E\x85a\x1C{V[`@Q\x80`@\x01`@R\x80`\x13\x81R` \x01\x7FModule merkle tree:\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RPa\x1D#V[\x90P[\x93\x92PPPV[``\x81_a\x13\x99\x86\x86\x84a\x18\x91V[\x92P\x90P`\xFF\x81\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x13\xB9Wa\x13\xB9a&dV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x13\xFDW\x81` \x01[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x13\xD7W\x90P[P\x92P_[\x81`\xFF\x16\x81\x10\x15a\x14qW__a\x14\x1A\x89\x89\x87a\x1E5V[\x95P\x91Pa\x14)\x89\x89\x87a\x1E\x82V[\x80\x96P\x81\x92PPP`@Q\x80`@\x01`@R\x80\x83a\xFF\xFF\x16\x81R` \x01\x82\x81RP\x86\x84\x81Q\x81\x10a\x14\\Wa\x14\\a&xV[` \x90\x81\x02\x91\x90\x91\x01\x01RPP`\x01\x01a\x14\x02V[PP\x93P\x93\x91PPV[_a\x13\x80\x84\x84a\x14\x8A\x85a\x1E\xCBV[`@Q\x80`@\x01`@R\x80`\x18\x81R` \x01\x7FInstruction merkle tree:\0\0\0\0\0\0\0\0\x81RPa\x1D#V[`@Q\x7FFunction:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`)\x81\x01\x82\x90R_\x90\x81\x90`I\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90Pa\n\t\x85\x85\x83`@Q\x80`@\x01`@R\x80`\x15\x81R` \x01\x7FFunction merkle tree:\0\0\0\0\0\0\0\0\0\0\0\x81RPa\x1D#V[`@\x81\x01QQ`\xA0\x82\x01QQ_\x19\x81\x14\x80a\x15pWP_\x19\x82\x14[\x15a\x15}WPP`\x02\x90RV[a\x15\x8A\x83`\x80\x01Qa\x17\xF8V[`\xA0\x84\x01QR` \x83\x01Qa\x15\x9E\x90a\x16\x03V[`@\x84\x01QR`\x80\x83\x01Qa\x15\xB9\x90\x82` \x82\x01R``\x90RV[P` \x91\x82\x01Q\x80\x83\x01\x91\x90\x91R`@\x80Q\x92\x83\x01\x90R``\x82RRV[_a\x15\xE9\x82\x83a\x01@\x01Q_\x1Ca \xB1V[a\x15\xF4WP_\x91\x90PV[P_\x19a\x01@\x90\x91\x01R`\x01\x90V[` \x81\x01Q\x81QQQ_[\x81\x81\x10\x15a\x16\x88W\x83Qa\x16+\x90a\x16&\x90\x83a \xF1V[a!\x1DV[`@Q\x7FValue stack:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`,\x81\x01\x91\x90\x91R`L\x81\x01\x84\x90R`l\x01`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R\x80Q` \x90\x91\x01 \x92P`\x01\x01a\x16\x0EV[PP\x91\x90PV[_`\x01\x83\x01a\x16\xE0W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x19`$\x82\x01R\x7FMULTISTACK_NOSTACK_ACTIVE\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x038V[\x81\x15a\x17\xA6W\x83Q`\x01\x01a\x177W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x17`$\x82\x01R\x7FMULTISTACK_NOSTACK_MAIN\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x038V[\x83Q` \x80\x86\x01Q`@Qa\x17\x89\x93\x92\x87\x92\x91\x01\x7Fmultistack:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x0B\x81\x01\x93\x90\x93R`+\x83\x01\x91\x90\x91R`K\x82\x01R`k\x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90Pa\x13\x83V[\x83Q` \x80\x86\x01Q`@Q\x7Fmultistack:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x92\x81\x01\x92\x90\x92R`+\x82\x01\x86\x90R`K\x82\x01\x92\x90\x92R`k\x81\x01\x91\x90\x91R`\x8B\x01a\x17\x89V[` \x81\x01Q_[\x82QQ\x81\x10\x15a\x18\x8BWa\x18.\x83_\x01Q\x82\x81Q\x81\x10a\x18!Wa\x18!a&xV[` \x02` \x01\x01Qa!8V[`@Q\x7FStack frame stack:\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`2\x81\x01\x91\x90\x91R`R\x81\x01\x83\x90R`r\x01`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R\x80Q` \x90\x91\x01 \x91P`\x01\x01a\x17\xFFV[P\x91\x90PV[_\x81\x84\x84\x82\x81\x81\x10a\x18\xA5Wa\x18\xA5a&xV[\x91\x90\x91\x015`\xF8\x1C\x92P\x81\x90Pa\x18\xBB\x81a1wV[\x91PP\x93P\x93\x91PPV[a\x18\xCEa#\xEBV[\x81_a\x18\xDB\x86\x86\x84a\x1B;V[\x92P\x90P_a\x18\xEB\x87\x87\x85a\x1E\x82V[\x93P\x90P_\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x19\tWa\x19\ta&dV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x19BW\x81` \x01[a\x19/a#\xD2V[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x19'W\x90P[P\x90P_[\x81Q\x81\x10\x15a\x19\x85Wa\x19[\x89\x89\x87a!\xCFV[\x83\x83\x81Q\x81\x10a\x19mWa\x19ma&xV[` \x90\x81\x02\x91\x90\x91\x01\x01\x91\x90\x91R\x94P`\x01\x01a\x19GV[P`@\x80Q``\x81\x01\x82R\x90\x81\x01\x91\x82R\x90\x81R` \x81\x01\x92\x90\x92RP\x95\x90\x94P\x92PPPV[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x81_a\x19\xCC\x86\x86\x84a\x1B;V[\x92P\x90P_a\x19\xDC\x87\x87\x85a\x1B;V[`@\x80Q\x80\x82\x01\x90\x91R\x93\x84R` \x84\x01\x91\x90\x91R\x91\x97\x91\x96P\x90\x94PPPPPV[`@\x80Q\x80\x82\x01\x90\x91R``\x81R_` \x82\x01R\x81_a\x1A \x86\x86\x84a\x1B;V[\x92P\x90P``\x86\x86\x84\x81\x81\x10a\x1A8Wa\x1A8a&xV[\x90\x91\x015\x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x15\x90Pa\x1A\xD7W\x82a\x1Ao\x81a1wV[`@\x80Q`\x01\x80\x82R\x81\x83\x01\x90\x92R\x91\x95P\x90\x91P\x81` \x01[a\x1A\x91a%iV[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x1A\x89W\x90PP\x90Pa\x1A\xB1\x87\x87\x85a\"\xCCV[\x82_\x81Q\x81\x10a\x1A\xC3Wa\x1A\xC3a&xV[` \x02` \x01\x01\x81\x95P\x82\x90RPPa\x1B\x1AV[\x82a\x1A\xE1\x81a1wV[`@\x80Q_\x80\x82R` \x82\x01\x90\x92R\x91\x95P\x90\x91Pa\x1B\x16V[a\x1B\x03a%iV[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x1A\xFBW\x90P[P\x90P[`@Q\x80`@\x01`@R\x80\x82\x81R` \x01\x83\x81RP\x93PPP\x93P\x93\x91PPV[_\x81\x81a\x1BI\x86\x86\x84a\x1E\x82V[\x90\x97\x90\x96P\x94PPPPPV[_\x81\x81[`\x04\x81\x10\x15a\x1B\xA5W`\x08\x83c\xFF\xFF\xFF\xFF\x16\x90\x1B\x92P\x85\x85\x83\x81\x81\x10a\x1B\x82Wa\x1B\x82a&xV[\x91\x90\x91\x015`\xF8\x1C\x93\x90\x93\x17\x92P\x81a\x1B\x9A\x81a1wV[\x92PP`\x01\x01a\x1BZV[P\x93P\x93\x91PPV[_\x81\x81[`\x08\x81\x10\x15a\x1B\xA5W`\x08\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x1B\x92P\x85\x85\x83\x81\x81\x10a\x1B\xDEWa\x1B\xDEa&xV[\x91\x90\x91\x015`\xF8\x1C\x93\x90\x93\x17\x92P\x81a\x1B\xF6\x81a1wV[\x92PP`\x01\x01a\x1B\xB2V[`@\x80Q``\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x91\x90\x91R\x81_\x80\x80a\x1C,\x88\x88\x86a\x1B\xAEV[\x94P\x92Pa\x1C;\x88\x88\x86a\x1B\xAEV[\x94P\x91Pa\x1CJ\x88\x88\x86a\x1B;V[`@\x80Q``\x81\x01\x82Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x96\x87\x16\x81R\x94\x90\x95\x16` \x85\x01R\x93\x83\x01RP\x96\x90\x95P\x93PPPPV[_\x81_\x01Qa\x1C\x8D\x83` \x01Qa#QV[`@\x80\x85\x01Q``\x86\x01Q`\x80\x87\x01Q`\xA0\x88\x01Q\x93Qa\n\x87\x96\x95\x94\x90` \x01\x7FModule:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x07\x81\x01\x96\x90\x96R`'\x86\x01\x94\x90\x94R`G\x85\x01\x92\x90\x92R`g\x84\x01R`\x87\x83\x01R`\xE0\x1B\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16`\xA7\x82\x01R`\xAB\x01\x90V[\x81_[\x85QQ\x81\x10\x15a\x1D\xDEW\x84`\x01\x16_\x03a\x1D\x88W\x82\x82\x87_\x01Q\x83\x81Q\x81\x10a\x1DQWa\x1DQa&xV[` \x02` \x01\x01Q`@Q` \x01a\x1Dk\x93\x92\x91\x90a1\x8FV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x91Pa\x1D\xD2V[\x82\x86_\x01Q\x82\x81Q\x81\x10a\x1D\x9EWa\x1D\x9Ea&xV[` \x02` \x01\x01Q\x83`@Q` \x01a\x1D\xB9\x93\x92\x91\x90a1\x8FV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x91P[`\x01\x94\x85\x1C\x94\x01a\x1D&V[P\x83\x15a\x1E-W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0F`$\x82\x01R\x7FPROOF_TOO_SHORT\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x038V[\x94\x93PPPPV[_\x81\x81[`\x02\x81\x10\x15a\x1B\xA5W`\x08\x83a\xFF\xFF\x16\x90\x1B\x92P\x85\x85\x83\x81\x81\x10a\x1E_Wa\x1E_a&xV[\x91\x90\x91\x015`\xF8\x1C\x93\x90\x93\x17\x92P\x81a\x1Ew\x81a1wV[\x92PP`\x01\x01a\x1E9V[_\x81\x81[` \x81\x10\x15a\x1B\xA5W`\x08\x83\x90\x1B\x92P\x85\x85\x83\x81\x81\x10a\x1E\xA8Wa\x1E\xA8a&xV[\x91\x90\x91\x015`\xF8\x1C\x93\x90\x93\x17\x92P\x81a\x1E\xC0\x81a1wV[\x92PP`\x01\x01a\x1E\x86V[__\x82Q`\"a\x1E\xDB\x91\x90a1\xAEV[a\x1E\xE6\x90`\x0Ea&\xB4V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1E\xFEWa\x1E\xFEa&dV[`@Q\x90\x80\x82R\x80`\x1F\x01`\x1F\x19\x16` \x01\x82\x01`@R\x80\x15a\x1F(W` \x82\x01\x81\x806\x837\x01\x90P[P\x90P\x7FInstructions:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R_`\r\x90P\x83Q`\xF8\x1B\x82\x82\x81Q\x81\x10a\x1FmWa\x1Fma&xV[` \x01\x01\x90~\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16\x90\x81_\x1A\x90SP\x80a\x1F\xA5\x81a1wV[\x91P_\x90P[\x84Q\x81\x10\x15a \xA1W_\x85\x82\x81Q\x81\x10a\x1F\xC7Wa\x1F\xC7a&xV[` \x02` \x01\x01Q\x90P`\x08\x81_\x01Qa\xFF\xFF\x16\x90\x1C`\xF8\x1B\x84\x84\x81Q\x81\x10a\x1F\xF2Wa\x1F\xF2a&xV[` \x01\x01\x90~\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16\x90\x81_\x1A\x90SP\x80Q`\xF8\x1B\x84a 1\x85`\x01a&\xB4V[\x81Q\x81\x10a AWa Aa&xV[` \x01\x01\x90~\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16\x90\x81_\x1A\x90SPa z`\x02\x84a&\xB4V[` \x80\x83\x01Q\x86\x83\x01\x82\x01\x81\x90R\x91\x94Pa \x95\x90\x85a&\xB4V[\x93PPP`\x01\x01a\x1F\xABV[PP\x80Q` \x90\x91\x01 \x92\x91PPV[_``\x82\x90\x1C\x15a \xC3WP_a\x02\x9BV[Pc\xFF\xFF\xFF\xFF\x81\x81\x16a\x01 \x84\x01R` \x82\x90\x1C\x81\x16a\x01\0\x84\x01R`@\x91\x90\x91\x1C\x16`\xE0\x90\x91\x01R`\x01\x90V[a \xF9a#\xD2V[\x82Q\x80Q\x83\x90\x81\x10a!\rWa!\ra&xV[` \x02` \x01\x01Q\x90P\x92\x91PPV[_\x81_\x01Q\x82` \x01Q`@Q` \x01a\n\x87\x92\x91\x90a1\xC5V[_a!E\x82_\x01Qa!\x1DV[` \x80\x84\x01Q`@\x80\x86\x01Q``\x87\x01Q\x91Q\x7FStack frame:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x94\x81\x01\x94\x90\x94R`,\x84\x01\x94\x90\x94R`L\x83\x01\x91\x90\x91R\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xE0\x93\x84\x1B\x81\x16`l\x84\x01R\x92\x1B\x90\x91\x16`p\x82\x01R`t\x01a\n\x87V[a!\xD7a#\xD2V[\x81_\x85\x85\x83\x81\x81\x10a!\xEBWa!\xEBa&xV[\x91\x90\x91\x015`\xF8\x1C\x91P\x82\x90Pa\"\x01\x81a1wV[\x92PPa\"\x0C`\x06\x90V[`\x06\x81\x11\x15a\"\x1DWa\"\x1Da&\x8CV[`\xFF\x16\x81`\xFF\x16\x11\x15a\"rW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0E`$\x82\x01R\x7FBAD_VALUE_TYPE\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x038V[_a\"~\x87\x87\x85a\x1E\x82V[\x80\x94P\x81\x92PPP`@Q\x80`@\x01`@R\x80\x83`\xFF\x16`\x06\x81\x11\x15a\"\xA6Wa\"\xA6a&\x8CV[`\x06\x81\x11\x15a\"\xB7Wa\"\xB7a&\x8CV[\x81R` \x01\x82\x81RP\x93PPP\x93P\x93\x91PPV[a\"\xD4a%iV[\x81a\"\xDDa#\xD2V[___a\"\xEB\x89\x89\x87a!\xCFV[\x95P\x93Pa\"\xFA\x89\x89\x87a\x1B;V[\x95P\x92Pa#\t\x89\x89\x87a\x1BVV[\x95P\x91Pa#\x18\x89\x89\x87a\x1BVV[`@\x80Q`\x80\x81\x01\x82R\x96\x87R` \x87\x01\x95\x90\x95Rc\xFF\xFF\xFF\xFF\x93\x84\x16\x94\x86\x01\x94\x90\x94R\x90\x91\x16``\x84\x01RP\x90\x96\x90\x95P\x93PPPPV[\x80Q` \x80\x83\x01Q`@\x80\x85\x01Q\x90Q\x7FMemory:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x93\x81\x01\x93\x90\x93R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xC0\x94\x85\x1B\x81\x16`'\x85\x01R\x91\x90\x93\x1B\x16`/\x82\x01R`7\x81\x01\x91\x90\x91R_\x90`W\x01a\n\x87V[`@\x80Q\x80\x82\x01\x90\x91R\x80_[\x81R` \x01_\x81RP\x90V[`@\x80Q``\x80\x82\x01\x83R\x91\x81\x01\x91\x82R\x90\x81\x90a#\xDFV[`@\x80Qa\x01\x80\x81\x01\x90\x91R\x80_\x81R` \x01a$\x1Fa#\xEBV[\x81R` \x01a$?`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a$La#\xEBV[\x81R` \x01a$m`@Q\x80`@\x01`@R\x80``\x81R` \x01_\x81RP\x90V[\x81R` \x01a$\x8D`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R_` \x82\x01\x81\x90R`@\x82\x01\x81\x90R``\x82\x01\x81\x90R`\x80\x82\x01\x81\x90R`\xA0\x82\x01\x81\x90R`\xC0\x90\x91\x01R\x90V[`@Q\x80`\xC0\x01`@R\x80_\x81R` \x01a%\x02`@Q\x80``\x01`@R\x80_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_\x81RP\x90V[\x81R` \x01_\x81R` \x01_\x81R` \x01_\x81R` \x01_c\xFF\xFF\xFF\xFF\x16\x81RP\x90V[`@Q\x80`@\x01`@R\x80a%9a%KV[\x81R` \x01a%Fa%KV[\x90R\x90V[`@Q\x80`@\x01`@R\x80`\x02\x90` \x82\x02\x806\x837P\x91\x92\x91PPV[`@Q\x80`\x80\x01`@R\x80a%|a#\xD2V[\x81R_` \x82\x01\x81\x90R`@\x82\x01\x81\x90R``\x90\x91\x01R\x90V[__`@\x83\x85\x03\x12\x15a%\xA7W__\xFD[PP\x805\x92` \x90\x91\x015\x91PV[_____\x85\x87\x03`\xC0\x81\x12\x15a%\xCBW__\xFD[``\x81\x12\x15a%\xD8W__\xFD[P\x85\x94P``\x85\x015\x93P`\x80\x85\x015\x92P`\xA0\x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a&\x03W__\xFD[\x86\x01`\x1F\x81\x01\x88\x13a&\x13W__\xFD[\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a&)W__\xFD[\x88` \x82\x84\x01\x01\x11\x15a&:W__\xFD[\x95\x98\x94\x97P\x92\x95PPP` \x01\x91\x90V[_`\xA0\x82\x84\x03\x12\x80\x15a&\\W__\xFD[P\x90\x92\x91PPV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[\x80\x82\x01\x80\x82\x11\x15a\x02\x9BWa\x02\x9Ba&\xA0V[cNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[_c\xFF\xFF\xFF\xFF\x83\x16\x80a&\xF0Wa&\xF0a&\xC7V[\x80c\xFF\xFF\xFF\xFF\x84\x16\x04\x91PP\x92\x91PPV[_c\xFF\xFF\xFF\xFF\x83\x16\x80a'\x17Wa'\x17a&\xC7V[\x80c\xFF\xFF\xFF\xFF\x84\x16\x06\x91PP\x92\x91PPV[__\x85\x85\x11\x15a'7W__\xFD[\x83\x86\x11\x15a'CW__\xFD[PP\x82\x01\x93\x91\x90\x92\x03\x91PV[c\xFF\xFF\xFF\xFF\x81\x81\x16\x83\x82\x16\x01\x90\x81\x11\x15a\x02\x9BWa\x02\x9Ba&\xA0V[a\xFF\xFF\x81\x81\x16\x83\x82\x16\x01\x90\x81\x11\x15a\x02\x9BWa\x02\x9Ba&\xA0V[`\x03\x81\x10a'\x96Wa'\x96a&\x8CV[\x90RV[\x80Q`\x07\x81\x10a'\xACWa'\xACa&\x8CV[\x82R` \x90\x81\x01Q\x91\x01RV[\x80Q`@\x80\x84R\x90Q` \x91\x84\x01\x82\x90R\x80Q``\x85\x01\x81\x90R_\x92\x90\x91\x01\x90\x82\x90`\x80\x86\x01\x90[\x80\x83\x10\x15a(\x0BWa'\xF4\x82\x85Qa'\x9AV[`@\x82\x01\x91P` \x84\x01\x93P`\x01\x83\x01\x92Pa'\xE1V[P` \x85\x01Q` \x87\x01R\x80\x93PPPP\x92\x91PPV[\x80Q`@\x80\x84R\x81Q\x90\x84\x01\x81\x90R_\x91` \x01\x90\x82\x90``\x86\x01\x90[\x80\x83\x10\x15a(\x0BW\x83Qa(T\x83\x82Qa'\x9AV[` \x81\x01Q`@\x84\x01Rc\xFF\xFF\xFF\xFF`@\x82\x01Q\x16``\x84\x01Rc\xFF\xFF\xFF\xFF``\x82\x01Q\x16`\x80\x84\x01RP`\xA0\x82\x01\x91P` \x84\x01\x93P`\x01\x83\x01\x92Pa(?V[\x81\x83R\x81\x81` \x85\x017P_` \x82\x84\x01\x01R_` `\x1F\x19`\x1F\x84\x01\x16\x84\x01\x01\x90P\x92\x91PPV[\x865\x81R_` \x88\x015`\x01`\x01`\xA0\x1B\x03\x81\x16\x80\x82\x14a(\xDEW__\xFD[` \x84\x01RP`@\x88\x81\x015\x90\x83\x01Ra\x01\xE0``\x83\x01\x81\x90R\x87Qa)\x06\x91\x84\x01\x90a'\x86V[` \x87\x01Qa\x01\xC0a\x02\0\x84\x01Ra)\"a\x03\xA0\x84\x01\x82a'\xB9V[`@\x89\x01Q\x80Qa\x02 \x86\x01R` \x01Qa\x02@\x85\x01R``\x89\x01Q\x84\x82\x03a\x01\xDF\x19\x01a\x02`\x86\x01R\x90\x91Pa)Y\x82\x82a'\xB9V[\x91PP`\x80\x88\x01Qa\x01\xDF\x19\x84\x83\x03\x01a\x02\x80\x85\x01Ra)y\x82\x82a(\"V[\x91PP`\xA0\x88\x01Qa)\x99a\x02\xA0\x85\x01\x82\x80Q\x82R` \x90\x81\x01Q\x91\x01RV[P`\xC0\x88\x01Qa\x02\xE0\x84\x01R`\xE0\x88\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x03\0\x85\x01RPa\x01\0\x88\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x03 \x85\x01RPa\x01 \x88\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x03@\x85\x01RPa\x01@\x88\x01Qa\x03`\x84\x01Ra\x01`\x88\x01Qa\x03\x80\x84\x01Ra*k`\x80\x84\x01\x88\x80Q\x82R` \x81\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81Q\x16` \x84\x01Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF` \x82\x01Q\x16`@\x84\x01R`@\x81\x01Q``\x84\x01RP`@\x81\x01Q`\x80\x83\x01R``\x81\x01Q`\xA0\x83\x01R`\x80\x81\x01Q`\xC0\x83\x01Rc\xFF\xFF\xFF\xFF`\xA0\x82\x01Q\x16`\xE0\x83\x01RPPV[\x85Qa\xFF\xFF\x16a\x01\x80\x84\x01R` \x86\x01Qa\x01\xA0\x84\x01R\x82\x81\x03a\x01\xC0\x84\x01Ra*\x96\x81\x85\x87a(\x96V[\x99\x98PPPPPPPPPV[`@\x80Q\x90\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a*\xC6Wa*\xC6a&dV[`@R\x90V[`@Q` \x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a*\xC6Wa*\xC6a&dV[`@Q`\x80\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a*\xC6Wa*\xC6a&dV[`@Q`\xC0\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a*\xC6Wa*\xC6a&dV[`@Q``\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a*\xC6Wa*\xC6a&dV[`@Qa\x01\x80\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a*\xC6Wa*\xC6a&dV[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a+\xA5Wa+\xA5a&dV[`@R\x91\x90PV[`\x03\x81\x10a+\xB9W__\xFD[PV[\x80Qa\x0B_\x81a+\xADV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a+\xE0Wa+\xE0a&dV[P`\x05\x1B` \x01\x90V[_`@\x82\x84\x03\x12\x15a+\xFAW__\xFD[a,\x02a*\xA3V[\x90P\x81Q`\x07\x81\x10a,\x12W__\xFD[\x80\x82RP` \x82\x01Q` \x82\x01R\x92\x91PPV[_`@\x82\x84\x03\x12\x15a,6W__\xFD[a,>a*\xA3V[\x90P\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a,VW__\xFD[\x82\x01` \x81\x85\x03\x12\x15a,gW__\xFD[a,oa*\xCCV[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a,\x85W__\xFD[\x80\x83\x01\x92PP\x84`\x1F\x83\x01\x12a,\x99W__\xFD[\x81Qa,\xACa,\xA7\x82a+\xC7V[a+|V[\x80\x82\x82R` \x82\x01\x91P` \x83`\x06\x1B\x86\x01\x01\x92P\x87\x83\x11\x15a,\xCDW__\xFD[` \x85\x01\x94P[\x82\x85\x10\x15a,\xF9Wa,\xE6\x88\x86a+\xEAV[\x82R` \x82\x01\x91P`@\x85\x01\x94Pa,\xD4V[\x83RPP\x82RP` \x91\x82\x01Q\x91\x81\x01\x91\x90\x91R\x91\x90PV[_`@\x82\x84\x03\x12\x15a-\"W__\xFD[a-*a*\xA3V[\x82Q\x81R` \x92\x83\x01Q\x92\x81\x01\x92\x90\x92RP\x91\x90PV[\x80Qc\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x0B_W__\xFD[_`@\x82\x84\x03\x12\x15a-dW__\xFD[a-la*\xA3V[\x90P\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a-\x84W__\xFD[\x82\x01`\x1F\x81\x01\x84\x13a-\x94W__\xFD[\x80Qa-\xA2a,\xA7\x82a+\xC7V[\x80\x82\x82R` \x82\x01\x91P` `\xA0\x84\x02\x85\x01\x01\x92P\x86\x83\x11\x15a-\xC3W__\xFD[` \x84\x01\x93P[\x82\x84\x10\x15a.5W`\xA0\x84\x88\x03\x12\x15a-\xE1W__\xFD[a-\xE9a*\xEFV[a-\xF3\x88\x86a+\xEAV[\x81R`@\x85\x01Q` \x82\x01Ra.\x0B``\x86\x01a-AV[`@\x82\x01Ra.\x1C`\x80\x86\x01a-AV[``\x82\x01R\x82R`\xA0\x93\x90\x93\x01\x92` \x90\x91\x01\x90a-\xCAV[\x84RPPP` \x91\x82\x01Q\x91\x81\x01\x91\x90\x91R\x91\x90PV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a+\xB9W__\xFD[_\x81\x83\x03a\x01\0\x81\x12\x15a.sW__\xFD[a.{a+\x12V[\x83Q\x81R\x91P```\x1F\x19\x82\x01\x12\x15a.\x92W__\xFD[Pa.\x9Ba+5V[` \x83\x01Qa.\xA9\x81a.LV[\x81R`@\x83\x01Qa.\xB9\x81a.LV[` \x82\x81\x01\x91\x90\x91R``\x84\x81\x01Q`@\x80\x85\x01\x91\x90\x91R\x91\x84\x01\x92\x90\x92R`\x80\x80\x85\x01Q\x91\x84\x01\x91\x90\x91R`\xA0\x84\x01Q\x91\x83\x01\x91\x90\x91R`\xC0\x83\x01Q\x90\x82\x01Ra/\x06`\xE0\x83\x01a-AV[`\xA0\x82\x01R\x92\x91PPV[__a\x01 \x83\x85\x03\x12\x15a/#W__\xFD[\x82Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a/9W__\xFD[\x83\x01a\x01\xC0\x81\x86\x03\x12\x15a/KW__\xFD[a/Sa+XV[a/\\\x82a+\xBCV[\x81R` \x82\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a/wW__\xFD[a/\x83\x87\x82\x85\x01a,&V[` \x83\x01RPa/\x96\x86`@\x84\x01a-\x12V[`@\x82\x01R`\x80\x82\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a/\xB4W__\xFD[a/\xC0\x87\x82\x85\x01a,&V[``\x83\x01RP`\xA0\x82\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a/\xDFW__\xFD[a/\xEB\x87\x82\x85\x01a-TV[`\x80\x83\x01RPa/\xFE\x86`\xC0\x84\x01a-\x12V[`\xA0\x82\x01Ra\x01\0\x82\x01Q`\xC0\x82\x01Ra0\x1Ba\x01 \x83\x01a-AV[`\xE0\x82\x01Ra0-a\x01@\x83\x01a-AV[a\x01\0\x82\x01Ra0@a\x01`\x83\x01a-AV[a\x01 \x82\x01Ra\x01\x80\x82\x01Qa\x01@\x82\x01Ra\x01\xA0\x90\x91\x01Qa\x01`\x82\x01R\x91Pa0n\x84` \x85\x01a.aV[\x90P\x92P\x92\x90PV[_` \x82\x84\x03\x12\x15a0\x87W__\xFD[\x815a\x13\x83\x81a+\xADV[_`\x80\x82\x84\x03\x12\x80\x15a0\xA3W__\xFD[Pa0\xACa*\xA3V[\x83`\x1F\x84\x01\x12a0\xBAW__\xFD[`@a0\xC5\x81a+|V[\x80\x82\x86\x01\x87\x81\x11\x15a0\xD5W__\xFD[\x86[\x81\x81\x10\x15a0\xEFW\x805\x84R` \x93\x84\x01\x93\x01a0\xD7V[P\x81\x85R_\x92P\x87`\x1F\x82\x01\x12a1\x04W__\xFD[\x83\x91Pa1\x10\x82a+|V[\x93\x81\x01\x93\x91P\x81\x88\x85\x11\x15a1#W__\xFD[\x84\x82\x10\x15a1HW\x815a16\x81a.LV[\x83R` \x92\x83\x01\x92\x91\x90\x91\x01\x90a1#V[` \x86\x01RP\x92\x96\x95PPPPPPV[_`\xFF\x82\x16`\xFF\x81\x03a1nWa1na&\xA0V[`\x01\x01\x92\x91PPV[_`\x01\x82\x01a1\x88Wa1\x88a&\xA0V[P`\x01\x01\x90V[_\x84Q\x80` \x87\x01\x84^\x91\x90\x91\x01\x92\x83RP` \x82\x01R`@\x01\x91\x90PV[\x80\x82\x02\x81\x15\x82\x82\x04\x84\x14\x17a\x02\x9BWa\x02\x9Ba&\xA0V[\x7FValue:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R_`\x07\x84\x10a1\xF9Wa1\xF9a&\x8CV[P`\xF8\x92\x90\x92\x1B`\x06\x83\x01R`\x07\x82\x01R`'\x01\x90V\xFE\xA2dipfsX\"\x12 \xCA\x14M\xF7\xDBV\xF1h\xF5\x1E\x04\xD1\x1A\xFA<\x87\x1Fl\x8D\xB3\xBFN6E\x1E\x9A\x1A\xFB\x80\xCB\n\xD8dsolcC\0\x08\x1C\x003",
    );
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MachineStatus(u8);
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<MachineStatus> for u8 {
            #[inline]
            fn stv_to_tokens(
                &self,
            ) -> <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'_> {
                alloy_sol_types::private::SolTypeValue::<
                    alloy::sol_types::sol_data::Uint<8>,
                >::stv_to_tokens(self)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::tokenize(self)
                    .0
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(self, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encoded_size(self)
            }
        }
        #[automatically_derived]
        impl MachineStatus {
            /// The Solidity type name.
            pub const NAME: &'static str = stringify!(@ name);
            /// Convert from the underlying value type.
            #[inline]
            pub const fn from(value: u8) -> Self {
                Self(value)
            }
            /// Return the underlying value.
            #[inline]
            pub const fn into(self) -> u8 {
                self.0
            }
            /// Return the single encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode(&self.0)
            }
            /// Return the packed encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode_packed(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode_packed(&self.0)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for MachineStatus {
            type RustType = u8;
            type Token<'a> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = Self::NAME;
            const ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                Self::type_check(token).is_ok()
            }
            #[inline]
            fn type_check(token: &Self::Token<'_>) -> alloy_sol_types::Result<()> {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::type_check(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::detokenize(token)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for MachineStatus {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::topic_preimage_length(rust)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(rust, out)
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic(rust)
            }
        }
    };
    /**```solidity
struct ExecutionContext { uint256 maxInboxMessagesRead; address bridge; bytes32 initialWasmModuleRoot; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ExecutionContext {
        #[allow(missing_docs)]
        pub maxInboxMessagesRead: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub bridge: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub initialWasmModuleRoot: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ExecutionContext> for UnderlyingRustTuple<'_> {
            fn from(value: ExecutionContext) -> Self {
                (value.maxInboxMessagesRead, value.bridge, value.initialWasmModuleRoot)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ExecutionContext {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    maxInboxMessagesRead: tuple.0,
                    bridge: tuple.1,
                    initialWasmModuleRoot: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for ExecutionContext {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for ExecutionContext {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.maxInboxMessagesRead),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.bridge,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.initialWasmModuleRoot),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ExecutionContext {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for ExecutionContext {
            const NAME: &'static str = "ExecutionContext";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "ExecutionContext(uint256 maxInboxMessagesRead,address bridge,bytes32 initialWasmModuleRoot)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.maxInboxMessagesRead,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.bridge,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.initialWasmModuleRoot,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ExecutionContext {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.maxInboxMessagesRead,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.bridge,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.initialWasmModuleRoot,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.maxInboxMessagesRead,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.bridge,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.initialWasmModuleRoot,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct ExecutionState { GlobalState globalState; MachineStatus machineStatus; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ExecutionState {
        #[allow(missing_docs)]
        pub globalState: <GlobalState as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub machineStatus: <MachineStatus as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (GlobalState, MachineStatus);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            <GlobalState as alloy::sol_types::SolType>::RustType,
            <MachineStatus as alloy::sol_types::SolType>::RustType,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ExecutionState> for UnderlyingRustTuple<'_> {
            fn from(value: ExecutionState) -> Self {
                (value.globalState, value.machineStatus)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ExecutionState {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    globalState: tuple.0,
                    machineStatus: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for ExecutionState {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for ExecutionState {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <GlobalState as alloy_sol_types::SolType>::tokenize(
                        &self.globalState,
                    ),
                    <MachineStatus as alloy_sol_types::SolType>::tokenize(
                        &self.machineStatus,
                    ),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ExecutionState {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for ExecutionState {
            const NAME: &'static str = "ExecutionState";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "ExecutionState(GlobalState globalState,uint8 machineStatus)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(1);
                components
                    .push(
                        <GlobalState as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <GlobalState as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <GlobalState as alloy_sol_types::SolType>::eip712_data_word(
                            &self.globalState,
                        )
                        .0,
                    <MachineStatus as alloy_sol_types::SolType>::eip712_data_word(
                            &self.machineStatus,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ExecutionState {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <GlobalState as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.globalState,
                    )
                    + <MachineStatus as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.machineStatus,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <GlobalState as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.globalState,
                    out,
                );
                <MachineStatus as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.machineStatus,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct GlobalState { bytes32[2] bytes32Vals; uint64[2] u64Vals; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct GlobalState {
        #[allow(missing_docs)]
        pub bytes32Vals: [alloy::sol_types::private::FixedBytes<32>; 2usize],
        #[allow(missing_docs)]
        pub u64Vals: [u64; 2usize],
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::FixedArray<
                alloy::sol_types::sol_data::FixedBytes<32>,
                2usize,
            >,
            alloy::sol_types::sol_data::FixedArray<
                alloy::sol_types::sol_data::Uint<64>,
                2usize,
            >,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            [alloy::sol_types::private::FixedBytes<32>; 2usize],
            [u64; 2usize],
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<GlobalState> for UnderlyingRustTuple<'_> {
            fn from(value: GlobalState) -> Self {
                (value.bytes32Vals, value.u64Vals)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for GlobalState {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    bytes32Vals: tuple.0,
                    u64Vals: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for GlobalState {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for GlobalState {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedArray<
                        alloy::sol_types::sol_data::FixedBytes<32>,
                        2usize,
                    > as alloy_sol_types::SolType>::tokenize(&self.bytes32Vals),
                    <alloy::sol_types::sol_data::FixedArray<
                        alloy::sol_types::sol_data::Uint<64>,
                        2usize,
                    > as alloy_sol_types::SolType>::tokenize(&self.u64Vals),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for GlobalState {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for GlobalState {
            const NAME: &'static str = "GlobalState";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "GlobalState(bytes32[2] bytes32Vals,uint64[2] u64Vals)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::FixedArray<
                        alloy::sol_types::sol_data::FixedBytes<32>,
                        2usize,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.bytes32Vals)
                        .0,
                    <alloy::sol_types::sol_data::FixedArray<
                        alloy::sol_types::sol_data::Uint<64>,
                        2usize,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.u64Vals)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for GlobalState {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::FixedArray<
                        alloy::sol_types::sol_data::FixedBytes<32>,
                        2usize,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.bytes32Vals,
                    )
                    + <alloy::sol_types::sol_data::FixedArray<
                        alloy::sol_types::sol_data::Uint<64>,
                        2usize,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.u64Vals,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::FixedArray<
                    alloy::sol_types::sol_data::FixedBytes<32>,
                    2usize,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.bytes32Vals,
                    out,
                );
                <alloy::sol_types::sol_data::FixedArray<
                    alloy::sol_types::sol_data::Uint<64>,
                    2usize,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.u64Vals,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address prover0_, address proverMem_, address proverMath_, address proverHostIo_);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub prover0_: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub proverMem_: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub proverMath_: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub proverHostIo_: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (
                        value.prover0_,
                        value.proverMem_,
                        value.proverMath_,
                        value.proverHostIo_,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        prover0_: tuple.0,
                        proverMem_: tuple.1,
                        proverMath_: tuple.2,
                        proverHostIo_: tuple.3,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.prover0_,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.proverMem_,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.proverMath_,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.proverHostIo_,
                    ),
                )
            }
        }
    };
    /**Function with signature `getMachineHash(((bytes32[2],uint64[2]),uint8))` and selector `0xc39619c4`.
```solidity
function getMachineHash(ExecutionState memory execState) external pure returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getMachineHashCall {
        #[allow(missing_docs)]
        pub execState: <ExecutionState as alloy::sol_types::SolType>::RustType,
    }
    ///Container type for the return parameters of the [`getMachineHash(((bytes32[2],uint64[2]),uint8))`](getMachineHashCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getMachineHashReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (ExecutionState,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <ExecutionState as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getMachineHashCall> for UnderlyingRustTuple<'_> {
                fn from(value: getMachineHashCall) -> Self {
                    (value.execState,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getMachineHashCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { execState: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getMachineHashReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getMachineHashReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getMachineHashReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getMachineHashCall {
            type Parameters<'a> = (ExecutionState,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getMachineHashReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getMachineHash(((bytes32[2],uint64[2]),uint8))";
            const SELECTOR: [u8; 4] = [195u8, 150u8, 25u8, 196u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <ExecutionState as alloy_sol_types::SolType>::tokenize(
                        &self.execState,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getStartMachineHash(bytes32,bytes32)` and selector `0x04997be4`.
```solidity
function getStartMachineHash(bytes32 globalStateHash, bytes32 wasmModuleRoot) external pure returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getStartMachineHashCall {
        #[allow(missing_docs)]
        pub globalStateHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub wasmModuleRoot: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`getStartMachineHash(bytes32,bytes32)`](getStartMachineHashCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getStartMachineHashReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getStartMachineHashCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getStartMachineHashCall) -> Self {
                    (value.globalStateHash, value.wasmModuleRoot)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getStartMachineHashCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        globalStateHash: tuple.0,
                        wasmModuleRoot: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getStartMachineHashReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getStartMachineHashReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getStartMachineHashReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getStartMachineHashCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getStartMachineHashReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getStartMachineHash(bytes32,bytes32)";
            const SELECTOR: [u8; 4] = [4u8, 153u8, 123u8, 228u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.globalStateHash),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.wasmModuleRoot),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `proveOneStep((uint256,address,bytes32),uint256,bytes32,bytes)` and selector `0xb5112fd2`.
```solidity
function proveOneStep(ExecutionContext memory execCtx, uint256 machineStep, bytes32 beforeHash, bytes memory proof) external view returns (bytes32 afterHash);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct proveOneStepCall {
        #[allow(missing_docs)]
        pub execCtx: <ExecutionContext as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub machineStep: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub beforeHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub proof: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`proveOneStep((uint256,address,bytes32),uint256,bytes32,bytes)`](proveOneStepCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct proveOneStepReturn {
        #[allow(missing_docs)]
        pub afterHash: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                ExecutionContext,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <ExecutionContext as alloy::sol_types::SolType>::RustType,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<proveOneStepCall> for UnderlyingRustTuple<'_> {
                fn from(value: proveOneStepCall) -> Self {
                    (value.execCtx, value.machineStep, value.beforeHash, value.proof)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for proveOneStepCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        execCtx: tuple.0,
                        machineStep: tuple.1,
                        beforeHash: tuple.2,
                        proof: tuple.3,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<proveOneStepReturn> for UnderlyingRustTuple<'_> {
                fn from(value: proveOneStepReturn) -> Self {
                    (value.afterHash,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for proveOneStepReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { afterHash: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for proveOneStepCall {
            type Parameters<'a> = (
                ExecutionContext,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = proveOneStepReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "proveOneStep((uint256,address,bytes32),uint256,bytes32,bytes)";
            const SELECTOR: [u8; 4] = [181u8, 17u8, 47u8, 210u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <ExecutionContext as alloy_sol_types::SolType>::tokenize(
                        &self.execCtx,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.machineStep),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.beforeHash),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.proof,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `prover0()` and selector `0x30a5509f`.
```solidity
function prover0() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct prover0Call {}
    ///Container type for the return parameters of the [`prover0()`](prover0Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct prover0Return {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<prover0Call> for UnderlyingRustTuple<'_> {
                fn from(value: prover0Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for prover0Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<prover0Return> for UnderlyingRustTuple<'_> {
                fn from(value: prover0Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for prover0Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for prover0Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = prover0Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "prover0()";
            const SELECTOR: [u8; 4] = [48u8, 165u8, 80u8, 159u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `proverHostIo()` and selector `0x5f52fd7c`.
```solidity
function proverHostIo() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct proverHostIoCall {}
    ///Container type for the return parameters of the [`proverHostIo()`](proverHostIoCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct proverHostIoReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<proverHostIoCall> for UnderlyingRustTuple<'_> {
                fn from(value: proverHostIoCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for proverHostIoCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<proverHostIoReturn> for UnderlyingRustTuple<'_> {
                fn from(value: proverHostIoReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for proverHostIoReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for proverHostIoCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = proverHostIoReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "proverHostIo()";
            const SELECTOR: [u8; 4] = [95u8, 82u8, 253u8, 124u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `proverMath()` and selector `0x66e5d9c3`.
```solidity
function proverMath() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct proverMathCall {}
    ///Container type for the return parameters of the [`proverMath()`](proverMathCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct proverMathReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<proverMathCall> for UnderlyingRustTuple<'_> {
                fn from(value: proverMathCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for proverMathCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<proverMathReturn> for UnderlyingRustTuple<'_> {
                fn from(value: proverMathReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for proverMathReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for proverMathCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = proverMathReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "proverMath()";
            const SELECTOR: [u8; 4] = [102u8, 229u8, 217u8, 195u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `proverMem()` and selector `0x1f128bc0`.
```solidity
function proverMem() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct proverMemCall {}
    ///Container type for the return parameters of the [`proverMem()`](proverMemCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct proverMemReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<proverMemCall> for UnderlyingRustTuple<'_> {
                fn from(value: proverMemCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for proverMemCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<proverMemReturn> for UnderlyingRustTuple<'_> {
                fn from(value: proverMemReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for proverMemReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for proverMemCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = proverMemReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "proverMem()";
            const SELECTOR: [u8; 4] = [31u8, 18u8, 139u8, 192u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`OneStepProofEntry`](self) function calls.
    pub enum OneStepProofEntryCalls {
        #[allow(missing_docs)]
        getMachineHash(getMachineHashCall),
        #[allow(missing_docs)]
        getStartMachineHash(getStartMachineHashCall),
        #[allow(missing_docs)]
        proveOneStep(proveOneStepCall),
        #[allow(missing_docs)]
        prover0(prover0Call),
        #[allow(missing_docs)]
        proverHostIo(proverHostIoCall),
        #[allow(missing_docs)]
        proverMath(proverMathCall),
        #[allow(missing_docs)]
        proverMem(proverMemCall),
    }
    #[automatically_derived]
    impl OneStepProofEntryCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [4u8, 153u8, 123u8, 228u8],
            [31u8, 18u8, 139u8, 192u8],
            [48u8, 165u8, 80u8, 159u8],
            [95u8, 82u8, 253u8, 124u8],
            [102u8, 229u8, 217u8, 195u8],
            [181u8, 17u8, 47u8, 210u8],
            [195u8, 150u8, 25u8, 196u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for OneStepProofEntryCalls {
        const NAME: &'static str = "OneStepProofEntryCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 7usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::getMachineHash(_) => {
                    <getMachineHashCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getStartMachineHash(_) => {
                    <getStartMachineHashCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::proveOneStep(_) => {
                    <proveOneStepCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::prover0(_) => <prover0Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::proverHostIo(_) => {
                    <proverHostIoCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::proverMath(_) => {
                    <proverMathCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::proverMem(_) => {
                    <proverMemCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<OneStepProofEntryCalls>] = &[
                {
                    fn getStartMachineHash(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OneStepProofEntryCalls> {
                        <getStartMachineHashCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OneStepProofEntryCalls::getStartMachineHash)
                    }
                    getStartMachineHash
                },
                {
                    fn proverMem(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OneStepProofEntryCalls> {
                        <proverMemCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OneStepProofEntryCalls::proverMem)
                    }
                    proverMem
                },
                {
                    fn prover0(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OneStepProofEntryCalls> {
                        <prover0Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OneStepProofEntryCalls::prover0)
                    }
                    prover0
                },
                {
                    fn proverHostIo(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OneStepProofEntryCalls> {
                        <proverHostIoCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OneStepProofEntryCalls::proverHostIo)
                    }
                    proverHostIo
                },
                {
                    fn proverMath(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OneStepProofEntryCalls> {
                        <proverMathCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OneStepProofEntryCalls::proverMath)
                    }
                    proverMath
                },
                {
                    fn proveOneStep(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OneStepProofEntryCalls> {
                        <proveOneStepCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OneStepProofEntryCalls::proveOneStep)
                    }
                    proveOneStep
                },
                {
                    fn getMachineHash(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OneStepProofEntryCalls> {
                        <getMachineHashCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OneStepProofEntryCalls::getMachineHash)
                    }
                    getMachineHash
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::getMachineHash(inner) => {
                    <getMachineHashCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getStartMachineHash(inner) => {
                    <getStartMachineHashCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::proveOneStep(inner) => {
                    <proveOneStepCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::prover0(inner) => {
                    <prover0Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::proverHostIo(inner) => {
                    <proverHostIoCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::proverMath(inner) => {
                    <proverMathCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::proverMem(inner) => {
                    <proverMemCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::getMachineHash(inner) => {
                    <getMachineHashCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getStartMachineHash(inner) => {
                    <getStartMachineHashCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::proveOneStep(inner) => {
                    <proveOneStepCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::prover0(inner) => {
                    <prover0Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::proverHostIo(inner) => {
                    <proverHostIoCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::proverMath(inner) => {
                    <proverMathCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::proverMem(inner) => {
                    <proverMemCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`OneStepProofEntry`](self) contract instance.

See the [wrapper's documentation](`OneStepProofEntryInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> OneStepProofEntryInstance<T, P, N> {
        OneStepProofEntryInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        prover0_: alloy::sol_types::private::Address,
        proverMem_: alloy::sol_types::private::Address,
        proverMath_: alloy::sol_types::private::Address,
        proverHostIo_: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<OneStepProofEntryInstance<T, P, N>>,
    > {
        OneStepProofEntryInstance::<
            T,
            P,
            N,
        >::deploy(provider, prover0_, proverMem_, proverMath_, proverHostIo_)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        prover0_: alloy::sol_types::private::Address,
        proverMem_: alloy::sol_types::private::Address,
        proverMath_: alloy::sol_types::private::Address,
        proverHostIo_: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        OneStepProofEntryInstance::<
            T,
            P,
            N,
        >::deploy_builder(provider, prover0_, proverMem_, proverMath_, proverHostIo_)
    }
    /**A [`OneStepProofEntry`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`OneStepProofEntry`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct OneStepProofEntryInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for OneStepProofEntryInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("OneStepProofEntryInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > OneStepProofEntryInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`OneStepProofEntry`](self) contract instance.

See the [wrapper's documentation](`OneStepProofEntryInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            prover0_: alloy::sol_types::private::Address,
            proverMem_: alloy::sol_types::private::Address,
            proverMath_: alloy::sol_types::private::Address,
            proverHostIo_: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<OneStepProofEntryInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(
                provider,
                prover0_,
                proverMem_,
                proverMath_,
                proverHostIo_,
            );
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            prover0_: alloy::sol_types::private::Address,
            proverMem_: alloy::sol_types::private::Address,
            proverMath_: alloy::sol_types::private::Address,
            proverHostIo_: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall {
                            prover0_,
                            proverMem_,
                            proverMath_,
                            proverHostIo_,
                        },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> OneStepProofEntryInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> OneStepProofEntryInstance<T, P, N> {
            OneStepProofEntryInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > OneStepProofEntryInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`getMachineHash`] function.
        pub fn getMachineHash(
            &self,
            execState: <ExecutionState as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::SolCallBuilder<T, &P, getMachineHashCall, N> {
            self.call_builder(&getMachineHashCall { execState })
        }
        ///Creates a new call builder for the [`getStartMachineHash`] function.
        pub fn getStartMachineHash(
            &self,
            globalStateHash: alloy::sol_types::private::FixedBytes<32>,
            wasmModuleRoot: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, getStartMachineHashCall, N> {
            self.call_builder(
                &getStartMachineHashCall {
                    globalStateHash,
                    wasmModuleRoot,
                },
            )
        }
        ///Creates a new call builder for the [`proveOneStep`] function.
        pub fn proveOneStep(
            &self,
            execCtx: <ExecutionContext as alloy::sol_types::SolType>::RustType,
            machineStep: alloy::sol_types::private::primitives::aliases::U256,
            beforeHash: alloy::sol_types::private::FixedBytes<32>,
            proof: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, proveOneStepCall, N> {
            self.call_builder(
                &proveOneStepCall {
                    execCtx,
                    machineStep,
                    beforeHash,
                    proof,
                },
            )
        }
        ///Creates a new call builder for the [`prover0`] function.
        pub fn prover0(&self) -> alloy_contract::SolCallBuilder<T, &P, prover0Call, N> {
            self.call_builder(&prover0Call {})
        }
        ///Creates a new call builder for the [`proverHostIo`] function.
        pub fn proverHostIo(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, proverHostIoCall, N> {
            self.call_builder(&proverHostIoCall {})
        }
        ///Creates a new call builder for the [`proverMath`] function.
        pub fn proverMath(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, proverMathCall, N> {
            self.call_builder(&proverMathCall {})
        }
        ///Creates a new call builder for the [`proverMem`] function.
        pub fn proverMem(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, proverMemCall, N> {
            self.call_builder(&proverMemCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > OneStepProofEntryInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
