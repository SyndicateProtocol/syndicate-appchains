/**

Generated by the following Solidity interface...
```solidity
interface OneStepProver0 {
    type MachineStatus is uint8;
    type ValueType is uint8;
    struct ExecutionContext {
        uint256 maxInboxMessagesRead;
        address bridge;
        bytes32 initialWasmModuleRoot;
    }
    struct Instruction {
        uint16 opcode;
        uint256 argumentData;
    }
    struct Machine {
        MachineStatus status;
        ValueStack valueStack;
        MultiStack valueMultiStack;
        ValueStack internalStack;
        StackFrameWindow frameStack;
        MultiStack frameMultiStack;
        bytes32 globalStateHash;
        uint32 moduleIdx;
        uint32 functionIdx;
        uint32 functionPc;
        bytes32 recoveryPc;
        bytes32 modulesRoot;
    }
    struct Module {
        bytes32 globalsMerkleRoot;
        ModuleMemory moduleMemory;
        bytes32 tablesMerkleRoot;
        bytes32 functionsMerkleRoot;
        bytes32 extraHash;
        uint32 internalsOffset;
    }
    struct ModuleMemory {
        uint64 size;
        uint64 maxSize;
        bytes32 merkleRoot;
    }
    struct MultiStack {
        bytes32 inactiveStackHash;
        bytes32 remainingHash;
    }
    struct StackFrame {
        Value returnPc;
        bytes32 localsMerkleRoot;
        uint32 callerModule;
        uint32 callerModuleInternals;
    }
    struct StackFrameWindow {
        StackFrame[] proved;
        bytes32 remainingHash;
    }
    struct Value {
        ValueType valueType;
        uint256 contents;
    }
    struct ValueArray {
        Value[] inner;
    }
    struct ValueStack {
        ValueArray proved;
        bytes32 remainingHash;
    }

    function executeOneStep(ExecutionContext memory, Machine memory startMach, Module memory startMod, Instruction memory inst, bytes memory proof) external pure returns (Machine memory mach, Module memory mod);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "executeOneStep",
    "inputs": [
      {
        "name": "",
        "type": "tuple",
        "internalType": "struct ExecutionContext",
        "components": [
          {
            "name": "maxInboxMessagesRead",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "bridge",
            "type": "address",
            "internalType": "contract IBridge"
          },
          {
            "name": "initialWasmModuleRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          }
        ]
      },
      {
        "name": "startMach",
        "type": "tuple",
        "internalType": "struct Machine",
        "components": [
          {
            "name": "status",
            "type": "uint8",
            "internalType": "enum MachineStatus"
          },
          {
            "name": "valueStack",
            "type": "tuple",
            "internalType": "struct ValueStack",
            "components": [
              {
                "name": "proved",
                "type": "tuple",
                "internalType": "struct ValueArray",
                "components": [
                  {
                    "name": "inner",
                    "type": "tuple[]",
                    "internalType": "struct Value[]",
                    "components": [
                      {
                        "name": "valueType",
                        "type": "uint8",
                        "internalType": "enum ValueType"
                      },
                      {
                        "name": "contents",
                        "type": "uint256",
                        "internalType": "uint256"
                      }
                    ]
                  }
                ]
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "valueMultiStack",
            "type": "tuple",
            "internalType": "struct MultiStack",
            "components": [
              {
                "name": "inactiveStackHash",
                "type": "bytes32",
                "internalType": "bytes32"
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "internalStack",
            "type": "tuple",
            "internalType": "struct ValueStack",
            "components": [
              {
                "name": "proved",
                "type": "tuple",
                "internalType": "struct ValueArray",
                "components": [
                  {
                    "name": "inner",
                    "type": "tuple[]",
                    "internalType": "struct Value[]",
                    "components": [
                      {
                        "name": "valueType",
                        "type": "uint8",
                        "internalType": "enum ValueType"
                      },
                      {
                        "name": "contents",
                        "type": "uint256",
                        "internalType": "uint256"
                      }
                    ]
                  }
                ]
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "frameStack",
            "type": "tuple",
            "internalType": "struct StackFrameWindow",
            "components": [
              {
                "name": "proved",
                "type": "tuple[]",
                "internalType": "struct StackFrame[]",
                "components": [
                  {
                    "name": "returnPc",
                    "type": "tuple",
                    "internalType": "struct Value",
                    "components": [
                      {
                        "name": "valueType",
                        "type": "uint8",
                        "internalType": "enum ValueType"
                      },
                      {
                        "name": "contents",
                        "type": "uint256",
                        "internalType": "uint256"
                      }
                    ]
                  },
                  {
                    "name": "localsMerkleRoot",
                    "type": "bytes32",
                    "internalType": "bytes32"
                  },
                  {
                    "name": "callerModule",
                    "type": "uint32",
                    "internalType": "uint32"
                  },
                  {
                    "name": "callerModuleInternals",
                    "type": "uint32",
                    "internalType": "uint32"
                  }
                ]
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "frameMultiStack",
            "type": "tuple",
            "internalType": "struct MultiStack",
            "components": [
              {
                "name": "inactiveStackHash",
                "type": "bytes32",
                "internalType": "bytes32"
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "globalStateHash",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "moduleIdx",
            "type": "uint32",
            "internalType": "uint32"
          },
          {
            "name": "functionIdx",
            "type": "uint32",
            "internalType": "uint32"
          },
          {
            "name": "functionPc",
            "type": "uint32",
            "internalType": "uint32"
          },
          {
            "name": "recoveryPc",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "modulesRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          }
        ]
      },
      {
        "name": "startMod",
        "type": "tuple",
        "internalType": "struct Module",
        "components": [
          {
            "name": "globalsMerkleRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "moduleMemory",
            "type": "tuple",
            "internalType": "struct ModuleMemory",
            "components": [
              {
                "name": "size",
                "type": "uint64",
                "internalType": "uint64"
              },
              {
                "name": "maxSize",
                "type": "uint64",
                "internalType": "uint64"
              },
              {
                "name": "merkleRoot",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "tablesMerkleRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "functionsMerkleRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "extraHash",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "internalsOffset",
            "type": "uint32",
            "internalType": "uint32"
          }
        ]
      },
      {
        "name": "inst",
        "type": "tuple",
        "internalType": "struct Instruction",
        "components": [
          {
            "name": "opcode",
            "type": "uint16",
            "internalType": "uint16"
          },
          {
            "name": "argumentData",
            "type": "uint256",
            "internalType": "uint256"
          }
        ]
      },
      {
        "name": "proof",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "mach",
        "type": "tuple",
        "internalType": "struct Machine",
        "components": [
          {
            "name": "status",
            "type": "uint8",
            "internalType": "enum MachineStatus"
          },
          {
            "name": "valueStack",
            "type": "tuple",
            "internalType": "struct ValueStack",
            "components": [
              {
                "name": "proved",
                "type": "tuple",
                "internalType": "struct ValueArray",
                "components": [
                  {
                    "name": "inner",
                    "type": "tuple[]",
                    "internalType": "struct Value[]",
                    "components": [
                      {
                        "name": "valueType",
                        "type": "uint8",
                        "internalType": "enum ValueType"
                      },
                      {
                        "name": "contents",
                        "type": "uint256",
                        "internalType": "uint256"
                      }
                    ]
                  }
                ]
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "valueMultiStack",
            "type": "tuple",
            "internalType": "struct MultiStack",
            "components": [
              {
                "name": "inactiveStackHash",
                "type": "bytes32",
                "internalType": "bytes32"
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "internalStack",
            "type": "tuple",
            "internalType": "struct ValueStack",
            "components": [
              {
                "name": "proved",
                "type": "tuple",
                "internalType": "struct ValueArray",
                "components": [
                  {
                    "name": "inner",
                    "type": "tuple[]",
                    "internalType": "struct Value[]",
                    "components": [
                      {
                        "name": "valueType",
                        "type": "uint8",
                        "internalType": "enum ValueType"
                      },
                      {
                        "name": "contents",
                        "type": "uint256",
                        "internalType": "uint256"
                      }
                    ]
                  }
                ]
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "frameStack",
            "type": "tuple",
            "internalType": "struct StackFrameWindow",
            "components": [
              {
                "name": "proved",
                "type": "tuple[]",
                "internalType": "struct StackFrame[]",
                "components": [
                  {
                    "name": "returnPc",
                    "type": "tuple",
                    "internalType": "struct Value",
                    "components": [
                      {
                        "name": "valueType",
                        "type": "uint8",
                        "internalType": "enum ValueType"
                      },
                      {
                        "name": "contents",
                        "type": "uint256",
                        "internalType": "uint256"
                      }
                    ]
                  },
                  {
                    "name": "localsMerkleRoot",
                    "type": "bytes32",
                    "internalType": "bytes32"
                  },
                  {
                    "name": "callerModule",
                    "type": "uint32",
                    "internalType": "uint32"
                  },
                  {
                    "name": "callerModuleInternals",
                    "type": "uint32",
                    "internalType": "uint32"
                  }
                ]
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "frameMultiStack",
            "type": "tuple",
            "internalType": "struct MultiStack",
            "components": [
              {
                "name": "inactiveStackHash",
                "type": "bytes32",
                "internalType": "bytes32"
              },
              {
                "name": "remainingHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "globalStateHash",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "moduleIdx",
            "type": "uint32",
            "internalType": "uint32"
          },
          {
            "name": "functionIdx",
            "type": "uint32",
            "internalType": "uint32"
          },
          {
            "name": "functionPc",
            "type": "uint32",
            "internalType": "uint32"
          },
          {
            "name": "recoveryPc",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "modulesRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          }
        ]
      },
      {
        "name": "mod",
        "type": "tuple",
        "internalType": "struct Module",
        "components": [
          {
            "name": "globalsMerkleRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "moduleMemory",
            "type": "tuple",
            "internalType": "struct ModuleMemory",
            "components": [
              {
                "name": "size",
                "type": "uint64",
                "internalType": "uint64"
              },
              {
                "name": "maxSize",
                "type": "uint64",
                "internalType": "uint64"
              },
              {
                "name": "merkleRoot",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "name": "tablesMerkleRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "functionsMerkleRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "extraHash",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "internalsOffset",
            "type": "uint32",
            "internalType": "uint32"
          }
        ]
      }
    ],
    "stateMutability": "pure"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod OneStepProver0 {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052348015600e575f5ffd5b50612f998061001c5f395ff3fe608060405234801561000f575f5ffd5b5060043610610029575f3560e01c8063a92cb5011461002d575b5f5ffd5b61004061003b366004612528565b610057565b60405161004e92919061271f565b60405180910390f35b61005f612342565b6100676123fa565b61007087612c51565b915061008136879003870187612d91565b90505f6100916020870187612e42565b905061246461ffff82166100a857506104cd6104af565b5f1961ffff8316016100bd57506104d86104af565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff161ffff8316016100f157506104df6104af565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff061ffff83160161012557506105056104af565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7ff761ffff83160161015957506105cf6104af565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7ff561ffff83160161018d575061067c6104af565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7ff461ffff8316016101c1575061073a6104af565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7ff661ffff8316016101f557506108946104af565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffef61ffff83160161022957506109816104af565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7ffd61ffff83160161025d5750610da76104af565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7ffc61ffff8316016102915750610e176104af565b601f1961ffff8316016102a75750610ea46104af565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdf61ffff8316016102db5750610ee46104af565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdd61ffff83160161030f5750610f276104af565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc61ffff8316016103435750610f4d6104af565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7ffe61ffff8316016103775750610f7b6104af565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe661ffff8316016103ab57506110136104af565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe561ffff8316016103df57506110206104af565b604161ffff8316108015906103f95750604461ffff831611155b15610407575061108c6104af565b61ffff82166180051480610420575061ffff8216618006145b1561042e57506111fa6104af565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7ff861ffff83160161046257506112bf6104af565b60405162461bcd60e51b815260206004820152600e60248201527f494e56414c49445f4f50434f444500000000000000000000000000000000000060448201526064015b60405180910390fd5b6104c084848989898663ffffffff16565b5050965096945050505050565b505060029092525050565b5050505050565b5f6104ed86608001516112cd565b80519091506104fd90879061139c565b505050505050565b61051c61051186611414565b60208701519061143b565b5f61052a8660800151611447565b905061054761053c82604001516114c2565b60208801519061143b565b61055761053c82606001516114c2565b602084013563ffffffff811681146105b15760405162461bcd60e51b815260206004820152600d60248201527f4241445f43414c4c5f444154410000000000000000000000000000000000000060448201526064016104a6565b63ffffffff1661010087015250505f61012090940193909352505050565b6105db61051186611414565b6105eb6105118660e001516114c2565b6105fb6105118560a001516114c2565b6020808401359081901c604082901c156106575760405162461bcd60e51b815260206004820152601a60248201527f4241445f43524f53535f4d4f44554c455f43414c4c5f4441544100000000000060448201526064016104a6565b63ffffffff90811660e08801521661010086015250505f610120909301929092525050565b61068861051186611414565b5f6106968660800151611447565b90506106a861053c82604001516114c2565b6106b861053c82606001516114c2565b6020808501359081901c604082901c156107145760405162461bcd60e51b815260206004820152601a60248201527f4241445f43524f53535f4d4f44554c455f43414c4c5f4441544100000000000060448201526064016104a6565b63ffffffff90811660e08901521661010087015250505f61012090940193909352505050565b5f836020013590505f61075861075388602001516114e8565b6114fb565b90506107626123fa565b6040805160208101909152606081525f61077d8787836115b7565b909350905061078d878783611678565b6101608c015191935091506107ad8363ffffffff80881690879061174516565b146108205760405162461bcd60e51b815260206004820152602260248201527f43524f53535f4d4f44554c455f494e5445524e414c5f4d4f44554c45535f524f60448201527f4f5400000000000000000000000000000000000000000000000000000000000060648201526084016104a6565b61083761082c8b611414565b60208c01519061143b565b61084761082c8b60e001516114c2565b61085761082c8a60a001516114c2565b63ffffffff841660e08b015260a08301516108729086612e77565b63ffffffff166101008b015250505f6101209098019790975250505050505050565b6108a061051186611414565b6108b06105118660e001516114c2565b6108c06105118560a001516114c2565b5f6108ce8660800151611447565b9050806060015163ffffffff165f036108eb5750600285526104d8565b602084013563ffffffff811681146109455760405162461bcd60e51b815260206004820152601d60248201527f4241445f43414c4c45525f494e5445524e414c5f43414c4c5f4441544100000060448201526064016104a6565b604082015163ffffffff1660e08801526060820151610965908290612e77565b63ffffffff1661010088015250505f6101208601525050505050565b5f5f61099361075388602001516114e8565b90505f5f5f5f90505f5f5f6109b46040518060200160405280606081525090565b6109bf8b8b87611799565b955093506109ce8b8b876117f5565b90965094506109de8b8b87611810565b955092506109ed8b8b87611799565b955091506109fc8b8b876117f5565b9097509450610a0c8b8b87611678565b6040517f43616c6c20696e6469726563743a00000000000000000000000000000000000060208201527fffffffffffffffff00000000000000000000000000000000000000000000000060c088901b16602e820152603681018990529096509091505f9060560160408051601f19818403018152919052805160209182012091508d01358114610ade5760405162461bcd60e51b815260206004820152601660248201527f4241445f43414c4c5f494e4449524543545f444154410000000000000000000060448201526064016104a6565b610af58267ffffffffffffffff871686868c611845565b90508d604001518114610b4a5760405162461bcd60e51b815260206004820152600f60248201527f4241445f5441424c45535f524f4f54000000000000000000000000000000000060448201526064016104a6565b8267ffffffffffffffff168963ffffffff1610610b7557505060028d52506104d89650505050505050565b50505050505f610b8361246e565b604080516020810190915260608152610b9d8a8a866117f5565b94509250610bac8a8a86611938565b94509150610bbb8a8a86611678565b945090505f610bd78263ffffffff808b169087908790611a3516565b9050868114610c285760405162461bcd60e51b815260206004820152601160248201527f4241445f454c454d454e54535f524f4f5400000000000000000000000000000060448201526064016104a6565b858414610c58578d60025b90816002811115610c4657610c466125fb565b815250505050505050505050506104d8565b600483516006811115610c6d57610c6d6125fb565b03610c7a578d6002610c33565b600583516006811115610c8f57610c8f6125fb565b03610cf5576020830151985063ffffffff89168914610cf05760405162461bcd60e51b815260206004820152601560248201527f4241445f46554e435f5245465f434f4e54454e5453000000000000000000000060448201526064016104a6565b610d3d565b60405162461bcd60e51b815260206004820152600d60248201527f4241445f454c454d5f545950450000000000000000000000000000000000000060448201526064016104a6565b5050505050505050610d5161053c87611414565b5f610d5f8760800151611447565b9050610d7c610d7182604001516114c2565b60208901519061143b565b610d8c610d7182606001516114c2565b5063ffffffff166101008601525f6101208601525050505050565b602083013563ffffffff81168114610e015760405162461bcd60e51b815260206004820152600d60248201527f4241445f43414c4c5f444154410000000000000000000000000000000000000060448201526064016104a6565b63ffffffff166101209095019490945250505050565b5f610e2861075387602001516114e8565b905063ffffffff8116156104fd57602084013563ffffffff81168114610e905760405162461bcd60e51b815260206004820152600d60248201527f4241445f43414c4c5f444154410000000000000000000000000000000000000060448201526064016104a6565b63ffffffff16610120870152505050505050565b5f610eb28660800151611447565b90505f610ec9826020015186602001358686611adf565b6020880151909150610edb908261143b565b50505050505050565b5f610ef286602001516114e8565b90505f610f028760800151611447565b9050610f1981602001518660200135848787611b87565b602090910152505050505050565b5f610f3b855f015185602001358585611adf565b60208701519091506104fd908261143b565b5f610f5b86602001516114e8565b9050610f71855f01518560200135838686611b87565b9094525050505050565b5f610f8986602001516114e8565b90505f610f9987602001516114e8565b90505f610fa988602001516114e8565b90505f604051806080016040528083815260200188602001355f1b8152602001610fd2856114fb565b63ffffffff168152602001610fe6866114fb565b63ffffffff168152509050611008818a60800151611c3690919063ffffffff16565b505050505050505050565b6104fd85602001516114e8565b5f61103161075387602001516114e8565b90505f61104187602001516114e8565b90505f61105188602001516114e8565b905063ffffffff83161561107357602088015161106e908261143b565b611082565b6020880151611082908361143b565b5050505050505050565b5f61109a6020850185612e42565b90505f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbf61ffff8316016110cf57505f6111b0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbe61ffff831601611102575060016111b0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbd61ffff831601611135575060026111b0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbc61ffff831601611168575060036111b0565b60405162461bcd60e51b815260206004820152601960248201527f434f4e53545f505553485f494e56414c49445f4f50434f44450000000000000060448201526064016104a6565b610edb60405180604001604052808360068111156111d0576111d06125fb565b8152602001876020013567ffffffffffffffff16815250886020015161143b90919063ffffffff16565b61120261246e565b6180056112126020860186612e42565b61ffff160361123f5761122886602001516114e8565b606087015190915061123a908261143b565b6104fd565b61800661124f6020860186612e42565b61ffff16036112775761126586606001516114e8565b602087015190915061123a908261143b565b60405162461bcd60e51b815260206004820152601c60248201527f4d4f56455f494e5445524e414c5f494e56414c49445f4f50434f44450000000060448201526064016104a6565b5f610f3b8660200151611d10565b6112d5612487565b8151516001146113275760405162461bcd60e51b815260206004820152601160248201527f4241445f57494e444f575f4c454e47544800000000000000000000000000000060448201526064016104a6565b815180515f9061133957611339612e93565b602002602001015190505f67ffffffffffffffff81111561135c5761135c61289b565b60405190808252806020026020018201604052801561139557816020015b611382612487565b81526020019060019003908161137a5790505b5090915290565b6004815160068111156113b1576113b16125fb565b036113d4578160025b908160028111156113cd576113cd6125fb565b9052505050565b6006815160068111156113e9576113e96125fb565b146113f6578160026113ba565b611404828260200151611d32565b611410578160026113ba565b5050565b61141c61246e565b6114358261012001518361010001518460e00151611d72565b92915050565b81516114109082611dba565b61144f612487565b8151516001146114a15760405162461bcd60e51b815260206004820152601160248201527f4241445f57494e444f575f4c454e47544800000000000000000000000000000060448201526064016104a6565b815180515f906114b3576114b3612e93565b60200260200101519050919050565b6114ca61246e565b50604080518082019091525f815263ffffffff909116602082015290565b6114f061246e565b815161143590611e6b565b60208101515f908183516006811115611516576115166125fb565b146115635760405162461bcd60e51b815260206004820152600760248201527f4e4f545f4933320000000000000000000000000000000000000000000000000060448201526064016104a6565b64010000000081106114355760405162461bcd60e51b815260206004820152600760248201527f4241445f4933320000000000000000000000000000000000000000000000000060448201526064016104a6565b6115bf6123fa565b604080516060810182525f808252602082018190529181018290528391905f5f5f5f6115ec8b8b896117f5565b975095506115fb8b8b89611f4f565b9750945061160a8b8b896117f5565b975093506116198b8b896117f5565b975092506116288b8b896117f5565b975091506116378b8b89611fc9565b6040805160c081018252988952602089019790975295870194909452506060850191909152608084015263ffffffff1660a083015290969095509350505050565b604080516020810190915260608152815f611694868684611810565b925090505f60ff821667ffffffffffffffff8111156116b5576116b561289b565b6040519080825280602002602001820160405280156116de578160200160208202803683370190505b5090505f5b8260ff168160ff161015611729576116fc8888866117f5565b838360ff168151811061171157611711612e93565b602090810291909101019190915293506001016116e3565b5060405180602001604052808281525093505050935093915050565b5f61178f848461175485612018565b6040518060400160405280601381526020017f4d6f64756c65206d65726b6c6520747265653a000000000000000000000000008152506120dd565b90505b9392505050565b5f81815b60088110156117ec5760088367ffffffffffffffff16901b92508585838181106117c9576117c9612e93565b919091013560f81c939093179250816117e181612ea7565b92505060010161179d565b50935093915050565b5f81816118038686846121e7565b9097909650945050505050565b5f8184848281811061182457611824612e93565b919091013560f81c925081905061183a81612ea7565b915050935093915050565b6040517f5461626c653a000000000000000000000000000000000000000000000000000060208201527fff0000000000000000000000000000000000000000000000000000000000000060f885901b1660268201527fffffffffffffffff00000000000000000000000000000000000000000000000060c084901b166027820152602f81018290525f908190604f0160405160208183030381529060405280519060200120905061192d8787836040518060400160405280601281526020017f5461626c65206d65726b6c6520747265653a00000000000000000000000000008152506120dd565b979650505050505050565b61194061246e565b815f85858381811061195457611954612e93565b919091013560f81c915082905061196a81612ea7565b925050611975600690565b6006811115611986576119866125fb565b60ff168160ff1611156119db5760405162461bcd60e51b815260206004820152600e60248201527f4241445f56414c55455f5459504500000000000000000000000000000000000060448201526064016104a6565b5f6119e78787856121e7565b809450819250505060405180604001604052808360ff166006811115611a0f57611a0f6125fb565b6006811115611a2057611a206125fb565b81526020018281525093505050935093915050565b5f5f83611a4184612230565b6040517f5461626c6520656c656d656e743a0000000000000000000000000000000000006020820152602e810192909252604e820152606e01604051602081830303815290604052805190602001209050611ad38686836040518060400160405280601a81526020017f5461626c6520656c656d656e74206d65726b6c6520747265653a0000000000008152506120dd565b9150505b949350505050565b611ae761246e565b5f611af061246e565b604080516020810190915260608152611b0a868685611938565b93509150611b19868685611678565b935090505f611b2982898561224b565b9050888114611b7a5760405162461bcd60e51b815260206004820152601160248201527f57524f4e475f4d45524b4c455f524f4f5400000000000000000000000000000060448201526064016104a6565b5090979650505050505050565b5f611b9061246e565b6040805160208101909152606081525f90611bac868684611938565b9093509150611bbc868684611678565b925090505f611bcc828a8661224b565b9050898114611c1d5760405162461bcd60e51b815260206004820152601160248201527f57524f4e475f4d45524b4c455f524f4f5400000000000000000000000000000060448201526064016104a6565b611c28828a8a61224b565b9a9950505050505050505050565b8151515f90611c46906001612ebf565b67ffffffffffffffff811115611c5e57611c5e61289b565b604051908082528060200260200182016040528015611c9757816020015b611c84612487565b815260200190600190039081611c7c5790505b5090505f5b835151811015611ce7578351805182908110611cba57611cba612e93565b6020026020010151828281518110611cd457611cd4612e93565b6020908102919091010152600101611c9c565b508181845f01515181518110611cff57611cff612e93565b602090810291909101015290915250565b611d1861246e565b81515151611792611d2a600183612ed2565b845190612295565b5f606082901c15611d4457505f611435565b5063ffffffff818116610120840152602082901c811661010084015260409190911c1660e090910152600190565b611d7a61246e565b506040805180820182526006815263ffffffff94909416602093841b67ffffffff00000000161791901b6bffffffff000000000000000016179082015290565b8151515f90611dca906001612ebf565b67ffffffffffffffff811115611de257611de261289b565b604051908082528060200260200182016040528015611e1b57816020015b611e0861246e565b815260200190600190039081611e005790505b5090505f5b835151811015611ce7578351805182908110611e3e57611e3e612e93565b6020026020010151828281518110611e5857611e58612e93565b6020908102919091010152600101611e20565b611e7361246e565b81518051611e8390600190612ed2565b81518110611e9357611e93612e93565b602002602001015190505f6001835f015151611eaf9190612ed2565b67ffffffffffffffff811115611ec757611ec761289b565b604051908082528060200260200182016040528015611f0057816020015b611eed61246e565b815260200190600190039081611ee55790505b5090505f5b8151811015611395578351805182908110611f2257611f22612e93565b6020026020010151828281518110611f3c57611f3c612e93565b6020908102919091010152600101611f05565b604080516060810182525f8082526020820181905291810191909152815f8080611f7a888886611799565b94509250611f89888886611799565b94509150611f988888866117f5565b6040805160608101825267ffffffffffffffff96871681529490951660208501529383015250969095509350505050565b5f81815b60048110156117ec5760088363ffffffff16901b9250858583818110611ff557611ff5612e93565b919091013560f81c9390931792508161200d81612ea7565b925050600101611fcd565b5f815f015161202a83602001516122c1565b6040808501516060860151608087015160a088015193516120c0969594906020017f4d6f64756c653a0000000000000000000000000000000000000000000000000081526007810196909652602786019490945260478501929092526067840152608783015260e01b7fffffffff000000000000000000000000000000000000000000000000000000001660a782015260ab0190565b604051602081830303815290604052805190602001209050919050565b815f5b85515181101561219857846001165f03612142578282875f0151838151811061210b5761210b612e93565b602002602001015160405160200161212593929190612ee5565b60405160208183030381529060405280519060200120915061218c565b82865f0151828151811061215857612158612e93565b60200260200101518360405160200161217393929190612ee5565b6040516020818303038152906040528051906020012091505b600194851c94016120e0565b508315611ad75760405162461bcd60e51b815260206004820152600f60248201527f50524f4f465f544f4f5f53484f5254000000000000000000000000000000000060448201526064016104a6565b5f81815b60208110156117ec57600883901b925085858381811061220d5761220d612e93565b919091013560f81c9390931792508161222581612ea7565b9250506001016121eb565b5f815f015182602001516040516020016120c0929190612f04565b5f61178f848461225a85612230565b6040518060400160405280601281526020017f56616c7565206d65726b6c6520747265653a00000000000000000000000000008152506120dd565b61229d61246e565b82518051839081106122b1576122b1612e93565b6020026020010151905092915050565b805160208083015160408085015190517f4d656d6f72793a00000000000000000000000000000000000000000000000000938101939093527fffffffffffffffff00000000000000000000000000000000000000000000000060c094851b811660278501529190931b16602f82015260378101919091525f906057016120c0565b604080516101808101909152805f815260200161235d6124b4565b815260200161237d60405180604001604052805f81526020015f81525090565b815260200161238a6124b4565b81526020016123ab6040518060400160405280606081526020015f81525090565b81526020016123cb60405180604001604052805f81526020015f81525090565b81525f6020820181905260408201819052606082018190526080820181905260a0820181905260c09091015290565b6040518060c001604052805f815260200161244060405180606001604052805f67ffffffffffffffff1681526020015f67ffffffffffffffff1681526020015f81525090565b81526020015f81526020015f81526020015f81526020015f63ffffffff1681525090565b61246c612f4f565b565b60408051808201909152805f5b81526020015f81525090565b604051806080016040528061249a61246e565b81525f602082018190526040820181905260609091015290565b604080516060808201835291810191825290819061247b565b5f604082840312156124dd575f5ffd5b50919050565b5f5f83601f8401126124f3575f5ffd5b50813567ffffffffffffffff81111561250a575f5ffd5b602083019150836020828501011115612521575f5ffd5b9250929050565b5f5f5f5f5f5f8688036101e081121561253f575f5ffd5b606081121561254c575f5ffd5b879650606088013567ffffffffffffffff811115612568575f5ffd5b88016101c0818b03121561257a575f5ffd5b95506101007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80820112156125ac575f5ffd5b506080870193506125c18861018089016124cd565b92506101c087013567ffffffffffffffff8111156125dd575f5ffd5b6125e989828a016124e3565b979a9699509497509295939492505050565b634e487b7160e01b5f52602160045260245ffd5b6003811061261f5761261f6125fb565b9052565b805160078110612635576126356125fb565b8252602090810151910152565b80516040808452905160209184018290528051606085018190525f9290910190829060808601905b808310156126945761267d828551612623565b60408201915060208401935060018301925061266a565b506020850151602087015280935050505092915050565b8051604080845281519084018190525f9160200190829060608601905b808310156126945783516126dd838251612623565b6020810151604084015263ffffffff604082015116606084015263ffffffff60608201511660808401525060a0820191506020840193506001830192506126c8565b61012081526127336101208201845161260f565b5f60208401516101c06101408401526127506102e0840182612642565b6040860151805161016086015260200151610180850152606086015184820361011f19016101a08601529091506127878282612642565b915050608085015161011f19848303016101c08501526127a782826126ab565b91505060a08501516127c76101e085018280518252602090810151910152565b5060c085015161022084015260e085015163ffffffff81166102408501525061010085015163ffffffff81166102608501525061012085015163ffffffff8116610280850152506101408501516102a08401526101608501516102c08401529050611792602083018480518252602081015167ffffffffffffffff815116602084015267ffffffffffffffff6020820151166040840152604081015160608401525060408101516080830152606081015160a0830152608081015160c083015263ffffffff60a08201511660e08301525050565b634e487b7160e01b5f52604160045260245ffd5b6040805190810167ffffffffffffffff811182821017156128d2576128d261289b565b60405290565b6040516020810167ffffffffffffffff811182821017156128d2576128d261289b565b6040516080810167ffffffffffffffff811182821017156128d2576128d261289b565b604051610180810167ffffffffffffffff811182821017156128d2576128d261289b565b60405160c0810167ffffffffffffffff811182821017156128d2576128d261289b565b6040516060810167ffffffffffffffff811182821017156128d2576128d261289b565b604051601f8201601f1916810167ffffffffffffffff811182821017156129b1576129b161289b565b604052919050565b8035600381106129c7575f5ffd5b919050565b5f67ffffffffffffffff8211156129e5576129e561289b565b5060051b60200190565b5f604082840312156129ff575f5ffd5b612a076128af565b9050813560078110612a17575f5ffd5b808252506020820135602082015292915050565b5f60408284031215612a3b575f5ffd5b612a436128af565b9050813567ffffffffffffffff811115612a5b575f5ffd5b820160208185031215612a6c575f5ffd5b612a746128d8565b813567ffffffffffffffff811115612a8a575f5ffd5b80830192505084601f830112612a9e575f5ffd5b8135612ab1612aac826129cc565b612988565b8082825260208201915060208360061b860101925087831115612ad2575f5ffd5b6020850194505b82851015612afe57612aeb88866129ef565b8252602082019150604085019450612ad9565b8352505082525060209182013591810191909152919050565b5f60408284031215612b27575f5ffd5b612b2f6128af565b823581526020928301359281019290925250919050565b803563ffffffff811681146129c7575f5ffd5b5f60408284031215612b69575f5ffd5b612b716128af565b9050813567ffffffffffffffff811115612b89575f5ffd5b8201601f81018413612b99575f5ffd5b8035612ba7612aac826129cc565b80828252602082019150602060a08402850101925086831115612bc8575f5ffd5b6020840193505b82841015612c3a5760a08488031215612be6575f5ffd5b612bee6128fb565b612bf888866129ef565b815260408501356020820152612c1060608601612b46565b6040820152612c2160808601612b46565b6060820152825260a09390930192602090910190612bcf565b845250505060209182013591810191909152919050565b5f6101c08236031215612c62575f5ffd5b612c6a61291e565b612c73836129b9565b8152602083013567ffffffffffffffff811115612c8e575f5ffd5b612c9a36828601612a2b565b602083015250612cad3660408501612b17565b6040820152608083013567ffffffffffffffff811115612ccb575f5ffd5b612cd736828601612a2b565b60608301525060a083013567ffffffffffffffff811115612cf6575f5ffd5b612d0236828601612b59565b608083015250612d153660c08501612b17565b60a082015261010083013560c0820152612d326101208401612b46565b60e0820152612d446101408401612b46565b610100820152612d576101608401612b46565b6101208201526101808301356101408201526101a0909201356101608301525090565b803567ffffffffffffffff811681146129c7575f5ffd5b5f81830361010081128015612da4575f5ffd5b50612dad612942565b833581526060601f1983011215612dc2575f5ffd5b612dca612965565b9150612dd860208501612d7a565b8252612de660408501612d7a565b602083810191909152606085810135604080860191909152918301939093526080808601359183019190915260a08501359282019290925260c0840135918101829052612e3560e08501612b46565b60a0820152949350505050565b5f60208284031215612e52575f5ffd5b813561ffff81168114611792575f5ffd5b634e487b7160e01b5f52601160045260245ffd5b63ffffffff818116838216019081111561143557611435612e63565b634e487b7160e01b5f52603260045260245ffd5b5f60018201612eb857612eb8612e63565b5060010190565b8082018082111561143557611435612e63565b8181038181111561143557611435612e63565b5f84518060208701845e91909101928352506020820152604001919050565b7f56616c75653a000000000000000000000000000000000000000000000000000081525f60078410612f3857612f386125fb565b5060f89290921b6006830152600782015260270190565b634e487b7160e01b5f52605160045260245ffdfea2646970667358221220a96353044e12c878f6f28c2bc89a3e241817c078aaaaca543938bab889f7db7464736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15`\x0EW__\xFD[Pa/\x99\x80a\0\x1C_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0)W_5`\xE0\x1C\x80c\xA9,\xB5\x01\x14a\0-W[__\xFD[a\0@a\0;6`\x04a%(V[a\0WV[`@Qa\0N\x92\x91\x90a'\x1FV[`@Q\x80\x91\x03\x90\xF3[a\0_a#BV[a\0ga#\xFAV[a\0p\x87a,QV[\x91Pa\0\x816\x87\x90\x03\x87\x01\x87a-\x91V[\x90P_a\0\x91` \x87\x01\x87a.BV[\x90Pa$da\xFF\xFF\x82\x16a\0\xA8WPa\x04\xCDa\x04\xAFV[_\x19a\xFF\xFF\x83\x16\x01a\0\xBDWPa\x04\xD8a\x04\xAFV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xF1a\xFF\xFF\x83\x16\x01a\0\xF1WPa\x04\xDFa\x04\xAFV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xF0a\xFF\xFF\x83\x16\x01a\x01%WPa\x05\x05a\x04\xAFV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xF7a\xFF\xFF\x83\x16\x01a\x01YWPa\x05\xCFa\x04\xAFV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xF5a\xFF\xFF\x83\x16\x01a\x01\x8DWPa\x06|a\x04\xAFV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xF4a\xFF\xFF\x83\x16\x01a\x01\xC1WPa\x07:a\x04\xAFV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xF6a\xFF\xFF\x83\x16\x01a\x01\xF5WPa\x08\x94a\x04\xAFV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xEFa\xFF\xFF\x83\x16\x01a\x02)WPa\t\x81a\x04\xAFV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xFDa\xFF\xFF\x83\x16\x01a\x02]WPa\r\xA7a\x04\xAFV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xFCa\xFF\xFF\x83\x16\x01a\x02\x91WPa\x0E\x17a\x04\xAFV[`\x1F\x19a\xFF\xFF\x83\x16\x01a\x02\xA7WPa\x0E\xA4a\x04\xAFV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xDFa\xFF\xFF\x83\x16\x01a\x02\xDBWPa\x0E\xE4a\x04\xAFV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xDDa\xFF\xFF\x83\x16\x01a\x03\x0FWPa\x0F'a\x04\xAFV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xDCa\xFF\xFF\x83\x16\x01a\x03CWPa\x0FMa\x04\xAFV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xFEa\xFF\xFF\x83\x16\x01a\x03wWPa\x0F{a\x04\xAFV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE6a\xFF\xFF\x83\x16\x01a\x03\xABWPa\x10\x13a\x04\xAFV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE5a\xFF\xFF\x83\x16\x01a\x03\xDFWPa\x10 a\x04\xAFV[`Aa\xFF\xFF\x83\x16\x10\x80\x15\x90a\x03\xF9WP`Da\xFF\xFF\x83\x16\x11\x15[\x15a\x04\x07WPa\x10\x8Ca\x04\xAFV[a\xFF\xFF\x82\x16a\x80\x05\x14\x80a\x04 WPa\xFF\xFF\x82\x16a\x80\x06\x14[\x15a\x04.WPa\x11\xFAa\x04\xAFV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xF8a\xFF\xFF\x83\x16\x01a\x04bWPa\x12\xBFa\x04\xAFV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0E`$\x82\x01R\x7FINVALID_OPCODE\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01[`@Q\x80\x91\x03\x90\xFD[a\x04\xC0\x84\x84\x89\x89\x89\x86c\xFF\xFF\xFF\xFF\x16V[PP\x96P\x96\x94PPPPPV[PP`\x02\x90\x92RPPV[PPPPPV[_a\x04\xED\x86`\x80\x01Qa\x12\xCDV[\x80Q\x90\x91Pa\x04\xFD\x90\x87\x90a\x13\x9CV[PPPPPPV[a\x05\x1Ca\x05\x11\x86a\x14\x14V[` \x87\x01Q\x90a\x14;V[_a\x05*\x86`\x80\x01Qa\x14GV[\x90Pa\x05Ga\x05<\x82`@\x01Qa\x14\xC2V[` \x88\x01Q\x90a\x14;V[a\x05Wa\x05<\x82``\x01Qa\x14\xC2V[` \x84\x015c\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x05\xB1W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\r`$\x82\x01R\x7FBAD_CALL_DATA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xA6V[c\xFF\xFF\xFF\xFF\x16a\x01\0\x87\x01RPP_a\x01 \x90\x94\x01\x93\x90\x93RPPPV[a\x05\xDBa\x05\x11\x86a\x14\x14V[a\x05\xEBa\x05\x11\x86`\xE0\x01Qa\x14\xC2V[a\x05\xFBa\x05\x11\x85`\xA0\x01Qa\x14\xC2V[` \x80\x84\x015\x90\x81\x90\x1C`@\x82\x90\x1C\x15a\x06WW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1A`$\x82\x01R\x7FBAD_CROSS_MODULE_CALL_DATA\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xA6V[c\xFF\xFF\xFF\xFF\x90\x81\x16`\xE0\x88\x01R\x16a\x01\0\x86\x01RPP_a\x01 \x90\x93\x01\x92\x90\x92RPPV[a\x06\x88a\x05\x11\x86a\x14\x14V[_a\x06\x96\x86`\x80\x01Qa\x14GV[\x90Pa\x06\xA8a\x05<\x82`@\x01Qa\x14\xC2V[a\x06\xB8a\x05<\x82``\x01Qa\x14\xC2V[` \x80\x85\x015\x90\x81\x90\x1C`@\x82\x90\x1C\x15a\x07\x14W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1A`$\x82\x01R\x7FBAD_CROSS_MODULE_CALL_DATA\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xA6V[c\xFF\xFF\xFF\xFF\x90\x81\x16`\xE0\x89\x01R\x16a\x01\0\x87\x01RPP_a\x01 \x90\x94\x01\x93\x90\x93RPPPV[_\x83` \x015\x90P_a\x07Xa\x07S\x88` \x01Qa\x14\xE8V[a\x14\xFBV[\x90Pa\x07ba#\xFAV[`@\x80Q` \x81\x01\x90\x91R``\x81R_a\x07}\x87\x87\x83a\x15\xB7V[\x90\x93P\x90Pa\x07\x8D\x87\x87\x83a\x16xV[a\x01`\x8C\x01Q\x91\x93P\x91Pa\x07\xAD\x83c\xFF\xFF\xFF\xFF\x80\x88\x16\x90\x87\x90a\x17E\x16V[\x14a\x08 W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\"`$\x82\x01R\x7FCROSS_MODULE_INTERNAL_MODULES_RO`D\x82\x01R\x7FOT\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x04\xA6V[a\x087a\x08,\x8Ba\x14\x14V[` \x8C\x01Q\x90a\x14;V[a\x08Ga\x08,\x8B`\xE0\x01Qa\x14\xC2V[a\x08Wa\x08,\x8A`\xA0\x01Qa\x14\xC2V[c\xFF\xFF\xFF\xFF\x84\x16`\xE0\x8B\x01R`\xA0\x83\x01Qa\x08r\x90\x86a.wV[c\xFF\xFF\xFF\xFF\x16a\x01\0\x8B\x01RPP_a\x01 \x90\x98\x01\x97\x90\x97RPPPPPPPV[a\x08\xA0a\x05\x11\x86a\x14\x14V[a\x08\xB0a\x05\x11\x86`\xE0\x01Qa\x14\xC2V[a\x08\xC0a\x05\x11\x85`\xA0\x01Qa\x14\xC2V[_a\x08\xCE\x86`\x80\x01Qa\x14GV[\x90P\x80``\x01Qc\xFF\xFF\xFF\xFF\x16_\x03a\x08\xEBWP`\x02\x85Ra\x04\xD8V[` \x84\x015c\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\tEW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1D`$\x82\x01R\x7FBAD_CALLER_INTERNAL_CALL_DATA\0\0\0`D\x82\x01R`d\x01a\x04\xA6V[`@\x82\x01Qc\xFF\xFF\xFF\xFF\x16`\xE0\x88\x01R``\x82\x01Qa\te\x90\x82\x90a.wV[c\xFF\xFF\xFF\xFF\x16a\x01\0\x88\x01RPP_a\x01 \x86\x01RPPPPPV[__a\t\x93a\x07S\x88` \x01Qa\x14\xE8V[\x90P____\x90P___a\t\xB4`@Q\x80` \x01`@R\x80``\x81RP\x90V[a\t\xBF\x8B\x8B\x87a\x17\x99V[\x95P\x93Pa\t\xCE\x8B\x8B\x87a\x17\xF5V[\x90\x96P\x94Pa\t\xDE\x8B\x8B\x87a\x18\x10V[\x95P\x92Pa\t\xED\x8B\x8B\x87a\x17\x99V[\x95P\x91Pa\t\xFC\x8B\x8B\x87a\x17\xF5V[\x90\x97P\x94Pa\n\x0C\x8B\x8B\x87a\x16xV[`@Q\x7FCall indirect:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xC0\x88\x90\x1B\x16`.\x82\x01R`6\x81\x01\x89\x90R\x90\x96P\x90\x91P_\x90`V\x01`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R\x80Q` \x91\x82\x01 \x91P\x8D\x015\x81\x14a\n\xDEW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x16`$\x82\x01R\x7FBAD_CALL_INDIRECT_DATA\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xA6V[a\n\xF5\x82g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x87\x16\x86\x86\x8Ca\x18EV[\x90P\x8D`@\x01Q\x81\x14a\x0BJW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0F`$\x82\x01R\x7FBAD_TABLES_ROOT\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xA6V[\x82g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x89c\xFF\xFF\xFF\xFF\x16\x10a\x0BuWPP`\x02\x8DRPa\x04\xD8\x96PPPPPPPV[PPPPP_a\x0B\x83a$nV[`@\x80Q` \x81\x01\x90\x91R``\x81Ra\x0B\x9D\x8A\x8A\x86a\x17\xF5V[\x94P\x92Pa\x0B\xAC\x8A\x8A\x86a\x198V[\x94P\x91Pa\x0B\xBB\x8A\x8A\x86a\x16xV[\x94P\x90P_a\x0B\xD7\x82c\xFF\xFF\xFF\xFF\x80\x8B\x16\x90\x87\x90\x87\x90a\x1A5\x16V[\x90P\x86\x81\x14a\x0C(W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x11`$\x82\x01R\x7FBAD_ELEMENTS_ROOT\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xA6V[\x85\x84\x14a\x0CXW\x8D`\x02[\x90\x81`\x02\x81\x11\x15a\x0CFWa\x0CFa%\xFBV[\x81RPPPPPPPPPPPa\x04\xD8V[`\x04\x83Q`\x06\x81\x11\x15a\x0CmWa\x0Cma%\xFBV[\x03a\x0CzW\x8D`\x02a\x0C3V[`\x05\x83Q`\x06\x81\x11\x15a\x0C\x8FWa\x0C\x8Fa%\xFBV[\x03a\x0C\xF5W` \x83\x01Q\x98Pc\xFF\xFF\xFF\xFF\x89\x16\x89\x14a\x0C\xF0W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x15`$\x82\x01R\x7FBAD_FUNC_REF_CONTENTS\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xA6V[a\r=V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\r`$\x82\x01R\x7FBAD_ELEM_TYPE\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xA6V[PPPPPPPPa\rQa\x05<\x87a\x14\x14V[_a\r_\x87`\x80\x01Qa\x14GV[\x90Pa\r|a\rq\x82`@\x01Qa\x14\xC2V[` \x89\x01Q\x90a\x14;V[a\r\x8Ca\rq\x82``\x01Qa\x14\xC2V[Pc\xFF\xFF\xFF\xFF\x16a\x01\0\x86\x01R_a\x01 \x86\x01RPPPPPV[` \x83\x015c\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x0E\x01W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\r`$\x82\x01R\x7FBAD_CALL_DATA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xA6V[c\xFF\xFF\xFF\xFF\x16a\x01 \x90\x95\x01\x94\x90\x94RPPPPV[_a\x0E(a\x07S\x87` \x01Qa\x14\xE8V[\x90Pc\xFF\xFF\xFF\xFF\x81\x16\x15a\x04\xFDW` \x84\x015c\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x0E\x90W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\r`$\x82\x01R\x7FBAD_CALL_DATA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xA6V[c\xFF\xFF\xFF\xFF\x16a\x01 \x87\x01RPPPPPPV[_a\x0E\xB2\x86`\x80\x01Qa\x14GV[\x90P_a\x0E\xC9\x82` \x01Q\x86` \x015\x86\x86a\x1A\xDFV[` \x88\x01Q\x90\x91Pa\x0E\xDB\x90\x82a\x14;V[PPPPPPPV[_a\x0E\xF2\x86` \x01Qa\x14\xE8V[\x90P_a\x0F\x02\x87`\x80\x01Qa\x14GV[\x90Pa\x0F\x19\x81` \x01Q\x86` \x015\x84\x87\x87a\x1B\x87V[` \x90\x91\x01RPPPPPPV[_a\x0F;\x85_\x01Q\x85` \x015\x85\x85a\x1A\xDFV[` \x87\x01Q\x90\x91Pa\x04\xFD\x90\x82a\x14;V[_a\x0F[\x86` \x01Qa\x14\xE8V[\x90Pa\x0Fq\x85_\x01Q\x85` \x015\x83\x86\x86a\x1B\x87V[\x90\x94RPPPPPV[_a\x0F\x89\x86` \x01Qa\x14\xE8V[\x90P_a\x0F\x99\x87` \x01Qa\x14\xE8V[\x90P_a\x0F\xA9\x88` \x01Qa\x14\xE8V[\x90P_`@Q\x80`\x80\x01`@R\x80\x83\x81R` \x01\x88` \x015_\x1B\x81R` \x01a\x0F\xD2\x85a\x14\xFBV[c\xFF\xFF\xFF\xFF\x16\x81R` \x01a\x0F\xE6\x86a\x14\xFBV[c\xFF\xFF\xFF\xFF\x16\x81RP\x90Pa\x10\x08\x81\x8A`\x80\x01Qa\x1C6\x90\x91\x90c\xFF\xFF\xFF\xFF\x16V[PPPPPPPPPV[a\x04\xFD\x85` \x01Qa\x14\xE8V[_a\x101a\x07S\x87` \x01Qa\x14\xE8V[\x90P_a\x10A\x87` \x01Qa\x14\xE8V[\x90P_a\x10Q\x88` \x01Qa\x14\xE8V[\x90Pc\xFF\xFF\xFF\xFF\x83\x16\x15a\x10sW` \x88\x01Qa\x10n\x90\x82a\x14;V[a\x10\x82V[` \x88\x01Qa\x10\x82\x90\x83a\x14;V[PPPPPPPPV[_a\x10\x9A` \x85\x01\x85a.BV[\x90P_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xBFa\xFF\xFF\x83\x16\x01a\x10\xCFWP_a\x11\xB0V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xBEa\xFF\xFF\x83\x16\x01a\x11\x02WP`\x01a\x11\xB0V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xBDa\xFF\xFF\x83\x16\x01a\x115WP`\x02a\x11\xB0V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xBCa\xFF\xFF\x83\x16\x01a\x11hWP`\x03a\x11\xB0V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x19`$\x82\x01R\x7FCONST_PUSH_INVALID_OPCODE\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xA6V[a\x0E\xDB`@Q\x80`@\x01`@R\x80\x83`\x06\x81\x11\x15a\x11\xD0Wa\x11\xD0a%\xFBV[\x81R` \x01\x87` \x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RP\x88` \x01Qa\x14;\x90\x91\x90c\xFF\xFF\xFF\xFF\x16V[a\x12\x02a$nV[a\x80\x05a\x12\x12` \x86\x01\x86a.BV[a\xFF\xFF\x16\x03a\x12?Wa\x12(\x86` \x01Qa\x14\xE8V[``\x87\x01Q\x90\x91Pa\x12:\x90\x82a\x14;V[a\x04\xFDV[a\x80\x06a\x12O` \x86\x01\x86a.BV[a\xFF\xFF\x16\x03a\x12wWa\x12e\x86``\x01Qa\x14\xE8V[` \x87\x01Q\x90\x91Pa\x12:\x90\x82a\x14;V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1C`$\x82\x01R\x7FMOVE_INTERNAL_INVALID_OPCODE\0\0\0\0`D\x82\x01R`d\x01a\x04\xA6V[_a\x0F;\x86` \x01Qa\x1D\x10V[a\x12\xD5a$\x87V[\x81QQ`\x01\x14a\x13'W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x11`$\x82\x01R\x7FBAD_WINDOW_LENGTH\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xA6V[\x81Q\x80Q_\x90a\x139Wa\x139a.\x93V[` \x02` \x01\x01Q\x90P_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x13\\Wa\x13\\a(\x9BV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x13\x95W\x81` \x01[a\x13\x82a$\x87V[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x13zW\x90P[P\x90\x91R\x90V[`\x04\x81Q`\x06\x81\x11\x15a\x13\xB1Wa\x13\xB1a%\xFBV[\x03a\x13\xD4W\x81`\x02[\x90\x81`\x02\x81\x11\x15a\x13\xCDWa\x13\xCDa%\xFBV[\x90RPPPV[`\x06\x81Q`\x06\x81\x11\x15a\x13\xE9Wa\x13\xE9a%\xFBV[\x14a\x13\xF6W\x81`\x02a\x13\xBAV[a\x14\x04\x82\x82` \x01Qa\x1D2V[a\x14\x10W\x81`\x02a\x13\xBAV[PPV[a\x14\x1Ca$nV[a\x145\x82a\x01 \x01Q\x83a\x01\0\x01Q\x84`\xE0\x01Qa\x1DrV[\x92\x91PPV[\x81Qa\x14\x10\x90\x82a\x1D\xBAV[a\x14Oa$\x87V[\x81QQ`\x01\x14a\x14\xA1W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x11`$\x82\x01R\x7FBAD_WINDOW_LENGTH\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xA6V[\x81Q\x80Q_\x90a\x14\xB3Wa\x14\xB3a.\x93V[` \x02` \x01\x01Q\x90P\x91\x90PV[a\x14\xCAa$nV[P`@\x80Q\x80\x82\x01\x90\x91R_\x81Rc\xFF\xFF\xFF\xFF\x90\x91\x16` \x82\x01R\x90V[a\x14\xF0a$nV[\x81Qa\x145\x90a\x1EkV[` \x81\x01Q_\x90\x81\x83Q`\x06\x81\x11\x15a\x15\x16Wa\x15\x16a%\xFBV[\x14a\x15cW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FNOT_I32\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xA6V[d\x01\0\0\0\0\x81\x10a\x145W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FBAD_I32\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xA6V[a\x15\xBFa#\xFAV[`@\x80Q``\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R\x83\x91\x90____a\x15\xEC\x8B\x8B\x89a\x17\xF5V[\x97P\x95Pa\x15\xFB\x8B\x8B\x89a\x1FOV[\x97P\x94Pa\x16\n\x8B\x8B\x89a\x17\xF5V[\x97P\x93Pa\x16\x19\x8B\x8B\x89a\x17\xF5V[\x97P\x92Pa\x16(\x8B\x8B\x89a\x17\xF5V[\x97P\x91Pa\x167\x8B\x8B\x89a\x1F\xC9V[`@\x80Q`\xC0\x81\x01\x82R\x98\x89R` \x89\x01\x97\x90\x97R\x95\x87\x01\x94\x90\x94RP``\x85\x01\x91\x90\x91R`\x80\x84\x01Rc\xFF\xFF\xFF\xFF\x16`\xA0\x83\x01R\x90\x96\x90\x95P\x93PPPPV[`@\x80Q` \x81\x01\x90\x91R``\x81R\x81_a\x16\x94\x86\x86\x84a\x18\x10V[\x92P\x90P_`\xFF\x82\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x16\xB5Wa\x16\xB5a(\x9BV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x16\xDEW\x81` \x01` \x82\x02\x806\x837\x01\x90P[P\x90P_[\x82`\xFF\x16\x81`\xFF\x16\x10\x15a\x17)Wa\x16\xFC\x88\x88\x86a\x17\xF5V[\x83\x83`\xFF\x16\x81Q\x81\x10a\x17\x11Wa\x17\x11a.\x93V[` \x90\x81\x02\x91\x90\x91\x01\x01\x91\x90\x91R\x93P`\x01\x01a\x16\xE3V[P`@Q\x80` \x01`@R\x80\x82\x81RP\x93PPP\x93P\x93\x91PPV[_a\x17\x8F\x84\x84a\x17T\x85a \x18V[`@Q\x80`@\x01`@R\x80`\x13\x81R` \x01\x7FModule merkle tree:\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RPa \xDDV[\x90P[\x93\x92PPPV[_\x81\x81[`\x08\x81\x10\x15a\x17\xECW`\x08\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x1B\x92P\x85\x85\x83\x81\x81\x10a\x17\xC9Wa\x17\xC9a.\x93V[\x91\x90\x91\x015`\xF8\x1C\x93\x90\x93\x17\x92P\x81a\x17\xE1\x81a.\xA7V[\x92PP`\x01\x01a\x17\x9DV[P\x93P\x93\x91PPV[_\x81\x81a\x18\x03\x86\x86\x84a!\xE7V[\x90\x97\x90\x96P\x94PPPPPV[_\x81\x84\x84\x82\x81\x81\x10a\x18$Wa\x18$a.\x93V[\x91\x90\x91\x015`\xF8\x1C\x92P\x81\x90Pa\x18:\x81a.\xA7V[\x91PP\x93P\x93\x91PPV[`@Q\x7FTable:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R\x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xF8\x85\x90\x1B\x16`&\x82\x01R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xC0\x84\x90\x1B\x16`'\x82\x01R`/\x81\x01\x82\x90R_\x90\x81\x90`O\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90Pa\x19-\x87\x87\x83`@Q\x80`@\x01`@R\x80`\x12\x81R` \x01\x7FTable merkle tree:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RPa \xDDV[\x97\x96PPPPPPPV[a\x19@a$nV[\x81_\x85\x85\x83\x81\x81\x10a\x19TWa\x19Ta.\x93V[\x91\x90\x91\x015`\xF8\x1C\x91P\x82\x90Pa\x19j\x81a.\xA7V[\x92PPa\x19u`\x06\x90V[`\x06\x81\x11\x15a\x19\x86Wa\x19\x86a%\xFBV[`\xFF\x16\x81`\xFF\x16\x11\x15a\x19\xDBW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0E`$\x82\x01R\x7FBAD_VALUE_TYPE\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xA6V[_a\x19\xE7\x87\x87\x85a!\xE7V[\x80\x94P\x81\x92PPP`@Q\x80`@\x01`@R\x80\x83`\xFF\x16`\x06\x81\x11\x15a\x1A\x0FWa\x1A\x0Fa%\xFBV[`\x06\x81\x11\x15a\x1A Wa\x1A a%\xFBV[\x81R` \x01\x82\x81RP\x93PPP\x93P\x93\x91PPV[__\x83a\x1AA\x84a\"0V[`@Q\x7FTable element:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`.\x81\x01\x92\x90\x92R`N\x82\x01R`n\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90Pa\x1A\xD3\x86\x86\x83`@Q\x80`@\x01`@R\x80`\x1A\x81R` \x01\x7FTable element merkle tree:\0\0\0\0\0\0\x81RPa \xDDV[\x91PP[\x94\x93PPPPV[a\x1A\xE7a$nV[_a\x1A\xF0a$nV[`@\x80Q` \x81\x01\x90\x91R``\x81Ra\x1B\n\x86\x86\x85a\x198V[\x93P\x91Pa\x1B\x19\x86\x86\x85a\x16xV[\x93P\x90P_a\x1B)\x82\x89\x85a\"KV[\x90P\x88\x81\x14a\x1BzW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x11`$\x82\x01R\x7FWRONG_MERKLE_ROOT\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xA6V[P\x90\x97\x96PPPPPPPV[_a\x1B\x90a$nV[`@\x80Q` \x81\x01\x90\x91R``\x81R_\x90a\x1B\xAC\x86\x86\x84a\x198V[\x90\x93P\x91Pa\x1B\xBC\x86\x86\x84a\x16xV[\x92P\x90P_a\x1B\xCC\x82\x8A\x86a\"KV[\x90P\x89\x81\x14a\x1C\x1DW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x11`$\x82\x01R\x7FWRONG_MERKLE_ROOT\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xA6V[a\x1C(\x82\x8A\x8Aa\"KV[\x9A\x99PPPPPPPPPPV[\x81QQ_\x90a\x1CF\x90`\x01a.\xBFV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1C^Wa\x1C^a(\x9BV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x1C\x97W\x81` \x01[a\x1C\x84a$\x87V[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x1C|W\x90P[P\x90P_[\x83QQ\x81\x10\x15a\x1C\xE7W\x83Q\x80Q\x82\x90\x81\x10a\x1C\xBAWa\x1C\xBAa.\x93V[` \x02` \x01\x01Q\x82\x82\x81Q\x81\x10a\x1C\xD4Wa\x1C\xD4a.\x93V[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a\x1C\x9CV[P\x81\x81\x84_\x01QQ\x81Q\x81\x10a\x1C\xFFWa\x1C\xFFa.\x93V[` \x90\x81\x02\x91\x90\x91\x01\x01R\x90\x91RPV[a\x1D\x18a$nV[\x81QQQa\x17\x92a\x1D*`\x01\x83a.\xD2V[\x84Q\x90a\"\x95V[_``\x82\x90\x1C\x15a\x1DDWP_a\x145V[Pc\xFF\xFF\xFF\xFF\x81\x81\x16a\x01 \x84\x01R` \x82\x90\x1C\x81\x16a\x01\0\x84\x01R`@\x91\x90\x91\x1C\x16`\xE0\x90\x91\x01R`\x01\x90V[a\x1Dza$nV[P`@\x80Q\x80\x82\x01\x82R`\x06\x81Rc\xFF\xFF\xFF\xFF\x94\x90\x94\x16` \x93\x84\x1Bg\xFF\xFF\xFF\xFF\0\0\0\0\x16\x17\x91\x90\x1Bk\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\x16\x17\x90\x82\x01R\x90V[\x81QQ_\x90a\x1D\xCA\x90`\x01a.\xBFV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1D\xE2Wa\x1D\xE2a(\x9BV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x1E\x1BW\x81` \x01[a\x1E\x08a$nV[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x1E\0W\x90P[P\x90P_[\x83QQ\x81\x10\x15a\x1C\xE7W\x83Q\x80Q\x82\x90\x81\x10a\x1E>Wa\x1E>a.\x93V[` \x02` \x01\x01Q\x82\x82\x81Q\x81\x10a\x1EXWa\x1EXa.\x93V[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a\x1E V[a\x1Esa$nV[\x81Q\x80Qa\x1E\x83\x90`\x01\x90a.\xD2V[\x81Q\x81\x10a\x1E\x93Wa\x1E\x93a.\x93V[` \x02` \x01\x01Q\x90P_`\x01\x83_\x01QQa\x1E\xAF\x91\x90a.\xD2V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1E\xC7Wa\x1E\xC7a(\x9BV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x1F\0W\x81` \x01[a\x1E\xEDa$nV[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x1E\xE5W\x90P[P\x90P_[\x81Q\x81\x10\x15a\x13\x95W\x83Q\x80Q\x82\x90\x81\x10a\x1F\"Wa\x1F\"a.\x93V[` \x02` \x01\x01Q\x82\x82\x81Q\x81\x10a\x1F<Wa\x1F<a.\x93V[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a\x1F\x05V[`@\x80Q``\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x91\x90\x91R\x81_\x80\x80a\x1Fz\x88\x88\x86a\x17\x99V[\x94P\x92Pa\x1F\x89\x88\x88\x86a\x17\x99V[\x94P\x91Pa\x1F\x98\x88\x88\x86a\x17\xF5V[`@\x80Q``\x81\x01\x82Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x96\x87\x16\x81R\x94\x90\x95\x16` \x85\x01R\x93\x83\x01RP\x96\x90\x95P\x93PPPPV[_\x81\x81[`\x04\x81\x10\x15a\x17\xECW`\x08\x83c\xFF\xFF\xFF\xFF\x16\x90\x1B\x92P\x85\x85\x83\x81\x81\x10a\x1F\xF5Wa\x1F\xF5a.\x93V[\x91\x90\x91\x015`\xF8\x1C\x93\x90\x93\x17\x92P\x81a \r\x81a.\xA7V[\x92PP`\x01\x01a\x1F\xCDV[_\x81_\x01Qa *\x83` \x01Qa\"\xC1V[`@\x80\x85\x01Q``\x86\x01Q`\x80\x87\x01Q`\xA0\x88\x01Q\x93Qa \xC0\x96\x95\x94\x90` \x01\x7FModule:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x07\x81\x01\x96\x90\x96R`'\x86\x01\x94\x90\x94R`G\x85\x01\x92\x90\x92R`g\x84\x01R`\x87\x83\x01R`\xE0\x1B\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16`\xA7\x82\x01R`\xAB\x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P\x91\x90PV[\x81_[\x85QQ\x81\x10\x15a!\x98W\x84`\x01\x16_\x03a!BW\x82\x82\x87_\x01Q\x83\x81Q\x81\x10a!\x0BWa!\x0Ba.\x93V[` \x02` \x01\x01Q`@Q` \x01a!%\x93\x92\x91\x90a.\xE5V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x91Pa!\x8CV[\x82\x86_\x01Q\x82\x81Q\x81\x10a!XWa!Xa.\x93V[` \x02` \x01\x01Q\x83`@Q` \x01a!s\x93\x92\x91\x90a.\xE5V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x91P[`\x01\x94\x85\x1C\x94\x01a \xE0V[P\x83\x15a\x1A\xD7W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0F`$\x82\x01R\x7FPROOF_TOO_SHORT\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xA6V[_\x81\x81[` \x81\x10\x15a\x17\xECW`\x08\x83\x90\x1B\x92P\x85\x85\x83\x81\x81\x10a\"\rWa\"\ra.\x93V[\x91\x90\x91\x015`\xF8\x1C\x93\x90\x93\x17\x92P\x81a\"%\x81a.\xA7V[\x92PP`\x01\x01a!\xEBV[_\x81_\x01Q\x82` \x01Q`@Q` \x01a \xC0\x92\x91\x90a/\x04V[_a\x17\x8F\x84\x84a\"Z\x85a\"0V[`@Q\x80`@\x01`@R\x80`\x12\x81R` \x01\x7FValue merkle tree:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RPa \xDDV[a\"\x9Da$nV[\x82Q\x80Q\x83\x90\x81\x10a\"\xB1Wa\"\xB1a.\x93V[` \x02` \x01\x01Q\x90P\x92\x91PPV[\x80Q` \x80\x83\x01Q`@\x80\x85\x01Q\x90Q\x7FMemory:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x93\x81\x01\x93\x90\x93R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xC0\x94\x85\x1B\x81\x16`'\x85\x01R\x91\x90\x93\x1B\x16`/\x82\x01R`7\x81\x01\x91\x90\x91R_\x90`W\x01a \xC0V[`@\x80Qa\x01\x80\x81\x01\x90\x91R\x80_\x81R` \x01a#]a$\xB4V[\x81R` \x01a#}`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a#\x8Aa$\xB4V[\x81R` \x01a#\xAB`@Q\x80`@\x01`@R\x80``\x81R` \x01_\x81RP\x90V[\x81R` \x01a#\xCB`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R_` \x82\x01\x81\x90R`@\x82\x01\x81\x90R``\x82\x01\x81\x90R`\x80\x82\x01\x81\x90R`\xA0\x82\x01\x81\x90R`\xC0\x90\x91\x01R\x90V[`@Q\x80`\xC0\x01`@R\x80_\x81R` \x01a$@`@Q\x80``\x01`@R\x80_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_\x81RP\x90V[\x81R` \x01_\x81R` \x01_\x81R` \x01_\x81R` \x01_c\xFF\xFF\xFF\xFF\x16\x81RP\x90V[a$la/OV[V[`@\x80Q\x80\x82\x01\x90\x91R\x80_[\x81R` \x01_\x81RP\x90V[`@Q\x80`\x80\x01`@R\x80a$\x9Aa$nV[\x81R_` \x82\x01\x81\x90R`@\x82\x01\x81\x90R``\x90\x91\x01R\x90V[`@\x80Q``\x80\x82\x01\x83R\x91\x81\x01\x91\x82R\x90\x81\x90a${V[_`@\x82\x84\x03\x12\x15a$\xDDW__\xFD[P\x91\x90PV[__\x83`\x1F\x84\x01\x12a$\xF3W__\xFD[P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a%\nW__\xFD[` \x83\x01\x91P\x83` \x82\x85\x01\x01\x11\x15a%!W__\xFD[\x92P\x92\x90PV[______\x86\x88\x03a\x01\xE0\x81\x12\x15a%?W__\xFD[``\x81\x12\x15a%LW__\xFD[\x87\x96P``\x88\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a%hW__\xFD[\x88\x01a\x01\xC0\x81\x8B\x03\x12\x15a%zW__\xFD[\x95Pa\x01\0\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x01\x12\x15a%\xACW__\xFD[P`\x80\x87\x01\x93Pa%\xC1\x88a\x01\x80\x89\x01a$\xCDV[\x92Pa\x01\xC0\x87\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a%\xDDW__\xFD[a%\xE9\x89\x82\x8A\x01a$\xE3V[\x97\x9A\x96\x99P\x94\x97P\x92\x95\x93\x94\x92PPPV[cNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[`\x03\x81\x10a&\x1FWa&\x1Fa%\xFBV[\x90RV[\x80Q`\x07\x81\x10a&5Wa&5a%\xFBV[\x82R` \x90\x81\x01Q\x91\x01RV[\x80Q`@\x80\x84R\x90Q` \x91\x84\x01\x82\x90R\x80Q``\x85\x01\x81\x90R_\x92\x90\x91\x01\x90\x82\x90`\x80\x86\x01\x90[\x80\x83\x10\x15a&\x94Wa&}\x82\x85Qa&#V[`@\x82\x01\x91P` \x84\x01\x93P`\x01\x83\x01\x92Pa&jV[P` \x85\x01Q` \x87\x01R\x80\x93PPPP\x92\x91PPV[\x80Q`@\x80\x84R\x81Q\x90\x84\x01\x81\x90R_\x91` \x01\x90\x82\x90``\x86\x01\x90[\x80\x83\x10\x15a&\x94W\x83Qa&\xDD\x83\x82Qa&#V[` \x81\x01Q`@\x84\x01Rc\xFF\xFF\xFF\xFF`@\x82\x01Q\x16``\x84\x01Rc\xFF\xFF\xFF\xFF``\x82\x01Q\x16`\x80\x84\x01RP`\xA0\x82\x01\x91P` \x84\x01\x93P`\x01\x83\x01\x92Pa&\xC8V[a\x01 \x81Ra'3a\x01 \x82\x01\x84Qa&\x0FV[_` \x84\x01Qa\x01\xC0a\x01@\x84\x01Ra'Pa\x02\xE0\x84\x01\x82a&BV[`@\x86\x01Q\x80Qa\x01`\x86\x01R` \x01Qa\x01\x80\x85\x01R``\x86\x01Q\x84\x82\x03a\x01\x1F\x19\x01a\x01\xA0\x86\x01R\x90\x91Pa'\x87\x82\x82a&BV[\x91PP`\x80\x85\x01Qa\x01\x1F\x19\x84\x83\x03\x01a\x01\xC0\x85\x01Ra'\xA7\x82\x82a&\xABV[\x91PP`\xA0\x85\x01Qa'\xC7a\x01\xE0\x85\x01\x82\x80Q\x82R` \x90\x81\x01Q\x91\x01RV[P`\xC0\x85\x01Qa\x02 \x84\x01R`\xE0\x85\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x02@\x85\x01RPa\x01\0\x85\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x02`\x85\x01RPa\x01 \x85\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x02\x80\x85\x01RPa\x01@\x85\x01Qa\x02\xA0\x84\x01Ra\x01`\x85\x01Qa\x02\xC0\x84\x01R\x90Pa\x17\x92` \x83\x01\x84\x80Q\x82R` \x81\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81Q\x16` \x84\x01Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF` \x82\x01Q\x16`@\x84\x01R`@\x81\x01Q``\x84\x01RP`@\x81\x01Q`\x80\x83\x01R``\x81\x01Q`\xA0\x83\x01R`\x80\x81\x01Q`\xC0\x83\x01Rc\xFF\xFF\xFF\xFF`\xA0\x82\x01Q\x16`\xE0\x83\x01RPPV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@\x80Q\x90\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a(\xD2Wa(\xD2a(\x9BV[`@R\x90V[`@Q` \x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a(\xD2Wa(\xD2a(\x9BV[`@Q`\x80\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a(\xD2Wa(\xD2a(\x9BV[`@Qa\x01\x80\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a(\xD2Wa(\xD2a(\x9BV[`@Q`\xC0\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a(\xD2Wa(\xD2a(\x9BV[`@Q``\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a(\xD2Wa(\xD2a(\x9BV[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a)\xB1Wa)\xB1a(\x9BV[`@R\x91\x90PV[\x805`\x03\x81\x10a)\xC7W__\xFD[\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a)\xE5Wa)\xE5a(\x9BV[P`\x05\x1B` \x01\x90V[_`@\x82\x84\x03\x12\x15a)\xFFW__\xFD[a*\x07a(\xAFV[\x90P\x815`\x07\x81\x10a*\x17W__\xFD[\x80\x82RP` \x82\x015` \x82\x01R\x92\x91PPV[_`@\x82\x84\x03\x12\x15a*;W__\xFD[a*Ca(\xAFV[\x90P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a*[W__\xFD[\x82\x01` \x81\x85\x03\x12\x15a*lW__\xFD[a*ta(\xD8V[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a*\x8AW__\xFD[\x80\x83\x01\x92PP\x84`\x1F\x83\x01\x12a*\x9EW__\xFD[\x815a*\xB1a*\xAC\x82a)\xCCV[a)\x88V[\x80\x82\x82R` \x82\x01\x91P` \x83`\x06\x1B\x86\x01\x01\x92P\x87\x83\x11\x15a*\xD2W__\xFD[` \x85\x01\x94P[\x82\x85\x10\x15a*\xFEWa*\xEB\x88\x86a)\xEFV[\x82R` \x82\x01\x91P`@\x85\x01\x94Pa*\xD9V[\x83RPP\x82RP` \x91\x82\x015\x91\x81\x01\x91\x90\x91R\x91\x90PV[_`@\x82\x84\x03\x12\x15a+'W__\xFD[a+/a(\xAFV[\x825\x81R` \x92\x83\x015\x92\x81\x01\x92\x90\x92RP\x91\x90PV[\x805c\xFF\xFF\xFF\xFF\x81\x16\x81\x14a)\xC7W__\xFD[_`@\x82\x84\x03\x12\x15a+iW__\xFD[a+qa(\xAFV[\x90P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a+\x89W__\xFD[\x82\x01`\x1F\x81\x01\x84\x13a+\x99W__\xFD[\x805a+\xA7a*\xAC\x82a)\xCCV[\x80\x82\x82R` \x82\x01\x91P` `\xA0\x84\x02\x85\x01\x01\x92P\x86\x83\x11\x15a+\xC8W__\xFD[` \x84\x01\x93P[\x82\x84\x10\x15a,:W`\xA0\x84\x88\x03\x12\x15a+\xE6W__\xFD[a+\xEEa(\xFBV[a+\xF8\x88\x86a)\xEFV[\x81R`@\x85\x015` \x82\x01Ra,\x10``\x86\x01a+FV[`@\x82\x01Ra,!`\x80\x86\x01a+FV[``\x82\x01R\x82R`\xA0\x93\x90\x93\x01\x92` \x90\x91\x01\x90a+\xCFV[\x84RPPP` \x91\x82\x015\x91\x81\x01\x91\x90\x91R\x91\x90PV[_a\x01\xC0\x826\x03\x12\x15a,bW__\xFD[a,ja)\x1EV[a,s\x83a)\xB9V[\x81R` \x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a,\x8EW__\xFD[a,\x9A6\x82\x86\x01a*+V[` \x83\x01RPa,\xAD6`@\x85\x01a+\x17V[`@\x82\x01R`\x80\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a,\xCBW__\xFD[a,\xD76\x82\x86\x01a*+V[``\x83\x01RP`\xA0\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a,\xF6W__\xFD[a-\x026\x82\x86\x01a+YV[`\x80\x83\x01RPa-\x156`\xC0\x85\x01a+\x17V[`\xA0\x82\x01Ra\x01\0\x83\x015`\xC0\x82\x01Ra-2a\x01 \x84\x01a+FV[`\xE0\x82\x01Ra-Da\x01@\x84\x01a+FV[a\x01\0\x82\x01Ra-Wa\x01`\x84\x01a+FV[a\x01 \x82\x01Ra\x01\x80\x83\x015a\x01@\x82\x01Ra\x01\xA0\x90\x92\x015a\x01`\x83\x01RP\x90V[\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a)\xC7W__\xFD[_\x81\x83\x03a\x01\0\x81\x12\x80\x15a-\xA4W__\xFD[Pa-\xADa)BV[\x835\x81R```\x1F\x19\x83\x01\x12\x15a-\xC2W__\xFD[a-\xCAa)eV[\x91Pa-\xD8` \x85\x01a-zV[\x82Ra-\xE6`@\x85\x01a-zV[` \x83\x81\x01\x91\x90\x91R``\x85\x81\x015`@\x80\x86\x01\x91\x90\x91R\x91\x83\x01\x93\x90\x93R`\x80\x80\x86\x015\x91\x83\x01\x91\x90\x91R`\xA0\x85\x015\x92\x82\x01\x92\x90\x92R`\xC0\x84\x015\x91\x81\x01\x82\x90Ra.5`\xE0\x85\x01a+FV[`\xA0\x82\x01R\x94\x93PPPPV[_` \x82\x84\x03\x12\x15a.RW__\xFD[\x815a\xFF\xFF\x81\x16\x81\x14a\x17\x92W__\xFD[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[c\xFF\xFF\xFF\xFF\x81\x81\x16\x83\x82\x16\x01\x90\x81\x11\x15a\x145Wa\x145a.cV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_`\x01\x82\x01a.\xB8Wa.\xB8a.cV[P`\x01\x01\x90V[\x80\x82\x01\x80\x82\x11\x15a\x145Wa\x145a.cV[\x81\x81\x03\x81\x81\x11\x15a\x145Wa\x145a.cV[_\x84Q\x80` \x87\x01\x84^\x91\x90\x91\x01\x92\x83RP` \x82\x01R`@\x01\x91\x90PV[\x7FValue:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R_`\x07\x84\x10a/8Wa/8a%\xFBV[P`\xF8\x92\x90\x92\x1B`\x06\x83\x01R`\x07\x82\x01R`'\x01\x90V[cNH{q`\xE0\x1B_R`Q`\x04R`$_\xFD\xFE\xA2dipfsX\"\x12 \xA9cS\x04N\x12\xC8x\xF6\xF2\x8C+\xC8\x9A>$\x18\x17\xC0x\xAA\xAA\xCAT98\xBA\xB8\x89\xF7\xDBtdsolcC\0\x08\x1C\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0)W_5`\xE0\x1C\x80c\xA9,\xB5\x01\x14a\0-W[__\xFD[a\0@a\0;6`\x04a%(V[a\0WV[`@Qa\0N\x92\x91\x90a'\x1FV[`@Q\x80\x91\x03\x90\xF3[a\0_a#BV[a\0ga#\xFAV[a\0p\x87a,QV[\x91Pa\0\x816\x87\x90\x03\x87\x01\x87a-\x91V[\x90P_a\0\x91` \x87\x01\x87a.BV[\x90Pa$da\xFF\xFF\x82\x16a\0\xA8WPa\x04\xCDa\x04\xAFV[_\x19a\xFF\xFF\x83\x16\x01a\0\xBDWPa\x04\xD8a\x04\xAFV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xF1a\xFF\xFF\x83\x16\x01a\0\xF1WPa\x04\xDFa\x04\xAFV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xF0a\xFF\xFF\x83\x16\x01a\x01%WPa\x05\x05a\x04\xAFV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xF7a\xFF\xFF\x83\x16\x01a\x01YWPa\x05\xCFa\x04\xAFV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xF5a\xFF\xFF\x83\x16\x01a\x01\x8DWPa\x06|a\x04\xAFV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xF4a\xFF\xFF\x83\x16\x01a\x01\xC1WPa\x07:a\x04\xAFV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xF6a\xFF\xFF\x83\x16\x01a\x01\xF5WPa\x08\x94a\x04\xAFV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xEFa\xFF\xFF\x83\x16\x01a\x02)WPa\t\x81a\x04\xAFV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xFDa\xFF\xFF\x83\x16\x01a\x02]WPa\r\xA7a\x04\xAFV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xFCa\xFF\xFF\x83\x16\x01a\x02\x91WPa\x0E\x17a\x04\xAFV[`\x1F\x19a\xFF\xFF\x83\x16\x01a\x02\xA7WPa\x0E\xA4a\x04\xAFV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xDFa\xFF\xFF\x83\x16\x01a\x02\xDBWPa\x0E\xE4a\x04\xAFV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xDDa\xFF\xFF\x83\x16\x01a\x03\x0FWPa\x0F'a\x04\xAFV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xDCa\xFF\xFF\x83\x16\x01a\x03CWPa\x0FMa\x04\xAFV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xFEa\xFF\xFF\x83\x16\x01a\x03wWPa\x0F{a\x04\xAFV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE6a\xFF\xFF\x83\x16\x01a\x03\xABWPa\x10\x13a\x04\xAFV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE5a\xFF\xFF\x83\x16\x01a\x03\xDFWPa\x10 a\x04\xAFV[`Aa\xFF\xFF\x83\x16\x10\x80\x15\x90a\x03\xF9WP`Da\xFF\xFF\x83\x16\x11\x15[\x15a\x04\x07WPa\x10\x8Ca\x04\xAFV[a\xFF\xFF\x82\x16a\x80\x05\x14\x80a\x04 WPa\xFF\xFF\x82\x16a\x80\x06\x14[\x15a\x04.WPa\x11\xFAa\x04\xAFV[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xF8a\xFF\xFF\x83\x16\x01a\x04bWPa\x12\xBFa\x04\xAFV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0E`$\x82\x01R\x7FINVALID_OPCODE\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01[`@Q\x80\x91\x03\x90\xFD[a\x04\xC0\x84\x84\x89\x89\x89\x86c\xFF\xFF\xFF\xFF\x16V[PP\x96P\x96\x94PPPPPV[PP`\x02\x90\x92RPPV[PPPPPV[_a\x04\xED\x86`\x80\x01Qa\x12\xCDV[\x80Q\x90\x91Pa\x04\xFD\x90\x87\x90a\x13\x9CV[PPPPPPV[a\x05\x1Ca\x05\x11\x86a\x14\x14V[` \x87\x01Q\x90a\x14;V[_a\x05*\x86`\x80\x01Qa\x14GV[\x90Pa\x05Ga\x05<\x82`@\x01Qa\x14\xC2V[` \x88\x01Q\x90a\x14;V[a\x05Wa\x05<\x82``\x01Qa\x14\xC2V[` \x84\x015c\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x05\xB1W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\r`$\x82\x01R\x7FBAD_CALL_DATA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xA6V[c\xFF\xFF\xFF\xFF\x16a\x01\0\x87\x01RPP_a\x01 \x90\x94\x01\x93\x90\x93RPPPV[a\x05\xDBa\x05\x11\x86a\x14\x14V[a\x05\xEBa\x05\x11\x86`\xE0\x01Qa\x14\xC2V[a\x05\xFBa\x05\x11\x85`\xA0\x01Qa\x14\xC2V[` \x80\x84\x015\x90\x81\x90\x1C`@\x82\x90\x1C\x15a\x06WW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1A`$\x82\x01R\x7FBAD_CROSS_MODULE_CALL_DATA\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xA6V[c\xFF\xFF\xFF\xFF\x90\x81\x16`\xE0\x88\x01R\x16a\x01\0\x86\x01RPP_a\x01 \x90\x93\x01\x92\x90\x92RPPV[a\x06\x88a\x05\x11\x86a\x14\x14V[_a\x06\x96\x86`\x80\x01Qa\x14GV[\x90Pa\x06\xA8a\x05<\x82`@\x01Qa\x14\xC2V[a\x06\xB8a\x05<\x82``\x01Qa\x14\xC2V[` \x80\x85\x015\x90\x81\x90\x1C`@\x82\x90\x1C\x15a\x07\x14W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1A`$\x82\x01R\x7FBAD_CROSS_MODULE_CALL_DATA\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xA6V[c\xFF\xFF\xFF\xFF\x90\x81\x16`\xE0\x89\x01R\x16a\x01\0\x87\x01RPP_a\x01 \x90\x94\x01\x93\x90\x93RPPPV[_\x83` \x015\x90P_a\x07Xa\x07S\x88` \x01Qa\x14\xE8V[a\x14\xFBV[\x90Pa\x07ba#\xFAV[`@\x80Q` \x81\x01\x90\x91R``\x81R_a\x07}\x87\x87\x83a\x15\xB7V[\x90\x93P\x90Pa\x07\x8D\x87\x87\x83a\x16xV[a\x01`\x8C\x01Q\x91\x93P\x91Pa\x07\xAD\x83c\xFF\xFF\xFF\xFF\x80\x88\x16\x90\x87\x90a\x17E\x16V[\x14a\x08 W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\"`$\x82\x01R\x7FCROSS_MODULE_INTERNAL_MODULES_RO`D\x82\x01R\x7FOT\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x04\xA6V[a\x087a\x08,\x8Ba\x14\x14V[` \x8C\x01Q\x90a\x14;V[a\x08Ga\x08,\x8B`\xE0\x01Qa\x14\xC2V[a\x08Wa\x08,\x8A`\xA0\x01Qa\x14\xC2V[c\xFF\xFF\xFF\xFF\x84\x16`\xE0\x8B\x01R`\xA0\x83\x01Qa\x08r\x90\x86a.wV[c\xFF\xFF\xFF\xFF\x16a\x01\0\x8B\x01RPP_a\x01 \x90\x98\x01\x97\x90\x97RPPPPPPPV[a\x08\xA0a\x05\x11\x86a\x14\x14V[a\x08\xB0a\x05\x11\x86`\xE0\x01Qa\x14\xC2V[a\x08\xC0a\x05\x11\x85`\xA0\x01Qa\x14\xC2V[_a\x08\xCE\x86`\x80\x01Qa\x14GV[\x90P\x80``\x01Qc\xFF\xFF\xFF\xFF\x16_\x03a\x08\xEBWP`\x02\x85Ra\x04\xD8V[` \x84\x015c\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\tEW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1D`$\x82\x01R\x7FBAD_CALLER_INTERNAL_CALL_DATA\0\0\0`D\x82\x01R`d\x01a\x04\xA6V[`@\x82\x01Qc\xFF\xFF\xFF\xFF\x16`\xE0\x88\x01R``\x82\x01Qa\te\x90\x82\x90a.wV[c\xFF\xFF\xFF\xFF\x16a\x01\0\x88\x01RPP_a\x01 \x86\x01RPPPPPV[__a\t\x93a\x07S\x88` \x01Qa\x14\xE8V[\x90P____\x90P___a\t\xB4`@Q\x80` \x01`@R\x80``\x81RP\x90V[a\t\xBF\x8B\x8B\x87a\x17\x99V[\x95P\x93Pa\t\xCE\x8B\x8B\x87a\x17\xF5V[\x90\x96P\x94Pa\t\xDE\x8B\x8B\x87a\x18\x10V[\x95P\x92Pa\t\xED\x8B\x8B\x87a\x17\x99V[\x95P\x91Pa\t\xFC\x8B\x8B\x87a\x17\xF5V[\x90\x97P\x94Pa\n\x0C\x8B\x8B\x87a\x16xV[`@Q\x7FCall indirect:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xC0\x88\x90\x1B\x16`.\x82\x01R`6\x81\x01\x89\x90R\x90\x96P\x90\x91P_\x90`V\x01`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R\x80Q` \x91\x82\x01 \x91P\x8D\x015\x81\x14a\n\xDEW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x16`$\x82\x01R\x7FBAD_CALL_INDIRECT_DATA\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xA6V[a\n\xF5\x82g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x87\x16\x86\x86\x8Ca\x18EV[\x90P\x8D`@\x01Q\x81\x14a\x0BJW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0F`$\x82\x01R\x7FBAD_TABLES_ROOT\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xA6V[\x82g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x89c\xFF\xFF\xFF\xFF\x16\x10a\x0BuWPP`\x02\x8DRPa\x04\xD8\x96PPPPPPPV[PPPPP_a\x0B\x83a$nV[`@\x80Q` \x81\x01\x90\x91R``\x81Ra\x0B\x9D\x8A\x8A\x86a\x17\xF5V[\x94P\x92Pa\x0B\xAC\x8A\x8A\x86a\x198V[\x94P\x91Pa\x0B\xBB\x8A\x8A\x86a\x16xV[\x94P\x90P_a\x0B\xD7\x82c\xFF\xFF\xFF\xFF\x80\x8B\x16\x90\x87\x90\x87\x90a\x1A5\x16V[\x90P\x86\x81\x14a\x0C(W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x11`$\x82\x01R\x7FBAD_ELEMENTS_ROOT\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xA6V[\x85\x84\x14a\x0CXW\x8D`\x02[\x90\x81`\x02\x81\x11\x15a\x0CFWa\x0CFa%\xFBV[\x81RPPPPPPPPPPPa\x04\xD8V[`\x04\x83Q`\x06\x81\x11\x15a\x0CmWa\x0Cma%\xFBV[\x03a\x0CzW\x8D`\x02a\x0C3V[`\x05\x83Q`\x06\x81\x11\x15a\x0C\x8FWa\x0C\x8Fa%\xFBV[\x03a\x0C\xF5W` \x83\x01Q\x98Pc\xFF\xFF\xFF\xFF\x89\x16\x89\x14a\x0C\xF0W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x15`$\x82\x01R\x7FBAD_FUNC_REF_CONTENTS\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xA6V[a\r=V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\r`$\x82\x01R\x7FBAD_ELEM_TYPE\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xA6V[PPPPPPPPa\rQa\x05<\x87a\x14\x14V[_a\r_\x87`\x80\x01Qa\x14GV[\x90Pa\r|a\rq\x82`@\x01Qa\x14\xC2V[` \x89\x01Q\x90a\x14;V[a\r\x8Ca\rq\x82``\x01Qa\x14\xC2V[Pc\xFF\xFF\xFF\xFF\x16a\x01\0\x86\x01R_a\x01 \x86\x01RPPPPPV[` \x83\x015c\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x0E\x01W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\r`$\x82\x01R\x7FBAD_CALL_DATA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xA6V[c\xFF\xFF\xFF\xFF\x16a\x01 \x90\x95\x01\x94\x90\x94RPPPPV[_a\x0E(a\x07S\x87` \x01Qa\x14\xE8V[\x90Pc\xFF\xFF\xFF\xFF\x81\x16\x15a\x04\xFDW` \x84\x015c\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x0E\x90W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\r`$\x82\x01R\x7FBAD_CALL_DATA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xA6V[c\xFF\xFF\xFF\xFF\x16a\x01 \x87\x01RPPPPPPV[_a\x0E\xB2\x86`\x80\x01Qa\x14GV[\x90P_a\x0E\xC9\x82` \x01Q\x86` \x015\x86\x86a\x1A\xDFV[` \x88\x01Q\x90\x91Pa\x0E\xDB\x90\x82a\x14;V[PPPPPPPV[_a\x0E\xF2\x86` \x01Qa\x14\xE8V[\x90P_a\x0F\x02\x87`\x80\x01Qa\x14GV[\x90Pa\x0F\x19\x81` \x01Q\x86` \x015\x84\x87\x87a\x1B\x87V[` \x90\x91\x01RPPPPPPV[_a\x0F;\x85_\x01Q\x85` \x015\x85\x85a\x1A\xDFV[` \x87\x01Q\x90\x91Pa\x04\xFD\x90\x82a\x14;V[_a\x0F[\x86` \x01Qa\x14\xE8V[\x90Pa\x0Fq\x85_\x01Q\x85` \x015\x83\x86\x86a\x1B\x87V[\x90\x94RPPPPPV[_a\x0F\x89\x86` \x01Qa\x14\xE8V[\x90P_a\x0F\x99\x87` \x01Qa\x14\xE8V[\x90P_a\x0F\xA9\x88` \x01Qa\x14\xE8V[\x90P_`@Q\x80`\x80\x01`@R\x80\x83\x81R` \x01\x88` \x015_\x1B\x81R` \x01a\x0F\xD2\x85a\x14\xFBV[c\xFF\xFF\xFF\xFF\x16\x81R` \x01a\x0F\xE6\x86a\x14\xFBV[c\xFF\xFF\xFF\xFF\x16\x81RP\x90Pa\x10\x08\x81\x8A`\x80\x01Qa\x1C6\x90\x91\x90c\xFF\xFF\xFF\xFF\x16V[PPPPPPPPPV[a\x04\xFD\x85` \x01Qa\x14\xE8V[_a\x101a\x07S\x87` \x01Qa\x14\xE8V[\x90P_a\x10A\x87` \x01Qa\x14\xE8V[\x90P_a\x10Q\x88` \x01Qa\x14\xE8V[\x90Pc\xFF\xFF\xFF\xFF\x83\x16\x15a\x10sW` \x88\x01Qa\x10n\x90\x82a\x14;V[a\x10\x82V[` \x88\x01Qa\x10\x82\x90\x83a\x14;V[PPPPPPPPV[_a\x10\x9A` \x85\x01\x85a.BV[\x90P_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xBFa\xFF\xFF\x83\x16\x01a\x10\xCFWP_a\x11\xB0V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xBEa\xFF\xFF\x83\x16\x01a\x11\x02WP`\x01a\x11\xB0V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xBDa\xFF\xFF\x83\x16\x01a\x115WP`\x02a\x11\xB0V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xBCa\xFF\xFF\x83\x16\x01a\x11hWP`\x03a\x11\xB0V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x19`$\x82\x01R\x7FCONST_PUSH_INVALID_OPCODE\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xA6V[a\x0E\xDB`@Q\x80`@\x01`@R\x80\x83`\x06\x81\x11\x15a\x11\xD0Wa\x11\xD0a%\xFBV[\x81R` \x01\x87` \x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RP\x88` \x01Qa\x14;\x90\x91\x90c\xFF\xFF\xFF\xFF\x16V[a\x12\x02a$nV[a\x80\x05a\x12\x12` \x86\x01\x86a.BV[a\xFF\xFF\x16\x03a\x12?Wa\x12(\x86` \x01Qa\x14\xE8V[``\x87\x01Q\x90\x91Pa\x12:\x90\x82a\x14;V[a\x04\xFDV[a\x80\x06a\x12O` \x86\x01\x86a.BV[a\xFF\xFF\x16\x03a\x12wWa\x12e\x86``\x01Qa\x14\xE8V[` \x87\x01Q\x90\x91Pa\x12:\x90\x82a\x14;V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1C`$\x82\x01R\x7FMOVE_INTERNAL_INVALID_OPCODE\0\0\0\0`D\x82\x01R`d\x01a\x04\xA6V[_a\x0F;\x86` \x01Qa\x1D\x10V[a\x12\xD5a$\x87V[\x81QQ`\x01\x14a\x13'W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x11`$\x82\x01R\x7FBAD_WINDOW_LENGTH\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xA6V[\x81Q\x80Q_\x90a\x139Wa\x139a.\x93V[` \x02` \x01\x01Q\x90P_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x13\\Wa\x13\\a(\x9BV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x13\x95W\x81` \x01[a\x13\x82a$\x87V[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x13zW\x90P[P\x90\x91R\x90V[`\x04\x81Q`\x06\x81\x11\x15a\x13\xB1Wa\x13\xB1a%\xFBV[\x03a\x13\xD4W\x81`\x02[\x90\x81`\x02\x81\x11\x15a\x13\xCDWa\x13\xCDa%\xFBV[\x90RPPPV[`\x06\x81Q`\x06\x81\x11\x15a\x13\xE9Wa\x13\xE9a%\xFBV[\x14a\x13\xF6W\x81`\x02a\x13\xBAV[a\x14\x04\x82\x82` \x01Qa\x1D2V[a\x14\x10W\x81`\x02a\x13\xBAV[PPV[a\x14\x1Ca$nV[a\x145\x82a\x01 \x01Q\x83a\x01\0\x01Q\x84`\xE0\x01Qa\x1DrV[\x92\x91PPV[\x81Qa\x14\x10\x90\x82a\x1D\xBAV[a\x14Oa$\x87V[\x81QQ`\x01\x14a\x14\xA1W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x11`$\x82\x01R\x7FBAD_WINDOW_LENGTH\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xA6V[\x81Q\x80Q_\x90a\x14\xB3Wa\x14\xB3a.\x93V[` \x02` \x01\x01Q\x90P\x91\x90PV[a\x14\xCAa$nV[P`@\x80Q\x80\x82\x01\x90\x91R_\x81Rc\xFF\xFF\xFF\xFF\x90\x91\x16` \x82\x01R\x90V[a\x14\xF0a$nV[\x81Qa\x145\x90a\x1EkV[` \x81\x01Q_\x90\x81\x83Q`\x06\x81\x11\x15a\x15\x16Wa\x15\x16a%\xFBV[\x14a\x15cW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FNOT_I32\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xA6V[d\x01\0\0\0\0\x81\x10a\x145W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x07`$\x82\x01R\x7FBAD_I32\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xA6V[a\x15\xBFa#\xFAV[`@\x80Q``\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R\x83\x91\x90____a\x15\xEC\x8B\x8B\x89a\x17\xF5V[\x97P\x95Pa\x15\xFB\x8B\x8B\x89a\x1FOV[\x97P\x94Pa\x16\n\x8B\x8B\x89a\x17\xF5V[\x97P\x93Pa\x16\x19\x8B\x8B\x89a\x17\xF5V[\x97P\x92Pa\x16(\x8B\x8B\x89a\x17\xF5V[\x97P\x91Pa\x167\x8B\x8B\x89a\x1F\xC9V[`@\x80Q`\xC0\x81\x01\x82R\x98\x89R` \x89\x01\x97\x90\x97R\x95\x87\x01\x94\x90\x94RP``\x85\x01\x91\x90\x91R`\x80\x84\x01Rc\xFF\xFF\xFF\xFF\x16`\xA0\x83\x01R\x90\x96\x90\x95P\x93PPPPV[`@\x80Q` \x81\x01\x90\x91R``\x81R\x81_a\x16\x94\x86\x86\x84a\x18\x10V[\x92P\x90P_`\xFF\x82\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x16\xB5Wa\x16\xB5a(\x9BV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x16\xDEW\x81` \x01` \x82\x02\x806\x837\x01\x90P[P\x90P_[\x82`\xFF\x16\x81`\xFF\x16\x10\x15a\x17)Wa\x16\xFC\x88\x88\x86a\x17\xF5V[\x83\x83`\xFF\x16\x81Q\x81\x10a\x17\x11Wa\x17\x11a.\x93V[` \x90\x81\x02\x91\x90\x91\x01\x01\x91\x90\x91R\x93P`\x01\x01a\x16\xE3V[P`@Q\x80` \x01`@R\x80\x82\x81RP\x93PPP\x93P\x93\x91PPV[_a\x17\x8F\x84\x84a\x17T\x85a \x18V[`@Q\x80`@\x01`@R\x80`\x13\x81R` \x01\x7FModule merkle tree:\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RPa \xDDV[\x90P[\x93\x92PPPV[_\x81\x81[`\x08\x81\x10\x15a\x17\xECW`\x08\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x1B\x92P\x85\x85\x83\x81\x81\x10a\x17\xC9Wa\x17\xC9a.\x93V[\x91\x90\x91\x015`\xF8\x1C\x93\x90\x93\x17\x92P\x81a\x17\xE1\x81a.\xA7V[\x92PP`\x01\x01a\x17\x9DV[P\x93P\x93\x91PPV[_\x81\x81a\x18\x03\x86\x86\x84a!\xE7V[\x90\x97\x90\x96P\x94PPPPPV[_\x81\x84\x84\x82\x81\x81\x10a\x18$Wa\x18$a.\x93V[\x91\x90\x91\x015`\xF8\x1C\x92P\x81\x90Pa\x18:\x81a.\xA7V[\x91PP\x93P\x93\x91PPV[`@Q\x7FTable:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R\x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xF8\x85\x90\x1B\x16`&\x82\x01R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xC0\x84\x90\x1B\x16`'\x82\x01R`/\x81\x01\x82\x90R_\x90\x81\x90`O\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90Pa\x19-\x87\x87\x83`@Q\x80`@\x01`@R\x80`\x12\x81R` \x01\x7FTable merkle tree:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RPa \xDDV[\x97\x96PPPPPPPV[a\x19@a$nV[\x81_\x85\x85\x83\x81\x81\x10a\x19TWa\x19Ta.\x93V[\x91\x90\x91\x015`\xF8\x1C\x91P\x82\x90Pa\x19j\x81a.\xA7V[\x92PPa\x19u`\x06\x90V[`\x06\x81\x11\x15a\x19\x86Wa\x19\x86a%\xFBV[`\xFF\x16\x81`\xFF\x16\x11\x15a\x19\xDBW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0E`$\x82\x01R\x7FBAD_VALUE_TYPE\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xA6V[_a\x19\xE7\x87\x87\x85a!\xE7V[\x80\x94P\x81\x92PPP`@Q\x80`@\x01`@R\x80\x83`\xFF\x16`\x06\x81\x11\x15a\x1A\x0FWa\x1A\x0Fa%\xFBV[`\x06\x81\x11\x15a\x1A Wa\x1A a%\xFBV[\x81R` \x01\x82\x81RP\x93PPP\x93P\x93\x91PPV[__\x83a\x1AA\x84a\"0V[`@Q\x7FTable element:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`.\x81\x01\x92\x90\x92R`N\x82\x01R`n\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90Pa\x1A\xD3\x86\x86\x83`@Q\x80`@\x01`@R\x80`\x1A\x81R` \x01\x7FTable element merkle tree:\0\0\0\0\0\0\x81RPa \xDDV[\x91PP[\x94\x93PPPPV[a\x1A\xE7a$nV[_a\x1A\xF0a$nV[`@\x80Q` \x81\x01\x90\x91R``\x81Ra\x1B\n\x86\x86\x85a\x198V[\x93P\x91Pa\x1B\x19\x86\x86\x85a\x16xV[\x93P\x90P_a\x1B)\x82\x89\x85a\"KV[\x90P\x88\x81\x14a\x1BzW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x11`$\x82\x01R\x7FWRONG_MERKLE_ROOT\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xA6V[P\x90\x97\x96PPPPPPPV[_a\x1B\x90a$nV[`@\x80Q` \x81\x01\x90\x91R``\x81R_\x90a\x1B\xAC\x86\x86\x84a\x198V[\x90\x93P\x91Pa\x1B\xBC\x86\x86\x84a\x16xV[\x92P\x90P_a\x1B\xCC\x82\x8A\x86a\"KV[\x90P\x89\x81\x14a\x1C\x1DW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x11`$\x82\x01R\x7FWRONG_MERKLE_ROOT\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xA6V[a\x1C(\x82\x8A\x8Aa\"KV[\x9A\x99PPPPPPPPPPV[\x81QQ_\x90a\x1CF\x90`\x01a.\xBFV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1C^Wa\x1C^a(\x9BV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x1C\x97W\x81` \x01[a\x1C\x84a$\x87V[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x1C|W\x90P[P\x90P_[\x83QQ\x81\x10\x15a\x1C\xE7W\x83Q\x80Q\x82\x90\x81\x10a\x1C\xBAWa\x1C\xBAa.\x93V[` \x02` \x01\x01Q\x82\x82\x81Q\x81\x10a\x1C\xD4Wa\x1C\xD4a.\x93V[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a\x1C\x9CV[P\x81\x81\x84_\x01QQ\x81Q\x81\x10a\x1C\xFFWa\x1C\xFFa.\x93V[` \x90\x81\x02\x91\x90\x91\x01\x01R\x90\x91RPV[a\x1D\x18a$nV[\x81QQQa\x17\x92a\x1D*`\x01\x83a.\xD2V[\x84Q\x90a\"\x95V[_``\x82\x90\x1C\x15a\x1DDWP_a\x145V[Pc\xFF\xFF\xFF\xFF\x81\x81\x16a\x01 \x84\x01R` \x82\x90\x1C\x81\x16a\x01\0\x84\x01R`@\x91\x90\x91\x1C\x16`\xE0\x90\x91\x01R`\x01\x90V[a\x1Dza$nV[P`@\x80Q\x80\x82\x01\x82R`\x06\x81Rc\xFF\xFF\xFF\xFF\x94\x90\x94\x16` \x93\x84\x1Bg\xFF\xFF\xFF\xFF\0\0\0\0\x16\x17\x91\x90\x1Bk\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\x16\x17\x90\x82\x01R\x90V[\x81QQ_\x90a\x1D\xCA\x90`\x01a.\xBFV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1D\xE2Wa\x1D\xE2a(\x9BV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x1E\x1BW\x81` \x01[a\x1E\x08a$nV[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x1E\0W\x90P[P\x90P_[\x83QQ\x81\x10\x15a\x1C\xE7W\x83Q\x80Q\x82\x90\x81\x10a\x1E>Wa\x1E>a.\x93V[` \x02` \x01\x01Q\x82\x82\x81Q\x81\x10a\x1EXWa\x1EXa.\x93V[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a\x1E V[a\x1Esa$nV[\x81Q\x80Qa\x1E\x83\x90`\x01\x90a.\xD2V[\x81Q\x81\x10a\x1E\x93Wa\x1E\x93a.\x93V[` \x02` \x01\x01Q\x90P_`\x01\x83_\x01QQa\x1E\xAF\x91\x90a.\xD2V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1E\xC7Wa\x1E\xC7a(\x9BV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x1F\0W\x81` \x01[a\x1E\xEDa$nV[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x1E\xE5W\x90P[P\x90P_[\x81Q\x81\x10\x15a\x13\x95W\x83Q\x80Q\x82\x90\x81\x10a\x1F\"Wa\x1F\"a.\x93V[` \x02` \x01\x01Q\x82\x82\x81Q\x81\x10a\x1F<Wa\x1F<a.\x93V[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a\x1F\x05V[`@\x80Q``\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x91\x90\x91R\x81_\x80\x80a\x1Fz\x88\x88\x86a\x17\x99V[\x94P\x92Pa\x1F\x89\x88\x88\x86a\x17\x99V[\x94P\x91Pa\x1F\x98\x88\x88\x86a\x17\xF5V[`@\x80Q``\x81\x01\x82Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x96\x87\x16\x81R\x94\x90\x95\x16` \x85\x01R\x93\x83\x01RP\x96\x90\x95P\x93PPPPV[_\x81\x81[`\x04\x81\x10\x15a\x17\xECW`\x08\x83c\xFF\xFF\xFF\xFF\x16\x90\x1B\x92P\x85\x85\x83\x81\x81\x10a\x1F\xF5Wa\x1F\xF5a.\x93V[\x91\x90\x91\x015`\xF8\x1C\x93\x90\x93\x17\x92P\x81a \r\x81a.\xA7V[\x92PP`\x01\x01a\x1F\xCDV[_\x81_\x01Qa *\x83` \x01Qa\"\xC1V[`@\x80\x85\x01Q``\x86\x01Q`\x80\x87\x01Q`\xA0\x88\x01Q\x93Qa \xC0\x96\x95\x94\x90` \x01\x7FModule:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x07\x81\x01\x96\x90\x96R`'\x86\x01\x94\x90\x94R`G\x85\x01\x92\x90\x92R`g\x84\x01R`\x87\x83\x01R`\xE0\x1B\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16`\xA7\x82\x01R`\xAB\x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P\x91\x90PV[\x81_[\x85QQ\x81\x10\x15a!\x98W\x84`\x01\x16_\x03a!BW\x82\x82\x87_\x01Q\x83\x81Q\x81\x10a!\x0BWa!\x0Ba.\x93V[` \x02` \x01\x01Q`@Q` \x01a!%\x93\x92\x91\x90a.\xE5V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x91Pa!\x8CV[\x82\x86_\x01Q\x82\x81Q\x81\x10a!XWa!Xa.\x93V[` \x02` \x01\x01Q\x83`@Q` \x01a!s\x93\x92\x91\x90a.\xE5V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x91P[`\x01\x94\x85\x1C\x94\x01a \xE0V[P\x83\x15a\x1A\xD7W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0F`$\x82\x01R\x7FPROOF_TOO_SHORT\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\xA6V[_\x81\x81[` \x81\x10\x15a\x17\xECW`\x08\x83\x90\x1B\x92P\x85\x85\x83\x81\x81\x10a\"\rWa\"\ra.\x93V[\x91\x90\x91\x015`\xF8\x1C\x93\x90\x93\x17\x92P\x81a\"%\x81a.\xA7V[\x92PP`\x01\x01a!\xEBV[_\x81_\x01Q\x82` \x01Q`@Q` \x01a \xC0\x92\x91\x90a/\x04V[_a\x17\x8F\x84\x84a\"Z\x85a\"0V[`@Q\x80`@\x01`@R\x80`\x12\x81R` \x01\x7FValue merkle tree:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RPa \xDDV[a\"\x9Da$nV[\x82Q\x80Q\x83\x90\x81\x10a\"\xB1Wa\"\xB1a.\x93V[` \x02` \x01\x01Q\x90P\x92\x91PPV[\x80Q` \x80\x83\x01Q`@\x80\x85\x01Q\x90Q\x7FMemory:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x93\x81\x01\x93\x90\x93R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xC0\x94\x85\x1B\x81\x16`'\x85\x01R\x91\x90\x93\x1B\x16`/\x82\x01R`7\x81\x01\x91\x90\x91R_\x90`W\x01a \xC0V[`@\x80Qa\x01\x80\x81\x01\x90\x91R\x80_\x81R` \x01a#]a$\xB4V[\x81R` \x01a#}`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a#\x8Aa$\xB4V[\x81R` \x01a#\xAB`@Q\x80`@\x01`@R\x80``\x81R` \x01_\x81RP\x90V[\x81R` \x01a#\xCB`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R_` \x82\x01\x81\x90R`@\x82\x01\x81\x90R``\x82\x01\x81\x90R`\x80\x82\x01\x81\x90R`\xA0\x82\x01\x81\x90R`\xC0\x90\x91\x01R\x90V[`@Q\x80`\xC0\x01`@R\x80_\x81R` \x01a$@`@Q\x80``\x01`@R\x80_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_\x81RP\x90V[\x81R` \x01_\x81R` \x01_\x81R` \x01_\x81R` \x01_c\xFF\xFF\xFF\xFF\x16\x81RP\x90V[a$la/OV[V[`@\x80Q\x80\x82\x01\x90\x91R\x80_[\x81R` \x01_\x81RP\x90V[`@Q\x80`\x80\x01`@R\x80a$\x9Aa$nV[\x81R_` \x82\x01\x81\x90R`@\x82\x01\x81\x90R``\x90\x91\x01R\x90V[`@\x80Q``\x80\x82\x01\x83R\x91\x81\x01\x91\x82R\x90\x81\x90a${V[_`@\x82\x84\x03\x12\x15a$\xDDW__\xFD[P\x91\x90PV[__\x83`\x1F\x84\x01\x12a$\xF3W__\xFD[P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a%\nW__\xFD[` \x83\x01\x91P\x83` \x82\x85\x01\x01\x11\x15a%!W__\xFD[\x92P\x92\x90PV[______\x86\x88\x03a\x01\xE0\x81\x12\x15a%?W__\xFD[``\x81\x12\x15a%LW__\xFD[\x87\x96P``\x88\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a%hW__\xFD[\x88\x01a\x01\xC0\x81\x8B\x03\x12\x15a%zW__\xFD[\x95Pa\x01\0\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x01\x12\x15a%\xACW__\xFD[P`\x80\x87\x01\x93Pa%\xC1\x88a\x01\x80\x89\x01a$\xCDV[\x92Pa\x01\xC0\x87\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a%\xDDW__\xFD[a%\xE9\x89\x82\x8A\x01a$\xE3V[\x97\x9A\x96\x99P\x94\x97P\x92\x95\x93\x94\x92PPPV[cNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[`\x03\x81\x10a&\x1FWa&\x1Fa%\xFBV[\x90RV[\x80Q`\x07\x81\x10a&5Wa&5a%\xFBV[\x82R` \x90\x81\x01Q\x91\x01RV[\x80Q`@\x80\x84R\x90Q` \x91\x84\x01\x82\x90R\x80Q``\x85\x01\x81\x90R_\x92\x90\x91\x01\x90\x82\x90`\x80\x86\x01\x90[\x80\x83\x10\x15a&\x94Wa&}\x82\x85Qa&#V[`@\x82\x01\x91P` \x84\x01\x93P`\x01\x83\x01\x92Pa&jV[P` \x85\x01Q` \x87\x01R\x80\x93PPPP\x92\x91PPV[\x80Q`@\x80\x84R\x81Q\x90\x84\x01\x81\x90R_\x91` \x01\x90\x82\x90``\x86\x01\x90[\x80\x83\x10\x15a&\x94W\x83Qa&\xDD\x83\x82Qa&#V[` \x81\x01Q`@\x84\x01Rc\xFF\xFF\xFF\xFF`@\x82\x01Q\x16``\x84\x01Rc\xFF\xFF\xFF\xFF``\x82\x01Q\x16`\x80\x84\x01RP`\xA0\x82\x01\x91P` \x84\x01\x93P`\x01\x83\x01\x92Pa&\xC8V[a\x01 \x81Ra'3a\x01 \x82\x01\x84Qa&\x0FV[_` \x84\x01Qa\x01\xC0a\x01@\x84\x01Ra'Pa\x02\xE0\x84\x01\x82a&BV[`@\x86\x01Q\x80Qa\x01`\x86\x01R` \x01Qa\x01\x80\x85\x01R``\x86\x01Q\x84\x82\x03a\x01\x1F\x19\x01a\x01\xA0\x86\x01R\x90\x91Pa'\x87\x82\x82a&BV[\x91PP`\x80\x85\x01Qa\x01\x1F\x19\x84\x83\x03\x01a\x01\xC0\x85\x01Ra'\xA7\x82\x82a&\xABV[\x91PP`\xA0\x85\x01Qa'\xC7a\x01\xE0\x85\x01\x82\x80Q\x82R` \x90\x81\x01Q\x91\x01RV[P`\xC0\x85\x01Qa\x02 \x84\x01R`\xE0\x85\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x02@\x85\x01RPa\x01\0\x85\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x02`\x85\x01RPa\x01 \x85\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x02\x80\x85\x01RPa\x01@\x85\x01Qa\x02\xA0\x84\x01Ra\x01`\x85\x01Qa\x02\xC0\x84\x01R\x90Pa\x17\x92` \x83\x01\x84\x80Q\x82R` \x81\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81Q\x16` \x84\x01Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF` \x82\x01Q\x16`@\x84\x01R`@\x81\x01Q``\x84\x01RP`@\x81\x01Q`\x80\x83\x01R``\x81\x01Q`\xA0\x83\x01R`\x80\x81\x01Q`\xC0\x83\x01Rc\xFF\xFF\xFF\xFF`\xA0\x82\x01Q\x16`\xE0\x83\x01RPPV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@\x80Q\x90\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a(\xD2Wa(\xD2a(\x9BV[`@R\x90V[`@Q` \x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a(\xD2Wa(\xD2a(\x9BV[`@Q`\x80\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a(\xD2Wa(\xD2a(\x9BV[`@Qa\x01\x80\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a(\xD2Wa(\xD2a(\x9BV[`@Q`\xC0\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a(\xD2Wa(\xD2a(\x9BV[`@Q``\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a(\xD2Wa(\xD2a(\x9BV[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a)\xB1Wa)\xB1a(\x9BV[`@R\x91\x90PV[\x805`\x03\x81\x10a)\xC7W__\xFD[\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a)\xE5Wa)\xE5a(\x9BV[P`\x05\x1B` \x01\x90V[_`@\x82\x84\x03\x12\x15a)\xFFW__\xFD[a*\x07a(\xAFV[\x90P\x815`\x07\x81\x10a*\x17W__\xFD[\x80\x82RP` \x82\x015` \x82\x01R\x92\x91PPV[_`@\x82\x84\x03\x12\x15a*;W__\xFD[a*Ca(\xAFV[\x90P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a*[W__\xFD[\x82\x01` \x81\x85\x03\x12\x15a*lW__\xFD[a*ta(\xD8V[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a*\x8AW__\xFD[\x80\x83\x01\x92PP\x84`\x1F\x83\x01\x12a*\x9EW__\xFD[\x815a*\xB1a*\xAC\x82a)\xCCV[a)\x88V[\x80\x82\x82R` \x82\x01\x91P` \x83`\x06\x1B\x86\x01\x01\x92P\x87\x83\x11\x15a*\xD2W__\xFD[` \x85\x01\x94P[\x82\x85\x10\x15a*\xFEWa*\xEB\x88\x86a)\xEFV[\x82R` \x82\x01\x91P`@\x85\x01\x94Pa*\xD9V[\x83RPP\x82RP` \x91\x82\x015\x91\x81\x01\x91\x90\x91R\x91\x90PV[_`@\x82\x84\x03\x12\x15a+'W__\xFD[a+/a(\xAFV[\x825\x81R` \x92\x83\x015\x92\x81\x01\x92\x90\x92RP\x91\x90PV[\x805c\xFF\xFF\xFF\xFF\x81\x16\x81\x14a)\xC7W__\xFD[_`@\x82\x84\x03\x12\x15a+iW__\xFD[a+qa(\xAFV[\x90P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a+\x89W__\xFD[\x82\x01`\x1F\x81\x01\x84\x13a+\x99W__\xFD[\x805a+\xA7a*\xAC\x82a)\xCCV[\x80\x82\x82R` \x82\x01\x91P` `\xA0\x84\x02\x85\x01\x01\x92P\x86\x83\x11\x15a+\xC8W__\xFD[` \x84\x01\x93P[\x82\x84\x10\x15a,:W`\xA0\x84\x88\x03\x12\x15a+\xE6W__\xFD[a+\xEEa(\xFBV[a+\xF8\x88\x86a)\xEFV[\x81R`@\x85\x015` \x82\x01Ra,\x10``\x86\x01a+FV[`@\x82\x01Ra,!`\x80\x86\x01a+FV[``\x82\x01R\x82R`\xA0\x93\x90\x93\x01\x92` \x90\x91\x01\x90a+\xCFV[\x84RPPP` \x91\x82\x015\x91\x81\x01\x91\x90\x91R\x91\x90PV[_a\x01\xC0\x826\x03\x12\x15a,bW__\xFD[a,ja)\x1EV[a,s\x83a)\xB9V[\x81R` \x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a,\x8EW__\xFD[a,\x9A6\x82\x86\x01a*+V[` \x83\x01RPa,\xAD6`@\x85\x01a+\x17V[`@\x82\x01R`\x80\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a,\xCBW__\xFD[a,\xD76\x82\x86\x01a*+V[``\x83\x01RP`\xA0\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a,\xF6W__\xFD[a-\x026\x82\x86\x01a+YV[`\x80\x83\x01RPa-\x156`\xC0\x85\x01a+\x17V[`\xA0\x82\x01Ra\x01\0\x83\x015`\xC0\x82\x01Ra-2a\x01 \x84\x01a+FV[`\xE0\x82\x01Ra-Da\x01@\x84\x01a+FV[a\x01\0\x82\x01Ra-Wa\x01`\x84\x01a+FV[a\x01 \x82\x01Ra\x01\x80\x83\x015a\x01@\x82\x01Ra\x01\xA0\x90\x92\x015a\x01`\x83\x01RP\x90V[\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a)\xC7W__\xFD[_\x81\x83\x03a\x01\0\x81\x12\x80\x15a-\xA4W__\xFD[Pa-\xADa)BV[\x835\x81R```\x1F\x19\x83\x01\x12\x15a-\xC2W__\xFD[a-\xCAa)eV[\x91Pa-\xD8` \x85\x01a-zV[\x82Ra-\xE6`@\x85\x01a-zV[` \x83\x81\x01\x91\x90\x91R``\x85\x81\x015`@\x80\x86\x01\x91\x90\x91R\x91\x83\x01\x93\x90\x93R`\x80\x80\x86\x015\x91\x83\x01\x91\x90\x91R`\xA0\x85\x015\x92\x82\x01\x92\x90\x92R`\xC0\x84\x015\x91\x81\x01\x82\x90Ra.5`\xE0\x85\x01a+FV[`\xA0\x82\x01R\x94\x93PPPPV[_` \x82\x84\x03\x12\x15a.RW__\xFD[\x815a\xFF\xFF\x81\x16\x81\x14a\x17\x92W__\xFD[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[c\xFF\xFF\xFF\xFF\x81\x81\x16\x83\x82\x16\x01\x90\x81\x11\x15a\x145Wa\x145a.cV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_`\x01\x82\x01a.\xB8Wa.\xB8a.cV[P`\x01\x01\x90V[\x80\x82\x01\x80\x82\x11\x15a\x145Wa\x145a.cV[\x81\x81\x03\x81\x81\x11\x15a\x145Wa\x145a.cV[_\x84Q\x80` \x87\x01\x84^\x91\x90\x91\x01\x92\x83RP` \x82\x01R`@\x01\x91\x90PV[\x7FValue:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R_`\x07\x84\x10a/8Wa/8a%\xFBV[P`\xF8\x92\x90\x92\x1B`\x06\x83\x01R`\x07\x82\x01R`'\x01\x90V[cNH{q`\xE0\x1B_R`Q`\x04R`$_\xFD\xFE\xA2dipfsX\"\x12 \xA9cS\x04N\x12\xC8x\xF6\xF2\x8C+\xC8\x9A>$\x18\x17\xC0x\xAA\xAA\xCAT98\xBA\xB8\x89\xF7\xDBtdsolcC\0\x08\x1C\x003",
    );
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MachineStatus(u8);
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<MachineStatus> for u8 {
            #[inline]
            fn stv_to_tokens(
                &self,
            ) -> <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'_> {
                alloy_sol_types::private::SolTypeValue::<
                    alloy::sol_types::sol_data::Uint<8>,
                >::stv_to_tokens(self)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::tokenize(self)
                    .0
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(self, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encoded_size(self)
            }
        }
        #[automatically_derived]
        impl MachineStatus {
            /// The Solidity type name.
            pub const NAME: &'static str = stringify!(@ name);
            /// Convert from the underlying value type.
            #[inline]
            pub const fn from(value: u8) -> Self {
                Self(value)
            }
            /// Return the underlying value.
            #[inline]
            pub const fn into(self) -> u8 {
                self.0
            }
            /// Return the single encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode(&self.0)
            }
            /// Return the packed encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode_packed(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode_packed(&self.0)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for MachineStatus {
            type RustType = u8;
            type Token<'a> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = Self::NAME;
            const ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                Self::type_check(token).is_ok()
            }
            #[inline]
            fn type_check(token: &Self::Token<'_>) -> alloy_sol_types::Result<()> {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::type_check(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::detokenize(token)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for MachineStatus {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::topic_preimage_length(rust)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(rust, out)
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic(rust)
            }
        }
    };
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ValueType(u8);
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<ValueType> for u8 {
            #[inline]
            fn stv_to_tokens(
                &self,
            ) -> <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'_> {
                alloy_sol_types::private::SolTypeValue::<
                    alloy::sol_types::sol_data::Uint<8>,
                >::stv_to_tokens(self)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::tokenize(self)
                    .0
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(self, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encoded_size(self)
            }
        }
        #[automatically_derived]
        impl ValueType {
            /// The Solidity type name.
            pub const NAME: &'static str = stringify!(@ name);
            /// Convert from the underlying value type.
            #[inline]
            pub const fn from(value: u8) -> Self {
                Self(value)
            }
            /// Return the underlying value.
            #[inline]
            pub const fn into(self) -> u8 {
                self.0
            }
            /// Return the single encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode(&self.0)
            }
            /// Return the packed encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode_packed(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode_packed(&self.0)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ValueType {
            type RustType = u8;
            type Token<'a> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = Self::NAME;
            const ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                Self::type_check(token).is_ok()
            }
            #[inline]
            fn type_check(token: &Self::Token<'_>) -> alloy_sol_types::Result<()> {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::type_check(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::detokenize(token)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ValueType {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::topic_preimage_length(rust)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(rust, out)
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic(rust)
            }
        }
    };
    /**```solidity
struct ExecutionContext { uint256 maxInboxMessagesRead; address bridge; bytes32 initialWasmModuleRoot; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ExecutionContext {
        #[allow(missing_docs)]
        pub maxInboxMessagesRead: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub bridge: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub initialWasmModuleRoot: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ExecutionContext> for UnderlyingRustTuple<'_> {
            fn from(value: ExecutionContext) -> Self {
                (value.maxInboxMessagesRead, value.bridge, value.initialWasmModuleRoot)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ExecutionContext {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    maxInboxMessagesRead: tuple.0,
                    bridge: tuple.1,
                    initialWasmModuleRoot: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for ExecutionContext {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for ExecutionContext {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.maxInboxMessagesRead),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.bridge,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.initialWasmModuleRoot),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ExecutionContext {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for ExecutionContext {
            const NAME: &'static str = "ExecutionContext";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "ExecutionContext(uint256 maxInboxMessagesRead,address bridge,bytes32 initialWasmModuleRoot)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.maxInboxMessagesRead,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.bridge,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.initialWasmModuleRoot,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ExecutionContext {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.maxInboxMessagesRead,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.bridge,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.initialWasmModuleRoot,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.maxInboxMessagesRead,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.bridge,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.initialWasmModuleRoot,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct Instruction { uint16 opcode; uint256 argumentData; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct Instruction {
        #[allow(missing_docs)]
        pub opcode: u16,
        #[allow(missing_docs)]
        pub argumentData: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<16>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            u16,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Instruction> for UnderlyingRustTuple<'_> {
            fn from(value: Instruction) -> Self {
                (value.opcode, value.argumentData)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Instruction {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    opcode: tuple.0,
                    argumentData: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Instruction {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Instruction {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        16,
                    > as alloy_sol_types::SolType>::tokenize(&self.opcode),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.argumentData),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Instruction {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Instruction {
            const NAME: &'static str = "Instruction";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "Instruction(uint16 opcode,uint256 argumentData)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        16,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.opcode)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.argumentData)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Instruction {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        16,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.opcode,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.argumentData,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    16,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.opcode,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.argumentData,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct Machine { MachineStatus status; ValueStack valueStack; MultiStack valueMultiStack; ValueStack internalStack; StackFrameWindow frameStack; MultiStack frameMultiStack; bytes32 globalStateHash; uint32 moduleIdx; uint32 functionIdx; uint32 functionPc; bytes32 recoveryPc; bytes32 modulesRoot; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct Machine {
        #[allow(missing_docs)]
        pub status: <MachineStatus as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub valueStack: <ValueStack as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub valueMultiStack: <MultiStack as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub internalStack: <ValueStack as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub frameStack: <StackFrameWindow as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub frameMultiStack: <MultiStack as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub globalStateHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub moduleIdx: u32,
        #[allow(missing_docs)]
        pub functionIdx: u32,
        #[allow(missing_docs)]
        pub functionPc: u32,
        #[allow(missing_docs)]
        pub recoveryPc: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub modulesRoot: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            MachineStatus,
            ValueStack,
            MultiStack,
            ValueStack,
            StackFrameWindow,
            MultiStack,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::Uint<32>,
            alloy::sol_types::sol_data::Uint<32>,
            alloy::sol_types::sol_data::Uint<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            <MachineStatus as alloy::sol_types::SolType>::RustType,
            <ValueStack as alloy::sol_types::SolType>::RustType,
            <MultiStack as alloy::sol_types::SolType>::RustType,
            <ValueStack as alloy::sol_types::SolType>::RustType,
            <StackFrameWindow as alloy::sol_types::SolType>::RustType,
            <MultiStack as alloy::sol_types::SolType>::RustType,
            alloy::sol_types::private::FixedBytes<32>,
            u32,
            u32,
            u32,
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Machine> for UnderlyingRustTuple<'_> {
            fn from(value: Machine) -> Self {
                (
                    value.status,
                    value.valueStack,
                    value.valueMultiStack,
                    value.internalStack,
                    value.frameStack,
                    value.frameMultiStack,
                    value.globalStateHash,
                    value.moduleIdx,
                    value.functionIdx,
                    value.functionPc,
                    value.recoveryPc,
                    value.modulesRoot,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Machine {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    status: tuple.0,
                    valueStack: tuple.1,
                    valueMultiStack: tuple.2,
                    internalStack: tuple.3,
                    frameStack: tuple.4,
                    frameMultiStack: tuple.5,
                    globalStateHash: tuple.6,
                    moduleIdx: tuple.7,
                    functionIdx: tuple.8,
                    functionPc: tuple.9,
                    recoveryPc: tuple.10,
                    modulesRoot: tuple.11,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Machine {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Machine {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <MachineStatus as alloy_sol_types::SolType>::tokenize(&self.status),
                    <ValueStack as alloy_sol_types::SolType>::tokenize(&self.valueStack),
                    <MultiStack as alloy_sol_types::SolType>::tokenize(
                        &self.valueMultiStack,
                    ),
                    <ValueStack as alloy_sol_types::SolType>::tokenize(
                        &self.internalStack,
                    ),
                    <StackFrameWindow as alloy_sol_types::SolType>::tokenize(
                        &self.frameStack,
                    ),
                    <MultiStack as alloy_sol_types::SolType>::tokenize(
                        &self.frameMultiStack,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.globalStateHash),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.moduleIdx),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.functionIdx),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.functionPc),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.recoveryPc),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.modulesRoot),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Machine {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Machine {
            const NAME: &'static str = "Machine";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "Machine(uint8 status,ValueStack valueStack,MultiStack valueMultiStack,ValueStack internalStack,StackFrameWindow frameStack,MultiStack frameMultiStack,bytes32 globalStateHash,uint32 moduleIdx,uint32 functionIdx,uint32 functionPc,bytes32 recoveryPc,bytes32 modulesRoot)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(5);
                components
                    .push(
                        <ValueStack as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <ValueStack as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
                    .push(
                        <MultiStack as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <MultiStack as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
                    .push(
                        <ValueStack as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <ValueStack as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
                    .push(
                        <StackFrameWindow as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <StackFrameWindow as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
                    .push(
                        <MultiStack as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <MultiStack as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <MachineStatus as alloy_sol_types::SolType>::eip712_data_word(
                            &self.status,
                        )
                        .0,
                    <ValueStack as alloy_sol_types::SolType>::eip712_data_word(
                            &self.valueStack,
                        )
                        .0,
                    <MultiStack as alloy_sol_types::SolType>::eip712_data_word(
                            &self.valueMultiStack,
                        )
                        .0,
                    <ValueStack as alloy_sol_types::SolType>::eip712_data_word(
                            &self.internalStack,
                        )
                        .0,
                    <StackFrameWindow as alloy_sol_types::SolType>::eip712_data_word(
                            &self.frameStack,
                        )
                        .0,
                    <MultiStack as alloy_sol_types::SolType>::eip712_data_word(
                            &self.frameMultiStack,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.globalStateHash,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.moduleIdx)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.functionIdx)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.functionPc)
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.recoveryPc)
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.modulesRoot)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Machine {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <MachineStatus as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.status,
                    )
                    + <ValueStack as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.valueStack,
                    )
                    + <MultiStack as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.valueMultiStack,
                    )
                    + <ValueStack as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.internalStack,
                    )
                    + <StackFrameWindow as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.frameStack,
                    )
                    + <MultiStack as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.frameMultiStack,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.globalStateHash,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.moduleIdx,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.functionIdx,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.functionPc,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.recoveryPc,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.modulesRoot,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <MachineStatus as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.status,
                    out,
                );
                <ValueStack as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.valueStack,
                    out,
                );
                <MultiStack as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.valueMultiStack,
                    out,
                );
                <ValueStack as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.internalStack,
                    out,
                );
                <StackFrameWindow as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.frameStack,
                    out,
                );
                <MultiStack as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.frameMultiStack,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.globalStateHash,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.moduleIdx,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.functionIdx,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.functionPc,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.recoveryPc,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.modulesRoot,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct Module { bytes32 globalsMerkleRoot; ModuleMemory moduleMemory; bytes32 tablesMerkleRoot; bytes32 functionsMerkleRoot; bytes32 extraHash; uint32 internalsOffset; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct Module {
        #[allow(missing_docs)]
        pub globalsMerkleRoot: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub moduleMemory: <ModuleMemory as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub tablesMerkleRoot: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub functionsMerkleRoot: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub extraHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub internalsOffset: u32,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::FixedBytes<32>,
            ModuleMemory,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::Uint<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::FixedBytes<32>,
            <ModuleMemory as alloy::sol_types::SolType>::RustType,
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::FixedBytes<32>,
            u32,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Module> for UnderlyingRustTuple<'_> {
            fn from(value: Module) -> Self {
                (
                    value.globalsMerkleRoot,
                    value.moduleMemory,
                    value.tablesMerkleRoot,
                    value.functionsMerkleRoot,
                    value.extraHash,
                    value.internalsOffset,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Module {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    globalsMerkleRoot: tuple.0,
                    moduleMemory: tuple.1,
                    tablesMerkleRoot: tuple.2,
                    functionsMerkleRoot: tuple.3,
                    extraHash: tuple.4,
                    internalsOffset: tuple.5,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Module {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Module {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.globalsMerkleRoot),
                    <ModuleMemory as alloy_sol_types::SolType>::tokenize(
                        &self.moduleMemory,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.tablesMerkleRoot),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.functionsMerkleRoot),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.extraHash),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.internalsOffset),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Module {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Module {
            const NAME: &'static str = "Module";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "Module(bytes32 globalsMerkleRoot,ModuleMemory moduleMemory,bytes32 tablesMerkleRoot,bytes32 functionsMerkleRoot,bytes32 extraHash,uint32 internalsOffset)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(1);
                components
                    .push(
                        <ModuleMemory as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <ModuleMemory as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.globalsMerkleRoot,
                        )
                        .0,
                    <ModuleMemory as alloy_sol_types::SolType>::eip712_data_word(
                            &self.moduleMemory,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.tablesMerkleRoot,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.functionsMerkleRoot,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.extraHash)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.internalsOffset,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Module {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.globalsMerkleRoot,
                    )
                    + <ModuleMemory as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.moduleMemory,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.tablesMerkleRoot,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.functionsMerkleRoot,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.extraHash,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.internalsOffset,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.globalsMerkleRoot,
                    out,
                );
                <ModuleMemory as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.moduleMemory,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.tablesMerkleRoot,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.functionsMerkleRoot,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.extraHash,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.internalsOffset,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct ModuleMemory { uint64 size; uint64 maxSize; bytes32 merkleRoot; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ModuleMemory {
        #[allow(missing_docs)]
        pub size: u64,
        #[allow(missing_docs)]
        pub maxSize: u64,
        #[allow(missing_docs)]
        pub merkleRoot: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<64>,
            alloy::sol_types::sol_data::Uint<64>,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            u64,
            u64,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ModuleMemory> for UnderlyingRustTuple<'_> {
            fn from(value: ModuleMemory) -> Self {
                (value.size, value.maxSize, value.merkleRoot)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ModuleMemory {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    size: tuple.0,
                    maxSize: tuple.1,
                    merkleRoot: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for ModuleMemory {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for ModuleMemory {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.size),
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.maxSize),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.merkleRoot),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ModuleMemory {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for ModuleMemory {
            const NAME: &'static str = "ModuleMemory";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "ModuleMemory(uint64 size,uint64 maxSize,bytes32 merkleRoot)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.size)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.maxSize)
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.merkleRoot)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ModuleMemory {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.size)
                    + <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.maxSize,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.merkleRoot,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    64,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.size,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    64,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.maxSize,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.merkleRoot,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct MultiStack { bytes32 inactiveStackHash; bytes32 remainingHash; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MultiStack {
        #[allow(missing_docs)]
        pub inactiveStackHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub remainingHash: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<MultiStack> for UnderlyingRustTuple<'_> {
            fn from(value: MultiStack) -> Self {
                (value.inactiveStackHash, value.remainingHash)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for MultiStack {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    inactiveStackHash: tuple.0,
                    remainingHash: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for MultiStack {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for MultiStack {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.inactiveStackHash),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.remainingHash),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for MultiStack {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for MultiStack {
            const NAME: &'static str = "MultiStack";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "MultiStack(bytes32 inactiveStackHash,bytes32 remainingHash)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.inactiveStackHash,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.remainingHash)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for MultiStack {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.inactiveStackHash,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.remainingHash,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.inactiveStackHash,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.remainingHash,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct StackFrame { Value returnPc; bytes32 localsMerkleRoot; uint32 callerModule; uint32 callerModuleInternals; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct StackFrame {
        #[allow(missing_docs)]
        pub returnPc: <Value as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub localsMerkleRoot: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub callerModule: u32,
        #[allow(missing_docs)]
        pub callerModuleInternals: u32,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            Value,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::Uint<32>,
            alloy::sol_types::sol_data::Uint<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            <Value as alloy::sol_types::SolType>::RustType,
            alloy::sol_types::private::FixedBytes<32>,
            u32,
            u32,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<StackFrame> for UnderlyingRustTuple<'_> {
            fn from(value: StackFrame) -> Self {
                (
                    value.returnPc,
                    value.localsMerkleRoot,
                    value.callerModule,
                    value.callerModuleInternals,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for StackFrame {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    returnPc: tuple.0,
                    localsMerkleRoot: tuple.1,
                    callerModule: tuple.2,
                    callerModuleInternals: tuple.3,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for StackFrame {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for StackFrame {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <Value as alloy_sol_types::SolType>::tokenize(&self.returnPc),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.localsMerkleRoot),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.callerModule),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.callerModuleInternals),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for StackFrame {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for StackFrame {
            const NAME: &'static str = "StackFrame";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "StackFrame(Value returnPc,bytes32 localsMerkleRoot,uint32 callerModule,uint32 callerModuleInternals)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(1);
                components
                    .push(<Value as alloy_sol_types::SolStruct>::eip712_root_type());
                components
                    .extend(<Value as alloy_sol_types::SolStruct>::eip712_components());
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <Value as alloy_sol_types::SolType>::eip712_data_word(&self.returnPc)
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.localsMerkleRoot,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.callerModule)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.callerModuleInternals,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for StackFrame {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <Value as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.returnPc,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.localsMerkleRoot,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.callerModule,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.callerModuleInternals,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <Value as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.returnPc,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.localsMerkleRoot,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.callerModule,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.callerModuleInternals,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct StackFrameWindow { StackFrame[] proved; bytes32 remainingHash; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct StackFrameWindow {
        #[allow(missing_docs)]
        pub proved: alloy::sol_types::private::Vec<
            <StackFrame as alloy::sol_types::SolType>::RustType,
        >,
        #[allow(missing_docs)]
        pub remainingHash: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Array<StackFrame>,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Vec<
                <StackFrame as alloy::sol_types::SolType>::RustType,
            >,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<StackFrameWindow> for UnderlyingRustTuple<'_> {
            fn from(value: StackFrameWindow) -> Self {
                (value.proved, value.remainingHash)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for StackFrameWindow {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    proved: tuple.0,
                    remainingHash: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for StackFrameWindow {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for StackFrameWindow {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        StackFrame,
                    > as alloy_sol_types::SolType>::tokenize(&self.proved),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.remainingHash),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for StackFrameWindow {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for StackFrameWindow {
            const NAME: &'static str = "StackFrameWindow";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "StackFrameWindow(StackFrame[] proved,bytes32 remainingHash)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(1);
                components
                    .push(
                        <StackFrame as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <StackFrame as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Array<
                        StackFrame,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.proved)
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.remainingHash)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for StackFrameWindow {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Array<
                        StackFrame,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.proved,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.remainingHash,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Array<
                    StackFrame,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.proved,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.remainingHash,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct Value { ValueType valueType; uint256 contents; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct Value {
        #[allow(missing_docs)]
        pub valueType: <ValueType as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub contents: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (ValueType, alloy::sol_types::sol_data::Uint<256>);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            <ValueType as alloy::sol_types::SolType>::RustType,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Value> for UnderlyingRustTuple<'_> {
            fn from(value: Value) -> Self {
                (value.valueType, value.contents)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Value {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    valueType: tuple.0,
                    contents: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Value {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Value {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <ValueType as alloy_sol_types::SolType>::tokenize(&self.valueType),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contents),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Value {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Value {
            const NAME: &'static str = "Value";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "Value(uint8 valueType,uint256 contents)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <ValueType as alloy_sol_types::SolType>::eip712_data_word(
                            &self.valueType,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.contents)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Value {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <ValueType as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.valueType,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.contents,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <ValueType as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.valueType,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.contents,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct ValueArray { Value[] inner; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ValueArray {
        #[allow(missing_docs)]
        pub inner: alloy::sol_types::private::Vec<
            <Value as alloy::sol_types::SolType>::RustType,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Array<Value>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Vec<
                <Value as alloy::sol_types::SolType>::RustType,
            >,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ValueArray> for UnderlyingRustTuple<'_> {
            fn from(value: ValueArray) -> Self {
                (value.inner,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ValueArray {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { inner: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for ValueArray {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for ValueArray {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        Value,
                    > as alloy_sol_types::SolType>::tokenize(&self.inner),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ValueArray {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for ValueArray {
            const NAME: &'static str = "ValueArray";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed("ValueArray(Value[] inner)")
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(1);
                components
                    .push(<Value as alloy_sol_types::SolStruct>::eip712_root_type());
                components
                    .extend(<Value as alloy_sol_types::SolStruct>::eip712_components());
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                <alloy::sol_types::sol_data::Array<
                    Value,
                > as alloy_sol_types::SolType>::eip712_data_word(&self.inner)
                    .0
                    .to_vec()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ValueArray {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Array<
                        Value,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.inner)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Array<
                    Value,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.inner,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct ValueStack { ValueArray proved; bytes32 remainingHash; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ValueStack {
        #[allow(missing_docs)]
        pub proved: <ValueArray as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub remainingHash: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            ValueArray,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            <ValueArray as alloy::sol_types::SolType>::RustType,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ValueStack> for UnderlyingRustTuple<'_> {
            fn from(value: ValueStack) -> Self {
                (value.proved, value.remainingHash)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ValueStack {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    proved: tuple.0,
                    remainingHash: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for ValueStack {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for ValueStack {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <ValueArray as alloy_sol_types::SolType>::tokenize(&self.proved),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.remainingHash),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ValueStack {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for ValueStack {
            const NAME: &'static str = "ValueStack";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "ValueStack(ValueArray proved,bytes32 remainingHash)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(1);
                components
                    .push(
                        <ValueArray as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <ValueArray as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <ValueArray as alloy_sol_types::SolType>::eip712_data_word(
                            &self.proved,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.remainingHash)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ValueStack {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <ValueArray as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.proved,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.remainingHash,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <ValueArray as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.proved,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.remainingHash,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**Function with signature `executeOneStep((uint256,address,bytes32),(uint8,(((uint8,uint256)[]),bytes32),(bytes32,bytes32),(((uint8,uint256)[]),bytes32),(((uint8,uint256),bytes32,uint32,uint32)[],bytes32),(bytes32,bytes32),bytes32,uint32,uint32,uint32,bytes32,bytes32),(bytes32,(uint64,uint64,bytes32),bytes32,bytes32,bytes32,uint32),(uint16,uint256),bytes)` and selector `0xa92cb501`.
```solidity
function executeOneStep(ExecutionContext memory, Machine memory startMach, Module memory startMod, Instruction memory inst, bytes memory proof) external pure returns (Machine memory mach, Module memory r#mod);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeOneStepCall {
        #[allow(missing_docs)]
        pub _0: <ExecutionContext as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub startMach: <Machine as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub startMod: <Module as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub inst: <Instruction as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub proof: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`executeOneStep((uint256,address,bytes32),(uint8,(((uint8,uint256)[]),bytes32),(bytes32,bytes32),(((uint8,uint256)[]),bytes32),(((uint8,uint256),bytes32,uint32,uint32)[],bytes32),(bytes32,bytes32),bytes32,uint32,uint32,uint32,bytes32,bytes32),(bytes32,(uint64,uint64,bytes32),bytes32,bytes32,bytes32,uint32),(uint16,uint256),bytes)`](executeOneStepCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeOneStepReturn {
        #[allow(missing_docs)]
        pub mach: <Machine as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub r#mod: <Module as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                ExecutionContext,
                Machine,
                Module,
                Instruction,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <ExecutionContext as alloy::sol_types::SolType>::RustType,
                <Machine as alloy::sol_types::SolType>::RustType,
                <Module as alloy::sol_types::SolType>::RustType,
                <Instruction as alloy::sol_types::SolType>::RustType,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeOneStepCall> for UnderlyingRustTuple<'_> {
                fn from(value: executeOneStepCall) -> Self {
                    (value._0, value.startMach, value.startMod, value.inst, value.proof)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for executeOneStepCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _0: tuple.0,
                        startMach: tuple.1,
                        startMod: tuple.2,
                        inst: tuple.3,
                        proof: tuple.4,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (Machine, Module);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <Machine as alloy::sol_types::SolType>::RustType,
                <Module as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeOneStepReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: executeOneStepReturn) -> Self {
                    (value.mach, value.r#mod)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for executeOneStepReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        mach: tuple.0,
                        r#mod: tuple.1,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for executeOneStepCall {
            type Parameters<'a> = (
                ExecutionContext,
                Machine,
                Module,
                Instruction,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = executeOneStepReturn;
            type ReturnTuple<'a> = (Machine, Module);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "executeOneStep((uint256,address,bytes32),(uint8,(((uint8,uint256)[]),bytes32),(bytes32,bytes32),(((uint8,uint256)[]),bytes32),(((uint8,uint256),bytes32,uint32,uint32)[],bytes32),(bytes32,bytes32),bytes32,uint32,uint32,uint32,bytes32,bytes32),(bytes32,(uint64,uint64,bytes32),bytes32,bytes32,bytes32,uint32),(uint16,uint256),bytes)";
            const SELECTOR: [u8; 4] = [169u8, 44u8, 181u8, 1u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <ExecutionContext as alloy_sol_types::SolType>::tokenize(&self._0),
                    <Machine as alloy_sol_types::SolType>::tokenize(&self.startMach),
                    <Module as alloy_sol_types::SolType>::tokenize(&self.startMod),
                    <Instruction as alloy_sol_types::SolType>::tokenize(&self.inst),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.proof,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`OneStepProver0`](self) function calls.
    pub enum OneStepProver0Calls {
        #[allow(missing_docs)]
        executeOneStep(executeOneStepCall),
    }
    #[automatically_derived]
    impl OneStepProver0Calls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[[169u8, 44u8, 181u8, 1u8]];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for OneStepProver0Calls {
        const NAME: &'static str = "OneStepProver0Calls";
        const MIN_DATA_LENGTH: usize = 1120usize;
        const COUNT: usize = 1usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::executeOneStep(_) => {
                    <executeOneStepCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<OneStepProver0Calls>] = &[
                {
                    fn executeOneStep(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OneStepProver0Calls> {
                        <executeOneStepCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OneStepProver0Calls::executeOneStep)
                    }
                    executeOneStep
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::executeOneStep(inner) => {
                    <executeOneStepCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::executeOneStep(inner) => {
                    <executeOneStepCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`OneStepProver0`](self) contract instance.

See the [wrapper's documentation](`OneStepProver0Instance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> OneStepProver0Instance<T, P, N> {
        OneStepProver0Instance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<OneStepProver0Instance<T, P, N>>,
    > {
        OneStepProver0Instance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        OneStepProver0Instance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`OneStepProver0`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`OneStepProver0`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct OneStepProver0Instance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for OneStepProver0Instance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("OneStepProver0Instance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > OneStepProver0Instance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`OneStepProver0`](self) contract instance.

See the [wrapper's documentation](`OneStepProver0Instance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<OneStepProver0Instance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> OneStepProver0Instance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> OneStepProver0Instance<T, P, N> {
            OneStepProver0Instance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > OneStepProver0Instance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`executeOneStep`] function.
        pub fn executeOneStep(
            &self,
            _0: <ExecutionContext as alloy::sol_types::SolType>::RustType,
            startMach: <Machine as alloy::sol_types::SolType>::RustType,
            startMod: <Module as alloy::sol_types::SolType>::RustType,
            inst: <Instruction as alloy::sol_types::SolType>::RustType,
            proof: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, executeOneStepCall, N> {
            self.call_builder(
                &executeOneStepCall {
                    _0,
                    startMach,
                    startMod,
                    inst,
                    proof,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > OneStepProver0Instance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
