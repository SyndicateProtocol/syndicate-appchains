/**

Generated by the following Solidity interface...
```solidity
interface ArbWasm {
    error ProgramExpired(uint64 ageInSeconds);
    error ProgramInsufficientValue(uint256 have, uint256 want);
    error ProgramKeepaliveTooSoon(uint64 ageInSeconds);
    error ProgramNeedsUpgrade(uint16 version, uint16 stylusVersion);
    error ProgramNotActivated();
    error ProgramNotWasm();
    error ProgramUpToDate();

    event ProgramActivated(bytes32 indexed codehash, bytes32 moduleHash, address program, uint256 dataFee, uint16 version);
    event ProgramLifetimeExtended(bytes32 indexed codehash, uint256 dataFee);

    function activateProgram(address program) external payable returns (uint16 version, uint256 dataFee);
    function blockCacheSize() external view returns (uint16 count);
    function codehashAsmSize(bytes32 codehash) external view returns (uint32 size);
    function codehashKeepalive(bytes32 codehash) external payable;
    function codehashVersion(bytes32 codehash) external view returns (uint16 version);
    function expiryDays() external view returns (uint16 _days);
    function freePages() external view returns (uint16 pages);
    function initCostScalar() external view returns (uint64 percent);
    function inkPrice() external view returns (uint32 price);
    function keepaliveDays() external view returns (uint16 _days);
    function maxStackDepth() external view returns (uint32 depth);
    function minInitGas() external view returns (uint64 gas, uint64 cached);
    function pageGas() external view returns (uint16 gas);
    function pageLimit() external view returns (uint16 limit);
    function pageRamp() external view returns (uint64 ramp);
    function programInitGas(address program) external view returns (uint64 gas, uint64 gasWhenCached);
    function programMemoryFootprint(address program) external view returns (uint16 footprint);
    function programTimeLeft(address program) external view returns (uint64 _secs);
    function programVersion(address program) external view returns (uint16 version);
    function stylusVersion() external view returns (uint16 version);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "activateProgram",
    "inputs": [
      {
        "name": "program",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "version",
        "type": "uint16",
        "internalType": "uint16"
      },
      {
        "name": "dataFee",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "blockCacheSize",
    "inputs": [],
    "outputs": [
      {
        "name": "count",
        "type": "uint16",
        "internalType": "uint16"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "codehashAsmSize",
    "inputs": [
      {
        "name": "codehash",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "size",
        "type": "uint32",
        "internalType": "uint32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "codehashKeepalive",
    "inputs": [
      {
        "name": "codehash",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "codehashVersion",
    "inputs": [
      {
        "name": "codehash",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "version",
        "type": "uint16",
        "internalType": "uint16"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "expiryDays",
    "inputs": [],
    "outputs": [
      {
        "name": "_days",
        "type": "uint16",
        "internalType": "uint16"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "freePages",
    "inputs": [],
    "outputs": [
      {
        "name": "pages",
        "type": "uint16",
        "internalType": "uint16"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "initCostScalar",
    "inputs": [],
    "outputs": [
      {
        "name": "percent",
        "type": "uint64",
        "internalType": "uint64"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "inkPrice",
    "inputs": [],
    "outputs": [
      {
        "name": "price",
        "type": "uint32",
        "internalType": "uint32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "keepaliveDays",
    "inputs": [],
    "outputs": [
      {
        "name": "_days",
        "type": "uint16",
        "internalType": "uint16"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "maxStackDepth",
    "inputs": [],
    "outputs": [
      {
        "name": "depth",
        "type": "uint32",
        "internalType": "uint32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "minInitGas",
    "inputs": [],
    "outputs": [
      {
        "name": "gas",
        "type": "uint64",
        "internalType": "uint64"
      },
      {
        "name": "cached",
        "type": "uint64",
        "internalType": "uint64"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "pageGas",
    "inputs": [],
    "outputs": [
      {
        "name": "gas",
        "type": "uint16",
        "internalType": "uint16"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "pageLimit",
    "inputs": [],
    "outputs": [
      {
        "name": "limit",
        "type": "uint16",
        "internalType": "uint16"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "pageRamp",
    "inputs": [],
    "outputs": [
      {
        "name": "ramp",
        "type": "uint64",
        "internalType": "uint64"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "programInitGas",
    "inputs": [
      {
        "name": "program",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "gas",
        "type": "uint64",
        "internalType": "uint64"
      },
      {
        "name": "gasWhenCached",
        "type": "uint64",
        "internalType": "uint64"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "programMemoryFootprint",
    "inputs": [
      {
        "name": "program",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "footprint",
        "type": "uint16",
        "internalType": "uint16"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "programTimeLeft",
    "inputs": [
      {
        "name": "program",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "_secs",
        "type": "uint64",
        "internalType": "uint64"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "programVersion",
    "inputs": [
      {
        "name": "program",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "version",
        "type": "uint16",
        "internalType": "uint16"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "stylusVersion",
    "inputs": [],
    "outputs": [
      {
        "name": "version",
        "type": "uint16",
        "internalType": "uint16"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "event",
    "name": "ProgramActivated",
    "inputs": [
      {
        "name": "codehash",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "moduleHash",
        "type": "bytes32",
        "indexed": false,
        "internalType": "bytes32"
      },
      {
        "name": "program",
        "type": "address",
        "indexed": false,
        "internalType": "address"
      },
      {
        "name": "dataFee",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "version",
        "type": "uint16",
        "indexed": false,
        "internalType": "uint16"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "ProgramLifetimeExtended",
    "inputs": [
      {
        "name": "codehash",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "dataFee",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "ProgramExpired",
    "inputs": [
      {
        "name": "ageInSeconds",
        "type": "uint64",
        "internalType": "uint64"
      }
    ]
  },
  {
    "type": "error",
    "name": "ProgramInsufficientValue",
    "inputs": [
      {
        "name": "have",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "want",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ProgramKeepaliveTooSoon",
    "inputs": [
      {
        "name": "ageInSeconds",
        "type": "uint64",
        "internalType": "uint64"
      }
    ]
  },
  {
    "type": "error",
    "name": "ProgramNeedsUpgrade",
    "inputs": [
      {
        "name": "version",
        "type": "uint16",
        "internalType": "uint16"
      },
      {
        "name": "stylusVersion",
        "type": "uint16",
        "internalType": "uint16"
      }
    ]
  },
  {
    "type": "error",
    "name": "ProgramNotActivated",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ProgramNotWasm",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ProgramUpToDate",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod ArbWasm {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"",
    );
    /**Custom error with signature `ProgramExpired(uint64)` and selector `0xc9b12e52`.
```solidity
error ProgramExpired(uint64 ageInSeconds);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ProgramExpired {
        #[allow(missing_docs)]
        pub ageInSeconds: u64,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (u64,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ProgramExpired> for UnderlyingRustTuple<'_> {
            fn from(value: ProgramExpired) -> Self {
                (value.ageInSeconds,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ProgramExpired {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { ageInSeconds: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ProgramExpired {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ProgramExpired(uint64)";
            const SELECTOR: [u8; 4] = [201u8, 177u8, 46u8, 82u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.ageInSeconds),
                )
            }
        }
    };
    /**Custom error with signature `ProgramInsufficientValue(uint256,uint256)` and selector `0x09781ab7`.
```solidity
error ProgramInsufficientValue(uint256 have, uint256 want);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ProgramInsufficientValue {
        #[allow(missing_docs)]
        pub have: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub want: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ProgramInsufficientValue>
        for UnderlyingRustTuple<'_> {
            fn from(value: ProgramInsufficientValue) -> Self {
                (value.have, value.want)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for ProgramInsufficientValue {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    have: tuple.0,
                    want: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ProgramInsufficientValue {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ProgramInsufficientValue(uint256,uint256)";
            const SELECTOR: [u8; 4] = [9u8, 120u8, 26u8, 183u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.have),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.want),
                )
            }
        }
    };
    /**Custom error with signature `ProgramKeepaliveTooSoon(uint64)` and selector `0x16bd0cf8`.
```solidity
error ProgramKeepaliveTooSoon(uint64 ageInSeconds);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ProgramKeepaliveTooSoon {
        #[allow(missing_docs)]
        pub ageInSeconds: u64,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (u64,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ProgramKeepaliveTooSoon> for UnderlyingRustTuple<'_> {
            fn from(value: ProgramKeepaliveTooSoon) -> Self {
                (value.ageInSeconds,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ProgramKeepaliveTooSoon {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { ageInSeconds: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ProgramKeepaliveTooSoon {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ProgramKeepaliveTooSoon(uint64)";
            const SELECTOR: [u8; 4] = [22u8, 189u8, 12u8, 248u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.ageInSeconds),
                )
            }
        }
    };
    /**Custom error with signature `ProgramNeedsUpgrade(uint16,uint16)` and selector `0x637d968f`.
```solidity
error ProgramNeedsUpgrade(uint16 version, uint16 stylusVersion);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ProgramNeedsUpgrade {
        #[allow(missing_docs)]
        pub version: u16,
        #[allow(missing_docs)]
        pub stylusVersion: u16,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<16>,
            alloy::sol_types::sol_data::Uint<16>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (u16, u16);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ProgramNeedsUpgrade> for UnderlyingRustTuple<'_> {
            fn from(value: ProgramNeedsUpgrade) -> Self {
                (value.version, value.stylusVersion)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ProgramNeedsUpgrade {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    version: tuple.0,
                    stylusVersion: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ProgramNeedsUpgrade {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ProgramNeedsUpgrade(uint16,uint16)";
            const SELECTOR: [u8; 4] = [99u8, 125u8, 150u8, 143u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        16,
                    > as alloy_sol_types::SolType>::tokenize(&self.version),
                    <alloy::sol_types::sol_data::Uint<
                        16,
                    > as alloy_sol_types::SolType>::tokenize(&self.stylusVersion),
                )
            }
        }
    };
    /**Custom error with signature `ProgramNotActivated()` and selector `0x6f809c4e`.
```solidity
error ProgramNotActivated();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ProgramNotActivated {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ProgramNotActivated> for UnderlyingRustTuple<'_> {
            fn from(value: ProgramNotActivated) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ProgramNotActivated {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ProgramNotActivated {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ProgramNotActivated()";
            const SELECTOR: [u8; 4] = [111u8, 128u8, 156u8, 78u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `ProgramNotWasm()` and selector `0x27f38212`.
```solidity
error ProgramNotWasm();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ProgramNotWasm {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ProgramNotWasm> for UnderlyingRustTuple<'_> {
            fn from(value: ProgramNotWasm) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ProgramNotWasm {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ProgramNotWasm {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ProgramNotWasm()";
            const SELECTOR: [u8; 4] = [39u8, 243u8, 130u8, 18u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `ProgramUpToDate()` and selector `0xcc944bf2`.
```solidity
error ProgramUpToDate();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ProgramUpToDate {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ProgramUpToDate> for UnderlyingRustTuple<'_> {
            fn from(value: ProgramUpToDate) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ProgramUpToDate {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ProgramUpToDate {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ProgramUpToDate()";
            const SELECTOR: [u8; 4] = [204u8, 148u8, 75u8, 242u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Event with signature `ProgramActivated(bytes32,bytes32,address,uint256,uint16)` and selector `0xc0e812780707128d9a180db8ee4d1c1f1300b6dd0626d577b5d9ac759b76253c`.
```solidity
event ProgramActivated(bytes32 indexed codehash, bytes32 moduleHash, address program, uint256 dataFee, uint16 version);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct ProgramActivated {
        #[allow(missing_docs)]
        pub codehash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub moduleHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub program: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub dataFee: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub version: u16,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for ProgramActivated {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<16>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            const SIGNATURE: &'static str = "ProgramActivated(bytes32,bytes32,address,uint256,uint16)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                192u8,
                232u8,
                18u8,
                120u8,
                7u8,
                7u8,
                18u8,
                141u8,
                154u8,
                24u8,
                13u8,
                184u8,
                238u8,
                77u8,
                28u8,
                31u8,
                19u8,
                0u8,
                182u8,
                221u8,
                6u8,
                38u8,
                213u8,
                119u8,
                181u8,
                217u8,
                172u8,
                117u8,
                155u8,
                118u8,
                37u8,
                60u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    codehash: topics.1,
                    moduleHash: data.0,
                    program: data.1,
                    dataFee: data.2,
                    version: data.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.moduleHash),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.program,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.dataFee),
                    <alloy::sol_types::sol_data::Uint<
                        16,
                    > as alloy_sol_types::SolType>::tokenize(&self.version),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.codehash.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.codehash);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for ProgramActivated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&ProgramActivated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &ProgramActivated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `ProgramLifetimeExtended(bytes32,uint256)` and selector `0x03802ba32e3bd489d2ab04abb93d10687e0b6883bcb091206ca75172d248f2ec`.
```solidity
event ProgramLifetimeExtended(bytes32 indexed codehash, uint256 dataFee);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct ProgramLifetimeExtended {
        #[allow(missing_docs)]
        pub codehash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub dataFee: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for ProgramLifetimeExtended {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            const SIGNATURE: &'static str = "ProgramLifetimeExtended(bytes32,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                3u8,
                128u8,
                43u8,
                163u8,
                46u8,
                59u8,
                212u8,
                137u8,
                210u8,
                171u8,
                4u8,
                171u8,
                185u8,
                61u8,
                16u8,
                104u8,
                126u8,
                11u8,
                104u8,
                131u8,
                188u8,
                176u8,
                145u8,
                32u8,
                108u8,
                167u8,
                81u8,
                114u8,
                210u8,
                72u8,
                242u8,
                236u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    codehash: topics.1,
                    dataFee: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.dataFee),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.codehash.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.codehash);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for ProgramLifetimeExtended {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&ProgramLifetimeExtended> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &ProgramLifetimeExtended,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Function with signature `activateProgram(address)` and selector `0x58c780c2`.
```solidity
function activateProgram(address program) external payable returns (uint16 version, uint256 dataFee);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct activateProgramCall {
        #[allow(missing_docs)]
        pub program: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`activateProgram(address)`](activateProgramCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct activateProgramReturn {
        #[allow(missing_docs)]
        pub version: u16,
        #[allow(missing_docs)]
        pub dataFee: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<activateProgramCall> for UnderlyingRustTuple<'_> {
                fn from(value: activateProgramCall) -> Self {
                    (value.program,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for activateProgramCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { program: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<16>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                u16,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<activateProgramReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: activateProgramReturn) -> Self {
                    (value.version, value.dataFee)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for activateProgramReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        version: tuple.0,
                        dataFee: tuple.1,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for activateProgramCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = activateProgramReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Uint<16>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "activateProgram(address)";
            const SELECTOR: [u8; 4] = [88u8, 199u8, 128u8, 194u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.program,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `blockCacheSize()` and selector `0x7af6e819`.
```solidity
function blockCacheSize() external view returns (uint16 count);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct blockCacheSizeCall {}
    ///Container type for the return parameters of the [`blockCacheSize()`](blockCacheSizeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct blockCacheSizeReturn {
        #[allow(missing_docs)]
        pub count: u16,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<blockCacheSizeCall> for UnderlyingRustTuple<'_> {
                fn from(value: blockCacheSizeCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for blockCacheSizeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<16>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u16,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<blockCacheSizeReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: blockCacheSizeReturn) -> Self {
                    (value.count,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for blockCacheSizeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { count: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for blockCacheSizeCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = blockCacheSizeReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<16>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "blockCacheSize()";
            const SELECTOR: [u8; 4] = [122u8, 246u8, 232u8, 25u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `codehashAsmSize(bytes32)` and selector `0x4089267f`.
```solidity
function codehashAsmSize(bytes32 codehash) external view returns (uint32 size);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct codehashAsmSizeCall {
        #[allow(missing_docs)]
        pub codehash: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`codehashAsmSize(bytes32)`](codehashAsmSizeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct codehashAsmSizeReturn {
        #[allow(missing_docs)]
        pub size: u32,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<codehashAsmSizeCall> for UnderlyingRustTuple<'_> {
                fn from(value: codehashAsmSizeCall) -> Self {
                    (value.codehash,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for codehashAsmSizeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { codehash: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u32,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<codehashAsmSizeReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: codehashAsmSizeReturn) -> Self {
                    (value.size,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for codehashAsmSizeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { size: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for codehashAsmSizeCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = codehashAsmSizeReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "codehashAsmSize(bytes32)";
            const SELECTOR: [u8; 4] = [64u8, 137u8, 38u8, 127u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.codehash),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `codehashKeepalive(bytes32)` and selector `0xc689bad5`.
```solidity
function codehashKeepalive(bytes32 codehash) external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct codehashKeepaliveCall {
        #[allow(missing_docs)]
        pub codehash: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`codehashKeepalive(bytes32)`](codehashKeepaliveCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct codehashKeepaliveReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<codehashKeepaliveCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: codehashKeepaliveCall) -> Self {
                    (value.codehash,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for codehashKeepaliveCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { codehash: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<codehashKeepaliveReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: codehashKeepaliveReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for codehashKeepaliveReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for codehashKeepaliveCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = codehashKeepaliveReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "codehashKeepalive(bytes32)";
            const SELECTOR: [u8; 4] = [198u8, 137u8, 186u8, 213u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.codehash),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `codehashVersion(bytes32)` and selector `0xd70c0ca7`.
```solidity
function codehashVersion(bytes32 codehash) external view returns (uint16 version);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct codehashVersionCall {
        #[allow(missing_docs)]
        pub codehash: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`codehashVersion(bytes32)`](codehashVersionCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct codehashVersionReturn {
        #[allow(missing_docs)]
        pub version: u16,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<codehashVersionCall> for UnderlyingRustTuple<'_> {
                fn from(value: codehashVersionCall) -> Self {
                    (value.codehash,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for codehashVersionCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { codehash: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<16>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u16,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<codehashVersionReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: codehashVersionReturn) -> Self {
                    (value.version,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for codehashVersionReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { version: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for codehashVersionCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = codehashVersionReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<16>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "codehashVersion(bytes32)";
            const SELECTOR: [u8; 4] = [215u8, 12u8, 12u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.codehash),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `expiryDays()` and selector `0x309f6555`.
```solidity
function expiryDays() external view returns (uint16 _days);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct expiryDaysCall {}
    ///Container type for the return parameters of the [`expiryDays()`](expiryDaysCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct expiryDaysReturn {
        #[allow(missing_docs)]
        pub _days: u16,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<expiryDaysCall> for UnderlyingRustTuple<'_> {
                fn from(value: expiryDaysCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for expiryDaysCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<16>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u16,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<expiryDaysReturn> for UnderlyingRustTuple<'_> {
                fn from(value: expiryDaysReturn) -> Self {
                    (value._days,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for expiryDaysReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _days: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for expiryDaysCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = expiryDaysReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<16>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "expiryDays()";
            const SELECTOR: [u8; 4] = [48u8, 159u8, 101u8, 85u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `freePages()` and selector `0x4490c19d`.
```solidity
function freePages() external view returns (uint16 pages);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct freePagesCall {}
    ///Container type for the return parameters of the [`freePages()`](freePagesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct freePagesReturn {
        #[allow(missing_docs)]
        pub pages: u16,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<freePagesCall> for UnderlyingRustTuple<'_> {
                fn from(value: freePagesCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for freePagesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<16>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u16,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<freePagesReturn> for UnderlyingRustTuple<'_> {
                fn from(value: freePagesReturn) -> Self {
                    (value.pages,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for freePagesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { pages: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for freePagesCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = freePagesReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<16>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "freePages()";
            const SELECTOR: [u8; 4] = [68u8, 144u8, 193u8, 157u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `initCostScalar()` and selector `0x5fc94c0b`.
```solidity
function initCostScalar() external view returns (uint64 percent);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initCostScalarCall {}
    ///Container type for the return parameters of the [`initCostScalar()`](initCostScalarCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initCostScalarReturn {
        #[allow(missing_docs)]
        pub percent: u64,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initCostScalarCall> for UnderlyingRustTuple<'_> {
                fn from(value: initCostScalarCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initCostScalarCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u64,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initCostScalarReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: initCostScalarReturn) -> Self {
                    (value.percent,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for initCostScalarReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { percent: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for initCostScalarCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = initCostScalarReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "initCostScalar()";
            const SELECTOR: [u8; 4] = [95u8, 201u8, 76u8, 11u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `inkPrice()` and selector `0xd1c17abc`.
```solidity
function inkPrice() external view returns (uint32 price);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct inkPriceCall {}
    ///Container type for the return parameters of the [`inkPrice()`](inkPriceCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct inkPriceReturn {
        #[allow(missing_docs)]
        pub price: u32,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<inkPriceCall> for UnderlyingRustTuple<'_> {
                fn from(value: inkPriceCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for inkPriceCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u32,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<inkPriceReturn> for UnderlyingRustTuple<'_> {
                fn from(value: inkPriceReturn) -> Self {
                    (value.price,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for inkPriceReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { price: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for inkPriceCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = inkPriceReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "inkPrice()";
            const SELECTOR: [u8; 4] = [209u8, 193u8, 122u8, 188u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `keepaliveDays()` and selector `0x0a936455`.
```solidity
function keepaliveDays() external view returns (uint16 _days);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct keepaliveDaysCall {}
    ///Container type for the return parameters of the [`keepaliveDays()`](keepaliveDaysCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct keepaliveDaysReturn {
        #[allow(missing_docs)]
        pub _days: u16,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<keepaliveDaysCall> for UnderlyingRustTuple<'_> {
                fn from(value: keepaliveDaysCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for keepaliveDaysCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<16>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u16,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<keepaliveDaysReturn> for UnderlyingRustTuple<'_> {
                fn from(value: keepaliveDaysReturn) -> Self {
                    (value._days,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for keepaliveDaysReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _days: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for keepaliveDaysCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = keepaliveDaysReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<16>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "keepaliveDays()";
            const SELECTOR: [u8; 4] = [10u8, 147u8, 100u8, 85u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `maxStackDepth()` and selector `0x8ccfaa70`.
```solidity
function maxStackDepth() external view returns (uint32 depth);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct maxStackDepthCall {}
    ///Container type for the return parameters of the [`maxStackDepth()`](maxStackDepthCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct maxStackDepthReturn {
        #[allow(missing_docs)]
        pub depth: u32,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<maxStackDepthCall> for UnderlyingRustTuple<'_> {
                fn from(value: maxStackDepthCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for maxStackDepthCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u32,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<maxStackDepthReturn> for UnderlyingRustTuple<'_> {
                fn from(value: maxStackDepthReturn) -> Self {
                    (value.depth,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for maxStackDepthReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { depth: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for maxStackDepthCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = maxStackDepthReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "maxStackDepth()";
            const SELECTOR: [u8; 4] = [140u8, 207u8, 170u8, 112u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `minInitGas()` and selector `0x99d0b38d`.
```solidity
function minInitGas() external view returns (uint64 gas, uint64 cached);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct minInitGasCall {}
    ///Container type for the return parameters of the [`minInitGas()`](minInitGasCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct minInitGasReturn {
        #[allow(missing_docs)]
        pub gas: u64,
        #[allow(missing_docs)]
        pub cached: u64,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<minInitGasCall> for UnderlyingRustTuple<'_> {
                fn from(value: minInitGasCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for minInitGasCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<64>,
                alloy::sol_types::sol_data::Uint<64>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u64, u64);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<minInitGasReturn> for UnderlyingRustTuple<'_> {
                fn from(value: minInitGasReturn) -> Self {
                    (value.gas, value.cached)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for minInitGasReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        gas: tuple.0,
                        cached: tuple.1,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for minInitGasCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = minInitGasReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Uint<64>,
                alloy::sol_types::sol_data::Uint<64>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "minInitGas()";
            const SELECTOR: [u8; 4] = [153u8, 208u8, 179u8, 141u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `pageGas()` and selector `0x7af4ba49`.
```solidity
function pageGas() external view returns (uint16 gas);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pageGasCall {}
    ///Container type for the return parameters of the [`pageGas()`](pageGasCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pageGasReturn {
        #[allow(missing_docs)]
        pub gas: u16,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pageGasCall> for UnderlyingRustTuple<'_> {
                fn from(value: pageGasCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pageGasCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<16>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u16,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pageGasReturn> for UnderlyingRustTuple<'_> {
                fn from(value: pageGasReturn) -> Self {
                    (value.gas,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pageGasReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { gas: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for pageGasCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = pageGasReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<16>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "pageGas()";
            const SELECTOR: [u8; 4] = [122u8, 244u8, 186u8, 73u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `pageLimit()` and selector `0x9786f96e`.
```solidity
function pageLimit() external view returns (uint16 limit);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pageLimitCall {}
    ///Container type for the return parameters of the [`pageLimit()`](pageLimitCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pageLimitReturn {
        #[allow(missing_docs)]
        pub limit: u16,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pageLimitCall> for UnderlyingRustTuple<'_> {
                fn from(value: pageLimitCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pageLimitCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<16>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u16,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pageLimitReturn> for UnderlyingRustTuple<'_> {
                fn from(value: pageLimitReturn) -> Self {
                    (value.limit,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pageLimitReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { limit: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for pageLimitCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = pageLimitReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<16>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "pageLimit()";
            const SELECTOR: [u8; 4] = [151u8, 134u8, 249u8, 110u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `pageRamp()` and selector `0x11c82ae8`.
```solidity
function pageRamp() external view returns (uint64 ramp);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pageRampCall {}
    ///Container type for the return parameters of the [`pageRamp()`](pageRampCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pageRampReturn {
        #[allow(missing_docs)]
        pub ramp: u64,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pageRampCall> for UnderlyingRustTuple<'_> {
                fn from(value: pageRampCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pageRampCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u64,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pageRampReturn> for UnderlyingRustTuple<'_> {
                fn from(value: pageRampReturn) -> Self {
                    (value.ramp,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pageRampReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { ramp: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for pageRampCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = pageRampReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "pageRamp()";
            const SELECTOR: [u8; 4] = [17u8, 200u8, 42u8, 232u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `programInitGas(address)` and selector `0x62b688aa`.
```solidity
function programInitGas(address program) external view returns (uint64 gas, uint64 gasWhenCached);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct programInitGasCall {
        #[allow(missing_docs)]
        pub program: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`programInitGas(address)`](programInitGasCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct programInitGasReturn {
        #[allow(missing_docs)]
        pub gas: u64,
        #[allow(missing_docs)]
        pub gasWhenCached: u64,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<programInitGasCall> for UnderlyingRustTuple<'_> {
                fn from(value: programInitGasCall) -> Self {
                    (value.program,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for programInitGasCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { program: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<64>,
                alloy::sol_types::sol_data::Uint<64>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u64, u64);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<programInitGasReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: programInitGasReturn) -> Self {
                    (value.gas, value.gasWhenCached)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for programInitGasReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        gas: tuple.0,
                        gasWhenCached: tuple.1,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for programInitGasCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = programInitGasReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Uint<64>,
                alloy::sol_types::sol_data::Uint<64>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "programInitGas(address)";
            const SELECTOR: [u8; 4] = [98u8, 182u8, 136u8, 170u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.program,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `programMemoryFootprint(address)` and selector `0xaef36be3`.
```solidity
function programMemoryFootprint(address program) external view returns (uint16 footprint);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct programMemoryFootprintCall {
        #[allow(missing_docs)]
        pub program: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`programMemoryFootprint(address)`](programMemoryFootprintCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct programMemoryFootprintReturn {
        #[allow(missing_docs)]
        pub footprint: u16,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<programMemoryFootprintCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: programMemoryFootprintCall) -> Self {
                    (value.program,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for programMemoryFootprintCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { program: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<16>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u16,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<programMemoryFootprintReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: programMemoryFootprintReturn) -> Self {
                    (value.footprint,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for programMemoryFootprintReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { footprint: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for programMemoryFootprintCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = programMemoryFootprintReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<16>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "programMemoryFootprint(address)";
            const SELECTOR: [u8; 4] = [174u8, 243u8, 107u8, 227u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.program,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `programTimeLeft(address)` and selector `0xc775a62a`.
```solidity
function programTimeLeft(address program) external view returns (uint64 _secs);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct programTimeLeftCall {
        #[allow(missing_docs)]
        pub program: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`programTimeLeft(address)`](programTimeLeftCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct programTimeLeftReturn {
        #[allow(missing_docs)]
        pub _secs: u64,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<programTimeLeftCall> for UnderlyingRustTuple<'_> {
                fn from(value: programTimeLeftCall) -> Self {
                    (value.program,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for programTimeLeftCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { program: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u64,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<programTimeLeftReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: programTimeLeftReturn) -> Self {
                    (value._secs,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for programTimeLeftReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _secs: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for programTimeLeftCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = programTimeLeftReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "programTimeLeft(address)";
            const SELECTOR: [u8; 4] = [199u8, 117u8, 166u8, 42u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.program,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `programVersion(address)` and selector `0xcc8f4e88`.
```solidity
function programVersion(address program) external view returns (uint16 version);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct programVersionCall {
        #[allow(missing_docs)]
        pub program: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`programVersion(address)`](programVersionCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct programVersionReturn {
        #[allow(missing_docs)]
        pub version: u16,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<programVersionCall> for UnderlyingRustTuple<'_> {
                fn from(value: programVersionCall) -> Self {
                    (value.program,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for programVersionCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { program: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<16>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u16,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<programVersionReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: programVersionReturn) -> Self {
                    (value.version,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for programVersionReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { version: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for programVersionCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = programVersionReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<16>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "programVersion(address)";
            const SELECTOR: [u8; 4] = [204u8, 143u8, 78u8, 136u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.program,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `stylusVersion()` and selector `0xa996e0c2`.
```solidity
function stylusVersion() external view returns (uint16 version);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct stylusVersionCall {}
    ///Container type for the return parameters of the [`stylusVersion()`](stylusVersionCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct stylusVersionReturn {
        #[allow(missing_docs)]
        pub version: u16,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<stylusVersionCall> for UnderlyingRustTuple<'_> {
                fn from(value: stylusVersionCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for stylusVersionCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<16>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u16,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<stylusVersionReturn> for UnderlyingRustTuple<'_> {
                fn from(value: stylusVersionReturn) -> Self {
                    (value.version,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for stylusVersionReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { version: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for stylusVersionCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = stylusVersionReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<16>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "stylusVersion()";
            const SELECTOR: [u8; 4] = [169u8, 150u8, 224u8, 194u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`ArbWasm`](self) function calls.
    pub enum ArbWasmCalls {
        #[allow(missing_docs)]
        activateProgram(activateProgramCall),
        #[allow(missing_docs)]
        blockCacheSize(blockCacheSizeCall),
        #[allow(missing_docs)]
        codehashAsmSize(codehashAsmSizeCall),
        #[allow(missing_docs)]
        codehashKeepalive(codehashKeepaliveCall),
        #[allow(missing_docs)]
        codehashVersion(codehashVersionCall),
        #[allow(missing_docs)]
        expiryDays(expiryDaysCall),
        #[allow(missing_docs)]
        freePages(freePagesCall),
        #[allow(missing_docs)]
        initCostScalar(initCostScalarCall),
        #[allow(missing_docs)]
        inkPrice(inkPriceCall),
        #[allow(missing_docs)]
        keepaliveDays(keepaliveDaysCall),
        #[allow(missing_docs)]
        maxStackDepth(maxStackDepthCall),
        #[allow(missing_docs)]
        minInitGas(minInitGasCall),
        #[allow(missing_docs)]
        pageGas(pageGasCall),
        #[allow(missing_docs)]
        pageLimit(pageLimitCall),
        #[allow(missing_docs)]
        pageRamp(pageRampCall),
        #[allow(missing_docs)]
        programInitGas(programInitGasCall),
        #[allow(missing_docs)]
        programMemoryFootprint(programMemoryFootprintCall),
        #[allow(missing_docs)]
        programTimeLeft(programTimeLeftCall),
        #[allow(missing_docs)]
        programVersion(programVersionCall),
        #[allow(missing_docs)]
        stylusVersion(stylusVersionCall),
    }
    #[automatically_derived]
    impl ArbWasmCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [10u8, 147u8, 100u8, 85u8],
            [17u8, 200u8, 42u8, 232u8],
            [48u8, 159u8, 101u8, 85u8],
            [64u8, 137u8, 38u8, 127u8],
            [68u8, 144u8, 193u8, 157u8],
            [88u8, 199u8, 128u8, 194u8],
            [95u8, 201u8, 76u8, 11u8],
            [98u8, 182u8, 136u8, 170u8],
            [122u8, 244u8, 186u8, 73u8],
            [122u8, 246u8, 232u8, 25u8],
            [140u8, 207u8, 170u8, 112u8],
            [151u8, 134u8, 249u8, 110u8],
            [153u8, 208u8, 179u8, 141u8],
            [169u8, 150u8, 224u8, 194u8],
            [174u8, 243u8, 107u8, 227u8],
            [198u8, 137u8, 186u8, 213u8],
            [199u8, 117u8, 166u8, 42u8],
            [204u8, 143u8, 78u8, 136u8],
            [209u8, 193u8, 122u8, 188u8],
            [215u8, 12u8, 12u8, 167u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ArbWasmCalls {
        const NAME: &'static str = "ArbWasmCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 20usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::activateProgram(_) => {
                    <activateProgramCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::blockCacheSize(_) => {
                    <blockCacheSizeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::codehashAsmSize(_) => {
                    <codehashAsmSizeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::codehashKeepalive(_) => {
                    <codehashKeepaliveCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::codehashVersion(_) => {
                    <codehashVersionCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::expiryDays(_) => {
                    <expiryDaysCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::freePages(_) => {
                    <freePagesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::initCostScalar(_) => {
                    <initCostScalarCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::inkPrice(_) => <inkPriceCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::keepaliveDays(_) => {
                    <keepaliveDaysCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::maxStackDepth(_) => {
                    <maxStackDepthCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::minInitGas(_) => {
                    <minInitGasCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::pageGas(_) => <pageGasCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::pageLimit(_) => {
                    <pageLimitCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::pageRamp(_) => <pageRampCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::programInitGas(_) => {
                    <programInitGasCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::programMemoryFootprint(_) => {
                    <programMemoryFootprintCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::programTimeLeft(_) => {
                    <programTimeLeftCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::programVersion(_) => {
                    <programVersionCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::stylusVersion(_) => {
                    <stylusVersionCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<ArbWasmCalls>] = &[
                {
                    fn keepaliveDays(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbWasmCalls> {
                        <keepaliveDaysCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbWasmCalls::keepaliveDays)
                    }
                    keepaliveDays
                },
                {
                    fn pageRamp(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbWasmCalls> {
                        <pageRampCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbWasmCalls::pageRamp)
                    }
                    pageRamp
                },
                {
                    fn expiryDays(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbWasmCalls> {
                        <expiryDaysCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbWasmCalls::expiryDays)
                    }
                    expiryDays
                },
                {
                    fn codehashAsmSize(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbWasmCalls> {
                        <codehashAsmSizeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbWasmCalls::codehashAsmSize)
                    }
                    codehashAsmSize
                },
                {
                    fn freePages(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbWasmCalls> {
                        <freePagesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbWasmCalls::freePages)
                    }
                    freePages
                },
                {
                    fn activateProgram(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbWasmCalls> {
                        <activateProgramCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbWasmCalls::activateProgram)
                    }
                    activateProgram
                },
                {
                    fn initCostScalar(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbWasmCalls> {
                        <initCostScalarCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbWasmCalls::initCostScalar)
                    }
                    initCostScalar
                },
                {
                    fn programInitGas(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbWasmCalls> {
                        <programInitGasCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbWasmCalls::programInitGas)
                    }
                    programInitGas
                },
                {
                    fn pageGas(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbWasmCalls> {
                        <pageGasCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbWasmCalls::pageGas)
                    }
                    pageGas
                },
                {
                    fn blockCacheSize(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbWasmCalls> {
                        <blockCacheSizeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbWasmCalls::blockCacheSize)
                    }
                    blockCacheSize
                },
                {
                    fn maxStackDepth(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbWasmCalls> {
                        <maxStackDepthCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbWasmCalls::maxStackDepth)
                    }
                    maxStackDepth
                },
                {
                    fn pageLimit(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbWasmCalls> {
                        <pageLimitCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbWasmCalls::pageLimit)
                    }
                    pageLimit
                },
                {
                    fn minInitGas(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbWasmCalls> {
                        <minInitGasCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbWasmCalls::minInitGas)
                    }
                    minInitGas
                },
                {
                    fn stylusVersion(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbWasmCalls> {
                        <stylusVersionCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbWasmCalls::stylusVersion)
                    }
                    stylusVersion
                },
                {
                    fn programMemoryFootprint(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbWasmCalls> {
                        <programMemoryFootprintCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbWasmCalls::programMemoryFootprint)
                    }
                    programMemoryFootprint
                },
                {
                    fn codehashKeepalive(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbWasmCalls> {
                        <codehashKeepaliveCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbWasmCalls::codehashKeepalive)
                    }
                    codehashKeepalive
                },
                {
                    fn programTimeLeft(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbWasmCalls> {
                        <programTimeLeftCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbWasmCalls::programTimeLeft)
                    }
                    programTimeLeft
                },
                {
                    fn programVersion(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbWasmCalls> {
                        <programVersionCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbWasmCalls::programVersion)
                    }
                    programVersion
                },
                {
                    fn inkPrice(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbWasmCalls> {
                        <inkPriceCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbWasmCalls::inkPrice)
                    }
                    inkPrice
                },
                {
                    fn codehashVersion(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbWasmCalls> {
                        <codehashVersionCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbWasmCalls::codehashVersion)
                    }
                    codehashVersion
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::activateProgram(inner) => {
                    <activateProgramCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::blockCacheSize(inner) => {
                    <blockCacheSizeCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::codehashAsmSize(inner) => {
                    <codehashAsmSizeCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::codehashKeepalive(inner) => {
                    <codehashKeepaliveCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::codehashVersion(inner) => {
                    <codehashVersionCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::expiryDays(inner) => {
                    <expiryDaysCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::freePages(inner) => {
                    <freePagesCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::initCostScalar(inner) => {
                    <initCostScalarCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::inkPrice(inner) => {
                    <inkPriceCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::keepaliveDays(inner) => {
                    <keepaliveDaysCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::maxStackDepth(inner) => {
                    <maxStackDepthCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::minInitGas(inner) => {
                    <minInitGasCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::pageGas(inner) => {
                    <pageGasCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::pageLimit(inner) => {
                    <pageLimitCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::pageRamp(inner) => {
                    <pageRampCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::programInitGas(inner) => {
                    <programInitGasCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::programMemoryFootprint(inner) => {
                    <programMemoryFootprintCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::programTimeLeft(inner) => {
                    <programTimeLeftCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::programVersion(inner) => {
                    <programVersionCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::stylusVersion(inner) => {
                    <stylusVersionCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::activateProgram(inner) => {
                    <activateProgramCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::blockCacheSize(inner) => {
                    <blockCacheSizeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::codehashAsmSize(inner) => {
                    <codehashAsmSizeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::codehashKeepalive(inner) => {
                    <codehashKeepaliveCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::codehashVersion(inner) => {
                    <codehashVersionCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::expiryDays(inner) => {
                    <expiryDaysCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::freePages(inner) => {
                    <freePagesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::initCostScalar(inner) => {
                    <initCostScalarCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::inkPrice(inner) => {
                    <inkPriceCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::keepaliveDays(inner) => {
                    <keepaliveDaysCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::maxStackDepth(inner) => {
                    <maxStackDepthCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::minInitGas(inner) => {
                    <minInitGasCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::pageGas(inner) => {
                    <pageGasCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::pageLimit(inner) => {
                    <pageLimitCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::pageRamp(inner) => {
                    <pageRampCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::programInitGas(inner) => {
                    <programInitGasCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::programMemoryFootprint(inner) => {
                    <programMemoryFootprintCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::programTimeLeft(inner) => {
                    <programTimeLeftCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::programVersion(inner) => {
                    <programVersionCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::stylusVersion(inner) => {
                    <stylusVersionCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`ArbWasm`](self) custom errors.
    pub enum ArbWasmErrors {
        #[allow(missing_docs)]
        ProgramExpired(ProgramExpired),
        #[allow(missing_docs)]
        ProgramInsufficientValue(ProgramInsufficientValue),
        #[allow(missing_docs)]
        ProgramKeepaliveTooSoon(ProgramKeepaliveTooSoon),
        #[allow(missing_docs)]
        ProgramNeedsUpgrade(ProgramNeedsUpgrade),
        #[allow(missing_docs)]
        ProgramNotActivated(ProgramNotActivated),
        #[allow(missing_docs)]
        ProgramNotWasm(ProgramNotWasm),
        #[allow(missing_docs)]
        ProgramUpToDate(ProgramUpToDate),
    }
    #[automatically_derived]
    impl ArbWasmErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [9u8, 120u8, 26u8, 183u8],
            [22u8, 189u8, 12u8, 248u8],
            [39u8, 243u8, 130u8, 18u8],
            [99u8, 125u8, 150u8, 143u8],
            [111u8, 128u8, 156u8, 78u8],
            [201u8, 177u8, 46u8, 82u8],
            [204u8, 148u8, 75u8, 242u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ArbWasmErrors {
        const NAME: &'static str = "ArbWasmErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 7usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::ProgramExpired(_) => {
                    <ProgramExpired as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ProgramInsufficientValue(_) => {
                    <ProgramInsufficientValue as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ProgramKeepaliveTooSoon(_) => {
                    <ProgramKeepaliveTooSoon as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ProgramNeedsUpgrade(_) => {
                    <ProgramNeedsUpgrade as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ProgramNotActivated(_) => {
                    <ProgramNotActivated as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ProgramNotWasm(_) => {
                    <ProgramNotWasm as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ProgramUpToDate(_) => {
                    <ProgramUpToDate as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<ArbWasmErrors>] = &[
                {
                    fn ProgramInsufficientValue(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbWasmErrors> {
                        <ProgramInsufficientValue as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbWasmErrors::ProgramInsufficientValue)
                    }
                    ProgramInsufficientValue
                },
                {
                    fn ProgramKeepaliveTooSoon(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbWasmErrors> {
                        <ProgramKeepaliveTooSoon as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbWasmErrors::ProgramKeepaliveTooSoon)
                    }
                    ProgramKeepaliveTooSoon
                },
                {
                    fn ProgramNotWasm(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbWasmErrors> {
                        <ProgramNotWasm as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbWasmErrors::ProgramNotWasm)
                    }
                    ProgramNotWasm
                },
                {
                    fn ProgramNeedsUpgrade(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbWasmErrors> {
                        <ProgramNeedsUpgrade as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbWasmErrors::ProgramNeedsUpgrade)
                    }
                    ProgramNeedsUpgrade
                },
                {
                    fn ProgramNotActivated(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbWasmErrors> {
                        <ProgramNotActivated as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbWasmErrors::ProgramNotActivated)
                    }
                    ProgramNotActivated
                },
                {
                    fn ProgramExpired(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbWasmErrors> {
                        <ProgramExpired as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbWasmErrors::ProgramExpired)
                    }
                    ProgramExpired
                },
                {
                    fn ProgramUpToDate(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ArbWasmErrors> {
                        <ProgramUpToDate as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ArbWasmErrors::ProgramUpToDate)
                    }
                    ProgramUpToDate
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::ProgramExpired(inner) => {
                    <ProgramExpired as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ProgramInsufficientValue(inner) => {
                    <ProgramInsufficientValue as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ProgramKeepaliveTooSoon(inner) => {
                    <ProgramKeepaliveTooSoon as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ProgramNeedsUpgrade(inner) => {
                    <ProgramNeedsUpgrade as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ProgramNotActivated(inner) => {
                    <ProgramNotActivated as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ProgramNotWasm(inner) => {
                    <ProgramNotWasm as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ProgramUpToDate(inner) => {
                    <ProgramUpToDate as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::ProgramExpired(inner) => {
                    <ProgramExpired as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ProgramInsufficientValue(inner) => {
                    <ProgramInsufficientValue as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ProgramKeepaliveTooSoon(inner) => {
                    <ProgramKeepaliveTooSoon as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ProgramNeedsUpgrade(inner) => {
                    <ProgramNeedsUpgrade as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ProgramNotActivated(inner) => {
                    <ProgramNotActivated as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ProgramNotWasm(inner) => {
                    <ProgramNotWasm as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ProgramUpToDate(inner) => {
                    <ProgramUpToDate as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`ArbWasm`](self) events.
    pub enum ArbWasmEvents {
        #[allow(missing_docs)]
        ProgramActivated(ProgramActivated),
        #[allow(missing_docs)]
        ProgramLifetimeExtended(ProgramLifetimeExtended),
    }
    #[automatically_derived]
    impl ArbWasmEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                3u8,
                128u8,
                43u8,
                163u8,
                46u8,
                59u8,
                212u8,
                137u8,
                210u8,
                171u8,
                4u8,
                171u8,
                185u8,
                61u8,
                16u8,
                104u8,
                126u8,
                11u8,
                104u8,
                131u8,
                188u8,
                176u8,
                145u8,
                32u8,
                108u8,
                167u8,
                81u8,
                114u8,
                210u8,
                72u8,
                242u8,
                236u8,
            ],
            [
                192u8,
                232u8,
                18u8,
                120u8,
                7u8,
                7u8,
                18u8,
                141u8,
                154u8,
                24u8,
                13u8,
                184u8,
                238u8,
                77u8,
                28u8,
                31u8,
                19u8,
                0u8,
                182u8,
                221u8,
                6u8,
                38u8,
                213u8,
                119u8,
                181u8,
                217u8,
                172u8,
                117u8,
                155u8,
                118u8,
                37u8,
                60u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for ArbWasmEvents {
        const NAME: &'static str = "ArbWasmEvents";
        const COUNT: usize = 2usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<ProgramActivated as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <ProgramActivated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::ProgramActivated)
                }
                Some(
                    <ProgramLifetimeExtended as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <ProgramLifetimeExtended as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::ProgramLifetimeExtended)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for ArbWasmEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::ProgramActivated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::ProgramLifetimeExtended(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::ProgramActivated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::ProgramLifetimeExtended(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`ArbWasm`](self) contract instance.

See the [wrapper's documentation](`ArbWasmInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> ArbWasmInstance<T, P, N> {
        ArbWasmInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<ArbWasmInstance<T, P, N>>,
    > {
        ArbWasmInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        ArbWasmInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`ArbWasm`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`ArbWasm`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct ArbWasmInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for ArbWasmInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("ArbWasmInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ArbWasmInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`ArbWasm`](self) contract instance.

See the [wrapper's documentation](`ArbWasmInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<ArbWasmInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> ArbWasmInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> ArbWasmInstance<T, P, N> {
            ArbWasmInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ArbWasmInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`activateProgram`] function.
        pub fn activateProgram(
            &self,
            program: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, activateProgramCall, N> {
            self.call_builder(&activateProgramCall { program })
        }
        ///Creates a new call builder for the [`blockCacheSize`] function.
        pub fn blockCacheSize(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, blockCacheSizeCall, N> {
            self.call_builder(&blockCacheSizeCall {})
        }
        ///Creates a new call builder for the [`codehashAsmSize`] function.
        pub fn codehashAsmSize(
            &self,
            codehash: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, codehashAsmSizeCall, N> {
            self.call_builder(&codehashAsmSizeCall { codehash })
        }
        ///Creates a new call builder for the [`codehashKeepalive`] function.
        pub fn codehashKeepalive(
            &self,
            codehash: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, codehashKeepaliveCall, N> {
            self.call_builder(&codehashKeepaliveCall { codehash })
        }
        ///Creates a new call builder for the [`codehashVersion`] function.
        pub fn codehashVersion(
            &self,
            codehash: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, codehashVersionCall, N> {
            self.call_builder(&codehashVersionCall { codehash })
        }
        ///Creates a new call builder for the [`expiryDays`] function.
        pub fn expiryDays(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, expiryDaysCall, N> {
            self.call_builder(&expiryDaysCall {})
        }
        ///Creates a new call builder for the [`freePages`] function.
        pub fn freePages(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, freePagesCall, N> {
            self.call_builder(&freePagesCall {})
        }
        ///Creates a new call builder for the [`initCostScalar`] function.
        pub fn initCostScalar(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, initCostScalarCall, N> {
            self.call_builder(&initCostScalarCall {})
        }
        ///Creates a new call builder for the [`inkPrice`] function.
        pub fn inkPrice(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, inkPriceCall, N> {
            self.call_builder(&inkPriceCall {})
        }
        ///Creates a new call builder for the [`keepaliveDays`] function.
        pub fn keepaliveDays(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, keepaliveDaysCall, N> {
            self.call_builder(&keepaliveDaysCall {})
        }
        ///Creates a new call builder for the [`maxStackDepth`] function.
        pub fn maxStackDepth(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, maxStackDepthCall, N> {
            self.call_builder(&maxStackDepthCall {})
        }
        ///Creates a new call builder for the [`minInitGas`] function.
        pub fn minInitGas(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, minInitGasCall, N> {
            self.call_builder(&minInitGasCall {})
        }
        ///Creates a new call builder for the [`pageGas`] function.
        pub fn pageGas(&self) -> alloy_contract::SolCallBuilder<T, &P, pageGasCall, N> {
            self.call_builder(&pageGasCall {})
        }
        ///Creates a new call builder for the [`pageLimit`] function.
        pub fn pageLimit(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, pageLimitCall, N> {
            self.call_builder(&pageLimitCall {})
        }
        ///Creates a new call builder for the [`pageRamp`] function.
        pub fn pageRamp(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, pageRampCall, N> {
            self.call_builder(&pageRampCall {})
        }
        ///Creates a new call builder for the [`programInitGas`] function.
        pub fn programInitGas(
            &self,
            program: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, programInitGasCall, N> {
            self.call_builder(&programInitGasCall { program })
        }
        ///Creates a new call builder for the [`programMemoryFootprint`] function.
        pub fn programMemoryFootprint(
            &self,
            program: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, programMemoryFootprintCall, N> {
            self.call_builder(
                &programMemoryFootprintCall {
                    program,
                },
            )
        }
        ///Creates a new call builder for the [`programTimeLeft`] function.
        pub fn programTimeLeft(
            &self,
            program: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, programTimeLeftCall, N> {
            self.call_builder(&programTimeLeftCall { program })
        }
        ///Creates a new call builder for the [`programVersion`] function.
        pub fn programVersion(
            &self,
            program: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, programVersionCall, N> {
            self.call_builder(&programVersionCall { program })
        }
        ///Creates a new call builder for the [`stylusVersion`] function.
        pub fn stylusVersion(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, stylusVersionCall, N> {
            self.call_builder(&stylusVersionCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ArbWasmInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`ProgramActivated`] event.
        pub fn ProgramActivated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, ProgramActivated, N> {
            self.event_filter::<ProgramActivated>()
        }
        ///Creates a new event filter for the [`ProgramLifetimeExtended`] event.
        pub fn ProgramLifetimeExtended_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, ProgramLifetimeExtended, N> {
            self.event_filter::<ProgramLifetimeExtended>()
        }
    }
}
