/**

Generated by the following Solidity interface...
```solidity
interface AssertionStakingPoolCreator {
    error PoolDoesntExist();

    event NewAssertionPoolCreated(address indexed rollup, bytes32 indexed _assertionHash, address assertionPool);

    function createPool(address _rollup, bytes32 _assertionHash) external returns (address);
    function getPool(address _rollup, bytes32 _assertionHash) external view returns (address);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "createPool",
    "inputs": [
      {
        "name": "_rollup",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_assertionHash",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract IAssertionStakingPool"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "getPool",
    "inputs": [
      {
        "name": "_rollup",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_assertionHash",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract IAssertionStakingPool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "event",
    "name": "NewAssertionPoolCreated",
    "inputs": [
      {
        "name": "rollup",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "_assertionHash",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "assertionPool",
        "type": "address",
        "indexed": false,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "PoolDoesntExist",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod AssertionStakingPoolCreator {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052348015600e575f80fd5b506111f48061001c5f395ff3fe608060405234801561000f575f80fd5b5060043610610034575f3560e01c80639b505aa114610038578063dc082ad314610074575b5f80fd5b61004b6100463660046102aa565b610087565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b61004b6100823660046102aa565b610135565b5f805f801b848460405161009a9061029d565b73ffffffffffffffffffffffffffffffffffffffff909216825260208201526040018190604051809103905ff59050801580156100d9573d5f803e3d5ffd5b5060405173ffffffffffffffffffffffffffffffffffffffff808316825291925084918616907fd628317c6ebae87acc5dbfadeb835cb97692cc6935ea72bf37461e14a0bbee1e9060200160405180910390a390505b92915050565b5f610196604051806020016101499061029d565b601f1982820381018352601f90910116604081815273ffffffffffffffffffffffffffffffffffffffff87166020830152810185905260600160405160208183030381529060405261019d565b9392505050565b5f8083836040516020016101b2929190610303565b60408051808303601f1901815282825280516020918201207fff00000000000000000000000000000000000000000000000000000000000000828501523060601b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660218501525f60358501526055808501829052835180860390910181526075909401909252825192019190912090915073ffffffffffffffffffffffffffffffffffffffff81163b1561026b57915061012f9050565b6040517f215db33100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610e9f8061032083390190565b5f80604083850312156102bb575f80fd5b823573ffffffffffffffffffffffffffffffffffffffff811681146102de575f80fd5b946020939093013593505050565b5f81518060208401855e5f93019283525090919050565b5f61031761031183866102ec565b846102ec565b94935050505056fe60e060405234801561000f575f80fd5b50604051610e9f380380610e9f83398101604081905261002e916100e9565b816001600160a01b03166351ed6a306040518163ffffffff1660e01b8152600401602060405180830381865afa15801561006a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061008e9190610113565b6001600160a01b0316608052806100b857604051630b12999960e11b815260040160405180910390fd5b6001600160a01b0390911660a05260c052610133565b80516001600160a01b03811681146100e4575f80fd5b919050565b5f80604083850312156100fa575f80fd5b610103836100ce565b9150602083015190509250929050565b5f60208284031215610123575f80fd5b61012c826100ce565b9392505050565b60805160a05160c051610d0b6101945f395f818160cd01526104b101525f81816101c00152818161042b015281816104800152818161050e015261057e01525f8181610124015281816102b50152818161039701526104090152610d0b5ff3fe608060405234801561000f575f80fd5b50600436106100c4575f3560e01c80637476083b1161007d5780639451944d116100585780639451944d14610194578063956501bb1461019c578063cb23bcb5146101bb575f80fd5b80637476083b146101665780638391597114610179578063930412af1461018c575f80fd5b806330fc43ed116100ad57806330fc43ed1461010c57806351ed6a301461011f5780636b74d5151461015e575f80fd5b80632113ed21146100c857806326c0e5c514610102575b5f80fd5b6100ef7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b61010a6101e2565b005b61010a61011a366004610a59565b6101fc565b6101467f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100f9565b61010a61031d565b61010a610174366004610a59565b61032d565b61010a610187366004610a70565b6103f7565b61010a61050c565b61010a61057c565b6100ef6101aa366004610aa2565b5f6020819052908152604090205481565b6101467f000000000000000000000000000000000000000000000000000000000000000081565b335f908152602081905260409020546101fa906101fc565b565b805f03610235576040517f1f2a200500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b335f9081526020819052604090205480821115610293576040517fa47b7c6500000000000000000000000000000000000000000000000000000000815233600482015260248101839052604481018290526064015b60405180910390fd5b61029d8282610ae8565b335f818152602081905260409020919091556102e4907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169084610600565b60405182815233907f8108595eb6bad3acefa9da467d90cc2217686d5c5ac85460f8b7849c840645fc9060200160405180910390a25050565b61032561050c565b6101fa61057c565b805f03610366576040517f1f2a200500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b335f9081526020819052604081208054839290610384908490610b01565b909155506103bf90506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163330846106ae565b60405181815233907f0a7bb2e28cc4698aac06db79cf9163bfcc20719286cf59fa7d492ceda1b8edc29060200160405180910390a250565b60608101356104506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000836106ff565b6040517f50f32f680000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906350f32f68906104db90849086907f0000000000000000000000000000000000000000000000000000000000000000903090600401610b8f565b5f604051808303815f87803b1580156104f2575f80fd5b505af1158015610504573d5f803e3d5ffd5b505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166357ef4ab96040518163ffffffff1660e01b81526004015f604051808303815f87803b158015610564575f80fd5b505af1158015610576573d5f803e3d5ffd5b50505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663613739196040518163ffffffff1660e01b81526004016020604051808303815f875af11580156105d9573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105fd9190610c54565b50565b6040516001600160a01b0383166024820152604481018290526106a99084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526107e0565b505050565b6040516001600160a01b03808516602483015283166044820152606481018290526105769085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401610645565b6040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0383811660248301525f91839186169063dd62ed3e90604401602060405180830381865afa158015610766573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061078a9190610c54565b6107949190610b01565b6040516001600160a01b0385166024820152604481018290529091506105769085907f095ea7b30000000000000000000000000000000000000000000000000000000090606401610645565b5f610834826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166108c49092919063ffffffff16565b8051909150156106a957808060200190518101906108529190610c6b565b6106a95760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161028a565b60606108d284845f856108dc565b90505b9392505050565b6060824710156109545760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161028a565b6001600160a01b0385163b6109ab5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161028a565b5f80866001600160a01b031685876040516109c69190610c8a565b5f6040518083038185875af1925050503d805f8114610a00576040519150601f19603f3d011682016040523d82523d5f602084013e610a05565b606091505b5091509150610a15828286610a20565b979650505050505050565b60608315610a2f5750816108d5565b825115610a3f5782518084602001fd5b8160405162461bcd60e51b815260040161028a9190610ca0565b5f60208284031215610a69575f80fd5b5035919050565b5f6102608284031215610a81575f80fd5b50919050565b80356001600160a01b0381168114610a9d575f80fd5b919050565b5f60208284031215610ab2575f80fd5b6108d582610a87565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b81810381811115610afb57610afb610abb565b92915050565b80820180821115610afb57610afb610abb565b803567ffffffffffffffff81168114610a9d575f80fd5b604081833760408201604082015f5b6002811015610b6b5767ffffffffffffffff610b5583610b14565b1683526020928301929190910190600101610b3a565b505050608081013560038110610b7f575f80fd5b608083015260a090810135910152565b5f6102c082019050858252843560208301526020850135604083015260408501356060830152606085013560808301526001600160a01b03610bd360808701610a87565b1660a0830152610be560a08601610b14565b67ffffffffffffffff80821660c085015280610c0360c08901610b14565b1660e08501525050610c1c610100830160e08701610b2b565b610c2e6101c083016101a08701610b2b565b83610280830152610c4b6102a08301846001600160a01b03169052565b95945050505050565b5f60208284031215610c64575f80fd5b5051919050565b5f60208284031215610c7b575f80fd5b815180151581146108d5575f80fd5b5f82518060208501845e5f920191825250919050565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f8301168401019150509291505056fea26469706673582212206a2bdeff99887e86d007f16606ca0e31d1bd76b4d3f41077331792c22133e6d164736f6c63430008190033a26469706673582212201f593ec30c0df41175e02849fd084f12dcbfb16d3a0cf5e2d1d38ad8b409b6d864736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15`\x0EW_\x80\xFD[Pa\x11\xF4\x80a\0\x1C_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\x004W_5`\xE0\x1C\x80c\x9BPZ\xA1\x14a\08W\x80c\xDC\x08*\xD3\x14a\0tW[_\x80\xFD[a\0Ka\0F6`\x04a\x02\xAAV[a\0\x87V[`@Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16\x81R` \x01`@Q\x80\x91\x03\x90\xF3[a\0Ka\0\x826`\x04a\x02\xAAV[a\x015V[_\x80_\x80\x1B\x84\x84`@Qa\0\x9A\x90a\x02\x9DV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x92\x16\x82R` \x82\x01R`@\x01\x81\x90`@Q\x80\x91\x03\x90_\xF5\x90P\x80\x15\x80\x15a\0\xD9W=_\x80>=_\xFD[P`@Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x83\x16\x82R\x91\x92P\x84\x91\x86\x16\x90\x7F\xD6(1|n\xBA\xE8z\xCC]\xBF\xAD\xEB\x83\\\xB9v\x92\xCCi5\xEAr\xBF7F\x1E\x14\xA0\xBB\xEE\x1E\x90` \x01`@Q\x80\x91\x03\x90\xA3\x90P[\x92\x91PPV[_a\x01\x96`@Q\x80` \x01a\x01I\x90a\x02\x9DV[`\x1F\x19\x82\x82\x03\x81\x01\x83R`\x1F\x90\x91\x01\x16`@\x81\x81Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x87\x16` \x83\x01R\x81\x01\x85\x90R``\x01`@Q` \x81\x83\x03\x03\x81R\x90`@Ra\x01\x9DV[\x93\x92PPPV[_\x80\x83\x83`@Q` \x01a\x01\xB2\x92\x91\x90a\x03\x03V[`@\x80Q\x80\x83\x03`\x1F\x19\x01\x81R\x82\x82R\x80Q` \x91\x82\x01 \x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82\x85\x01R0``\x1B\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\x16`!\x85\x01R_`5\x85\x01R`U\x80\x85\x01\x82\x90R\x83Q\x80\x86\x03\x90\x91\x01\x81R`u\x90\x94\x01\x90\x92R\x82Q\x92\x01\x91\x90\x91 \x90\x91Ps\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16;\x15a\x02kW\x91Pa\x01/\x90PV[`@Q\x7F!]\xB31\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a\x0E\x9F\x80a\x03 \x839\x01\x90V[_\x80`@\x83\x85\x03\x12\x15a\x02\xBBW_\x80\xFD[\x825s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x02\xDEW_\x80\xFD[\x94` \x93\x90\x93\x015\x93PPPV[_\x81Q\x80` \x84\x01\x85^_\x93\x01\x92\x83RP\x90\x91\x90PV[_a\x03\x17a\x03\x11\x83\x86a\x02\xECV[\x84a\x02\xECV[\x94\x93PPPPV\xFE`\xE0`@R4\x80\x15a\0\x0FW_\x80\xFD[P`@Qa\x0E\x9F8\x03\x80a\x0E\x9F\x839\x81\x01`@\x81\x90Ra\0.\x91a\0\xE9V[\x81`\x01`\x01`\xA0\x1B\x03\x16cQ\xEDj0`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\0jW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\0\x8E\x91\x90a\x01\x13V[`\x01`\x01`\xA0\x1B\x03\x16`\x80R\x80a\0\xB8W`@Qc\x0B\x12\x99\x99`\xE1\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x01`\x01`\xA0\x1B\x03\x90\x91\x16`\xA0R`\xC0Ra\x013V[\x80Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\0\xE4W_\x80\xFD[\x91\x90PV[_\x80`@\x83\x85\x03\x12\x15a\0\xFAW_\x80\xFD[a\x01\x03\x83a\0\xCEV[\x91P` \x83\x01Q\x90P\x92P\x92\x90PV[_` \x82\x84\x03\x12\x15a\x01#W_\x80\xFD[a\x01,\x82a\0\xCEV[\x93\x92PPPV[`\x80Q`\xA0Q`\xC0Qa\r\x0Ba\x01\x94_9_\x81\x81`\xCD\x01Ra\x04\xB1\x01R_\x81\x81a\x01\xC0\x01R\x81\x81a\x04+\x01R\x81\x81a\x04\x80\x01R\x81\x81a\x05\x0E\x01Ra\x05~\x01R_\x81\x81a\x01$\x01R\x81\x81a\x02\xB5\x01R\x81\x81a\x03\x97\x01Ra\x04\t\x01Ra\r\x0B_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\0\xC4W_5`\xE0\x1C\x80ctv\x08;\x11a\0}W\x80c\x94Q\x94M\x11a\0XW\x80c\x94Q\x94M\x14a\x01\x94W\x80c\x95e\x01\xBB\x14a\x01\x9CW\x80c\xCB#\xBC\xB5\x14a\x01\xBBW_\x80\xFD[\x80ctv\x08;\x14a\x01fW\x80c\x83\x91Yq\x14a\x01yW\x80c\x93\x04\x12\xAF\x14a\x01\x8CW_\x80\xFD[\x80c0\xFCC\xED\x11a\0\xADW\x80c0\xFCC\xED\x14a\x01\x0CW\x80cQ\xEDj0\x14a\x01\x1FW\x80ckt\xD5\x15\x14a\x01^W_\x80\xFD[\x80c!\x13\xED!\x14a\0\xC8W\x80c&\xC0\xE5\xC5\x14a\x01\x02W[_\x80\xFD[a\0\xEF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81V[`@Q\x90\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\x01\na\x01\xE2V[\0[a\x01\na\x01\x1A6`\x04a\nYV[a\x01\xFCV[a\x01F\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01a\0\xF9V[a\x01\na\x03\x1DV[a\x01\na\x01t6`\x04a\nYV[a\x03-V[a\x01\na\x01\x876`\x04a\npV[a\x03\xF7V[a\x01\na\x05\x0CV[a\x01\na\x05|V[a\0\xEFa\x01\xAA6`\x04a\n\xA2V[_` \x81\x90R\x90\x81R`@\x90 T\x81V[a\x01F\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81V[3_\x90\x81R` \x81\x90R`@\x90 Ta\x01\xFA\x90a\x01\xFCV[V[\x80_\x03a\x025W`@Q\x7F\x1F* \x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[3_\x90\x81R` \x81\x90R`@\x90 T\x80\x82\x11\x15a\x02\x93W`@Q\x7F\xA4{|e\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R3`\x04\x82\x01R`$\x81\x01\x83\x90R`D\x81\x01\x82\x90R`d\x01[`@Q\x80\x91\x03\x90\xFD[a\x02\x9D\x82\x82a\n\xE8V[3_\x81\x81R` \x81\x90R`@\x90 \x91\x90\x91Ua\x02\xE4\x90\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x01`\x01`\xA0\x1B\x03\x16\x90\x84a\x06\0V[`@Q\x82\x81R3\x90\x7F\x81\x08Y^\xB6\xBA\xD3\xAC\xEF\xA9\xDAF}\x90\xCC\"\x17hm\\Z\xC8T`\xF8\xB7\x84\x9C\x84\x06E\xFC\x90` \x01`@Q\x80\x91\x03\x90\xA2PPV[a\x03%a\x05\x0CV[a\x01\xFAa\x05|V[\x80_\x03a\x03fW`@Q\x7F\x1F* \x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[3_\x90\x81R` \x81\x90R`@\x81 \x80T\x83\x92\x90a\x03\x84\x90\x84\x90a\x0B\x01V[\x90\x91UPa\x03\xBF\x90P`\x01`\x01`\xA0\x1B\x03\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1630\x84a\x06\xAEV[`@Q\x81\x81R3\x90\x7F\n{\xB2\xE2\x8C\xC4i\x8A\xAC\x06\xDBy\xCF\x91c\xBF\xCC q\x92\x86\xCFY\xFA}I,\xED\xA1\xB8\xED\xC2\x90` \x01`@Q\x80\x91\x03\x90\xA2PV[``\x81\x015a\x04P`\x01`\x01`\xA0\x1B\x03\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83a\x06\xFFV[`@Q\x7FP\xF3/h\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x01`\x01`\xA0\x1B\x03\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x90cP\xF3/h\x90a\x04\xDB\x90\x84\x90\x86\x90\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x900\x90`\x04\x01a\x0B\x8FV[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x04\xF2W_\x80\xFD[PZ\xF1\x15\x80\x15a\x05\x04W=_\x80>=_\xFD[PPPPPPV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x01`\x01`\xA0\x1B\x03\x16cW\xEFJ\xB9`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x05dW_\x80\xFD[PZ\xF1\x15\x80\x15a\x05vW=_\x80>=_\xFD[PPPPV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x01`\x01`\xA0\x1B\x03\x16ca79\x19`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x05\xD9W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x05\xFD\x91\x90a\x0CTV[PV[`@Q`\x01`\x01`\xA0\x1B\x03\x83\x16`$\x82\x01R`D\x81\x01\x82\x90Ra\x06\xA9\x90\x84\x90\x7F\xA9\x05\x9C\xBB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90`d\x01[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x93\x16\x92\x90\x92\x17\x90\x91Ra\x07\xE0V[PPPV[`@Q`\x01`\x01`\xA0\x1B\x03\x80\x85\x16`$\x83\x01R\x83\x16`D\x82\x01R`d\x81\x01\x82\x90Ra\x05v\x90\x85\x90\x7F#\xB8r\xDD\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90`\x84\x01a\x06EV[`@Q\x7F\xDDb\xED>\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R0`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x83\x81\x16`$\x83\x01R_\x91\x83\x91\x86\x16\x90c\xDDb\xED>\x90`D\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x07fW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x07\x8A\x91\x90a\x0CTV[a\x07\x94\x91\x90a\x0B\x01V[`@Q`\x01`\x01`\xA0\x1B\x03\x85\x16`$\x82\x01R`D\x81\x01\x82\x90R\x90\x91Pa\x05v\x90\x85\x90\x7F\t^\xA7\xB3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90`d\x01a\x06EV[_a\x084\x82`@Q\x80`@\x01`@R\x80` \x81R` \x01\x7FSafeERC20: low-level call failed\x81RP\x85`\x01`\x01`\xA0\x1B\x03\x16a\x08\xC4\x90\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[\x80Q\x90\x91P\x15a\x06\xA9W\x80\x80` \x01\x90Q\x81\x01\x90a\x08R\x91\x90a\x0CkV[a\x06\xA9W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`*`$\x82\x01R\x7FSafeERC20: ERC20 operation did n`D\x82\x01R\x7Fot succeed\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x02\x8AV[``a\x08\xD2\x84\x84_\x85a\x08\xDCV[\x90P[\x93\x92PPPV[``\x82G\x10\x15a\tTW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FAddress: insufficient balance fo`D\x82\x01R\x7Fr call\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x02\x8AV[`\x01`\x01`\xA0\x1B\x03\x85\x16;a\t\xABW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1D`$\x82\x01R\x7FAddress: call to non-contract\0\0\0`D\x82\x01R`d\x01a\x02\x8AV[_\x80\x86`\x01`\x01`\xA0\x1B\x03\x16\x85\x87`@Qa\t\xC6\x91\x90a\x0C\x8AV[_`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80_\x81\x14a\n\0W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\n\x05V[``\x91P[P\x91P\x91Pa\n\x15\x82\x82\x86a\n V[\x97\x96PPPPPPPV[``\x83\x15a\n/WP\x81a\x08\xD5V[\x82Q\x15a\n?W\x82Q\x80\x84` \x01\xFD[\x81`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x02\x8A\x91\x90a\x0C\xA0V[_` \x82\x84\x03\x12\x15a\niW_\x80\xFD[P5\x91\x90PV[_a\x02`\x82\x84\x03\x12\x15a\n\x81W_\x80\xFD[P\x91\x90PV[\x805`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\n\x9DW_\x80\xFD[\x91\x90PV[_` \x82\x84\x03\x12\x15a\n\xB2W_\x80\xFD[a\x08\xD5\x82a\n\x87V[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[\x81\x81\x03\x81\x81\x11\x15a\n\xFBWa\n\xFBa\n\xBBV[\x92\x91PPV[\x80\x82\x01\x80\x82\x11\x15a\n\xFBWa\n\xFBa\n\xBBV[\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\n\x9DW_\x80\xFD[`@\x81\x837`@\x82\x01`@\x82\x01_[`\x02\x81\x10\x15a\x0BkWg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x0BU\x83a\x0B\x14V[\x16\x83R` \x92\x83\x01\x92\x91\x90\x91\x01\x90`\x01\x01a\x0B:V[PPP`\x80\x81\x015`\x03\x81\x10a\x0B\x7FW_\x80\xFD[`\x80\x83\x01R`\xA0\x90\x81\x015\x91\x01RV[_a\x02\xC0\x82\x01\x90P\x85\x82R\x845` \x83\x01R` \x85\x015`@\x83\x01R`@\x85\x015``\x83\x01R``\x85\x015`\x80\x83\x01R`\x01`\x01`\xA0\x1B\x03a\x0B\xD3`\x80\x87\x01a\n\x87V[\x16`\xA0\x83\x01Ra\x0B\xE5`\xA0\x86\x01a\x0B\x14V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x16`\xC0\x85\x01R\x80a\x0C\x03`\xC0\x89\x01a\x0B\x14V[\x16`\xE0\x85\x01RPPa\x0C\x1Ca\x01\0\x83\x01`\xE0\x87\x01a\x0B+V[a\x0C.a\x01\xC0\x83\x01a\x01\xA0\x87\x01a\x0B+V[\x83a\x02\x80\x83\x01Ra\x0CKa\x02\xA0\x83\x01\x84`\x01`\x01`\xA0\x1B\x03\x16\x90RV[\x95\x94PPPPPV[_` \x82\x84\x03\x12\x15a\x0CdW_\x80\xFD[PQ\x91\x90PV[_` \x82\x84\x03\x12\x15a\x0C{W_\x80\xFD[\x81Q\x80\x15\x15\x81\x14a\x08\xD5W_\x80\xFD[_\x82Q\x80` \x85\x01\x84^_\x92\x01\x91\x82RP\x91\x90PV[` \x81R_\x82Q\x80` \x84\x01R\x80` \x85\x01`@\x85\x01^_`@\x82\x85\x01\x01R`@`\x1F\x19`\x1F\x83\x01\x16\x84\x01\x01\x91PP\x92\x91PPV\xFE\xA2dipfsX\"\x12 j+\xDE\xFF\x99\x88~\x86\xD0\x07\xF1f\x06\xCA\x0E1\xD1\xBDv\xB4\xD3\xF4\x10w3\x17\x92\xC2!3\xE6\xD1dsolcC\0\x08\x19\x003\xA2dipfsX\"\x12 \x1FY>\xC3\x0C\r\xF4\x11u\xE0(I\xFD\x08O\x12\xDC\xBF\xB1m:\x0C\xF5\xE2\xD1\xD3\x8A\xD8\xB4\t\xB6\xD8dsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f80fd5b5060043610610034575f3560e01c80639b505aa114610038578063dc082ad314610074575b5f80fd5b61004b6100463660046102aa565b610087565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b61004b6100823660046102aa565b610135565b5f805f801b848460405161009a9061029d565b73ffffffffffffffffffffffffffffffffffffffff909216825260208201526040018190604051809103905ff59050801580156100d9573d5f803e3d5ffd5b5060405173ffffffffffffffffffffffffffffffffffffffff808316825291925084918616907fd628317c6ebae87acc5dbfadeb835cb97692cc6935ea72bf37461e14a0bbee1e9060200160405180910390a390505b92915050565b5f610196604051806020016101499061029d565b601f1982820381018352601f90910116604081815273ffffffffffffffffffffffffffffffffffffffff87166020830152810185905260600160405160208183030381529060405261019d565b9392505050565b5f8083836040516020016101b2929190610303565b60408051808303601f1901815282825280516020918201207fff00000000000000000000000000000000000000000000000000000000000000828501523060601b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660218501525f60358501526055808501829052835180860390910181526075909401909252825192019190912090915073ffffffffffffffffffffffffffffffffffffffff81163b1561026b57915061012f9050565b6040517f215db33100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610e9f8061032083390190565b5f80604083850312156102bb575f80fd5b823573ffffffffffffffffffffffffffffffffffffffff811681146102de575f80fd5b946020939093013593505050565b5f81518060208401855e5f93019283525090919050565b5f61031761031183866102ec565b846102ec565b94935050505056fe60e060405234801561000f575f80fd5b50604051610e9f380380610e9f83398101604081905261002e916100e9565b816001600160a01b03166351ed6a306040518163ffffffff1660e01b8152600401602060405180830381865afa15801561006a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061008e9190610113565b6001600160a01b0316608052806100b857604051630b12999960e11b815260040160405180910390fd5b6001600160a01b0390911660a05260c052610133565b80516001600160a01b03811681146100e4575f80fd5b919050565b5f80604083850312156100fa575f80fd5b610103836100ce565b9150602083015190509250929050565b5f60208284031215610123575f80fd5b61012c826100ce565b9392505050565b60805160a05160c051610d0b6101945f395f818160cd01526104b101525f81816101c00152818161042b015281816104800152818161050e015261057e01525f8181610124015281816102b50152818161039701526104090152610d0b5ff3fe608060405234801561000f575f80fd5b50600436106100c4575f3560e01c80637476083b1161007d5780639451944d116100585780639451944d14610194578063956501bb1461019c578063cb23bcb5146101bb575f80fd5b80637476083b146101665780638391597114610179578063930412af1461018c575f80fd5b806330fc43ed116100ad57806330fc43ed1461010c57806351ed6a301461011f5780636b74d5151461015e575f80fd5b80632113ed21146100c857806326c0e5c514610102575b5f80fd5b6100ef7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b61010a6101e2565b005b61010a61011a366004610a59565b6101fc565b6101467f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100f9565b61010a61031d565b61010a610174366004610a59565b61032d565b61010a610187366004610a70565b6103f7565b61010a61050c565b61010a61057c565b6100ef6101aa366004610aa2565b5f6020819052908152604090205481565b6101467f000000000000000000000000000000000000000000000000000000000000000081565b335f908152602081905260409020546101fa906101fc565b565b805f03610235576040517f1f2a200500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b335f9081526020819052604090205480821115610293576040517fa47b7c6500000000000000000000000000000000000000000000000000000000815233600482015260248101839052604481018290526064015b60405180910390fd5b61029d8282610ae8565b335f818152602081905260409020919091556102e4907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169084610600565b60405182815233907f8108595eb6bad3acefa9da467d90cc2217686d5c5ac85460f8b7849c840645fc9060200160405180910390a25050565b61032561050c565b6101fa61057c565b805f03610366576040517f1f2a200500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b335f9081526020819052604081208054839290610384908490610b01565b909155506103bf90506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163330846106ae565b60405181815233907f0a7bb2e28cc4698aac06db79cf9163bfcc20719286cf59fa7d492ceda1b8edc29060200160405180910390a250565b60608101356104506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000836106ff565b6040517f50f32f680000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906350f32f68906104db90849086907f0000000000000000000000000000000000000000000000000000000000000000903090600401610b8f565b5f604051808303815f87803b1580156104f2575f80fd5b505af1158015610504573d5f803e3d5ffd5b505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166357ef4ab96040518163ffffffff1660e01b81526004015f604051808303815f87803b158015610564575f80fd5b505af1158015610576573d5f803e3d5ffd5b50505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663613739196040518163ffffffff1660e01b81526004016020604051808303815f875af11580156105d9573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105fd9190610c54565b50565b6040516001600160a01b0383166024820152604481018290526106a99084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526107e0565b505050565b6040516001600160a01b03808516602483015283166044820152606481018290526105769085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401610645565b6040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0383811660248301525f91839186169063dd62ed3e90604401602060405180830381865afa158015610766573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061078a9190610c54565b6107949190610b01565b6040516001600160a01b0385166024820152604481018290529091506105769085907f095ea7b30000000000000000000000000000000000000000000000000000000090606401610645565b5f610834826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166108c49092919063ffffffff16565b8051909150156106a957808060200190518101906108529190610c6b565b6106a95760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161028a565b60606108d284845f856108dc565b90505b9392505050565b6060824710156109545760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161028a565b6001600160a01b0385163b6109ab5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161028a565b5f80866001600160a01b031685876040516109c69190610c8a565b5f6040518083038185875af1925050503d805f8114610a00576040519150601f19603f3d011682016040523d82523d5f602084013e610a05565b606091505b5091509150610a15828286610a20565b979650505050505050565b60608315610a2f5750816108d5565b825115610a3f5782518084602001fd5b8160405162461bcd60e51b815260040161028a9190610ca0565b5f60208284031215610a69575f80fd5b5035919050565b5f6102608284031215610a81575f80fd5b50919050565b80356001600160a01b0381168114610a9d575f80fd5b919050565b5f60208284031215610ab2575f80fd5b6108d582610a87565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b81810381811115610afb57610afb610abb565b92915050565b80820180821115610afb57610afb610abb565b803567ffffffffffffffff81168114610a9d575f80fd5b604081833760408201604082015f5b6002811015610b6b5767ffffffffffffffff610b5583610b14565b1683526020928301929190910190600101610b3a565b505050608081013560038110610b7f575f80fd5b608083015260a090810135910152565b5f6102c082019050858252843560208301526020850135604083015260408501356060830152606085013560808301526001600160a01b03610bd360808701610a87565b1660a0830152610be560a08601610b14565b67ffffffffffffffff80821660c085015280610c0360c08901610b14565b1660e08501525050610c1c610100830160e08701610b2b565b610c2e6101c083016101a08701610b2b565b83610280830152610c4b6102a08301846001600160a01b03169052565b95945050505050565b5f60208284031215610c64575f80fd5b5051919050565b5f60208284031215610c7b575f80fd5b815180151581146108d5575f80fd5b5f82518060208501845e5f920191825250919050565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f8301168401019150509291505056fea26469706673582212206a2bdeff99887e86d007f16606ca0e31d1bd76b4d3f41077331792c22133e6d164736f6c63430008190033a26469706673582212201f593ec30c0df41175e02849fd084f12dcbfb16d3a0cf5e2d1d38ad8b409b6d864736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\x004W_5`\xE0\x1C\x80c\x9BPZ\xA1\x14a\08W\x80c\xDC\x08*\xD3\x14a\0tW[_\x80\xFD[a\0Ka\0F6`\x04a\x02\xAAV[a\0\x87V[`@Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16\x81R` \x01`@Q\x80\x91\x03\x90\xF3[a\0Ka\0\x826`\x04a\x02\xAAV[a\x015V[_\x80_\x80\x1B\x84\x84`@Qa\0\x9A\x90a\x02\x9DV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x92\x16\x82R` \x82\x01R`@\x01\x81\x90`@Q\x80\x91\x03\x90_\xF5\x90P\x80\x15\x80\x15a\0\xD9W=_\x80>=_\xFD[P`@Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x83\x16\x82R\x91\x92P\x84\x91\x86\x16\x90\x7F\xD6(1|n\xBA\xE8z\xCC]\xBF\xAD\xEB\x83\\\xB9v\x92\xCCi5\xEAr\xBF7F\x1E\x14\xA0\xBB\xEE\x1E\x90` \x01`@Q\x80\x91\x03\x90\xA3\x90P[\x92\x91PPV[_a\x01\x96`@Q\x80` \x01a\x01I\x90a\x02\x9DV[`\x1F\x19\x82\x82\x03\x81\x01\x83R`\x1F\x90\x91\x01\x16`@\x81\x81Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x87\x16` \x83\x01R\x81\x01\x85\x90R``\x01`@Q` \x81\x83\x03\x03\x81R\x90`@Ra\x01\x9DV[\x93\x92PPPV[_\x80\x83\x83`@Q` \x01a\x01\xB2\x92\x91\x90a\x03\x03V[`@\x80Q\x80\x83\x03`\x1F\x19\x01\x81R\x82\x82R\x80Q` \x91\x82\x01 \x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82\x85\x01R0``\x1B\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\x16`!\x85\x01R_`5\x85\x01R`U\x80\x85\x01\x82\x90R\x83Q\x80\x86\x03\x90\x91\x01\x81R`u\x90\x94\x01\x90\x92R\x82Q\x92\x01\x91\x90\x91 \x90\x91Ps\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16;\x15a\x02kW\x91Pa\x01/\x90PV[`@Q\x7F!]\xB31\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a\x0E\x9F\x80a\x03 \x839\x01\x90V[_\x80`@\x83\x85\x03\x12\x15a\x02\xBBW_\x80\xFD[\x825s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x02\xDEW_\x80\xFD[\x94` \x93\x90\x93\x015\x93PPPV[_\x81Q\x80` \x84\x01\x85^_\x93\x01\x92\x83RP\x90\x91\x90PV[_a\x03\x17a\x03\x11\x83\x86a\x02\xECV[\x84a\x02\xECV[\x94\x93PPPPV\xFE`\xE0`@R4\x80\x15a\0\x0FW_\x80\xFD[P`@Qa\x0E\x9F8\x03\x80a\x0E\x9F\x839\x81\x01`@\x81\x90Ra\0.\x91a\0\xE9V[\x81`\x01`\x01`\xA0\x1B\x03\x16cQ\xEDj0`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\0jW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\0\x8E\x91\x90a\x01\x13V[`\x01`\x01`\xA0\x1B\x03\x16`\x80R\x80a\0\xB8W`@Qc\x0B\x12\x99\x99`\xE1\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x01`\x01`\xA0\x1B\x03\x90\x91\x16`\xA0R`\xC0Ra\x013V[\x80Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\0\xE4W_\x80\xFD[\x91\x90PV[_\x80`@\x83\x85\x03\x12\x15a\0\xFAW_\x80\xFD[a\x01\x03\x83a\0\xCEV[\x91P` \x83\x01Q\x90P\x92P\x92\x90PV[_` \x82\x84\x03\x12\x15a\x01#W_\x80\xFD[a\x01,\x82a\0\xCEV[\x93\x92PPPV[`\x80Q`\xA0Q`\xC0Qa\r\x0Ba\x01\x94_9_\x81\x81`\xCD\x01Ra\x04\xB1\x01R_\x81\x81a\x01\xC0\x01R\x81\x81a\x04+\x01R\x81\x81a\x04\x80\x01R\x81\x81a\x05\x0E\x01Ra\x05~\x01R_\x81\x81a\x01$\x01R\x81\x81a\x02\xB5\x01R\x81\x81a\x03\x97\x01Ra\x04\t\x01Ra\r\x0B_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\0\xC4W_5`\xE0\x1C\x80ctv\x08;\x11a\0}W\x80c\x94Q\x94M\x11a\0XW\x80c\x94Q\x94M\x14a\x01\x94W\x80c\x95e\x01\xBB\x14a\x01\x9CW\x80c\xCB#\xBC\xB5\x14a\x01\xBBW_\x80\xFD[\x80ctv\x08;\x14a\x01fW\x80c\x83\x91Yq\x14a\x01yW\x80c\x93\x04\x12\xAF\x14a\x01\x8CW_\x80\xFD[\x80c0\xFCC\xED\x11a\0\xADW\x80c0\xFCC\xED\x14a\x01\x0CW\x80cQ\xEDj0\x14a\x01\x1FW\x80ckt\xD5\x15\x14a\x01^W_\x80\xFD[\x80c!\x13\xED!\x14a\0\xC8W\x80c&\xC0\xE5\xC5\x14a\x01\x02W[_\x80\xFD[a\0\xEF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81V[`@Q\x90\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\x01\na\x01\xE2V[\0[a\x01\na\x01\x1A6`\x04a\nYV[a\x01\xFCV[a\x01F\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01a\0\xF9V[a\x01\na\x03\x1DV[a\x01\na\x01t6`\x04a\nYV[a\x03-V[a\x01\na\x01\x876`\x04a\npV[a\x03\xF7V[a\x01\na\x05\x0CV[a\x01\na\x05|V[a\0\xEFa\x01\xAA6`\x04a\n\xA2V[_` \x81\x90R\x90\x81R`@\x90 T\x81V[a\x01F\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81V[3_\x90\x81R` \x81\x90R`@\x90 Ta\x01\xFA\x90a\x01\xFCV[V[\x80_\x03a\x025W`@Q\x7F\x1F* \x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[3_\x90\x81R` \x81\x90R`@\x90 T\x80\x82\x11\x15a\x02\x93W`@Q\x7F\xA4{|e\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R3`\x04\x82\x01R`$\x81\x01\x83\x90R`D\x81\x01\x82\x90R`d\x01[`@Q\x80\x91\x03\x90\xFD[a\x02\x9D\x82\x82a\n\xE8V[3_\x81\x81R` \x81\x90R`@\x90 \x91\x90\x91Ua\x02\xE4\x90\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x01`\x01`\xA0\x1B\x03\x16\x90\x84a\x06\0V[`@Q\x82\x81R3\x90\x7F\x81\x08Y^\xB6\xBA\xD3\xAC\xEF\xA9\xDAF}\x90\xCC\"\x17hm\\Z\xC8T`\xF8\xB7\x84\x9C\x84\x06E\xFC\x90` \x01`@Q\x80\x91\x03\x90\xA2PPV[a\x03%a\x05\x0CV[a\x01\xFAa\x05|V[\x80_\x03a\x03fW`@Q\x7F\x1F* \x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[3_\x90\x81R` \x81\x90R`@\x81 \x80T\x83\x92\x90a\x03\x84\x90\x84\x90a\x0B\x01V[\x90\x91UPa\x03\xBF\x90P`\x01`\x01`\xA0\x1B\x03\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1630\x84a\x06\xAEV[`@Q\x81\x81R3\x90\x7F\n{\xB2\xE2\x8C\xC4i\x8A\xAC\x06\xDBy\xCF\x91c\xBF\xCC q\x92\x86\xCFY\xFA}I,\xED\xA1\xB8\xED\xC2\x90` \x01`@Q\x80\x91\x03\x90\xA2PV[``\x81\x015a\x04P`\x01`\x01`\xA0\x1B\x03\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83a\x06\xFFV[`@Q\x7FP\xF3/h\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x01`\x01`\xA0\x1B\x03\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x90cP\xF3/h\x90a\x04\xDB\x90\x84\x90\x86\x90\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x900\x90`\x04\x01a\x0B\x8FV[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x04\xF2W_\x80\xFD[PZ\xF1\x15\x80\x15a\x05\x04W=_\x80>=_\xFD[PPPPPPV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x01`\x01`\xA0\x1B\x03\x16cW\xEFJ\xB9`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x05dW_\x80\xFD[PZ\xF1\x15\x80\x15a\x05vW=_\x80>=_\xFD[PPPPV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x01`\x01`\xA0\x1B\x03\x16ca79\x19`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x05\xD9W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x05\xFD\x91\x90a\x0CTV[PV[`@Q`\x01`\x01`\xA0\x1B\x03\x83\x16`$\x82\x01R`D\x81\x01\x82\x90Ra\x06\xA9\x90\x84\x90\x7F\xA9\x05\x9C\xBB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90`d\x01[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x93\x16\x92\x90\x92\x17\x90\x91Ra\x07\xE0V[PPPV[`@Q`\x01`\x01`\xA0\x1B\x03\x80\x85\x16`$\x83\x01R\x83\x16`D\x82\x01R`d\x81\x01\x82\x90Ra\x05v\x90\x85\x90\x7F#\xB8r\xDD\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90`\x84\x01a\x06EV[`@Q\x7F\xDDb\xED>\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R0`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x83\x81\x16`$\x83\x01R_\x91\x83\x91\x86\x16\x90c\xDDb\xED>\x90`D\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x07fW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x07\x8A\x91\x90a\x0CTV[a\x07\x94\x91\x90a\x0B\x01V[`@Q`\x01`\x01`\xA0\x1B\x03\x85\x16`$\x82\x01R`D\x81\x01\x82\x90R\x90\x91Pa\x05v\x90\x85\x90\x7F\t^\xA7\xB3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90`d\x01a\x06EV[_a\x084\x82`@Q\x80`@\x01`@R\x80` \x81R` \x01\x7FSafeERC20: low-level call failed\x81RP\x85`\x01`\x01`\xA0\x1B\x03\x16a\x08\xC4\x90\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[\x80Q\x90\x91P\x15a\x06\xA9W\x80\x80` \x01\x90Q\x81\x01\x90a\x08R\x91\x90a\x0CkV[a\x06\xA9W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`*`$\x82\x01R\x7FSafeERC20: ERC20 operation did n`D\x82\x01R\x7Fot succeed\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x02\x8AV[``a\x08\xD2\x84\x84_\x85a\x08\xDCV[\x90P[\x93\x92PPPV[``\x82G\x10\x15a\tTW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FAddress: insufficient balance fo`D\x82\x01R\x7Fr call\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x02\x8AV[`\x01`\x01`\xA0\x1B\x03\x85\x16;a\t\xABW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1D`$\x82\x01R\x7FAddress: call to non-contract\0\0\0`D\x82\x01R`d\x01a\x02\x8AV[_\x80\x86`\x01`\x01`\xA0\x1B\x03\x16\x85\x87`@Qa\t\xC6\x91\x90a\x0C\x8AV[_`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80_\x81\x14a\n\0W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\n\x05V[``\x91P[P\x91P\x91Pa\n\x15\x82\x82\x86a\n V[\x97\x96PPPPPPPV[``\x83\x15a\n/WP\x81a\x08\xD5V[\x82Q\x15a\n?W\x82Q\x80\x84` \x01\xFD[\x81`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x02\x8A\x91\x90a\x0C\xA0V[_` \x82\x84\x03\x12\x15a\niW_\x80\xFD[P5\x91\x90PV[_a\x02`\x82\x84\x03\x12\x15a\n\x81W_\x80\xFD[P\x91\x90PV[\x805`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\n\x9DW_\x80\xFD[\x91\x90PV[_` \x82\x84\x03\x12\x15a\n\xB2W_\x80\xFD[a\x08\xD5\x82a\n\x87V[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[\x81\x81\x03\x81\x81\x11\x15a\n\xFBWa\n\xFBa\n\xBBV[\x92\x91PPV[\x80\x82\x01\x80\x82\x11\x15a\n\xFBWa\n\xFBa\n\xBBV[\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\n\x9DW_\x80\xFD[`@\x81\x837`@\x82\x01`@\x82\x01_[`\x02\x81\x10\x15a\x0BkWg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x0BU\x83a\x0B\x14V[\x16\x83R` \x92\x83\x01\x92\x91\x90\x91\x01\x90`\x01\x01a\x0B:V[PPP`\x80\x81\x015`\x03\x81\x10a\x0B\x7FW_\x80\xFD[`\x80\x83\x01R`\xA0\x90\x81\x015\x91\x01RV[_a\x02\xC0\x82\x01\x90P\x85\x82R\x845` \x83\x01R` \x85\x015`@\x83\x01R`@\x85\x015``\x83\x01R``\x85\x015`\x80\x83\x01R`\x01`\x01`\xA0\x1B\x03a\x0B\xD3`\x80\x87\x01a\n\x87V[\x16`\xA0\x83\x01Ra\x0B\xE5`\xA0\x86\x01a\x0B\x14V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x16`\xC0\x85\x01R\x80a\x0C\x03`\xC0\x89\x01a\x0B\x14V[\x16`\xE0\x85\x01RPPa\x0C\x1Ca\x01\0\x83\x01`\xE0\x87\x01a\x0B+V[a\x0C.a\x01\xC0\x83\x01a\x01\xA0\x87\x01a\x0B+V[\x83a\x02\x80\x83\x01Ra\x0CKa\x02\xA0\x83\x01\x84`\x01`\x01`\xA0\x1B\x03\x16\x90RV[\x95\x94PPPPPV[_` \x82\x84\x03\x12\x15a\x0CdW_\x80\xFD[PQ\x91\x90PV[_` \x82\x84\x03\x12\x15a\x0C{W_\x80\xFD[\x81Q\x80\x15\x15\x81\x14a\x08\xD5W_\x80\xFD[_\x82Q\x80` \x85\x01\x84^_\x92\x01\x91\x82RP\x91\x90PV[` \x81R_\x82Q\x80` \x84\x01R\x80` \x85\x01`@\x85\x01^_`@\x82\x85\x01\x01R`@`\x1F\x19`\x1F\x83\x01\x16\x84\x01\x01\x91PP\x92\x91PPV\xFE\xA2dipfsX\"\x12 j+\xDE\xFF\x99\x88~\x86\xD0\x07\xF1f\x06\xCA\x0E1\xD1\xBDv\xB4\xD3\xF4\x10w3\x17\x92\xC2!3\xE6\xD1dsolcC\0\x08\x19\x003\xA2dipfsX\"\x12 \x1FY>\xC3\x0C\r\xF4\x11u\xE0(I\xFD\x08O\x12\xDC\xBF\xB1m:\x0C\xF5\xE2\xD1\xD3\x8A\xD8\xB4\t\xB6\xD8dsolcC\0\x08\x19\x003",
    );
    /**Custom error with signature `PoolDoesntExist()` and selector `0x215db331`.
```solidity
error PoolDoesntExist();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct PoolDoesntExist {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<PoolDoesntExist> for UnderlyingRustTuple<'_> {
            fn from(value: PoolDoesntExist) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for PoolDoesntExist {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for PoolDoesntExist {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "PoolDoesntExist()";
            const SELECTOR: [u8; 4] = [33u8, 93u8, 179u8, 49u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Event with signature `NewAssertionPoolCreated(address,bytes32,address)` and selector `0xd628317c6ebae87acc5dbfadeb835cb97692cc6935ea72bf37461e14a0bbee1e`.
```solidity
event NewAssertionPoolCreated(address indexed rollup, bytes32 indexed _assertionHash, address assertionPool);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct NewAssertionPoolCreated {
        #[allow(missing_docs)]
        pub rollup: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _assertionHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub assertionPool: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for NewAssertionPoolCreated {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            const SIGNATURE: &'static str = "NewAssertionPoolCreated(address,bytes32,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                214u8,
                40u8,
                49u8,
                124u8,
                110u8,
                186u8,
                232u8,
                122u8,
                204u8,
                93u8,
                191u8,
                173u8,
                235u8,
                131u8,
                92u8,
                185u8,
                118u8,
                146u8,
                204u8,
                105u8,
                53u8,
                234u8,
                114u8,
                191u8,
                55u8,
                70u8,
                30u8,
                20u8,
                160u8,
                187u8,
                238u8,
                30u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    rollup: topics.1,
                    _assertionHash: topics.2,
                    assertionPool: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.assertionPool,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.rollup.clone(),
                    self._assertionHash.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.rollup,
                );
                out[2usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self._assertionHash);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for NewAssertionPoolCreated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&NewAssertionPoolCreated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &NewAssertionPoolCreated,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Function with signature `createPool(address,bytes32)` and selector `0x9b505aa1`.
```solidity
function createPool(address _rollup, bytes32 _assertionHash) external returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct createPoolCall {
        #[allow(missing_docs)]
        pub _rollup: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _assertionHash: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`createPool(address,bytes32)`](createPoolCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct createPoolReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<createPoolCall> for UnderlyingRustTuple<'_> {
                fn from(value: createPoolCall) -> Self {
                    (value._rollup, value._assertionHash)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for createPoolCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _rollup: tuple.0,
                        _assertionHash: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<createPoolReturn> for UnderlyingRustTuple<'_> {
                fn from(value: createPoolReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for createPoolReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for createPoolCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = createPoolReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "createPool(address,bytes32)";
            const SELECTOR: [u8; 4] = [155u8, 80u8, 90u8, 161u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._rollup,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self._assertionHash),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getPool(address,bytes32)` and selector `0xdc082ad3`.
```solidity
function getPool(address _rollup, bytes32 _assertionHash) external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getPoolCall {
        #[allow(missing_docs)]
        pub _rollup: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _assertionHash: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`getPool(address,bytes32)`](getPoolCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getPoolReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getPoolCall> for UnderlyingRustTuple<'_> {
                fn from(value: getPoolCall) -> Self {
                    (value._rollup, value._assertionHash)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getPoolCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _rollup: tuple.0,
                        _assertionHash: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getPoolReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getPoolReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getPoolReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getPoolCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getPoolReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getPool(address,bytes32)";
            const SELECTOR: [u8; 4] = [220u8, 8u8, 42u8, 211u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._rollup,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self._assertionHash),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`AssertionStakingPoolCreator`](self) function calls.
    pub enum AssertionStakingPoolCreatorCalls {
        #[allow(missing_docs)]
        createPool(createPoolCall),
        #[allow(missing_docs)]
        getPool(getPoolCall),
    }
    #[automatically_derived]
    impl AssertionStakingPoolCreatorCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [155u8, 80u8, 90u8, 161u8],
            [220u8, 8u8, 42u8, 211u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for AssertionStakingPoolCreatorCalls {
        const NAME: &'static str = "AssertionStakingPoolCreatorCalls";
        const MIN_DATA_LENGTH: usize = 64usize;
        const COUNT: usize = 2usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::createPool(_) => {
                    <createPoolCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getPool(_) => <getPoolCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<AssertionStakingPoolCreatorCalls>] = &[
                {
                    fn createPool(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AssertionStakingPoolCreatorCalls> {
                        <createPoolCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AssertionStakingPoolCreatorCalls::createPool)
                    }
                    createPool
                },
                {
                    fn getPool(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AssertionStakingPoolCreatorCalls> {
                        <getPoolCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AssertionStakingPoolCreatorCalls::getPool)
                    }
                    getPool
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::createPool(inner) => {
                    <createPoolCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::getPool(inner) => {
                    <getPoolCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::createPool(inner) => {
                    <createPoolCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getPool(inner) => {
                    <getPoolCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    ///Container for all the [`AssertionStakingPoolCreator`](self) custom errors.
    pub enum AssertionStakingPoolCreatorErrors {
        #[allow(missing_docs)]
        PoolDoesntExist(PoolDoesntExist),
    }
    #[automatically_derived]
    impl AssertionStakingPoolCreatorErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[[33u8, 93u8, 179u8, 49u8]];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for AssertionStakingPoolCreatorErrors {
        const NAME: &'static str = "AssertionStakingPoolCreatorErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 1usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::PoolDoesntExist(_) => {
                    <PoolDoesntExist as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<AssertionStakingPoolCreatorErrors>] = &[
                {
                    fn PoolDoesntExist(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AssertionStakingPoolCreatorErrors> {
                        <PoolDoesntExist as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AssertionStakingPoolCreatorErrors::PoolDoesntExist)
                    }
                    PoolDoesntExist
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::PoolDoesntExist(inner) => {
                    <PoolDoesntExist as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::PoolDoesntExist(inner) => {
                    <PoolDoesntExist as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`AssertionStakingPoolCreator`](self) events.
    pub enum AssertionStakingPoolCreatorEvents {
        #[allow(missing_docs)]
        NewAssertionPoolCreated(NewAssertionPoolCreated),
    }
    #[automatically_derived]
    impl AssertionStakingPoolCreatorEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                214u8,
                40u8,
                49u8,
                124u8,
                110u8,
                186u8,
                232u8,
                122u8,
                204u8,
                93u8,
                191u8,
                173u8,
                235u8,
                131u8,
                92u8,
                185u8,
                118u8,
                146u8,
                204u8,
                105u8,
                53u8,
                234u8,
                114u8,
                191u8,
                55u8,
                70u8,
                30u8,
                20u8,
                160u8,
                187u8,
                238u8,
                30u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for AssertionStakingPoolCreatorEvents {
        const NAME: &'static str = "AssertionStakingPoolCreatorEvents";
        const COUNT: usize = 1usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <NewAssertionPoolCreated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <NewAssertionPoolCreated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::NewAssertionPoolCreated)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for AssertionStakingPoolCreatorEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::NewAssertionPoolCreated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::NewAssertionPoolCreated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`AssertionStakingPoolCreator`](self) contract instance.

See the [wrapper's documentation](`AssertionStakingPoolCreatorInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> AssertionStakingPoolCreatorInstance<T, P, N> {
        AssertionStakingPoolCreatorInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<AssertionStakingPoolCreatorInstance<T, P, N>>,
    > {
        AssertionStakingPoolCreatorInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        AssertionStakingPoolCreatorInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`AssertionStakingPoolCreator`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`AssertionStakingPoolCreator`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct AssertionStakingPoolCreatorInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for AssertionStakingPoolCreatorInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("AssertionStakingPoolCreatorInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AssertionStakingPoolCreatorInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`AssertionStakingPoolCreator`](self) contract instance.

See the [wrapper's documentation](`AssertionStakingPoolCreatorInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<AssertionStakingPoolCreatorInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> AssertionStakingPoolCreatorInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(
            self,
        ) -> AssertionStakingPoolCreatorInstance<T, P, N> {
            AssertionStakingPoolCreatorInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AssertionStakingPoolCreatorInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`createPool`] function.
        pub fn createPool(
            &self,
            _rollup: alloy::sol_types::private::Address,
            _assertionHash: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, createPoolCall, N> {
            self.call_builder(
                &createPoolCall {
                    _rollup,
                    _assertionHash,
                },
            )
        }
        ///Creates a new call builder for the [`getPool`] function.
        pub fn getPool(
            &self,
            _rollup: alloy::sol_types::private::Address,
            _assertionHash: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, getPoolCall, N> {
            self.call_builder(
                &getPoolCall {
                    _rollup,
                    _assertionHash,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AssertionStakingPoolCreatorInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`NewAssertionPoolCreated`] event.
        pub fn NewAssertionPoolCreated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, NewAssertionPoolCreated, N> {
            self.event_filter::<NewAssertionPoolCreated>()
        }
    }
}
